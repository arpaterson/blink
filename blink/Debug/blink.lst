
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001406c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080141f4  080141f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080141f8  080141f8  0001c1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000060  20000000  080141fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .jcr          00000004  20000060  0801425c  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000028  20000064  08014260  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000008c  08014260  0002008c  2**0
                  ALLOC
  8 .ARM.attributes 0000002f  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_line   000092b1  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00011d3a  00000000  00000000  00029344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000030f9  00000000  00000000  0003b07e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000017b0  00000000  00000000  0003e178  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001578  00000000  00000000  0003f928  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008b16  00000000  00000000  00040ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006cec  00000000  00000000  000499b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  000506a2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ad0  00000000  00000000  000506d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 0464 	movw	r4, #100	; 0x64
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f244 10d8 	movw	r0, #16856	; 0x41d8
 80001a4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f244 10d8 	movw	r0, #16856	; 0x41d8
 80001c4:	f240 0168 	movw	r1, #104	; 0x68
 80001c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 0060 	movw	r0, #96	; 0x60
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop
 80001f0:	080141fc 	.word	0x080141fc
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	20000064 	.word	0x20000064
 8000200:	2000008c 	.word	0x2000008c

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f092 0f00 	teq	r2, #0
 80004ee:	bf14      	ite	ne
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e720      	b.n	8000348 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aedc 	beq.w	80002f6 <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6c1      	b.n	80002f6 <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__gedf2>:
 8000574:	f04f 3cff 	mov.w	ip, #4294967295
 8000578:	e006      	b.n	8000588 <__cmpdf2+0x4>
 800057a:	bf00      	nop

0800057c <__ledf2>:
 800057c:	f04f 0c01 	mov.w	ip, #1
 8000580:	e002      	b.n	8000588 <__cmpdf2+0x4>
 8000582:	bf00      	nop

08000584 <__cmpdf2>:
 8000584:	f04f 0c01 	mov.w	ip, #1
 8000588:	f84d cd04 	str.w	ip, [sp, #-4]!
 800058c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000598:	bf18      	it	ne
 800059a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800059e:	d01b      	beq.n	80005d8 <__cmpdf2+0x54>
 80005a0:	b001      	add	sp, #4
 80005a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005a6:	bf0c      	ite	eq
 80005a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005ac:	ea91 0f03 	teqne	r1, r3
 80005b0:	bf02      	ittt	eq
 80005b2:	ea90 0f02 	teqeq	r0, r2
 80005b6:	2000      	moveq	r0, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	f110 0f00 	cmn.w	r0, #0
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf58      	it	pl
 80005c4:	4299      	cmppl	r1, r3
 80005c6:	bf08      	it	eq
 80005c8:	4290      	cmpeq	r0, r2
 80005ca:	bf2c      	ite	cs
 80005cc:	17d8      	asrcs	r0, r3, #31
 80005ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d2:	f040 0001 	orr.w	r0, r0, #1
 80005d6:	4770      	bx	lr
 80005d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d102      	bne.n	80005e8 <__cmpdf2+0x64>
 80005e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005e6:	d107      	bne.n	80005f8 <__cmpdf2+0x74>
 80005e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f0:	d1d6      	bne.n	80005a0 <__cmpdf2+0x1c>
 80005f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005f6:	d0d3      	beq.n	80005a0 <__cmpdf2+0x1c>
 80005f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <__aeabi_cdrcmple>:
 8000600:	4684      	mov	ip, r0
 8000602:	4610      	mov	r0, r2
 8000604:	4662      	mov	r2, ip
 8000606:	468c      	mov	ip, r1
 8000608:	4619      	mov	r1, r3
 800060a:	4663      	mov	r3, ip
 800060c:	e000      	b.n	8000610 <__aeabi_cdcmpeq>
 800060e:	bf00      	nop

08000610 <__aeabi_cdcmpeq>:
 8000610:	b501      	push	{r0, lr}
 8000612:	f7ff ffb7 	bl	8000584 <__cmpdf2>
 8000616:	2800      	cmp	r0, #0
 8000618:	bf48      	it	mi
 800061a:	f110 0f00 	cmnmi.w	r0, #0
 800061e:	bd01      	pop	{r0, pc}

08000620 <__aeabi_dcmpeq>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff fff4 	bl	8000610 <__aeabi_cdcmpeq>
 8000628:	bf0c      	ite	eq
 800062a:	2001      	moveq	r0, #1
 800062c:	2000      	movne	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmplt>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffea 	bl	8000610 <__aeabi_cdcmpeq>
 800063c:	bf34      	ite	cc
 800063e:	2001      	movcc	r0, #1
 8000640:	2000      	movcs	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmple>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffe0 	bl	8000610 <__aeabi_cdcmpeq>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpge>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffce 	bl	8000600 <__aeabi_cdrcmple>
 8000664:	bf94      	ite	ls
 8000666:	2001      	movls	r0, #1
 8000668:	2000      	movhi	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_dcmpgt>:
 8000670:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000674:	f7ff ffc4 	bl	8000600 <__aeabi_cdrcmple>
 8000678:	bf34      	ite	cc
 800067a:	2001      	movcc	r0, #1
 800067c:	2000      	movcs	r0, #0
 800067e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000682:	bf00      	nop

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f244 16f4 	movw	r6, #16884	; 0x41f4
 800068a:	f244 15f4 	movw	r5, #16884	; 0x41f4
 800068e:	f6c0 0601 	movt	r6, #2049	; 0x801
 8000692:	f6c0 0501 	movt	r5, #2049	; 0x801
 8000696:	1b76      	subs	r6, r6, r5
 8000698:	10b6      	asrs	r6, r6, #2
 800069a:	d006      	beq.n	80006aa <__libc_init_array+0x26>
 800069c:	2400      	movs	r4, #0
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	3401      	adds	r4, #1
 80006a4:	4798      	blx	r3
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d1f9      	bne.n	800069e <__libc_init_array+0x1a>
 80006aa:	f244 16f8 	movw	r6, #16888	; 0x41f8
 80006ae:	f244 15f4 	movw	r5, #16884	; 0x41f4
 80006b2:	f6c0 0601 	movt	r6, #2049	; 0x801
 80006b6:	f6c0 0501 	movt	r5, #2049	; 0x801
 80006ba:	1b76      	subs	r6, r6, r5
 80006bc:	f013 fd8e 	bl	80141dc <_init>
 80006c0:	10b6      	asrs	r6, r6, #2
 80006c2:	d006      	beq.n	80006d2 <__libc_init_array+0x4e>
 80006c4:	2400      	movs	r4, #0
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	3401      	adds	r4, #1
 80006cc:	4798      	blx	r3
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d1f9      	bne.n	80006c6 <__libc_init_array+0x42>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}

080006d4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006d6:	f000 b804 	b.w	80006e2 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 80006dc:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006de:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006e0:	3104      	adds	r1, #4

080006e2 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 80006e6:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006e8:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006ea:	f4ff aff6 	bcc.w	80006da <CopyDataInit>
  ldr  r2, =_sbss
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 80006f0:	f000 b803 	b.w	80006fa <LoopFillZerobss>

080006f4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006f4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006f6:	f842 3b04 	str.w	r3, [r2], #4

080006fa <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <LoopFillZerobss+0x32>)
  cmp  r2, r3
 80006fc:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006fe:	f4ff aff9 	bcc.w	80006f4 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 8000704:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8000706:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 800070a:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800070c:	f000 f824 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000710:	f7ff ffb8 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000714:	f000 f810 	bl	8000738 <main>
  bx  lr    
 8000718:	4770      	bx	lr
 800071a:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800071c:	080141fc 	.word	0x080141fc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000724:	20000060 	.word	0x20000060
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000728:	20000064 	.word	0x20000064
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800072c:	2000008c 	.word	0x2000008c
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8000730:	e000ed88 	.word	0xe000ed88

08000734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	f7ff bffe 	b.w	8000734 <ADC_IRQHandler>

08000738 <main>:
/**
  * @brief  Main program.
  * @param
  * @retval
  */
int main(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	STM32f4_Discovery_LCD_Init();
 800073c:	f000 febc 	bl	80014b8 <STM32f4_Discovery_LCD_Init>
	LCD_RGB_Test();
 8000740:	f001 f820 	bl	8001784 <LCD_RGB_Test>
	LCD_DrawCircle(50,50,10);
 8000744:	f04f 0032 	mov.w	r0, #50	; 0x32
 8000748:	f04f 0132 	mov.w	r1, #50	; 0x32
 800074c:	f04f 020a 	mov.w	r2, #10
 8000750:	f001 fb32 	bl	8001db8 <LCD_DrawCircle>
	while(1){

	}
 8000754:	e7fe      	b.n	8000754 <main+0x1c>
 8000756:	bf00      	nop

08000758 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800075c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000760:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000764:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000768:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800076c:	6812      	ldr	r2, [r2, #0]
 800076e:	f042 0201 	orr.w	r2, r2, #1
 8000772:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000774:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800077c:	f04f 0200 	mov.w	r2, #0
 8000780:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000782:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000786:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800078a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800078e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000792:	6812      	ldr	r2, [r2, #0]
 8000794:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000798:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800079c:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800079e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007a6:	f243 0210 	movw	r2, #12304	; 0x3010
 80007aa:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80007ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007c0:	6812      	ldr	r2, [r2, #0]
 80007c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007c6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007d0:	f04f 0200 	mov.w	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80007d6:	f000 f8c1 	bl	800095c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007da:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80007de:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80007e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80007e6:	609a      	str	r2, [r3, #8]
#endif
}
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop

080007ec <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b087      	sub	sp, #28
 80007f0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80007f2:	f04f 0300 	mov.w	r3, #0
 80007f6:	613b      	str	r3, [r7, #16]
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
 80007fe:	f04f 0302 	mov.w	r3, #2
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	f04f 0302 	mov.w	r3, #2
 800080e:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000810:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	f003 030c 	and.w	r3, r3, #12
 800081e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000820:	693b      	ldr	r3, [r7, #16]
 8000822:	2b04      	cmp	r3, #4
 8000824:	d00d      	beq.n	8000842 <SystemCoreClockUpdate+0x56>
 8000826:	2b08      	cmp	r3, #8
 8000828:	d015      	beq.n	8000856 <SystemCoreClockUpdate+0x6a>
 800082a:	2b00      	cmp	r3, #0
 800082c:	d169      	bne.n	8000902 <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800082e:	f240 0304 	movw	r3, #4
 8000832:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000836:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800083a:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800083e:	601a      	str	r2, [r3, #0]
      break;
 8000840:	e069      	b.n	8000916 <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000842:	f240 0304 	movw	r3, #4
 8000846:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800084a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 800084e:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000852:	601a      	str	r2, [r3, #0]
      break;
 8000854:	e05f      	b.n	8000916 <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000856:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800085a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000864:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8000868:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800086a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800086e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000878:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d014      	beq.n	80008aa <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000880:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000884:	f2c0 037a 	movt	r3, #122	; 0x7a
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	fbb3 f2f2 	udiv	r2, r3, r2
 800088e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000892:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000896:	6859      	ldr	r1, [r3, #4]
 8000898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800089c:	400b      	ands	r3, r1
 800089e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80008a2:	fb03 f302 	mul.w	r3, r3, r2
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	e013      	b.n	80008d2 <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008aa:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80008ae:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80008b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008c0:	6859      	ldr	r1, [r3, #4]
 80008c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80008c6:	400b      	ands	r3, r1
 80008c8:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80008cc:	fb03 f302 	mul.w	r3, r3, r2
 80008d0:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80008d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80008e0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80008e4:	f103 0301 	add.w	r3, r3, #1
 80008e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008ec:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80008ee:	697a      	ldr	r2, [r7, #20]
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80008f6:	f240 0304 	movw	r3, #4
 80008fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008fe:	601a      	str	r2, [r3, #0]
      break;
 8000900:	e009      	b.n	8000916 <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 8000902:	f240 0304 	movw	r3, #4
 8000906:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800090a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800090e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000912:	601a      	str	r2, [r3, #0]
      break;
 8000914:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000916:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800091a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000924:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8000928:	f240 0308 	movw	r3, #8
 800092c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000930:	5c9b      	ldrb	r3, [r3, r2]
 8000932:	b2db      	uxtb	r3, r3
 8000934:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000936:	f240 0304 	movw	r3, #4
 800093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	fa22 f203 	lsr.w	r2, r2, r3
 8000946:	f240 0304 	movw	r3, #4
 800094a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	f107 071c 	add.w	r7, r7, #28
 8000954:	46bd      	mov	sp, r7
 8000956:	bc80      	pop	{r7}
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000962:	f04f 0300 	mov.w	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	f04f 0300 	mov.w	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800096e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000976:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800097a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000984:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000986:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800098a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000994:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f103 0301 	add.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d103      	bne.n	80009ac <SetSysClock+0x50>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009aa:	d1ec      	bne.n	8000986 <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80009be:	f04f 0301 	mov.w	r3, #1
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	e002      	b.n	80009cc <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009c6:	f04f 0300 	mov.w	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	f040 8082 	bne.w	8000ad8 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80009e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ea:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80009ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80009f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80009f4:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80009f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80009fc:	6812      	ldr	r2, [r2, #0]
 80009fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a02:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a14:	6892      	ldr	r2, [r2, #8]
 8000a16:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a28:	6892      	ldr	r2, [r2, #8]
 8000a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a2e:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000a30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a38:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a3c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a40:	6892      	ldr	r2, [r2, #8]
 8000a42:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000a46:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a50:	f245 4208 	movw	r2, #21512	; 0x5408
 8000a54:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000a58:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a6a:	6812      	ldr	r2, [r2, #0]
 8000a6c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000a70:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000a72:	bf00      	nop
 8000a74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0f6      	beq.n	8000a74 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000a86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000a8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a8e:	f240 6205 	movw	r2, #1541	; 0x605
 8000a92:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a9c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000aa0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000aa4:	6892      	ldr	r2, [r2, #8]
 8000aa6:	f022 0203 	bic.w	r2, r2, #3
 8000aaa:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000aac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ab0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ab4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ab8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000abc:	6892      	ldr	r2, [r2, #8]
 8000abe:	f042 0202 	orr.w	r2, r2, #2
 8000ac2:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000ac4:	bf00      	nop
 8000ac6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f003 030c 	and.w	r3, r3, #12
 8000ad4:	2b08      	cmp	r3, #8
 8000ad6:	d1f6      	bne.n	8000ac6 <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000ad8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000adc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ae0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ae4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ae8:	6892      	ldr	r2, [r2, #8]
 8000aea:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000aee:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000af0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000af4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000af8:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000afc:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8000b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8000b04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b0c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b1a:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000b1c:	bf00      	nop
 8000b1e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d0f6      	beq.n	8000b1e <SetSysClock+0x1c2>
  {
  }
}
 8000b30:	f107 070c 	add.w	r7, r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bc80      	pop	{r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	f244 13b0 	movw	r3, #16816	; 0x41b0
 8000b4c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f04f 0101 	mov.w	r1, #1
 8000b5a:	f00b f81d 	bl	800bb98 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8000b5e:	79fa      	ldrb	r2, [r7, #7]
 8000b60:	f244 13a8 	movw	r3, #16808	; 0x41a8
 8000b64:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000b68:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000b6e:	f04f 0301 	mov.w	r3, #1
 8000b72:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000b7a:	f04f 0301 	mov.w	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000b80:	f04f 0302 	mov.w	r3, #2
 8000b84:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	f240 0338 	movw	r3, #56	; 0x38
 8000b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f008 fdb6 	bl	800970c <GPIO_Init>
}
 8000ba0:	f107 0710 	add.w	r7, r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 8000bb2:	79fa      	ldrb	r2, [r7, #7]
 8000bb4:	f240 0338 	movw	r3, #56	; 0x38
 8000bb8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bbc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bc0:	79f9      	ldrb	r1, [r7, #7]
 8000bc2:	f244 13a8 	movw	r3, #16808	; 0x41a8
 8000bc6:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000bca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000bce:	8313      	strh	r3, [r2, #24]
}
 8000bd0:	f107 070c 	add.w	r7, r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop

08000bdc <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8000be6:	79fa      	ldrb	r2, [r7, #7]
 8000be8:	f240 0338 	movw	r3, #56	; 0x38
 8000bec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bf4:	79f9      	ldrb	r1, [r7, #7]
 8000bf6:	f244 13a8 	movw	r3, #16808	; 0x41a8
 8000bfa:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000bfe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000c02:	8353      	strh	r3, [r2, #26]
}
 8000c04:	f107 070c 	add.w	r7, r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000c1a:	79fa      	ldrb	r2, [r7, #7]
 8000c1c:	f240 0338 	movw	r3, #56	; 0x38
 8000c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c28:	79f9      	ldrb	r1, [r7, #7]
 8000c2a:	f240 0338 	movw	r3, #56	; 0x38
 8000c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000c36:	6959      	ldr	r1, [r3, #20]
 8000c38:	79f8      	ldrb	r0, [r7, #7]
 8000c3a:	f244 13a8 	movw	r3, #16808	; 0x41a8
 8000c3e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000c42:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8000c46:	404b      	eors	r3, r1
 8000c48:	6153      	str	r3, [r2, #20]
}
 8000c4a:	f107 070c 	add.w	r7, r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr

08000c54 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	71fa      	strb	r2, [r7, #7]
 8000c60:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8000c62:	79fa      	ldrb	r2, [r7, #7]
 8000c64:	f244 13c4 	movw	r3, #16836	; 0x41c4
 8000c68:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f04f 0101 	mov.w	r1, #1
 8000c76:	f00a ff8f 	bl	800bb98 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8000c7a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000c7e:	f04f 0101 	mov.w	r1, #1
 8000c82:	f00b f831 	bl	800bce8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000c86:	f04f 0300 	mov.w	r3, #0
 8000c8a:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8000c98:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000c9c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	f240 0348 	movw	r3, #72	; 0x48
 8000ca8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f107 0318 	add.w	r3, r7, #24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f008 fd28 	bl	800970c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000cbc:	79bb      	ldrb	r3, [r7, #6]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d13a      	bne.n	8000d38 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 8000cc2:	79fa      	ldrb	r2, [r7, #7]
 8000cc4:	f244 13cc 	movw	r3, #16844	; 0x41cc
 8000cc8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000ccc:	5c9a      	ldrb	r2, [r3, r2]
 8000cce:	79f9      	ldrb	r1, [r7, #7]
 8000cd0:	f244 13d0 	movw	r3, #16848	; 0x41d0
 8000cd4:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000cd8:	5c5b      	ldrb	r3, [r3, r1]
 8000cda:	4610      	mov	r0, r2
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f00e f893 	bl	800ee08 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	f244 13c8 	movw	r3, #16840	; 0x41c8
 8000ce8:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000cec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000cf0:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8000cf2:	f04f 0300 	mov.w	r3, #0
 8000cf6:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000cf8:	f04f 0308 	mov.w	r3, #8
 8000cfc:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000cfe:	f04f 0301 	mov.w	r3, #1
 8000d02:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f007 f82f 	bl	8007d6c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000d0e:	79fa      	ldrb	r2, [r7, #7]
 8000d10:	f244 13d4 	movw	r3, #16852	; 0x41d4
 8000d14:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000d18:	5c9b      	ldrb	r3, [r3, r2]
 8000d1a:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000d1c:	f04f 030f 	mov.w	r3, #15
 8000d20:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8000d22:	f04f 030f 	mov.w	r3, #15
 8000d26:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000d28:	f04f 0301 	mov.w	r3, #1
 8000d2c:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4618      	mov	r0, r3
 8000d34:	f001 ff62 	bl	8002bfc <NVIC_Init>
  }
}
 8000d38:	f107 0720 	add.w	r7, r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000d4a:	79fa      	ldrb	r2, [r7, #7]
 8000d4c:	f240 0348 	movw	r3, #72	; 0x48
 8000d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000d54:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d58:	79f9      	ldrb	r1, [r7, #7]
 8000d5a:	f244 13c0 	movw	r3, #16832	; 0x41c0
 8000d5e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000d62:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f008 fdb1 	bl	80098d0 <GPIO_ReadInputDataBit>
 8000d6e:	4603      	mov	r3, r0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	f107 0708 	add.w	r7, r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop

08000d7c <LCD_DeInit>:
  * @brief  LCD Default FSMC Init
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /*!< LCD Display Off */
  LCD_DisplayOff();
 8000d82:	f000 fd9f 	bl	80018c4 <LCD_DisplayOff>

  /* BANK 3 (of NOR/SRAM Bank 1~4) is disabled */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
 8000d86:	f04f 0004 	mov.w	r0, #4
 8000d8a:	f04f 0101 	mov.w	r1, #1
 8000d8e:	f007 ff83 	bl	8008c98 <FSMC_NORSRAMCmd>
  
  /*!< LCD_SPI DeInit */
  FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM3);
 8000d92:	f04f 0004 	mov.w	r0, #4
 8000d96:	f007 fe21 	bl	80089dc <FSMC_NORSRAMDeInit>
   
/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 8000d9a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d9e:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000dac:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000db0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000db4:	463b      	mov	r3, r7
 8000db6:	4619      	mov	r1, r3
 8000db8:	f008 fca8 	bl	800970c <GPIO_Init>
 
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_MCO);
 8000dbc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000dc0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dc4:	f04f 0100 	mov.w	r1, #0
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f008 fe2c 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_MCO);
 8000dd0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000dd4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dd8:	f04f 0101 	mov.w	r1, #1
 8000ddc:	f04f 0200 	mov.w	r2, #0
 8000de0:	f008 fe22 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_MCO);
 8000de4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000de8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000dec:	f04f 0108 	mov.w	r1, #8
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	f008 fe18 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_MCO);
 8000df8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000dfc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e00:	f04f 0109 	mov.w	r1, #9
 8000e04:	f04f 0200 	mov.w	r2, #0
 8000e08:	f008 fe0e 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_MCO);
 8000e0c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000e10:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e14:	f04f 010a 	mov.w	r1, #10
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f008 fe04 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_MCO);
 8000e20:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000e24:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e28:	f04f 010e 	mov.w	r1, #14
 8000e2c:	f04f 0200 	mov.w	r2, #0
 8000e30:	f008 fdfa 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_MCO);
 8000e34:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000e38:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e3c:	f04f 010f 	mov.w	r1, #15
 8000e40:	f04f 0200 	mov.w	r2, #0
 8000e44:	f008 fdf0 	bl	8009a28 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8000e48:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000e4c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000e4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e52:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f008 fc57 	bl	800970c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_MCO);
 8000e5e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e62:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e66:	f04f 0107 	mov.w	r1, #7
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f008 fddb 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_MCO);
 8000e72:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e76:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e7a:	f04f 0108 	mov.w	r1, #8
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f008 fdd1 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_MCO);
 8000e86:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e8a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000e8e:	f04f 0109 	mov.w	r1, #9
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f008 fdc7 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_MCO);
 8000e9a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000e9e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ea2:	f04f 010a 	mov.w	r1, #10
 8000ea6:	f04f 0200 	mov.w	r2, #0
 8000eaa:	f008 fdbd 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_MCO);
 8000eae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000eb2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000eb6:	f04f 010b 	mov.w	r1, #11
 8000eba:	f04f 0200 	mov.w	r2, #0
 8000ebe:	f008 fdb3 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_MCO);
 8000ec2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000ec6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000eca:	f04f 010c 	mov.w	r1, #12
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	f008 fda9 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_MCO);
 8000ed6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000eda:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ede:	f04f 010d 	mov.w	r1, #13
 8000ee2:	f04f 0200 	mov.w	r2, #0
 8000ee6:	f008 fd9f 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_MCO);
 8000eea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000eee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ef2:	f04f 010e 	mov.w	r1, #14
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	f008 fd95 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_MCO);
 8000efe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000f02:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f06:	f04f 010f 	mov.w	r1, #15
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	f008 fd8b 	bl	8009a28 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 8000f12:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8000f16:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
                                GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000f18:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f1c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f20:	463b      	mov	r3, r7
 8000f22:	4619      	mov	r1, r3
 8000f24:	f008 fbf2 	bl	800970c <GPIO_Init>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_MCO);
 8000f28:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f2c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f008 fd76 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_MCO);
 8000f3c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f40:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f44:	f04f 0101 	mov.w	r1, #1
 8000f48:	f04f 0200 	mov.w	r2, #0
 8000f4c:	f008 fd6c 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_MCO);
 8000f50:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f54:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f58:	f04f 0102 	mov.w	r1, #2
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f008 fd62 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_MCO);
 8000f64:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f68:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f6c:	f04f 0103 	mov.w	r1, #3
 8000f70:	f04f 0200 	mov.w	r2, #0
 8000f74:	f008 fd58 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_MCO);
 8000f78:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f7c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f80:	f04f 0104 	mov.w	r1, #4
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f008 fd4e 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_MCO);
 8000f8c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000f90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000f94:	f04f 0105 	mov.w	r1, #5
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f008 fd44 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_MCO);
 8000fa0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000fa4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fa8:	f04f 010c 	mov.w	r1, #12
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f008 fd3a 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_MCO);
 8000fb4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000fb8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fbc:	f04f 010d 	mov.w	r1, #13
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	f008 fd30 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_MCO);
 8000fc8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000fcc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fd0:	f04f 010e 	mov.w	r1, #14
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f008 fd26 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_MCO);
 8000fdc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000fe0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000fe4:	f04f 010f 	mov.w	r1, #15
 8000fe8:	f04f 0200 	mov.w	r2, #0
 8000fec:	f008 fd1c 	bl	8009a28 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 8000ff0:	f04f 033f 	mov.w	r3, #63	; 0x3f
 8000ff4:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5;

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000ff6:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8000ffa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	f008 fb83 	bl	800970c <GPIO_Init>

  GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_MCO);
 8001006:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800100a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800100e:	f04f 0100 	mov.w	r1, #0
 8001012:	f04f 0200 	mov.w	r2, #0
 8001016:	f008 fd07 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_MCO);
 800101a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800101e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001022:	f04f 0101 	mov.w	r1, #1
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f008 fcfd 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_MCO);
 800102e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001032:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001036:	f04f 0102 	mov.w	r1, #2
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f008 fcf3 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_MCO);
 8001042:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001046:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800104a:	f04f 0103 	mov.w	r1, #3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	f008 fce9 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_MCO);
 8001056:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800105a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800105e:	f04f 0104 	mov.w	r1, #4
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	f008 fcdf 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_MCO);
 800106a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800106e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001072:	f04f 0105 	mov.w	r1, #5
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f008 fcd5 	bl	8009a28 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
 800107e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001082:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001084:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001088:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	f008 fb3c 	bl	800970c <GPIO_Init>

  GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_MCO);
 8001094:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001098:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800109c:	f04f 010b 	mov.w	r1, #11
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	f008 fcc0 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_MCO);
 80010a8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80010ac:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010b0:	f04f 010c 	mov.w	r1, #12
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	f008 fcb6 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_MCO);
 80010bc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80010c0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010c4:	f04f 010d 	mov.w	r1, #13
 80010c8:	f04f 0200 	mov.w	r2, #0
 80010cc:	f008 fcac 	bl	8009a28 <GPIO_PinAFConfig>

  /* NOE and NWE configuration */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
 80010d0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80010d4:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80010d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80010da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010de:	463b      	mov	r3, r7
 80010e0:	4619      	mov	r1, r3
 80010e2:	f008 fb13 	bl	800970c <GPIO_Init>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_MCO);
 80010e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80010ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80010ee:	f04f 0104 	mov.w	r1, #4
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f008 fc97 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_MCO);
 80010fa:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80010fe:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001102:	f04f 0105 	mov.w	r1, #5
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f008 fc8d 	bl	8009a28 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 800110e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001112:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001114:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001118:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	f008 faf4 	bl	800970c <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 8001124:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001128:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800112c:	f04f 010c 	mov.w	r1, #12
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f008 fc78 	bl	8009a28 <GPIO_PinAFConfig>

  /* NBL0, NBL1 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
 8001138:	f04f 0303 	mov.w	r3, #3
 800113c:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure); 
 800113e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001142:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001146:	463b      	mov	r3, r7
 8001148:	4619      	mov	r1, r3
 800114a:	f008 fadf 	bl	800970c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_MCO);
 800114e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001152:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001156:	f04f 0100 	mov.w	r1, #0
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	f008 fc63 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_MCO);
 8001162:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001166:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800116a:	f04f 0101 	mov.w	r1, #1
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f008 fc59 	bl	8009a28 <GPIO_PinAFConfig>
}
 8001176:	f107 0708 	add.w	r7, r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop

08001180 <LCD_CtrlLinesConfig>:
  * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOB, GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE |
 8001186:	f04f 003a 	mov.w	r0, #58	; 0x3a
 800118a:	f04f 0101 	mov.w	r1, #1
 800118e:	f00a fd03 	bl	800bb98 <RCC_AHB1PeriphClockCmd>
                         RCC_AHB1Periph_GPIOF, ENABLE);

/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 8001192:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001196:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001198:	f04f 0302 	mov.w	r3, #2
 800119c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800119e:	f04f 0302 	mov.w	r3, #2
 80011a2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80011aa:	f04f 0300 	mov.w	r3, #0
 80011ae:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80011b0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80011b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	f008 faa6 	bl	800970c <GPIO_Init>

  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
 80011c0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80011c4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011c8:	f04f 0100 	mov.w	r1, #0
 80011cc:	f04f 020c 	mov.w	r2, #12
 80011d0:	f008 fc2a 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
 80011d4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80011d8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011dc:	f04f 0101 	mov.w	r1, #1
 80011e0:	f04f 020c 	mov.w	r2, #12
 80011e4:	f008 fc20 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
 80011e8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80011ec:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80011f0:	f04f 0104 	mov.w	r1, #4
 80011f4:	f04f 020c 	mov.w	r2, #12
 80011f8:	f008 fc16 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
 80011fc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001200:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001204:	f04f 0105 	mov.w	r1, #5
 8001208:	f04f 020c 	mov.w	r2, #12
 800120c:	f008 fc0c 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
 8001210:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001214:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001218:	f04f 0108 	mov.w	r1, #8
 800121c:	f04f 020c 	mov.w	r2, #12
 8001220:	f008 fc02 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
 8001224:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001228:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800122c:	f04f 0109 	mov.w	r1, #9
 8001230:	f04f 020c 	mov.w	r2, #12
 8001234:	f008 fbf8 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 8001238:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800123c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001240:	f04f 010a 	mov.w	r1, #10
 8001244:	f04f 020c 	mov.w	r2, #12
 8001248:	f008 fbee 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
 800124c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001250:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001254:	f04f 010e 	mov.w	r1, #14
 8001258:	f04f 020c 	mov.w	r2, #12
 800125c:	f008 fbe4 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
 8001260:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001264:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001268:	f04f 010f 	mov.w	r1, #15
 800126c:	f04f 020c 	mov.w	r2, #12
 8001270:	f008 fbda 	bl	8009a28 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8001274:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001278:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800127a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800127e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001282:	463b      	mov	r3, r7
 8001284:	4619      	mov	r1, r3
 8001286:	f008 fa41 	bl	800970c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
 800128a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800128e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001292:	f04f 0107 	mov.w	r1, #7
 8001296:	f04f 020c 	mov.w	r2, #12
 800129a:	f008 fbc5 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
 800129e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012a2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012a6:	f04f 0108 	mov.w	r1, #8
 80012aa:	f04f 020c 	mov.w	r2, #12
 80012ae:	f008 fbbb 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
 80012b2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012b6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012ba:	f04f 0109 	mov.w	r1, #9
 80012be:	f04f 020c 	mov.w	r2, #12
 80012c2:	f008 fbb1 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
 80012c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012ce:	f04f 010a 	mov.w	r1, #10
 80012d2:	f04f 020c 	mov.w	r2, #12
 80012d6:	f008 fba7 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
 80012da:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012de:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012e2:	f04f 010b 	mov.w	r1, #11
 80012e6:	f04f 020c 	mov.w	r2, #12
 80012ea:	f008 fb9d 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
 80012ee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80012f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80012f6:	f04f 010c 	mov.w	r1, #12
 80012fa:	f04f 020c 	mov.w	r2, #12
 80012fe:	f008 fb93 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
 8001302:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001306:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800130a:	f04f 010d 	mov.w	r1, #13
 800130e:	f04f 020c 	mov.w	r2, #12
 8001312:	f008 fb89 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
 8001316:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800131a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800131e:	f04f 010e 	mov.w	r1, #14
 8001322:	f04f 020c 	mov.w	r2, #12
 8001326:	f008 fb7f 	bl	8009a28 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
 800132a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800132e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001332:	f04f 010f 	mov.w	r1, #15
 8001336:	f04f 020c 	mov.w	r2, #12
 800133a:	f008 fb75 	bl	8009a28 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration LCD-DC */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 800133e:	f04f 0308 	mov.w	r3, #8
 8001342:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure);  
 8001344:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001348:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800134c:	463b      	mov	r3, r7
 800134e:	4619      	mov	r1, r3
 8001350:	f008 f9dc 	bl	800970c <GPIO_Init>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource3, GPIO_AF_FSMC);	   
 8001354:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001358:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800135c:	f04f 0103 	mov.w	r1, #3
 8001360:	f04f 020c 	mov.w	r2, #12
 8001364:	f008 fb60 	bl	8009a28 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
 8001368:	f04f 0380 	mov.w	r3, #128	; 0x80
 800136c:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800136e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001372:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001376:	463b      	mov	r3, r7
 8001378:	4619      	mov	r1, r3
 800137a:	f008 f9c7 	bl	800970c <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 800137e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001382:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001386:	f04f 010a 	mov.w	r1, #10
 800138a:	f04f 020c 	mov.w	r2, #12
 800138e:	f008 fb4b 	bl	8009a28 <GPIO_PinAFConfig>

  /* LCD RST configuration */
  GPIO_InitStructure.GPIO_Pin = LCD_RST_PIN; 
 8001392:	f04f 0308 	mov.w	r3, #8
 8001396:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001398:	f04f 0301 	mov.w	r3, #1
 800139c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(LCD_RST_PORT, &GPIO_InitStructure);
 80013b0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80013b4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	f008 f9a6 	bl	800970c <GPIO_Init>

   /* LCD pwm configuration */
  GPIO_InitStructure.GPIO_Pin = LCD_PWM_PIN; 
 80013c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013c4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80013c6:	f04f 0301 	mov.w	r3, #1
 80013ca:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80013cc:	f04f 0301 	mov.w	r3, #1
 80013d0:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(LCD_PWM_PORT, &GPIO_InitStructure);
 80013de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80013e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	f008 f98f 	bl	800970c <GPIO_Init>
  GPIO_SetBits(LCD_PWM_PORT, LCD_PWM_PIN);
 80013ee:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80013f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80013f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013fa:	f008 fac1 	bl	8009980 <GPIO_SetBits>
}
 80013fe:	f107 0708 	add.w	r7, r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop

08001408 <LCD_FSMCConfig>:
  * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
  * @param  None
  * @retval None
  */
void LCD_FSMCConfig(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b096      	sub	sp, #88	; 0x58
 800140c:	af00      	add	r7, sp, #0
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
   
  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 800140e:	f04f 0001 	mov.w	r0, #1
 8001412:	f04f 0101 	mov.w	r1, #1
 8001416:	f00a fc13 	bl	800bc40 <RCC_AHB3PeriphClockCmd>
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 1 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 1;
 800141a:	f04f 0301 	mov.w	r3, #1
 800141e:	603b      	str	r3, [r7, #0]
  p.FSMC_AddressHoldTime = 0;
 8001420:	f04f 0300 	mov.w	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  p.FSMC_DataSetupTime = 9;
 8001426:	f04f 0309 	mov.w	r3, #9
 800142a:	60bb      	str	r3, [r7, #8]
  p.FSMC_BusTurnAroundDuration = 0;
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  p.FSMC_CLKDivision = 0;
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
  p.FSMC_DataLatency = 0;
 8001438:	f04f 0300 	mov.w	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  p.FSMC_AccessMode = FSMC_AccessMode_A;
 800143e:	f04f 0300 	mov.w	r3, #0
 8001442:	61bb      	str	r3, [r7, #24]
        - Data Width = 16bit
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
 8001456:	f04f 0310 	mov.w	r3, #16
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	; 0x30
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	637b      	str	r3, [r7, #52]	; 0x34
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
 800146e:	f04f 0300 	mov.w	r3, #0
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	63fb      	str	r3, [r7, #60]	; 0x3c
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 800147a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800147e:	643b      	str	r3, [r7, #64]	; 0x40
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 8001480:	f04f 0300 	mov.w	r3, #0
 8001484:	647b      	str	r3, [r7, #68]	; 0x44
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8001486:	f04f 0300 	mov.w	r3, #0
 800148a:	64bb      	str	r3, [r7, #72]	; 0x48
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
 8001492:	463b      	mov	r3, r7
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
 8001496:	463b      	mov	r3, r7
 8001498:	657b      	str	r3, [r7, #84]	; 0x54

  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
 800149a:	f107 031c 	add.w	r3, r7, #28
 800149e:	4618      	mov	r0, r3
 80014a0:	f007 faca 	bl	8008a38 <FSMC_NORSRAMInit>

  /* Enable FSMC NOR/SRAM Bank1 */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
 80014a4:	f04f 0000 	mov.w	r0, #0
 80014a8:	f04f 0101 	mov.w	r1, #1
 80014ac:	f007 fbf4 	bl	8008c98 <FSMC_NORSRAMCmd>
}
 80014b0:	f107 0758 	add.w	r7, r7, #88	; 0x58
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <STM32f4_Discovery_LCD_Init>:
/**
  * @brief  LCD Init.
  * @retval None
  */
void STM32f4_Discovery_LCD_Init(void)
{ 
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0

  unsigned long ulCount;
	
  /* Configure the LCD Control pins */
  LCD_CtrlLinesConfig();
 80014be:	f7ff fe5f 	bl	8001180 <LCD_CtrlLinesConfig>
	
  /* Configure the FSMC Parallel interface */
  LCD_FSMCConfig();
 80014c2:	f7ff ffa1 	bl	8001408 <LCD_FSMCConfig>
	
  _delay_(5); 
 80014c6:	f04f 0005 	mov.w	r0, #5
 80014ca:	f001 fb69 	bl	8002ba0 <delay>
	
  /* Reset LCD */
  GPIO_ResetBits(LCD_RST_PORT, LCD_RST_PIN);	
 80014ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80014d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80014d6:	f04f 0108 	mov.w	r1, #8
 80014da:	f008 fa5f 	bl	800999c <GPIO_ResetBits>
  _delay_(10);	
 80014de:	f04f 000a 	mov.w	r0, #10
 80014e2:	f001 fb5d 	bl	8002ba0 <delay>
  GPIO_SetBits(LCD_RST_PORT, LCD_RST_PIN);
 80014e6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80014ea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80014ee:	f04f 0108 	mov.w	r1, #8
 80014f2:	f008 fa45 	bl	8009980 <GPIO_SetBits>

  /*
  SSD2119Init(void)
  */
  /* Enter sleep mode (if we are not already there).*/
  LCD_WriteReg(SSD2119_SLEEP_MODE_1_REG, 0x0001);
 80014f6:	f04f 0010 	mov.w	r0, #16
 80014fa:	f04f 0101 	mov.w	r1, #1
 80014fe:	f000 f8e7 	bl	80016d0 <LCD_WriteReg>

  /* Set initial power parameters. */
  LCD_WriteReg(SSD2119_PWR_CTRL_5_REG, 0x00B2);
 8001502:	f04f 001e 	mov.w	r0, #30
 8001506:	f04f 01b2 	mov.w	r1, #178	; 0xb2
 800150a:	f000 f8e1 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_VCOM_OTP_1_REG, 0x0006);
 800150e:	f04f 0028 	mov.w	r0, #40	; 0x28
 8001512:	f04f 0106 	mov.w	r1, #6
 8001516:	f000 f8db 	bl	80016d0 <LCD_WriteReg>
  
  /* Start the oscillator.*/
  LCD_WriteReg(SSD2119_OSC_START_REG, 0x0001);
 800151a:	f04f 0000 	mov.w	r0, #0
 800151e:	f04f 0101 	mov.w	r1, #1
 8001522:	f000 f8d5 	bl	80016d0 <LCD_WriteReg>

  /* Set pixel format and basic display orientation (scanning direction).*/
  LCD_WriteReg(SSD2119_OUTPUT_CTRL_REG, 0x30EF);
 8001526:	f04f 0001 	mov.w	r0, #1
 800152a:	f243 01ef 	movw	r1, #12527	; 0x30ef
 800152e:	f000 f8cf 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_LCD_DRIVE_AC_CTRL_REG, 0x0600);
 8001532:	f04f 0002 	mov.w	r0, #2
 8001536:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800153a:	f000 f8c9 	bl	80016d0 <LCD_WriteReg>

  /* Exit sleep mode.*/
  LCD_WriteReg(SSD2119_SLEEP_MODE_1_REG, 0x0000);
 800153e:	f04f 0010 	mov.w	r0, #16
 8001542:	f04f 0100 	mov.w	r1, #0
 8001546:	f000 f8c3 	bl	80016d0 <LCD_WriteReg>
  _delay_(5);
 800154a:	f04f 0005 	mov.w	r0, #5
 800154e:	f001 fb27 	bl	8002ba0 <delay>
	  
  /* Configure pixel color format and MCU interface parameters.*/
  LCD_WriteReg(SSD2119_ENTRY_MODE_REG, ENTRY_MODE_DEFAULT);
 8001552:	f04f 0011 	mov.w	r0, #17
 8001556:	f646 0130 	movw	r1, #26672	; 0x6830
 800155a:	f000 f8b9 	bl	80016d0 <LCD_WriteReg>

  /* Set analog parameters */
  LCD_WriteReg(SSD2119_SLEEP_MODE_2_REG, 0x0999);
 800155e:	f04f 0012 	mov.w	r0, #18
 8001562:	f640 1199 	movw	r1, #2457	; 0x999
 8001566:	f000 f8b3 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_ANALOG_SET_REG, 0x3800);
 800156a:	f04f 0026 	mov.w	r0, #38	; 0x26
 800156e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001572:	f000 f8ad 	bl	80016d0 <LCD_WriteReg>

  /* Enable the display */
  LCD_WriteReg(SSD2119_DISPLAY_CTRL_REG, 0x0033);
 8001576:	f04f 0007 	mov.w	r0, #7
 800157a:	f04f 0133 	mov.w	r1, #51	; 0x33
 800157e:	f000 f8a7 	bl	80016d0 <LCD_WriteReg>

  /* Set VCIX2 voltage to 6.1V.*/
  LCD_WriteReg(SSD2119_PWR_CTRL_2_REG, 0x0005);
 8001582:	f04f 000c 	mov.w	r0, #12
 8001586:	f04f 0105 	mov.w	r1, #5
 800158a:	f000 f8a1 	bl	80016d0 <LCD_WriteReg>

  /* Configure gamma correction.*/
  LCD_WriteReg(SSD2119_GAMMA_CTRL_1_REG, 0x0000);
 800158e:	f04f 0030 	mov.w	r0, #48	; 0x30
 8001592:	f04f 0100 	mov.w	r1, #0
 8001596:	f000 f89b 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_2_REG, 0x0303);
 800159a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800159e:	f240 3103 	movw	r1, #771	; 0x303
 80015a2:	f000 f895 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_3_REG, 0x0407);
 80015a6:	f04f 0032 	mov.w	r0, #50	; 0x32
 80015aa:	f240 4107 	movw	r1, #1031	; 0x407
 80015ae:	f000 f88f 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_4_REG, 0x0301);
 80015b2:	f04f 0033 	mov.w	r0, #51	; 0x33
 80015b6:	f240 3101 	movw	r1, #769	; 0x301
 80015ba:	f000 f889 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_5_REG, 0x0301);
 80015be:	f04f 0034 	mov.w	r0, #52	; 0x34
 80015c2:	f240 3101 	movw	r1, #769	; 0x301
 80015c6:	f000 f883 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_6_REG, 0x0403);
 80015ca:	f04f 0035 	mov.w	r0, #53	; 0x35
 80015ce:	f240 4103 	movw	r1, #1027	; 0x403
 80015d2:	f000 f87d 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_7_REG, 0x0707);
 80015d6:	f04f 0036 	mov.w	r0, #54	; 0x36
 80015da:	f240 7107 	movw	r1, #1799	; 0x707
 80015de:	f000 f877 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_8_REG, 0x0400);
 80015e2:	f04f 0037 	mov.w	r0, #55	; 0x37
 80015e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ea:	f000 f871 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_9_REG, 0x0a00);
 80015ee:	f04f 003a 	mov.w	r0, #58	; 0x3a
 80015f2:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80015f6:	f000 f86b 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_10_REG, 0x1000);
 80015fa:	f04f 003b 	mov.w	r0, #59	; 0x3b
 80015fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001602:	f000 f865 	bl	80016d0 <LCD_WriteReg>

  /* Configure Vlcd63 and VCOMl */
  LCD_WriteReg(SSD2119_PWR_CTRL_3_REG, 0x000A);
 8001606:	f04f 000d 	mov.w	r0, #13
 800160a:	f04f 010a 	mov.w	r1, #10
 800160e:	f000 f85f 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_PWR_CTRL_4_REG, 0x2E00);
 8001612:	f04f 000e 	mov.w	r0, #14
 8001616:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 800161a:	f000 f859 	bl	80016d0 <LCD_WriteReg>

  /* Set the display size and ensure that the GRAM window is set to allow
     access to the full display buffer.*/
  LCD_WriteReg(SSD2119_V_RAM_POS_REG, (LCD_PIXEL_HEIGHT-1) << 8);
 800161e:	f04f 0044 	mov.w	r0, #68	; 0x44
 8001622:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8001626:	f000 f853 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_H_RAM_START_REG, 0x0000);
 800162a:	f04f 0045 	mov.w	r0, #69	; 0x45
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	f000 f84d 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_H_RAM_END_REG, LCD_PIXEL_WIDTH-1);
 8001636:	f04f 0046 	mov.w	r0, #70	; 0x46
 800163a:	f240 113f 	movw	r1, #319	; 0x13f
 800163e:	f000 f847 	bl	80016d0 <LCD_WriteReg>

  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, 0x00);
 8001642:	f04f 004e 	mov.w	r0, #78	; 0x4e
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	f000 f841 	bl	80016d0 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, 0x00);
 800164e:	f04f 004f 	mov.w	r0, #79	; 0x4f
 8001652:	f04f 0100 	mov.w	r1, #0
 8001656:	f000 f83b 	bl	80016d0 <LCD_WriteReg>
  
  /* clear the lcd  */
  LCD_WriteReg(SSD2119_RAM_DATA_REG, 0x0000);
 800165a:	f04f 0022 	mov.w	r0, #34	; 0x22
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f000 f835 	bl	80016d0 <LCD_WriteReg>
  for(ulCount = 0; ulCount < (LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT); ulCount++)
 8001666:	f04f 0300 	mov.w	r3, #0
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	e007      	b.n	800167e <STM32f4_Discovery_LCD_Init+0x1c6>
  {
    LCD_WriteRAM(0x0000);
 800166e:	f04f 0000 	mov.w	r0, #0
 8001672:	f000 f86b 	bl	800174c <LCD_WriteRAM>
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, 0x00);
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, 0x00);
  
  /* clear the lcd  */
  LCD_WriteReg(SSD2119_RAM_DATA_REG, 0x0000);
  for(ulCount = 0; ulCount < (LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT); ulCount++)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f103 0301 	add.w	r3, r3, #1
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8001684:	f2c0 0301 	movt	r3, #1
 8001688:	429a      	cmp	r2, r3
 800168a:	d9f0      	bls.n	800166e <STM32f4_Discovery_LCD_Init+0x1b6>
  {
    LCD_WriteRAM(0x0000);
  }
  LCD_SetFont(&LCD_DEFAULT_FONT);
 800168c:	f240 0018 	movw	r0, #24
 8001690:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001694:	f000 f922 	bl	80018dc <LCD_SetFont>
}
 8001698:	f107 0708 	add.w	r7, r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval None
  */
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	80fa      	strh	r2, [r7, #6]
 80016ac:	80bb      	strh	r3, [r7, #4]
  /* Set the X address of the display cursor.*/
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, Xpos);
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	f04f 004e 	mov.w	r0, #78	; 0x4e
 80016b4:	4619      	mov	r1, r3
 80016b6:	f000 f80b 	bl	80016d0 <LCD_WriteReg>
	
  /* Set the Y address of the display cursor.*/
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, Ypos);
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	f04f 004f 	mov.w	r0, #79	; 0x4f
 80016c0:	4619      	mov	r1, r3
 80016c2:	f000 f805 	bl	80016d0 <LCD_WriteReg>
}
 80016c6:	f107 0708 	add.w	r7, r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop

080016d0 <LCD_WriteReg>:
  * @param  LCD_Reg: address of the selected register.
  * @param  LCD_RegValue: value to write to the selected register.
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	71fa      	strb	r2, [r7, #7]
 80016dc:	80bb      	strh	r3, [r7, #4]
  /* Write 16-bit Index, then Write Reg */
  LCD_CMD = LCD_Reg;
 80016de:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80016e2:	79fb      	ldrb	r3, [r7, #7]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	461a      	mov	r2, r3
 80016e8:	460b      	mov	r3, r1
 80016ea:	801a      	strh	r2, [r3, #0]
  /* Write 16-bit Reg */
  LCD_Data = LCD_RegValue;
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80016f4:	88ba      	ldrh	r2, [r7, #4]
 80016f6:	801a      	strh	r2, [r3, #0]
}
 80016f8:	f107 070c 	add.w	r7, r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop

08001704 <LCD_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCD_Reg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_CMD = LCD_Reg;
 800170e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	b29b      	uxth	r3, r3
 8001716:	461a      	mov	r2, r3
 8001718:	460b      	mov	r3, r1
 800171a:	801a      	strh	r2, [r3, #0]
  /* Read 16-bit Reg */
  return (LCD_Data);
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	f107 070c 	add.w	r7, r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <LCD_WriteRAM_Prepare>:
  * @brief  Prepare to write to the LCD RAM.
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
	LCD_CMD = SSD2119_RAM_DATA_REG;
 8001738:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 800173c:	f04f 0322 	mov.w	r3, #34	; 0x22
 8001740:	461a      	mov	r2, r3
 8001742:	460b      	mov	r3, r1
 8001744:	801a      	strh	r2, [r3, #0]
}
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LCD_WriteRAM>:
  * @brief  Writes to the LCD RAM.
  * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
  * @retval None
  */
void LCD_WriteRAM(uint16_t RGB_Code)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit GRAM Reg */
  LCD_Data = RGB_Code;
 8001756:	f04f 0300 	mov.w	r3, #0
 800175a:	f2c6 0310 	movt	r3, #24592	; 0x6010
 800175e:	88fa      	ldrh	r2, [r7, #6]
 8001760:	801a      	strh	r2, [r3, #0]
}
 8001762:	f107 070c 	add.w	r7, r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LCD_ReadRAM>:
  * @brief  Reads the LCD RAM.
  * @param  None
  * @retval LCD RAM Value.
  */
uint16_t LCD_ReadRAM(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* Write 16-bit Index (then Read Reg) */
//  LCD_CMD = SSD2119_RAM_DATA_REG; /* Select GRAM Reg */
  /* Read 16-bit Reg */
  return LCD_Data;
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <LCD_RGB_Test>:
/**
  * @brief  Test LCD Display
  * @retval None
  */
void LCD_RGB_Test(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
  uint32_t index;

  LCD_SetCursor(0x00, 0x00); 
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	f7ff ff85 	bl	80016a0 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001796:	f7ff ffcd 	bl	8001734 <LCD_WriteRAM_Prepare>

	/* R */
  for(index = 0; index < (LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 800179a:	f04f 0300 	mov.w	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e00a      	b.n	80017b8 <LCD_RGB_Test+0x34>
  {
    LCD_Data = LCD_COLOR_RED;
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80017aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017ae:	801a      	strh	r2, [r3, #0]

  LCD_SetCursor(0x00, 0x00); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */

	/* R */
  for(index = 0; index < (LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f103 0301 	add.w	r3, r3, #1
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	f246 33ff 	movw	r3, #25599	; 0x63ff
 80017be:	429a      	cmp	r2, r3
 80017c0:	d9ef      	bls.n	80017a2 <LCD_RGB_Test+0x1e>
  {
    LCD_Data = LCD_COLOR_RED;
  }
	  
  /* G */
  for(;index < 2*(LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 80017c2:	e00a      	b.n	80017da <LCD_RGB_Test+0x56>
  {
    LCD_Data = LCD_COLOR_GREEN;
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80017cc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80017d0:	801a      	strh	r2, [r3, #0]
  {
    LCD_Data = LCD_COLOR_RED;
  }
	  
  /* G */
  for(;index < 2*(LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f103 0301 	add.w	r3, r3, #1
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d9ef      	bls.n	80017c4 <LCD_RGB_Test+0x40>
  {
    LCD_Data = LCD_COLOR_GREEN;
  }
	  
	/* B */
  for(; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 80017e4:	e00a      	b.n	80017fc <LCD_RGB_Test+0x78>
  {
    LCD_Data = LCD_COLOR_BLUE;
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80017ee:	f04f 021f 	mov.w	r2, #31
 80017f2:	801a      	strh	r2, [r3, #0]
  {
    LCD_Data = LCD_COLOR_GREEN;
  }
	  
	/* B */
  for(; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f103 0301 	add.w	r3, r3, #1
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8001802:	f2c0 0301 	movt	r3, #1
 8001806:	429a      	cmp	r2, r3
 8001808:	d9ed      	bls.n	80017e6 <LCD_RGB_Test+0x62>
  {
    LCD_Data = LCD_COLOR_BLUE;
  }
}
 800180a:	f107 0708 	add.w	r7, r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop

08001814 <LCD_SetColors>:
  * @param  _TextColor: specifies the Text Color.
  * @param  _BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(__IO uint16_t _TextColor, __IO uint16_t _BackColor)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	80fa      	strh	r2, [r7, #6]
 8001820:	80bb      	strh	r3, [r7, #4]
  TextColor = _TextColor; 
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b29a      	uxth	r2, r3
 8001826:	f240 0384 	movw	r3, #132	; 0x84
 800182a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800182e:	801a      	strh	r2, [r3, #0]
  BackColor = _BackColor;
 8001830:	88bb      	ldrh	r3, [r7, #4]
 8001832:	b29a      	uxth	r2, r3
 8001834:	f240 034c 	movw	r3, #76	; 0x4c
 8001838:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800183c:	801a      	strh	r2, [r3, #0]
}
 800183e:	f107 070c 	add.w	r7, r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <LCD_GetColors>:
  * @param  _BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(__IO uint16_t *_TextColor, __IO uint16_t *_BackColor)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  *_TextColor = TextColor; *_BackColor = BackColor;
 8001852:	f240 0384 	movw	r3, #132	; 0x84
 8001856:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	b29a      	uxth	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	801a      	strh	r2, [r3, #0]
 8001862:	f240 034c 	movw	r3, #76	; 0x4c
 8001866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800186a:	881b      	ldrh	r3, [r3, #0]
 800186c:	b29a      	uxth	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	801a      	strh	r2, [r3, #0]
}
 8001872:	f107 070c 	add.w	r7, r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
  TextColor = Color;
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	b29a      	uxth	r2, r3
 800188a:	f240 0384 	movw	r3, #132	; 0x84
 800188e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001892:	801a      	strh	r2, [r3, #0]
}
 8001894:	f107 070c 	add.w	r7, r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	80fb      	strh	r3, [r7, #6]
  BackColor = Color;
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f240 034c 	movw	r3, #76	; 0x4c
 80018b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018b6:	801a      	strh	r2, [r3, #0]
}
 80018b8:	f107 070c 	add.w	r7, r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop

080018c4 <LCD_DisplayOff>:

/**
LCD_DisplayOff
  */
void LCD_DisplayOff(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0

}
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <LCD_DisplayOn>:

/**
LCD_DisplayOn
  */
void LCD_DisplayOn(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

}
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80018e4:	f240 0380 	movw	r3, #128	; 0x80
 80018e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]
}
 80018f0:	f107 070c 	add.w	r7, r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop

080018fc <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8001900:	f240 0380 	movw	r3, #128	; 0x80
 8001904:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001908:	681b      	ldr	r3, [r3, #0]
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop

08001914 <LCD_ClearLine>:
  *   This parameter can be one of the following values:
  *     @arg Linex: where x can be 0..n
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	81fb      	strh	r3, [r7, #14]

  do {
       /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	4610      	mov	r0, r2
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 0220 	mov.w	r2, #32
 8001930:	f000 f906 	bl	8001b40 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8001934:	f240 0380 	movw	r3, #128	; 0x80
 8001938:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	889a      	ldrh	r2, [r3, #4]
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	18d3      	adds	r3, r2, r3
 8001944:	81fb      	strh	r3, [r7, #14]
  } while (refcolumn < LCD_PIXEL_WIDTH);	
 8001946:	89fa      	ldrh	r2, [r7, #14]
 8001948:	f240 133f 	movw	r3, #319	; 0x13f
 800194c:	429a      	cmp	r2, r3
 800194e:	d9e9      	bls.n	8001924 <LCD_ClearLine+0x10>
}
 8001950:	f107 0710 	add.w	r7, r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(0x00, 0x00); 
 8001968:	f04f 0000 	mov.w	r0, #0
 800196c:	f04f 0100 	mov.w	r1, #0
 8001970:	f7ff fe96 	bl	80016a0 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001974:	f7ff fede 	bl	8001734 <LCD_WriteRAM_Prepare>
  for(index = 0; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e009      	b.n	8001994 <LCD_Clear+0x3c>
  {
    LCD_Data = Color;
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001988:	88fa      	ldrh	r2, [r7, #6]
 800198a:	801a      	strh	r2, [r3, #0]
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x00); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f103 0301 	add.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	f642 33ff 	movw	r3, #11263	; 0x2bff
 800199a:	f2c0 0301 	movt	r3, #1
 800199e:	429a      	cmp	r2, r3
 80019a0:	d9ee      	bls.n	8001980 <LCD_Clear+0x28>
  {
    LCD_Data = Color;
  }  
}
 80019a2:	f107 0710 	add.w	r7, r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop

080019ac <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	80fa      	strh	r2, [r7, #6]
 80019b8:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > LCD_PIXEL_WIDTH-1 || y < 0 || y > LCD_PIXEL_HEIGHT-1)
 80019ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db18      	blt.n	80019f4 <PutPixel+0x48>
 80019c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019c6:	f240 133f 	movw	r3, #319	; 0x13f
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dc12      	bgt.n	80019f4 <PutPixel+0x48>
 80019ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0e      	blt.n	80019f4 <PutPixel+0x48>
 80019d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019da:	2bef      	cmp	r3, #239	; 0xef
 80019dc:	dc0a      	bgt.n	80019f4 <PutPixel+0x48>
  {
    return;  
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 80019de:	88fa      	ldrh	r2, [r7, #6]
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 0201 	mov.w	r2, #1
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	f000 f953 	bl	8001c98 <LCD_DrawLine>
 80019f2:	e000      	b.n	80019f6 <PutPixel+0x4a>
  */
static void PutPixel(int16_t x, int16_t y)
{ 
  if(x < 0 || x > LCD_PIXEL_WIDTH-1 || y < 0 || y > LCD_PIXEL_HEIGHT-1)
  {
    return;  
 80019f4:	bf00      	nop
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
}
 80019f6:	f107 0708 	add.w	r7, r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop

08001a00 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	460b      	mov	r3, r1
 8001a08:	603a      	str	r2, [r7, #0]
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	80fa      	strh	r2, [r7, #6]
 8001a0e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, i = 0;
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	f04f 0300 	mov.w	r3, #0
 8001a1a:	613b      	str	r3, [r7, #16]
  uint16_t  Xaddress = 0;
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	81fb      	strh	r3, [r7, #14]
  Xaddress = Xpos;
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	81fb      	strh	r3, [r7, #14]
  
  LCD_SetCursor(Ypos, Xaddress);
 8001a26:	88ba      	ldrh	r2, [r7, #4]
 8001a28:	89fb      	ldrh	r3, [r7, #14]
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff fe37 	bl	80016a0 <LCD_SetCursor>
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e074      	b.n	8001b24 <LCD_DrawChar+0x124>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001a3a:	f7ff fe7b 	bl	8001734 <LCD_WriteRAM_Prepare>
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8001a3e:	f04f 0300 	mov.w	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e056      	b.n	8001af4 <LCD_DrawChar+0xf4>
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	18d3      	adds	r3, r2, r3
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	f240 0380 	movw	r3, #128	; 0x80
 8001a58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	8899      	ldrh	r1, [r3, #4]
 8001a60:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8001a64:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 8001a68:	fba3 0301 	umull	r0, r3, r3, r1
 8001a6c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001a76:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001a7a:	fa01 f103 	lsl.w	r1, r1, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	fa41 f303 	asr.w	r3, r1, r3
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d107      	bne.n	8001a9a <LCD_DrawChar+0x9a>
 8001a8a:	f240 0380 	movw	r3, #128	; 0x80
 8001a8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	889b      	ldrh	r3, [r3, #4]
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d915      	bls.n	8001ac6 <LCD_DrawChar+0xc6>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	18d3      	adds	r3, r2, r3
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	fa42 f303 	asr.w	r3, r2, r3
 8001aae:	f003 0301 	and.w	r3, r3, #1
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d111      	bne.n	8001ada <LCD_DrawChar+0xda>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001ab6:	f240 0380 	movw	r3, #128	; 0x80
 8001aba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	889b      	ldrh	r3, [r3, #4]
 8001ac2:	2b0c      	cmp	r3, #12
 8001ac4:	d909      	bls.n	8001ada <LCD_DrawChar+0xda>

      {
        LCD_WriteRAM(BackColor);
 8001ac6:	f240 034c 	movw	r3, #76	; 0x4c
 8001aca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fe3a 	bl	800174c <LCD_WriteRAM>
 8001ad8:	e008      	b.n	8001aec <LCD_DrawChar+0xec>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8001ada:	f240 0384 	movw	r3, #132	; 0x84
 8001ade:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7ff fe30 	bl	800174c <LCD_WriteRAM>
  LCD_SetCursor(Ypos, Xaddress);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f103 0301 	add.w	r3, r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	f240 0380 	movw	r3, #128	; 0x80
 8001af8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	889b      	ldrh	r3, [r3, #4]
 8001b00:	461a      	mov	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d89e      	bhi.n	8001a46 <LCD_DrawChar+0x46>
      else
      {
        LCD_WriteRAM(TextColor);
      } 
    }
    Xaddress++;
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	f103 0301 	add.w	r3, r3, #1
 8001b0e:	81fb      	strh	r3, [r7, #14]
    LCD_SetCursor(Ypos, Xaddress);
 8001b10:	88ba      	ldrh	r2, [r7, #4]
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7ff fdc2 	bl	80016a0 <LCD_SetCursor>
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Ypos, Xaddress);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f103 0301 	add.w	r3, r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
 8001b24:	f240 0380 	movw	r3, #128	; 0x80
 8001b28:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	88db      	ldrh	r3, [r3, #6]
 8001b30:	461a      	mov	r2, r3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d880      	bhi.n	8001a3a <LCD_DrawChar+0x3a>
      } 
    }
    Xaddress++;
    LCD_SetCursor(Ypos, Xaddress);
  }
}
 8001b38:	f107 0718 	add.w	r7, r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4613      	mov	r3, r2
 8001b48:	4602      	mov	r2, r0
 8001b4a:	80fa      	strh	r2, [r7, #6]
 8001b4c:	460a      	mov	r2, r1
 8001b4e:	80ba      	strh	r2, [r7, #4]
 8001b50:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8001b52:	78fb      	ldrb	r3, [r7, #3]
 8001b54:	f1a3 0320 	sub.w	r3, r3, #32
 8001b58:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8001b5a:	f240 0380 	movw	r3, #128	; 0x80
 8001b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	78f9      	ldrb	r1, [r7, #3]
 8001b68:	f240 0380 	movw	r3, #128	; 0x80
 8001b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	88db      	ldrh	r3, [r3, #6]
 8001b74:	fb03 f301 	mul.w	r3, r3, r1
 8001b78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001b7c:	18d3      	adds	r3, r2, r3
 8001b7e:	88f9      	ldrh	r1, [r7, #6]
 8001b80:	88ba      	ldrh	r2, [r7, #4]
 8001b82:	4608      	mov	r0, r1
 8001b84:	4611      	mov	r1, r2
 8001b86:	461a      	mov	r2, r3
 8001b88:	f7ff ff3a 	bl	8001a00 <LCD_DrawChar>
}
 8001b8c:	f107 0708 	add.w	r7, r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	81fb      	strh	r3, [r7, #14]

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 8001ba6:	e01a      	b.n	8001bde <LCD_DisplayStringLine+0x4a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	88f9      	ldrh	r1, [r7, #6]
 8001bae:	89fa      	ldrh	r2, [r7, #14]
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	f7ff ffc3 	bl	8001b40 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8001bba:	f240 0380 	movw	r3, #128	; 0x80
 8001bbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	889a      	ldrh	r2, [r3, #4]
 8001bc6:	89fb      	ldrh	r3, [r7, #14]
 8001bc8:	18d3      	adds	r3, r2, r3
 8001bca:	81fb      	strh	r3, [r7, #14]
	if (refcolumn >= LCD_PIXEL_WIDTH) {
 8001bcc:	89fa      	ldrh	r2, [r7, #14]
 8001bce:	f240 133f 	movw	r3, #319	; 0x13f
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d808      	bhi.n	8001be8 <LCD_DisplayStringLine+0x54>
		break;
	}
    /* Point on the next character */
    ptr++;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f103 0301 	add.w	r3, r3, #1
 8001bdc:	603b      	str	r3, [r7, #0]
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
  uint16_t refcolumn = 0;

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1e0      	bne.n	8001ba8 <LCD_DisplayStringLine+0x14>
 8001be6:	e000      	b.n	8001bea <LCD_DisplayStringLine+0x56>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
	if (refcolumn >= LCD_PIXEL_WIDTH) {
		break;
 8001be8:	bf00      	nop
	}
    /* Point on the next character */
    ptr++;
  }
}
 8001bea:	f107 0710 	add.w	r7, r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop

08001bf4 <LCD_SetDisplayWindow>:
  * @param  Height: display window width.
  * @param  Width: display window Height.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t width, uint16_t Height)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	80f8      	strh	r0, [r7, #6]
 8001bfc:	80b9      	strh	r1, [r7, #4]
 8001bfe:	807a      	strh	r2, [r7, #2]
 8001c00:	803b      	strh	r3, [r7, #0]
  uint32_t value = 0;	
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]

  LCD_WriteReg(SSD2119_H_RAM_START_REG, Xpos);
 8001c08:	88fb      	ldrh	r3, [r7, #6]
 8001c0a:	f04f 0045 	mov.w	r0, #69	; 0x45
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7ff fd5e 	bl	80016d0 <LCD_WriteReg>
	
  if ((Xpos+width) >= LCD_PIXEL_WIDTH) {
 8001c14:	88fa      	ldrh	r2, [r7, #6]
 8001c16:	887b      	ldrh	r3, [r7, #2]
 8001c18:	18d2      	adds	r2, r2, r3
 8001c1a:	f240 133f 	movw	r3, #319	; 0x13f
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dd06      	ble.n	8001c30 <LCD_SetDisplayWindow+0x3c>
    LCD_WriteReg(SSD2119_H_RAM_END_REG, LCD_PIXEL_WIDTH-1);	
 8001c22:	f04f 0046 	mov.w	r0, #70	; 0x46
 8001c26:	f240 113f 	movw	r1, #319	; 0x13f
 8001c2a:	f7ff fd51 	bl	80016d0 <LCD_WriteReg>
 8001c2e:	e008      	b.n	8001c42 <LCD_SetDisplayWindow+0x4e>
  } else {
    LCD_WriteReg(SSD2119_H_RAM_END_REG, Xpos+width);		
 8001c30:	88fa      	ldrh	r2, [r7, #6]
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	f04f 0046 	mov.w	r0, #70	; 0x46
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7ff fd47 	bl	80016d0 <LCD_WriteReg>
  }
  
  if ((Ypos+Height) >= LCD_PIXEL_HEIGHT) {
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	883b      	ldrh	r3, [r7, #0]
 8001c46:	18d3      	adds	r3, r2, r3
 8001c48:	2bef      	cmp	r3, #239	; 0xef
 8001c4a:	dd03      	ble.n	8001c54 <LCD_SetDisplayWindow+0x60>
    value = (LCD_PIXEL_HEIGHT-1) << 8;	
 8001c4c:	f44f 436f 	mov.w	r3, #61184	; 0xef00
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	e005      	b.n	8001c60 <LCD_SetDisplayWindow+0x6c>
  } else {
    value = (Ypos+Height) << 8;	
 8001c54:	88ba      	ldrh	r2, [r7, #4]
 8001c56:	883b      	ldrh	r3, [r7, #0]
 8001c58:	18d3      	adds	r3, r2, r3
 8001c5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8001c5e:	60fb      	str	r3, [r7, #12]
  }
  value |= Xpos;
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60fb      	str	r3, [r7, #12]
  LCD_WriteReg(SSD2119_V_RAM_POS_REG, value);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f04f 0044 	mov.w	r0, #68	; 0x44
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7ff fd2d 	bl	80016d0 <LCD_WriteReg>
  LCD_SetCursor(Xpos, Ypos);
 8001c76:	88fa      	ldrh	r2, [r7, #6]
 8001c78:	88bb      	ldrh	r3, [r7, #4]
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7ff fd0f 	bl	80016a0 <LCD_SetCursor>
}
 8001c82:	f107 0710 	add.w	r7, r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
#if 0
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
  LCD_WriteReg(LCD_REG_3, 0x1018);    
#endif
}
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop

08001c98 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: Vertical or Horizontal.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	80f8      	strh	r0, [r7, #6]
 8001ca0:	80b9      	strh	r1, [r7, #4]
 8001ca2:	807a      	strh	r2, [r7, #2]
 8001ca4:	707b      	strb	r3, [r7, #1]
  uint32_t i = 0;
 8001ca6:	f04f 0300 	mov.w	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(Xpos, Ypos);
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	88bb      	ldrh	r3, [r7, #4]
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f7ff fcf4 	bl	80016a0 <LCD_SetCursor>
  if(Direction == LCD_DIR_HORIZONTAL)
 8001cb8:	787b      	ldrb	r3, [r7, #1]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d117      	bne.n	8001cee <LCD_DrawLine+0x56>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001cbe:	f7ff fd39 	bl	8001734 <LCD_WriteRAM_Prepare>
    for(i = 0; i < Length; i++)
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e00c      	b.n	8001ce4 <LCD_DrawLine+0x4c>
    {
      LCD_WriteRAM(TextColor);
 8001cca:	f240 0384 	movw	r3, #132	; 0x84
 8001cce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7ff fd38 	bl	800174c <LCD_WriteRAM>
  
  LCD_SetCursor(Xpos, Ypos);
  if(Direction == LCD_DIR_HORIZONTAL)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f103 0301 	add.w	r3, r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8ee      	bhi.n	8001cca <LCD_DrawLine+0x32>
 8001cec:	e020      	b.n	8001d30 <LCD_DrawLine+0x98>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 8001cee:	f04f 0300 	mov.w	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	e018      	b.n	8001d28 <LCD_DrawLine+0x90>
    {
      LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001cf6:	f7ff fd1d 	bl	8001734 <LCD_WriteRAM_Prepare>
      LCD_WriteRAM(TextColor);
 8001cfa:	f240 0384 	movw	r3, #132	; 0x84
 8001cfe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff fd20 	bl	800174c <LCD_WriteRAM>
      Ypos++;
 8001d0c:	88bb      	ldrh	r3, [r7, #4]
 8001d0e:	f103 0301 	add.w	r3, r3, #1
 8001d12:	80bb      	strh	r3, [r7, #4]
      LCD_SetCursor(Xpos, Ypos);
 8001d14:	88fa      	ldrh	r2, [r7, #6]
 8001d16:	88bb      	ldrh	r3, [r7, #4]
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7ff fcc0 	bl	80016a0 <LCD_SetCursor>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f103 0301 	add.w	r3, r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	887a      	ldrh	r2, [r7, #2]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d8e2      	bhi.n	8001cf6 <LCD_DrawLine+0x5e>
      LCD_WriteRAM(TextColor);
      Ypos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
 8001d30:	f107 0710 	add.w	r7, r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <LCD_DrawRect>:
  * @param  Height: display rectangle height.
  * @param  Width: display rectangle width.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	80f8      	strh	r0, [r7, #6]
 8001d40:	80b9      	strh	r1, [r7, #4]
 8001d42:	70fa      	strb	r2, [r7, #3]
 8001d44:	803b      	strh	r3, [r7, #0]
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_VERTICAL);
 8001d46:	88f9      	ldrh	r1, [r7, #6]
 8001d48:	88ba      	ldrh	r2, [r7, #4]
 8001d4a:	883b      	ldrh	r3, [r7, #0]
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	f04f 0301 	mov.w	r3, #1
 8001d56:	f7ff ff9f 	bl	8001c98 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Height-1), Ypos, Width, LCD_DIR_VERTICAL);
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	18d3      	adds	r3, r2, r3
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	f103 33ff 	add.w	r3, r3, #4294967295
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	88ba      	ldrh	r2, [r7, #4]
 8001d6c:	883b      	ldrh	r3, [r7, #0]
 8001d6e:	4608      	mov	r0, r1
 8001d70:	4611      	mov	r1, r2
 8001d72:	461a      	mov	r2, r3
 8001d74:	f04f 0301 	mov.w	r3, #1
 8001d78:	f7ff ff8e 	bl	8001c98 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_HORIZONTAL);
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	88f9      	ldrh	r1, [r7, #6]
 8001d82:	88ba      	ldrh	r2, [r7, #4]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	f7ff ff83 	bl	8001c98 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos + Width), Height, LCD_DIR_HORIZONTAL);
 8001d92:	88ba      	ldrh	r2, [r7, #4]
 8001d94:	883b      	ldrh	r3, [r7, #0]
 8001d96:	18d3      	adds	r3, r2, r3
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	88f9      	ldrh	r1, [r7, #6]
 8001da0:	4608      	mov	r0, r1
 8001da2:	4611      	mov	r1, r2
 8001da4:	461a      	mov	r2, r3
 8001da6:	f04f 0300 	mov.w	r3, #0
 8001daa:	f7ff ff75 	bl	8001c98 <LCD_DrawLine>
}
 8001dae:	f107 0708 	add.w	r7, r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop

08001db8 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	80fa      	strh	r2, [r7, #6]
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	80ba      	strh	r2, [r7, #4]
 8001dc8:	807b      	strh	r3, [r7, #2]
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8001dca:	887b      	ldrh	r3, [r7, #2]
 8001dcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001dd0:	f1c3 0303 	rsb	r3, r3, #3
 8001dd4:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8001ddc:	887b      	ldrh	r3, [r7, #2]
 8001dde:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8001de0:	e0e5      	b.n	8001fae <LCD_DrawCircle+0x1f6>
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	18d3      	adds	r3, r2, r3
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	b299      	uxth	r1, r3
 8001df0:	88bb      	ldrh	r3, [r7, #4]
 8001df2:	18cb      	adds	r3, r1, r3
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7ff fc51 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001dfe:	f7ff fc99 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001e02:	f240 0384 	movw	r3, #132	; 0x84
 8001e06:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fc9c 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	18d3      	adds	r3, r2, r3
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	88b9      	ldrh	r1, [r7, #4]
 8001e24:	1acb      	subs	r3, r1, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7ff fc38 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001e30:	f7ff fc80 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001e34:	f240 0384 	movw	r3, #132	; 0x84
 8001e38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fc83 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	88fa      	ldrh	r2, [r7, #6]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	b299      	uxth	r1, r3
 8001e54:	88bb      	ldrh	r3, [r7, #4]
 8001e56:	18cb      	adds	r3, r1, r3
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4610      	mov	r0, r2
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	f7ff fc1f 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001e62:	f7ff fc67 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001e66:	f240 0384 	movw	r3, #132	; 0x84
 8001e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fc6a 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	88fa      	ldrh	r2, [r7, #6]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	88b9      	ldrh	r1, [r7, #4]
 8001e88:	1acb      	subs	r3, r1, r3
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f7ff fc06 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001e94:	f7ff fc4e 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001e98:	f240 0384 	movw	r3, #132	; 0x84
 8001e9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fc51 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	18d3      	adds	r3, r2, r3
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	88bb      	ldrh	r3, [r7, #4]
 8001eba:	18cb      	adds	r3, r1, r3
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7ff fbed 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001ec6:	f7ff fc35 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001eca:	f240 0384 	movw	r3, #132	; 0x84
 8001ece:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fc38 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	88fb      	ldrh	r3, [r7, #6]
 8001ee2:	18d3      	adds	r3, r2, r3
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	88b9      	ldrh	r1, [r7, #4]
 8001eec:	1acb      	subs	r3, r1, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7ff fbd4 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001ef8:	f7ff fc1c 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001efc:	f240 0384 	movw	r3, #132	; 0x84
 8001f00:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff fc1f 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos + CurX);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	b299      	uxth	r1, r3
 8001f1c:	88bb      	ldrh	r3, [r7, #4]
 8001f1e:	18cb      	adds	r3, r1, r3
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7ff fbbb 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001f2a:	f7ff fc03 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001f2e:	f240 0384 	movw	r3, #132	; 0x84
 8001f32:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fc06 	bl	800174c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos - CurX);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	88fa      	ldrh	r2, [r7, #6]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	b29a      	uxth	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	88b9      	ldrh	r1, [r7, #4]
 8001f50:	1acb      	subs	r3, r1, r3
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7ff fba2 	bl	80016a0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001f5c:	f7ff fbea 	bl	8001734 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8001f60:	f240 0384 	movw	r3, #132	; 0x84
 8001f64:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff fbed 	bl	800174c <LCD_WriteRAM>
    if (D < 0)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da08      	bge.n	8001f8a <LCD_DrawCircle+0x1d2>
    { 
      D += (CurX << 2) + 6;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	18d3      	adds	r3, r2, r3
 8001f82:	f103 0306 	add.w	r3, r3, #6
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e00d      	b.n	8001fa6 <LCD_DrawCircle+0x1ee>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	18d3      	adds	r3, r2, r3
 8001f98:	f103 030a 	add.w	r3, r3, #10
 8001f9c:	617b      	str	r3, [r7, #20]
      CurY--;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f103 33ff 	add.w	r3, r3, #4294967295
 8001fa4:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	f103 0301 	add.w	r3, r3, #1
 8001fac:	613b      	str	r3, [r7, #16]
  
  D = 3 - (Radius << 1);
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	f67f af15 	bls.w	8001de2 <LCD_DrawCircle+0x2a>
      D += ((CurX - CurY) << 2) + 10;
      CurY--;
    }
    CurX++;
  }
}
 8001fb8:	f107 0718 	add.w	r7, r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, i = 0;
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	f04f 0300 	mov.w	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
 8001fd4:	f04f 0000 	mov.w	r0, #0
 8001fd8:	f240 113f 	movw	r1, #319	; 0x13f
 8001fdc:	f7ff fb60 	bl	80016a0 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001fe0:	f7ff fba8 	bl	8001734 <LCD_WriteRAM_Prepare>
  for(index = 0; index < 2400; index++)
 8001fe4:	f04f 0300 	mov.w	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	e02f      	b.n	800204c <LCD_DrawMonoPict+0x8c>
  {
    for(i = 0; i < 32; i++)
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	e024      	b.n	800203e <LCD_DrawMonoPict+0x7e>
    {
      if((Pict[index] & (1 << i)) == 0x00)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	18d3      	adds	r3, r2, r3
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f04f 0101 	mov.w	r1, #1
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d109      	bne.n	8002024 <LCD_DrawMonoPict+0x64>
      {
        LCD_WriteRAM(BackColor);
 8002010:	f240 034c 	movw	r3, #76	; 0x4c
 8002014:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	b29b      	uxth	r3, r3
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff fb95 	bl	800174c <LCD_WriteRAM>
 8002022:	e008      	b.n	8002036 <LCD_DrawMonoPict+0x76>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8002024:	f240 0384 	movw	r3, #132	; 0x84
 8002028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800202c:	881b      	ldrh	r3, [r3, #0]
 800202e:	b29b      	uxth	r3, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fb8b 	bl	800174c <LCD_WriteRAM>
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	f103 0301 	add.w	r3, r3, #1
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b1f      	cmp	r3, #31
 8002042:	d9d7      	bls.n	8001ff4 <LCD_DrawMonoPict+0x34>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f103 0301 	add.w	r3, r3, #1
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	f640 135f 	movw	r3, #2399	; 0x95f
 8002052:	429a      	cmp	r2, r3
 8002054:	d9ca      	bls.n	8001fec <LCD_DrawMonoPict+0x2c>
      {
        LCD_WriteRAM(TextColor);
      }
    }
  }
}
 8002056:	f107 0710 	add.w	r7, r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop

08002060 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  LCD_WriteReg(LCD_REG_3, 0x1018);
#endif
}
 8002068:	f107 070c 	add.w	r7, r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	80f8      	strh	r0, [r7, #6]
 800207c:	80b9      	strh	r1, [r7, #4]
 800207e:	807a      	strh	r2, [r7, #2]
 8002080:	803b      	strh	r3, [r7, #0]
  LCD_SetTextColor(TextColor);
 8002082:	f240 0384 	movw	r3, #132	; 0x84
 8002086:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800208a:	881b      	ldrh	r3, [r3, #0]
 800208c:	b29b      	uxth	r3, r3
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fbf4 	bl	800187c <LCD_SetTextColor>

  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8002094:	88f9      	ldrh	r1, [r7, #6]
 8002096:	88ba      	ldrh	r2, [r7, #4]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4608      	mov	r0, r1
 800209c:	4611      	mov	r1, r2
 800209e:	461a      	mov	r2, r3
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	f7ff fdf8 	bl	8001c98 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+Height), Width, LCD_DIR_HORIZONTAL);
 80020a8:	88ba      	ldrh	r2, [r7, #4]
 80020aa:	883b      	ldrh	r3, [r7, #0]
 80020ac:	18d3      	adds	r3, r2, r3
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	88f9      	ldrh	r1, [r7, #6]
 80020b2:	887b      	ldrh	r3, [r7, #2]
 80020b4:	4608      	mov	r0, r1
 80020b6:	4611      	mov	r1, r2
 80020b8:	461a      	mov	r2, r3
 80020ba:	f04f 0300 	mov.w	r3, #0
 80020be:	f7ff fdeb 	bl	8001c98 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 80020c2:	88f9      	ldrh	r1, [r7, #6]
 80020c4:	88ba      	ldrh	r2, [r7, #4]
 80020c6:	883b      	ldrh	r3, [r7, #0]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	f04f 0301 	mov.w	r3, #1
 80020d2:	f7ff fde1 	bl	8001c98 <LCD_DrawLine>
  LCD_DrawLine((Xpos+Width-1), Ypos, Height, LCD_DIR_VERTICAL);
 80020d6:	88fa      	ldrh	r2, [r7, #6]
 80020d8:	887b      	ldrh	r3, [r7, #2]
 80020da:	18d3      	adds	r3, r2, r3
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f103 33ff 	add.w	r3, r3, #4294967295
 80020e2:	b299      	uxth	r1, r3
 80020e4:	88ba      	ldrh	r2, [r7, #4]
 80020e6:	883b      	ldrh	r3, [r7, #0]
 80020e8:	4608      	mov	r0, r1
 80020ea:	4611      	mov	r1, r2
 80020ec:	461a      	mov	r2, r3
 80020ee:	f04f 0301 	mov.w	r3, #1
 80020f2:	f7ff fdd1 	bl	8001c98 <LCD_DrawLine>

  Height--;
 80020f6:	883b      	ldrh	r3, [r7, #0]
 80020f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80020fc:	803b      	strh	r3, [r7, #0]
  Ypos++;
 80020fe:	88bb      	ldrh	r3, [r7, #4]
 8002100:	f103 0301 	add.w	r3, r3, #1
 8002104:	80bb      	strh	r3, [r7, #4]

  LCD_SetTextColor(BackColor);
 8002106:	f240 034c 	movw	r3, #76	; 0x4c
 800210a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fbb2 	bl	800187c <LCD_SetTextColor>

  while(Height--)
 8002118:	e00d      	b.n	8002136 <LCD_DrawFullRect+0xc2>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);    
 800211a:	88ba      	ldrh	r2, [r7, #4]
 800211c:	88bb      	ldrh	r3, [r7, #4]
 800211e:	f103 0301 	add.w	r3, r3, #1
 8002122:	80bb      	strh	r3, [r7, #4]
 8002124:	88f9      	ldrh	r1, [r7, #6]
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	4608      	mov	r0, r1
 800212a:	4611      	mov	r1, r2
 800212c:	461a      	mov	r2, r3
 800212e:	f04f 0300 	mov.w	r3, #0
 8002132:	f7ff fdb1 	bl	8001c98 <LCD_DrawLine>
  Height--;
  Ypos++;

  LCD_SetTextColor(BackColor);

  while(Height--)
 8002136:	883b      	ldrh	r3, [r7, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2300      	moveq	r3, #0
 800213e:	2301      	movne	r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	883a      	ldrh	r2, [r7, #0]
 8002144:	f102 32ff 	add.w	r2, r2, #4294967295
 8002148:	803a      	strh	r2, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1e5      	bne.n	800211a <LCD_DrawFullRect+0xa6>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);    
  }

  LCD_SetTextColor(TextColor);
 800214e:	f240 0384 	movw	r3, #132	; 0x84
 8002152:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fb8e 	bl	800187c <LCD_SetTextColor>
}
 8002160:	f107 0708 	add.w	r7, r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	4613      	mov	r3, r2
 8002170:	4602      	mov	r2, r0
 8002172:	80fa      	strh	r2, [r7, #6]
 8002174:	460a      	mov	r2, r1
 8002176:	80ba      	strh	r2, [r7, #4]
 8002178:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002180:	f1c3 0303 	rsb	r3, r3, #3
 8002184:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800218c:	887b      	ldrh	r3, [r7, #2]
 800218e:	60fb      	str	r3, [r7, #12]
  
  LCD_SetTextColor(BackColor);
 8002190:	f240 034c 	movw	r3, #76	; 0x4c
 8002194:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fb6d 	bl	800187c <LCD_SetTextColor>

  while (CurX <= CurY)
 80021a2:	e07b      	b.n	800229c <LCD_DrawFullCircle+0x134>
  {
    if(CurY > 0) 
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d02b      	beq.n	8002202 <LCD_DrawFullCircle+0x9a>
    {
      LCD_DrawLine(Xpos - CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	88fa      	ldrh	r2, [r7, #6]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	b299      	uxth	r1, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	88bb      	ldrh	r3, [r7, #4]
 80021ba:	18d3      	adds	r3, r2, r3
 80021bc:	b29a      	uxth	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	f7ff fd61 	bl	8001c98 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	b29a      	uxth	r2, r3
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	18d3      	adds	r3, r2, r3
 80021de:	b299      	uxth	r1, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	18d3      	adds	r3, r2, r3
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	4608      	mov	r0, r1
 80021f6:	4611      	mov	r1, r2
 80021f8:	461a      	mov	r2, r3
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	f7ff fd4b 	bl	8001c98 <LCD_DrawLine>
    }

    if(CurX > 0) 
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d02b      	beq.n	8002260 <LCD_DrawFullCircle+0xf8>
    {
      LCD_DrawLine(Xpos - CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	b29b      	uxth	r3, r3
 800220c:	88fa      	ldrh	r2, [r7, #6]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b299      	uxth	r1, r3
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	b29a      	uxth	r2, r3
 8002216:	88bb      	ldrh	r3, [r7, #4]
 8002218:	18d3      	adds	r3, r2, r3
 800221a:	b29a      	uxth	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	b29b      	uxth	r3, r3
 8002220:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002224:	b29b      	uxth	r3, r3
 8002226:	4608      	mov	r0, r1
 8002228:	4611      	mov	r1, r2
 800222a:	461a      	mov	r2, r3
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	f7ff fd32 	bl	8001c98 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	b29a      	uxth	r2, r3
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	18d3      	adds	r3, r2, r3
 800223c:	b299      	uxth	r1, r3
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	b29a      	uxth	r2, r3
 8002242:	88bb      	ldrh	r3, [r7, #4]
 8002244:	18d3      	adds	r3, r2, r3
 8002246:	b29a      	uxth	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	b29b      	uxth	r3, r3
 800224c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002250:	b29b      	uxth	r3, r3
 8002252:	4608      	mov	r0, r1
 8002254:	4611      	mov	r1, r2
 8002256:	461a      	mov	r2, r3
 8002258:	f04f 0300 	mov.w	r3, #0
 800225c:	f7ff fd1c 	bl	8001c98 <LCD_DrawLine>
    }
    if (D < 0)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	da08      	bge.n	8002278 <LCD_DrawFullCircle+0x110>
    { 
      D += (CurX << 2) + 6;
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	18d3      	adds	r3, r2, r3
 8002270:	f103 0306 	add.w	r3, r3, #6
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e00d      	b.n	8002294 <LCD_DrawFullCircle+0x12c>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	f103 030a 	add.w	r3, r3, #10
 800228a:	617b      	str	r3, [r7, #20]
      CurY--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002292:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	f103 0301 	add.w	r3, r3, #1
 800229a:	613b      	str	r3, [r7, #16]
  CurX = 0;
  CurY = Radius;
  
  LCD_SetTextColor(BackColor);

  while (CurX <= CurY)
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	f67f af7f 	bls.w	80021a4 <LCD_DrawFullCircle+0x3c>
      CurY--;
    }
    CurX++;
  }

  LCD_SetTextColor(TextColor);
 80022a6:	f240 0384 	movw	r3, #132	; 0x84
 80022aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff fae2 	bl	800187c <LCD_SetTextColor>
  LCD_DrawCircle(Xpos, Ypos, Radius);
 80022b8:	88f9      	ldrh	r1, [r7, #6]
 80022ba:	88ba      	ldrh	r2, [r7, #4]
 80022bc:	887b      	ldrh	r3, [r7, #2]
 80022be:	4608      	mov	r0, r1
 80022c0:	4611      	mov	r1, r2
 80022c2:	461a      	mov	r2, r3
 80022c4:	f7ff fd78 	bl	8001db8 <LCD_DrawCircle>
}
 80022c8:	f107 0718 	add.w	r7, r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	80f8      	strh	r0, [r7, #6]
 80022d8:	80b9      	strh	r1, [r7, #4]
 80022da:	807a      	strh	r2, [r7, #2]
 80022dc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80022de:	f04f 0300 	mov.w	r3, #0
 80022e2:	823b      	strh	r3, [r7, #16]
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	81fb      	strh	r3, [r7, #14]
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80022f0:	f04f 0300 	mov.w	r3, #0
 80022f4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	83fb      	strh	r3, [r7, #30]
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	83bb      	strh	r3, [r7, #28]
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	837b      	strh	r3, [r7, #26]
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	833b      	strh	r3, [r7, #24]
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	82fb      	strh	r3, [r7, #22]
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800232c:	887a      	ldrh	r2, [r7, #2]
 800232e:	88fb      	ldrh	r3, [r7, #6]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	bfb8      	it	lt
 8002336:	425b      	neglt	r3, r3
 8002338:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 800233a:	883a      	ldrh	r2, [r7, #0]
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	bfb8      	it	lt
 8002344:	425b      	neglt	r3, r3
 8002346:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002350:	887a      	ldrh	r2, [r7, #2]
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	429a      	cmp	r2, r3
 8002356:	d306      	bcc.n	8002366 <LCD_DrawUniLine+0x96>
  {
    xinc1 = 1;
 8002358:	f04f 0301 	mov.w	r3, #1
 800235c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800235e:	f04f 0301 	mov.w	r3, #1
 8002362:	843b      	strh	r3, [r7, #32]
 8002364:	e005      	b.n	8002372 <LCD_DrawUniLine+0xa2>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002366:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800236a:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800236c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002370:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002372:	883a      	ldrh	r2, [r7, #0]
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	429a      	cmp	r2, r3
 8002378:	d306      	bcc.n	8002388 <LCD_DrawUniLine+0xb8>
  {
    yinc1 = 1;
 800237a:	f04f 0301 	mov.w	r3, #1
 800237e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002380:	f04f 0301 	mov.w	r3, #1
 8002384:	83bb      	strh	r3, [r7, #28]
 8002386:	e005      	b.n	8002394 <LCD_DrawUniLine+0xc4>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002388:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800238c:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800238e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002392:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002394:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002398:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800239c:	429a      	cmp	r2, r3
 800239e:	db14      	blt.n	80023ca <LCD_DrawUniLine+0xfa>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80023ac:	8a3b      	ldrh	r3, [r7, #16]
 80023ae:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80023b0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023b4:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80023b8:	18d3      	adds	r3, r2, r3
 80023ba:	ea4f 0363 	mov.w	r3, r3, asr #1
 80023be:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80023c0:	89fb      	ldrh	r3, [r7, #14]
 80023c2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80023c4:	8a3b      	ldrh	r3, [r7, #16]
 80023c6:	82bb      	strh	r3, [r7, #20]
 80023c8:	e013      	b.n	80023f2 <LCD_DrawUniLine+0x122>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80023d6:	89fb      	ldrh	r3, [r7, #14]
 80023d8:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80023da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023de:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80023e2:	18d3      	adds	r3, r2, r3
 80023e4:	ea4f 0363 	mov.w	r3, r3, asr #1
 80023e8:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80023ea:	8a3b      	ldrh	r3, [r7, #16]
 80023ec:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80023ee:	89fb      	ldrh	r3, [r7, #14]
 80023f0:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	827b      	strh	r3, [r7, #18]
 80023f8:	e02f      	b.n	800245a <LCD_DrawUniLine+0x18a>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 80023fa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80023fe:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002402:	4610      	mov	r0, r2
 8002404:	4619      	mov	r1, r3
 8002406:	f7ff fad1 	bl	80019ac <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 800240a:	8b3a      	ldrh	r2, [r7, #24]
 800240c:	8afb      	ldrh	r3, [r7, #22]
 800240e:	18d3      	adds	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002414:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002418:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800241c:	429a      	cmp	r2, r3
 800241e:	db0e      	blt.n	800243e <LCD_DrawUniLine+0x16e>
    {
      num -= den;               /* Calculate the new numerator value */
 8002420:	8b3a      	ldrh	r2, [r7, #24]
 8002422:	8b7b      	ldrh	r3, [r7, #26]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	b29b      	uxth	r3, r3
 8002428:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800242a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800242c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800242e:	18d3      	adds	r3, r2, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002436:	8bfb      	ldrh	r3, [r7, #30]
 8002438:	18d3      	adds	r3, r2, r3
 800243a:	b29b      	uxth	r3, r3
 800243c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 800243e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002440:	8c3b      	ldrh	r3, [r7, #32]
 8002442:	18d3      	adds	r3, r2, r3
 8002444:	b29b      	uxth	r3, r3
 8002446:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002448:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800244a:	8bbb      	ldrh	r3, [r7, #28]
 800244c:	18d3      	adds	r3, r2, r3
 800244e:	b29b      	uxth	r3, r3
 8002450:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002452:	8a7b      	ldrh	r3, [r7, #18]
 8002454:	f103 0301 	add.w	r3, r3, #1
 8002458:	827b      	strh	r3, [r7, #18]
 800245a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800245e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002462:	429a      	cmp	r2, r3
 8002464:	ddc9      	ble.n	80023fa <LCD_DrawUniLine+0x12a>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8002466:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop

08002470 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	81fb      	strh	r3, [r7, #14]
 8002482:	f04f 0300 	mov.w	r3, #0
 8002486:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d814      	bhi.n	80024b8 <LCD_PolyLine+0x48>
  {
    return;
 800248e:	e01a      	b.n	80024c6 <LCD_PolyLine+0x56>
  }

  while(--PointCount)
  {
    X = Points->X;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	881b      	ldrh	r3, [r3, #0]
 8002494:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	885b      	ldrh	r3, [r3, #2]
 800249a:	81bb      	strh	r3, [r7, #12]
    Points++;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0304 	add.w	r3, r3, #4
 80024a2:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 80024a4:	89f8      	ldrh	r0, [r7, #14]
 80024a6:	89b9      	ldrh	r1, [r7, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	885b      	ldrh	r3, [r3, #2]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	f7ff ff0c 	bl	80022d0 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	887b      	ldrh	r3, [r7, #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1e4      	bne.n	8002490 <LCD_PolyLine+0x20>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 80024c6:	f107 0710 	add.w	r7, r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop

080024d0 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 80024d0:	b590      	push	{r4, r7, lr}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	460a      	mov	r2, r1
 80024dc:	807a      	strh	r2, [r7, #2]
 80024de:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	81fb      	strh	r3, [r7, #14]
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d93d      	bls.n	8002572 <LCD_PolyLineRelativeClosed+0xa2>
  {
    return;
  }  
  X = Points->X;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	881b      	ldrh	r3, [r3, #0]
 80024fa:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	885b      	ldrh	r3, [r3, #2]
 8002500:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8002502:	e021      	b.n	8002548 <LCD_PolyLineRelativeClosed+0x78>
  {
    Points++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0304 	add.w	r3, r3, #4
 800250a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 800250c:	89f8      	ldrh	r0, [r7, #14]
 800250e:	89b9      	ldrh	r1, [r7, #12]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	b29a      	uxth	r2, r3
 8002516:	89fb      	ldrh	r3, [r7, #14]
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	b29a      	uxth	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	885b      	ldrh	r3, [r3, #2]
 8002520:	b29c      	uxth	r4, r3
 8002522:	89bb      	ldrh	r3, [r7, #12]
 8002524:	18e3      	adds	r3, r4, r3
 8002526:	b29b      	uxth	r3, r3
 8002528:	f7ff fed2 	bl	80022d0 <LCD_DrawUniLine>
    X = X + Points->X;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	881b      	ldrh	r3, [r3, #0]
 8002530:	b29a      	uxth	r2, r3
 8002532:	89fb      	ldrh	r3, [r7, #14]
 8002534:	18d3      	adds	r3, r2, r3
 8002536:	b29b      	uxth	r3, r3
 8002538:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	885b      	ldrh	r3, [r3, #2]
 800253e:	b29a      	uxth	r2, r3
 8002540:	89bb      	ldrh	r3, [r7, #12]
 8002542:	18d3      	adds	r3, r2, r3
 8002544:	b29b      	uxth	r3, r3
 8002546:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	f103 33ff 	add.w	r3, r3, #4294967295
 800254e:	807b      	strh	r3, [r7, #2]
 8002550:	887b      	ldrh	r3, [r7, #2]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1d6      	bne.n	8002504 <LCD_PolyLineRelativeClosed+0x34>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8002556:	883b      	ldrh	r3, [r7, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00b      	beq.n	8002574 <LCD_PolyLineRelativeClosed+0xa4>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b298      	uxth	r0, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	885b      	ldrh	r3, [r3, #2]
 8002566:	b299      	uxth	r1, r3
 8002568:	89fa      	ldrh	r2, [r7, #14]
 800256a:	89bb      	ldrh	r3, [r7, #12]
 800256c:	f7ff feb0 	bl	80022d0 <LCD_DrawUniLine>
 8002570:	e000      	b.n	8002574 <LCD_PolyLineRelativeClosed+0xa4>
  int16_t X = 0, Y = 0;
  pPoint First = Points;

  if(PointCount < 2)
  {
    return;
 8002572:	bf00      	nop
  }
  if(Closed)
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
  }  
}
 8002574:	f107 0714 	add.w	r7, r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}

0800257c <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 800257c:	b590      	push	{r4, r7, lr}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	460b      	mov	r3, r1
 8002586:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8002588:	887b      	ldrh	r3, [r7, #2]
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	4619      	mov	r1, r3
 800258e:	f7ff ff6f 	bl	8002470 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	b298      	uxth	r0, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	885b      	ldrh	r3, [r3, #2]
 800259c:	b299      	uxth	r1, r3
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	f103 33ff 	add.w	r3, r3, #4294967295
 80025a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	18d3      	adds	r3, r2, r3
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29a      	uxth	r2, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80025b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80025ba:	687c      	ldr	r4, [r7, #4]
 80025bc:	18e3      	adds	r3, r4, r3
 80025be:	885b      	ldrh	r3, [r3, #2]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f7ff fe85 	bl	80022d0 <LCD_DrawUniLine>
}
 80025c6:	f107 070c 	add.w	r7, r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd90      	pop	{r4, r7, pc}
 80025ce:	bf00      	nop

080025d0 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 80025dc:	887b      	ldrh	r3, [r7, #2]
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	f7ff ff73 	bl	80024d0 <LCD_PolyLineRelativeClosed>
}
 80025ea:	f107 0708 	add.w	r7, r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop

080025f4 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	460b      	mov	r3, r1
 80025fe:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	4619      	mov	r1, r3
 8002606:	f04f 0201 	mov.w	r2, #1
 800260a:	f7ff ff61 	bl	80024d0 <LCD_PolyLineRelativeClosed>
}
 800260e:	f107 0708 	add.w	r7, r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop

08002618 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8002618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261a:	b0ed      	sub	sp, #436	; 0x1b4
 800261c:	af00      	add	r7, sp, #0
 800261e:	f107 0304 	add.w	r3, r7, #4
 8002622:	6018      	str	r0, [r3, #0]
 8002624:	460b      	mov	r3, r1
 8002626:	461a      	mov	r2, r3
 8002628:	f107 0302 	add.w	r3, r7, #2
 800262c:	801a      	strh	r2, [r3, #0]
  /*  public-domain code by Darel Rex Finley, 2007 */
  uint16_t  nodes = 0, nodeX[MAX_POLY_CORNERS], pixelX = 0, pixelY = 0, i = 0,
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8002646:	f04f 0300 	mov.w	r3, #0
 800264a:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
  j = 0, swap = 0;
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
 8002656:	f04f 0300 	mov.w	r3, #0
 800265a:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 800267e:	f107 0304 	add.w	r3, r7, #4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 800268a:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 800268e:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8002692:	f107 0304 	add.w	r3, r7, #4
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	885b      	ldrh	r3, [r3, #2]
 800269a:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
 800269e:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 80026a2:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

  for(i = 1; i < PointCount; i++)
 80026a6:	f04f 0301 	mov.w	r3, #1
 80026aa:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 80026ae:	e043      	b.n	8002738 <LCD_FillPolyLine+0x120>
  {
    pixelX = POLY_X(i);
 80026b0:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80026b4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80026b8:	f107 0204 	add.w	r2, r7, #4
 80026bc:	6812      	ldr	r2, [r2, #0]
 80026be:	18d3      	adds	r3, r2, r3
 80026c0:	885b      	ldrh	r3, [r3, #2]
 80026c2:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    if(pixelX < IMAGE_LEFT)
 80026c6:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 80026ca:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d203      	bcs.n	80026da <LCD_FillPolyLine+0xc2>
    {
      IMAGE_LEFT = pixelX;
 80026d2:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 80026d6:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
    }
    if(pixelX > IMAGE_RIGHT)
 80026da:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 80026de:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d903      	bls.n	80026ee <LCD_FillPolyLine+0xd6>
    {
      IMAGE_RIGHT = pixelX;
 80026e6:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 80026ea:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
    }
    
    pixelY = POLY_Y(i);
 80026ee:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80026f2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80026f6:	f107 0204 	add.w	r2, r7, #4
 80026fa:	6812      	ldr	r2, [r2, #0]
 80026fc:	18d3      	adds	r3, r2, r3
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
    if(pixelY < IMAGE_TOP)
 8002704:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8002708:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 800270c:	429a      	cmp	r2, r3
 800270e:	d203      	bcs.n	8002718 <LCD_FillPolyLine+0x100>
    { 
      IMAGE_TOP = pixelY;
 8002710:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002714:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
    }
    if(pixelY > IMAGE_BOTTOM)
 8002718:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 800271c:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8002720:	429a      	cmp	r2, r3
 8002722:	d903      	bls.n	800272c <LCD_FillPolyLine+0x114>
    {
      IMAGE_BOTTOM = pixelY;
 8002724:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002728:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(i = 1; i < PointCount; i++)
 800272c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002730:	f103 0301 	add.w	r3, r3, #1
 8002734:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002738:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800273c:	f107 0302 	add.w	r3, r7, #2
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d3b4      	bcc.n	80026b0 <LCD_FillPolyLine+0x98>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }
  
  LCD_SetTextColor(BackColor);  
 8002746:	f240 034c 	movw	r3, #76	; 0x4c
 800274a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f892 	bl	800187c <LCD_SetTextColor>

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 8002758:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 800275c:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8002760:	e209      	b.n	8002b76 <LCD_FillPolyLine+0x55e>
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 800276a:	f107 0302 	add.w	r3, r7, #2
 800276e:	881b      	ldrh	r3, [r3, #0]
 8002770:	f103 33ff 	add.w	r3, r3, #4294967295
 8002774:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8

    for (i = 0; i < PointCount; i++) 
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002780:	e0f6      	b.n	8002970 <LCD_FillPolyLine+0x358>
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 8002782:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002786:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800278a:	f107 0204 	add.w	r2, r7, #4
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b21b      	sxth	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fe86 	bl	80004a8 <__aeabi_i2d>
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe6f 	bl	8000488 <__aeabi_ui2d>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	f04f 0101 	mov.w	r1, #1
 80027b2:	460e      	mov	r6, r1
 80027b4:	4620      	mov	r0, r4
 80027b6:	4629      	mov	r1, r5
 80027b8:	f7fd ff3c 	bl	8000634 <__aeabi_dcmplt>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <LCD_FillPolyLine+0x1b0>
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	461e      	mov	r6, r3
 80027c8:	b2f3      	uxtb	r3, r6
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d025      	beq.n	800281a <LCD_FillPolyLine+0x202>
 80027ce:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 80027d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80027d6:	f107 0204 	add.w	r2, r7, #4
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fd fe60 	bl	80004a8 <__aeabi_i2d>
 80027e8:	4604      	mov	r4, r0
 80027ea:	460d      	mov	r5, r1
 80027ec:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fd fe49 	bl	8000488 <__aeabi_ui2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	f04f 0101 	mov.w	r1, #1
 80027fe:	460e      	mov	r6, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd ff2a 	bl	800065c <__aeabi_dcmpge>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <LCD_FillPolyLine+0x1fc>
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	461e      	mov	r6, r3
 8002814:	b2f3      	uxtb	r3, r6
 8002816:	2b00      	cmp	r3, #0
 8002818:	d14b      	bne.n	80028b2 <LCD_FillPolyLine+0x29a>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 800281a:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 800281e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002822:	f107 0204 	add.w	r2, r7, #4
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	b21b      	sxth	r3, r3
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fe3a 	bl	80004a8 <__aeabi_i2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fe23 	bl	8000488 <__aeabi_ui2d>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	f04f 0101 	mov.w	r1, #1
 800284a:	460e      	mov	r6, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fef0 	bl	8000634 <__aeabi_dcmplt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d102      	bne.n	8002860 <LCD_FillPolyLine+0x248>
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	461e      	mov	r6, r3
 8002860:	b2f3      	uxtb	r3, r6
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 8002862:	2b00      	cmp	r3, #0
 8002864:	d07a      	beq.n	800295c <LCD_FillPolyLine+0x344>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 8002866:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800286a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800286e:	f107 0204 	add.w	r2, r7, #4
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	18d3      	adds	r3, r2, r3
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b21b      	sxth	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	f7fd fe14 	bl	80004a8 <__aeabi_i2d>
 8002880:	4604      	mov	r4, r0
 8002882:	460d      	mov	r5, r1
 8002884:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002888:	4618      	mov	r0, r3
 800288a:	f7fd fdfd 	bl	8000488 <__aeabi_ui2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	f04f 0101 	mov.w	r1, #1
 8002896:	460e      	mov	r6, r1
 8002898:	4620      	mov	r0, r4
 800289a:	4629      	mov	r1, r5
 800289c:	f7fd fede 	bl	800065c <__aeabi_dcmpge>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <LCD_FillPolyLine+0x294>
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	461e      	mov	r6, r3
 80028ac:	b2f3      	uxtb	r3, r6
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d054      	beq.n	800295c <LCD_FillPolyLine+0x344>
      {
        nodeX[nodes++]=(int) (POLY_X(i)+((pixelY-POLY_Y(i))*(POLY_X(j)-POLY_X(i)))/(POLY_Y(j)-POLY_Y(i))); 
 80028b2:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 80028b6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80028ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028be:	f107 0104 	add.w	r1, r7, #4
 80028c2:	6809      	ldr	r1, [r1, #0]
 80028c4:	18cb      	adds	r3, r1, r3
 80028c6:	885b      	ldrh	r3, [r3, #2]
 80028c8:	b299      	uxth	r1, r3
 80028ca:	f8b7 01ac 	ldrh.w	r0, [r7, #428]	; 0x1ac
 80028ce:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80028d2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80028d6:	f107 0404 	add.w	r4, r7, #4
 80028da:	6824      	ldr	r4, [r4, #0]
 80028dc:	18e3      	adds	r3, r4, r3
 80028de:	881b      	ldrh	r3, [r3, #0]
 80028e0:	b21b      	sxth	r3, r3
 80028e2:	1ac3      	subs	r3, r0, r3
 80028e4:	f8b7 01a8 	ldrh.w	r0, [r7, #424]	; 0x1a8
 80028e8:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80028ec:	f107 0404 	add.w	r4, r7, #4
 80028f0:	6824      	ldr	r4, [r4, #0]
 80028f2:	1820      	adds	r0, r4, r0
 80028f4:	8840      	ldrh	r0, [r0, #2]
 80028f6:	b204      	sxth	r4, r0
 80028f8:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 80028fc:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8002900:	f107 0504 	add.w	r5, r7, #4
 8002904:	682d      	ldr	r5, [r5, #0]
 8002906:	1828      	adds	r0, r5, r0
 8002908:	8840      	ldrh	r0, [r0, #2]
 800290a:	b200      	sxth	r0, r0
 800290c:	1a20      	subs	r0, r4, r0
 800290e:	fb00 f003 	mul.w	r0, r0, r3
 8002912:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002916:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800291a:	f107 0404 	add.w	r4, r7, #4
 800291e:	6824      	ldr	r4, [r4, #0]
 8002920:	18e3      	adds	r3, r4, r3
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	b21c      	sxth	r4, r3
 8002926:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800292a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800292e:	f107 0504 	add.w	r5, r7, #4
 8002932:	682d      	ldr	r5, [r5, #0]
 8002934:	18eb      	adds	r3, r5, r3
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b21b      	sxth	r3, r3
 800293a:	1ae3      	subs	r3, r4, r3
 800293c:	fb90 f3f3 	sdiv	r3, r0, r3
 8002940:	b29b      	uxth	r3, r3
 8002942:	18cb      	adds	r3, r1, r3
 8002944:	b29b      	uxth	r3, r3
 8002946:	4619      	mov	r1, r3
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002950:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8002954:	f103 0301 	add.w	r3, r3, #1
 8002958:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
      }
      j = i; 
 800295c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002960:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
 8002964:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002968:	f103 0301 	add.w	r3, r3, #1
 800296c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002970:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002974:	f107 0302 	add.w	r3, r7, #2
 8002978:	881b      	ldrh	r3, [r3, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	f4ff af01 	bcc.w	8002782 <LCD_FillPolyLine+0x16a>
      }
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
    while (i < nodes-1) 
 8002988:	e041      	b.n	8002a0e <LCD_FillPolyLine+0x3f6>
    {
      if (nodeX[i]>nodeX[i+1]) 
 800298a:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800298e:	f107 030c 	add.w	r3, r7, #12
 8002992:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002996:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800299a:	f103 0101 	add.w	r1, r3, #1
 800299e:	f107 030c 	add.w	r3, r7, #12
 80029a2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d92b      	bls.n	8002a02 <LCD_FillPolyLine+0x3ea>
      {
        swap = nodeX[i]; 
 80029aa:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80029b6:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
        nodeX[i] = nodeX[i+1]; 
 80029ba:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80029be:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80029c2:	f103 0101 	add.w	r1, r3, #1
 80029c6:	f107 030c 	add.w	r3, r7, #12
 80029ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80029ce:	4619      	mov	r1, r3
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        nodeX[i+1] = swap; 
 80029d8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80029dc:	f103 0201 	add.w	r2, r3, #1
 80029e0:	f8b7 119c 	ldrh.w	r1, [r7, #412]	; 0x19c
 80029e4:	f107 030c 	add.w	r3, r7, #12
 80029e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if(i)
 80029ec:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <LCD_FillPolyLine+0x3f6>
        {
          i--; 
 80029f4:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80029f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80029fc:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002a00:	e005      	b.n	8002a0e <LCD_FillPolyLine+0x3f6>
        }
      }
      else 
      {
        i++;
 8002a02:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002a06:	f103 0301 	add.w	r3, r3, #1
 8002a0a:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
    while (i < nodes-1) 
 8002a0e:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002a12:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8002a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	dbb5      	blt.n	800298a <LCD_FillPolyLine+0x372>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002a26:	e097      	b.n	8002b58 <LCD_FillPolyLine+0x540>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
 8002a28:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a34:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	f240 8095 	bls.w	8002b68 <LCD_FillPolyLine+0x550>
      {
        break;
      }
      if(nodeX[i+1] > IMAGE_LEFT) 
 8002a3e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002a42:	f103 0201 	add.w	r2, r3, #1
 8002a46:	f107 030c 	add.w	r3, r7, #12
 8002a4a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a4e:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d27a      	bcs.n	8002b4c <LCD_FillPolyLine+0x534>
      {
        if (nodeX[i] < IMAGE_LEFT)
 8002a56:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a62:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d907      	bls.n	8002a7a <LCD_FillPolyLine+0x462>
        {
          nodeX[i]=IMAGE_LEFT;
 8002a6a:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002a6e:	f8b7 11a6 	ldrh.w	r1, [r7, #422]	; 0x1a6
 8002a72:	f107 030c 	add.w	r3, r7, #12
 8002a76:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        if(nodeX[i+1] > IMAGE_RIGHT)
 8002a7a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002a7e:	f103 0201 	add.w	r2, r3, #1
 8002a82:	f107 030c 	add.w	r3, r7, #12
 8002a86:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002a8a:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d209      	bcs.n	8002aa6 <LCD_FillPolyLine+0x48e>
        {
          nodeX[i+1] = IMAGE_RIGHT;
 8002a92:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002a96:	f103 0201 	add.w	r2, r3, #1
 8002a9a:	f8b7 11a4 	ldrh.w	r1, [r7, #420]	; 0x1a4
 8002a9e:	f107 030c 	add.w	r3, r7, #12
 8002aa2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        LCD_SetTextColor(BackColor);
 8002aa6:	f240 034c 	movw	r3, #76	; 0x4c
 8002aaa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fe fee2 	bl	800187c <LCD_SetTextColor>
        LCD_DrawLine(pixelY, nodeX[i+1], nodeX[i+1] - nodeX[i], LCD_DIR_HORIZONTAL);
 8002ab8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002abc:	f103 0201 	add.w	r2, r3, #1
 8002ac0:	f107 030c 	add.w	r3, r7, #12
 8002ac4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8002ac8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002acc:	f103 0101 	add.w	r1, r3, #1
 8002ad0:	f107 030c 	add.w	r3, r7, #12
 8002ad4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8002ad8:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 8002adc:	f107 030c 	add.w	r3, r7, #12
 8002ae0:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8002ae4:	1acb      	subs	r3, r1, r3
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f8b7 11ac 	ldrh.w	r1, [r7, #428]	; 0x1ac
 8002aec:	4608      	mov	r0, r1
 8002aee:	4611      	mov	r1, r2
 8002af0:	461a      	mov	r2, r3
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f7ff f8cf 	bl	8001c98 <LCD_DrawLine>
        LCD_SetTextColor(TextColor);
 8002afa:	f240 0384 	movw	r3, #132	; 0x84
 8002afe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b02:	881b      	ldrh	r3, [r3, #0]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fe feb8 	bl	800187c <LCD_SetTextColor>
        PutPixel(pixelY, nodeX[i+1]);
 8002b0c:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8002b10:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002b14:	f103 0101 	add.w	r1, r3, #1
 8002b18:	f107 030c 	add.w	r3, r7, #12
 8002b1c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b212      	sxth	r2, r2
 8002b24:	b21b      	sxth	r3, r3
 8002b26:	4610      	mov	r0, r2
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f7fe ff3f 	bl	80019ac <PutPixel>
        PutPixel(pixelY, nodeX[i]);
 8002b2e:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8002b32:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 8002b36:	f107 030c 	add.w	r3, r7, #12
 8002b3a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	b212      	sxth	r2, r2
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	4619      	mov	r1, r3
 8002b48:	f7fe ff30 	bl	80019ac <PutPixel>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 8002b4c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002b50:	f103 0302 	add.w	r3, r3, #2
 8002b54:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002b58:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002b5c:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8002b60:	429a      	cmp	r2, r3
 8002b62:	f4ff af61 	bcc.w	8002a28 <LCD_FillPolyLine+0x410>
 8002b66:	e000      	b.n	8002b6a <LCD_FillPolyLine+0x552>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
      {
        break;
 8002b68:	bf00      	nop
  }
  
  LCD_SetTextColor(BackColor);  

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 8002b6a:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002b6e:	f103 0301 	add.w	r3, r3, #1
 8002b72:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8002b76:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8002b7a:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	f4ff adef 	bcc.w	8002762 <LCD_FillPolyLine+0x14a>
        /* for (j=nodeX[i]; j<nodeX[i+1]; j++) PutPixel(j,pixelY); */
      }
    }
  } 
  /* draw the edges */
  LCD_SetTextColor(TextColor);
 8002b84:	f240 0384 	movw	r3, #132	; 0x84
 8002b88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fe fe73 	bl	800187c <LCD_SetTextColor>
}
 8002b96:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b9e:	bf00      	nop

08002ba0 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
  for(index = (10000 * nCount); index != 0; index--)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f242 7210 	movw	r2, #10000	; 0x2710
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	e003      	b.n	8002bc4 <delay+0x24>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f8      	bne.n	8002bbc <delay+0x1c>
  {
  }
}
 8002bca:	f107 0714 	add.w	r7, r7, #20
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8002bdc:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002be0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8002bea:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8002bee:	60da      	str	r2, [r3, #12]
}
 8002bf0:	f107 070c 	add.w	r7, r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	f04f 0300 	mov.w	r3, #0
 8002c0e:	73bb      	strb	r3, [r7, #14]
 8002c10:	f04f 030f 	mov.w	r3, #15
 8002c14:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	78db      	ldrb	r3, [r3, #3]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d045      	beq.n	8002caa <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002c1e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002c22:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	ea6f 0303 	mvn.w	r3, r3
 8002c2c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c30:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002c34:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	f1c3 0304 	rsb	r3, r3, #4
 8002c3c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002c3e:	7b7a      	ldrb	r2, [r7, #13]
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	fa42 f303 	asr.w	r3, r2, r3
 8002c46:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	785b      	ldrb	r3, [r3, #1]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	789a      	ldrb	r2, [r3, #2]
 8002c5a:	7b7b      	ldrb	r3, [r7, #13]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002c6c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002c6e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002c72:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	189b      	adds	r3, r3, r2
 8002c7c:	7bfa      	ldrb	r2, [r7, #15]
 8002c7e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c82:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002c86:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	7812      	ldrb	r2, [r2, #0]
 8002c8e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8002c92:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	7809      	ldrb	r1, [r1, #0]
 8002c98:	f001 011f 	and.w	r1, r1, #31
 8002c9c:	f04f 0001 	mov.w	r0, #1
 8002ca0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002ca8:	e014      	b.n	8002cd4 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002caa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002cae:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	7812      	ldrb	r2, [r2, #0]
 8002cb6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8002cba:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	7809      	ldrb	r1, [r1, #0]
 8002cc0:	f001 011f 	and.w	r1, r1, #31
 8002cc4:	f04f 0001 	mov.w	r0, #1
 8002cc8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002ccc:	f102 0220 	add.w	r2, r2, #32
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002cd4:	f107 0714 	add.w	r7, r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8002cea:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002cee:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8002cf8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	609a      	str	r2, [r3, #8]
}
 8002d02:	f107 070c 	add.w	r7, r7, #12
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr

08002d0c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4602      	mov	r2, r0
 8002d14:	460b      	mov	r3, r1
 8002d16:	71fa      	strb	r2, [r7, #7]
 8002d18:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8002d1a:	79bb      	ldrb	r3, [r7, #6]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8002d20:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002d24:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002d28:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8002d2c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002d30:	6911      	ldr	r1, [r2, #16]
 8002d32:	79fa      	ldrb	r2, [r7, #7]
 8002d34:	430a      	orrs	r2, r1
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	e00d      	b.n	8002d56 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8002d3a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8002d3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002d42:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8002d46:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002d4a:	6911      	ldr	r1, [r2, #16]
 8002d4c:	79fa      	ldrb	r2, [r7, #7]
 8002d4e:	ea6f 0202 	mvn.w	r2, r2
 8002d52:	400a      	ands	r2, r1
 8002d54:	611a      	str	r2, [r3, #16]
  }
}
 8002d56:	f107 070c 	add.w	r7, r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bc80      	pop	{r7}
 8002d5e:	4770      	bx	lr

08002d60 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d10c      	bne.n	8002d88 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8002d6e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002d72:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002d76:	f24e 0210 	movw	r2, #57360	; 0xe010
 8002d7a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	f042 0204 	orr.w	r2, r2, #4
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	e00b      	b.n	8002da0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8002d88:	f24e 0310 	movw	r3, #57360	; 0xe010
 8002d8c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8002d90:	f24e 0210 	movw	r2, #57360	; 0xe010
 8002d94:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	f022 0204 	bic.w	r2, r2, #4
 8002d9e:	601a      	str	r2, [r3, #0]
  }
}
 8002da0:	f107 070c 	add.w	r7, r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop

08002dac <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8002db0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002db4:	f04f 0101 	mov.w	r1, #1
 8002db8:	f009 f868 	bl	800be8c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8002dbc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002dc0:	f04f 0100 	mov.w	r1, #0
 8002dc4:	f009 f862 	bl	800be8c <RCC_APB2PeriphResetCmd>
}
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop

08002dcc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8002dd6:	f04f 0300 	mov.w	r3, #0
 8002dda:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df2:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8002e00:	4313      	orrs	r3, r2
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68fa      	ldr	r2, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8002e1a:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002e2a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8002e30:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	795b      	ldrb	r3, [r3, #5]
 8002e36:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e54:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	7d1b      	ldrb	r3, [r3, #20]
 8002e5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8002e66:	7afb      	ldrb	r3, [r7, #11]
 8002e68:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002e78:	f107 0714 	add.w	r7, r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr
 8002e82:	bf00      	nop

08002e84 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f04f 0201 	mov.w	r2, #1
 8002ec2:	751a      	strb	r2, [r3, #20]
}
 8002ec4:	f107 070c 	add.w	r7, r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop

08002ed0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8002ede:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002ee2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8002ef0:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002f00:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8002f06:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8002f14:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8002f18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	605a      	str	r2, [r3, #4]
}
 8002f20:	f107 0714 	add.w	r7, r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop

08002f2c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	60da      	str	r2, [r3, #12]
}
 8002f54:	f107 070c 	add.w	r7, r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bc80      	pop	{r7}
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop

08002f60 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d006      	beq.n	8002f80 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e005      	b.n	8002f8c <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f023 0201 	bic.w	r2, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
  }
}
 8002f8c:	f107 070c 	add.w	r7, r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002fb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fb8:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	605a      	str	r2, [r3, #4]
}
 8002fc8:	f107 0714 	add.w	r7, r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	460a      	mov	r2, r1
 8002fe0:	807a      	strh	r2, [r7, #2]
 8002fe2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8002fea:	883a      	ldrh	r2, [r7, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ff0:	f107 070c 	add.w	r7, r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bc80      	pop	{r7}
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f023 031f 	bic.w	r3, r3, #31
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800301c:	78fb      	ldrb	r3, [r7, #3]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	605a      	str	r2, [r3, #4]
}
 800302a:	f107 0714 	add.w	r7, r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00c      	beq.n	800305e <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8003044:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003048:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800304c:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003050:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003054:	6852      	ldr	r2, [r2, #4]
 8003056:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800305a:	605a      	str	r2, [r3, #4]
 800305c:	e00b      	b.n	8003076 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800305e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003062:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003066:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800306a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800306e:	6852      	ldr	r2, [r2, #4]
 8003070:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003074:	605a      	str	r2, [r3, #4]
  }
}
 8003076:	f107 070c 	add.w	r7, r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	bc80      	pop	{r7}
 800307e:	4770      	bx	lr

08003080 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8003090:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003094:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003098:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800309c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80030a0:	6852      	ldr	r2, [r2, #4]
 80030a2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	e00b      	b.n	80030c2 <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80030aa:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80030ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80030b2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80030b6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80030ba:	6852      	ldr	r2, [r2, #4]
 80030bc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80030c0:	605a      	str	r2, [r3, #4]
  }
}
 80030c2:	f107 070c 	add.w	r7, r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bc80      	pop	{r7}
 80030ca:	4770      	bx	lr

080030cc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	70f9      	strb	r1, [r7, #3]
 80030d6:	70ba      	strb	r2, [r7, #2]
 80030d8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
 80030e0:	f04f 0300 	mov.w	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80030e6:	78fb      	ldrb	r3, [r7, #3]
 80030e8:	2b09      	cmp	r3, #9
 80030ea:	d927      	bls.n	800313c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	4613      	mov	r3, r2
 80030f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030fa:	189b      	adds	r3, r3, r2
 80030fc:	f1a3 031e 	sub.w	r3, r3, #30
 8003100:	f04f 0207 	mov.w	r2, #7
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	ea6f 0303 	mvn.w	r3, r3
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4013      	ands	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003116:	7879      	ldrb	r1, [r7, #1]
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	4613      	mov	r3, r2
 800311c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003120:	189b      	adds	r3, r3, r2
 8003122:	f1a3 031e 	sub.w	r3, r3, #30
 8003126:	fa01 f303 	lsl.w	r3, r1, r3
 800312a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	e022      	b.n	8003182 <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	4613      	mov	r3, r2
 8003146:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800314a:	189b      	adds	r3, r3, r2
 800314c:	f04f 0207 	mov.w	r2, #7
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	ea6f 0303 	mvn.w	r3, r3
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8003162:	7879      	ldrb	r1, [r7, #1]
 8003164:	78fa      	ldrb	r2, [r7, #3]
 8003166:	4613      	mov	r3, r2
 8003168:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800316c:	189b      	adds	r3, r3, r2
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8003182:	78bb      	ldrb	r3, [r7, #2]
 8003184:	2b06      	cmp	r3, #6
 8003186:	d827      	bhi.n	80031d8 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 800318e:	78bb      	ldrb	r3, [r7, #2]
 8003190:	f103 32ff 	add.w	r2, r3, #4294967295
 8003194:	4613      	mov	r3, r2
 8003196:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800319a:	189b      	adds	r3, r3, r2
 800319c:	f04f 021f 	mov.w	r2, #31
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	ea6f 0303 	mvn.w	r3, r3
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4013      	ands	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80031b2:	78f9      	ldrb	r1, [r7, #3]
 80031b4:	78bb      	ldrb	r3, [r7, #2]
 80031b6:	f103 32ff 	add.w	r2, r3, #4294967295
 80031ba:	4613      	mov	r3, r2
 80031bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	fa01 f303 	lsl.w	r3, r1, r3
 80031c6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	635a      	str	r2, [r3, #52]	; 0x34
 80031d6:	e051      	b.n	800327c <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80031d8:	78bb      	ldrb	r3, [r7, #2]
 80031da:	2b0c      	cmp	r3, #12
 80031dc:	d827      	bhi.n	800322e <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80031e4:	78ba      	ldrb	r2, [r7, #2]
 80031e6:	4613      	mov	r3, r2
 80031e8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80031ec:	189b      	adds	r3, r3, r2
 80031ee:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 80031f2:	f04f 021f 	mov.w	r2, #31
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	ea6f 0303 	mvn.w	r3, r3
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8003208:	78f9      	ldrb	r1, [r7, #3]
 800320a:	78ba      	ldrb	r2, [r7, #2]
 800320c:	4613      	mov	r3, r2
 800320e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003212:	189b      	adds	r3, r3, r2
 8003214:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8003218:	fa01 f303 	lsl.w	r3, r1, r3
 800321c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
 800322c:	e026      	b.n	800327c <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8003234:	78ba      	ldrb	r2, [r7, #2]
 8003236:	4613      	mov	r3, r2
 8003238:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800323c:	189b      	adds	r3, r3, r2
 800323e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8003242:	f04f 021f 	mov.w	r2, #31
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	ea6f 0303 	mvn.w	r3, r3
 8003252:	68fa      	ldr	r2, [r7, #12]
 8003254:	4013      	ands	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8003258:	78f9      	ldrb	r1, [r7, #3]
 800325a:	78ba      	ldrb	r2, [r7, #2]
 800325c:	4613      	mov	r3, r2
 800325e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003262:	189b      	adds	r3, r3, r2
 8003264:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8003268:	fa01 f303 	lsl.w	r3, r1, r3
 800326c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4313      	orrs	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800327c:	f107 0714 	add.w	r7, r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop

08003288 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	f107 070c 	add.w	r7, r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop

080032a8 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80032c2:	f04f 0301 	mov.w	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
 80032c8:	e002      	b.n	80032d0 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 80032d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	f107 0714 	add.w	r7, r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop

080032e0 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80032ec:	78fb      	ldrb	r3, [r7, #3]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	609a      	str	r2, [r3, #8]
 80032fe:	e005      	b.n	800330c <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	609a      	str	r2, [r3, #8]
  }
}
 800330c:	f107 070c 	add.w	r7, r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop

08003318 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	460b      	mov	r3, r1
 8003322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003324:	78fb      	ldrb	r3, [r7, #3]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f043 0202 	orr.w	r2, r3, #2
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	e005      	b.n	8003344 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 0202 	bic.w	r2, r3, #2
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	609a      	str	r2, [r3, #8]
  }
}
 8003344:	f107 070c 	add.w	r7, r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop

08003350 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003374:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	f103 33ff 	add.w	r3, r3, #4294967295
 800337c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	ea4f 3343 	mov.w	r3, r3, lsl #13
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	605a      	str	r2, [r3, #4]
}
 8003390:	f107 0714 	add.w	r7, r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop

0800339c <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	460b      	mov	r3, r1
 80033a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d006      	beq.n	80033bc <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	605a      	str	r2, [r3, #4]
 80033ba:	e005      	b.n	80033c8 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	605a      	str	r2, [r3, #4]
  }
}
 80033c8:	f107 070c 	add.w	r7, r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop

080033d4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e0:	b29b      	uxth	r3, r3
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	f107 070c 	add.w	r7, r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bc80      	pop	{r7}
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop

080033f0 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80033f4:	f242 3308 	movw	r3, #8968	; 0x2308
 80033f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80033fc:	681b      	ldr	r3, [r3, #0]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop

08003408 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	609a      	str	r2, [r3, #8]
 8003426:	e005      	b.n	8003434 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	609a      	str	r2, [r3, #8]
  }
}
 8003434:	f107 070c 	add.w	r7, r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	bc80      	pop	{r7}
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d006      	beq.n	8003460 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	609a      	str	r2, [r3, #8]
 800345e:	e005      	b.n	800346c <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	609a      	str	r2, [r3, #8]
  }
}
 800346c:	f107 070c 	add.w	r7, r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00c      	beq.n	80034a2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8003488:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800348c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003490:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003494:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003498:	6852      	ldr	r2, [r2, #4]
 800349a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	e00b      	b.n	80034ba <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80034a2:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80034a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80034aa:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80034ae:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80034b2:	6852      	ldr	r2, [r2, #4]
 80034b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034b8:	605a      	str	r2, [r3, #4]
  }
}
 80034ba:	f107 070c 	add.w	r7, r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr

080034c4 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b087      	sub	sp, #28
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	70f9      	strb	r1, [r7, #3]
 80034ce:	70ba      	strb	r2, [r7, #2]
 80034d0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	2b09      	cmp	r3, #9
 80034e8:	d927      	bls.n	800353a <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	4613      	mov	r3, r2
 80034f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80034f8:	189b      	adds	r3, r3, r2
 80034fa:	f1a3 031e 	sub.w	r3, r3, #30
 80034fe:	f04f 0207 	mov.w	r2, #7
 8003502:	fa02 f303 	lsl.w	r3, r2, r3
 8003506:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ea6f 0303 	mvn.w	r3, r3
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8003514:	7879      	ldrb	r1, [r7, #1]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4613      	mov	r3, r2
 800351a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800351e:	189b      	adds	r3, r3, r2
 8003520:	f1a3 031e 	sub.w	r3, r3, #30
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	60da      	str	r2, [r3, #12]
 8003538:	e022      	b.n	8003580 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8003540:	78fa      	ldrb	r2, [r7, #3]
 8003542:	4613      	mov	r3, r2
 8003544:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003548:	189b      	adds	r3, r3, r2
 800354a:	f04f 0207 	mov.w	r2, #7
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	ea6f 0303 	mvn.w	r3, r3
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4013      	ands	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8003560:	7879      	ldrb	r1, [r7, #1]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	4613      	mov	r3, r2
 8003566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800356a:	189b      	adds	r3, r3, r2
 800356c:	fa01 f303 	lsl.w	r3, r1, r3
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003584:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800358c:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8003590:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	ea6f 0303 	mvn.w	r3, r3
 800359a:	b2da      	uxtb	r2, r3
 800359c:	78bb      	ldrb	r3, [r7, #2]
 800359e:	18d3      	adds	r3, r2, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	f103 0303 	add.w	r3, r3, #3
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	461a      	mov	r2, r3
 80035aa:	4613      	mov	r3, r2
 80035ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035b0:	189b      	adds	r3, r3, r2
 80035b2:	f04f 021f 	mov.w	r2, #31
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	ea6f 0303 	mvn.w	r3, r3
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4013      	ands	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80035c8:	78f9      	ldrb	r1, [r7, #3]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	ea6f 0303 	mvn.w	r3, r3
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	78bb      	ldrb	r3, [r7, #2]
 80035d6:	18d3      	adds	r3, r2, r3
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f103 0303 	add.w	r3, r3, #3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
 80035e2:	4613      	mov	r3, r2
 80035e4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035e8:	189b      	adds	r3, r3, r2
 80035ea:	fa01 f303 	lsl.w	r3, r1, r3
 80035ee:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	639a      	str	r2, [r3, #56]	; 0x38
}
 80035fe:	f107 071c 	add.w	r7, r7, #28
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003624:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800362c:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	f103 33ff 	add.w	r3, r3, #4294967295
 8003634:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003648:	f107 0714 	add.w	r7, r7, #20
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	460a      	mov	r2, r1
 8003660:	70fa      	strb	r2, [r7, #3]
 8003662:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	883a      	ldrh	r2, [r7, #0]
 800367a:	601a      	str	r2, [r3, #0]
}
 800367c:	f107 0714 	add.w	r7, r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop

08003688 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80036a4:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	609a      	str	r2, [r3, #8]
}
 80036b4:	f107 0714 	add.w	r7, r7, #20
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bc80      	pop	{r7}
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80036dc:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68fa      	ldr	r2, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	f107 0714 	add.w	r7, r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	f107 070c 	add.w	r7, r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop

08003718 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8003720:	f04f 0300 	mov.w	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d003      	beq.n	800373a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8003732:	f04f 0301 	mov.w	r3, #1
 8003736:	73fb      	strb	r3, [r7, #15]
 8003738:	e002      	b.n	8003740 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8003740:	7bfb      	ldrb	r3, [r7, #15]
}
 8003742:	4618      	mov	r0, r3
 8003744:	f107 0714 	add.w	r7, r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e005      	b.n	800377c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]
  }
}
 800377c:	f107 070c 	add.w	r7, r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	bc80      	pop	{r7}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop

08003788 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	460b      	mov	r3, r1
 8003792:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d006      	beq.n	80037a8 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
 80037a6:	e005      	b.n	80037b4 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	605a      	str	r2, [r3, #4]
  }
}
 80037b4:	f107 070c 	add.w	r7, r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop

080037c0 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80037cc:	f04f 0300 	mov.w	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	18d3      	adds	r3, r2, r3
 80037dc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80037e0:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b29b      	uxth	r3, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	f107 0714 	add.w	r7, r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr

080037f4 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	4613      	mov	r3, r2
 80037fe:	460a      	mov	r2, r1
 8003800:	807a      	strh	r2, [r7, #2]
 8003802:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 800380a:	887b      	ldrh	r3, [r7, #2]
 800380c:	b2db      	uxtb	r3, r3
 800380e:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f04f 0201 	mov.w	r2, #1
 8003816:	fa02 f303 	lsl.w	r3, r2, r3
 800381a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 800381c:	787b      	ldrb	r3, [r7, #1]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d006      	beq.n	8003830 <ADC_ITConfig+0x3c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	431a      	orrs	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	e007      	b.n	8003840 <ADC_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	ea6f 0303 	mvn.w	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	605a      	str	r2, [r3, #4]
  }
}
 8003840:	f107 0714 	add.w	r7, r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop

0800384c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8003858:	f04f 0300 	mov.w	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800386a:	f04f 0301 	mov.w	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e002      	b.n	8003878 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8003878:	7bfb      	ldrb	r3, [r7, #15]
}
 800387a:	4618      	mov	r0, r3
 800387c:	f107 0714 	add.w	r7, r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop

08003888 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	ea6f 0203 	mvn.w	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	601a      	str	r2, [r3, #0]
}
 800389e:	f107 070c 	add.w	r7, r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 80038ba:	f04f 0300 	mov.w	r3, #0
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	f04f 0101 	mov.w	r1, #1
 80038dc:	fa01 f303 	lsl.w	r3, r1, r3
 80038e0:	4013      	ands	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <ADC_GetITStatus+0x56>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <ADC_GetITStatus+0x56>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80038f6:	f04f 0301 	mov.w	r3, #1
 80038fa:	75fb      	strb	r3, [r7, #23]
 80038fc:	e002      	b.n	8003904 <ADC_GetITStatus+0x5c>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8003904:	7dfb      	ldrb	r3, [r7, #23]
}
 8003906:	4618      	mov	r0, r3
 8003908:	f107 071c 	add.w	r7, r7, #28
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop

08003914 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8003926:	887b      	ldrh	r3, [r7, #2]
 8003928:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800392c:	b29b      	uxth	r3, r3
 800392e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8003930:	7bfb      	ldrb	r3, [r7, #15]
 8003932:	ea6f 0203 	mvn.w	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
}                    
 800393a:	f107 0714 	add.w	r7, r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003952:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003956:	429a      	cmp	r2, r3
 8003958:	d10c      	bne.n	8003974 <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800395a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800395e:	f04f 0101 	mov.w	r1, #1
 8003962:	f008 fa69 	bl	800be38 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8003966:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	f008 fa63 	bl	800be38 <RCC_APB1PeriphResetCmd>
 8003972:	e00b      	b.n	800398c <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8003974:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003978:	f04f 0101 	mov.w	r1, #1
 800397c:	f008 fa5c 	bl	800be38 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8003980:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003984:	f04f 0100 	mov.w	r1, #0
 8003988:	f008 fa56 	bl	800be38 <RCC_APB1PeriphResetCmd>
  }
}
 800398c:	f107 0708 	add.w	r7, r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 800399e:	f04f 0300 	mov.w	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f023 0202 	bic.w	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80039c2:	e003      	b.n	80039cc <CAN_Init+0x38>
  {
    wait_ack++;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f103 0301 	add.w	r3, r3, #1
 80039ca:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <CAN_Init+0x4e>
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039de:	429a      	cmp	r2, r3
 80039e0:	d1f0      	bne.n	80039c4 <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d103      	bne.n	80039f6 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
 80039f4:	e0a7      	b.n	8003b46 <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	799b      	ldrb	r3, [r3, #6]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d106      	bne.n	8003a0c <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e005      	b.n	8003a18 <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	79db      	ldrb	r3, [r3, #7]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d106      	bne.n	8003a2e <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	e005      	b.n	8003a3a <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	7a1b      	ldrb	r3, [r3, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d106      	bne.n	8003a50 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f043 0220 	orr.w	r2, r3, #32
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	e005      	b.n	8003a5c <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f023 0220 	bic.w	r2, r3, #32
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	7a5b      	ldrb	r3, [r3, #9]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f043 0210 	orr.w	r2, r3, #16
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e005      	b.n	8003a7e <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f023 0210 	bic.w	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	7a9b      	ldrb	r3, [r3, #10]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d106      	bne.n	8003a94 <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f043 0208 	orr.w	r2, r3, #8
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e005      	b.n	8003aa0 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 0208 	bic.w	r2, r3, #8
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	7adb      	ldrb	r3, [r3, #11]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d106      	bne.n	8003ab6 <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f043 0204 	orr.w	r2, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e005      	b.n	8003ac2 <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f023 0204 	bic.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	789b      	ldrb	r3, [r3, #2]
 8003ac6:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	78db      	ldrb	r3, [r3, #3]
 8003ace:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8003ad2:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	791b      	ldrb	r3, [r3, #4]
 8003ad8:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8003adc:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	795b      	ldrb	r3, [r3, #5]
 8003ae2:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8003ae6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8003af0:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 0201 	bic.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8003b08:	e003      	b.n	8003b12 <CAN_Init+0x17e>
   {
     wait_ack++;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	f103 0301 	add.w	r3, r3, #1
 8003b10:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d004      	beq.n	8003b2a <CAN_Init+0x196>
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d1ef      	bne.n	8003b0a <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 8003b38:	f04f 0300 	mov.w	r3, #0
 8003b3c:	73fb      	strb	r3, [r7, #15]
 8003b3e:	e002      	b.n	8003b46 <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8003b40:	f04f 0301 	mov.w	r3, #1
 8003b44:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8003b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f107 0714 	add.w	r7, r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8003b5c:	f04f 0300 	mov.w	r3, #0
 8003b60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	7a9b      	ldrb	r3, [r3, #10]
 8003b66:	f04f 0201 	mov.w	r2, #1
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8003b70:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003b74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b78:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003b7c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003b80:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003b84:	f042 0201 	orr.w	r2, r2, #1
 8003b88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8003b8c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003b90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003b94:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003b98:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003b9c:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	ea6f 0202 	mvn.w	r2, r2
 8003ba6:	400a      	ands	r2, r1
 8003ba8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7b1b      	ldrb	r3, [r3, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d133      	bne.n	8003c1c <CAN_FilterInit+0xc8>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8003bb4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003bb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bbc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003bc0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003bc4:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	ea6f 0202 	mvn.w	r2, r2
 8003bce:	400a      	ands	r2, r1
 8003bd0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8003bd4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003bd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	88c9      	ldrh	r1, [r1, #6]
 8003be4:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8003bec:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8003bee:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8003bf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8003bf6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003bfa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	8889      	ldrh	r1, [r1, #4]
 8003c06:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8003c0e:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8003c10:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8003c14:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003c18:	18d3      	adds	r3, r2, r3
 8003c1a:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	7b1b      	ldrb	r3, [r3, #12]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d131      	bne.n	8003c88 <CAN_FilterInit+0x134>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8003c24:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003c28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c2c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003c30:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003c34:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8003c40:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003c44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	8809      	ldrh	r1, [r1, #0]
 8003c50:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8003c54:	6879      	ldr	r1, [r7, #4]
 8003c56:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8003c58:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8003c5a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8003c5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8003c62:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003c66:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	8889      	ldrh	r1, [r1, #4]
 8003c72:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8003c7a:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8003c7c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8003c80:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003c84:	18d3      	adds	r3, r2, r3
 8003c86:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	7adb      	ldrb	r3, [r3, #11]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d110      	bne.n	8003cb2 <CAN_FilterInit+0x15e>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8003c90:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003c94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003c98:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003c9c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ca0:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	ea6f 0202 	mvn.w	r2, r2
 8003caa:	400a      	ands	r2, r1
 8003cac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003cb0:	e00d      	b.n	8003cce <CAN_FilterInit+0x17a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8003cb2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003cb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cba:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003cbe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003cc2:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	891b      	ldrh	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10f      	bne.n	8003cf6 <CAN_FilterInit+0x1a2>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8003cd6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003cda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003cde:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003ce2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003ce6:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	ea6f 0202 	mvn.w	r2, r2
 8003cf0:	400a      	ands	r2, r1
 8003cf2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	891b      	ldrh	r3, [r3, #8]
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d10d      	bne.n	8003d1a <CAN_FilterInit+0x1c6>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8003cfe:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003d02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d06:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003d0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d0e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	7b5b      	ldrb	r3, [r3, #13]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d10d      	bne.n	8003d3e <CAN_FilterInit+0x1ea>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8003d22:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003d26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d2a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003d2e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d32:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8003d3e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003d42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003d46:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003d4a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003d4e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003d52:	f022 0201 	bic.w	r2, r2, #1
 8003d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003d5a:	f107 0714 	add.w	r7, r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bc80      	pop	{r7}
 8003d62:	4770      	bx	lr

08003d64 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f04f 0203 	mov.w	r2, #3
 8003db2:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f04f 0202 	mov.w	r2, #2
 8003dba:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f04f 0201 	mov.w	r2, #1
 8003dc2:	801a      	strh	r2, [r3, #0]
}
 8003dc4:	f107 070c 	add.w	r7, r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop

08003dd0 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8003dda:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003dde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003de2:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003de6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003dea:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003dee:	f042 0201 	orr.w	r2, r2, #1
 8003df2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8003df6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003dfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003dfe:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003e02:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e06:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003e0a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003e0e:	f022 020e 	bic.w	r2, r2, #14
 8003e12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8003e16:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003e1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e1e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003e22:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e26:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8003e2a:	79fa      	ldrb	r2, [r7, #7]
 8003e2c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e30:	430a      	orrs	r2, r1
 8003e32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8003e36:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8003e3a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003e3e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8003e42:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003e46:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8003e4a:	f022 0201 	bic.w	r2, r2, #1
 8003e4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003e52:	f107 070c 	add.w	r7, r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bc80      	pop	{r7}
 8003e5a:	4770      	bx	lr

08003e5c <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	460b      	mov	r3, r1
 8003e66:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003e68:	78fb      	ldrb	r3, [r7, #3]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d006      	beq.n	8003e7c <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	e005      	b.n	8003e88 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	601a      	str	r2, [r3, #0]
  }
}
 8003e88:	f107 070c 	add.w	r7, r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop

08003e94 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01e      	beq.n	8003ee4 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003eb8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8003ec8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8003ee2:	e01d      	b.n	8003f20 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8003ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8003f06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8003f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8003f20:	f107 070c 	add.w	r7, r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop

08003f2c <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8003f36:	f04f 0300 	mov.w	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 8003f48:	f04f 0300 	mov.w	r3, #0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	e016      	b.n	8003f7e <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 8003f5c:	f04f 0301 	mov.w	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
 8003f62:	e00c      	b.n	8003f7e <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 8003f70:	f04f 0302 	mov.w	r3, #2
 8003f74:	73fb      	strb	r3, [r7, #15]
 8003f76:	e002      	b.n	8003f7e <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8003f78:	f04f 0304 	mov.w	r3, #4
 8003f7c:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	f000 80ba 	beq.w	80040fa <CAN_Transmit+0x1ce>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	7bfa      	ldrb	r2, [r7, #15]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	f102 0218 	add.w	r2, r2, #24
 8003f90:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8003f94:	188a      	adds	r2, r1, r2
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	f002 0201 	and.w	r2, r2, #1
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	f103 0318 	add.w	r3, r3, #24
 8003fa2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fa6:	18cb      	adds	r3, r1, r3
 8003fa8:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	7a1b      	ldrb	r3, [r3, #8]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d118      	bne.n	8003fe4 <CAN_Transmit+0xb8>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	7bfa      	ldrb	r2, [r7, #15]
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	f102 0218 	add.w	r2, r2, #24
 8003fbc:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8003fc0:	188a      	adds	r2, r1, r2
 8003fc2:	6811      	ldr	r1, [r2, #0]
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8003fd0:	4302      	orrs	r2, r0
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	6879      	ldr	r1, [r7, #4]
 8003fd6:	f103 0318 	add.w	r3, r3, #24
 8003fda:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003fde:	18cb      	adds	r3, r1, r3
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e01a      	b.n	800401a <CAN_Transmit+0xee>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
 8003fe6:	7bfa      	ldrb	r2, [r7, #15]
 8003fe8:	6879      	ldr	r1, [r7, #4]
 8003fea:	f102 0218 	add.w	r2, r2, #24
 8003fee:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8003ff2:	188a      	adds	r2, r1, r2
 8003ff4:	6811      	ldr	r1, [r2, #0]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6852      	ldr	r2, [r2, #4]
 8003ffa:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8004002:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8004008:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800400a:	430a      	orrs	r2, r1
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	f103 0318 	add.w	r3, r3, #24
 8004012:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004016:	18cb      	adds	r3, r1, r3
 8004018:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	7a9b      	ldrb	r3, [r3, #10]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	b2da      	uxtb	r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	7bfa      	ldrb	r2, [r7, #15]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	f102 0218 	add.w	r2, r2, #24
 8004032:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004036:	188a      	adds	r2, r1, r2
 8004038:	6852      	ldr	r2, [r2, #4]
 800403a:	f022 020f 	bic.w	r2, r2, #15
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	f103 0318 	add.w	r3, r3, #24
 8004044:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004048:	18cb      	adds	r3, r1, r3
 800404a:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	f102 0218 	add.w	r2, r2, #24
 8004056:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800405a:	188a      	adds	r2, r1, r2
 800405c:	6851      	ldr	r1, [r2, #4]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	7a92      	ldrb	r2, [r2, #10]
 8004062:	430a      	orrs	r2, r1
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	f103 0318 	add.w	r3, r3, #24
 800406a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800406e:	18cb      	adds	r3, r1, r3
 8004070:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	7b92      	ldrb	r2, [r2, #14]
 8004078:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	7b52      	ldrb	r2, [r2, #13]
 8004080:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004084:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	7b12      	ldrb	r2, [r2, #12]
 800408a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 800408e:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8004094:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800409c:	18cb      	adds	r3, r1, r3
 800409e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80040a2:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80040a4:	7bfb      	ldrb	r3, [r7, #15]
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	7c92      	ldrb	r2, [r2, #18]
 80040aa:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	7c52      	ldrb	r2, [r2, #17]
 80040b2:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80040b6:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	7c12      	ldrb	r2, [r2, #16]
 80040bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80040c0:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80040c6:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80040ce:	18cb      	adds	r3, r1, r3
 80040d0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80040d4:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	7bfa      	ldrb	r2, [r7, #15]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	f102 0218 	add.w	r2, r2, #24
 80040e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80040e4:	188a      	adds	r2, r1, r2
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	6879      	ldr	r1, [r7, #4]
 80040ee:	f103 0318 	add.w	r3, r3, #24
 80040f2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80040f6:	18cb      	adds	r3, r1, r3
 80040f8:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	f107 0714 	add.w	r7, r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8004114:	f04f 0300 	mov.w	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d00c      	beq.n	800413a <CAN_TransmitStatus+0x32>
 8004120:	2b02      	cmp	r3, #2
 8004122:	d013      	beq.n	800414c <CAN_TransmitStatus+0x44>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d11a      	bne.n	800415e <CAN_TransmitStatus+0x56>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	f04f 0303 	mov.w	r3, #3
 8004130:	f2c0 4300 	movt	r3, #1024	; 0x400
 8004134:	4013      	ands	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]
      break;
 8004138:	e015      	b.n	8004166 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004142:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004146:	4013      	ands	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]
      break;
 800414a:	e00c      	b.n	8004166 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f2c1 0303 	movt	r3, #4099	; 0x1003
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
      break;
 800415c:	e003      	b.n	8004166 <CAN_TransmitStatus+0x5e>
    default:
      state = CAN_TxStatus_Failed;
 800415e:	f04f 0300 	mov.w	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
      break;
 8004164:	bf00      	nop
  }
  switch (state)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f44f 7280 	mov.w	r2, #256	; 0x100
 800416c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8004170:	4293      	cmp	r3, r2
 8004172:	d02f      	beq.n	80041d4 <CAN_TransmitStatus+0xcc>
 8004174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004178:	f6c0 0200 	movt	r2, #2048	; 0x800
 800417c:	4293      	cmp	r3, r2
 800417e:	d80e      	bhi.n	800419e <CAN_TransmitStatus+0x96>
 8004180:	f04f 0201 	mov.w	r2, #1
 8004184:	f2c0 4200 	movt	r2, #1024	; 0x400
 8004188:	4293      	cmp	r3, r2
 800418a:	d01f      	beq.n	80041cc <CAN_TransmitStatus+0xc4>
 800418c:	f04f 0203 	mov.w	r2, #3
 8004190:	f2c0 4200 	movt	r2, #1024	; 0x400
 8004194:	4293      	cmp	r3, r2
 8004196:	d025      	beq.n	80041e4 <CAN_TransmitStatus+0xdc>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d013      	beq.n	80041c4 <CAN_TransmitStatus+0xbc>
 800419c:	e02e      	b.n	80041fc <CAN_TransmitStatus+0xf4>
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f2c1 0201 	movt	r2, #4097	; 0x1001
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <CAN_TransmitStatus+0xd4>
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f2c1 0203 	movt	r2, #4099	; 0x1003
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01e      	beq.n	80041f4 <CAN_TransmitStatus+0xec>
 80041b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80041ba:	f6c0 0200 	movt	r2, #2048	; 0x800
 80041be:	4293      	cmp	r3, r2
 80041c0:	d014      	beq.n	80041ec <CAN_TransmitStatus+0xe4>
 80041c2:	e01b      	b.n	80041fc <CAN_TransmitStatus+0xf4>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 80041c4:	f04f 0302 	mov.w	r3, #2
 80041c8:	60fb      	str	r3, [r7, #12]
      break;
 80041ca:	e01b      	b.n	8004204 <CAN_TransmitStatus+0xfc>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
      break;
 80041d2:	e017      	b.n	8004204 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	60fb      	str	r3, [r7, #12]
      break;
 80041da:	e013      	b.n	8004204 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
      break;
 80041e2:	e00f      	b.n	8004204 <CAN_TransmitStatus+0xfc>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 80041e4:	f04f 0301 	mov.w	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
      break;
 80041ea:	e00b      	b.n	8004204 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 80041ec:	f04f 0301 	mov.w	r3, #1
 80041f0:	60fb      	str	r3, [r7, #12]
      break;
 80041f2:	e007      	b.n	8004204 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 80041f4:	f04f 0301 	mov.w	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]
      break;
 80041fa:	e003      	b.n	8004204 <CAN_TransmitStatus+0xfc>
    default: state = CAN_TxStatus_Failed;
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
      break;
 8004202:	bf00      	nop
  }
  return (uint8_t) state;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	b2db      	uxtb	r3, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	f107 0714 	add.w	r7, r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	bc80      	pop	{r7}
 8004212:	4770      	bx	lr

08004214 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8004220:	78fb      	ldrb	r3, [r7, #3]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d00a      	beq.n	800423c <CAN_CancelTransmit+0x28>
 8004226:	2b02      	cmp	r3, #2
 8004228:	d00f      	beq.n	800424a <CAN_CancelTransmit+0x36>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d114      	bne.n	8004258 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
      break;
 800423a:	e00e      	b.n	800425a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	609a      	str	r2, [r3, #8]
      break;
 8004248:	e007      	b.n	800425a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
      break;
 8004256:	e000      	b.n	800425a <CAN_CancelTransmit+0x46>
    default:
      break;
 8004258:	bf00      	nop
  }
}
 800425a:	f107 070c 	add.w	r7, r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr

08004264 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	460b      	mov	r3, r1
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	f103 031b 	add.w	r3, r3, #27
 800427a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	b2da      	uxtb	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	7a1b      	ldrb	r3, [r3, #8]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d10c      	bne.n	80042b0 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8004296:	7afb      	ldrb	r3, [r7, #11]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	f103 031b 	add.w	r3, r3, #27
 800429e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042a2:	18d3      	adds	r3, r2, r3
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	ea4f 5253 	mov.w	r2, r3, lsr #21
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	e00b      	b.n	80042c8 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80042b0:	7afb      	ldrb	r3, [r7, #11]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f103 031b 	add.w	r3, r3, #27
 80042b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042bc:	18d3      	adds	r3, r2, r3
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	f103 031b 	add.w	r3, r3, #27
 80042d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042d4:	18d3      	adds	r3, r2, r3
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80042e4:	7afb      	ldrb	r3, [r7, #11]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	f103 031b 	add.w	r3, r3, #27
 80042ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80042f0:	18d3      	adds	r3, r2, r3
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	f003 030f 	and.w	r3, r3, #15
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	f103 031b 	add.w	r3, r3, #27
 8004308:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800430c:	18d3      	adds	r3, r2, r3
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004314:	b2da      	uxtb	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800431a:	7afb      	ldrb	r3, [r7, #11]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004322:	18d3      	adds	r3, r2, r3
 8004324:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8004330:	7afb      	ldrb	r3, [r7, #11]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004338:	18d3      	adds	r3, r2, r3
 800433a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004344:	b2da      	uxtb	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800434a:	7afb      	ldrb	r3, [r7, #11]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004352:	18d3      	adds	r3, r2, r3
 8004354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800435e:	b2da      	uxtb	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8004364:	7afb      	ldrb	r3, [r7, #11]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800436c:	18d3      	adds	r3, r2, r3
 800436e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8004378:	b2da      	uxtb	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 800437e:	7afb      	ldrb	r3, [r7, #11]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004386:	18d3      	adds	r3, r2, r3
 8004388:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8004394:	7afb      	ldrb	r3, [r7, #11]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800439c:	18d3      	adds	r3, r2, r3
 800439e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80043ae:	7afb      	ldrb	r3, [r7, #11]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80043b6:	18d3      	adds	r3, r2, r3
 80043b8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80043c8:	7afb      	ldrb	r3, [r7, #11]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d106      	bne.n	80043f6 <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f043 0220 	orr.w	r2, r3, #32
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e005      	b.n	8004402 <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	611a      	str	r2, [r3, #16]
  }
}
 8004402:	f107 0714 	add.w	r7, r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr

0800440c <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d106      	bne.n	800442c <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f043 0220 	orr.w	r2, r3, #32
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	e005      	b.n	8004438 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	611a      	str	r2, [r3, #16]
  }
}
 8004438:	f107 070c 	add.w	r7, r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop

08004444 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d106      	bne.n	800446a <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e00c      	b.n	8004484 <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d106      	bne.n	800447e <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e002      	b.n	8004484 <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
}
 8004486:	4618      	mov	r0, r3
 8004488:	f107 0714 	add.w	r7, r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	bc80      	pop	{r7}
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop

08004494 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80044a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044aa:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d123      	bne.n	80044fa <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	f043 0201 	orr.w	r2, r3, #1
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80044c2:	e003      	b.n	80044cc <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80044ca:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f003 0303 	and.w	r3, r3, #3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <CAN_OperatingModeRequest+0x4a>
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f2      	bne.n	80044c4 <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d003      	beq.n	80044f2 <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 80044ea:	f04f 0300 	mov.w	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
 80044f0:	e052      	b.n	8004598 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80044f2:	f04f 0301 	mov.w	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
 80044f8:	e04e      	b.n	8004598 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d121      	bne.n	8004544 <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f023 0203 	bic.w	r2, r3, #3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800450c:	e003      	b.n	8004516 <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f103 33ff 	add.w	r3, r3, #4294967295
 8004514:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <CAN_OperatingModeRequest+0x94>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f2      	bne.n	800450e <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	e02d      	b.n	8004598 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800453c:	f04f 0301 	mov.w	r3, #1
 8004540:	73fb      	strb	r3, [r7, #15]
 8004542:	e029      	b.n	8004598 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8004544:	78fb      	ldrb	r3, [r7, #3]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d123      	bne.n	8004592 <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	f043 0202 	orr.w	r2, r3, #2
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800455a:	e003      	b.n	8004564 <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004562:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f003 0303 	and.w	r3, r3, #3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d002      	beq.n	8004576 <CAN_OperatingModeRequest+0xe2>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f2      	bne.n	800455c <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	2b02      	cmp	r3, #2
 8004580:	d003      	beq.n	800458a <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 8004582:	f04f 0300 	mov.w	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e006      	b.n	8004598 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800458a:	f04f 0301 	mov.w	r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
 8004590:	e002      	b.n	8004598 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	f107 0714 	add.w	r7, r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop

080045a8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80045b0:	f04f 0300 	mov.w	r3, #0
 80045b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	f043 0202 	orr.w	r2, r3, #2
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d102      	bne.n	80045d8 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80045d2:	f04f 0301 	mov.w	r3, #1
 80045d6:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80045d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045da:	4618      	mov	r0, r3
 80045dc:	f107 0714 	add.w	r7, r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bc80      	pop	{r7}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop

080045e8 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80045f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80045f4:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 0202 	bic.w	r2, r3, #2
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8004608:	e003      	b.n	8004612 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004610:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <CAN_WakeUp+0x3c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1f2      	bne.n	800460a <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8004630:	f04f 0301 	mov.w	r3, #1
 8004634:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8004636:	7afb      	ldrb	r3, [r7, #11]
}
 8004638:	4618      	mov	r0, r3
 800463a:	f107 0714 	add.w	r7, r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 800464c:	f04f 0300 	mov.w	r3, #0
 8004650:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800465c:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 800465e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004660:	4618      	mov	r0, r3
 8004662:	f107 0714 	add.w	r7, r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8004682:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8004684:	7bfb      	ldrb	r3, [r7, #15]
}
 8004686:	4618      	mov	r0, r3
 8004688:	f107 0714 	add.w	r7, r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	bc80      	pop	{r7}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop

08004694 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80046aa:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80046ae:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	f107 0714 	add.w	r7, r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop

080046c0 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	4613      	mov	r3, r2
 80046cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80046ce:	79fb      	ldrb	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d006      	beq.n	80046e2 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	431a      	orrs	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	615a      	str	r2, [r3, #20]
 80046e0:	e007      	b.n	80046f2 <CAN_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	ea6f 0303 	mvn.w	r3, r3
 80046ec:	401a      	ands	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	615a      	str	r2, [r3, #20]
  }
}
 80046f2:	f107 0714 	add.w	r7, r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr

080046fc <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699a      	ldr	r2, [r3, #24]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	4013      	ands	r3, r2
 800471e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004722:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <CAN_GetFlagStatus+0x36>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800472a:	f04f 0301 	mov.w	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
 8004730:	e059      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	73fb      	strb	r3, [r7, #15]
 8004738:	e055      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <CAN_GetFlagStatus+0x6c>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	4013      	ands	r3, r2
 800474c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004750:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <CAN_GetFlagStatus+0x64>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004758:	f04f 0301 	mov.w	r3, #1
 800475c:	73fb      	strb	r3, [r7, #15]
 800475e:	e042      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004760:	f04f 0300 	mov.w	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e03e      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d011      	beq.n	8004796 <CAN_GetFlagStatus+0x9a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	4013      	ands	r3, r2
 800477a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800477e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <CAN_GetFlagStatus+0x92>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004786:	f04f 0301 	mov.w	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
 800478c:	e02b      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	e027      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d011      	beq.n	80047c4 <CAN_GetFlagStatus+0xc8>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	4013      	ands	r3, r2
 80047a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <CAN_GetFlagStatus+0xc0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80047b4:	f04f 0301 	mov.w	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e014      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]
 80047c2:	e010      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691a      	ldr	r2, [r3, #16]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	4013      	ands	r3, r2
 80047cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80047d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <CAN_GetFlagStatus+0xe4>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80047d8:	f04f 0301 	mov.w	r3, #1
 80047dc:	73fb      	strb	r3, [r7, #15]
 80047de:	e002      	b.n	80047e6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	f107 0714 	add.w	r7, r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bc80      	pop	{r7}
 80047f2:	4770      	bx	lr

080047f4 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	f04f 0370 	mov.w	r3, #112	; 0x70
 800480a:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 800480e:	429a      	cmp	r2, r3
 8004810:	d104      	bne.n	800481c <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	619a      	str	r2, [r3, #24]
 800481a:	e023      	b.n	8004864 <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004826:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]
 8004838:	e014      	b.n	8004864 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	611a      	str	r2, [r3, #16]
 800484a:	e00b      	b.n	8004864 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	609a      	str	r2, [r3, #8]
 800485c:	e002      	b.n	8004864 <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004864:	f107 0714 	add.w	r7, r7, #20
 8004868:	46bd      	mov	sp, r7
 800486a:	bc80      	pop	{r7}
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop

08004870 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 800487a:	f04f 0300 	mov.w	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	4013      	ands	r3, r2
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80c4 	beq.w	8004a16 <CAN_GetITStatus+0x1a6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d06b      	beq.n	800496c <CAN_GetITStatus+0xfc>
 8004894:	2b40      	cmp	r3, #64	; 0x40
 8004896:	d80f      	bhi.n	80048b8 <CAN_GetITStatus+0x48>
 8004898:	2b04      	cmp	r3, #4
 800489a:	d03f      	beq.n	800491c <CAN_GetITStatus+0xac>
 800489c:	2b04      	cmp	r3, #4
 800489e:	d804      	bhi.n	80048aa <CAN_GetITStatus+0x3a>
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d025      	beq.n	80048f0 <CAN_GetITStatus+0x80>
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d02f      	beq.n	8004908 <CAN_GetITStatus+0x98>
 80048a8:	e0b1      	b.n	8004a0e <CAN_GetITStatus+0x19e>
 80048aa:	2b10      	cmp	r3, #16
 80048ac:	d04a      	beq.n	8004944 <CAN_GetITStatus+0xd4>
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d052      	beq.n	8004958 <CAN_GetITStatus+0xe8>
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d03c      	beq.n	8004930 <CAN_GetITStatus+0xc0>
 80048b6:	e0aa      	b.n	8004a0e <CAN_GetITStatus+0x19e>
 80048b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048bc:	f000 8092 	beq.w	80049e4 <CAN_GetITStatus+0x174>
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c4:	d809      	bhi.n	80048da <CAN_GetITStatus+0x6a>
 80048c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ca:	d077      	beq.n	80049bc <CAN_GetITStatus+0x14c>
 80048cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d0:	d07e      	beq.n	80049d0 <CAN_GetITStatus+0x160>
 80048d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048d6:	d067      	beq.n	80049a8 <CAN_GetITStatus+0x138>
 80048d8:	e099      	b.n	8004a0e <CAN_GetITStatus+0x19e>
 80048da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048de:	d04f      	beq.n	8004980 <CAN_GetITStatus+0x110>
 80048e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e4:	d056      	beq.n	8004994 <CAN_GetITStatus+0x124>
 80048e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ea:	f000 8085 	beq.w	80049f8 <CAN_GetITStatus+0x188>
 80048ee:	e08e      	b.n	8004a0e <CAN_GetITStatus+0x19e>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f240 1101 	movw	r1, #257	; 0x101
 80048fa:	f2c0 0101 	movt	r1, #1
 80048fe:	f000 f911 	bl	8004b24 <CheckITStatus>
 8004902:	4603      	mov	r3, r0
 8004904:	73fb      	strb	r3, [r7, #15]
        break;
 8004906:	e089      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	4618      	mov	r0, r3
 800490e:	f04f 0103 	mov.w	r1, #3
 8004912:	f000 f907 	bl	8004b24 <CheckITStatus>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
        break;
 800491a:	e07f      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	4618      	mov	r0, r3
 8004922:	f04f 0108 	mov.w	r1, #8
 8004926:	f000 f8fd 	bl	8004b24 <CheckITStatus>
 800492a:	4603      	mov	r3, r0
 800492c:	73fb      	strb	r3, [r7, #15]
        break;
 800492e:	e075      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	4618      	mov	r0, r3
 8004936:	f04f 0110 	mov.w	r1, #16
 800493a:	f000 f8f3 	bl	8004b24 <CheckITStatus>
 800493e:	4603      	mov	r3, r0
 8004940:	73fb      	strb	r3, [r7, #15]
        break;
 8004942:	e06b      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4618      	mov	r0, r3
 800494a:	f04f 0103 	mov.w	r1, #3
 800494e:	f000 f8e9 	bl	8004b24 <CheckITStatus>
 8004952:	4603      	mov	r3, r0
 8004954:	73fb      	strb	r3, [r7, #15]
        break;
 8004956:	e061      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4618      	mov	r0, r3
 800495e:	f04f 0108 	mov.w	r1, #8
 8004962:	f000 f8df 	bl	8004b24 <CheckITStatus>
 8004966:	4603      	mov	r3, r0
 8004968:	73fb      	strb	r3, [r7, #15]
        break;
 800496a:	e057      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	4618      	mov	r0, r3
 8004972:	f04f 0110 	mov.w	r1, #16
 8004976:	f000 f8d5 	bl	8004b24 <CheckITStatus>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
        break;
 800497e:	e04d      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	4618      	mov	r0, r3
 8004986:	f04f 0108 	mov.w	r1, #8
 800498a:	f000 f8cb 	bl	8004b24 <CheckITStatus>
 800498e:	4603      	mov	r3, r0
 8004990:	73fb      	strb	r3, [r7, #15]
        break;
 8004992:	e043      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4618      	mov	r0, r3
 800499a:	f04f 0110 	mov.w	r1, #16
 800499e:	f000 f8c1 	bl	8004b24 <CheckITStatus>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
        break;
 80049a6:	e039      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	4618      	mov	r0, r3
 80049ae:	f04f 0101 	mov.w	r1, #1
 80049b2:	f000 f8b7 	bl	8004b24 <CheckITStatus>
 80049b6:	4603      	mov	r3, r0
 80049b8:	73fb      	strb	r3, [r7, #15]
        break;
 80049ba:	e02f      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f04f 0102 	mov.w	r1, #2
 80049c6:	f000 f8ad 	bl	8004b24 <CheckITStatus>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
        break;
 80049ce:	e025      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f04f 0104 	mov.w	r1, #4
 80049da:	f000 f8a3 	bl	8004b24 <CheckITStatus>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
        break;
 80049e2:	e01b      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f04f 0170 	mov.w	r1, #112	; 0x70
 80049ee:	f000 f899 	bl	8004b24 <CheckITStatus>
 80049f2:	4603      	mov	r3, r0
 80049f4:	73fb      	strb	r3, [r7, #15]
        break;
 80049f6:	e011      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f04f 0104 	mov.w	r1, #4
 8004a02:	f000 f88f 	bl	8004b24 <CheckITStatus>
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
        break;
 8004a0a:	bf00      	nop
 8004a0c:	e006      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	73fb      	strb	r3, [r7, #15]
        break;
 8004a14:	e002      	b.n	8004a1c <CAN_GetITStatus+0x1ac>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f107 0710 	add.w	r7, r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a38:	d04c      	beq.n	8004ad4 <CAN_ClearITPendingBit+0xac>
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d80d      	bhi.n	8004a5c <CAN_ClearITPendingBit+0x34>
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d02e      	beq.n	8004aa2 <CAN_ClearITPendingBit+0x7a>
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d804      	bhi.n	8004a52 <CAN_ClearITPendingBit+0x2a>
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d01e      	beq.n	8004a8a <CAN_ClearITPendingBit+0x62>
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d023      	beq.n	8004a98 <CAN_ClearITPendingBit+0x70>
 8004a50:	e061      	b.n	8004b16 <CAN_ClearITPendingBit+0xee>
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d02a      	beq.n	8004aac <CAN_ClearITPendingBit+0x84>
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d02d      	beq.n	8004ab6 <CAN_ClearITPendingBit+0x8e>
 8004a5a:	e05c      	b.n	8004b16 <CAN_ClearITPendingBit+0xee>
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d047      	beq.n	8004af2 <CAN_ClearITPendingBit+0xca>
 8004a62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a66:	d806      	bhi.n	8004a76 <CAN_ClearITPendingBit+0x4e>
 8004a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a6c:	d037      	beq.n	8004ade <CAN_ClearITPendingBit+0xb6>
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d039      	beq.n	8004ae8 <CAN_ClearITPendingBit+0xc0>
 8004a74:	e04f      	b.n	8004b16 <CAN_ClearITPendingBit+0xee>
 8004a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a7a:	d021      	beq.n	8004ac0 <CAN_ClearITPendingBit+0x98>
 8004a7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a80:	d023      	beq.n	8004aca <CAN_ClearITPendingBit+0xa2>
 8004a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a86:	d03d      	beq.n	8004b04 <CAN_ClearITPendingBit+0xdc>
 8004a88:	e045      	b.n	8004b16 <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	f240 1301 	movw	r3, #257	; 0x101
 8004a90:	f2c0 0301 	movt	r3, #1
 8004a94:	6093      	str	r3, [r2, #8]
      break;
 8004a96:	e03f      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f04f 0208 	mov.w	r2, #8
 8004a9e:	60da      	str	r2, [r3, #12]
      break;
 8004aa0:	e03a      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	f04f 0210 	mov.w	r2, #16
 8004aa8:	60da      	str	r2, [r3, #12]
      break;
 8004aaa:	e035      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f04f 0208 	mov.w	r2, #8
 8004ab2:	611a      	str	r2, [r3, #16]
      break;
 8004ab4:	e030      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f04f 0210 	mov.w	r2, #16
 8004abc:	611a      	str	r2, [r3, #16]
      break;
 8004abe:	e02b      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f04f 0208 	mov.w	r2, #8
 8004ac6:	605a      	str	r2, [r3, #4]
      break;
 8004ac8:	e026      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f04f 0210 	mov.w	r2, #16
 8004ad0:	605a      	str	r2, [r3, #4]
      break;
 8004ad2:	e021      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f04f 0204 	mov.w	r2, #4
 8004ada:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 8004adc:	e01c      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f04f 0204 	mov.w	r2, #4
 8004ae4:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8004ae6:	e017      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f04f 0204 	mov.w	r2, #4
 8004aee:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8004af0:	e012      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f04f 0204 	mov.w	r2, #4
 8004b00:	605a      	str	r2, [r3, #4]
      break;
 8004b02:	e009      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f04f 0204 	mov.w	r2, #4
 8004b12:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8004b14:	e000      	b.n	8004b18 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 8004b16:	bf00      	nop
   }
}
 8004b18:	f107 070c 	add.w	r7, r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bc80      	pop	{r7}
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop

08004b24 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8004b3e:	f04f 0301 	mov.w	r3, #1
 8004b42:	73fb      	strb	r3, [r7, #15]
 8004b44:	e002      	b.n	8004b4c <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f107 0714 	add.w	r7, r7, #20
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bc80      	pop	{r7}
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop

08004b5c <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8004b60:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b68:	f04f 0201 	mov.w	r2, #1
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bc80      	pop	{r7}
 8004b72:	4770      	bx	lr

08004b74 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8004b7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8004b88:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004b8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004b90:	681b      	ldr	r3, [r3, #0]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	f107 070c 	add.w	r7, r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bc80      	pop	{r7}
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop

08004ba0 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8004baa:	f04f 0300 	mov.w	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e00e      	b.n	8004bd6 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8004bb8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004bbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	188a      	adds	r2, r1, r2
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	f103 0301 	add.w	r3, r3, #1
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d3ec      	bcc.n	8004bb8 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8004bde:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004be2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004be6:	681b      	ldr	r3, [r3, #0]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	f107 0714 	add.w	r7, r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr

08004bf4 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8004bf8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004bfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c00:	681b      	ldr	r3, [r3, #0]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop

08004c0c <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8004c16:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004c1a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c1e:	79fa      	ldrb	r2, [r7, #7]
 8004c20:	711a      	strb	r2, [r3, #4]
}
 8004c22:	f107 070c 	add.w	r7, r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8004c30:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8004c34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004c38:	791b      	ldrb	r3, [r3, #4]
 8004c3a:	b2db      	uxtb	r3, r3
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8004c48:	f04f 0010 	mov.w	r0, #16
 8004c4c:	f04f 0101 	mov.w	r1, #1
 8004c50:	f007 f89e 	bl	800bd90 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8004c54:	f04f 0010 	mov.w	r0, #16
 8004c58:	f04f 0100 	mov.w	r1, #0
 8004c5c:	f007 f898 	bl	800bd90 <RCC_AHB2PeriphResetCmd>
}
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8004c82:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004c94:	6811      	ldr	r1, [r2, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	8852      	ldrh	r2, [r2, #2]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004cae:	6812      	ldr	r2, [r2, #0]
 8004cb0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004cb4:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004cc6:	6811      	ldr	r1, [r2, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	8892      	ldrh	r2, [r2, #4]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	885b      	ldrh	r3, [r3, #2]
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d00b      	beq.n	8004cf0 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8004cdc:	2b28      	cmp	r3, #40	; 0x28
 8004cde:	d007      	beq.n	8004cf0 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d003      	beq.n	8004cf0 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8004cec:	2b38      	cmp	r3, #56	; 0x38
 8004cee:	d118      	bne.n	8004d22 <CRYP_Init+0xbe>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004d00:	6812      	ldr	r2, [r2, #0]
 8004d02:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004d06:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004d18:	6811      	ldr	r1, [r2, #0]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	88d2      	ldrh	r2, [r2, #6]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004d32:	6812      	ldr	r2, [r2, #0]
 8004d34:	f022 0204 	bic.w	r2, r2, #4
 8004d38:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8004d3a:	f04f 0300 	mov.w	r3, #0
 8004d3e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004d42:	f04f 0200 	mov.w	r2, #0
 8004d46:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004d4a:	6811      	ldr	r1, [r2, #0]
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	8812      	ldrh	r2, [r2, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	f107 070c 	add.w	r7, r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop

08004d60 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f04f 0200 	mov.w	r2, #0
 8004d6e:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f04f 0200 	mov.w	r2, #0
 8004d76:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f04f 0200 	mov.w	r2, #0
 8004d86:	80da      	strh	r2, [r3, #6]
}
 8004d88:	f107 070c 	add.w	r7, r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bc80      	pop	{r7}
 8004d90:	4770      	bx	lr
 8004d92:	bf00      	nop

08004d94 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6812      	ldr	r2, [r2, #0]
 8004da8:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6852      	ldr	r2, [r2, #4]
 8004db6:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	6892      	ldr	r2, [r2, #8]
 8004dc4:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	68d2      	ldr	r2, [r2, #12]
 8004dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6912      	ldr	r2, [r2, #16]
 8004de0:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	6952      	ldr	r2, [r2, #20]
 8004dee:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6992      	ldr	r2, [r2, #24]
 8004dfc:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8004dfe:	f04f 0300 	mov.w	r3, #0
 8004e02:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	69d2      	ldr	r2, [r2, #28]
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e0c:	f107 070c 	add.w	r7, r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f04f 0200 	mov.w	r2, #0
 8004e36:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f04f 0200 	mov.w	r2, #0
 8004e3e:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f04f 0200 	mov.w	r2, #0
 8004e4e:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	61da      	str	r2, [r3, #28]
}
 8004e60:	f107 070c 	add.w	r7, r7, #12
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop

08004e6c <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8004e82:	f04f 0300 	mov.w	r3, #0
 8004e86:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6852      	ldr	r2, [r2, #4]
 8004e8e:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6892      	ldr	r2, [r2, #8]
 8004e9c:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8004e9e:	f04f 0300 	mov.w	r3, #0
 8004ea2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	68d2      	ldr	r2, [r2, #12]
 8004eaa:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004eac:	f107 070c 	add.w	r7, r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop

08004eb8 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	f04f 0200 	mov.w	r2, #0
 8004ede:	60da      	str	r2, [r3, #12]
}
 8004ee0:	f107 070c 	add.w	r7, r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bc80      	pop	{r7}
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop

08004eec <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004f00:	6812      	ldr	r2, [r2, #0]
 8004f02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f06:	601a      	str	r2, [r3, #0]
}
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop

08004f10 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	4603      	mov	r3, r0
 8004f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e00b      	b.n	8004f52 <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004f4a:	6812      	ldr	r2, [r2, #0]
 8004f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f50:	601a      	str	r2, [r3, #0]
  }
}
 8004f52:	f107 070c 	add.w	r7, r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr

08004f5c <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8004f64:	f04f 0300 	mov.w	r3, #0
 8004f68:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	609a      	str	r2, [r3, #8]
}
 8004f70:	f107 070c 	add.w	r7, r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop

08004f7c <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004f88:	68db      	ldr	r3, [r3, #12]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop

08004f94 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8004f9e:	f04f 0300 	mov.w	r3, #0
 8004fa2:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8004fb0:	f04f 0300 	mov.w	r3, #0
 8004fb4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8004fc0:	6912      	ldr	r2, [r2, #16]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0308 	and.w	r3, r3, #8
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8004fda:	f04f 0311 	mov.w	r3, #17
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e002      	b.n	8004fe8 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8004fe2:	f04f 0315 	mov.w	r3, #21
 8004fe6:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
    timeout++;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	f103 0301 	add.w	r3, r3, #1
 8004ffe:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005006:	429a      	cmp	r2, r3
 8005008:	d002      	beq.n	8005010 <CRYP_SaveContext+0x7c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d1eb      	bne.n	8004fe8 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8005010:	f04f 0300 	mov.w	r3, #0
 8005014:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005018:	685a      	ldr	r2, [r3, #4]
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4013      	ands	r3, r2
 800501e:	2b01      	cmp	r3, #1
 8005020:	d003      	beq.n	800502a <CRYP_SaveContext+0x96>
  {
    status = ERROR;
 8005022:	f04f 0300 	mov.w	r3, #0
 8005026:	74fb      	strb	r3, [r7, #19]
 8005028:	e05f      	b.n	80050ea <CRYP_SaveContext+0x156>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 800502a:	f04f 0300 	mov.w	r3, #0
 800502e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800503a:	6912      	ldr	r2, [r2, #16]
 800503c:	f022 0202 	bic.w	r2, r2, #2
 8005040:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005058:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005082:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005090:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800509e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68da      	ldr	r2, [r3, #12]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	691a      	ldr	r2, [r3, #16]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695a      	ldr	r2, [r3, #20]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	699a      	ldr	r2, [r3, #24]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	69da      	ldr	r2, [r3, #28]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 80050e4:	f04f 0301 	mov.w	r3, #1
 80050e8:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	f107 071c 	add.w	r7, r7, #28
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr

080050f8 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	6812      	ldr	r2, [r2, #0]
 800510c:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6952      	ldr	r2, [r2, #20]
 800511a:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6992      	ldr	r2, [r2, #24]
 8005128:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	69d2      	ldr	r2, [r2, #28]
 8005136:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	6a12      	ldr	r2, [r2, #32]
 8005144:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005152:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005160:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8005162:	f04f 0300 	mov.w	r3, #0
 8005166:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800516e:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800517c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 800517e:	f04f 0300 	mov.w	r3, #0
 8005182:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	6852      	ldr	r2, [r2, #4]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	6892      	ldr	r2, [r2, #8]
 8005198:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	68d2      	ldr	r2, [r2, #12]
 80051a6:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 80051a8:	f04f 0300 	mov.w	r3, #0
 80051ac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6912      	ldr	r2, [r2, #16]
 80051b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80051b6:	f04f 0300 	mov.w	r3, #0
 80051ba:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051cc:	601a      	str	r2, [r3, #0]
}
 80051ce:	f107 070c 	add.w	r7, r7, #12
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4602      	mov	r2, r0
 80051e0:	460b      	mov	r3, r1
 80051e2:	71fa      	strb	r2, [r7, #7]
 80051e4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80051e6:	79bb      	ldrb	r3, [r7, #6]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <CRYP_DMACmd+0x2e>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80051ec:	f04f 0300 	mov.w	r3, #0
 80051f0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80051fc:	6911      	ldr	r1, [r2, #16]
 80051fe:	79fa      	ldrb	r2, [r7, #7]
 8005200:	430a      	orrs	r2, r1
 8005202:	611a      	str	r2, [r3, #16]
 8005204:	e00e      	b.n	8005224 <CRYP_DMACmd+0x4c>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005216:	6911      	ldr	r1, [r2, #16]
 8005218:	79fa      	ldrb	r2, [r7, #7]
 800521a:	ea6f 0202 	mvn.w	r2, r2
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	400a      	ands	r2, r1
 8005222:	611a      	str	r2, [r3, #16]
  }
}
 8005224:	f107 070c 	add.w	r7, r7, #12
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop

08005230 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	71fa      	strb	r2, [r7, #7]
 800523c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800523e:	79bb      	ldrb	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00c      	beq.n	800525e <CRYP_ITConfig+0x2e>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005254:	6951      	ldr	r1, [r2, #20]
 8005256:	79fa      	ldrb	r2, [r7, #7]
 8005258:	430a      	orrs	r2, r1
 800525a:	615a      	str	r2, [r3, #20]
 800525c:	e00e      	b.n	800527c <CRYP_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800526e:	6951      	ldr	r1, [r2, #20]
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	ea6f 0202 	mvn.w	r2, r2
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	400a      	ands	r2, r1
 800527a:	615a      	str	r2, [r3, #20]
  }
}
 800527c:	f107 070c 	add.w	r7, r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	bc80      	pop	{r7}
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop

08005288 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	4603      	mov	r3, r0
 8005290:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80052a0:	69da      	ldr	r2, [r3, #28]
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	4013      	ands	r3, r2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d003      	beq.n	80052b2 <CRYP_GetITStatus+0x2a>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80052aa:	f04f 0301 	mov.w	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	e002      	b.n	80052b8 <CRYP_GetITStatus+0x30>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 80052b2:	f04f 0300 	mov.w	r3, #0
 80052b6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	f107 0714 	add.w	r7, r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bc80      	pop	{r7}
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop

080052c8 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	4603      	mov	r3, r0
 80052d0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80052de:	79fb      	ldrb	r3, [r7, #7]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d006      	beq.n	80052f6 <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	e005      	b.n	8005302 <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 8005302:	79fa      	ldrb	r2, [r7, #7]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 800530c:	f04f 0301 	mov.w	r3, #1
 8005310:	73fb      	strb	r3, [r7, #15]
 8005312:	e002      	b.n	800531a <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 800531a:	7bfb      	ldrb	r3, [r7, #15]
}
 800531c:	4618      	mov	r0, r3
 800531e:	f107 0714 	add.w	r7, r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b0bb      	sub	sp, #236	; 0xec
 800532c:	af00      	add	r7, sp, #0
 800532e:	60b9      	str	r1, [r7, #8]
 8005330:	607b      	str	r3, [r7, #4]
 8005332:	4603      	mov	r3, r0
 8005334:	73fb      	strb	r3, [r7, #15]
 8005336:	4613      	mov	r3, r2
 8005338:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8005340:	f04f 0300 	mov.w	r3, #0
 8005344:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ErrorStatus status = SUCCESS;
 8005348:	f04f 0301 	mov.w	r3, #1
 800534c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint32_t keyaddr    = (uint32_t)Key;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t inputaddr  = (uint32_t)Input;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t outputaddr = (uint32_t)Output;
 800535c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005360:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t i = 0;
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800536c:	f107 0318 	add.w	r3, r7, #24
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fd51 	bl	8004e18 <CRYP_KeyStructInit>

  switch(Keysize)
 8005376:	89bb      	ldrh	r3, [r7, #12]
 8005378:	2bc0      	cmp	r3, #192	; 0xc0
 800537a:	d050      	beq.n	800541e <CRYP_AES_ECB+0xf6>
 800537c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005380:	f000 80bd 	beq.w	80054fe <CRYP_AES_ECB+0x1d6>
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	f040 8130 	bne.w	80055ea <CRYP_AES_ECB+0x2c2>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005390:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800539e:	ba1c      	rev	r4, r3
 80053a0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  return(result);
 80053a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80053a8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80053aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ae:	f103 0304 	add.w	r3, r3, #4
 80053b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80053b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80053c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053c4:	ba1c      	rev	r4, r3
 80053c6:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
  return(result);
 80053ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80053d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053d4:	f103 0304 	add.w	r3, r3, #4
 80053d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80053dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80053ea:	ba1c      	rev	r4, r3
 80053ec:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
  return(result);
 80053f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80053f4:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80053f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80053fa:	f103 0304 	add.w	r3, r3, #4
 80053fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005402:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800540c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005410:	ba1c      	rev	r4, r3
 8005412:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
  return(result);
 8005416:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800541c:	e0e6      	b.n	80055ec <CRYP_AES_ECB+0x2c4>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800541e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005422:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005424:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800542e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005432:	ba1c      	rev	r4, r3
 8005434:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  return(result);
 8005438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800543c:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 800543e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005442:	f103 0304 	add.w	r3, r3, #4
 8005446:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800544a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005454:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005458:	ba1c      	rev	r4, r3
 800545a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  return(result);
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005462:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8005464:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005468:	f103 0304 	add.w	r3, r3, #4
 800546c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005470:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800547a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800547e:	ba1c      	rev	r4, r3
 8005480:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  return(result);
 8005484:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800548a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800548e:	f103 0304 	add.w	r3, r3, #4
 8005492:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005496:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80054a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80054a4:	ba1c      	rev	r4, r3
 80054a6:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
  return(result);
 80054aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80054ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80054b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054b4:	f103 0304 	add.w	r3, r3, #4
 80054b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80054bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80054c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054ca:	ba1c      	rev	r4, r3
 80054cc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
  return(result);
 80054d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80054d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054da:	f103 0304 	add.w	r3, r3, #4
 80054de:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80054e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80054ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054f0:	ba1c      	rev	r4, r3
 80054f2:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
  return(result);
 80054f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80054fc:	e076      	b.n	80055ec <CRYP_AES_ECB+0x2c4>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80054fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005502:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8005504:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800550c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800550e:	ba1c      	rev	r4, r3
 8005510:	67bc      	str	r4, [r7, #120]	; 0x78
  return(result);
 8005512:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005514:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8005516:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800551a:	f103 0304 	add.w	r3, r3, #4
 800551e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8005522:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800552a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800552c:	ba1c      	rev	r4, r3
 800552e:	673c      	str	r4, [r7, #112]	; 0x70
  return(result);
 8005530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005532:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8005534:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005538:	f103 0304 	add.w	r3, r3, #4
 800553c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005540:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800554a:	ba1c      	rev	r4, r3
 800554c:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 800554e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005550:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8005552:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005556:	f103 0304 	add.w	r3, r3, #4
 800555a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800555e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005568:	ba1c      	rev	r4, r3
 800556a:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800556c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8005570:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005574:	f103 0304 	add.w	r3, r3, #4
 8005578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800557c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005584:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005586:	ba1c      	rev	r4, r3
 8005588:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800558a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800558e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005592:	f103 0304 	add.w	r3, r3, #4
 8005596:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800559a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80055a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055a4:	ba1c      	rev	r4, r3
 80055a6:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80055a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80055ac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055b0:	f103 0304 	add.w	r3, r3, #4
 80055b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80055b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80055c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055c2:	ba1c      	rev	r4, r3
 80055c4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80055c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c8:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80055ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055ce:	f103 0304 	add.w	r3, r3, #4
 80055d2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80055d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80055de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e0:	ba1c      	rev	r4, r3
 80055e2:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80055e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e6:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80055e8:	e000      	b.n	80055ec <CRYP_AES_ECB+0x2c4>
    default:
    break;
 80055ea:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d138      	bne.n	8005664 <CRYP_AES_ECB+0x33c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80055f2:	f7ff fc7b 	bl	8004eec <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80055f6:	f04f 0304 	mov.w	r3, #4
 80055fa:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80055fc:	f04f 0338 	mov.w	r3, #56	; 0x38
 8005600:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8005608:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800560c:	4618      	mov	r0, r3
 800560e:	f7ff fb29 	bl	8004c64 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8005612:	f107 0318 	add.w	r3, r7, #24
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fbbc 	bl	8004d94 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800561c:	f04f 0001 	mov.w	r0, #1
 8005620:	f7ff fc76 	bl	8004f10 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005624:	f04f 0010 	mov.w	r0, #16
 8005628:	f7ff fe4e 	bl	80052c8 <CRYP_GetFlagStatus>
 800562c:	4603      	mov	r3, r0
 800562e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f103 0301 	add.w	r3, r3, #1
 8005638:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005640:	d003      	beq.n	800564a <CRYP_AES_ECB+0x322>
 8005642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d1ec      	bne.n	8005624 <CRYP_AES_ECB+0x2fc>

    if (busystatus != RESET)
 800564a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d004      	beq.n	800565c <CRYP_AES_ECB+0x334>
   {
       status = ERROR;
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800565a:	e00b      	b.n	8005674 <CRYP_AES_ECB+0x34c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800565c:	f04f 0304 	mov.w	r3, #4
 8005660:	873b      	strh	r3, [r7, #56]	; 0x38
 8005662:	e007      	b.n	8005674 <CRYP_AES_ECB+0x34c>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8005664:	f107 0318 	add.w	r3, r7, #24
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fb93 	bl	8004d94 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800566e:	f04f 0300 	mov.w	r3, #0
 8005672:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8005674:	f04f 0320 	mov.w	r3, #32
 8005678:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800567a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800567e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8005680:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005684:	4618      	mov	r0, r3
 8005686:	f7ff faed 	bl	8004c64 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800568a:	f7ff fc2f 	bl	8004eec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800568e:	f04f 0001 	mov.w	r0, #1
 8005692:	f7ff fc3d 	bl	8004f10 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8005696:	f04f 0300 	mov.w	r3, #0
 800569a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800569e:	e084      	b.n	80057aa <CRYP_AES_ECB+0x482>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80056a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f7ff fc58 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80056ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056b0:	f103 0304 	add.w	r3, r3, #4
 80056b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80056b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff fc4c 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80056c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056c8:	f103 0304 	add.w	r3, r3, #4
 80056cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80056d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff fc40 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80056dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e0:	f103 0304 	add.w	r3, r3, #4
 80056e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80056e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7ff fc34 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f8:	f103 0304 	add.w	r3, r3, #4
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Wait until the complete message has been processed */
    counter = 0;
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005706:	f04f 0010 	mov.w	r0, #16
 800570a:	f7ff fddd 	bl	80052c8 <CRYP_GetFlagStatus>
 800570e:	4603      	mov	r3, r0
 8005710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f103 0301 	add.w	r3, r3, #1
 800571a:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005722:	d003      	beq.n	800572c <CRYP_AES_ECB+0x404>
 8005724:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1ec      	bne.n	8005706 <CRYP_AES_ECB+0x3de>

    if (busystatus != RESET)
 800572c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <CRYP_AES_ECB+0x416>
   {
       status = ERROR;
 8005734:	f04f 0300 	mov.w	r3, #0
 8005738:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800573c:	e02f      	b.n	800579e <CRYP_AES_ECB+0x476>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800573e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005742:	f7ff fc1b 	bl	8004f7c <CRYP_DataOut>
 8005746:	4603      	mov	r3, r0
 8005748:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800574a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800574e:	f103 0304 	add.w	r3, r3, #4
 8005752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005756:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800575a:	f7ff fc0f 	bl	8004f7c <CRYP_DataOut>
 800575e:	4603      	mov	r3, r0
 8005760:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005766:	f103 0304 	add.w	r3, r3, #4
 800576a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800576e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005772:	f7ff fc03 	bl	8004f7c <CRYP_DataOut>
 8005776:	4603      	mov	r3, r0
 8005778:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800577a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800577e:	f103 0304 	add.w	r3, r3, #4
 8005782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8005786:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800578a:	f7ff fbf7 	bl	8004f7c <CRYP_DataOut>
 800578e:	4603      	mov	r3, r0
 8005790:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005796:	f103 0304 	add.w	r3, r3, #4
 800579a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800579e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80057a2:	f103 0310 	add.w	r3, r3, #16
 80057a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057aa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80057ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d204      	bcs.n	80057c0 <CRYP_AES_ECB+0x498>
 80057b6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f47f af70 	bne.w	80056a0 <CRYP_AES_ECB+0x378>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80057c0:	f04f 0000 	mov.w	r0, #0
 80057c4:	f7ff fba4 	bl	8004f10 <CRYP_Cmd>

  return status; 
 80057c8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	f107 07ec 	add.w	r7, r7, #236	; 0xec
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop

080057d8 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b0c7      	sub	sp, #284	; 0x11c
 80057dc:	af00      	add	r7, sp, #0
 80057de:	f107 0408 	add.w	r4, r7, #8
 80057e2:	6021      	str	r1, [r4, #0]
 80057e4:	f107 0104 	add.w	r1, r7, #4
 80057e8:	600a      	str	r2, [r1, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f107 0310 	add.w	r3, r7, #16
 80057f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80057f4:	4601      	mov	r1, r0
 80057f6:	7019      	strb	r1, [r3, #0]
 80057f8:	f107 030c 	add.w	r3, r7, #12
 80057fc:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80057fe:	f04f 0200 	mov.w	r2, #0
 8005802:	f107 0310 	add.w	r3, r7, #16
 8005806:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8005810:	f04f 0301 	mov.w	r3, #1
 8005814:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8005818:	f107 0304 	add.w	r3, r7, #4
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8005822:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005826:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 800582a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800582e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8005832:	f107 0308 	add.w	r3, r7, #8
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8005844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005848:	4618      	mov	r0, r3
 800584a:	f7ff fae5 	bl	8004e18 <CRYP_KeyStructInit>

  switch(Keysize)
 800584e:	f107 030c 	add.w	r3, r7, #12
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	2bc0      	cmp	r3, #192	; 0xc0
 8005856:	d051      	beq.n	80058fc <CRYP_AES_CBC+0x124>
 8005858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800585c:	f000 80bf 	beq.w	80059de <CRYP_AES_CBC+0x206>
 8005860:	2b80      	cmp	r3, #128	; 0x80
 8005862:	f040 8149 	bne.w	8005af8 <CRYP_AES_CBC+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800586e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005878:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800587c:	ba1c      	rev	r4, r3
 800587e:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8005888:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800588c:	f103 0304 	add.w	r3, r3, #4
 8005890:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005894:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800589e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80058a2:	ba1c      	rev	r4, r3
 80058a4:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 80058a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058ac:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80058ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058b2:	f103 0304 	add.w	r3, r3, #4
 80058b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80058ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80058c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058c8:	ba1c      	rev	r4, r3
 80058ca:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80058d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058d8:	f103 0304 	add.w	r3, r3, #4
 80058dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80058e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80058ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058ee:	ba1c      	rev	r4, r3
 80058f0:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 80058f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f8:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80058fa:	e0fe      	b.n	8005afa <CRYP_AES_CBC+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80058fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005900:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005904:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800590e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005912:	ba1c      	rev	r4, r3
 8005914:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8005918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800591c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800591e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005922:	f103 0304 	add.w	r3, r3, #4
 8005926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800592a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005934:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005938:	ba1c      	rev	r4, r3
 800593a:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 800593e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005942:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8005944:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005948:	f103 0304 	add.w	r3, r3, #4
 800594c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005950:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800595a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800595e:	ba1c      	rev	r4, r3
 8005960:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8005964:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005968:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800596a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800596e:	f103 0304 	add.w	r3, r3, #4
 8005972:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005976:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005984:	ba1c      	rev	r4, r3
 8005986:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 800598a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800598e:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8005990:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005994:	f103 0304 	add.w	r3, r3, #4
 8005998:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800599c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80059a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059aa:	ba1c      	rev	r4, r3
 80059ac:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 80059b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80059b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80059b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059ba:	f103 0304 	add.w	r3, r3, #4
 80059be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80059c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80059cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80059d0:	ba1c      	rev	r4, r3
 80059d2:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 80059d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059da:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80059dc:	e08d      	b.n	8005afa <CRYP_AES_CBC+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80059de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80059e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80059f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80059f4:	ba1c      	rev	r4, r3
 80059f6:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 80059fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8005a00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a04:	f103 0304 	add.w	r3, r3, #4
 8005a08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8005a0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a1a:	ba1c      	rev	r4, r3
 8005a1c:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8005a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8005a26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a2a:	f103 0304 	add.w	r3, r3, #4
 8005a2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005a32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005a3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a40:	ba1c      	rev	r4, r3
 8005a42:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8005a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8005a4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a50:	f103 0304 	add.w	r3, r3, #4
 8005a54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8005a58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a66:	ba1c      	rev	r4, r3
 8005a68:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8005a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8005a72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a76:	f103 0304 	add.w	r3, r3, #4
 8005a7a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005a7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005a88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a8c:	ba1c      	rev	r4, r3
 8005a8e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8005a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a96:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8005a98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a9c:	f103 0304 	add.w	r3, r3, #4
 8005aa0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005aa4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ab2:	ba1c      	rev	r4, r3
 8005ab4:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8005ab6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ab8:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8005aba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005abe:	f103 0304 	add.w	r3, r3, #4
 8005ac2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005ac6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005ace:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad0:	ba1c      	rev	r4, r3
 8005ad2:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8005ad4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8005ad8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005adc:	f103 0304 	add.w	r3, r3, #4
 8005ae0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005ae4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005aee:	ba1c      	rev	r4, r3
 8005af0:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8005af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005af4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8005af6:	e000      	b.n	8005afa <CRYP_AES_CBC+0x322>
    default:
    break;
 8005af8:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b04:	ba1c      	rev	r4, r3
 8005b06:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8005b08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	f107 0314 	add.w	r3, r7, #20
 8005b10:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8005b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b16:	f103 0304 	add.w	r3, r3, #4
 8005b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8005b1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b28:	ba1c      	rev	r4, r3
 8005b2a:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8005b2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f107 0314 	add.w	r3, r7, #20
 8005b34:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8005b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b3a:	f103 0304 	add.w	r3, r3, #4
 8005b3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8005b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b4c:	ba1c      	rev	r4, r3
 8005b4e:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8005b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b52:	461a      	mov	r2, r3
 8005b54:	f107 0314 	add.w	r3, r7, #20
 8005b58:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8005b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b5e:	f103 0304 	add.w	r3, r3, #4
 8005b62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8005b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	ba1c      	rev	r4, r3
 8005b72:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8005b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b76:	461a      	mov	r2, r3
 8005b78:	f107 0314 	add.w	r3, r7, #20
 8005b7c:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8005b7e:	f107 0310 	add.w	r3, r7, #16
 8005b82:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d142      	bne.n	8005c12 <CRYP_AES_CBC+0x43a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8005b8c:	f7ff f9ae 	bl	8004eec <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8005b90:	f04f 0304 	mov.w	r3, #4
 8005b94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8005b98:	f04f 0338 	mov.w	r3, #56	; 0x38
 8005b9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 8005ba8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bac:	4618      	mov	r0, r3
 8005bae:	f7ff f859 	bl	8004c64 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8005bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f8ec 	bl	8004d94 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8005bbc:	f04f 0001 	mov.w	r0, #1
 8005bc0:	f7ff f9a6 	bl	8004f10 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005bc4:	f04f 0010 	mov.w	r0, #16
 8005bc8:	f7ff fb7e 	bl	80052c8 <CRYP_GetFlagStatus>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8005bd2:	f107 0310 	add.w	r3, r7, #16
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f103 0201 	add.w	r2, r3, #1
 8005bdc:	f107 0310 	add.w	r3, r7, #16
 8005be0:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d003      	beq.n	8005bf6 <CRYP_AES_CBC+0x41e>
 8005bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <CRYP_AES_CBC+0x3ec>

    if (busystatus != RESET)
 8005bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d004      	beq.n	8005c08 <CRYP_AES_CBC+0x430>
   {
       status = ERROR;
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005c06:	e00d      	b.n	8005c24 <CRYP_AES_CBC+0x44c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8005c08:	f04f 0304 	mov.w	r3, #4
 8005c0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005c10:	e008      	b.n	8005c24 <CRYP_AES_CBC+0x44c>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8005c12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff f8bc 	bl	8004d94 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8005c24:	f04f 0328 	mov.w	r3, #40	; 0x28
 8005c28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8005c2c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005c30:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8005c34:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f7ff f813 	bl	8004c64 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8005c3e:	f107 0314 	add.w	r3, r7, #20
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff f912 	bl	8004e6c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8005c48:	f7ff f950 	bl	8004eec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8005c4c:	f04f 0001 	mov.w	r0, #1
 8005c50:	f7ff f95e 	bl	8004f10 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c5c:	e08c      	b.n	8005d78 <CRYP_AES_CBC+0x5a0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005c5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f7ff f979 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8005c6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c6e:	f103 0304 	add.w	r3, r3, #4
 8005c72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005c76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff f96d 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8005c82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c86:	f103 0304 	add.w	r3, r3, #4
 8005c8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005c8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff f961 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8005c9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c9e:	f103 0304 	add.w	r3, r3, #4
 8005ca2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005ca6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f955 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8005cb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cb6:	f103 0304 	add.w	r3, r3, #4
 8005cba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 8005cbe:	f04f 0200 	mov.w	r2, #0
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005cc8:	f04f 0010 	mov.w	r0, #16
 8005ccc:	f7ff fafc 	bl	80052c8 <CRYP_GetFlagStatus>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8005cd6:	f107 0310 	add.w	r3, r7, #16
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f103 0201 	add.w	r2, r3, #1
 8005ce0:	f107 0310 	add.w	r3, r7, #16
 8005ce4:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8005ce6:	f107 0310 	add.w	r3, r7, #16
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf0:	d003      	beq.n	8005cfa <CRYP_AES_CBC+0x522>
 8005cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e6      	bne.n	8005cc8 <CRYP_AES_CBC+0x4f0>

    if (busystatus != RESET)
 8005cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d004      	beq.n	8005d0c <CRYP_AES_CBC+0x534>
   {
       status = ERROR;
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8005d0a:	e02f      	b.n	8005d6c <CRYP_AES_CBC+0x594>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005d0c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8005d10:	f7ff f934 	bl	8004f7c <CRYP_DataOut>
 8005d14:	4603      	mov	r3, r0
 8005d16:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d1c:	f103 0304 	add.w	r3, r3, #4
 8005d20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005d24:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8005d28:	f7ff f928 	bl	8004f7c <CRYP_DataOut>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005d30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d34:	f103 0304 	add.w	r3, r3, #4
 8005d38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005d3c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8005d40:	f7ff f91c 	bl	8004f7c <CRYP_DataOut>
 8005d44:	4603      	mov	r3, r0
 8005d46:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005d48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d4c:	f103 0304 	add.w	r3, r3, #4
 8005d50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005d54:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8005d58:	f7ff f910 	bl	8004f7c <CRYP_DataOut>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005d60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d64:	f103 0304 	add.w	r3, r3, #4
 8005d68:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8005d6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d70:	f103 0310 	add.w	r3, r3, #16
 8005d74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d78:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8005d7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d204      	bcs.n	8005d8e <CRYP_AES_CBC+0x5b6>
 8005d84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f47f af68 	bne.w	8005c5e <CRYP_AES_CBC+0x486>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8005d8e:	f04f 0000 	mov.w	r0, #0
 8005d92:	f7ff f8bd 	bl	8004f10 <CRYP_Cmd>

  return status;
 8005d96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}

08005da4 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8005da4:	b590      	push	{r4, r7, lr}
 8005da6:	b0c7      	sub	sp, #284	; 0x11c
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	f107 0408 	add.w	r4, r7, #8
 8005dae:	6021      	str	r1, [r4, #0]
 8005db0:	f107 0104 	add.w	r1, r7, #4
 8005db4:	600a      	str	r2, [r1, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f107 0310 	add.w	r3, r7, #16
 8005dbc:	f103 33ff 	add.w	r3, r3, #4294967295
 8005dc0:	4601      	mov	r1, r0
 8005dc2:	7019      	strb	r1, [r3, #0]
 8005dc4:	f107 030c 	add.w	r3, r7, #12
 8005dc8:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8005ddc:	f04f 0301 	mov.w	r3, #1
 8005de0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8005de4:	f107 0304 	add.w	r3, r7, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8005dee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005df2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8005df6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005dfa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8005dfe:	f107 0308 	add.w	r3, r7, #8
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8005e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe ffff 	bl	8004e18 <CRYP_KeyStructInit>

  switch(Keysize)
 8005e1a:	f107 030c 	add.w	r3, r7, #12
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	2bc0      	cmp	r3, #192	; 0xc0
 8005e22:	d051      	beq.n	8005ec8 <CRYP_AES_CTR+0x124>
 8005e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e28:	f000 80bf 	beq.w	8005faa <CRYP_AES_CTR+0x206>
 8005e2c:	2b80      	cmp	r3, #128	; 0x80
 8005e2e:	f040 8149 	bne.w	80060c4 <CRYP_AES_CTR+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005e3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e48:	ba1c      	rev	r4, r3
 8005e4a:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8005e54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e58:	f103 0304 	add.w	r3, r3, #4
 8005e5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005e60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005e6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e6e:	ba1c      	rev	r4, r3
 8005e70:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8005e74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005e78:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8005e7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e7e:	f103 0304 	add.w	r3, r3, #4
 8005e82:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005e86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005e90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005e94:	ba1c      	rev	r4, r3
 8005e96:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8005ea0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ea4:	f103 0304 	add.w	r3, r3, #4
 8005ea8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005eac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eba:	ba1c      	rev	r4, r3
 8005ebc:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8005ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8005ec6:	e0fe      	b.n	80060c6 <CRYP_AES_CTR+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8005ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ecc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005ed0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005eda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ede:	ba1c      	rev	r4, r3
 8005ee0:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8005ee4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8005eea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005eee:	f103 0304 	add.w	r3, r3, #4
 8005ef2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8005ef6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005f00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f04:	ba1c      	rev	r4, r3
 8005f06:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8005f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005f0e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8005f10:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f14:	f103 0304 	add.w	r3, r3, #4
 8005f18:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005f1c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f2a:	ba1c      	rev	r4, r3
 8005f2c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8005f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f34:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8005f36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f3a:	f103 0304 	add.w	r3, r3, #4
 8005f3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005f42:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005f4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f50:	ba1c      	rev	r4, r3
 8005f52:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8005f56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f5a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8005f5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f60:	f103 0304 	add.w	r3, r3, #4
 8005f64:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005f68:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f76:	ba1c      	rev	r4, r3
 8005f78:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 8005f7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f80:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8005f82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f86:	f103 0304 	add.w	r3, r3, #4
 8005f8a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005f8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005f98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005f9c:	ba1c      	rev	r4, r3
 8005f9e:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 8005fa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fa6:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8005fa8:	e08d      	b.n	80060c6 <CRYP_AES_CTR+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8005faa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fae:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8005fb2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005fbc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fc0:	ba1c      	rev	r4, r3
 8005fc2:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 8005fc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8005fcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fd0:	f103 0304 	add.w	r3, r3, #4
 8005fd4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8005fd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005fe2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fe6:	ba1c      	rev	r4, r3
 8005fe8:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8005fec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ff0:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8005ff2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ff6:	f103 0304 	add.w	r3, r3, #4
 8005ffa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005ffe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800600c:	ba1c      	rev	r4, r3
 800600e:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8006012:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006016:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006018:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800601c:	f103 0304 	add.w	r3, r3, #4
 8006020:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006024:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800602e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006032:	ba1c      	rev	r4, r3
 8006034:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8006038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800603e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006042:	f103 0304 	add.w	r3, r3, #4
 8006046:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800604a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006054:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006058:	ba1c      	rev	r4, r3
 800605a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 800605e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006064:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006068:	f103 0304 	add.w	r3, r3, #4
 800606c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006070:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800607a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800607e:	ba1c      	rev	r4, r3
 8006080:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8006082:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8006086:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800608a:	f103 0304 	add.w	r3, r3, #4
 800608e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006092:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800609a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800609c:	ba1c      	rev	r4, r3
 800609e:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80060a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80060a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060a8:	f103 0304 	add.w	r3, r3, #4
 80060ac:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80060b0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80060b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ba:	ba1c      	rev	r4, r3
 80060bc:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80060c2:	e000      	b.n	80060c6 <CRYP_AES_CTR+0x322>
    default:
    break;
 80060c4:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80060ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060d0:	ba1c      	rev	r4, r3
 80060d2:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80060d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060d6:	461a      	mov	r2, r3
 80060d8:	f107 0314 	add.w	r3, r7, #20
 80060dc:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060e2:	f103 0304 	add.w	r3, r3, #4
 80060e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 80060ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80060f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80060f4:	ba1c      	rev	r4, r3
 80060f6:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 80060f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80060fa:	461a      	mov	r2, r3
 80060fc:	f107 0314 	add.w	r3, r7, #20
 8006100:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8006102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006106:	f103 0304 	add.w	r3, r3, #4
 800610a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800610e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006118:	ba1c      	rev	r4, r3
 800611a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800611c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800611e:	461a      	mov	r2, r3
 8006120:	f107 0314 	add.w	r3, r7, #20
 8006124:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8006126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800612a:	f103 0304 	add.w	r3, r3, #4
 800612e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8006132:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800613a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800613c:	ba1c      	rev	r4, r3
 800613e:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8006140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006142:	461a      	mov	r2, r3
 8006144:	f107 0314 	add.w	r3, r7, #20
 8006148:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800614a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fe20 	bl	8004d94 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8006154:	f107 0310 	add.w	r3, r7, #16
 8006158:	f103 33ff 	add.w	r3, r3, #4294967295
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d104      	bne.n	800616c <CRYP_AES_CTR+0x3c8>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006162:	f04f 0304 	mov.w	r3, #4
 8006166:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800616a:	e003      	b.n	8006174 <CRYP_AES_CTR+0x3d0>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8006174:	f04f 0330 	mov.w	r3, #48	; 0x30
 8006178:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800617c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006180:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8006184:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006188:	4618      	mov	r0, r3
 800618a:	f7fe fd6b 	bl	8004c64 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800618e:	f107 0314 	add.w	r3, r7, #20
 8006192:	4618      	mov	r0, r3
 8006194:	f7fe fe6a 	bl	8004e6c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8006198:	f7fe fea8 	bl	8004eec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800619c:	f04f 0001 	mov.w	r0, #1
 80061a0:	f7fe feb6 	bl	8004f10 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80061a4:	f04f 0300 	mov.w	r3, #0
 80061a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80061ac:	e08c      	b.n	80062c8 <CRYP_AES_CTR+0x524>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80061ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f7fe fed1 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80061ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061be:	f103 0304 	add.w	r3, r3, #4
 80061c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80061c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fe fec5 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80061d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061d6:	f103 0304 	add.w	r3, r3, #4
 80061da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80061de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fe feb9 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80061ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061ee:	f103 0304 	add.w	r3, r3, #4
 80061f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80061f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f7fe fead 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8006202:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006206:	f103 0304 	add.w	r3, r3, #4
 800620a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f107 0310 	add.w	r3, r7, #16
 8006216:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006218:	f04f 0010 	mov.w	r0, #16
 800621c:	f7ff f854 	bl	80052c8 <CRYP_GetFlagStatus>
 8006220:	4603      	mov	r3, r0
 8006222:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8006226:	f107 0310 	add.w	r3, r7, #16
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f103 0201 	add.w	r2, r3, #1
 8006230:	f107 0310 	add.w	r3, r7, #16
 8006234:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006236:	f107 0310 	add.w	r3, r7, #16
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006240:	d003      	beq.n	800624a <CRYP_AES_CTR+0x4a6>
 8006242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e6      	bne.n	8006218 <CRYP_AES_CTR+0x474>

    if (busystatus != RESET)
 800624a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <CRYP_AES_CTR+0x4b8>
   {
       status = ERROR;
 8006252:	f04f 0300 	mov.w	r3, #0
 8006256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800625a:	e02f      	b.n	80062bc <CRYP_AES_CTR+0x518>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800625c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006260:	f7fe fe8c 	bl	8004f7c <CRYP_DataOut>
 8006264:	4603      	mov	r3, r0
 8006266:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006268:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800626c:	f103 0304 	add.w	r3, r3, #4
 8006270:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006274:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006278:	f7fe fe80 	bl	8004f7c <CRYP_DataOut>
 800627c:	4603      	mov	r3, r0
 800627e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006280:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006284:	f103 0304 	add.w	r3, r3, #4
 8006288:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800628c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006290:	f7fe fe74 	bl	8004f7c <CRYP_DataOut>
 8006294:	4603      	mov	r3, r0
 8006296:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800629c:	f103 0304 	add.w	r3, r3, #4
 80062a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80062a4:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80062a8:	f7fe fe68 	bl	8004f7c <CRYP_DataOut>
 80062ac:	4603      	mov	r3, r0
 80062ae:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80062b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062b4:	f103 0304 	add.w	r3, r3, #4
 80062b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80062bc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062c0:	f103 0310 	add.w	r3, r3, #16
 80062c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062c8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80062cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d204      	bcs.n	80062de <CRYP_AES_CTR+0x53a>
 80062d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f47f af68 	bne.w	80061ae <CRYP_AES_CTR+0x40a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80062de:	f04f 0000 	mov.w	r0, #0
 80062e2:	f7fe fe15 	bl	8004f10 <CRYP_Cmd>

  return status;
 80062e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd90      	pop	{r4, r7, pc}

080062f4 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80062f4:	b590      	push	{r4, r7, lr}
 80062f6:	b09b      	sub	sp, #108	; 0x6c
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60b9      	str	r1, [r7, #8]
 80062fc:	607a      	str	r2, [r7, #4]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4603      	mov	r3, r0
 8006302:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8006310:	f04f 0301 	mov.w	r3, #1
 8006314:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8006320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006322:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 8006324:	f04f 0300 	mov.w	r3, #0
 8006328:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800632a:	f107 0318 	add.w	r3, r7, #24
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fd72 	bl	8004e18 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d103      	bne.n	8006342 <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006340:	e002      	b.n	8006348 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8006342:	f04f 0304 	mov.w	r3, #4
 8006346:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8006348:	f04f 0310 	mov.w	r3, #16
 800634c:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800634e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006352:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 8006354:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fc83 	bl	8004c64 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800635e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006366:	ba1c      	rev	r4, r3
 8006368:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800636a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800636c:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800636e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006370:	f103 0304 	add.w	r3, r3, #4
 8006374:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800637c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800637e:	ba1c      	rev	r4, r3
 8006380:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8006382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8006386:	f107 0318 	add.w	r3, r7, #24
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fd02 	bl	8004d94 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006390:	f7fe fdac 	bl	8004eec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006394:	f04f 0001 	mov.w	r0, #1
 8006398:	f7fe fdba 	bl	8004f10 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800639c:	f04f 0300 	mov.w	r3, #0
 80063a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80063a2:	e043      	b.n	800642c <CRYP_DES_ECB+0x138>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80063a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f7fe fdd7 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80063ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b0:	f103 0304 	add.w	r3, r3, #4
 80063b4:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80063b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe fdce 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 80063c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063c2:	f103 0304 	add.w	r3, r3, #4
 80063c6:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80063ce:	f04f 0010 	mov.w	r0, #16
 80063d2:	f7fe ff79 	bl	80052c8 <CRYP_GetFlagStatus>
 80063d6:	4603      	mov	r3, r0
 80063d8:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f103 0301 	add.w	r3, r3, #1
 80063e0:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063e8:	d002      	beq.n	80063f0 <CRYP_DES_ECB+0xfc>
 80063ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1ee      	bne.n	80063ce <CRYP_DES_ECB+0xda>

    if (busystatus != RESET)
 80063f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <CRYP_DES_ECB+0x10c>
   {
       status = ERROR;
 80063f6:	f04f 0300 	mov.w	r3, #0
 80063fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80063fe:	e011      	b.n	8006424 <CRYP_DES_ECB+0x130>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006400:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8006402:	f7fe fdbb 	bl	8004f7c <CRYP_DataOut>
 8006406:	4603      	mov	r3, r0
 8006408:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800640a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640c:	f103 0304 	add.w	r3, r3, #4
 8006410:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006412:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8006414:	f7fe fdb2 	bl	8004f7c <CRYP_DataOut>
 8006418:	4603      	mov	r3, r0
 800641a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800641c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800641e:	f103 0304 	add.w	r3, r3, #4
 8006422:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006426:	f103 0308 	add.w	r3, r3, #8
 800642a:	65bb      	str	r3, [r7, #88]	; 0x58
 800642c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d203      	bcs.n	800643c <CRYP_DES_ECB+0x148>
 8006434:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1b3      	bne.n	80063a4 <CRYP_DES_ECB+0xb0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800643c:	f04f 0000 	mov.w	r0, #0
 8006440:	f7fe fd66 	bl	8004f10 <CRYP_Cmd>

  return status; 
 8006444:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006448:	4618      	mov	r0, r3
 800644a:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 800644e:	46bd      	mov	sp, r7
 8006450:	bd90      	pop	{r4, r7, pc}
 8006452:	bf00      	nop

08006454 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8006454:	b590      	push	{r4, r7, lr}
 8006456:	b0a3      	sub	sp, #140	; 0x8c
 8006458:	af00      	add	r7, sp, #0
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8006470:	f04f 0301 	mov.w	r3, #1
 8006474:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8006482:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006486:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8006492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fcbe 	bl	8004e18 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d104      	bne.n	80064ac <CRYP_DES_CBC+0x58>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80064aa:	e003      	b.n	80064b4 <CRYP_DES_CBC+0x60>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80064ac:	f04f 0304 	mov.w	r3, #4
 80064b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80064b4:	f04f 0318 	mov.w	r3, #24
 80064b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80064bc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80064c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 80064c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe fbcb 	bl	8004c64 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80064ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d6:	ba1c      	rev	r4, r3
 80064d8:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80064da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80064de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e0:	f103 0304 	add.w	r3, r3, #4
 80064e4:	673b      	str	r3, [r7, #112]	; 0x70
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80064e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80064ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064ee:	ba1c      	rev	r4, r3
 80064f0:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 80064f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f4:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80064f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fe fc4a 	bl	8004d94 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8006500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006508:	ba1c      	rev	r4, r3
 800650a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800650c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800650e:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8006510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006512:	f103 0304 	add.w	r3, r3, #4
 8006516:	66fb      	str	r3, [r7, #108]	; 0x6c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8006518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800651e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006520:	ba1c      	rev	r4, r3
 8006522:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8006528:	f107 0314 	add.w	r3, r7, #20
 800652c:	4618      	mov	r0, r3
 800652e:	f7fe fc9d 	bl	8004e6c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006532:	f7fe fcdb 	bl	8004eec <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006536:	f04f 0001 	mov.w	r0, #1
 800653a:	f7fe fce9 	bl	8004f10 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800653e:	f04f 0300 	mov.w	r3, #0
 8006542:	67bb      	str	r3, [r7, #120]	; 0x78
 8006544:	e049      	b.n	80065da <CRYP_DES_CBC+0x186>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006546:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4618      	mov	r0, r3
 800654e:	f7fe fd05 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8006552:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006556:	f103 0304 	add.w	r3, r3, #4
 800655a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800655e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fe fcf9 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 800656a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800656e:	f103 0304 	add.w	r3, r3, #4
 8006572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8006576:	f04f 0300 	mov.w	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800657c:	f04f 0010 	mov.w	r0, #16
 8006580:	f7fe fea2 	bl	80052c8 <CRYP_GetFlagStatus>
 8006584:	4603      	mov	r3, r0
 8006586:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f103 0301 	add.w	r3, r3, #1
 800658e:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006596:	d002      	beq.n	800659e <CRYP_DES_CBC+0x14a>
 8006598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800659a:	2b00      	cmp	r3, #0
 800659c:	d1ee      	bne.n	800657c <CRYP_DES_CBC+0x128>

    if (busystatus != RESET)
 800659e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d004      	beq.n	80065ae <CRYP_DES_CBC+0x15a>
   {
       status = ERROR;
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80065ac:	e011      	b.n	80065d2 <CRYP_DES_CBC+0x17e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80065ae:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80065b0:	f7fe fce4 	bl	8004f7c <CRYP_DataOut>
 80065b4:	4603      	mov	r3, r0
 80065b6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80065b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065ba:	f103 0304 	add.w	r3, r3, #4
 80065be:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80065c0:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80065c2:	f7fe fcdb 	bl	8004f7c <CRYP_DataOut>
 80065c6:	4603      	mov	r3, r0
 80065c8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80065ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80065cc:	f103 0304 	add.w	r3, r3, #4
 80065d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80065d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80065d4:	f103 0308 	add.w	r3, r3, #8
 80065d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80065da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80065dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d203      	bcs.n	80065ec <CRYP_DES_CBC+0x198>
 80065e4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1ac      	bne.n	8006546 <CRYP_DES_CBC+0xf2>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80065ec:	f04f 0000 	mov.w	r0, #0
 80065f0:	f7fe fc8e 	bl	8004f10 <CRYP_Cmd>

  return status; 
 80065f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd90      	pop	{r4, r7, pc}
 8006602:	bf00      	nop

08006604 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b0a3      	sub	sp, #140	; 0x8c
 8006608:	af00      	add	r7, sp, #0
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	4603      	mov	r3, r0
 8006612:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006614:	f04f 0300 	mov.w	r3, #0
 8006618:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8006620:	f04f 0301 	mov.w	r3, #1
 8006624:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8006632:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006636:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t i = 0;
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800663e:	f107 0318 	add.w	r3, r7, #24
 8006642:	4618      	mov	r0, r3
 8006644:	f7fe fbe8 	bl	8004e18 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8006648:	7bfb      	ldrb	r3, [r7, #15]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d103      	bne.n	8006656 <CRYP_TDES_ECB+0x52>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	873b      	strh	r3, [r7, #56]	; 0x38
 8006654:	e002      	b.n	800665c <CRYP_TDES_ECB+0x58>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006656:	f04f 0304 	mov.w	r3, #4
 800665a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006662:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006666:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8006668:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800666c:	4618      	mov	r0, r3
 800666e:	f7fe faf9 	bl	8004c64 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006678:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667a:	ba1c      	rev	r4, r3
 800667c:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 800667e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006680:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8006682:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006684:	f103 0304 	add.w	r3, r3, #4
 8006688:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800668a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006690:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006692:	ba1c      	rev	r4, r3
 8006694:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8006696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 800669a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800669c:	f103 0304 	add.w	r3, r3, #4
 80066a0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80066a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066aa:	ba1c      	rev	r4, r3
 80066ac:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 80066ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80066b0:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 80066b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066b4:	f103 0304 	add.w	r3, r3, #4
 80066b8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80066ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	ba1c      	rev	r4, r3
 80066c4:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80066c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80066ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066cc:	f103 0304 	add.w	r3, r3, #4
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80066d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066da:	ba1c      	rev	r4, r3
 80066dc:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80066de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066e0:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 80066e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066e4:	f103 0304 	add.w	r3, r3, #4
 80066e8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80066ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f2:	ba1c      	rev	r4, r3
 80066f4:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80066f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066f8:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80066fa:	f107 0318 	add.w	r3, r7, #24
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fe fb48 	bl	8004d94 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006704:	f7fe fbf2 	bl	8004eec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006708:	f04f 0001 	mov.w	r0, #1
 800670c:	f7fe fc00 	bl	8004f10 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	67bb      	str	r3, [r7, #120]	; 0x78
 8006716:	e049      	b.n	80067ac <CRYP_TDES_ECB+0x1a8>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006718:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7fe fc1c 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8006724:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006728:	f103 0304 	add.w	r3, r3, #4
 800672c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006730:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4618      	mov	r0, r3
 8006738:	f7fe fc10 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 800673c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006740:	f103 0304 	add.w	r3, r3, #4
 8006744:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800674e:	f04f 0010 	mov.w	r0, #16
 8006752:	f7fe fdb9 	bl	80052c8 <CRYP_GetFlagStatus>
 8006756:	4603      	mov	r3, r0
 8006758:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f103 0301 	add.w	r3, r3, #1
 8006760:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006768:	d002      	beq.n	8006770 <CRYP_TDES_ECB+0x16c>
 800676a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1ee      	bne.n	800674e <CRYP_TDES_ECB+0x14a>

    if (busystatus != RESET)
 8006770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006772:	2b00      	cmp	r3, #0
 8006774:	d004      	beq.n	8006780 <CRYP_TDES_ECB+0x17c>
    {
       status = ERROR;
 8006776:	f04f 0300 	mov.w	r3, #0
 800677a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800677e:	e011      	b.n	80067a4 <CRYP_TDES_ECB+0x1a0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006780:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006782:	f7fe fbfb 	bl	8004f7c <CRYP_DataOut>
 8006786:	4603      	mov	r3, r0
 8006788:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800678a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800678c:	f103 0304 	add.w	r3, r3, #4
 8006790:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006792:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006794:	f7fe fbf2 	bl	8004f7c <CRYP_DataOut>
 8006798:	4603      	mov	r3, r0
 800679a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800679c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800679e:	f103 0304 	add.w	r3, r3, #4
 80067a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80067a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a6:	f103 0308 	add.w	r3, r3, #8
 80067aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80067ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d203      	bcs.n	80067bc <CRYP_TDES_ECB+0x1b8>
 80067b4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1ad      	bne.n	8006718 <CRYP_TDES_ECB+0x114>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80067bc:	f04f 0000 	mov.w	r0, #0
 80067c0:	f7fe fba6 	bl	8004f10 <CRYP_Cmd>

  return status; 
 80067c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd90      	pop	{r4, r7, pc}
 80067d2:	bf00      	nop

080067d4 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80067d4:	b590      	push	{r4, r7, lr}
 80067d6:	b0ab      	sub	sp, #172	; 0xac
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60b9      	str	r1, [r7, #8]
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	603b      	str	r3, [r7, #0]
 80067e0:	4603      	mov	r3, r0
 80067e2:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80067ea:	f04f 0300 	mov.w	r3, #0
 80067ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 80067f2:	f04f 0301 	mov.w	r3, #1
 80067f6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8006806:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800680a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t i = 0;
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800681c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006820:	4618      	mov	r0, r3
 8006822:	f7fe faf9 	bl	8004e18 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8006826:	7bfb      	ldrb	r3, [r7, #15]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d104      	bne.n	8006836 <CRYP_TDES_CBC+0x62>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006834:	e003      	b.n	800683e <CRYP_TDES_CBC+0x6a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006836:	f04f 0304 	mov.w	r3, #4
 800683a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 800683e:	f04f 0308 	mov.w	r3, #8
 8006842:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006846:	f04f 0380 	mov.w	r3, #128	; 0x80
 800684a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 800684e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe fa06 	bl	8004c64 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006862:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006866:	ba1c      	rev	r4, r3
 8006868:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 800686c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006870:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8006872:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006876:	f103 0304 	add.w	r3, r3, #4
 800687a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800687e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800688c:	ba1c      	rev	r4, r3
 800688e:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8006890:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006892:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8006894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006898:	f103 0304 	add.w	r3, r3, #4
 800689c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80068a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80068a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068aa:	ba1c      	rev	r4, r3
 80068ac:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80068ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 80068b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068b6:	f103 0304 	add.w	r3, r3, #4
 80068ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80068be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80068c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068c8:	ba1c      	rev	r4, r3
 80068ca:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80068cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068ce:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 80068d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068d4:	f103 0304 	add.w	r3, r3, #4
 80068d8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80068dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80068e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068e6:	ba1c      	rev	r4, r3
 80068e8:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80068ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 80068ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068f2:	f103 0304 	add.w	r3, r3, #4
 80068f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80068fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006904:	ba1c      	rev	r4, r3
 8006906:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8006908:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800690a:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800690c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe fa3f 	bl	8004d94 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8006916:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800691e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006920:	ba1c      	rev	r4, r3
 8006922:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8006924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006926:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8006928:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800692c:	f103 0304 	add.w	r3, r3, #4
 8006930:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8006934:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800693c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800693e:	ba1c      	rev	r4, r3
 8006940:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8006942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006944:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8006946:	f107 0314 	add.w	r3, r7, #20
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fa8e 	bl	8004e6c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006950:	f7fe facc 	bl	8004eec <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006954:	f04f 0001 	mov.w	r0, #1
 8006958:	f7fe fada 	bl	8004f10 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006964:	e054      	b.n	8006a10 <CRYP_TDES_CBC+0x23c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe faf5 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 8006972:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006976:	f103 0304 	add.w	r3, r3, #4
 800697a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800697e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fae9 	bl	8004f5c <CRYP_DataIn>
    inputaddr+=4;
 800698a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800698e:	f103 0304 	add.w	r3, r3, #4
 8006992:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 8006996:	f04f 0300 	mov.w	r3, #0
 800699a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800699c:	f04f 0010 	mov.w	r0, #16
 80069a0:	f7fe fc92 	bl	80052c8 <CRYP_GetFlagStatus>
 80069a4:	4603      	mov	r3, r0
 80069a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f103 0301 	add.w	r3, r3, #1
 80069b0:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b8:	d003      	beq.n	80069c2 <CRYP_TDES_CBC+0x1ee>
 80069ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1ec      	bne.n	800699c <CRYP_TDES_CBC+0x1c8>

    if (busystatus != RESET)
 80069c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <CRYP_TDES_CBC+0x200>
   {
       status = ERROR;
 80069ca:	f04f 0300 	mov.w	r3, #0
 80069ce:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80069d2:	e017      	b.n	8006a04 <CRYP_TDES_CBC+0x230>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80069d4:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80069d8:	f7fe fad0 	bl	8004f7c <CRYP_DataOut>
 80069dc:	4603      	mov	r3, r0
 80069de:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80069e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069e4:	f103 0304 	add.w	r3, r3, #4
 80069e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80069ec:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80069f0:	f7fe fac4 	bl	8004f7c <CRYP_DataOut>
 80069f4:	4603      	mov	r3, r0
 80069f6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80069f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80069fc:	f103 0304 	add.w	r3, r3, #4
 8006a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a08:	f103 0308 	add.w	r3, r3, #8
 8006a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d203      	bcs.n	8006a24 <CRYP_TDES_CBC+0x250>
 8006a1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d1a0      	bne.n	8006966 <CRYP_TDES_CBC+0x192>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	f7fe fa72 	bl	8004f10 <CRYP_Cmd>

  return status; 
 8006a2c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	f107 07ac 	add.w	r7, r7, #172	; 0xac
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd90      	pop	{r4, r7, pc}
 8006a3a:	bf00      	nop

08006a3c <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8006a40:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8006a44:	f04f 0101 	mov.w	r1, #1
 8006a48:	f005 f9f6 	bl	800be38 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8006a4c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8006a50:	f04f 0100 	mov.w	r1, #0
 8006a54:	f005 f9f0 	bl	800be38 <RCC_APB1PeriphResetCmd>
}
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop

08006a5c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8006a66:	f04f 0300 	mov.w	r3, #0
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	f04f 0300 	mov.w	r3, #0
 8006a70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8006a72:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006a76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f640 72fe 	movw	r2, #4094	; 0xffe
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	ea6f 0303 	mvn.w	r3, r3
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8006aa0:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 8006ab8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006abc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]
}
 8006ac4:	f107 0714 	add.w	r7, r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bc80      	pop	{r7}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f04f 0200 	mov.w	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f04f 0200 	mov.w	r2, #0
 8006ae6:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f04f 0200 	mov.w	r2, #0
 8006af6:	60da      	str	r2, [r3, #12]
}
 8006af8:	f107 070c 	add.w	r7, r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bc80      	pop	{r7}
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop

08006b04 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006b10:	78fb      	ldrb	r3, [r7, #3]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d010      	beq.n	8006b38 <DAC_Cmd+0x34>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8006b16:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006b1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006b1e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006b22:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006b26:	6811      	ldr	r1, [r2, #0]
 8006b28:	687a      	ldr	r2, [r7, #4]
 8006b2a:	f04f 0001 	mov.w	r0, #1
 8006b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006b32:	430a      	orrs	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e011      	b.n	8006b5c <DAC_Cmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8006b38:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006b3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006b40:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006b44:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006b48:	6811      	ldr	r1, [r2, #0]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	f04f 0001 	mov.w	r0, #1
 8006b50:	fa00 f202 	lsl.w	r2, r0, r2
 8006b54:	ea6f 0202 	mvn.w	r2, r2
 8006b58:	400a      	ands	r2, r1
 8006b5a:	601a      	str	r2, [r3, #0]
  }
}
 8006b5c:	f107 070c 	add.w	r7, r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bc80      	pop	{r7}
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop

08006b68 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d012      	beq.n	8006ba0 <DAC_SoftwareTriggerCmd+0x38>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8006b7a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006b7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006b82:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006b86:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006b8a:	6851      	ldr	r1, [r2, #4]
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8006b92:	f04f 0001 	mov.w	r0, #1
 8006b96:	fa00 f202 	lsl.w	r2, r0, r2
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e013      	b.n	8006bc8 <DAC_SoftwareTriggerCmd+0x60>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8006ba0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006ba4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006ba8:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006bac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006bb0:	6851      	ldr	r1, [r2, #4]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8006bb8:	f04f 0001 	mov.w	r0, #1
 8006bbc:	fa00 f202 	lsl.w	r2, r0, r2
 8006bc0:	ea6f 0202 	mvn.w	r2, r2
 8006bc4:	400a      	ands	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }
}
 8006bc8:	f107 070c 	add.w	r7, r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bc80      	pop	{r7}
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop

08006bd4 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	4603      	mov	r3, r0
 8006bdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8006be4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006be8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006bec:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006bf0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006bf4:	6852      	ldr	r2, [r2, #4]
 8006bf6:	f042 0203 	orr.w	r2, r2, #3
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	e00b      	b.n	8006c16 <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8006bfe:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006c02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c06:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006c0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006c0e:	6852      	ldr	r2, [r2, #4]
 8006c10:	f022 0203 	bic.w	r2, r2, #3
 8006c14:	605a      	str	r2, [r3, #4]
  }
}
 8006c16:	f107 070c 	add.w	r7, r7, #12
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bc80      	pop	{r7}
 8006c1e:	4770      	bx	lr

08006c20 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00f      	beq.n	8006c54 <DAC_WaveGenerationCmd+0x34>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8006c34:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006c38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c3c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006c40:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006c44:	6811      	ldr	r1, [r2, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	68b8      	ldr	r0, [r7, #8]
 8006c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e010      	b.n	8006c76 <DAC_WaveGenerationCmd+0x56>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8006c54:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006c58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c5c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006c60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006c64:	6811      	ldr	r1, [r2, #0]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c6e:	ea6f 0202 	mvn.w	r2, r2
 8006c72:	400a      	ands	r2, r1
 8006c74:	601a      	str	r2, [r3, #0]
  }
}
 8006c76:	f107 0714 	add.w	r7, r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8006c92:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006c96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006c9a:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	18d3      	adds	r3, r2, r3
 8006ca2:	f103 0308 	add.w	r3, r3, #8
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	887a      	ldrh	r2, [r7, #2]
 8006cac:	601a      	str	r2, [r3, #0]
}
 8006cae:	f107 0714 	add.w	r7, r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr

08006cb8 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b085      	sub	sp, #20
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8006cca:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006cce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006cd2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	18d3      	adds	r3, r2, r3
 8006cda:	f103 0314 	add.w	r3, r3, #20
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	887a      	ldrh	r2, [r7, #2]
 8006ce4:	601a      	str	r2, [r3, #0]
}
 8006ce6:	f107 0714 	add.w	r7, r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr

08006cf0 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	460a      	mov	r2, r1
 8006cfc:	807a      	strh	r2, [r7, #2]
 8006cfe:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b08      	cmp	r3, #8
 8006d10:	d106      	bne.n	8006d20 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8006d12:	887b      	ldrh	r3, [r7, #2]
 8006d14:	ea4f 2203 	mov.w	r2, r3, lsl #8
 8006d18:	883b      	ldrh	r3, [r7, #0]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
 8006d1e:	e005      	b.n	8006d2c <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8006d20:	887b      	ldrh	r3, [r7, #2]
 8006d22:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8006d26:	883b      	ldrh	r3, [r7, #0]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8006d2c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006d30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006d34:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	18d3      	adds	r3, r2, r3
 8006d3c:	f103 0320 	add.w	r3, r3, #32
 8006d40:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]
}
 8006d48:	f107 0714 	add.w	r7, r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop

08006d54 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b085      	sub	sp, #20
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8006d62:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006d66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006d6a:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	18d3      	adds	r3, r2, r3
 8006d76:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8006d7a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	f107 0714 	add.w	r7, r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bc80      	pop	{r7}
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop

08006d90 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	460b      	mov	r3, r1
 8006d9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d010      	beq.n	8006dc4 <DAC_DMACmd+0x34>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8006da2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006da6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006daa:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006dae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006db2:	6811      	ldr	r1, [r2, #0]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006dba:	fa00 f202 	lsl.w	r2, r0, r2
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]
 8006dc2:	e011      	b.n	8006de8 <DAC_DMACmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8006dc4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006dc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006dcc:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006dd0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006dd4:	6811      	ldr	r1, [r2, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006ddc:	fa00 f202 	lsl.w	r2, r0, r2
 8006de0:	ea6f 0202 	mvn.w	r2, r2
 8006de4:	400a      	ands	r2, r1
 8006de6:	601a      	str	r2, [r3, #0]
  }
}
 8006de8:	f107 070c 	add.w	r7, r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bc80      	pop	{r7}
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop

08006df4 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00f      	beq.n	8006e28 <DAC_ITConfig+0x34>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8006e08:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006e0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006e10:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006e14:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006e18:	6811      	ldr	r1, [r2, #0]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	68b8      	ldr	r0, [r7, #8]
 8006e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e22:	430a      	orrs	r2, r1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e010      	b.n	8006e4a <DAC_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8006e28:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006e2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006e30:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8006e34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8006e38:	6811      	ldr	r1, [r2, #0]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	68b8      	ldr	r0, [r7, #8]
 8006e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8006e42:	ea6f 0202 	mvn.w	r2, r2
 8006e46:	400a      	ands	r2, r1
 8006e48:	601a      	str	r2, [r3, #0]
  }
}
 8006e4a:	f107 0714 	add.w	r7, r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr

08006e54 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8006e64:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006e68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6839      	ldr	r1, [r7, #0]
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	4013      	ands	r3, r2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <DAC_GetFlagStatus+0x30>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8006e7c:	f04f 0301 	mov.w	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
 8006e82:	e002      	b.n	8006e8a <DAC_GetFlagStatus+0x36>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f107 0714 	add.w	r7, r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bc80      	pop	{r7}
 8006e96:	4770      	bx	lr

08006e98 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8006ea2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006ea6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	6839      	ldr	r1, [r7, #0]
 8006eae:	fa01 f202 	lsl.w	r2, r1, r2
 8006eb2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006eb4:	f107 070c 	add.w	r7, r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bc80      	pop	{r7}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8006eca:	f04f 0300 	mov.w	r3, #0
 8006ece:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8006ed0:	f04f 0300 	mov.w	r3, #0
 8006ed4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8006ed6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006eda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8006eec:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006ef0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6839      	ldr	r1, [r7, #0]
 8006efa:	fa01 f303 	lsl.w	r3, r1, r3
 8006efe:	4013      	ands	r3, r2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d006      	beq.n	8006f12 <DAC_GetITStatus+0x52>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d003      	beq.n	8006f12 <DAC_GetITStatus+0x52>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8006f0a:	f04f 0301 	mov.w	r3, #1
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e002      	b.n	8006f18 <DAC_GetITStatus+0x58>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8006f12:	f04f 0300 	mov.w	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f107 0714 	add.w	r7, r7, #20
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bc80      	pop	{r7}
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop

08006f28 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8006f32:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8006f36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	fa01 f202 	lsl.w	r2, r1, r2
 8006f42:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006f44:	f107 070c 	add.w	r7, r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bc80      	pop	{r7}
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop

08006f50 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8006f50:	b480      	push	{r7}
 8006f52:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8006f54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f58:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bc80      	pop	{r7}
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop

08006f6c <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8006f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f74:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8006f7e:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop

08006f8c <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	460b      	mov	r3, r1
 8006f96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8006f98:	78fb      	ldrb	r3, [r7, #3]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00c      	beq.n	8006fb8 <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8006f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fa2:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8006fa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006faa:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8006fae:	6851      	ldr	r1, [r2, #4]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	e00d      	b.n	8006fd4 <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8006fb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006fbc:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8006fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006fc4:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8006fc8:	6851      	ldr	r1, [r2, #4]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	ea6f 0202 	mvn.w	r2, r2
 8006fd0:	400a      	ands	r2, r1
 8006fd2:	605a      	str	r2, [r3, #4]
  }
}
 8006fd4:	f107 070c 	add.w	r7, r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bc80      	pop	{r7}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop

08006fe0 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	460b      	mov	r3, r1
 8006fea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006fec:	78fb      	ldrb	r3, [r7, #3]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00c      	beq.n	800700c <DBGMCU_APB1PeriphConfig+0x2c>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8006ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ff6:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8006ffa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006ffe:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007002:	6891      	ldr	r1, [r2, #8]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	430a      	orrs	r2, r1
 8007008:	609a      	str	r2, [r3, #8]
 800700a:	e00d      	b.n	8007028 <DBGMCU_APB1PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800700c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007010:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007014:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007018:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800701c:	6891      	ldr	r1, [r2, #8]
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	ea6f 0202 	mvn.w	r2, r2
 8007024:	400a      	ands	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
  }
}
 8007028:	f107 070c 	add.w	r7, r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00c      	beq.n	8007060 <DBGMCU_APB2PeriphConfig+0x2c>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8007046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800704a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800704e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007052:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007056:	68d1      	ldr	r1, [r2, #12]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	430a      	orrs	r2, r1
 800705c:	60da      	str	r2, [r3, #12]
 800705e:	e00d      	b.n	800707c <DBGMCU_APB2PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8007060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007064:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007068:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800706c:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007070:	68d1      	ldr	r1, [r2, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	ea6f 0202 	mvn.w	r2, r2
 8007078:	400a      	ands	r2, r1
 800707a:	60da      	str	r2, [r3, #12]
  }
}
 800707c:	f107 070c 	add.w	r7, r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	bc80      	pop	{r7}
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop

08007088 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 800709a:	f04f 0300 	mov.w	r3, #0
 800709e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80070b0:	f04f 021f 	mov.w	r2, #31
 80070b4:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 80070b6:	f04f 0300 	mov.w	r3, #0
 80070ba:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 80070c4:	f04f 0300 	mov.w	r3, #0
 80070c8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80070cc:	f04f 0200 	mov.w	r2, #0
 80070d0:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 80070d2:	f04f 0300 	mov.w	r3, #0
 80070d6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80070da:	f04f 0200 	mov.w	r2, #0
 80070de:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80070e8:	f04f 0200 	mov.w	r2, #0
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr

080070f4 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 80070fc:	f04f 0300 	mov.w	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8007102:	f04f 0300 	mov.w	r3, #0
 8007106:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800710a:	f04f 0200 	mov.w	r2, #0
 800710e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007112:	6812      	ldr	r2, [r2, #0]
 8007114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007118:	f022 0201 	bic.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800711e:	f04f 0300 	mov.w	r3, #0
 8007122:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8007130:	f023 0312 	bic.w	r3, r3, #18
 8007134:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800713e:	4313      	orrs	r3, r2
 8007140:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8007146:	4313      	orrs	r3, r2
 8007148:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800714e:	4313      	orrs	r3, r2
 8007150:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8007156:	4313      	orrs	r3, r2
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	895b      	ldrh	r3, [r3, #10]
 800715e:	4313      	orrs	r3, r2
 8007160:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8007166:	4313      	orrs	r3, r2
 8007168:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	4313      	orrs	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8007170:	f04f 0300 	mov.w	r3, #0
 8007174:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	601a      	str	r2, [r3, #0]
}
 800717c:	f107 0714 	add.w	r7, r7, #20
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f04f 0200 	mov.w	r2, #0
 8007196:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f04f 0200 	mov.w	r2, #0
 800719e:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f04f 0200 	mov.w	r2, #0
 80071ae:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f04f 0200 	mov.w	r2, #0
 80071b6:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f04f 0200 	mov.w	r2, #0
 80071be:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f04f 0200 	mov.w	r2, #0
 80071c6:	819a      	strh	r2, [r3, #12]
}
 80071c8:	f107 070c 	add.w	r7, r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bc80      	pop	{r7}
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop

080071d4 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80071dc:	f04f 0300 	mov.w	r3, #0
 80071e0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	8852      	ldrh	r2, [r2, #2]
 80071e8:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	8812      	ldrh	r2, [r2, #0]
 80071ee:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80071f2:	430a      	orrs	r2, r1
 80071f4:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 80071f6:	f04f 0300 	mov.w	r3, #0
 80071fa:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	88d2      	ldrh	r2, [r2, #6]
 8007202:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	8892      	ldrh	r2, [r2, #4]
 8007208:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800720c:	430a      	orrs	r2, r1
 800720e:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8007210:	f107 070c 	add.w	r7, r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	bc80      	pop	{r7}
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop

0800721c <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00c      	beq.n	8007246 <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007234:	f04f 0200 	mov.w	r2, #0
 8007238:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800723c:	6812      	ldr	r2, [r2, #0]
 800723e:	f042 0204 	orr.w	r2, r2, #4
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	e00b      	b.n	800725e <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8007246:	f04f 0300 	mov.w	r3, #0
 800724a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	f022 0204 	bic.w	r2, r2, #4
 800725c:	601a      	str	r2, [r3, #0]
  }
}
 800725e:	f107 070c 	add.w	r7, r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	bc80      	pop	{r7}
 8007266:	4770      	bx	lr

08007268 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8007270:	f04f 0300 	mov.w	r3, #0
 8007274:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	7812      	ldrb	r2, [r2, #0]
 800727c:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	7852      	ldrb	r2, [r2, #1]
 8007282:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8007286:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	7892      	ldrb	r2, [r2, #2]
 800728c:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8007290:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	78d2      	ldrb	r2, [r2, #3]
 8007296:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800729a:	430a      	orrs	r2, r1
 800729c:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 800729e:	f107 070c 	add.w	r7, r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc80      	pop	{r7}
 80072a6:	4770      	bx	lr

080072a8 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 80072b2:	79fb      	ldrb	r3, [r7, #7]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00c      	beq.n	80072d2 <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	f042 0208 	orr.w	r2, r2, #8
 80072ce:	601a      	str	r2, [r3, #0]
 80072d0:	e00b      	b.n	80072ea <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 80072d2:	f04f 0300 	mov.w	r3, #0
 80072d6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80072da:	f04f 0200 	mov.w	r2, #0
 80072de:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80072e2:	6812      	ldr	r2, [r2, #0]
 80072e4:	f022 0208 	bic.w	r2, r2, #8
 80072e8:	601a      	str	r2, [r3, #0]
  }
}
 80072ea:	f107 070c 	add.w	r7, r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	4603      	mov	r3, r0
 80072fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80072fe:	79fb      	ldrb	r3, [r7, #7]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00c      	beq.n	800731e <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8007304:	f04f 0300 	mov.w	r3, #0
 8007308:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800730c:	f04f 0200 	mov.w	r2, #0
 8007310:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007314:	6812      	ldr	r2, [r2, #0]
 8007316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800731a:	601a      	str	r2, [r3, #0]
 800731c:	e00b      	b.n	8007336 <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800731e:	f04f 0300 	mov.w	r3, #0
 8007322:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007334:	601a      	str	r2, [r3, #0]
  }
}
 8007336:	f107 070c 	add.w	r7, r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	bc80      	pop	{r7}
 800733e:	4770      	bx	lr

08007340 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	4603      	mov	r3, r0
 8007348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d00c      	beq.n	800736a <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8007350:	f04f 0300 	mov.w	r3, #0
 8007354:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007358:	f04f 0200 	mov.w	r2, #0
 800735c:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007360:	6812      	ldr	r2, [r2, #0]
 8007362:	f042 0201 	orr.w	r2, r2, #1
 8007366:	601a      	str	r2, [r3, #0]
 8007368:	e00b      	b.n	8007382 <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800737a:	6812      	ldr	r2, [r2, #0]
 800737c:	f022 0201 	bic.w	r2, r2, #1
 8007380:	601a      	str	r2, [r3, #0]
  }
}
 8007382:	f107 070c 	add.w	r7, r7, #12
 8007386:	46bd      	mov	sp, r7
 8007388:	bc80      	pop	{r7}
 800738a:	4770      	bx	lr

0800738c <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800738c:	b480      	push	{r7}
 800738e:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8007390:	f04f 0300 	mov.w	r3, #0
 8007394:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 800739a:	4618      	mov	r0, r3
 800739c:	46bd      	mov	sp, r7
 800739e:	bc80      	pop	{r7}
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop

080073a4 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	80fa      	strh	r2, [r7, #6]
 80073b0:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80073b2:	797b      	ldrb	r3, [r7, #5]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00c      	beq.n	80073d2 <DCMI_ITConfig+0x2e>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 80073b8:	f04f 0300 	mov.w	r3, #0
 80073bc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80073c8:	68d1      	ldr	r1, [r2, #12]
 80073ca:	88fa      	ldrh	r2, [r7, #6]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	60da      	str	r2, [r3, #12]
 80073d0:	e00e      	b.n	80073f0 <DCMI_ITConfig+0x4c>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 80073d2:	f04f 0300 	mov.w	r3, #0
 80073d6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80073da:	f04f 0200 	mov.w	r2, #0
 80073de:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80073e2:	68d1      	ldr	r1, [r2, #12]
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	ea6f 0202 	mvn.w	r2, r2
 80073ea:	b292      	uxth	r2, r2
 80073ec:	400a      	ands	r2, r1
 80073ee:	60da      	str	r2, [r3, #12]
  }  
}
 80073f0:	f107 070c 	add.w	r7, r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bc80      	pop	{r7}
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop

080073fc <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b087      	sub	sp, #28
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800740c:	f04f 0300 	mov.w	r3, #0
 8007410:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8007418:	b29b      	uxth	r3, r3
 800741a:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d106      	bne.n	8007430 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	613b      	str	r3, [r7, #16]
 800742e:	e00f      	b.n	8007450 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d106      	bne.n	8007444 <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	613b      	str	r3, [r7, #16]
 8007442:	e005      	b.n	8007450 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8007450:	88fa      	ldrh	r2, [r7, #6]
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	4013      	ands	r3, r2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 800745a:	f04f 0301 	mov.w	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
 8007460:	e002      	b.n	8007468 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 8007462:	f04f 0300 	mov.w	r3, #0
 8007466:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8007468:	7dfb      	ldrb	r3, [r7, #23]
}
 800746a:	4618      	mov	r0, r3
 800746c:	f107 071c 	add.w	r7, r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	bc80      	pop	{r7}
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop

08007478 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	4603      	mov	r3, r0
 8007480:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8007482:	f04f 0300 	mov.w	r3, #0
 8007486:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800748a:	88fa      	ldrh	r2, [r7, #6]
 800748c:	615a      	str	r2, [r3, #20]
}
 800748e:	f107 070c 	add.w	r7, r7, #12
 8007492:	46bd      	mov	sp, r7
 8007494:	bc80      	pop	{r7}
 8007496:	4770      	bx	lr

08007498 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	4603      	mov	r3, r0
 80074a0:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 80074a2:	f04f 0300 	mov.w	r3, #0
 80074a6:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 80074a8:	f04f 0300 	mov.w	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 80074ae:	f04f 0300 	mov.w	r3, #0
 80074b2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80074b6:	691a      	ldr	r2, [r3, #16]
 80074b8:	88fb      	ldrh	r3, [r7, #6]
 80074ba:	4013      	ands	r3, r2
 80074bc:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <DCMI_GetITStatus+0x34>
  {
    bitstatus = SET;
 80074c4:	f04f 0301 	mov.w	r3, #1
 80074c8:	73fb      	strb	r3, [r7, #15]
 80074ca:	e002      	b.n	80074d2 <DCMI_GetITStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
 80074cc:	f04f 0300 	mov.w	r3, #0
 80074d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	f107 0714 	add.w	r7, r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	bc80      	pop	{r7}
 80074de:	4770      	bx	lr

080074e0 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	4603      	mov	r3, r0
 80074e8:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	615a      	str	r2, [r3, #20]
}
 80074f6:	f107 070c 	add.w	r7, r7, #12
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bc80      	pop	{r7}
 80074fe:	4770      	bx	lr

08007500 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f023 0201 	bic.w	r2, r3, #1
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f04f 0200 	mov.w	r2, #0
 800752a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f04f 0221 	mov.w	r2, #33	; 0x21
 8007542:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	f246 0310 	movw	r3, #24592	; 0x6010
 800754a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800754e:	429a      	cmp	r2, r3
 8007550:	d107      	bne.n	8007562 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8007552:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007556:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800755a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800755e:	609a      	str	r2, [r3, #8]
 8007560:	e0eb      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	f246 0328 	movw	r3, #24616	; 0x6028
 8007568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800756c:	429a      	cmp	r2, r3
 800756e:	d107      	bne.n	8007580 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8007570:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007574:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007578:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800757c:	609a      	str	r2, [r3, #8]
 800757e:	e0dc      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	f246 0340 	movw	r3, #24640	; 0x6040
 8007586:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800758a:	429a      	cmp	r2, r3
 800758c:	d107      	bne.n	800759e <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800758e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007592:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007596:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800759a:	609a      	str	r2, [r3, #8]
 800759c:	e0cd      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	f246 0358 	movw	r3, #24664	; 0x6058
 80075a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d107      	bne.n	80075bc <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80075ac:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80075b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075b4:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80075b8:	609a      	str	r2, [r3, #8]
 80075ba:	e0be      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	f246 0370 	movw	r3, #24688	; 0x6070
 80075c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d109      	bne.n	80075de <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80075ca:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80075ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075d2:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80075d6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80075da:	60da      	str	r2, [r3, #12]
 80075dc:	e0ad      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80075de:	687a      	ldr	r2, [r7, #4]
 80075e0:	f246 0388 	movw	r3, #24712	; 0x6088
 80075e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d109      	bne.n	8007600 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80075ec:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80075f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80075f4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80075f8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80075fc:	60da      	str	r2, [r3, #12]
 80075fe:	e09c      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8007606:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800760a:	429a      	cmp	r2, r3
 800760c:	d109      	bne.n	8007622 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800760e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007612:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800761e:	60da      	str	r2, [r3, #12]
 8007620:	e08b      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8007628:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800762c:	429a      	cmp	r2, r3
 800762e:	d107      	bne.n	8007640 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8007630:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007634:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007638:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e07c      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	f246 4310 	movw	r3, #25616	; 0x6410
 8007646:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800764a:	429a      	cmp	r2, r3
 800764c:	d107      	bne.n	800765e <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800764e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007652:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007656:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800765a:	609a      	str	r2, [r3, #8]
 800765c:	e06d      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	f246 4328 	movw	r3, #25640	; 0x6428
 8007664:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007668:	429a      	cmp	r2, r3
 800766a:	d107      	bne.n	800767c <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800766c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007674:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8007678:	609a      	str	r2, [r3, #8]
 800767a:	e05e      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800767c:	687a      	ldr	r2, [r7, #4]
 800767e:	f246 4340 	movw	r3, #25664	; 0x6440
 8007682:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007686:	429a      	cmp	r2, r3
 8007688:	d107      	bne.n	800769a <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800768a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800768e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007692:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8007696:	609a      	str	r2, [r3, #8]
 8007698:	e04f      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	f246 4358 	movw	r3, #25688	; 0x6458
 80076a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d107      	bne.n	80076b8 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80076a8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80076ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076b0:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80076b4:	609a      	str	r2, [r3, #8]
 80076b6:	e040      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	f246 4370 	movw	r3, #25712	; 0x6470
 80076be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d109      	bne.n	80076da <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80076c6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80076ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076ce:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80076d2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80076d6:	60da      	str	r2, [r3, #12]
 80076d8:	e02f      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	f246 4388 	movw	r3, #25736	; 0x6488
 80076e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d109      	bne.n	80076fc <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80076e8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80076ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80076f0:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80076f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80076f8:	60da      	str	r2, [r3, #12]
 80076fa:	e01e      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8007702:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007706:	429a      	cmp	r2, r3
 8007708:	d109      	bne.n	800771e <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800770a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800770e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007712:	f04f 0200 	mov.w	r2, #0
 8007716:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800771a:	60da      	str	r2, [r3, #12]
 800771c:	e00d      	b.n	800773a <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8007724:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007728:	429a      	cmp	r2, r3
 800772a:	d106      	bne.n	800773a <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800772c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007730:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007734:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8007738:	60da      	str	r2, [r3, #12]
    }
  }
}
 800773a:	f107 070c 	add.w	r7, r7, #12
 800773e:	46bd      	mov	sp, r7
 8007740:	bc80      	pop	{r7}
 8007742:	4770      	bx	lr

08007744 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800774e:	f04f 0300 	mov.w	r3, #0
 8007752:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	f248 033f 	movw	r3, #32831	; 0x803f
 8007760:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8007764:	4013      	ands	r3, r2
 8007766:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8007776:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007782:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800778e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007794:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800779a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68fa      	ldr	r2, [r7, #12]
 80077ac:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0307 	bic.w	r3, r3, #7
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c4:	4313      	orrs	r3, r2
 80077c6:	68fa      	ldr	r2, [r7, #12]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	691a      	ldr	r2, [r3, #16]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	685a      	ldr	r2, [r3, #4]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	689a      	ldr	r2, [r3, #8]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	60da      	str	r2, [r3, #12]
}
 80077ea:	f107 0714 	add.w	r7, r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bc80      	pop	{r7}
 80077f2:	4770      	bx	lr

080077f4 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f04f 0200 	mov.w	r2, #0
 8007802:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f04f 0200 	mov.w	r2, #0
 800780a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f04f 0200 	mov.w	r2, #0
 8007812:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f04f 0200 	mov.w	r2, #0
 800781a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f04f 0200 	mov.w	r2, #0
 800782a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f04f 0200 	mov.w	r2, #0
 800783a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f04f 0200 	mov.w	r2, #0
 8007842:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f04f 0200 	mov.w	r2, #0
 8007852:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f04f 0200 	mov.w	r2, #0
 800786a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f04f 0200 	mov.w	r2, #0
 8007872:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007874:	f107 070c 	add.w	r7, r7, #12
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop

08007880 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800788c:	78fb      	ldrb	r3, [r7, #3]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d006      	beq.n	80078a0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f043 0201 	orr.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
 800789e:	e005      	b.n	80078ac <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f023 0201 	bic.w	r2, r3, #1
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	601a      	str	r2, [r3, #0]
  }
}
 80078ac:	f107 070c 	add.w	r7, r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop

080078b8 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e005      	b.n	80078e2 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	601a      	str	r2, [r3, #0]
  }
}
 80078e2:	f107 070c 	add.w	r7, r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d006      	beq.n	800790a <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e005      	b.n	8007916 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 0220 	bic.w	r2, r3, #32
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	601a      	str	r2, [r3, #0]
  }
}
 8007916:	f107 070c 	add.w	r7, r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	bc80      	pop	{r7}
 800791e:	4770      	bx	lr

08007920 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	460b      	mov	r3, r1
 800792a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800792c:	887a      	ldrh	r2, [r7, #2]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	605a      	str	r2, [r3, #4]
}
 8007932:	f107 070c 	add.w	r7, r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	bc80      	pop	{r7}
 800793a:	4770      	bx	lr

0800793c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	b29b      	uxth	r3, r3
}
 800794a:	4618      	mov	r0, r3
 800794c:	f107 070c 	add.w	r7, r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	bc80      	pop	{r7}
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop

08007958 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d006      	beq.n	8007978 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	601a      	str	r2, [r3, #0]
 8007976:	e005      	b.n	8007984 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	611a      	str	r2, [r3, #16]
}
 800798a:	f107 0714 	add.w	r7, r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	bc80      	pop	{r7}
 8007992:	4770      	bx	lr

08007994 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	460b      	mov	r3, r1
 800799e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d006      	beq.n	80079b4 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e005      	b.n	80079c0 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	601a      	str	r2, [r3, #0]
  }
}
 80079c0:	f107 070c 	add.w	r7, r7, #12
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop

080079cc <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	611a      	str	r2, [r3, #16]
 80079e4:	e002      	b.n	80079ec <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	60da      	str	r2, [r3, #12]
  }
}
 80079ec:	f107 0714 	add.w	r7, r7, #20
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bc80      	pop	{r7}
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop

080079f8 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8007a00:	f04f 0300 	mov.w	r3, #0
 8007a04:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8007a12:	f04f 0301 	mov.w	r3, #1
 8007a16:	60fb      	str	r3, [r7, #12]
 8007a18:	e002      	b.n	8007a20 <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8007a1a:	f04f 0300 	mov.w	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8007a20:	68fb      	ldr	r3, [r7, #12]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	f107 0714 	add.w	r7, r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bc80      	pop	{r7}
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop

08007a30 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0301 	and.w	r3, r3, #1
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8007a4c:	f04f 0301 	mov.w	r3, #1
 8007a50:	73fb      	strb	r3, [r7, #15]
 8007a52:	e002      	b.n	8007a5a <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8007a54:	f04f 0300 	mov.w	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f107 0714 	add.w	r7, r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr

08007a68 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a7e:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8007a80:	68fb      	ldr	r3, [r7, #12]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	f107 0714 	add.w	r7, r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bc80      	pop	{r7}
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop

08007a90 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8007aa0:	f04f 0300 	mov.w	r3, #0
 8007aa4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	f246 430f 	movw	r3, #25615	; 0x640f
 8007aac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d805      	bhi.n	8007ac0 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8007ab4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007ab8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007abc:	613b      	str	r3, [r7, #16]
 8007abe:	e004      	b.n	8007aca <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8007ac0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007ac4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ac8:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	60fb      	str	r3, [r7, #12]
 8007ada:	e002      	b.n	8007ae2 <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007ae8:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007aec:	4013      	ands	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	4013      	ands	r3, r2
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8007afa:	f04f 0301 	mov.w	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
 8007b00:	e002      	b.n	8007b08 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f107 071c 	add.w	r7, r7, #28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop

08007b18 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8007b22:	687a      	ldr	r2, [r7, #4]
 8007b24:	f246 430f 	movw	r3, #25615	; 0x640f
 8007b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d805      	bhi.n	8007b3c <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8007b30:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007b34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	e004      	b.n	8007b46 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8007b3c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007b40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007b44:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007b56:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	60d3      	str	r3, [r2, #12]
 8007b60:	e007      	b.n	8007b72 <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007b68:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	68fa      	ldr	r2, [r7, #12]
 8007b70:	6093      	str	r3, [r2, #8]
  }    
}
 8007b72:	f107 0714 	add.w	r7, r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bc80      	pop	{r7}
 8007b7a:	4770      	bx	lr

08007b7c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	60f8      	str	r0, [r7, #12]
 8007b84:	60b9      	str	r1, [r7, #8]
 8007b86:	4613      	mov	r3, r2
 8007b88:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00f      	beq.n	8007bb4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8007b94:	79fb      	ldrb	r3, [r7, #7]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d006      	beq.n	8007ba8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	615a      	str	r2, [r3, #20]
 8007ba6:	e005      	b.n	8007bb4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d015      	beq.n	8007be6 <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 8007bba:	79fb      	ldrb	r3, [r7, #7]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d008      	beq.n	8007bd2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	f003 031e 	and.w	r3, r3, #30
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e009      	b.n	8007be6 <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	f003 031e 	and.w	r3, r3, #30
 8007bdc:	ea6f 0303 	mvn.w	r3, r3
 8007be0:	401a      	ands	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8007be6:	f107 0714 	add.w	r7, r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bc80      	pop	{r7}
 8007bee:	4770      	bx	lr

08007bf0 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
 8007bf8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007bfa:	f04f 0300 	mov.w	r3, #0
 8007bfe:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8007c00:	f04f 0300 	mov.w	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	f04f 0300 	mov.w	r3, #0
 8007c0a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	f246 430f 	movw	r3, #25615	; 0x640f
 8007c12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d805      	bhi.n	8007c26 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8007c1a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007c1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c22:	613b      	str	r3, [r7, #16]
 8007c24:	e004      	b.n	8007c30 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8007c26:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007c2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c2e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8007c30:	683a      	ldr	r2, [r7, #0]
 8007c32:	f640 733c 	movw	r3, #3900	; 0xf3c
 8007c36:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00b      	beq.n	8007c58 <DMA_GetITStatus+0x68>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8007c46:	f003 031e 	and.w	r3, r3, #30
 8007c4a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4013      	ands	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	e004      	b.n	8007c62 <DMA_GetITStatus+0x72>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	695b      	ldr	r3, [r3, #20]
 8007c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c60:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <DMA_GetITStatus+0x84>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	60fb      	str	r3, [r7, #12]
 8007c72:	e002      	b.n	8007c7a <DMA_GetITStatus+0x8a>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007c80:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007c84:	4013      	ands	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d006      	beq.n	8007ca0 <DMA_GetITStatus+0xb0>
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <DMA_GetITStatus+0xb0>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8007c98:	f04f 0301 	mov.w	r3, #1
 8007c9c:	75fb      	strb	r3, [r7, #23]
 8007c9e:	e002      	b.n	8007ca6 <DMA_GetITStatus+0xb6>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8007ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f107 071c 	add.w	r7, r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bc80      	pop	{r7}
 8007cb2:	4770      	bx	lr

08007cb4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	f246 430f 	movw	r3, #25615	; 0x640f
 8007cc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d805      	bhi.n	8007cd8 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8007ccc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007cd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cd4:	60fb      	str	r3, [r7, #12]
 8007cd6:	e004      	b.n	8007ce2 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8007cd8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007cdc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007cf2:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	68fa      	ldr	r2, [r7, #12]
 8007cfa:	60d3      	str	r3, [r2, #12]
 8007cfc:	e007      	b.n	8007d0e <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8007cfe:	683a      	ldr	r2, [r7, #0]
 8007d00:	f640 737d 	movw	r3, #3965	; 0xf7d
 8007d04:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8007d08:	4013      	ands	r3, r2
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	6093      	str	r3, [r2, #8]
  }   
}
 8007d0e:	f107 0714 	add.w	r7, r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bc80      	pop	{r7}
 8007d16:	4770      	bx	lr

08007d18 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8007d1c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d20:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d24:	f04f 0200 	mov.w	r2, #0
 8007d28:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8007d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d2e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d32:	f04f 0200 	mov.w	r2, #0
 8007d36:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8007d38:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8007d46:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d4e:	f04f 0200 	mov.w	r2, #0
 8007d52:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8007d54:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d58:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d60:	f2c0 027f 	movt	r2, #127	; 0x7f
 8007d64:	615a      	str	r2, [r3, #20]
}
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bc80      	pop	{r7}
 8007d6a:	4770      	bx	lr

08007d6c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8007d74:	f04f 0300 	mov.w	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8007d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d82:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	799b      	ldrb	r3, [r3, #6]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d078      	beq.n	8007e7e <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8007d8c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007d90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007d94:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007d98:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007d9c:	6811      	ldr	r1, [r2, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	ea6f 0202 	mvn.w	r2, r2
 8007da6:	400a      	ands	r2, r1
 8007da8:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8007daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007dae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007db2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007db6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007dba:	6851      	ldr	r1, [r2, #4]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6812      	ldr	r2, [r2, #0]
 8007dc0:	ea6f 0202 	mvn.w	r2, r2
 8007dc4:	400a      	ands	r2, r1
 8007dc6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	791b      	ldrb	r3, [r3, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	18d3      	adds	r3, r2, r3
 8007dd0:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	6811      	ldr	r1, [r2, #0]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	6812      	ldr	r2, [r2, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007de0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007de4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007de8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007dec:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007df0:	6891      	ldr	r1, [r2, #8]
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	6812      	ldr	r2, [r2, #0]
 8007df6:	ea6f 0202 	mvn.w	r2, r2
 8007dfa:	400a      	ands	r2, r1
 8007dfc:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8007dfe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e02:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007e06:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007e0a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007e0e:	68d1      	ldr	r1, [r2, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	6812      	ldr	r2, [r2, #0]
 8007e14:	ea6f 0202 	mvn.w	r2, r2
 8007e18:	400a      	ands	r2, r1
 8007e1a:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	795b      	ldrb	r3, [r3, #5]
 8007e20:	2b10      	cmp	r3, #16
 8007e22:	d11a      	bne.n	8007e5a <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8007e24:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007e2c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007e30:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007e34:	6891      	ldr	r1, [r2, #8]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	6812      	ldr	r2, [r2, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8007e3e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007e46:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007e4a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007e4e:	68d1      	ldr	r1, [r2, #12]
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6812      	ldr	r2, [r2, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	60da      	str	r2, [r3, #12]
 8007e58:	e01f      	b.n	8007e9a <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8007e5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007e5e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007e62:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	795b      	ldrb	r3, [r3, #5]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	18d3      	adds	r3, r2, r3
 8007e6c:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	6811      	ldr	r1, [r2, #0]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	6812      	ldr	r2, [r2, #0]
 8007e78:	430a      	orrs	r2, r1
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e00d      	b.n	8007e9a <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	791b      	ldrb	r3, [r3, #4]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	18d3      	adds	r3, r2, r3
 8007e86:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	6811      	ldr	r1, [r2, #0]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	ea6f 0202 	mvn.w	r2, r2
 8007e96:	400a      	ands	r2, r1
 8007e98:	601a      	str	r2, [r3, #0]
  }
}
 8007e9a:	f107 0714 	add.w	r7, r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bc80      	pop	{r7}
 8007ea2:	4770      	bx	lr

08007ea4 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f04f 0200 	mov.w	r2, #0
 8007eba:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f04f 020c 	mov.w	r2, #12
 8007ec2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f04f 0200 	mov.w	r2, #0
 8007eca:	719a      	strb	r2, [r3, #6]
}
 8007ecc:	f107 070c 	add.w	r7, r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bc80      	pop	{r7}
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop

08007ed8 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8007ee0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007ee4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007ee8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007eec:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8007ef0:	6911      	ldr	r1, [r2, #16]
 8007ef2:	687a      	ldr	r2, [r7, #4]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	611a      	str	r2, [r3, #16]
}
 8007ef8:	f107 070c 	add.w	r7, r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bc80      	pop	{r7}
 8007f00:	4770      	bx	lr
 8007f02:	bf00      	nop

08007f04 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8007f0c:	f04f 0300 	mov.w	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8007f12:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007f1a:	695a      	ldr	r2, [r3, #20]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d003      	beq.n	8007f2c <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8007f24:	f04f 0301 	mov.w	r3, #1
 8007f28:	73fb      	strb	r3, [r7, #15]
 8007f2a:	e002      	b.n	8007f32 <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	f107 0714 	add.w	r7, r7, #20
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bc80      	pop	{r7}
 8007f3e:	4770      	bx	lr

08007f40 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8007f48:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	615a      	str	r2, [r3, #20]
}
 8007f54:	f107 070c 	add.w	r7, r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop

08007f60 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8007f74:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4013      	ands	r3, r2
 8007f82:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8007f84:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007f8c:	695a      	ldr	r2, [r3, #20]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d006      	beq.n	8007fa4 <EXTI_GetITStatus+0x44>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d003      	beq.n	8007fa4 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 8007f9c:	f04f 0301 	mov.w	r3, #1
 8007fa0:	73fb      	strb	r3, [r7, #15]
 8007fa2:	e002      	b.n	8007faa <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	f107 0714 	add.w	r7, r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bc80      	pop	{r7}
 8007fb6:	4770      	bx	lr

08007fb8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8007fc0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	615a      	str	r2, [r3, #20]
}
 8007fcc:	f107 070c 	add.w	r7, r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bc80      	pop	{r7}
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop

08007fd8 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8007fe0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fe4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	b2d2      	uxtb	r2, r2
 8007fec:	701a      	strb	r2, [r3, #0]
}
 8007fee:	f107 070c 	add.w	r7, r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bc80      	pop	{r7}
 8007ff6:	4770      	bx	lr

08007ff8 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	4603      	mov	r3, r0
 8008000:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8008002:	79fb      	ldrb	r3, [r7, #7]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d00c      	beq.n	8008022 <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8008008:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800800c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008010:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008014:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008018:	6812      	ldr	r2, [r2, #0]
 800801a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	e00b      	b.n	800803a <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8008022:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008026:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800802a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800802e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008032:	6812      	ldr	r2, [r2, #0]
 8008034:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008038:	601a      	str	r2, [r3, #0]
  }
}
 800803a:	f107 070c 	add.w	r7, r7, #12
 800803e:	46bd      	mov	sp, r7
 8008040:	bc80      	pop	{r7}
 8008042:	4770      	bx	lr

08008044 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	4603      	mov	r3, r0
 800804c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800804e:	79fb      	ldrb	r3, [r7, #7]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8008054:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008058:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800805c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008060:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008064:	6812      	ldr	r2, [r2, #0]
 8008066:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	e00b      	b.n	8008086 <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800806e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008072:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008076:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800807a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800807e:	6812      	ldr	r2, [r2, #0]
 8008080:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008084:	601a      	str	r2, [r3, #0]
  }
}
 8008086:	f107 070c 	add.w	r7, r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	bc80      	pop	{r7}
 800808e:	4770      	bx	lr

08008090 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	4603      	mov	r3, r0
 8008098:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80080a0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80080a8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80080ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	e00b      	b.n	80080d2 <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80080ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80080c2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80080c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80080ca:	6812      	ldr	r2, [r2, #0]
 80080cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080d0:	601a      	str	r2, [r3, #0]
  }
}
 80080d2:	f107 070c 	add.w	r7, r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bc80      	pop	{r7}
 80080da:	4770      	bx	lr

080080dc <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 80080e0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80080e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80080e8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80080ec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080f6:	601a      	str	r2, [r3, #0]
}
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bc80      	pop	{r7}
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop

08008100 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8008100:	b480      	push	{r7}
 8008102:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8008104:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008108:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800810c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008110:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800811a:	601a      	str	r2, [r3, #0]
}
 800811c:	46bd      	mov	sp, r7
 800811e:	bc80      	pop	{r7}
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop

08008124 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8008128:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800812c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008130:	691b      	ldr	r3, [r3, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	da11      	bge.n	800815a <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8008136:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800813a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800813e:	f240 1223 	movw	r2, #291	; 0x123
 8008142:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8008146:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8008148:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800814c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008150:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8008154:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8008158:	605a      	str	r2, [r3, #4]
  }  
}
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr

08008160 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008164:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008168:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800816c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008170:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008174:	6912      	ldr	r2, [r2, #16]
 8008176:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800817a:	611a      	str	r2, [r3, #16]
}
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr
 8008182:	bf00      	nop

08008184 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	460b      	mov	r3, r1
 800818e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8008190:	f04f 0300 	mov.w	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8008196:	f04f 0308 	mov.w	r3, #8
 800819a:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 800819c:	78fb      	ldrb	r3, [r7, #3]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	60fb      	str	r3, [r7, #12]
 80081a8:	e010      	b.n	80081cc <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 80081aa:	78fb      	ldrb	r3, [r7, #3]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d103      	bne.n	80081b8 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80081b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	e009      	b.n	80081cc <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 80081b8:	78fb      	ldrb	r3, [r7, #3]
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	d103      	bne.n	80081c6 <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80081be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	e002      	b.n	80081cc <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80081c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80081ca:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80081cc:	f000 fbec 	bl	80089a8 <FLASH_WaitForLastOperation>
 80081d0:	4603      	mov	r3, r0
 80081d2:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80081d4:	7afb      	ldrb	r3, [r7, #11]
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d159      	bne.n	800828e <FLASH_EraseSector+0x10a>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80081da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80081e2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80081e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80081ea:	6912      	ldr	r2, [r2, #16]
 80081ec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80081f0:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 80081f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80081fa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80081fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008202:	6911      	ldr	r1, [r2, #16]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	430a      	orrs	r2, r1
 8008208:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 800820a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800820e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008212:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008216:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800821a:	6912      	ldr	r2, [r2, #16]
 800821c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008220:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8008222:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008226:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800822a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800822e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008232:	6911      	ldr	r1, [r2, #16]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	430a      	orrs	r2, r1
 8008238:	f042 0202 	orr.w	r2, r2, #2
 800823c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800823e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008242:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008246:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800824a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800824e:	6912      	ldr	r2, [r2, #16]
 8008250:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008254:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008256:	f000 fba7 	bl	80089a8 <FLASH_WaitForLastOperation>
 800825a:	4603      	mov	r3, r0
 800825c:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800825e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008262:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008266:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800826a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800826e:	6912      	ldr	r2, [r2, #16]
 8008270:	f022 0202 	bic.w	r2, r2, #2
 8008274:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 8008276:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800827a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800827e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008282:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008286:	6912      	ldr	r2, [r2, #16]
 8008288:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800828c:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 800828e:	7afb      	ldrb	r3, [r7, #11]
}
 8008290:	4618      	mov	r0, r3
 8008292:	f107 0710 	add.w	r7, r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop

0800829c <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 80082a6:	f04f 0300 	mov.w	r3, #0
 80082aa:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80082ac:	f04f 0308 	mov.w	r3, #8
 80082b0:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80082b2:	f000 fb79 	bl	80089a8 <FLASH_WaitForLastOperation>
 80082b6:	4603      	mov	r3, r0
 80082b8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80082ba:	79fb      	ldrb	r3, [r7, #7]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	e010      	b.n	80082ea <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d103      	bne.n	80082d6 <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80082ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80082d2:	60fb      	str	r3, [r7, #12]
 80082d4:	e009      	b.n	80082ea <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d103      	bne.n	80082e4 <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80082dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e002      	b.n	80082ea <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80082e4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80082e8:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	2b08      	cmp	r3, #8
 80082ee:	d13f      	bne.n	8008370 <FLASH_EraseAllSectors+0xd4>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 80082f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80082f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80082f8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80082fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008300:	6912      	ldr	r2, [r2, #16]
 8008302:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008306:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 8008308:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800830c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008310:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008314:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008318:	6911      	ldr	r1, [r2, #16]
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	430a      	orrs	r2, r1
 800831e:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 8008320:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008324:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008328:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800832c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008330:	6912      	ldr	r2, [r2, #16]
 8008332:	f042 0204 	orr.w	r2, r2, #4
 8008336:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8008338:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800833c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008340:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008344:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008348:	6912      	ldr	r2, [r2, #16]
 800834a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800834e:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008350:	f000 fb2a 	bl	80089a8 <FLASH_WaitForLastOperation>
 8008354:	4603      	mov	r3, r0
 8008356:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8008358:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800835c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008360:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008364:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008368:	6912      	ldr	r2, [r2, #16]
 800836a:	f022 0204 	bic.w	r2, r2, #4
 800836e:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 8008370:	7afb      	ldrb	r3, [r7, #11]
}
 8008372:	4618      	mov	r0, r3
 8008374:	f107 0710 	add.w	r7, r7, #16
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8008388:	f04f 0308 	mov.w	r3, #8
 800838c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800838e:	f000 fb0b 	bl	80089a8 <FLASH_WaitForLastOperation>
 8008392:	4603      	mov	r3, r0
 8008394:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8008396:	7dfb      	ldrb	r3, [r7, #23]
 8008398:	2b08      	cmp	r3, #8
 800839a:	d138      	bne.n	800840e <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800839c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80083a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80083ac:	6912      	ldr	r2, [r2, #16]
 80083ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80083b2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80083b4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083bc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80083c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80083c4:	6912      	ldr	r2, [r2, #16]
 80083c6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80083ca:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80083cc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083d4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80083d8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80083dc:	6912      	ldr	r2, [r2, #16]
 80083de:	f042 0201 	orr.w	r2, r2, #1
 80083e2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 80083e4:	68f9      	ldr	r1, [r7, #12]
 80083e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083ea:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80083ee:	f000 fadb 	bl	80089a8 <FLASH_WaitForLastOperation>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80083f6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80083fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083fe:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008402:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008406:	6912      	ldr	r2, [r2, #16]
 8008408:	f022 0201 	bic.w	r2, r2, #1
 800840c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800840e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008410:	4618      	mov	r0, r3
 8008412:	f107 0718 	add.w	r7, r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop

0800841c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8008426:	f04f 0308 	mov.w	r3, #8
 800842a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800842c:	f000 fabc 	bl	80089a8 <FLASH_WaitForLastOperation>
 8008430:	4603      	mov	r3, r0
 8008432:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8008434:	7bfb      	ldrb	r3, [r7, #15]
 8008436:	2b08      	cmp	r3, #8
 8008438:	d136      	bne.n	80084a8 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800843a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800843e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008442:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008446:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800844a:	6912      	ldr	r2, [r2, #16]
 800844c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008450:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8008452:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008456:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800845a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800845e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008462:	6912      	ldr	r2, [r2, #16]
 8008464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008468:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800846a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800846e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008472:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008476:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800847a:	6912      	ldr	r2, [r2, #16]
 800847c:	f042 0201 	orr.w	r2, r2, #1
 8008480:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008488:	f000 fa8e 	bl	80089a8 <FLASH_WaitForLastOperation>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8008490:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008494:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008498:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800849c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80084a0:	6912      	ldr	r2, [r2, #16]
 80084a2:	f022 0201 	bic.w	r2, r2, #1
 80084a6:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	f107 0710 	add.w	r7, r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80084c0:	f04f 0308 	mov.w	r3, #8
 80084c4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80084c6:	f000 fa6f 	bl	80089a8 <FLASH_WaitForLastOperation>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80084ce:	7bfb      	ldrb	r3, [r7, #15]
 80084d0:	2b08      	cmp	r3, #8
 80084d2:	d136      	bne.n	8008542 <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80084d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80084e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80084e4:	6912      	ldr	r2, [r2, #16]
 80084e6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80084ea:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80084ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084f4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80084f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80084fc:	6912      	ldr	r2, [r2, #16]
 80084fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008502:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8008504:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008508:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800850c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008510:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008514:	6912      	ldr	r2, [r2, #16]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	887a      	ldrh	r2, [r7, #2]
 8008520:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008522:	f000 fa41 	bl	80089a8 <FLASH_WaitForLastOperation>
 8008526:	4603      	mov	r3, r0
 8008528:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800852a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800852e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008532:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008536:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800853a:	6912      	ldr	r2, [r2, #16]
 800853c:	f022 0201 	bic.w	r2, r2, #1
 8008540:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
}
 8008544:	4618      	mov	r0, r3
 8008546:	f107 0710 	add.w	r7, r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop

08008550 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	460b      	mov	r3, r1
 800855a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800855c:	f04f 0308 	mov.w	r3, #8
 8008560:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008562:	f000 fa21 	bl	80089a8 <FLASH_WaitForLastOperation>
 8008566:	4603      	mov	r3, r0
 8008568:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b08      	cmp	r3, #8
 800856e:	d134      	bne.n	80085da <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8008570:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008574:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008578:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800857c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008580:	6912      	ldr	r2, [r2, #16]
 8008582:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008586:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8008588:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800858c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008590:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008594:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008598:	6912      	ldr	r2, [r2, #16]
 800859a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800859c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80085a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80085ac:	6912      	ldr	r2, [r2, #16]
 80085ae:	f042 0201 	orr.w	r2, r2, #1
 80085b2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	78fa      	ldrb	r2, [r7, #3]
 80085b8:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80085ba:	f000 f9f5 	bl	80089a8 <FLASH_WaitForLastOperation>
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80085c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085ca:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80085ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80085d2:	6912      	ldr	r2, [r2, #16]
 80085d4:	f022 0201 	bic.w	r2, r2, #1
 80085d8:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 80085da:	7bfb      	ldrb	r3, [r7, #15]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	f107 0710 	add.w	r7, r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop

080085e8 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80085ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085f4:	695b      	ldr	r3, [r3, #20]
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	b2db      	uxtb	r3, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d011      	beq.n	8008624 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8008600:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008604:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008608:	f642 223b 	movw	r2, #10811	; 0x2a3b
 800860c:	f6c0 0219 	movt	r2, #2073	; 0x819
 8008610:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8008612:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008616:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800861a:	f646 627f 	movw	r2, #28287	; 0x6e7f
 800861e:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 8008622:	609a      	str	r2, [r3, #8]
  }  
}
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop

0800862c <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8008630:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008634:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008638:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800863c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008640:	6952      	ldr	r2, [r2, #20]
 8008642:	f042 0201 	orr.w	r2, r2, #1
 8008646:	615a      	str	r2, [r3, #20]
}
 8008648:	46bd      	mov	sp, r7
 800864a:	bc80      	pop	{r7}
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop

08008650 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	460b      	mov	r3, r1
 800865a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800865c:	f04f 0308 	mov.w	r3, #8
 8008660:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8008662:	f000 f9a1 	bl	80089a8 <FLASH_WaitForLastOperation>
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800866a:	7bfb      	ldrb	r3, [r7, #15]
 800866c:	2b08      	cmp	r3, #8
 800866e:	d124      	bne.n	80086ba <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 8008670:	78fb      	ldrb	r3, [r7, #3]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d012      	beq.n	800869c <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8008676:	f643 4316 	movw	r3, #15382	; 0x3c16
 800867a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800867e:	f643 4216 	movw	r2, #15382	; 0x3c16
 8008682:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008686:	8812      	ldrh	r2, [r2, #0]
 8008688:	b291      	uxth	r1, r2
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	b292      	uxth	r2, r2
 800868e:	ea6f 0202 	mvn.w	r2, r2
 8008692:	b292      	uxth	r2, r2
 8008694:	400a      	ands	r2, r1
 8008696:	b292      	uxth	r2, r2
 8008698:	801a      	strh	r2, [r3, #0]
 800869a:	e00e      	b.n	80086ba <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 800869c:	f643 4316 	movw	r3, #15382	; 0x3c16
 80086a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80086a4:	f643 4216 	movw	r2, #15382	; 0x3c16
 80086a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80086ac:	8812      	ldrh	r2, [r2, #0]
 80086ae:	b291      	uxth	r1, r2
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	b292      	uxth	r2, r2
 80086b4:	430a      	orrs	r2, r1
 80086b6:	b292      	uxth	r2, r2
 80086b8:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80086ba:	f107 0710 	add.w	r7, r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop

080086c4 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 80086ce:	f04f 0308 	mov.w	r3, #8
 80086d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 80086d4:	f000 f968 	bl	80089a8 <FLASH_WaitForLastOperation>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	2b08      	cmp	r3, #8
 80086e0:	d105      	bne.n	80086ee <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 80086e2:	f643 4315 	movw	r3, #15381	; 0x3c15
 80086e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80086ea:	79fa      	ldrb	r2, [r7, #7]
 80086ec:	701a      	strb	r2, [r3, #0]

  }
}
 80086ee:	f107 0710 	add.w	r7, r7, #16
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop

080086f8 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	4613      	mov	r3, r2
 8008700:	4602      	mov	r2, r0
 8008702:	71fa      	strb	r2, [r7, #7]
 8008704:	460a      	mov	r2, r1
 8008706:	71ba      	strb	r2, [r7, #6]
 8008708:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800870a:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800870e:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8008710:	f04f 0308 	mov.w	r3, #8
 8008714:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008716:	f000 f947 	bl	80089a8 <FLASH_WaitForLastOperation>
 800871a:	4603      	mov	r3, r0
 800871c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	2b08      	cmp	r3, #8
 8008722:	d117      	bne.n	8008754 <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8008724:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008728:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 030f 	and.w	r3, r3, #15
 8008734:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8008736:	f643 4314 	movw	r3, #15380	; 0x3c14
 800873a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800873e:	79b9      	ldrb	r1, [r7, #6]
 8008740:	7bfa      	ldrb	r2, [r7, #15]
 8008742:	430a      	orrs	r2, r1
 8008744:	b2d1      	uxtb	r1, r2
 8008746:	797a      	ldrb	r2, [r7, #5]
 8008748:	430a      	orrs	r2, r1
 800874a:	b2d1      	uxtb	r1, r2
 800874c:	79fa      	ldrb	r2, [r7, #7]
 800874e:	430a      	orrs	r2, r1
 8008750:	b2d2      	uxtb	r2, r2
 8008752:	701a      	strb	r2, [r3, #0]
  }  
}
 8008754:	f107 0710 	add.w	r7, r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	4603      	mov	r3, r0
 8008764:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8008766:	f643 4314 	movw	r3, #15380	; 0x3c14
 800876a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800876e:	f643 4214 	movw	r2, #15380	; 0x3c14
 8008772:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008776:	7812      	ldrb	r2, [r2, #0]
 8008778:	b2d2      	uxtb	r2, r2
 800877a:	f022 020c 	bic.w	r2, r2, #12
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8008782:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008786:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800878a:	f643 4214 	movw	r2, #15380	; 0x3c14
 800878e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	b2d1      	uxtb	r1, r2
 8008796:	79fa      	ldrb	r2, [r7, #7]
 8008798:	430a      	orrs	r2, r1
 800879a:	b2d2      	uxtb	r2, r2
 800879c:	701a      	strb	r2, [r3, #0]

}
 800879e:	f107 070c 	add.w	r7, r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	bc80      	pop	{r7}
 80087a6:	4770      	bx	lr

080087a8 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 80087ae:	f04f 0308 	mov.w	r3, #8
 80087b2:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80087b4:	f643 4314 	movw	r3, #15380	; 0x3c14
 80087b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087bc:	f643 4214 	movw	r2, #15380	; 0x3c14
 80087c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80087c4:	7812      	ldrb	r2, [r2, #0]
 80087c6:	b2d2      	uxtb	r2, r2
 80087c8:	f042 0202 	orr.w	r2, r2, #2
 80087cc:	b2d2      	uxtb	r2, r2
 80087ce:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80087d0:	f000 f8ea 	bl	80089a8 <FLASH_WaitForLastOperation>
 80087d4:	4603      	mov	r3, r0
 80087d6:	71fb      	strb	r3, [r7, #7]

  return status;
 80087d8:	79fb      	ldrb	r3, [r7, #7]
}
 80087da:	4618      	mov	r0, r3
 80087dc:	f107 0708 	add.w	r7, r7, #8
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 80087e4:	b480      	push	{r7}
 80087e6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 80087e8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80087f6:	b2db      	uxtb	r3, r3
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bc80      	pop	{r7}
 80087fe:	4770      	bx	lr

08008800 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8008800:	b480      	push	{r7}
 8008802:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8008804:	f643 4316 	movw	r3, #15382	; 0x3c16
 8008808:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800880c:	881b      	ldrh	r3, [r3, #0]
 800880e:	b29b      	uxth	r3, r3
}
 8008810:	4618      	mov	r0, r3
 8008812:	46bd      	mov	sp, r7
 8008814:	bc80      	pop	{r7}
 8008816:	4770      	bx	lr

08008818 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800881e:	f04f 0300 	mov.w	r3, #0
 8008822:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8008824:	f643 4315 	movw	r3, #15381	; 0x3c15
 8008828:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	2baa      	cmp	r3, #170	; 0xaa
 8008832:	d003      	beq.n	800883c <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8008834:	f04f 0301 	mov.w	r3, #1
 8008838:	71fb      	strb	r3, [r7, #7]
 800883a:	e002      	b.n	8008842 <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8008842:	79fb      	ldrb	r3, [r7, #7]
}
 8008844:	4618      	mov	r0, r3
 8008846:	f107 070c 	add.w	r7, r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8008850:	b480      	push	{r7}
 8008852:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8008854:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008858:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	f003 030c 	and.w	r3, r3, #12
 8008864:	b2db      	uxtb	r3, r3
}
 8008866:	4618      	mov	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr
 800886e:	bf00      	nop

08008870 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	460b      	mov	r3, r1
 800887a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800887c:	78fb      	ldrb	r3, [r7, #3]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00c      	beq.n	800889c <FLASH_ITConfig+0x2c>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8008882:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008886:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800888a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800888e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008892:	6911      	ldr	r1, [r2, #16]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	430a      	orrs	r2, r1
 8008898:	611a      	str	r2, [r3, #16]
 800889a:	e00d      	b.n	80088b8 <FLASH_ITConfig+0x48>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 800889c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80088a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088ac:	6911      	ldr	r1, [r2, #16]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	ea6f 0202 	mvn.w	r2, r2
 80088b4:	400a      	ands	r2, r1
 80088b6:	611a      	str	r2, [r3, #16]
  }
}
 80088b8:	f107 070c 	add.w	r7, r7, #12
 80088bc:	46bd      	mov	sp, r7
 80088be:	bc80      	pop	{r7}
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop

080088c4 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80088cc:	f04f 0300 	mov.w	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 80088d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80088d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80088da:	68da      	ldr	r2, [r3, #12]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d003      	beq.n	80088ec <FLASH_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 80088e4:	f04f 0301 	mov.w	r3, #1
 80088e8:	73fb      	strb	r3, [r7, #15]
 80088ea:	e002      	b.n	80088f2 <FLASH_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 80088ec:	f04f 0300 	mov.w	r3, #0
 80088f0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	f107 0714 	add.w	r7, r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bc80      	pop	{r7}
 80088fe:	4770      	bx	lr

08008900 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8008908:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800890c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	60da      	str	r2, [r3, #12]
}
 8008914:	f107 070c 	add.w	r7, r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop

08008920 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8008926:	f04f 0308 	mov.w	r3, #8
 800892a:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800892c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008930:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 800893e:	f04f 0301 	mov.w	r3, #1
 8008942:	71fb      	strb	r3, [r7, #7]
 8008944:	e029      	b.n	800899a <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8008946:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800894a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f003 0310 	and.w	r3, r3, #16
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8008958:	f04f 0305 	mov.w	r3, #5
 800895c:	71fb      	strb	r3, [r7, #7]
 800895e:	e01c      	b.n	800899a <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8008960:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008964:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800896e:	2b00      	cmp	r3, #0
 8008970:	d003      	beq.n	800897a <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8008972:	f04f 0306 	mov.w	r3, #6
 8008976:	71fb      	strb	r3, [r7, #7]
 8008978:	e00f      	b.n	800899a <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800897a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800897e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f003 0302 	and.w	r3, r3, #2
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 800898c:	f04f 0307 	mov.w	r3, #7
 8008990:	71fb      	strb	r3, [r7, #7]
 8008992:	e002      	b.n	800899a <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 8008994:	f04f 0308 	mov.w	r3, #8
 8008998:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 800899a:	79fb      	ldrb	r3, [r7, #7]
}
 800899c:	4618      	mov	r0, r3
 800899e:	f107 070c 	add.w	r7, r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 80089ae:	f04f 0308 	mov.w	r3, #8
 80089b2:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80089b4:	f7ff ffb4 	bl	8008920 <FLASH_GetStatus>
 80089b8:	4603      	mov	r3, r0
 80089ba:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80089bc:	e003      	b.n	80089c6 <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 80089be:	f7ff ffaf 	bl	8008920 <FLASH_GetStatus>
 80089c2:	4603      	mov	r3, r0
 80089c4:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80089c6:	79fb      	ldrb	r3, [r7, #7]
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d0f7      	beq.n	80089be <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80089ce:	79fb      	ldrb	r3, [r7, #7]
 80089d0:	b2db      	uxtb	r3, r3
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	f107 0708 	add.w	r7, r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d107      	bne.n	80089fa <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 80089ea:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	f243 01db 	movw	r1, #12507	; 0x30db
 80089f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80089f8:	e006      	b.n	8008a08 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 80089fa:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8008a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8008a08:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f103 0201 	add.w	r2, r3, #1
 8008a12:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008a16:	4603      	mov	r3, r0
 8008a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8008a1c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008a20:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008a2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8008a2e:	f107 070c 	add.w	r7, r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bc80      	pop	{r7}
 8008a36:	4770      	bx	lr

08008a38 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8008a38:	b490      	push	{r4, r7}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8008a40:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681a      	ldr	r2, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6859      	ldr	r1, [r3, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8008a50:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8008a56:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8008a5c:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	695b      	ldr	r3, [r3, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8008a62:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	699b      	ldr	r3, [r3, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8008a68:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	69db      	ldr	r3, [r3, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8008a6e:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6a1b      	ldr	r3, [r3, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8008a74:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8008a7a:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8008a80:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8008a86:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8008a8c:	4319      	orrs	r1, r3
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b08      	cmp	r3, #8
 8008a9a:	d10f      	bne.n	8008abc <FSMC_NORSRAMInit+0x84>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8008a9c:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6819      	ldr	r1, [r3, #0]
 8008aac:	4623      	mov	r3, r4
 8008aae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ab2:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8008abc:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f103 0201 	add.w	r2, r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008acc:	6819      	ldr	r1, [r3, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	ea4f 1303 	mov.w	r3, r3, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8008ad8:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8008ae4:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8008af0:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	ea4f 5303 	mov.w	r3, r3, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8008afc:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	ea4f 6303 	mov.w	r3, r3, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8008b08:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	699b      	ldr	r3, [r3, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8008b10:	4319      	orrs	r1, r3
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8008b12:	4603      	mov	r3, r0
 8008b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b20:	d127      	bne.n	8008b72 <FSMC_NORSRAMInit+0x13a>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8008b22:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008b26:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8008b2e:	6879      	ldr	r1, [r7, #4]
 8008b30:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008b32:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008b38:	6849      	ldr	r1, [r1, #4]
 8008b3a:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8008b3e:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008b44:	6889      	ldr	r1, [r1, #8]
 8008b46:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8008b4a:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008b50:	6909      	ldr	r1, [r1, #16]
 8008b52:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8008b56:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8008b58:	6879      	ldr	r1, [r7, #4]
 8008b5a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008b5c:	6949      	ldr	r1, [r1, #20]
 8008b5e:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8008b62:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8008b64:	6879      	ldr	r1, [r7, #4]
 8008b66:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8008b68:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8008b6a:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8008b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008b70:	e009      	b.n	8008b86 <FSMC_NORSRAMInit+0x14e>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8008b72:	f44f 7382 	mov.w	r3, #260	; 0x104
 8008b76:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008b7a:	687a      	ldr	r2, [r7, #4]
 8008b7c:	6812      	ldr	r2, [r2, #0]
 8008b7e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008b82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8008b86:	f107 0708 	add.w	r7, r7, #8
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bc90      	pop	{r4, r7}
 8008b8e:	4770      	bx	lr

08008b90 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f04f 0200 	mov.w	r2, #0
 8008b9e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f04f 0202 	mov.w	r2, #2
 8008ba6:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f04f 0200 	mov.w	r2, #0
 8008bae:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f04f 0200 	mov.w	r2, #0
 8008bb6:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f04f 0200 	mov.w	r2, #0
 8008bbe:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f04f 0200 	mov.w	r2, #0
 8008bd6:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f04f 0200 	mov.w	r2, #0
 8008bde:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008be6:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bee:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f04f 0200 	mov.w	r2, #0
 8008bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f04f 0200 	mov.w	r2, #0
 8008bfe:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c04:	f04f 020f 	mov.w	r2, #15
 8008c08:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0e:	f04f 020f 	mov.w	r2, #15
 8008c12:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8008c1c:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c22:	f04f 020f 	mov.w	r2, #15
 8008c26:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2c:	f04f 020f 	mov.w	r2, #15
 8008c30:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c36:	f04f 020f 	mov.w	r2, #15
 8008c3a:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c40:	f04f 0200 	mov.w	r2, #0
 8008c44:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c4a:	f04f 020f 	mov.w	r2, #15
 8008c4e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c54:	f04f 020f 	mov.w	r2, #15
 8008c58:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8008c62:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c68:	f04f 020f 	mov.w	r2, #15
 8008c6c:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c72:	f04f 020f 	mov.w	r2, #15
 8008c76:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	f04f 020f 	mov.w	r2, #15
 8008c80:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c86:	f04f 0200 	mov.w	r2, #0
 8008c8a:	619a      	str	r2, [r3, #24]
}
 8008c8c:	f107 070c 	add.w	r7, r7, #12
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008ca4:	78fb      	ldrb	r3, [r7, #3]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00d      	beq.n	8008cc6 <FSMC_NORSRAMCmd+0x2e>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8008caa:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8008cae:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb8:	f043 0101 	orr.w	r1, r3, #1
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008cc4:	e00f      	b.n	8008ce6 <FSMC_NORSRAMCmd+0x4e>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8008cc6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8008cca:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cd4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8008cd8:	f2c0 030f 	movt	r3, #15
 8008cdc:	4013      	ands	r3, r2
 8008cde:	6879      	ldr	r1, [r7, #4]
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 8008ce6:	f107 070c 	add.w	r7, r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bc80      	pop	{r7}
 8008cee:	4770      	bx	lr

08008cf0 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b083      	sub	sp, #12
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b10      	cmp	r3, #16
 8008cfc:	d11c      	bne.n	8008d38 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8008cfe:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008d02:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d06:	f04f 0218 	mov.w	r2, #24
 8008d0a:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 8008d0c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008d10:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d14:	f04f 0240 	mov.w	r2, #64	; 0x40
 8008d18:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8008d1a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008d1e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d22:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8008d26:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8008d28:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008d2c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d30:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8008d34:	60da      	str	r2, [r3, #12]
 8008d36:	e01b      	b.n	8008d70 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8008d38:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d3c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d40:	f04f 0218 	mov.w	r2, #24
 8008d44:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8008d46:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d4a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d4e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8008d52:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8008d54:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d58:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d5c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8008d60:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8008d62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d66:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008d6a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8008d6e:	60da      	str	r2, [r3, #12]
  }  
}
 8008d70:	f107 070c 	add.w	r7, r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bc80      	pop	{r7}
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
 8008d8a:	f04f 0300 	mov.w	r3, #0
 8008d8e:	613b      	str	r3, [r7, #16]
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8008d9e:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8008da4:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8008daa:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8008db4:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	699b      	ldr	r3, [r3, #24]
 8008dba:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8008dbe:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8008dc0:	f043 0308 	orr.w	r3, r3, #8
 8008dc4:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8008dd6:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	69db      	ldr	r3, [r3, #28]
 8008ddc:	689b      	ldr	r3, [r3, #8]
 8008dde:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8008de2:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	69db      	ldr	r3, [r3, #28]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8008dee:	4313      	orrs	r3, r2
 8008df0:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8008e02:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a1b      	ldr	r3, [r3, #32]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8008e0e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6a1b      	ldr	r3, [r3, #32]
 8008e14:	68db      	ldr	r3, [r3, #12]
 8008e16:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	2b10      	cmp	r3, #16
 8008e24:	d112      	bne.n	8008e4c <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8008e26:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008e2a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8008e32:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008e36:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008e3a:	693a      	ldr	r2, [r7, #16]
 8008e3c:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 8008e3e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008e42:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	60da      	str	r2, [r3, #12]
 8008e4a:	e011      	b.n	8008e70 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8008e4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008e54:	697a      	ldr	r2, [r7, #20]
 8008e56:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8008e58:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e5c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8008e64:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e68:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	60da      	str	r2, [r3, #12]
  }
}
 8008e70:	f107 071c 	add.w	r7, r7, #28
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bc80      	pop	{r7}
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop

08008e7c <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 8008e7c:	b480      	push	{r7}
 8008e7e:	b083      	sub	sp, #12
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f04f 0210 	mov.w	r2, #16
 8008e8a:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f04f 0200 	mov.w	r2, #0
 8008e92:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f04f 0200 	mov.w	r2, #0
 8008e9a:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f04f 0200 	mov.w	r2, #0
 8008eaa:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f04f 0200 	mov.w	r2, #0
 8008eb2:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f04f 0200 	mov.w	r2, #0
 8008eba:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008ec4:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008ece:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	69db      	ldr	r3, [r3, #28]
 8008ed4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008ed8:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	69db      	ldr	r3, [r3, #28]
 8008ede:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008ee2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008eec:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a1b      	ldr	r3, [r3, #32]
 8008ef2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008ef6:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008f00:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8008f0a:	60da      	str	r2, [r3, #12]
}
 8008f0c:	f107 070c 	add.w	r7, r7, #12
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc80      	pop	{r7}
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop

08008f18 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b083      	sub	sp, #12
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008f24:	78fb      	ldrb	r3, [r7, #3]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d01c      	beq.n	8008f64 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2b10      	cmp	r3, #16
 8008f2e:	d10c      	bne.n	8008f4a <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8008f30:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008f34:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008f38:	f04f 0260 	mov.w	r2, #96	; 0x60
 8008f3c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	f042 0204 	orr.w	r2, r2, #4
 8008f46:	601a      	str	r2, [r3, #0]
 8008f48:	e02e      	b.n	8008fa8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8008f4a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008f4e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008f52:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008f56:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008f5a:	6812      	ldr	r2, [r2, #0]
 8008f5c:	f042 0204 	orr.w	r2, r2, #4
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	e021      	b.n	8008fa8 <FSMC_NANDCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b10      	cmp	r3, #16
 8008f68:	d10f      	bne.n	8008f8a <FSMC_NANDCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8008f6a:	f04f 0260 	mov.w	r2, #96	; 0x60
 8008f6e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008f72:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008f76:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008f7a:	6819      	ldr	r1, [r3, #0]
 8008f7c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8008f80:	f2c0 030f 	movt	r3, #15
 8008f84:	400b      	ands	r3, r1
 8008f86:	6013      	str	r3, [r2, #0]
 8008f88:	e00e      	b.n	8008fa8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8008f8a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008f8e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008f92:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008f96:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008f9a:	6819      	ldr	r1, [r3, #0]
 8008f9c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8008fa0:	f2c0 030f 	movt	r3, #15
 8008fa4:	400b      	ands	r3, r1
 8008fa6:	6013      	str	r3, [r2, #0]
    }
  }
}
 8008fa8:	f107 070c 	add.w	r7, r7, #12
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bc80      	pop	{r7}
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop

08008fb4 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8008fc0:	78fb      	ldrb	r3, [r7, #3]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d01c      	beq.n	8009000 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2b10      	cmp	r3, #16
 8008fca:	d10c      	bne.n	8008fe6 <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8008fcc:	f04f 0360 	mov.w	r3, #96	; 0x60
 8008fd0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008fd4:	f04f 0260 	mov.w	r2, #96	; 0x60
 8008fd8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008fdc:	6812      	ldr	r2, [r2, #0]
 8008fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe2:	601a      	str	r2, [r3, #0]
 8008fe4:	e02e      	b.n	8009044 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8008fe6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008fea:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8008fee:	f04f 0280 	mov.w	r2, #128	; 0x80
 8008ff2:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8008ff6:	6812      	ldr	r2, [r2, #0]
 8008ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ffc:	601a      	str	r2, [r3, #0]
 8008ffe:	e021      	b.n	8009044 <FSMC_NANDECCCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b10      	cmp	r3, #16
 8009004:	d10f      	bne.n	8009026 <FSMC_NANDECCCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8009006:	f04f 0260 	mov.w	r2, #96	; 0x60
 800900a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800900e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009012:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009016:	6819      	ldr	r1, [r3, #0]
 8009018:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800901c:	f2c0 030f 	movt	r3, #15
 8009020:	400b      	ands	r3, r1
 8009022:	6013      	str	r3, [r2, #0]
 8009024:	e00e      	b.n	8009044 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8009026:	f04f 0280 	mov.w	r2, #128	; 0x80
 800902a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800902e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009032:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009036:	6819      	ldr	r1, [r3, #0]
 8009038:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800903c:	f2c0 030f 	movt	r3, #15
 8009040:	400b      	ands	r3, r1
 8009042:	6013      	str	r3, [r2, #0]
    }
  }
}
 8009044:	f107 070c 	add.w	r7, r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8009058:	f04f 0300 	mov.w	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b10      	cmp	r3, #16
 8009062:	d106      	bne.n	8009072 <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8009064:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009068:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	60fb      	str	r3, [r7, #12]
 8009070:	e005      	b.n	800907e <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8009072:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009076:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 800907e:	68fb      	ldr	r3, [r7, #12]
}
 8009080:	4618      	mov	r0, r3
 8009082:	f107 0714 	add.w	r7, r7, #20
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr

0800908c <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8009090:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009094:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009098:	f04f 0218 	mov.w	r2, #24
 800909c:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 800909e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80090a2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 80090ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80090b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80090b4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80090b8:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 80090ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80090be:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80090c2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80090c6:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 80090c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80090cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80090d0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80090d4:	611a      	str	r2, [r3, #16]
}
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bc80      	pop	{r7}
 80090da:	4770      	bx	lr

080090dc <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 80090e4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80090e8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	6852      	ldr	r2, [r2, #4]
 80090f4:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 80090f8:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	6892      	ldr	r2, [r2, #8]
 80090fe:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8009102:	430a      	orrs	r2, r1
 8009104:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8009108:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800910a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800910e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009112:	687a      	ldr	r2, [r7, #4]
 8009114:	68d2      	ldr	r2, [r2, #12]
 8009116:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009118:	687a      	ldr	r2, [r7, #4]
 800911a:	68d2      	ldr	r2, [r2, #12]
 800911c:	6852      	ldr	r2, [r2, #4]
 800911e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009122:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	68d2      	ldr	r2, [r2, #12]
 8009128:	6892      	ldr	r2, [r2, #8]
 800912a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800912e:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	68d2      	ldr	r2, [r2, #12]
 8009134:	68d2      	ldr	r2, [r2, #12]
 8009136:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800913a:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800913c:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800913e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009142:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	6912      	ldr	r2, [r2, #16]
 800914a:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	6912      	ldr	r2, [r2, #16]
 8009150:	6852      	ldr	r2, [r2, #4]
 8009152:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009156:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	6912      	ldr	r2, [r2, #16]
 800915c:	6892      	ldr	r2, [r2, #8]
 800915e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009162:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8009164:	687a      	ldr	r2, [r7, #4]
 8009166:	6912      	ldr	r2, [r2, #16]
 8009168:	68d2      	ldr	r2, [r2, #12]
 800916a:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800916e:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009170:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8009172:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009176:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	6952      	ldr	r2, [r2, #20]
 800917e:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	6952      	ldr	r2, [r2, #20]
 8009184:	6852      	ldr	r2, [r2, #4]
 8009186:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800918a:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6952      	ldr	r2, [r2, #20]
 8009190:	6892      	ldr	r2, [r2, #8]
 8009192:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009196:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8009198:	687a      	ldr	r2, [r7, #4]
 800919a:	6952      	ldr	r2, [r2, #20]
 800919c:	68d2      	ldr	r2, [r2, #12]
 800919e:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80091a2:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80091a4:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 80091a6:	f107 070c 	add.w	r7, r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr

080091b0 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b083      	sub	sp, #12
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f04f 0200 	mov.w	r2, #0
 80091be:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f04f 0200 	mov.w	r2, #0
 80091ce:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80091d8:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80091e2:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80091ec:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80091f6:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009200:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800920a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	691b      	ldr	r3, [r3, #16]
 8009210:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009214:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800921e:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	695b      	ldr	r3, [r3, #20]
 8009224:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009228:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009232:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800923c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009246:	60da      	str	r2, [r3, #12]
}
 8009248:	f107 070c 	add.w	r7, r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	bc80      	pop	{r7}
 8009250:	4770      	bx	lr
 8009252:	bf00      	nop

08009254 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800925e:	79fb      	ldrb	r3, [r7, #7]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d00c      	beq.n	800927e <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8009264:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009268:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800926c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009270:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009274:	6812      	ldr	r2, [r2, #0]
 8009276:	f042 0204 	orr.w	r2, r2, #4
 800927a:	601a      	str	r2, [r3, #0]
 800927c:	e00e      	b.n	800929c <FSMC_PCCARDCmd+0x48>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800927e:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009282:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009286:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800928a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800928e:	6819      	ldr	r1, [r3, #0]
 8009290:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8009294:	f2c0 030f 	movt	r3, #15
 8009298:	400b      	ands	r3, r1
 800929a:	6013      	str	r3, [r2, #0]
  }
}
 800929c:	f107 070c 	add.w	r7, r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop

080092a8 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	4613      	mov	r3, r2
 80092b4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d02d      	beq.n	8009318 <FSMC_ITConfig+0x70>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2b10      	cmp	r3, #16
 80092c0:	d10c      	bne.n	80092dc <FSMC_ITConfig+0x34>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 80092c2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80092c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80092ca:	f04f 0260 	mov.w	r2, #96	; 0x60
 80092ce:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80092d2:	6851      	ldr	r1, [r2, #4]
 80092d4:	68ba      	ldr	r2, [r7, #8]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	605a      	str	r2, [r3, #4]
 80092da:	e050      	b.n	800937e <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e2:	d10c      	bne.n	80092fe <FSMC_ITConfig+0x56>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 80092e4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80092e8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80092ec:	f04f 0280 	mov.w	r2, #128	; 0x80
 80092f0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80092f4:	6851      	ldr	r1, [r2, #4]
 80092f6:	68ba      	ldr	r2, [r7, #8]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	605a      	str	r2, [r3, #4]
 80092fc:	e03f      	b.n	800937e <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 80092fe:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009302:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009306:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800930a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800930e:	6851      	ldr	r1, [r2, #4]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	430a      	orrs	r2, r1
 8009314:	605a      	str	r2, [r3, #4]
 8009316:	e032      	b.n	800937e <FSMC_ITConfig+0xd6>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2b10      	cmp	r3, #16
 800931c:	d10e      	bne.n	800933c <FSMC_ITConfig+0x94>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 800931e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009322:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009326:	f04f 0260 	mov.w	r2, #96	; 0x60
 800932a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800932e:	6851      	ldr	r1, [r2, #4]
 8009330:	68ba      	ldr	r2, [r7, #8]
 8009332:	ea6f 0202 	mvn.w	r2, r2
 8009336:	400a      	ands	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
 800933a:	e020      	b.n	800937e <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009342:	d10e      	bne.n	8009362 <FSMC_ITConfig+0xba>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8009344:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009348:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800934c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009350:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009354:	6851      	ldr	r1, [r2, #4]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	ea6f 0202 	mvn.w	r2, r2
 800935c:	400a      	ands	r2, r1
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	e00d      	b.n	800937e <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8009362:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009366:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800936a:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800936e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009372:	6851      	ldr	r1, [r2, #4]
 8009374:	68ba      	ldr	r2, [r7, #8]
 8009376:	ea6f 0202 	mvn.w	r2, r2
 800937a:	400a      	ands	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800937e:	f107 0714 	add.w	r7, r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr

08009388 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8009392:	f04f 0300 	mov.w	r3, #0
 8009396:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2b10      	cmp	r3, #16
 80093a2:	d106      	bne.n	80093b2 <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 80093a4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80093a8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	e010      	b.n	80093d4 <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b8:	d106      	bne.n	80093c8 <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 80093ba:	f04f 0380 	mov.w	r3, #128	; 0x80
 80093be:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	60bb      	str	r3, [r7, #8]
 80093c6:	e005      	b.n	80093d4 <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80093c8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80093cc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80093d0:	685b      	ldr	r3, [r3, #4]
 80093d2:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	4013      	ands	r3, r2
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d003      	beq.n	80093e6 <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80093de:	f04f 0301 	mov.w	r3, #1
 80093e2:	73fb      	strb	r3, [r7, #15]
 80093e4:	e002      	b.n	80093ec <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 80093e6:	f04f 0300 	mov.w	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	f107 0714 	add.w	r7, r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bc80      	pop	{r7}
 80093f8:	4770      	bx	lr
 80093fa:	bf00      	nop

080093fc <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b10      	cmp	r3, #16
 800940a:	d10e      	bne.n	800942a <FSMC_ClearFlag+0x2e>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800940c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009410:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009414:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009418:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800941c:	6851      	ldr	r1, [r2, #4]
 800941e:	683a      	ldr	r2, [r7, #0]
 8009420:	ea6f 0202 	mvn.w	r2, r2
 8009424:	400a      	ands	r2, r1
 8009426:	605a      	str	r2, [r3, #4]
 8009428:	e020      	b.n	800946c <FSMC_ClearFlag+0x70>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009430:	d10e      	bne.n	8009450 <FSMC_ClearFlag+0x54>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8009432:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009436:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800943a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800943e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009442:	6851      	ldr	r1, [r2, #4]
 8009444:	683a      	ldr	r2, [r7, #0]
 8009446:	ea6f 0202 	mvn.w	r2, r2
 800944a:	400a      	ands	r2, r1
 800944c:	605a      	str	r2, [r3, #4]
 800944e:	e00d      	b.n	800946c <FSMC_ClearFlag+0x70>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8009450:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009454:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009458:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800945c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009460:	6851      	ldr	r1, [r2, #4]
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	ea6f 0202 	mvn.w	r2, r2
 8009468:	400a      	ands	r2, r1
 800946a:	605a      	str	r2, [r3, #4]
  }
}
 800946c:	f107 070c 	add.w	r7, r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	bc80      	pop	{r7}
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop

08009478 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8009482:	f04f 0300 	mov.w	r3, #0
 8009486:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8009488:	f04f 0300 	mov.w	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	60fb      	str	r3, [r7, #12]
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b10      	cmp	r3, #16
 800949e:	d106      	bne.n	80094ae <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 80094a0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80094a4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	613b      	str	r3, [r7, #16]
 80094ac:	e010      	b.n	80094d0 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b4:	d106      	bne.n	80094c4 <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 80094b6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80094ba:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	613b      	str	r3, [r7, #16]
 80094c2:	e005      	b.n	80094d0 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80094c4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80094c8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	4013      	ands	r3, r2
 80094d6:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	4013      	ands	r3, r2
 80094e2:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d006      	beq.n	80094f8 <FSMC_GetITStatus+0x80>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d003      	beq.n	80094f8 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 80094f0:	f04f 0301 	mov.w	r3, #1
 80094f4:	75fb      	strb	r3, [r7, #23]
 80094f6:	e002      	b.n	80094fe <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 80094f8:	f04f 0300 	mov.w	r3, #0
 80094fc:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009500:	4618      	mov	r0, r3
 8009502:	f107 071c 	add.w	r7, r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	bc80      	pop	{r7}
 800950a:	4770      	bx	lr

0800950c <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800950c:	b480      	push	{r7}
 800950e:	b083      	sub	sp, #12
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b10      	cmp	r3, #16
 800951a:	d110      	bne.n	800953e <FSMC_ClearITPendingBit+0x32>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800951c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009520:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009524:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009528:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800952c:	6851      	ldr	r1, [r2, #4]
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8009534:	ea6f 0202 	mvn.w	r2, r2
 8009538:	400a      	ands	r2, r1
 800953a:	605a      	str	r2, [r3, #4]
 800953c:	e024      	b.n	8009588 <FSMC_ClearITPendingBit+0x7c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009544:	d110      	bne.n	8009568 <FSMC_ClearITPendingBit+0x5c>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8009546:	f04f 0380 	mov.w	r3, #128	; 0x80
 800954a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800954e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009552:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009556:	6851      	ldr	r1, [r2, #4]
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800955e:	ea6f 0202 	mvn.w	r2, r2
 8009562:	400a      	ands	r2, r1
 8009564:	605a      	str	r2, [r3, #4]
 8009566:	e00f      	b.n	8009588 <FSMC_ClearITPendingBit+0x7c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8009568:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800956c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009570:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009574:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009578:	6851      	ldr	r1, [r2, #4]
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8009580:	ea6f 0202 	mvn.w	r2, r2
 8009584:	400a      	ands	r2, r1
 8009586:	605a      	str	r2, [r3, #4]
  }
}
 8009588:	f107 070c 	add.w	r7, r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	bc80      	pop	{r7}
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop

08009594 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d10c      	bne.n	80095c4 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80095aa:	f04f 0001 	mov.w	r0, #1
 80095ae:	f04f 0101 	mov.w	r1, #1
 80095b2:	f002 fbc3 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80095b6:	f04f 0001 	mov.w	r0, #1
 80095ba:	f04f 0100 	mov.w	r1, #0
 80095be:	f002 fbbd 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 80095c2:	e09e      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80095ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d10c      	bne.n	80095ec <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80095d2:	f04f 0002 	mov.w	r0, #2
 80095d6:	f04f 0101 	mov.w	r1, #1
 80095da:	f002 fbaf 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80095de:	f04f 0002 	mov.w	r0, #2
 80095e2:	f04f 0100 	mov.w	r1, #0
 80095e6:	f002 fba9 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 80095ea:	e08a      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d10c      	bne.n	8009614 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 80095fa:	f04f 0004 	mov.w	r0, #4
 80095fe:	f04f 0101 	mov.w	r1, #1
 8009602:	f002 fb9b 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8009606:	f04f 0004 	mov.w	r0, #4
 800960a:	f04f 0100 	mov.w	r1, #0
 800960e:	f002 fb95 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 8009612:	e076      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800961a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800961e:	429a      	cmp	r2, r3
 8009620:	d10c      	bne.n	800963c <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8009622:	f04f 0008 	mov.w	r0, #8
 8009626:	f04f 0101 	mov.w	r1, #1
 800962a:	f002 fb87 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800962e:	f04f 0008 	mov.w	r0, #8
 8009632:	f04f 0100 	mov.w	r1, #0
 8009636:	f002 fb81 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 800963a:	e062      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009642:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009646:	429a      	cmp	r2, r3
 8009648:	d10c      	bne.n	8009664 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800964a:	f04f 0010 	mov.w	r0, #16
 800964e:	f04f 0101 	mov.w	r1, #1
 8009652:	f002 fb73 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8009656:	f04f 0010 	mov.w	r0, #16
 800965a:	f04f 0100 	mov.w	r1, #0
 800965e:	f002 fb6d 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 8009662:	e04e      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800966a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800966e:	429a      	cmp	r2, r3
 8009670:	d10c      	bne.n	800968c <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8009672:	f04f 0020 	mov.w	r0, #32
 8009676:	f04f 0101 	mov.w	r1, #1
 800967a:	f002 fb5f 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800967e:	f04f 0020 	mov.w	r0, #32
 8009682:	f04f 0100 	mov.w	r1, #0
 8009686:	f002 fb59 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 800968a:	e03a      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 800968c:	687a      	ldr	r2, [r7, #4]
 800968e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009692:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009696:	429a      	cmp	r2, r3
 8009698:	d10c      	bne.n	80096b4 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800969a:	f04f 0040 	mov.w	r0, #64	; 0x40
 800969e:	f04f 0101 	mov.w	r1, #1
 80096a2:	f002 fb4b 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80096a6:	f04f 0040 	mov.w	r0, #64	; 0x40
 80096aa:	f04f 0100 	mov.w	r1, #0
 80096ae:	f002 fb45 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 80096b2:	e026      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80096ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096be:	429a      	cmp	r2, r3
 80096c0:	d10c      	bne.n	80096dc <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80096c2:	f04f 0080 	mov.w	r0, #128	; 0x80
 80096c6:	f04f 0101 	mov.w	r1, #1
 80096ca:	f002 fb37 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80096ce:	f04f 0080 	mov.w	r0, #128	; 0x80
 80096d2:	f04f 0100 	mov.w	r1, #0
 80096d6:	f002 fb31 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
 80096da:	e012      	b.n	8009702 <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80096e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d10b      	bne.n	8009702 <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80096ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80096ee:	f04f 0101 	mov.w	r1, #1
 80096f2:	f002 fb23 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 80096f6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80096fa:	f04f 0100 	mov.w	r1, #0
 80096fe:	f002 fb1d 	bl	800bd3c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8009702:	f107 0708 	add.w	r7, r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop

0800970c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8009716:	f04f 0300 	mov.w	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	f04f 0300 	mov.w	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	f04f 0300 	mov.w	r3, #0
 8009726:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009728:	f04f 0300 	mov.w	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
 800972e:	e086      	b.n	800983e <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f04f 0201 	mov.w	r2, #1
 8009736:	fa02 f303 	lsl.w	r3, r2, r3
 800973a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	4013      	ands	r3, r2
 8009744:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	429a      	cmp	r2, r3
 800974c:	d173      	bne.n	8009836 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681a      	ldr	r2, [r3, #0]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009758:	f04f 0103 	mov.w	r1, #3
 800975c:	fa01 f303 	lsl.w	r3, r1, r3
 8009760:	ea6f 0303 	mvn.w	r3, r3
 8009764:	401a      	ands	r2, r3
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	791b      	ldrb	r3, [r3, #4]
 8009772:	4619      	mov	r1, r3
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800977a:	fa01 f303 	lsl.w	r3, r1, r3
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	791b      	ldrb	r3, [r3, #4]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d003      	beq.n	8009794 <GPIO_Init+0x88>
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	791b      	ldrb	r3, [r3, #4]
 8009790:	2b02      	cmp	r3, #2
 8009792:	d134      	bne.n	80097fe <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	689a      	ldr	r2, [r3, #8]
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800979e:	f04f 0103 	mov.w	r1, #3
 80097a2:	fa01 f303 	lsl.w	r3, r1, r3
 80097a6:	ea6f 0303 	mvn.w	r3, r3
 80097aa:	401a      	ands	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	689a      	ldr	r2, [r3, #8]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	795b      	ldrb	r3, [r3, #5]
 80097b8:	4619      	mov	r1, r3
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80097c0:	fa01 f303 	lsl.w	r3, r1, r3
 80097c4:	431a      	orrs	r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685a      	ldr	r2, [r3, #4]
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	f04f 0101 	mov.w	r1, #1
 80097d6:	fa01 f303 	lsl.w	r3, r1, r3
 80097da:	ea6f 0303 	mvn.w	r3, r3
 80097de:	401a      	ands	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	799b      	ldrb	r3, [r3, #6]
 80097ec:	4619      	mov	r1, r3
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	fa01 f303 	lsl.w	r3, r1, r3
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	431a      	orrs	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68da      	ldr	r2, [r3, #12]
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	b29b      	uxth	r3, r3
 8009806:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800980a:	f04f 0103 	mov.w	r1, #3
 800980e:	fa01 f303 	lsl.w	r3, r1, r3
 8009812:	ea6f 0303 	mvn.w	r3, r3
 8009816:	401a      	ands	r2, r3
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68da      	ldr	r2, [r3, #12]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	79db      	ldrb	r3, [r3, #7]
 8009824:	4619      	mov	r1, r3
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800982c:	fa01 f303 	lsl.w	r3, r1, r3
 8009830:	431a      	orrs	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	f103 0301 	add.w	r3, r3, #1
 800983c:	617b      	str	r3, [r7, #20]
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2b0f      	cmp	r3, #15
 8009842:	f67f af75 	bls.w	8009730 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8009846:	f107 071c 	add.w	r7, r7, #28
 800984a:	46bd      	mov	sp, r7
 800984c:	bc80      	pop	{r7}
 800984e:	4770      	bx	lr

08009850 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800985e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f04f 0200 	mov.w	r2, #0
 8009866:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f04f 0200 	mov.w	r2, #0
 800986e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f04f 0200 	mov.w	r2, #0
 8009876:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	71da      	strb	r2, [r3, #7]
}
 8009880:	f107 070c 	add.w	r7, r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	bc80      	pop	{r7}
 8009888:	4770      	bx	lr
 800988a:	bf00      	nop

0800988c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8009898:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800989c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800989e:	887a      	ldrh	r2, [r7, #2]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80098a6:	68fa      	ldr	r2, [r7, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80098ac:	887a      	ldrh	r2, [r7, #2]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80098b2:	68fa      	ldr	r2, [r7, #12]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	69db      	ldr	r3, [r3, #28]
 80098bc:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	69db      	ldr	r3, [r3, #28]
 80098c2:	60fb      	str	r3, [r7, #12]
}
 80098c4:	f107 0714 	add.w	r7, r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bc80      	pop	{r7}
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop

080098d0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	460b      	mov	r3, r1
 80098da:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80098dc:	f04f 0300 	mov.w	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691a      	ldr	r2, [r3, #16]
 80098e6:	887b      	ldrh	r3, [r7, #2]
 80098e8:	4013      	ands	r3, r2
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d003      	beq.n	80098f6 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80098ee:	f04f 0301 	mov.w	r3, #1
 80098f2:	73fb      	strb	r3, [r7, #15]
 80098f4:	e002      	b.n	80098fc <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80098f6:	f04f 0300 	mov.w	r3, #0
 80098fa:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fe:	4618      	mov	r0, r3
 8009900:	f107 0714 	add.w	r7, r7, #20
 8009904:	46bd      	mov	sp, r7
 8009906:	bc80      	pop	{r7}
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop

0800990c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800990c:	b480      	push	{r7}
 800990e:	b083      	sub	sp, #12
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
 8009918:	b29b      	uxth	r3, r3
}
 800991a:	4618      	mov	r0, r3
 800991c:	f107 070c 	add.w	r7, r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	bc80      	pop	{r7}
 8009924:	4770      	bx	lr
 8009926:	bf00      	nop

08009928 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695a      	ldr	r2, [r3, #20]
 800993e:	887b      	ldrh	r3, [r7, #2]
 8009940:	4013      	ands	r3, r2
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8009946:	f04f 0301 	mov.w	r3, #1
 800994a:	73fb      	strb	r3, [r7, #15]
 800994c:	e002      	b.n	8009954 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800994e:	f04f 0300 	mov.w	r3, #0
 8009952:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009954:	7bfb      	ldrb	r3, [r7, #15]
}
 8009956:	4618      	mov	r0, r3
 8009958:	f107 0714 	add.w	r7, r7, #20
 800995c:	46bd      	mov	sp, r7
 800995e:	bc80      	pop	{r7}
 8009960:	4770      	bx	lr
 8009962:	bf00      	nop

08009964 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8009964:	b480      	push	{r7}
 8009966:	b083      	sub	sp, #12
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	695b      	ldr	r3, [r3, #20]
 8009970:	b29b      	uxth	r3, r3
}
 8009972:	4618      	mov	r0, r3
 8009974:	f107 070c 	add.w	r7, r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop

08009980 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	460b      	mov	r3, r1
 800998a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	887a      	ldrh	r2, [r7, #2]
 8009990:	831a      	strh	r2, [r3, #24]
}
 8009992:	f107 070c 	add.w	r7, r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	460b      	mov	r3, r1
 80099a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	887a      	ldrh	r2, [r7, #2]
 80099ac:	835a      	strh	r2, [r3, #26]
}
 80099ae:	f107 070c 	add.w	r7, r7, #12
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc80      	pop	{r7}
 80099b6:	4770      	bx	lr

080099b8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	460a      	mov	r2, r1
 80099c4:	807a      	strh	r2, [r7, #2]
 80099c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80099c8:	787b      	ldrb	r3, [r7, #1]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d003      	beq.n	80099d6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	887a      	ldrh	r2, [r7, #2]
 80099d2:	831a      	strh	r2, [r3, #24]
 80099d4:	e002      	b.n	80099dc <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	887a      	ldrh	r2, [r7, #2]
 80099da:	835a      	strh	r2, [r3, #26]
  }
}
 80099dc:	f107 070c 	add.w	r7, r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop

080099e8 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	460b      	mov	r3, r1
 80099f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 80099f4:	887a      	ldrh	r2, [r7, #2]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	615a      	str	r2, [r3, #20]
}
 80099fa:	f107 070c 	add.w	r7, r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bc80      	pop	{r7}
 8009a02:	4770      	bx	lr

08009a04 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	695a      	ldr	r2, [r3, #20]
 8009a14:	887b      	ldrh	r3, [r7, #2]
 8009a16:	405a      	eors	r2, r3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	615a      	str	r2, [r3, #20]
}
 8009a1c:	f107 070c 	add.w	r7, r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bc80      	pop	{r7}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop

08009a28 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	4613      	mov	r3, r2
 8009a32:	460a      	mov	r2, r1
 8009a34:	807a      	strh	r2, [r7, #2]
 8009a36:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8009a38:	f04f 0300 	mov.w	r3, #0
 8009a3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8009a3e:	f04f 0300 	mov.w	r3, #0
 8009a42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009a44:	787a      	ldrb	r2, [r7, #1]
 8009a46:	887b      	ldrh	r3, [r7, #2]
 8009a48:	f003 0307 	and.w	r3, r3, #7
 8009a4c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009a50:	fa02 f303 	lsl.w	r3, r2, r3
 8009a54:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8009a56:	887b      	ldrh	r3, [r7, #2]
 8009a58:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	461a      	mov	r2, r3
 8009a60:	887b      	ldrh	r3, [r7, #2]
 8009a62:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	4619      	mov	r1, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f101 0108 	add.w	r1, r1, #8
 8009a70:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8009a74:	887b      	ldrh	r3, [r7, #2]
 8009a76:	f003 0307 	and.w	r3, r3, #7
 8009a7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009a7e:	f04f 000f 	mov.w	r0, #15
 8009a82:	fa00 f303 	lsl.w	r3, r0, r3
 8009a86:	ea6f 0303 	mvn.w	r3, r3
 8009a8a:	4019      	ands	r1, r3
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f102 0208 	add.w	r2, r2, #8
 8009a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8009a96:	887b      	ldrh	r3, [r7, #2]
 8009a98:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f102 0208 	add.w	r2, r2, #8
 8009aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	4313      	orrs	r3, r2
 8009aae:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8009ab0:	887b      	ldrh	r3, [r7, #2]
 8009ab2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	461a      	mov	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f102 0208 	add.w	r2, r2, #8
 8009ac0:	68b9      	ldr	r1, [r7, #8]
 8009ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8009ac6:	f107 0714 	add.w	r7, r7, #20
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bc80      	pop	{r7}
 8009ace:	4770      	bx	lr

08009ad0 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 8009ad4:	f04f 0020 	mov.w	r0, #32
 8009ad8:	f04f 0101 	mov.w	r1, #1
 8009adc:	f002 f958 	bl	800bd90 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 8009ae0:	f04f 0020 	mov.w	r0, #32
 8009ae4:	f04f 0100 	mov.w	r1, #0
 8009ae8:	f002 f952 	bl	800bd90 <RCC_AHB2PeriphResetCmd>
}
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop

08009af0 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8009af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009afc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b04:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009b08:	6812      	ldr	r2, [r2, #0]
 8009b0a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009b0e:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8009b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b14:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009b18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b1c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009b20:	6811      	ldr	r1, [r2, #0]
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8009b2a:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 8009b30:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8009b32:	430a      	orrs	r2, r1
 8009b34:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2b40      	cmp	r3, #64	; 0x40
 8009b3c:	d118      	bne.n	8009b70 <HASH_Init+0x80>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 8009b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b42:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009b46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b4a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009b54:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8009b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b5a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b62:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009b66:	6811      	ldr	r1, [r2, #0]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	68d2      	ldr	r2, [r2, #12]
 8009b6c:	430a      	orrs	r2, r1
 8009b6e:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8009b70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b74:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009b78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009b7c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009b80:	6812      	ldr	r2, [r2, #0]
 8009b82:	f042 0204 	orr.w	r2, r2, #4
 8009b86:	601a      	str	r2, [r3, #0]
}
 8009b88:	f107 070c 	add.w	r7, r7, #12
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bc80      	pop	{r7}
 8009b90:	4770      	bx	lr
 8009b92:	bf00      	nop

08009b94 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b083      	sub	sp, #12
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f04f 0200 	mov.w	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f04f 0200 	mov.w	r2, #0
 8009baa:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f04f 0200 	mov.w	r2, #0
 8009bb2:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	f04f 0200 	mov.w	r2, #0
 8009bba:	60da      	str	r2, [r3, #12]
}
 8009bbc:	f107 070c 	add.w	r7, r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bc80      	pop	{r7}
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop

08009bc8 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 8009bcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bd0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009bd8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009bdc:	6812      	ldr	r2, [r2, #0]
 8009bde:	f042 0204 	orr.w	r2, r2, #4
 8009be2:	601a      	str	r2, [r3, #0]
}
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bc80      	pop	{r7}
 8009be8:	4770      	bx	lr
 8009bea:	bf00      	nop

08009bec <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8009bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bfa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009bfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c02:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009c06:	6892      	ldr	r2, [r2, #8]
 8009c08:	f022 021f 	bic.w	r2, r2, #31
 8009c0c:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 8009c0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c12:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c1a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009c1e:	6891      	ldr	r1, [r2, #8]
 8009c20:	88fa      	ldrh	r2, [r7, #6]
 8009c22:	430a      	orrs	r2, r1
 8009c24:	609a      	str	r2, [r3, #8]
}
 8009c26:	f107 070c 	add.w	r7, r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bc80      	pop	{r7}
 8009c2e:	4770      	bx	lr

08009c30 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8009c38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c3c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009c40:	687a      	ldr	r2, [r7, #4]
 8009c42:	605a      	str	r2, [r3, #4]
}
 8009c44:	f107 070c 	add.w	r7, r7, #12
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bc80      	pop	{r7}
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop

08009c50 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8009c54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c58:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009c62:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8009c66:	b2db      	uxtb	r3, r3
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bc80      	pop	{r7}
 8009c6e:	4770      	bx	lr

08009c70 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8009c78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8009c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009c8e:	691a      	ldr	r2, [r3, #16]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 8009c94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c98:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009c9c:	695a      	ldr	r2, [r3, #20]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 8009ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ca6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 8009cb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cb4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009cb8:	69da      	ldr	r2, [r3, #28]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	611a      	str	r2, [r3, #16]
}
 8009cbe:	f107 070c 	add.w	r7, r7, #12
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bc80      	pop	{r7}
 8009cc6:	4770      	bx	lr

08009cc8 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 8009ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cd0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cd8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009cdc:	6892      	ldr	r2, [r2, #8]
 8009cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce2:	609a      	str	r2, [r3, #8]
}
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 8009cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfe:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d02:	6a1a      	ldr	r2, [r3, #32]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 8009d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d0c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d10:	689a      	ldr	r2, [r3, #8]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 8009d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d1a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	73fb      	strb	r3, [r7, #15]
 8009d2a:	e014      	b.n	8009d56 <HASH_SaveContext+0x6a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8009d2c:	7bf8      	ldrb	r0, [r7, #15]
 8009d2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d32:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d36:	7bfa      	ldrb	r2, [r7, #15]
 8009d38:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8009d3c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d40:	6879      	ldr	r1, [r7, #4]
 8009d42:	f100 0302 	add.w	r3, r0, #2
 8009d46:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8009d4a:	18cb      	adds	r3, r1, r3
 8009d4c:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 8009d4e:	7bfb      	ldrb	r3, [r7, #15]
 8009d50:	f103 0301 	add.w	r3, r3, #1
 8009d54:	73fb      	strb	r3, [r7, #15]
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b32      	cmp	r3, #50	; 0x32
 8009d5a:	d9e7      	bls.n	8009d2c <HASH_SaveContext+0x40>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8009d5c:	f107 0714 	add.w	r7, r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop

08009d68 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8009d76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d7a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	6812      	ldr	r2, [r2, #0]
 8009d82:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8009d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d88:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	6852      	ldr	r2, [r2, #4]
 8009d90:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 8009d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d96:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	6892      	ldr	r2, [r2, #8]
 8009d9e:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8009da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009da8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009dac:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009db0:	6812      	ldr	r2, [r2, #0]
 8009db2:	f042 0204 	orr.w	r2, r2, #4
 8009db6:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8009db8:	f04f 0300 	mov.w	r3, #0
 8009dbc:	73fb      	strb	r3, [r7, #15]
 8009dbe:	e014      	b.n	8009dea <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8009dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009dc8:	7bf8      	ldrb	r0, [r7, #15]
 8009dca:	7bfa      	ldrb	r2, [r7, #15]
 8009dcc:	6879      	ldr	r1, [r7, #4]
 8009dce:	f102 0202 	add.w	r2, r2, #2
 8009dd2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8009dd6:	188a      	adds	r2, r1, r2
 8009dd8:	6851      	ldr	r1, [r2, #4]
 8009dda:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 8009dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	f103 0301 	add.w	r3, r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]
 8009dea:	7bfb      	ldrb	r3, [r7, #15]
 8009dec:	2b32      	cmp	r3, #50	; 0x32
 8009dee:	d9e7      	bls.n	8009dc0 <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 8009df0:	f107 0714 	add.w	r7, r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bc80      	pop	{r7}
 8009df8:	4770      	bx	lr
 8009dfa:	bf00      	nop

08009dfc <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b083      	sub	sp, #12
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	4603      	mov	r3, r0
 8009e04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e06:	79fb      	ldrb	r3, [r7, #7]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d00c      	beq.n	8009e26 <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8009e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e10:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e18:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009e1c:	6812      	ldr	r2, [r2, #0]
 8009e1e:	f042 0208 	orr.w	r2, r2, #8
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	e00b      	b.n	8009e3e <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8009e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e32:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009e36:	6812      	ldr	r2, [r2, #0]
 8009e38:	f022 0208 	bic.w	r2, r2, #8
 8009e3c:	601a      	str	r2, [r3, #0]
  }
}
 8009e3e:	f107 070c 	add.w	r7, r7, #12
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bc80      	pop	{r7}
 8009e46:	4770      	bx	lr

08009e48 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	4602      	mov	r2, r0
 8009e50:	460b      	mov	r3, r1
 8009e52:	71fa      	strb	r2, [r7, #7]
 8009e54:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009e56:	79bb      	ldrb	r3, [r7, #6]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00c      	beq.n	8009e76 <HASH_ITConfig+0x2e>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8009e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e60:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e68:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009e6c:	6a11      	ldr	r1, [r2, #32]
 8009e6e:	79fa      	ldrb	r2, [r7, #7]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	621a      	str	r2, [r3, #32]
 8009e74:	e00e      	b.n	8009e94 <HASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8009e76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e7a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e82:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009e86:	6a11      	ldr	r1, [r2, #32]
 8009e88:	79fa      	ldrb	r2, [r7, #7]
 8009e8a:	ea6f 0202 	mvn.w	r2, r2
 8009e8e:	b2d2      	uxtb	r2, r2
 8009e90:	400a      	ands	r2, r1
 8009e92:	621a      	str	r2, [r3, #32]
  }
}
 8009e94:	f107 070c 	add.w	r7, r7, #12
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bc80      	pop	{r7}
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop

08009ea0 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b085      	sub	sp, #20
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8009eb6:	88fb      	ldrh	r3, [r7, #6]
 8009eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d006      	beq.n	8009ece <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 8009ec0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ec4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60bb      	str	r3, [r7, #8]
 8009ecc:	e005      	b.n	8009eda <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 8009ece:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ed2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed8:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 8009eda:	88fa      	ldrh	r2, [r7, #6]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	4013      	ands	r3, r2
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d003      	beq.n	8009eec <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 8009ee4:	f04f 0301 	mov.w	r3, #1
 8009ee8:	73fb      	strb	r3, [r7, #15]
 8009eea:	e002      	b.n	8009ef2 <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 8009eec:	f04f 0300 	mov.w	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f107 0714 	add.w	r7, r7, #20
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bc80      	pop	{r7}
 8009efe:	4770      	bx	lr

08009f00 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	4603      	mov	r3, r0
 8009f08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 8009f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f0e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f12:	88fa      	ldrh	r2, [r7, #6]
 8009f14:	ea6f 0202 	mvn.w	r2, r2
 8009f18:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009f1a:	f107 070c 	add.w	r7, r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bc80      	pop	{r7}
 8009f22:	4770      	bx	lr

08009f24 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b085      	sub	sp, #20
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8009f2e:	f04f 0300 	mov.w	r3, #0
 8009f32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8009f34:	f04f 0300 	mov.w	r3, #0
 8009f38:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8009f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f3e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f44:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8009f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f4a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f4e:	6a1a      	ldr	r2, [r3, #32]
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	401a      	ands	r2, r3
 8009f54:	79fb      	ldrb	r3, [r7, #7]
 8009f56:	4013      	ands	r3, r2
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <HASH_GetITStatus+0x40>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8009f5c:	f04f 0301 	mov.w	r3, #1
 8009f60:	73fb      	strb	r3, [r7, #15]
 8009f62:	e002      	b.n	8009f6a <HASH_GetITStatus+0x46>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 8009f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f107 0714 	add.w	r7, r7, #20
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr

08009f78 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8009f82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f86:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f8a:	79fa      	ldrb	r2, [r7, #7]
 8009f8c:	ea6f 0202 	mvn.w	r2, r2
 8009f90:	b2d2      	uxtb	r2, r2
 8009f92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8009f94:	f107 070c 	add.w	r7, r7, #12
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bc80      	pop	{r7}
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop

08009fa0 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8009fa0:	b590      	push	{r4, r7, lr}
 8009fa2:	b09d      	sub	sp, #116	; 0x74
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8009fac:	f04f 0300 	mov.w	r3, #0
 8009fb0:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 8009fb2:	f04f 0300 	mov.w	r3, #0
 8009fb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 8009fb8:	f04f 0300 	mov.w	r3, #0
 8009fbc:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8009fbe:	f04f 0300 	mov.w	r3, #0
 8009fc2:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 8009fc4:	f04f 0301 	mov.w	r3, #1
 8009fc8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	f003 0303 	and.w	r3, r3, #3
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8009fe6:	f7ff fd73 	bl	8009ad0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8009fea:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8009ff0:	f04f 0300 	mov.w	r3, #0
 8009ff4:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8009ff6:	f04f 0320 	mov.w	r3, #32
 8009ffa:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 8009ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a000:	4618      	mov	r0, r3
 800a002:	f7ff fd75 	bl	8009af0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800a006:	8afb      	ldrh	r3, [r7, #22]
 800a008:	b29b      	uxth	r3, r3
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff fdee 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800a010:	f04f 0300 	mov.w	r3, #0
 800a014:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a016:	e00c      	b.n	800a032 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800a018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff fe07 	bl	8009c30 <HASH_DataIn>
    inputaddr+=4;
 800a022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a024:	f103 0304 	add.w	r3, r3, #4
 800a028:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800a02a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a02c:	f103 0304 	add.w	r3, r3, #4
 800a030:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a032:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	429a      	cmp	r2, r3
 800a038:	d3ee      	bcc.n	800a018 <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800a03a:	f7ff fe45 	bl	8009cc8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a03e:	f04f 0008 	mov.w	r0, #8
 800a042:	f7ff ff2d 	bl	8009ea0 <HASH_GetFlagStatus>
 800a046:	4603      	mov	r3, r0
 800a048:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f103 0301 	add.w	r3, r3, #1
 800a050:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a058:	d002      	beq.n	800a060 <HASH_MD5+0xc0>
 800a05a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1ee      	bne.n	800a03e <HASH_MD5+0x9e>

  if (busystatus != RESET)
 800a060:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a062:	2b00      	cmp	r3, #0
 800a064:	d004      	beq.n	800a070 <HASH_MD5+0xd0>
  {
     status = ERROR;
 800a066:	f04f 0300 	mov.w	r3, #0
 800a06a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800a06e:	e030      	b.n	800a0d2 <HASH_MD5+0x132>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800a070:	f107 0318 	add.w	r3, r7, #24
 800a074:	4618      	mov	r0, r3
 800a076:	f7ff fdfb 	bl	8009c70 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800a07a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a080:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a082:	ba14      	rev	r4, r2
 800a084:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800a086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a088:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a08a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a08c:	f103 0304 	add.w	r3, r3, #4
 800a090:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800a092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a09a:	ba14      	rev	r4, r2
 800a09c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800a09e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a0a0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a0a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0a4:	f103 0304 	add.w	r3, r3, #4
 800a0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800a0aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0ac:	6a3a      	ldr	r2, [r7, #32]
 800a0ae:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a0b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a0b2:	ba14      	rev	r4, r2
 800a0b4:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 800a0b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0b8:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a0ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0bc:	f103 0304 	add.w	r3, r3, #4
 800a0c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800a0c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0c6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a0c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0ca:	ba14      	rev	r4, r2
 800a0cc:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800a0ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a0d0:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800a0d2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f107 0774 	add.w	r7, r7, #116	; 0x74
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd90      	pop	{r4, r7, pc}

0800a0e0 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800a0e0:	b590      	push	{r4, r7, lr}
 800a0e2:	b09f      	sub	sp, #124	; 0x7c
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
 800a0ec:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800a0ee:	f04f 0300 	mov.w	r3, #0
 800a0f2:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800a0f4:	f04f 0300 	mov.w	r3, #0
 800a0f8:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800a0fa:	f04f 0300 	mov.w	r3, #0
 800a0fe:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800a100:	f04f 0300 	mov.w	r3, #0
 800a104:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800a106:	f04f 0300 	mov.w	r3, #0
 800a10a:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800a10c:	f04f 0301 	mov.w	r3, #1
 800a110:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800a11c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a120:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	b29b      	uxth	r3, r3
 800a126:	f003 0303 	and.w	r3, r3, #3
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a130:	b29b      	uxth	r3, r3
 800a132:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	b29b      	uxth	r3, r3
 800a138:	f003 0303 	and.w	r3, r3, #3
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a142:	b29b      	uxth	r3, r3
 800a144:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800a146:	f7ff fcc3 	bl	8009ad0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800a14a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a14e:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800a150:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a154:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800a156:	f04f 0320 	mov.w	r3, #32
 800a15a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b40      	cmp	r3, #64	; 0x40
 800a160:	d903      	bls.n	800a16a <HMAC_MD5+0x8a>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800a162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a166:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a168:	e002      	b.n	800a170 <HMAC_MD5+0x90>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800a16a:	f04f 0300 	mov.w	r3, #0
 800a16e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800a170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fcbb 	bl	8009af0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800a17a:	8b3b      	ldrh	r3, [r7, #24]
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff fd34 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800a184:	f04f 0300 	mov.w	r3, #0
 800a188:	677b      	str	r3, [r7, #116]	; 0x74
 800a18a:	e00c      	b.n	800a1a6 <HMAC_MD5+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800a18c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4618      	mov	r0, r3
 800a192:	f7ff fd4d 	bl	8009c30 <HASH_DataIn>
    keyaddr+=4;
 800a196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a198:	f103 0304 	add.w	r3, r3, #4
 800a19c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800a19e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1a0:	f103 0304 	add.w	r3, r3, #4
 800a1a4:	677b      	str	r3, [r7, #116]	; 0x74
 800a1a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	429a      	cmp	r2, r3
 800a1ac:	d3ee      	bcc.n	800a18c <HMAC_MD5+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800a1ae:	f7ff fd8b 	bl	8009cc8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a1b2:	f04f 0008 	mov.w	r0, #8
 800a1b6:	f7ff fe73 	bl	8009ea0 <HASH_GetFlagStatus>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f103 0301 	add.w	r3, r3, #1
 800a1c4:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1cc:	d002      	beq.n	800a1d4 <HMAC_MD5+0xf4>
 800a1ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d1ee      	bne.n	800a1b2 <HMAC_MD5+0xd2>

  if (busystatus != RESET)
 800a1d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d004      	beq.n	800a1e4 <HMAC_MD5+0x104>
  {
     status = ERROR;
 800a1da:	f04f 0300 	mov.w	r3, #0
 800a1de:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a1e2:	e0a2      	b.n	800a32a <HMAC_MD5+0x24a>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800a1e4:	8b7b      	ldrh	r3, [r7, #26]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7ff fcff 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800a1ee:	f04f 0300 	mov.w	r3, #0
 800a1f2:	677b      	str	r3, [r7, #116]	; 0x74
 800a1f4:	e00c      	b.n	800a210 <HMAC_MD5+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800a1f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f7ff fd18 	bl	8009c30 <HASH_DataIn>
      inputaddr+=4;
 800a200:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a202:	f103 0304 	add.w	r3, r3, #4
 800a206:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800a208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a20a:	f103 0304 	add.w	r3, r3, #4
 800a20e:	677b      	str	r3, [r7, #116]	; 0x74
 800a210:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	429a      	cmp	r2, r3
 800a216:	d3ee      	bcc.n	800a1f6 <HMAC_MD5+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800a218:	f7ff fd56 	bl	8009cc8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a222:	f04f 0008 	mov.w	r0, #8
 800a226:	f7ff fe3b 	bl	8009ea0 <HASH_GetFlagStatus>
 800a22a:	4603      	mov	r3, r0
 800a22c:	667b      	str	r3, [r7, #100]	; 0x64
       counter++;
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	f103 0301 	add.w	r3, r3, #1
 800a234:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a236:	697b      	ldr	r3, [r7, #20]
 800a238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a23c:	d002      	beq.n	800a244 <HMAC_MD5+0x164>
 800a23e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1ee      	bne.n	800a222 <HMAC_MD5+0x142>

    if (busystatus != RESET)
 800a244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a246:	2b00      	cmp	r3, #0
 800a248:	d004      	beq.n	800a254 <HMAC_MD5+0x174>
    {
      status = ERROR;
 800a24a:	f04f 0300 	mov.w	r3, #0
 800a24e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a252:	e06a      	b.n	800a32a <HMAC_MD5+0x24a>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800a254:	8b3b      	ldrh	r3, [r7, #24]
 800a256:	b29b      	uxth	r3, r3
 800a258:	4618      	mov	r0, r3
 800a25a:	f7ff fcc7 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800a262:	f04f 0300 	mov.w	r3, #0
 800a266:	677b      	str	r3, [r7, #116]	; 0x74
 800a268:	e00c      	b.n	800a284 <HMAC_MD5+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800a26a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4618      	mov	r0, r3
 800a270:	f7ff fcde 	bl	8009c30 <HASH_DataIn>
        keyaddr+=4;
 800a274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a276:	f103 0304 	add.w	r3, r3, #4
 800a27a:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800a27c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a27e:	f103 0304 	add.w	r3, r3, #4
 800a282:	677b      	str	r3, [r7, #116]	; 0x74
 800a284:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	429a      	cmp	r2, r3
 800a28a:	d3ee      	bcc.n	800a26a <HMAC_MD5+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800a28c:	f7ff fd1c 	bl	8009cc8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800a290:	f04f 0300 	mov.w	r3, #0
 800a294:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a296:	f04f 0008 	mov.w	r0, #8
 800a29a:	f7ff fe01 	bl	8009ea0 <HASH_GetFlagStatus>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	667b      	str	r3, [r7, #100]	; 0x64
          counter++;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f103 0301 	add.w	r3, r3, #1
 800a2a8:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2b0:	d002      	beq.n	800a2b8 <HMAC_MD5+0x1d8>
 800a2b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1ee      	bne.n	800a296 <HMAC_MD5+0x1b6>

      if (busystatus != RESET)
 800a2b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d004      	beq.n	800a2c8 <HMAC_MD5+0x1e8>
      {
         status = ERROR;
 800a2be:	f04f 0300 	mov.w	r3, #0
 800a2c2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a2c6:	e030      	b.n	800a32a <HMAC_MD5+0x24a>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800a2c8:	f107 031c 	add.w	r3, r7, #28
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fccf 	bl	8009c70 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800a2d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2d4:	69fa      	ldr	r2, [r7, #28]
 800a2d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a2d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2da:	ba14      	rev	r4, r2
 800a2dc:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800a2de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a2e0:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800a2e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2e4:	f103 0304 	add.w	r3, r3, #4
 800a2e8:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800a2ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2ec:	6a3a      	ldr	r2, [r7, #32]
 800a2ee:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a2f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a2f2:	ba14      	rev	r4, r2
 800a2f4:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 800a2f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2f8:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800a2fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2fc:	f103 0304 	add.w	r3, r3, #4
 800a300:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800a302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a306:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a308:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a30a:	ba14      	rev	r4, r2
 800a30c:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800a30e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a310:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800a312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a314:	f103 0304 	add.w	r3, r3, #4
 800a318:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800a31a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a31e:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a322:	ba14      	rev	r4, r2
 800a324:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800a326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a328:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800a32a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800a32e:	4618      	mov	r0, r3
 800a330:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800a334:	46bd      	mov	sp, r7
 800a336:	bd90      	pop	{r4, r7, pc}

0800a338 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800a338:	b590      	push	{r4, r7, lr}
 800a33a:	b09f      	sub	sp, #124	; 0x7c
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800a34a:	f04f 0300 	mov.w	r3, #0
 800a34e:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800a350:	f04f 0300 	mov.w	r3, #0
 800a354:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800a356:	f04f 0300 	mov.w	r3, #0
 800a35a:	66bb      	str	r3, [r7, #104]	; 0x68
  ErrorStatus status = SUCCESS;
 800a35c:	f04f 0301 	mov.w	r3, #1
 800a360:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t inputaddr  = (uint32_t)Input;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t outputaddr = (uint32_t)Output;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	667b      	str	r3, [r7, #100]	; 0x64

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	b29b      	uxth	r3, r3
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	b29b      	uxth	r3, r3
 800a376:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a37a:	b29b      	uxth	r3, r3
 800a37c:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800a37e:	f7ff fba7 	bl	8009ad0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800a382:	f04f 0300 	mov.w	r3, #0
 800a386:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800a388:	f04f 0300 	mov.w	r3, #0
 800a38c:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800a38e:	f04f 0320 	mov.w	r3, #32
 800a392:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 800a394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff fba9 	bl	8009af0 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800a39e:	8afb      	ldrh	r3, [r7, #22]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7ff fc22 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800a3a8:	f04f 0300 	mov.w	r3, #0
 800a3ac:	677b      	str	r3, [r7, #116]	; 0x74
 800a3ae:	e00c      	b.n	800a3ca <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800a3b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff fc3b 	bl	8009c30 <HASH_DataIn>
    inputaddr+=4;
 800a3ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3bc:	f103 0304 	add.w	r3, r3, #4
 800a3c0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800a3c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3c4:	f103 0304 	add.w	r3, r3, #4
 800a3c8:	677b      	str	r3, [r7, #116]	; 0x74
 800a3ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d3ee      	bcc.n	800a3b0 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800a3d2:	f7ff fc79 	bl	8009cc8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a3d6:	f04f 0008 	mov.w	r0, #8
 800a3da:	f7ff fd61 	bl	8009ea0 <HASH_GetFlagStatus>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	66bb      	str	r3, [r7, #104]	; 0x68
    counter++;
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	f103 0301 	add.w	r3, r3, #1
 800a3e8:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f0:	d002      	beq.n	800a3f8 <HASH_SHA1+0xc0>
 800a3f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1ee      	bne.n	800a3d6 <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 800a3f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d004      	beq.n	800a408 <HASH_SHA1+0xd0>
  {
     status = ERROR;
 800a3fe:	f04f 0300 	mov.w	r3, #0
 800a402:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a406:	e03c      	b.n	800a482 <HASH_SHA1+0x14a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800a408:	f107 0318 	add.w	r3, r7, #24
 800a40c:	4618      	mov	r0, r3
 800a40e:	f7ff fc2f 	bl	8009c70 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800a412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a414:	69ba      	ldr	r2, [r7, #24]
 800a416:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a418:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a41a:	ba14      	rev	r4, r2
 800a41c:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800a41e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a420:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a424:	f103 0304 	add.w	r3, r3, #4
 800a428:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800a42a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a42c:	69fa      	ldr	r2, [r7, #28]
 800a42e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a430:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a432:	ba14      	rev	r4, r2
 800a434:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800a436:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a438:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a43a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a43c:	f103 0304 	add.w	r3, r3, #4
 800a440:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800a442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a444:	6a3a      	ldr	r2, [r7, #32]
 800a446:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a448:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a44a:	ba14      	rev	r4, r2
 800a44c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800a44e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a450:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a454:	f103 0304 	add.w	r3, r3, #4
 800a458:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800a45a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a45c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a45e:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a462:	ba14      	rev	r4, r2
 800a464:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 800a466:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a468:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a46a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a46c:	f103 0304 	add.w	r3, r3, #4
 800a470:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800a472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a474:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a476:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a478:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a47a:	ba14      	rev	r4, r2
 800a47c:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800a47e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a480:	601a      	str	r2, [r3, #0]
  }
  return status;
 800a482:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800a486:	4618      	mov	r0, r3
 800a488:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}

0800a490 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800a490:	b590      	push	{r4, r7, lr}
 800a492:	b0a1      	sub	sp, #132	; 0x84
 800a494:	af00      	add	r7, sp, #0
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800a49e:	f04f 0300 	mov.w	r3, #0
 800a4a2:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800a4a4:	f04f 0300 	mov.w	r3, #0
 800a4a8:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800a4aa:	f04f 0300 	mov.w	r3, #0
 800a4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 800a4b0:	f04f 0300 	mov.w	r3, #0
 800a4b4:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800a4b6:	f04f 0300 	mov.w	r3, #0
 800a4ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 800a4bc:	f04f 0301 	mov.w	r3, #1
 800a4c0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 800a4cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4d0:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f003 0303 	and.w	r3, r3, #3
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	f003 0303 	and.w	r3, r3, #3
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800a4f6:	f7ff faeb 	bl	8009ad0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800a500:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a504:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800a506:	f04f 0320 	mov.w	r3, #32
 800a50a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	2b40      	cmp	r3, #64	; 0x40
 800a510:	d903      	bls.n	800a51a <HMAC_SHA1+0x8a>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800a512:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a516:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a518:	e002      	b.n	800a520 <HMAC_SHA1+0x90>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800a51a:	f04f 0300 	mov.w	r3, #0
 800a51e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800a520:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fae3 	bl	8009af0 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800a52a:	8b3b      	ldrh	r3, [r7, #24]
 800a52c:	b29b      	uxth	r3, r3
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff fb5c 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800a534:	f04f 0300 	mov.w	r3, #0
 800a538:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a53a:	e00c      	b.n	800a556 <HMAC_SHA1+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800a53c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4618      	mov	r0, r3
 800a542:	f7ff fb75 	bl	8009c30 <HASH_DataIn>
    keyaddr+=4;
 800a546:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a548:	f103 0304 	add.w	r3, r3, #4
 800a54c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800a54e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a550:	f103 0304 	add.w	r3, r3, #4
 800a554:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a556:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d3ee      	bcc.n	800a53c <HMAC_SHA1+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800a55e:	f7ff fbb3 	bl	8009cc8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a562:	f04f 0008 	mov.w	r0, #8
 800a566:	f7ff fc9b 	bl	8009ea0 <HASH_GetFlagStatus>
 800a56a:	4603      	mov	r3, r0
 800a56c:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	f103 0301 	add.w	r3, r3, #1
 800a574:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a57c:	d002      	beq.n	800a584 <HMAC_SHA1+0xf4>
 800a57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1ee      	bne.n	800a562 <HMAC_SHA1+0xd2>

  if (busystatus != RESET)
 800a584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a586:	2b00      	cmp	r3, #0
 800a588:	d004      	beq.n	800a594 <HMAC_SHA1+0x104>
  {
     status = ERROR;
 800a58a:	f04f 0300 	mov.w	r3, #0
 800a58e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800a592:	e0ae      	b.n	800a6f2 <HMAC_SHA1+0x262>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800a594:	8b7b      	ldrh	r3, [r7, #26]
 800a596:	b29b      	uxth	r3, r3
 800a598:	4618      	mov	r0, r3
 800a59a:	f7ff fb27 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5a4:	e00c      	b.n	800a5c0 <HMAC_SHA1+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800a5a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f7ff fb40 	bl	8009c30 <HASH_DataIn>
      inputaddr+=4;
 800a5b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a5b2:	f103 0304 	add.w	r3, r3, #4
 800a5b6:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800a5b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a5ba:	f103 0304 	add.w	r3, r3, #4
 800a5be:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d3ee      	bcc.n	800a5a6 <HMAC_SHA1+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800a5c8:	f7ff fb7e 	bl	8009cc8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800a5cc:	f04f 0300 	mov.w	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a5d2:	f04f 0008 	mov.w	r0, #8
 800a5d6:	f7ff fc63 	bl	8009ea0 <HASH_GetFlagStatus>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	f103 0301 	add.w	r3, r3, #1
 800a5e4:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ec:	d002      	beq.n	800a5f4 <HMAC_SHA1+0x164>
 800a5ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1ee      	bne.n	800a5d2 <HMAC_SHA1+0x142>

    if (busystatus != RESET)
 800a5f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d004      	beq.n	800a604 <HMAC_SHA1+0x174>
    {
      status = ERROR;
 800a5fa:	f04f 0300 	mov.w	r3, #0
 800a5fe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800a602:	e076      	b.n	800a6f2 <HMAC_SHA1+0x262>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800a604:	8b3b      	ldrh	r3, [r7, #24]
 800a606:	b29b      	uxth	r3, r3
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff faef 	bl	8009bec <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 800a612:	f04f 0300 	mov.w	r3, #0
 800a616:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a618:	e00c      	b.n	800a634 <HMAC_SHA1+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800a61a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff fb06 	bl	8009c30 <HASH_DataIn>
        keyaddr+=4;
 800a624:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a626:	f103 0304 	add.w	r3, r3, #4
 800a62a:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800a62c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a62e:	f103 0304 	add.w	r3, r3, #4
 800a632:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a634:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d3ee      	bcc.n	800a61a <HMAC_SHA1+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800a63c:	f7ff fb44 	bl	8009cc8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800a640:	f04f 0300 	mov.w	r3, #0
 800a644:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a646:	f04f 0008 	mov.w	r0, #8
 800a64a:	f7ff fc29 	bl	8009ea0 <HASH_GetFlagStatus>
 800a64e:	4603      	mov	r3, r0
 800a650:	66fb      	str	r3, [r7, #108]	; 0x6c
        counter++;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f103 0301 	add.w	r3, r3, #1
 800a658:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a660:	d002      	beq.n	800a668 <HMAC_SHA1+0x1d8>
 800a662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1ee      	bne.n	800a646 <HMAC_SHA1+0x1b6>

      if (busystatus != RESET)
 800a668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d004      	beq.n	800a678 <HMAC_SHA1+0x1e8>
      {
        status = ERROR;
 800a66e:	f04f 0300 	mov.w	r3, #0
 800a672:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800a676:	e03c      	b.n	800a6f2 <HMAC_SHA1+0x262>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800a678:	f107 031c 	add.w	r3, r7, #28
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7ff faf7 	bl	8009c70 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800a682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a684:	69fa      	ldr	r2, [r7, #28]
 800a686:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a688:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a68a:	ba14      	rev	r4, r2
 800a68c:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800a68e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a690:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800a692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a694:	f103 0304 	add.w	r3, r3, #4
 800a698:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800a69a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a69c:	6a3a      	ldr	r2, [r7, #32]
 800a69e:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a6a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a6a2:	ba14      	rev	r4, r2
 800a6a4:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800a6a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6a8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800a6aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6ac:	f103 0304 	add.w	r3, r3, #4
 800a6b0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800a6b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b6:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a6b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6ba:	ba14      	rev	r4, r2
 800a6bc:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 800a6be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a6c0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800a6c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6c4:	f103 0304 	add.w	r3, r3, #4
 800a6c8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800a6ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ce:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a6d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a6d2:	ba14      	rev	r4, r2
 800a6d4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800a6d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6d8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800a6da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6dc:	f103 0304 	add.w	r3, r3, #4
 800a6e0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800a6e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e6:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a6e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6ea:	ba14      	rev	r4, r2
 800a6ec:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800a6ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6f0:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800a6f2:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f107 0784 	add.w	r7, r7, #132	; 0x84
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd90      	pop	{r4, r7, pc}

0800a700 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800a70e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a712:	429a      	cmp	r2, r3
 800a714:	d10c      	bne.n	800a730 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800a716:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a71a:	f04f 0101 	mov.w	r1, #1
 800a71e:	f001 fb8b 	bl	800be38 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800a722:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800a726:	f04f 0100 	mov.w	r1, #0
 800a72a:	f001 fb85 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800a72e:	e026      	b.n	800a77e <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 800a730:	687a      	ldr	r2, [r7, #4]
 800a732:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800a736:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d10c      	bne.n	800a758 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800a73e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a742:	f04f 0101 	mov.w	r1, #1
 800a746:	f001 fb77 	bl	800be38 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800a74a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800a74e:	f04f 0100 	mov.w	r1, #0
 800a752:	f001 fb71 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800a756:	e012      	b.n	800a77e <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800a75e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a762:	429a      	cmp	r2, r3
 800a764:	d10b      	bne.n	800a77e <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800a766:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a76a:	f04f 0101 	mov.w	r1, #1
 800a76e:	f001 fb63 	bl	800be38 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800a772:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a776:	f04f 0100 	mov.w	r1, #0
 800a77a:	f001 fb5d 	bl	800be38 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800a77e:	f107 0708 	add.w	r7, r7, #8
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop

0800a788 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800a792:	f04f 0300 	mov.w	r3, #0
 800a796:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800a79e:	f04f 0304 	mov.w	r3, #4
 800a7a2:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800a7a4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800a7a8:	f2c0 037a 	movt	r3, #122	; 0x7a
 800a7ac:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	889b      	ldrh	r3, [r3, #4]
 800a7b2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800a7b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a7b6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a7ba:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 f899 	bl	800b8f8 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800a7ca:	69fa      	ldr	r2, [r7, #28]
 800a7cc:	f64d 6383 	movw	r3, #56963	; 0xde83
 800a7d0:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800a7d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a7d8:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800a7dc:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800a7de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a7e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a7ea:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	f023 0301 	bic.w	r3, r3, #1
 800a7f6:	b29a      	uxth	r2, r3
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800a7fc:	f04f 0300 	mov.w	r3, #0
 800a800:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800a80a:	f2c0 0301 	movt	r3, #1
 800a80e:	429a      	cmp	r2, r3
 800a810:	d818      	bhi.n	800a844 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a820:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800a822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a824:	2b03      	cmp	r3, #3
 800a826:	d802      	bhi.n	800a82e <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800a828:	f04f 0304 	mov.w	r3, #4
 800a82c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800a82e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a830:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a832:	4313      	orrs	r3, r2
 800a834:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800a836:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a838:	f103 0301 	add.w	r3, r3, #1
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	841a      	strh	r2, [r3, #32]
 800a842:	e04b      	b.n	800a8dc <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	88da      	ldrh	r2, [r3, #6]
 800a848:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d10a      	bne.n	800a866 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	4613      	mov	r3, r2
 800a856:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a85a:	189b      	adds	r3, r3, r2
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a862:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a864:	e010      	b.n	800a888 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	681a      	ldr	r2, [r3, #0]
 800a86a:	4613      	mov	r3, r2
 800a86c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a870:	189b      	adds	r3, r3, r2
 800a872:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800a876:	189b      	adds	r3, r3, r2
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a87e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800a880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a886:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800a888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a88a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800a88e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800a892:	2b00      	cmp	r3, #0
 800a894:	d103      	bne.n	800a89e <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800a896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a898:	f043 0301 	orr.w	r3, r3, #1
 800a89c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800a89e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800a8b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a8b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a8b6:	fb02 f203 	mul.w	r2, r2, r3
 800a8ba:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800a8be:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800a8c2:	fb83 1302 	smull	r1, r3, r3, r2
 800a8c6:	ea4f 11a3 	mov.w	r1, r3, asr #6
 800a8ca:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800a8ce:	1acb      	subs	r3, r1, r3
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	f103 0301 	add.w	r3, r3, #1
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a8e0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	881b      	ldrh	r3, [r3, #0]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	f043 0301 	orr.w	r3, r3, #1
 800a8ec:	b29a      	uxth	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800a8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a8fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8fe:	f023 030a 	bic.w	r3, r3, #10
 800a902:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	889a      	ldrh	r2, [r3, #4]
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	895b      	ldrh	r3, [r3, #10]
 800a90c:	4313      	orrs	r3, r2
 800a90e:	b29a      	uxth	r2, r3
 800a910:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a912:	4313      	orrs	r3, r2
 800a914:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a91a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	899a      	ldrh	r2, [r3, #12]
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	891b      	ldrh	r3, [r3, #8]
 800a924:	4313      	orrs	r3, r2
 800a926:	b29a      	uxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	811a      	strh	r2, [r3, #8]
}
 800a92c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a942:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f04f 0200 	mov.w	r2, #0
 800a94a:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800a952:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f04f 0200 	mov.w	r2, #0
 800a95a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f04f 0200 	mov.w	r2, #0
 800a962:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a96a:	819a      	strh	r2, [r3, #12]
}
 800a96c:	f107 070c 	add.w	r7, r7, #12
 800a970:	46bd      	mov	sp, r7
 800a972:	bc80      	pop	{r7}
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop

0800a978 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	460b      	mov	r3, r1
 800a982:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a984:	78fb      	ldrb	r3, [r7, #3]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d008      	beq.n	800a99c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f043 0301 	orr.w	r3, r3, #1
 800a994:	b29a      	uxth	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	801a      	strh	r2, [r3, #0]
 800a99a:	e007      	b.n	800a9ac <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	881b      	ldrh	r3, [r3, #0]
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f023 0301 	bic.w	r3, r3, #1
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	801a      	strh	r2, [r3, #0]
  }
}
 800a9ac:	f107 070c 	add.w	r7, r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bc80      	pop	{r7}
 800a9b4:	4770      	bx	lr
 800a9b6:	bf00      	nop

0800a9b8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800a9c4:	78fb      	ldrb	r3, [r7, #3]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d008      	beq.n	800a9dc <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	881b      	ldrh	r3, [r3, #0]
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	801a      	strh	r2, [r3, #0]
 800a9da:	e007      	b.n	800a9ec <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	801a      	strh	r2, [r3, #0]
  }
}
 800a9ec:	f107 070c 	add.w	r7, r7, #12
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bc80      	pop	{r7}
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop

0800a9f8 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d008      	beq.n	800aa1c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	881b      	ldrh	r3, [r3, #0]
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	801a      	strh	r2, [r3, #0]
 800aa1a:	e007      	b.n	800aa2c <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	881b      	ldrh	r3, [r3, #0]
 800aa20:	b29b      	uxth	r3, r3
 800aa22:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa26:	b29a      	uxth	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	801a      	strh	r2, [r3, #0]
  }
}
 800aa2c:	f107 070c 	add.w	r7, r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bc80      	pop	{r7}
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop

0800aa38 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	4613      	mov	r3, r2
 800aa42:	460a      	mov	r2, r1
 800aa44:	70fa      	strb	r2, [r7, #3]
 800aa46:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800aa48:	78bb      	ldrb	r3, [r7, #2]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800aa4e:	78fb      	ldrb	r3, [r7, #3]
 800aa50:	f043 0301 	orr.w	r3, r3, #1
 800aa54:	70fb      	strb	r3, [r7, #3]
 800aa56:	e003      	b.n	800aa60 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	f023 0301 	bic.w	r3, r3, #1
 800aa5e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800aa60:	78fb      	ldrb	r3, [r7, #3]
 800aa62:	b29a      	uxth	r2, r3
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	821a      	strh	r2, [r3, #16]
}
 800aa68:	f107 070c 	add.w	r7, r7, #12
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bc80      	pop	{r7}
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop

0800aa74 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b083      	sub	sp, #12
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	460b      	mov	r3, r1
 800aa7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800aa80:	78fb      	ldrb	r3, [r7, #3]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d008      	beq.n	800aa98 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	881b      	ldrh	r3, [r3, #0]
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	801a      	strh	r2, [r3, #0]
 800aa96:	e007      	b.n	800aaa8 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	881b      	ldrh	r3, [r3, #0]
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	801a      	strh	r2, [r3, #0]
  }
}
 800aaa8:	f107 070c 	add.w	r7, r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bc80      	pop	{r7}
 800aab0:	4770      	bx	lr
 800aab2:	bf00      	nop

0800aab4 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b085      	sub	sp, #20
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	460b      	mov	r3, r1
 800aabe:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800aac0:	f04f 0300 	mov.w	r3, #0
 800aac4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	899b      	ldrh	r3, [r3, #12]
 800aaca:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800aacc:	89fb      	ldrh	r3, [r7, #14]
 800aace:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800aad2:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800aad4:	78fb      	ldrb	r3, [r7, #3]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800aadc:	b29a      	uxth	r2, r3
 800aade:	89fb      	ldrh	r3, [r7, #14]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	89fa      	ldrh	r2, [r7, #14]
 800aaea:	819a      	strh	r2, [r3, #12]
}
 800aaec:	f107 0714 	add.w	r7, r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bc80      	pop	{r7}
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop

0800aaf8 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	460b      	mov	r3, r1
 800ab02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ab04:	78fb      	ldrb	r3, [r7, #3]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d008      	beq.n	800ab1c <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	899b      	ldrh	r3, [r3, #12]
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	f043 0301 	orr.w	r3, r3, #1
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	819a      	strh	r2, [r3, #12]
 800ab1a:	e007      	b.n	800ab2c <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	899b      	ldrh	r3, [r3, #12]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f023 0301 	bic.w	r3, r3, #1
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	819a      	strh	r2, [r3, #12]
  }
}
 800ab2c:	f107 070c 	add.w	r7, r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop

0800ab38 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d008      	beq.n	800ab5c <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab54:	b29a      	uxth	r2, r3
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	801a      	strh	r2, [r3, #0]
 800ab5a:	e007      	b.n	800ab6c <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	881b      	ldrh	r3, [r3, #0]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab66:	b29a      	uxth	r2, r3
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	801a      	strh	r2, [r3, #0]
  }
}
 800ab6c:	f107 070c 	add.w	r7, r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bc80      	pop	{r7}
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop

0800ab78 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
 800ab80:	460b      	mov	r3, r1
 800ab82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00a      	beq.n	800aba0 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	b29b      	uxth	r3, r3
 800ab90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab98:	b29a      	uxth	r2, r3
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e009      	b.n	800abb4 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800abaa:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800abae:	b29a      	uxth	r2, r3
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	801a      	strh	r2, [r3, #0]
  }
}
 800abb4:	f107 070c 	add.w	r7, r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	bc80      	pop	{r7}
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop

0800abc0 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	460b      	mov	r3, r1
 800abca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800abcc:	78fb      	ldrb	r3, [r7, #3]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d108      	bne.n	800abe4 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	881b      	ldrh	r3, [r3, #0]
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abdc:	b29a      	uxth	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	801a      	strh	r2, [r3, #0]
 800abe2:	e007      	b.n	800abf4 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	881b      	ldrh	r3, [r3, #0]
 800abe8:	b29b      	uxth	r3, r3
 800abea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abee:	b29a      	uxth	r2, r3
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	801a      	strh	r2, [r3, #0]
  }
}
 800abf4:	f107 070c 	add.w	r7, r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bc80      	pop	{r7}
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop

0800ac00 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800ac0c:	887b      	ldrh	r3, [r7, #2]
 800ac0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ac12:	d008      	beq.n	800ac26 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	8b9b      	ldrh	r3, [r3, #28]
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac1e:	b29a      	uxth	r2, r3
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	839a      	strh	r2, [r3, #28]
 800ac24:	e007      	b.n	800ac36 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	8b9b      	ldrh	r3, [r3, #28]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	839a      	strh	r2, [r3, #28]
  }
}
 800ac36:	f107 070c 	add.w	r7, r7, #12
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bc80      	pop	{r7}
 800ac3e:	4770      	bx	lr

0800ac40 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800ac4c:	887b      	ldrh	r3, [r7, #2]
 800ac4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac52:	d108      	bne.n	800ac66 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	881b      	ldrh	r3, [r3, #0]
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	801a      	strh	r2, [r3, #0]
 800ac64:	e007      	b.n	800ac76 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	881b      	ldrh	r3, [r3, #0]
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	801a      	strh	r2, [r3, #0]
  }
}
 800ac76:	f107 070c 	add.w	r7, r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr

0800ac80 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800ac8c:	887b      	ldrh	r3, [r7, #2]
 800ac8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac92:	d108      	bne.n	800aca6 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ac9e:	b29a      	uxth	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	801a      	strh	r2, [r3, #0]
 800aca4:	e007      	b.n	800acb6 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	b29b      	uxth	r3, r3
 800acac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	801a      	strh	r2, [r3, #0]
  }
}
 800acb6:	f107 070c 	add.w	r7, r7, #12
 800acba:	46bd      	mov	sp, r7
 800acbc:	bc80      	pop	{r7}
 800acbe:	4770      	bx	lr

0800acc0 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	460b      	mov	r3, r1
 800acca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800accc:	78fb      	ldrb	r3, [r7, #3]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d008      	beq.n	800ace4 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	f043 0310 	orr.w	r3, r3, #16
 800acdc:	b29a      	uxth	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	e007      	b.n	800acf4 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	881b      	ldrh	r3, [r3, #0]
 800ace8:	b29b      	uxth	r3, r3
 800acea:	f023 0310 	bic.w	r3, r3, #16
 800acee:	b29a      	uxth	r2, r3
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	801a      	strh	r2, [r3, #0]
  }
}
 800acf4:	f107 070c 	add.w	r7, r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bc80      	pop	{r7}
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop

0800ad00 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	460b      	mov	r3, r1
 800ad0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800ad0c:	78fb      	ldrb	r3, [r7, #3]
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	821a      	strh	r2, [r3, #16]
}
 800ad14:	f107 070c 	add.w	r7, r7, #12
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bc80      	pop	{r7}
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop

0800ad20 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	8a1b      	ldrh	r3, [r3, #16]
 800ad2c:	b29b      	uxth	r3, r3
 800ad2e:	b2db      	uxtb	r3, r3
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	f107 070c 	add.w	r7, r7, #12
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bc80      	pop	{r7}
 800ad3a:	4770      	bx	lr

0800ad3c <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	460b      	mov	r3, r1
 800ad46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ad48:	78fb      	ldrb	r3, [r7, #3]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d008      	beq.n	800ad60 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	801a      	strh	r2, [r3, #0]
 800ad5e:	e007      	b.n	800ad70 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	881b      	ldrh	r3, [r3, #0]
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	801a      	strh	r2, [r3, #0]
  }
}
 800ad70:	f107 070c 	add.w	r7, r7, #12
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bc80      	pop	{r7}
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop

0800ad7c <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b083      	sub	sp, #12
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	460b      	mov	r3, r1
 800ad86:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800ad88:	887b      	ldrh	r3, [r7, #2]
 800ad8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad8e:	d108      	bne.n	800ada2 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	881b      	ldrh	r3, [r3, #0]
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad9a:	b29a      	uxth	r2, r3
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	801a      	strh	r2, [r3, #0]
 800ada0:	e007      	b.n	800adb2 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	881b      	ldrh	r3, [r3, #0]
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800adac:	b29a      	uxth	r2, r3
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	801a      	strh	r2, [r3, #0]
  }
}
 800adb2:	f107 070c 	add.w	r7, r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bc80      	pop	{r7}
 800adba:	4770      	bx	lr

0800adbc <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d008      	beq.n	800ade0 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	881b      	ldrh	r3, [r3, #0]
 800add2:	b29b      	uxth	r3, r3
 800add4:	f043 0320 	orr.w	r3, r3, #32
 800add8:	b29a      	uxth	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	801a      	strh	r2, [r3, #0]
 800adde:	e007      	b.n	800adf0 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	881b      	ldrh	r3, [r3, #0]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	f023 0320 	bic.w	r3, r3, #32
 800adea:	b29a      	uxth	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	801a      	strh	r2, [r3, #0]
  }
}
 800adf0:	f107 070c 	add.w	r7, r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bc80      	pop	{r7}
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop

0800adfc <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	8b1b      	ldrh	r3, [r3, #24]
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	b2db      	uxtb	r3, r3
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	f107 070c 	add.w	r7, r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bc80      	pop	{r7}
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop

0800ae20 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d008      	beq.n	800ae44 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	889b      	ldrh	r3, [r3, #4]
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	809a      	strh	r2, [r3, #4]
 800ae42:	e007      	b.n	800ae54 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	889b      	ldrh	r3, [r3, #4]
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae4e:	b29a      	uxth	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	809a      	strh	r2, [r3, #4]
  }
}
 800ae54:	f107 070c 	add.w	r7, r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bc80      	pop	{r7}
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop

0800ae60 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	460b      	mov	r3, r1
 800ae6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ae6c:	78fb      	ldrb	r3, [r7, #3]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d008      	beq.n	800ae84 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	889b      	ldrh	r3, [r3, #4]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ae7c:	b29a      	uxth	r2, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	809a      	strh	r2, [r3, #4]
 800ae82:	e007      	b.n	800ae94 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	889b      	ldrh	r3, [r3, #4]
 800ae88:	b29b      	uxth	r3, r3
 800ae8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	809a      	strh	r2, [r3, #4]
  }
}
 800ae94:	f107 070c 	add.w	r7, r7, #12
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bc80      	pop	{r7}
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop

0800aea0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800aeac:	f04f 0300 	mov.w	r3, #0
 800aeb0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800aeb6:	78fa      	ldrb	r2, [r7, #3]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	18d3      	adds	r3, r2, r3
 800aebc:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	f107 0714 	add.w	r7, r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bc80      	pop	{r7}
 800aece:	4770      	bx	lr

0800aed0 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	4613      	mov	r3, r2
 800aeda:	460a      	mov	r2, r1
 800aedc:	807a      	strh	r2, [r7, #2]
 800aede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800aee0:	787b      	ldrb	r3, [r7, #1]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d008      	beq.n	800aef8 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	889b      	ldrh	r3, [r3, #4]
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	887b      	ldrh	r3, [r7, #2]
 800aeee:	4313      	orrs	r3, r2
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	809a      	strh	r2, [r3, #4]
 800aef6:	e00a      	b.n	800af0e <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	889b      	ldrh	r3, [r3, #4]
 800aefc:	b29a      	uxth	r2, r3
 800aefe:	887b      	ldrh	r3, [r7, #2]
 800af00:	ea6f 0303 	mvn.w	r3, r3
 800af04:	b29b      	uxth	r3, r3
 800af06:	4013      	ands	r3, r2
 800af08:	b29a      	uxth	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	809a      	strh	r2, [r3, #4]
  }
}
 800af0e:	f107 070c 	add.w	r7, r7, #12
 800af12:	46bd      	mov	sp, r7
 800af14:	bc80      	pop	{r7}
 800af16:	4770      	bx	lr

0800af18 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800af18:	b480      	push	{r7}
 800af1a:	b087      	sub	sp, #28
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800af22:	f04f 0300 	mov.w	r3, #0
 800af26:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800af28:	f04f 0300 	mov.w	r3, #0
 800af2c:	60fb      	str	r3, [r7, #12]
 800af2e:	f04f 0300 	mov.w	r3, #0
 800af32:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800af34:	f04f 0300 	mov.w	r3, #0
 800af38:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	8a9b      	ldrh	r3, [r3, #20]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	8b1b      	ldrh	r3, [r3, #24]
 800af46:	b29b      	uxth	r3, r3
 800af48:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800af50:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	4313      	orrs	r3, r2
 800af58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800af5c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	401a      	ands	r2, r3
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	429a      	cmp	r2, r3
 800af68:	d103      	bne.n	800af72 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800af6a:	f04f 0301 	mov.w	r3, #1
 800af6e:	75fb      	strb	r3, [r7, #23]
 800af70:	e002      	b.n	800af78 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800af72:	f04f 0300 	mov.w	r3, #0
 800af76:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800af78:	7dfb      	ldrb	r3, [r7, #23]
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	f107 071c 	add.w	r7, r7, #28
 800af80:	46bd      	mov	sp, r7
 800af82:	bc80      	pop	{r7}
 800af84:	4770      	bx	lr
 800af86:	bf00      	nop

0800af88 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800af90:	f04f 0300 	mov.w	r3, #0
 800af94:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800af96:	f04f 0300 	mov.w	r3, #0
 800af9a:	613b      	str	r3, [r7, #16]
 800af9c:	f04f 0300 	mov.w	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	8a9b      	ldrh	r3, [r3, #20]
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	8b1b      	ldrh	r3, [r3, #24]
 800afae:	b29b      	uxth	r3, r3
 800afb0:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800afb8:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	4313      	orrs	r3, r2
 800afc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afc4:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800afc6:	697b      	ldr	r3, [r7, #20]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	f107 071c 	add.w	r7, r7, #28
 800afce:	46bd      	mov	sp, r7
 800afd0:	bc80      	pop	{r7}
 800afd2:	4770      	bx	lr

0800afd4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b087      	sub	sp, #28
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800afde:	f04f 0300 	mov.w	r3, #0
 800afe2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	613b      	str	r3, [r7, #16]
 800afea:	f04f 0300 	mov.w	r3, #0
 800afee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800affa:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b002:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d004      	beq.n	800b014 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	f103 0314 	add.w	r3, r3, #20
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	e007      	b.n	800b024 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b01a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	f103 0318 	add.w	r3, r3, #24
 800b022:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	4013      	ands	r3, r2
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d003      	beq.n	800b038 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800b030:	f04f 0301 	mov.w	r3, #1
 800b034:	75fb      	strb	r3, [r7, #23]
 800b036:	e002      	b.n	800b03e <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800b038:	f04f 0300 	mov.w	r3, #0
 800b03c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800b03e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b040:	4618      	mov	r0, r3
 800b042:	f107 071c 	add.w	r7, r7, #28
 800b046:	46bd      	mov	sp, r7
 800b048:	bc80      	pop	{r7}
 800b04a:	4770      	bx	lr

0800b04c <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800b056:	f04f 0300 	mov.w	r3, #0
 800b05a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b062:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	b29b      	uxth	r3, r3
 800b068:	ea6f 0303 	mvn.w	r3, r3
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	829a      	strh	r2, [r3, #20]
}
 800b072:	f107 0714 	add.w	r7, r7, #20
 800b076:	46bd      	mov	sp, r7
 800b078:	bc80      	pop	{r7}
 800b07a:	4770      	bx	lr

0800b07c <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b086:	f04f 0300 	mov.w	r3, #0
 800b08a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800b08c:	f04f 0300 	mov.w	r3, #0
 800b090:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b098:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	889b      	ldrh	r3, [r3, #4]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b0ac:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	8a9b      	ldrh	r3, [r3, #20]
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	4013      	ands	r3, r2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d006      	beq.n	800b0cc <I2C_GetITStatus+0x50>
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800b0c4:	f04f 0301 	mov.w	r3, #1
 800b0c8:	73fb      	strb	r3, [r7, #15]
 800b0ca:	e002      	b.n	800b0d2 <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800b0cc:	f04f 0300 	mov.w	r3, #0
 800b0d0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800b0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f107 0714 	add.w	r7, r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bc80      	pop	{r7}
 800b0de:	4770      	bx	lr

0800b0e0 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800b0ea:	f04f 0300 	mov.w	r3, #0
 800b0ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b0f6:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	ea6f 0303 	mvn.w	r3, r3
 800b100:	b29a      	uxth	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	829a      	strh	r2, [r3, #20]
}
 800b106:	f107 0714 	add.w	r7, r7, #20
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bc80      	pop	{r7}
 800b10e:	4770      	bx	lr

0800b110 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	4603      	mov	r3, r0
 800b118:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800b11a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b11e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b122:	88fa      	ldrh	r2, [r7, #6]
 800b124:	601a      	str	r2, [r3, #0]
}
 800b126:	f107 070c 	add.w	r7, r7, #12
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bc80      	pop	{r7}
 800b12e:	4770      	bx	lr

0800b130 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	4603      	mov	r3, r0
 800b138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800b13a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b13e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b142:	79fa      	ldrb	r2, [r7, #7]
 800b144:	605a      	str	r2, [r3, #4]
}
 800b146:	f107 070c 	add.w	r7, r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bc80      	pop	{r7}
 800b14e:	4770      	bx	lr

0800b150 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	4603      	mov	r3, r0
 800b158:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800b15a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b15e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b162:	88fa      	ldrh	r2, [r7, #6]
 800b164:	609a      	str	r2, [r3, #8]
}
 800b166:	f107 070c 	add.w	r7, r7, #12
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bc80      	pop	{r7}
 800b16e:	4770      	bx	lr

0800b170 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800b170:	b480      	push	{r7}
 800b172:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800b174:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b178:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b17c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b180:	601a      	str	r2, [r3, #0]
}
 800b182:	46bd      	mov	sp, r7
 800b184:	bc80      	pop	{r7}
 800b186:	4770      	bx	lr

0800b188 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800b188:	b480      	push	{r7}
 800b18a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800b18c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b190:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b194:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800b198:	601a      	str	r2, [r3, #0]
}
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bc80      	pop	{r7}
 800b19e:	4770      	bx	lr

0800b1a0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800b1aa:	f04f 0300 	mov.w	r3, #0
 800b1ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800b1b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b1b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1b8:	68da      	ldr	r2, [r3, #12]
 800b1ba:	88fb      	ldrh	r3, [r7, #6]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d003      	beq.n	800b1ca <IWDG_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800b1c2:	f04f 0301 	mov.w	r3, #1
 800b1c6:	73fb      	strb	r3, [r7, #15]
 800b1c8:	e002      	b.n	800b1d0 <IWDG_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800b1ca:	f04f 0300 	mov.w	r3, #0
 800b1ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f107 0714 	add.w	r7, r7, #20
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bc80      	pop	{r7}
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop

0800b1e0 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800b1e4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b1e8:	f04f 0101 	mov.w	r1, #1
 800b1ec:	f000 fe24 	bl	800be38 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800b1f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b1f4:	f04f 0100 	mov.w	r1, #0
 800b1f8:	f000 fe1e 	bl	800be38 <RCC_APB1PeriphResetCmd>
}
 800b1fc:	bd80      	pop	{r7, pc}
 800b1fe:	bf00      	nop

0800b200 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800b200:	b480      	push	{r7}
 800b202:	b083      	sub	sp, #12
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800b20a:	f04f 0320 	mov.w	r3, #32
 800b20e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b212:	79fa      	ldrb	r2, [r7, #7]
 800b214:	601a      	str	r2, [r3, #0]
}
 800b216:	f107 070c 	add.w	r7, r7, #12
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bc80      	pop	{r7}
 800b21e:	4770      	bx	lr

0800b220 <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800b220:	b480      	push	{r7}
 800b222:	b085      	sub	sp, #20
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b228:	f04f 0300 	mov.w	r3, #0
 800b22c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800b22e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b232:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b240:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	4313      	orrs	r3, r2
 800b248:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800b24a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b24e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	601a      	str	r2, [r3, #0]
}
 800b256:	f107 0714 	add.w	r7, r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bc80      	pop	{r7}
 800b25e:	4770      	bx	lr

0800b260 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800b26a:	f04f 0310 	mov.w	r3, #16
 800b26e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b272:	79fa      	ldrb	r2, [r7, #7]
 800b274:	601a      	str	r2, [r3, #0]
}
 800b276:	f107 070c 	add.w	r7, r7, #12
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bc80      	pop	{r7}
 800b27e:	4770      	bx	lr

0800b280 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	4603      	mov	r3, r0
 800b288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800b28a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b28e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b292:	79fa      	ldrb	r2, [r7, #7]
 800b294:	601a      	str	r2, [r3, #0]
}
 800b296:	f107 070c 	add.w	r7, r7, #12
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr

0800b2a0 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800b2aa:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 800b2ae:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b2b2:	79fa      	ldrb	r2, [r7, #7]
 800b2b4:	601a      	str	r2, [r3, #0]
}
 800b2b6:	f107 070c 	add.w	r7, r7, #12
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bc80      	pop	{r7}
 800b2be:	4770      	bx	lr

0800b2c0 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d10c      	bne.n	800b2e8 <PWR_MainRegulatorModeConfig+0x28>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 800b2ce:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b2d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2d6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b2da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b2de:	6812      	ldr	r2, [r2, #0]
 800b2e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	e00b      	b.n	800b300 <PWR_MainRegulatorModeConfig+0x40>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 800b2e8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b2ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2f0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b2f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b2f8:	6812      	ldr	r2, [r2, #0]
 800b2fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2fe:	601a      	str	r2, [r3, #0]
  }
}
 800b300:	f107 070c 	add.w	r7, r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	bc80      	pop	{r7}
 800b308:	4770      	bx	lr
 800b30a:	bf00      	nop

0800b30c <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800b316:	f04f 0324 	mov.w	r3, #36	; 0x24
 800b31a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b31e:	79fa      	ldrb	r2, [r7, #7]
 800b320:	601a      	str	r2, [r3, #0]
}
 800b322:	f107 070c 	add.w	r7, r7, #12
 800b326:	46bd      	mov	sp, r7
 800b328:	bc80      	pop	{r7}
 800b32a:	4770      	bx	lr

0800b32c <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b085      	sub	sp, #20
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
 800b334:	460b      	mov	r3, r1
 800b336:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800b338:	f04f 0300 	mov.w	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800b33e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b342:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f023 0303 	bic.w	r3, r3, #3
 800b350:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800b35a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b35e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b362:	68fa      	ldr	r2, [r7, #12]
 800b364:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800b366:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b36a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b36e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b372:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b376:	6912      	ldr	r2, [r2, #16]
 800b378:	f042 0204 	orr.w	r2, r2, #4
 800b37c:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800b37e:	78fb      	ldrb	r3, [r7, #3]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d101      	bne.n	800b388 <PWR_EnterSTOPMode+0x5c>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800b384:	bf30      	wfi
 800b386:	e000      	b.n	800b38a <PWR_EnterSTOPMode+0x5e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800b388:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800b38a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b38e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b392:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b396:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b39a:	6912      	ldr	r2, [r2, #16]
 800b39c:	f022 0204 	bic.w	r2, r2, #4
 800b3a0:	611a      	str	r2, [r3, #16]
}
 800b3a2:	f107 0714 	add.w	r7, r7, #20
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bc80      	pop	{r7}
 800b3aa:	4770      	bx	lr

0800b3ac <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800b3b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b3b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3b8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b3bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b3c0:	6812      	ldr	r2, [r2, #0]
 800b3c2:	f042 0204 	orr.w	r2, r2, #4
 800b3c6:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800b3c8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b3cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3d0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b3d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b3d8:	6812      	ldr	r2, [r2, #0]
 800b3da:	f042 0202 	orr.w	r2, r2, #2
 800b3de:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800b3e0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800b3e4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800b3e8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800b3ec:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800b3f0:	6912      	ldr	r2, [r2, #16]
 800b3f2:	f042 0204 	orr.w	r2, r2, #4
 800b3f6:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800b3f8:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bc80      	pop	{r7}
 800b3fe:	4770      	bx	lr

0800b400 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800b408:	f04f 0300 	mov.w	r3, #0
 800b40c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800b40e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b412:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b416:	685a      	ldr	r2, [r3, #4]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4013      	ands	r3, r2
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d003      	beq.n	800b428 <PWR_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800b420:	f04f 0301 	mov.w	r3, #1
 800b424:	73fb      	strb	r3, [r7, #15]
 800b426:	e002      	b.n	800b42e <PWR_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800b428:	f04f 0300 	mov.w	r3, #0
 800b42c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800b42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b430:	4618      	mov	r0, r3
 800b432:	f107 0714 	add.w	r7, r7, #20
 800b436:	46bd      	mov	sp, r7
 800b438:	bc80      	pop	{r7}
 800b43a:	4770      	bx	lr

0800b43c <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800b444:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b448:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b44c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800b450:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b454:	6811      	ldr	r1, [r2, #0]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800b45c:	430a      	orrs	r2, r1
 800b45e:	601a      	str	r2, [r3, #0]
}
 800b460:	f107 070c 	add.w	r7, r7, #12
 800b464:	46bd      	mov	sp, r7
 800b466:	bc80      	pop	{r7}
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop

0800b46c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800b46c:	b480      	push	{r7}
 800b46e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800b470:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b478:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b47c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b480:	6812      	ldr	r2, [r2, #0]
 800b482:	f042 0201 	orr.w	r2, r2, #1
 800b486:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b488:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b48c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b490:	f04f 0200 	mov.w	r2, #0
 800b494:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b496:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b49a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b49e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b4a2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b4a6:	6812      	ldr	r2, [r2, #0]
 800b4a8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b4ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b4b0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b4b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4ba:	f243 0210 	movw	r2, #12304	; 0x3010
 800b4be:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800b4c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b4c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800b4d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800b4d4:	6812      	ldr	r2, [r2, #0]
 800b4d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b4da:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b4dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b4e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b4e4:	f04f 0200 	mov.w	r2, #0
 800b4e8:	60da      	str	r2, [r3, #12]
}
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bc80      	pop	{r7}
 800b4ee:	4770      	bx	lr

0800b4f0 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b083      	sub	sp, #12
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800b4fa:	f643 0302 	movw	r3, #14338	; 0x3802
 800b4fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b502:	f04f 0200 	mov.w	r2, #0
 800b506:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800b508:	f643 0302 	movw	r3, #14338	; 0x3802
 800b50c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b510:	79fa      	ldrb	r2, [r7, #7]
 800b512:	701a      	strb	r2, [r3, #0]
}
 800b514:	f107 070c 	add.w	r7, r7, #12
 800b518:	46bd      	mov	sp, r7
 800b51a:	bc80      	pop	{r7}
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop

0800b520 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b082      	sub	sp, #8
 800b524:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800b526:	f04f 0300 	mov.w	r3, #0
 800b52a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800b52c:	f04f 0300 	mov.w	r3, #0
 800b530:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800b532:	f04f 0300 	mov.w	r3, #0
 800b536:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800b538:	f04f 0031 	mov.w	r0, #49	; 0x31
 800b53c:	f000 fdd2 	bl	800c0e4 <RCC_GetFlagStatus>
 800b540:	4603      	mov	r3, r0
 800b542:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	f103 0301 	add.w	r3, r3, #1
 800b54a:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800b552:	d002      	beq.n	800b55a <RCC_WaitForHSEStartUp+0x3a>
 800b554:	79bb      	ldrb	r3, [r7, #6]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0ee      	beq.n	800b538 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800b55a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800b55e:	f000 fdc1 	bl	800c0e4 <RCC_GetFlagStatus>
 800b562:	4603      	mov	r3, r0
 800b564:	2b00      	cmp	r3, #0
 800b566:	d003      	beq.n	800b570 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 800b568:	f04f 0301 	mov.w	r3, #1
 800b56c:	71fb      	strb	r3, [r7, #7]
 800b56e:	e002      	b.n	800b576 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 800b570:	f04f 0300 	mov.w	r3, #0
 800b574:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800b576:	79fb      	ldrb	r3, [r7, #7]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	f107 0708 	add.w	r7, r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop

0800b584 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
 800b58a:	4603      	mov	r3, r0
 800b58c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800b594:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b598:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b5a6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800b5b4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b5b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	601a      	str	r2, [r3, #0]
}
 800b5c0:	f107 0714 	add.w	r7, r7, #20
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bc80      	pop	{r7}
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop

0800b5cc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800b5d6:	f04f 0300 	mov.w	r3, #0
 800b5da:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800b5de:	79fa      	ldrb	r2, [r7, #7]
 800b5e0:	601a      	str	r2, [r3, #0]
}
 800b5e2:	f107 070c 	add.w	r7, r7, #12
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bc80      	pop	{r7}
 800b5ea:	4770      	bx	lr

0800b5ec <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800b5f6:	f643 0370 	movw	r3, #14448	; 0x3870
 800b5fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b5fe:	f04f 0200 	mov.w	r2, #0
 800b602:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800b604:	f643 0370 	movw	r3, #14448	; 0x3870
 800b608:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800b612:	79fb      	ldrb	r3, [r7, #7]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d002      	beq.n	800b61e <RCC_LSEConfig+0x32>
 800b618:	2b04      	cmp	r3, #4
 800b61a:	d008      	beq.n	800b62e <RCC_LSEConfig+0x42>
 800b61c:	e00f      	b.n	800b63e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800b61e:	f643 0370 	movw	r3, #14448	; 0x3870
 800b622:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b626:	f04f 0201 	mov.w	r2, #1
 800b62a:	701a      	strb	r2, [r3, #0]
      break;
 800b62c:	e008      	b.n	800b640 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800b62e:	f643 0370 	movw	r3, #14448	; 0x3870
 800b632:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b636:	f04f 0205 	mov.w	r2, #5
 800b63a:	701a      	strb	r2, [r3, #0]
      break;
 800b63c:	e000      	b.n	800b640 <RCC_LSEConfig+0x54>
    default:
      break;
 800b63e:	bf00      	nop
  }
}
 800b640:	f107 070c 	add.w	r7, r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	bc80      	pop	{r7}
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop

0800b64c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800b656:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800b65a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800b65e:	79fa      	ldrb	r2, [r7, #7]
 800b660:	601a      	str	r2, [r3, #0]
}
 800b662:	f107 070c 	add.w	r7, r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	bc80      	pop	{r7}
 800b66a:	4770      	bx	lr

0800b66c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]
 800b678:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800b67a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b67e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b682:	687a      	ldr	r2, [r7, #4]
 800b684:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	4311      	orrs	r1, r2
 800b68c:	683a      	ldr	r2, [r7, #0]
 800b68e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b692:	f102 32ff 	add.w	r2, r2, #4294967295
 800b696:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800b69a:	4311      	orrs	r1, r2
 800b69c:	68fa      	ldr	r2, [r7, #12]
 800b69e:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800b6a0:	69ba      	ldr	r2, [r7, #24]
 800b6a2:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800b6a6:	430a      	orrs	r2, r1
 800b6a8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800b6aa:	f107 0714 	add.w	r7, r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bc80      	pop	{r7}
 800b6b2:	4770      	bx	lr

0800b6b4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800b6be:	f04f 0360 	mov.w	r3, #96	; 0x60
 800b6c2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800b6c6:	79fa      	ldrb	r2, [r7, #7]
 800b6c8:	601a      	str	r2, [r3, #0]
}
 800b6ca:	f107 070c 	add.w	r7, r7, #12
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bc80      	pop	{r7}
 800b6d2:	4770      	bx	lr

0800b6d4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800b6de:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b6e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800b6ec:	683a      	ldr	r2, [r7, #0]
 800b6ee:	ea4f 7202 	mov.w	r2, r2, lsl #28
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800b6f8:	f107 070c 	add.w	r7, r7, #12
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bc80      	pop	{r7}
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop

0800b704 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	4603      	mov	r3, r0
 800b70c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800b70e:	f04f 0368 	mov.w	r3, #104	; 0x68
 800b712:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800b716:	79fa      	ldrb	r2, [r7, #7]
 800b718:	601a      	str	r2, [r3, #0]
}
 800b71a:	f107 070c 	add.w	r7, r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	bc80      	pop	{r7}
 800b722:	4770      	bx	lr

0800b724 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800b72e:	f04f 034c 	mov.w	r3, #76	; 0x4c
 800b732:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800b736:	79fa      	ldrb	r2, [r7, #7]
 800b738:	601a      	str	r2, [r3, #0]
}
 800b73a:	f107 070c 	add.w	r7, r7, #12
 800b73e:	46bd      	mov	sp, r7
 800b740:	bc80      	pop	{r7}
 800b742:	4770      	bx	lr

0800b744 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b74e:	f04f 0300 	mov.w	r3, #0
 800b752:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800b754:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b758:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800b766:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4313      	orrs	r3, r2
 800b772:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800b774:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	609a      	str	r2, [r3, #8]
}
 800b780:	f107 0714 	add.w	r7, r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	bc80      	pop	{r7}
 800b788:	4770      	bx	lr
 800b78a:	bf00      	nop

0800b78c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800b79c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b7a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800b7bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b7c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b7c4:	68fa      	ldr	r2, [r7, #12]
 800b7c6:	609a      	str	r2, [r3, #8]
}
 800b7c8:	f107 0714 	add.w	r7, r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bc80      	pop	{r7}
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop

0800b7d4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b085      	sub	sp, #20
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b7dc:	f04f 0300 	mov.w	r3, #0
 800b7e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800b7e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b7e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f023 0303 	bic.w	r3, r3, #3
 800b7f4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800b7f6:	68fa      	ldr	r2, [r7, #12]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800b7fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b802:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	609a      	str	r2, [r3, #8]
}
 800b80a:	f107 0714 	add.w	r7, r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	bc80      	pop	{r7}
 800b812:	4770      	bx	lr

0800b814 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800b814:	b480      	push	{r7}
 800b816:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800b818:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b81c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b820:	689b      	ldr	r3, [r3, #8]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	f003 030c 	and.w	r3, r3, #12
 800b828:	b2db      	uxtb	r3, r3
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bc80      	pop	{r7}
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop

0800b834 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800b834:	b480      	push	{r7}
 800b836:	b085      	sub	sp, #20
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b83c:	f04f 0300 	mov.w	r3, #0
 800b840:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800b842:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b846:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b84a:	689b      	ldr	r3, [r3, #8]
 800b84c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b854:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	4313      	orrs	r3, r2
 800b85c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800b85e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b862:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	609a      	str	r2, [r3, #8]
}
 800b86a:	f107 0714 	add.w	r7, r7, #20
 800b86e:	46bd      	mov	sp, r7
 800b870:	bc80      	pop	{r7}
 800b872:	4770      	bx	lr

0800b874 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b87c:	f04f 0300 	mov.w	r3, #0
 800b880:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800b882:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b886:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800b894:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4313      	orrs	r3, r2
 800b89c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800b89e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b8a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b8a6:	68fa      	ldr	r2, [r7, #12]
 800b8a8:	609a      	str	r2, [r3, #8]
}
 800b8aa:	f107 0714 	add.w	r7, r7, #20
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bc80      	pop	{r7}
 800b8b2:	4770      	bx	lr

0800b8b4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800b8b4:	b480      	push	{r7}
 800b8b6:	b085      	sub	sp, #20
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b8bc:	f04f 0300 	mov.w	r3, #0
 800b8c0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800b8c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b8c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800b8d4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b8dc:	68fa      	ldr	r2, [r7, #12]
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800b8e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b8e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	609a      	str	r2, [r3, #8]
}
 800b8ee:	f107 0714 	add.w	r7, r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bc80      	pop	{r7}
 800b8f6:	4770      	bx	lr

0800b8f8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b089      	sub	sp, #36	; 0x24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800b900:	f04f 0300 	mov.w	r3, #0
 800b904:	61bb      	str	r3, [r7, #24]
 800b906:	f04f 0300 	mov.w	r3, #0
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	f04f 0300 	mov.w	r3, #0
 800b910:	61fb      	str	r3, [r7, #28]
 800b912:	f04f 0302 	mov.w	r3, #2
 800b916:	613b      	str	r3, [r7, #16]
 800b918:	f04f 0300 	mov.w	r3, #0
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	f04f 0302 	mov.w	r3, #2
 800b922:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800b924:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b928:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	f003 030c 	and.w	r3, r3, #12
 800b932:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	2b04      	cmp	r3, #4
 800b938:	d00a      	beq.n	800b950 <RCC_GetClocksFreq+0x58>
 800b93a:	2b08      	cmp	r3, #8
 800b93c:	d00f      	beq.n	800b95e <RCC_GetClocksFreq+0x66>
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d160      	bne.n	800ba04 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b948:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800b94c:	6013      	str	r3, [r2, #0]
      break;
 800b94e:	e060      	b.n	800ba12 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b956:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b95a:	6013      	str	r3, [r2, #0]
      break;
 800b95c:	e059      	b.n	800ba12 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800b95e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b962:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b96c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800b970:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b972:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b976:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b980:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d014      	beq.n	800b9b2 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800b988:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b98c:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b990:	68ba      	ldr	r2, [r7, #8]
 800b992:	fbb3 f2f2 	udiv	r2, r3, r2
 800b996:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b99a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b99e:	6859      	ldr	r1, [r3, #4]
 800b9a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b9a4:	400b      	ands	r3, r1
 800b9a6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b9aa:	fb03 f302 	mul.w	r3, r3, r2
 800b9ae:	61fb      	str	r3, [r7, #28]
 800b9b0:	e013      	b.n	800b9da <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800b9b2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800b9b6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800b9ba:	68ba      	ldr	r2, [r7, #8]
 800b9bc:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b9c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b9c8:	6859      	ldr	r1, [r3, #4]
 800b9ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b9ce:	400b      	ands	r3, r1
 800b9d0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800b9d4:	fb03 f302 	mul.w	r3, r3, r2
 800b9d8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800b9da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800b9de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b9e8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b9ec:	f103 0301 	add.w	r3, r3, #1
 800b9f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9f4:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	fbb2 f2f3 	udiv	r2, r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	601a      	str	r2, [r3, #0]
      break;
 800ba02:	e006      	b.n	800ba12 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800ba0a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800ba0e:	6013      	str	r3, [r2, #0]
      break;
 800ba10:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800ba12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ba16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba20:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800ba22:	69bb      	ldr	r3, [r7, #24]
 800ba24:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ba28:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800ba2a:	f240 0350 	movw	r3, #80	; 0x50
 800ba2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba32:	69ba      	ldr	r2, [r7, #24]
 800ba34:	189b      	adds	r3, r3, r2
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	fa22 f203 	lsr.w	r2, r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800ba4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ba4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800ba58:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800ba60:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800ba62:	f240 0350 	movw	r3, #80	; 0x50
 800ba66:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800ba6a:	69ba      	ldr	r2, [r7, #24]
 800ba6c:	189b      	adds	r3, r3, r2
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	697b      	ldr	r3, [r7, #20]
 800ba7a:	fa22 f203 	lsr.w	r2, r2, r3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800ba82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ba86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ba8a:	689b      	ldr	r3, [r3, #8]
 800ba8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ba90:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800ba98:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800ba9a:	f240 0350 	movw	r3, #80	; 0x50
 800ba9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800baa2:	69ba      	ldr	r2, [r7, #24]
 800baa4:	189b      	adds	r3, r3, r2
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	685a      	ldr	r2, [r3, #4]
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	fa22 f203 	lsr.w	r2, r2, r3
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]
}
 800baba:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bc80      	pop	{r7}
 800bac2:	4770      	bx	lr

0800bac4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b085      	sub	sp, #20
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bacc:	f04f 0300 	mov.w	r3, #0
 800bad0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800badc:	d117      	bne.n	800bb0e <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800bade:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bae2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800baf0:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800baf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800bb02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bb06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800bb0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bb12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bb16:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bb1a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bb1e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800bb26:	ea4f 5212 	mov.w	r2, r2, lsr #20
 800bb2a:	430a      	orrs	r2, r1
 800bb2c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bb2e:	f107 0714 	add.w	r7, r7, #20
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bc80      	pop	{r7}
 800bb36:	4770      	bx	lr

0800bb38 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b083      	sub	sp, #12
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	4603      	mov	r3, r0
 800bb40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800bb42:	f640 633c 	movw	r3, #3644	; 0xe3c
 800bb46:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800bb4a:	79fa      	ldrb	r2, [r7, #7]
 800bb4c:	601a      	str	r2, [r3, #0]
}
 800bb4e:	f107 070c 	add.w	r7, r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bc80      	pop	{r7}
 800bb56:	4770      	bx	lr

0800bb58 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800bb62:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800bb66:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800bb6a:	79fa      	ldrb	r2, [r7, #7]
 800bb6c:	601a      	str	r2, [r3, #0]
}
 800bb6e:	f107 070c 	add.w	r7, r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bc80      	pop	{r7}
 800bb76:	4770      	bx	lr

0800bb78 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800bb78:	b480      	push	{r7}
 800bb7a:	b083      	sub	sp, #12
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800bb80:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800bb84:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	601a      	str	r2, [r3, #0]
}
 800bb8c:	f107 070c 	add.w	r7, r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bc80      	pop	{r7}
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop

0800bb98 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d00c      	beq.n	800bbc4 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800bbaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bbae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bbb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bbb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bbba:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	430a      	orrs	r2, r1
 800bbc0:	631a      	str	r2, [r3, #48]	; 0x30
 800bbc2:	e00d      	b.n	800bbe0 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800bbc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bbc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bbcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bbd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bbd4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	ea6f 0202 	mvn.w	r2, r2
 800bbdc:	400a      	ands	r2, r1
 800bbde:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800bbe0:	f107 070c 	add.w	r7, r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bc80      	pop	{r7}
 800bbe8:	4770      	bx	lr
 800bbea:	bf00      	nop

0800bbec <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bbf8:	78fb      	ldrb	r3, [r7, #3]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00c      	beq.n	800bc18 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800bbfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bc02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc06:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bc0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bc0e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	430a      	orrs	r2, r1
 800bc14:	635a      	str	r2, [r3, #52]	; 0x34
 800bc16:	e00d      	b.n	800bc34 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800bc18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bc1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bc24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bc28:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	ea6f 0202 	mvn.w	r2, r2
 800bc30:	400a      	ands	r2, r1
 800bc32:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800bc34:	f107 070c 	add.w	r7, r7, #12
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bc80      	pop	{r7}
 800bc3c:	4770      	bx	lr
 800bc3e:	bf00      	nop

0800bc40 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	460b      	mov	r3, r1
 800bc4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bc4c:	78fb      	ldrb	r3, [r7, #3]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d00c      	beq.n	800bc6c <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800bc52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bc56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bc5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bc62:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	639a      	str	r2, [r3, #56]	; 0x38
 800bc6a:	e00d      	b.n	800bc88 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800bc6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bc70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bc78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bc7c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	ea6f 0202 	mvn.w	r2, r2
 800bc84:	400a      	ands	r2, r1
 800bc86:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800bc88:	f107 070c 	add.w	r7, r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bc80      	pop	{r7}
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop

0800bc94 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d00c      	beq.n	800bcc0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800bca6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bcaa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bcae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bcb2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bcb6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	430a      	orrs	r2, r1
 800bcbc:	641a      	str	r2, [r3, #64]	; 0x40
 800bcbe:	e00d      	b.n	800bcdc <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800bcc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bcc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bcc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bccc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bcd0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	ea6f 0202 	mvn.w	r2, r2
 800bcd8:	400a      	ands	r2, r1
 800bcda:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800bcdc:	f107 070c 	add.w	r7, r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bc80      	pop	{r7}
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop

0800bce8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bcf4:	78fb      	ldrb	r3, [r7, #3]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d00c      	beq.n	800bd14 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800bcfa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bcfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd02:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bd06:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bd0a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	645a      	str	r2, [r3, #68]	; 0x44
 800bd12:	e00d      	b.n	800bd30 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800bd14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bd18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bd20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bd24:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	ea6f 0202 	mvn.w	r2, r2
 800bd2c:	400a      	ands	r2, r1
 800bd2e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800bd30:	f107 070c 	add.w	r7, r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bc80      	pop	{r7}
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop

0800bd3c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00c      	beq.n	800bd68 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800bd4e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bd52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd56:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bd5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bd5e:	6911      	ldr	r1, [r2, #16]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	430a      	orrs	r2, r1
 800bd64:	611a      	str	r2, [r3, #16]
 800bd66:	e00d      	b.n	800bd84 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800bd68:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bd6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd70:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bd74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bd78:	6911      	ldr	r1, [r2, #16]
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	ea6f 0202 	mvn.w	r2, r2
 800bd80:	400a      	ands	r2, r1
 800bd82:	611a      	str	r2, [r3, #16]
  }
}
 800bd84:	f107 070c 	add.w	r7, r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bc80      	pop	{r7}
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop

0800bd90 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	460b      	mov	r3, r1
 800bd9a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bd9c:	78fb      	ldrb	r3, [r7, #3]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00c      	beq.n	800bdbc <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800bda2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bda6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bdaa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bdae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bdb2:	6951      	ldr	r1, [r2, #20]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	430a      	orrs	r2, r1
 800bdb8:	615a      	str	r2, [r3, #20]
 800bdba:	e00d      	b.n	800bdd8 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800bdbc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bdc0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bdc4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bdc8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bdcc:	6951      	ldr	r1, [r2, #20]
 800bdce:	687a      	ldr	r2, [r7, #4]
 800bdd0:	ea6f 0202 	mvn.w	r2, r2
 800bdd4:	400a      	ands	r2, r1
 800bdd6:	615a      	str	r2, [r3, #20]
  }
}
 800bdd8:	f107 070c 	add.w	r7, r7, #12
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bc80      	pop	{r7}
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop

0800bde4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
 800bdec:	460b      	mov	r3, r1
 800bdee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800bdf0:	78fb      	ldrb	r3, [r7, #3]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00c      	beq.n	800be10 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800bdf6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bdfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bdfe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800be02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800be06:	6991      	ldr	r1, [r2, #24]
 800be08:	687a      	ldr	r2, [r7, #4]
 800be0a:	430a      	orrs	r2, r1
 800be0c:	619a      	str	r2, [r3, #24]
 800be0e:	e00d      	b.n	800be2c <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800be10:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800be14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800be18:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800be1c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800be20:	6991      	ldr	r1, [r2, #24]
 800be22:	687a      	ldr	r2, [r7, #4]
 800be24:	ea6f 0202 	mvn.w	r2, r2
 800be28:	400a      	ands	r2, r1
 800be2a:	619a      	str	r2, [r3, #24]
  }
}
 800be2c:	f107 070c 	add.w	r7, r7, #12
 800be30:	46bd      	mov	sp, r7
 800be32:	bc80      	pop	{r7}
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop

0800be38 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800be38:	b480      	push	{r7}
 800be3a:	b083      	sub	sp, #12
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d00c      	beq.n	800be64 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800be4a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800be4e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800be52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800be56:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800be5a:	6a11      	ldr	r1, [r2, #32]
 800be5c:	687a      	ldr	r2, [r7, #4]
 800be5e:	430a      	orrs	r2, r1
 800be60:	621a      	str	r2, [r3, #32]
 800be62:	e00d      	b.n	800be80 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800be64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800be68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800be6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800be70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800be74:	6a11      	ldr	r1, [r2, #32]
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	ea6f 0202 	mvn.w	r2, r2
 800be7c:	400a      	ands	r2, r1
 800be7e:	621a      	str	r2, [r3, #32]
  }
}
 800be80:	f107 070c 	add.w	r7, r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	bc80      	pop	{r7}
 800be88:	4770      	bx	lr
 800be8a:	bf00      	nop

0800be8c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b083      	sub	sp, #12
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00c      	beq.n	800beb8 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800be9e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bea2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bea6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800beaa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800beae:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	430a      	orrs	r2, r1
 800beb4:	625a      	str	r2, [r3, #36]	; 0x24
 800beb6:	e00d      	b.n	800bed4 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800beb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bebc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bec0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bec4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bec8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	ea6f 0202 	mvn.w	r2, r2
 800bed0:	400a      	ands	r2, r1
 800bed2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bed4:	f107 070c 	add.w	r7, r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	bc80      	pop	{r7}
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop

0800bee0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800beec:	78fb      	ldrb	r3, [r7, #3]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00c      	beq.n	800bf0c <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800bef2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800befa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800befe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bf02:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	651a      	str	r2, [r3, #80]	; 0x50
 800bf0a:	e00d      	b.n	800bf28 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800bf0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bf18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bf1c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	ea6f 0202 	mvn.w	r2, r2
 800bf24:	400a      	ands	r2, r1
 800bf26:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800bf28:	f107 070c 	add.w	r7, r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	bc80      	pop	{r7}
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop

0800bf34 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b083      	sub	sp, #12
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bf40:	78fb      	ldrb	r3, [r7, #3]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00c      	beq.n	800bf60 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800bf46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf4e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bf52:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bf56:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	655a      	str	r2, [r3, #84]	; 0x54
 800bf5e:	e00d      	b.n	800bf7c <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800bf60:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bf6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bf70:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	ea6f 0202 	mvn.w	r2, r2
 800bf78:	400a      	ands	r2, r1
 800bf7a:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800bf7c:	f107 070c 	add.w	r7, r7, #12
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bc80      	pop	{r7}
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop

0800bf88 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bf94:	78fb      	ldrb	r3, [r7, #3]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00c      	beq.n	800bfb4 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800bf9a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bfa2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bfa6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bfaa:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	430a      	orrs	r2, r1
 800bfb0:	659a      	str	r2, [r3, #88]	; 0x58
 800bfb2:	e00d      	b.n	800bfd0 <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800bfb4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bfb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bfbc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bfc0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bfc4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	ea6f 0202 	mvn.w	r2, r2
 800bfcc:	400a      	ands	r2, r1
 800bfce:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800bfd0:	f107 070c 	add.w	r7, r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bc80      	pop	{r7}
 800bfd8:	4770      	bx	lr
 800bfda:	bf00      	nop

0800bfdc <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bfe8:	78fb      	ldrb	r3, [r7, #3]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00c      	beq.n	800c008 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800bfee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bff2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bff6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bffa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bffe:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	430a      	orrs	r2, r1
 800c004:	661a      	str	r2, [r3, #96]	; 0x60
 800c006:	e00d      	b.n	800c024 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800c008:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c00c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c010:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c014:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c018:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800c01a:	687a      	ldr	r2, [r7, #4]
 800c01c:	ea6f 0202 	mvn.w	r2, r2
 800c020:	400a      	ands	r2, r1
 800c022:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800c024:	f107 070c 	add.w	r7, r7, #12
 800c028:	46bd      	mov	sp, r7
 800c02a:	bc80      	pop	{r7}
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop

0800c030 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	460b      	mov	r3, r1
 800c03a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d00c      	beq.n	800c05c <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800c042:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c046:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c04a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c04e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c052:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800c054:	687a      	ldr	r2, [r7, #4]
 800c056:	430a      	orrs	r2, r1
 800c058:	665a      	str	r2, [r3, #100]	; 0x64
 800c05a:	e00d      	b.n	800c078 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800c05c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c064:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c068:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c06c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800c06e:	687a      	ldr	r2, [r7, #4]
 800c070:	ea6f 0202 	mvn.w	r2, r2
 800c074:	400a      	ands	r2, r1
 800c076:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800c078:	f107 070c 	add.w	r7, r7, #12
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bc80      	pop	{r7}
 800c080:	4770      	bx	lr
 800c082:	bf00      	nop

0800c084 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4602      	mov	r2, r0
 800c08c:	460b      	mov	r3, r1
 800c08e:	71fa      	strb	r2, [r7, #7]
 800c090:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c092:	79bb      	ldrb	r3, [r7, #6]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d00e      	beq.n	800c0b6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800c098:	f643 030d 	movw	r3, #14349	; 0x380d
 800c09c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c0a0:	f643 020d 	movw	r2, #14349	; 0x380d
 800c0a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c0a8:	7812      	ldrb	r2, [r2, #0]
 800c0aa:	b2d1      	uxtb	r1, r2
 800c0ac:	79fa      	ldrb	r2, [r7, #7]
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	b2d2      	uxtb	r2, r2
 800c0b2:	701a      	strb	r2, [r3, #0]
 800c0b4:	e010      	b.n	800c0d8 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800c0b6:	f643 030d 	movw	r3, #14349	; 0x380d
 800c0ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c0be:	f643 020d 	movw	r2, #14349	; 0x380d
 800c0c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c0c6:	7812      	ldrb	r2, [r2, #0]
 800c0c8:	b2d1      	uxtb	r1, r2
 800c0ca:	79fa      	ldrb	r2, [r7, #7]
 800c0cc:	ea6f 0202 	mvn.w	r2, r2
 800c0d0:	b2d2      	uxtb	r2, r2
 800c0d2:	400a      	ands	r2, r1
 800c0d4:	b2d2      	uxtb	r2, r2
 800c0d6:	701a      	strb	r2, [r3, #0]
  }
}
 800c0d8:	f107 070c 	add.w	r7, r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bc80      	pop	{r7}
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop

0800c0e4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b087      	sub	sp, #28
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800c0ee:	f04f 0300 	mov.w	r3, #0
 800c0f2:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800c0f4:	f04f 0300 	mov.w	r3, #0
 800c0f8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800c0fa:	f04f 0300 	mov.w	r3, #0
 800c0fe:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800c100:	79fb      	ldrb	r3, [r7, #7]
 800c102:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800c106:	b2db      	uxtb	r3, r3
 800c108:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b01      	cmp	r3, #1
 800c10e:	d106      	bne.n	800c11e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800c110:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c114:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	617b      	str	r3, [r7, #20]
 800c11c:	e00f      	b.n	800c13e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b02      	cmp	r3, #2
 800c122:	d106      	bne.n	800c132 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800c124:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c128:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c12e:	617b      	str	r3, [r7, #20]
 800c130:	e005      	b.n	800c13e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800c132:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c136:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c13a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c13c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800c13e:	79fb      	ldrb	r3, [r7, #7]
 800c140:	f003 031f 	and.w	r3, r3, #31
 800c144:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	fa22 f303 	lsr.w	r3, r2, r3
 800c14e:	f003 0301 	and.w	r3, r3, #1
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b00      	cmp	r3, #0
 800c156:	d003      	beq.n	800c160 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 800c158:	f04f 0301 	mov.w	r3, #1
 800c15c:	74fb      	strb	r3, [r7, #19]
 800c15e:	e002      	b.n	800c166 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 800c160:	f04f 0300 	mov.w	r3, #0
 800c164:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800c166:	7cfb      	ldrb	r3, [r7, #19]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	f107 071c 	add.w	r7, r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr

0800c174 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800c174:	b480      	push	{r7}
 800c176:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800c178:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c17c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c180:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c184:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c188:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c18a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800c18e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c190:	46bd      	mov	sp, r7
 800c192:	bc80      	pop	{r7}
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop

0800c198 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800c198:	b480      	push	{r7}
 800c19a:	b085      	sub	sp, #20
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	4603      	mov	r3, r0
 800c1a0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800c1a2:	f04f 0300 	mov.w	r3, #0
 800c1a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800c1a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c1ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c1b0:	68da      	ldr	r2, [r3, #12]
 800c1b2:	79fb      	ldrb	r3, [r7, #7]
 800c1b4:	4013      	ands	r3, r2
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800c1ba:	f04f 0301 	mov.w	r3, #1
 800c1be:	73fb      	strb	r3, [r7, #15]
 800c1c0:	e002      	b.n	800c1c8 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800c1c2:	f04f 0300 	mov.w	r3, #0
 800c1c6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800c1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	f107 0714 	add.w	r7, r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bc80      	pop	{r7}
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop

0800c1d8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b083      	sub	sp, #12
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800c1e2:	f643 030e 	movw	r3, #14350	; 0x380e
 800c1e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c1ea:	79fa      	ldrb	r2, [r7, #7]
 800c1ec:	701a      	strb	r2, [r3, #0]
}
 800c1ee:	f107 070c 	add.w	r7, r7, #12
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bc80      	pop	{r7}
 800c1f6:	4770      	bx	lr

0800c1f8 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800c1fc:	f04f 0040 	mov.w	r0, #64	; 0x40
 800c200:	f04f 0101 	mov.w	r1, #1
 800c204:	f7ff fdc4 	bl	800bd90 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800c208:	f04f 0040 	mov.w	r0, #64	; 0x40
 800c20c:	f04f 0100 	mov.w	r1, #0
 800c210:	f7ff fdbe 	bl	800bd90 <RCC_AHB2PeriphResetCmd>
}
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop

0800c218 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	4603      	mov	r3, r0
 800c220:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c222:	79fb      	ldrb	r3, [r7, #7]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d00c      	beq.n	800c242 <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800c228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c22c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c230:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c234:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c238:	6812      	ldr	r2, [r2, #0]
 800c23a:	f042 0204 	orr.w	r2, r2, #4
 800c23e:	601a      	str	r2, [r3, #0]
 800c240:	e00b      	b.n	800c25a <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800c242:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c246:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c24a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c24e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c252:	6812      	ldr	r2, [r2, #0]
 800c254:	f022 0204 	bic.w	r2, r2, #4
 800c258:	601a      	str	r2, [r3, #0]
  }
}
 800c25a:	f107 070c 	add.w	r7, r7, #12
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr

0800c264 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800c264:	b480      	push	{r7}
 800c266:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800c268:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c26c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c270:	689b      	ldr	r3, [r3, #8]
}
 800c272:	4618      	mov	r0, r3
 800c274:	46bd      	mov	sp, r7
 800c276:	bc80      	pop	{r7}
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop

0800c27c <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800c27c:	b480      	push	{r7}
 800c27e:	b083      	sub	sp, #12
 800c280:	af00      	add	r7, sp, #0
 800c282:	4603      	mov	r3, r0
 800c284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00c      	beq.n	800c2a6 <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800c28c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c290:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c294:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c298:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c29c:	6812      	ldr	r2, [r2, #0]
 800c29e:	f042 0208 	orr.w	r2, r2, #8
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	e00b      	b.n	800c2be <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 800c2a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c2ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c2b2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c2b6:	6812      	ldr	r2, [r2, #0]
 800c2b8:	f022 0208 	bic.w	r2, r2, #8
 800c2bc:	601a      	str	r2, [r3, #0]
  }
}
 800c2be:	f107 070c 	add.w	r7, r7, #12
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bc80      	pop	{r7}
 800c2c6:	4770      	bx	lr

0800c2c8 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800c2d2:	f04f 0300 	mov.w	r3, #0
 800c2d6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800c2d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c2e0:	685a      	ldr	r2, [r3, #4]
 800c2e2:	79fb      	ldrb	r3, [r7, #7]
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800c2ea:	f04f 0301 	mov.w	r3, #1
 800c2ee:	73fb      	strb	r3, [r7, #15]
 800c2f0:	e002      	b.n	800c2f8 <RNG_GetFlagStatus+0x30>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800c2f2:	f04f 0300 	mov.w	r3, #0
 800c2f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f107 0714 	add.w	r7, r7, #20
 800c300:	46bd      	mov	sp, r7
 800c302:	bc80      	pop	{r7}
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop

0800c308 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	4603      	mov	r3, r0
 800c310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800c312:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c316:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c31a:	79fa      	ldrb	r2, [r7, #7]
 800c31c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800c320:	ea6f 0202 	mvn.w	r2, r2
 800c324:	605a      	str	r2, [r3, #4]
}
 800c326:	f107 070c 	add.w	r7, r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	bc80      	pop	{r7}
 800c32e:	4770      	bx	lr

0800c330 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800c330:	b480      	push	{r7}
 800c332:	b085      	sub	sp, #20
 800c334:	af00      	add	r7, sp, #0
 800c336:	4603      	mov	r3, r0
 800c338:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800c33a:	f04f 0300 	mov.w	r3, #0
 800c33e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800c340:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c344:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c348:	685a      	ldr	r2, [r3, #4]
 800c34a:	79fb      	ldrb	r3, [r7, #7]
 800c34c:	4013      	ands	r3, r2
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800c352:	f04f 0301 	mov.w	r3, #1
 800c356:	73fb      	strb	r3, [r7, #15]
 800c358:	e002      	b.n	800c360 <RNG_GetITStatus+0x30>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800c35a:	f04f 0300 	mov.w	r3, #0
 800c35e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800c360:	7bfb      	ldrb	r3, [r7, #15]
}
 800c362:	4618      	mov	r0, r3
 800c364:	f107 0714 	add.w	r7, r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	bc80      	pop	{r7}
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop

0800c370 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800c37a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c37e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c382:	79fa      	ldrb	r2, [r7, #7]
 800c384:	ea6f 0202 	mvn.w	r2, r2
 800c388:	b2d2      	uxtb	r2, r2
 800c38a:	605a      	str	r2, [r3, #4]
}
 800c38c:	f107 070c 	add.w	r7, r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	bc80      	pop	{r7}
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop

0800c398 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800c39e:	f04f 0300 	mov.w	r3, #0
 800c3a2:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800c3a4:	f04f 0300 	mov.w	r3, #0
 800c3a8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800c3aa:	f04f 0300 	mov.w	r3, #0
 800c3ae:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c3b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3b8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c3bc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c3be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3c6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c3ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800c3cc:	f000 f934 	bl	800c638 <RTC_EnterInitMode>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d103      	bne.n	800c3de <RTC_DeInit+0x46>
  {
    status = ERROR;
 800c3d6:	f04f 0300 	mov.w	r3, #0
 800c3da:	73fb      	strb	r3, [r7, #15]
 800c3dc:	e084      	b.n	800c4e8 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800c3de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3e6:	f04f 0200 	mov.w	r2, #0
 800c3ea:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800c3ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c3f4:	f242 1201 	movw	r2, #8449	; 0x2101
 800c3f8:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800c3fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c3fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c402:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c406:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c40a:	6892      	ldr	r2, [r2, #8]
 800c40c:	f002 0207 	and.w	r2, r2, #7
 800c410:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800c412:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c416:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c41a:	68db      	ldr	r3, [r3, #12]
 800c41c:	f003 0304 	and.w	r3, r3, #4
 800c420:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f103 0301 	add.w	r3, r3, #1
 800c428:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c430:	d002      	beq.n	800c438 <RTC_DeInit+0xa0>
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d0ec      	beq.n	800c412 <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800c438:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c43c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c440:	68db      	ldr	r3, [r3, #12]
 800c442:	f003 0304 	and.w	r3, r3, #4
 800c446:	2b00      	cmp	r3, #0
 800c448:	d103      	bne.n	800c452 <RTC_DeInit+0xba>
    {
      status = ERROR;
 800c44a:	f04f 0300 	mov.w	r3, #0
 800c44e:	73fb      	strb	r3, [r7, #15]
 800c450:	e04a      	b.n	800c4e8 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800c452:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c456:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c460:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c464:	f04f 0200 	mov.w	r2, #0
 800c468:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800c46a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c46e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c472:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c476:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800c478:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c47c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c480:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c484:	f2c0 027f 	movt	r2, #127	; 0x7f
 800c488:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800c48a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c48e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800c498:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c49c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4a0:	f04f 0200 	mov.w	r2, #0
 800c4a4:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800c4a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4ae:	f04f 0200 	mov.w	r2, #0
 800c4b2:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800c4b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4bc:	f04f 0200 	mov.w	r2, #0
 800c4c0:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800c4c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4ca:	f04f 0200 	mov.w	r2, #0
 800c4ce:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800c4d0:	f000 f90e 	bl	800c6f0 <RTC_WaitForSynchro>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d103      	bne.n	800c4e2 <RTC_DeInit+0x14a>
      {
        status = ERROR;
 800c4da:	f04f 0300 	mov.w	r3, #0
 800c4de:	73fb      	strb	r3, [r7, #15]
 800c4e0:	e002      	b.n	800c4e8 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 800c4e2:	f04f 0301 	mov.w	r3, #1
 800c4e6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800c4e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c4ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c4f0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c4f4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f107 0710 	add.w	r7, r7, #16
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}
 800c502:	bf00      	nop

0800c504 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800c50c:	f04f 0300 	mov.w	r3, #0
 800c510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c512:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c516:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c51a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c51e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c520:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c524:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c528:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c52c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800c52e:	f000 f883 	bl	800c638 <RTC_EnterInitMode>
 800c532:	4603      	mov	r3, r0
 800c534:	2b00      	cmp	r3, #0
 800c536:	d103      	bne.n	800c540 <RTC_Init+0x3c>
  {
    status = ERROR;
 800c538:	f04f 0300 	mov.w	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]
 800c53e:	e033      	b.n	800c5a8 <RTC_Init+0xa4>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800c540:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c544:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c548:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c54c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c550:	6892      	ldr	r2, [r2, #8]
 800c552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c556:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800c558:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c55c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c560:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c564:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c568:	6891      	ldr	r1, [r2, #8]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	6812      	ldr	r2, [r2, #0]
 800c56e:	430a      	orrs	r2, r1
 800c570:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800c572:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c576:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c57a:	687a      	ldr	r2, [r7, #4]
 800c57c:	6892      	ldr	r2, [r2, #8]
 800c57e:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800c580:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c584:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c588:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c58c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c590:	6911      	ldr	r1, [r2, #16]
 800c592:	687a      	ldr	r2, [r7, #4]
 800c594:	6852      	ldr	r2, [r2, #4]
 800c596:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800c59a:	430a      	orrs	r2, r1
 800c59c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800c59e:	f000 f895 	bl	800c6cc <RTC_ExitInitMode>

    status = SUCCESS;    
 800c5a2:	f04f 0301 	mov.w	r3, #1
 800c5a6:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800c5a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c5ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c5b0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c5b4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800c5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f107 0710 	add.w	r7, r7, #16
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop

0800c5c4 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f04f 0200 	mov.w	r2, #0
 800c5d2:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800c5da:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c5e2:	609a      	str	r2, [r3, #8]
}
 800c5e4:	f107 070c 	add.w	r7, r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bc80      	pop	{r7}
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop

0800c5f0 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800c5f0:	b480      	push	{r7}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d007      	beq.n	800c610 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800c600:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c604:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c608:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c60c:	625a      	str	r2, [r3, #36]	; 0x24
 800c60e:	e00d      	b.n	800c62c <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800c610:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c614:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c618:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c61c:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800c61e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c622:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c626:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c62a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c62c:	f107 070c 	add.w	r7, r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	bc80      	pop	{r7}
 800c634:	4770      	bx	lr
 800c636:	bf00      	nop

0800c638 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800c638:	b480      	push	{r7}
 800c63a:	b085      	sub	sp, #20
 800c63c:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800c63e:	f04f 0300 	mov.w	r3, #0
 800c642:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800c644:	f04f 0300 	mov.w	r3, #0
 800c648:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800c64a:	f04f 0300 	mov.w	r3, #0
 800c64e:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c650:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c654:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d12a      	bne.n	800c6b8 <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800c662:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c666:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c66a:	f04f 32ff 	mov.w	r2, #4294967295
 800c66e:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800c670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c674:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c67e:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f103 0301 	add.w	r3, r3, #1
 800c686:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c68e:	d002      	beq.n	800c696 <RTC_EnterInitMode+0x5e>
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d0ec      	beq.n	800c670 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800c696:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c69a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d003      	beq.n	800c6b0 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 800c6a8:	f04f 0301 	mov.w	r3, #1
 800c6ac:	73fb      	strb	r3, [r7, #15]
 800c6ae:	e006      	b.n	800c6be <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 800c6b0:	f04f 0300 	mov.w	r3, #0
 800c6b4:	73fb      	strb	r3, [r7, #15]
 800c6b6:	e002      	b.n	800c6be <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 800c6b8:	f04f 0301 	mov.w	r3, #1
 800c6bc:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800c6be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f107 0714 	add.w	r7, r7, #20
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bc80      	pop	{r7}
 800c6ca:	4770      	bx	lr

0800c6cc <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800c6cc:	b480      	push	{r7}
 800c6ce:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800c6d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c6d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c6d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c6dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c6e0:	68d2      	ldr	r2, [r2, #12]
 800c6e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6e6:	60da      	str	r2, [r3, #12]
}
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bc80      	pop	{r7}
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop

0800c6f0 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800c6fc:	f04f 0300 	mov.w	r3, #0
 800c700:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800c702:	f04f 0300 	mov.w	r3, #0
 800c706:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c708:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c70c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c710:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c714:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c716:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c71a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c71e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c722:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800c724:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c728:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c72c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c730:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c734:	68d2      	ldr	r2, [r2, #12]
 800c736:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c73a:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800c73c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c740:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	f003 0320 	and.w	r3, r3, #32
 800c74a:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f103 0301 	add.w	r3, r3, #1
 800c752:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c75a:	d002      	beq.n	800c762 <RTC_WaitForSynchro+0x72>
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d0ec      	beq.n	800c73c <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800c762:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c766:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0320 	and.w	r3, r3, #32
 800c770:	2b00      	cmp	r3, #0
 800c772:	d003      	beq.n	800c77c <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 800c774:	f04f 0301 	mov.w	r3, #1
 800c778:	73fb      	strb	r3, [r7, #15]
 800c77a:	e002      	b.n	800c782 <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 800c77c:	f04f 0300 	mov.w	r3, #0
 800c780:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800c782:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c786:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c78a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c78e:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800c790:	7bfb      	ldrb	r3, [r7, #15]
}
 800c792:	4618      	mov	r0, r3
 800c794:	f107 0714 	add.w	r7, r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	bc80      	pop	{r7}
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop

0800c7a0 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800c7aa:	f04f 0300 	mov.w	r3, #0
 800c7ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c7b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c7b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c7b8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c7bc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c7be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c7c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c7c6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c7ca:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800c7cc:	f7ff ff34 	bl	800c638 <RTC_EnterInitMode>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d103      	bne.n	800c7de <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 800c7d6:	f04f 0300 	mov.w	r3, #0
 800c7da:	73fb      	strb	r3, [r7, #15]
 800c7dc:	e020      	b.n	800c820 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 800c7de:	79fb      	ldrb	r3, [r7, #7]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d00c      	beq.n	800c7fe <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800c7e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c7e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c7ec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c7f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c7f4:	6892      	ldr	r2, [r2, #8]
 800c7f6:	f042 0210 	orr.w	r2, r2, #16
 800c7fa:	609a      	str	r2, [r3, #8]
 800c7fc:	e00b      	b.n	800c816 <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800c7fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c802:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c806:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c80a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c80e:	6892      	ldr	r2, [r2, #8]
 800c810:	f022 0210 	bic.w	r2, r2, #16
 800c814:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800c816:	f7ff ff59 	bl	800c6cc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800c81a:	f04f 0301 	mov.w	r3, #1
 800c81e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800c820:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c824:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c828:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c82c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	f107 0710 	add.w	r7, r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}
 800c83a:	bf00      	nop

0800c83c <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b083      	sub	sp, #12
 800c840:	af00      	add	r7, sp, #0
 800c842:	4603      	mov	r3, r0
 800c844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c846:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c84a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c84e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c852:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c854:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c858:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c85c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c860:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d00c      	beq.n	800c882 <RTC_BypassShadowCmd+0x46>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800c868:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c86c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c870:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c874:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c878:	6892      	ldr	r2, [r2, #8]
 800c87a:	f042 0220 	orr.w	r2, r2, #32
 800c87e:	609a      	str	r2, [r3, #8]
 800c880:	e00b      	b.n	800c89a <RTC_BypassShadowCmd+0x5e>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 800c882:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c886:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c88a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c88e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c892:	6892      	ldr	r2, [r2, #8]
 800c894:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c898:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800c89a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c89e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c8a2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c8a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800c8a8:	f107 070c 	add.w	r7, r7, #12
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bc80      	pop	{r7}
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop

0800c8b4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800c8b4:	b590      	push	{r4, r7, lr}
 800c8b6:	b085      	sub	sp, #20
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c8be:	f04f 0300 	mov.w	r3, #0
 800c8c2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800c8c4:	f04f 0300 	mov.w	r3, #0
 800c8c8:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10d      	bne.n	800c8ec <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c8d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c8d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d119      	bne.n	800c916 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	f04f 0200 	mov.w	r2, #0
 800c8e8:	70da      	strb	r2, [r3, #3]
 800c8ea:	e014      	b.n	800c916 <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c8ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c8f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d007      	beq.n	800c90e <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	4618      	mov	r0, r3
 800c904:	f001 fb1a 	bl	800df3c <RTC_Bcd2ToByte>
 800c908:	4603      	mov	r3, r0
 800c90a:	60fb      	str	r3, [r7, #12]
 800c90c:	e003      	b.n	800c916 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d012      	beq.n	800c942 <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	785b      	ldrb	r3, [r3, #1]
 800c928:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800c92c:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800c932:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	78db      	ldrb	r3, [r3, #3]
 800c938:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800c93c:	4313      	orrs	r3, r2
 800c93e:	60fb      	str	r3, [r7, #12]
 800c940:	e01e      	b.n	800c980 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	4618      	mov	r0, r3
 800c948:	f001 fad6 	bl	800def8 <RTC_ByteToBcd2>
 800c94c:	4603      	mov	r3, r0
 800c94e:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	785b      	ldrb	r3, [r3, #1]
 800c956:	4618      	mov	r0, r3
 800c958:	f001 face 	bl	800def8 <RTC_ByteToBcd2>
 800c95c:	4603      	mov	r3, r0
 800c95e:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800c962:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	789b      	ldrb	r3, [r3, #2]
 800c968:	4618      	mov	r0, r3
 800c96a:	f001 fac5 	bl	800def8 <RTC_ByteToBcd2>
 800c96e:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800c970:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	78db      	ldrb	r3, [r3, #3]
 800c978:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800c97c:	4313      	orrs	r3, r2
 800c97e:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800c980:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c984:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c988:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800c98c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800c98e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c992:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c996:	f04f 0253 	mov.w	r2, #83	; 0x53
 800c99a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800c99c:	f7ff fe4c 	bl	800c638 <RTC_EnterInitMode>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d103      	bne.n	800c9ae <RTC_SetTime+0xfa>
  {
    status = ERROR;
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	72fb      	strb	r3, [r7, #11]
 800c9ac:	e018      	b.n	800c9e0 <RTC_SetTime+0x12c>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c9ae:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800c9b2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c9b6:	68f9      	ldr	r1, [r7, #12]
 800c9b8:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800c9bc:	f2c0 037f 	movt	r3, #127	; 0x7f
 800c9c0:	400b      	ands	r3, r1
 800c9c2:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800c9c4:	f7ff fe82 	bl	800c6cc <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800c9c8:	f7ff fe92 	bl	800c6f0 <RTC_WaitForSynchro>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d103      	bne.n	800c9da <RTC_SetTime+0x126>
    {
      status = ERROR;
 800c9d2:	f04f 0300 	mov.w	r3, #0
 800c9d6:	72fb      	strb	r3, [r7, #11]
 800c9d8:	e002      	b.n	800c9e0 <RTC_SetTime+0x12c>
    }
    else
    {
      status = SUCCESS;
 800c9da:	f04f 0301 	mov.w	r3, #1
 800c9de:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800c9e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800c9e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c9e8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800c9ec:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f107 0714 	add.w	r7, r7, #20
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd90      	pop	{r4, r7, pc}
 800c9fa:	bf00      	nop

0800c9fc <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800c9fc:	b480      	push	{r7}
 800c9fe:	b083      	sub	sp, #12
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f04f 0200 	mov.w	r2, #0
 800ca0a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f04f 0200 	mov.w	r2, #0
 800ca1a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f04f 0200 	mov.w	r2, #0
 800ca22:	709a      	strb	r2, [r3, #2]
}
 800ca24:	f107 070c 	add.w	r7, r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	bc80      	pop	{r7}
 800ca2c:	4770      	bx	lr
 800ca2e:	bf00      	nop

0800ca30 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ca3a:	f04f 0300 	mov.w	r3, #0
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800ca40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ca44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800ca4e:	f2c0 037f 	movt	r3, #127	; 0x7f
 800ca52:	4013      	ands	r3, r2
 800ca54:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ca5c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ca60:	b2da      	uxtb	r2, r3
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800ca6c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	b2db      	uxtb	r3, r3
 800ca7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca7e:	b2da      	uxtb	r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d11a      	bne.n	800cad0 <RTC_GetTime+0xa0>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f001 fa4c 	bl	800df3c <RTC_Bcd2ToByte>
 800caa4:	4603      	mov	r3, r0
 800caa6:	461a      	mov	r2, r3
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	785b      	ldrb	r3, [r3, #1]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f001 fa43 	bl	800df3c <RTC_Bcd2ToByte>
 800cab6:	4603      	mov	r3, r0
 800cab8:	461a      	mov	r2, r3
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	789b      	ldrb	r3, [r3, #2]
 800cac2:	4618      	mov	r0, r3
 800cac4:	f001 fa3a 	bl	800df3c <RTC_Bcd2ToByte>
 800cac8:	4603      	mov	r3, r0
 800caca:	461a      	mov	r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	709a      	strb	r2, [r3, #2]
  }
}
 800cad0:	f107 0710 	add.w	r7, r7, #16
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}

0800cad8 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 800cad8:	b480      	push	{r7}
 800cada:	b083      	sub	sp, #12
 800cadc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 800cade:	f04f 0300 	mov.w	r3, #0
 800cae2:	607b      	str	r3, [r7, #4]
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800cae4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cae8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800caec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caee:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 800caf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800caf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800caf8:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 800cafa:	687b      	ldr	r3, [r7, #4]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	f107 070c 	add.w	r7, r7, #12
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bc80      	pop	{r7}
 800cb06:	4770      	bx	lr

0800cb08 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800cb08:	b590      	push	{r4, r7, lr}
 800cb0a:	b085      	sub	sp, #20
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cb12:	f04f 0300 	mov.w	r3, #0
 800cb16:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800cb18:	f04f 0300 	mov.w	r3, #0
 800cb1c:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d10f      	bne.n	800cb44 <RTC_SetDate+0x3c>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	785b      	ldrb	r3, [r3, #1]
 800cb28:	f003 0310 	and.w	r3, r3, #16
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d009      	beq.n	800cb44 <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	785b      	ldrb	r3, [r3, #1]
 800cb34:	f023 0310 	bic.w	r3, r3, #16
 800cb38:	b2db      	uxtb	r3, r3
 800cb3a:	f103 030a 	add.w	r3, r3, #10
 800cb3e:	b2da      	uxtb	r2, r3
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d00d      	beq.n	800cb66 <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f001 f9f4 	bl	800df3c <RTC_Bcd2ToByte>
 800cb54:	4603      	mov	r3, r0
 800cb56:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	789b      	ldrb	r3, [r3, #2]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f001 f9ed 	bl	800df3c <RTC_Bcd2ToByte>
 800cb62:	4603      	mov	r3, r0
 800cb64:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d012      	beq.n	800cb92 <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	78db      	ldrb	r3, [r3, #3]
 800cb70:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	785b      	ldrb	r3, [r3, #1]
 800cb78:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800cb7c:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800cb82:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	e01e      	b.n	800cbd0 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	78db      	ldrb	r3, [r3, #3]
 800cb96:	4618      	mov	r0, r3
 800cb98:	f001 f9ae 	bl	800def8 <RTC_ByteToBcd2>
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	785b      	ldrb	r3, [r3, #1]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f001 f9a6 	bl	800def8 <RTC_ByteToBcd2>
 800cbac:	4603      	mov	r3, r0
 800cbae:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800cbb2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	789b      	ldrb	r3, [r3, #2]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f001 f99d 	bl	800def8 <RTC_ByteToBcd2>
 800cbbe:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800cbc0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800cbd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbd8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800cbdc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800cbde:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbe6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800cbea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800cbec:	f7ff fd24 	bl	800c638 <RTC_EnterInitMode>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d103      	bne.n	800cbfe <RTC_SetDate+0xf6>
  {
    status = ERROR;
 800cbf6:	f04f 0300 	mov.w	r3, #0
 800cbfa:	72fb      	strb	r3, [r7, #11]
 800cbfc:	e017      	b.n	800cc2e <RTC_SetDate+0x126>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800cbfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800cc0c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800cc10:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800cc12:	f7ff fd5b 	bl	800c6cc <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800cc16:	f7ff fd6b 	bl	800c6f0 <RTC_WaitForSynchro>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d103      	bne.n	800cc28 <RTC_SetDate+0x120>
    {
      status = ERROR;
 800cc20:	f04f 0300 	mov.w	r3, #0
 800cc24:	72fb      	strb	r3, [r7, #11]
 800cc26:	e002      	b.n	800cc2e <RTC_SetDate+0x126>
    }
    else
    {
      status = SUCCESS;
 800cc28:	f04f 0301 	mov.w	r3, #1
 800cc2c:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800cc2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc36:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cc3a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800cc3c:	7afb      	ldrb	r3, [r7, #11]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f107 0714 	add.w	r7, r7, #20
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd90      	pop	{r4, r7, pc}

0800cc48 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f04f 0201 	mov.w	r2, #1
 800cc56:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f04f 0201 	mov.w	r2, #1
 800cc5e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f04f 0201 	mov.w	r2, #1
 800cc66:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f04f 0200 	mov.w	r2, #0
 800cc6e:	70da      	strb	r2, [r3, #3]
}
 800cc70:	f107 070c 	add.w	r7, r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bc80      	pop	{r7}
 800cc78:	4770      	bx	lr
 800cc7a:	bf00      	nop

0800cc7c <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cc86:	f04f 0300 	mov.w	r3, #0
 800cc8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800cc8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc9e:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cca6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800ccb6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccc8:	b2da      	uxtb	r2, r3
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ccd4:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d11a      	bne.n	800cd1a <RTC_GetDate+0x9e>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	78db      	ldrb	r3, [r3, #3]
 800cce8:	4618      	mov	r0, r3
 800ccea:	f001 f927 	bl	800df3c <RTC_Bcd2ToByte>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	785b      	ldrb	r3, [r3, #1]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f001 f91e 	bl	800df3c <RTC_Bcd2ToByte>
 800cd00:	4603      	mov	r3, r0
 800cd02:	461a      	mov	r2, r3
 800cd04:	683b      	ldr	r3, [r7, #0]
 800cd06:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	789b      	ldrb	r3, [r3, #2]
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f001 f915 	bl	800df3c <RTC_Bcd2ToByte>
 800cd12:	4603      	mov	r3, r0
 800cd14:	461a      	mov	r2, r3
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	709a      	strb	r2, [r3, #2]
  }
}
 800cd1a:	f107 0710 	add.w	r7, r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop

0800cd24 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800cd24:	b590      	push	{r4, r7, lr}
 800cd26:	b087      	sub	sp, #28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cd30:	f04f 0300 	mov.w	r3, #0
 800cd34:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d10d      	bne.n	800cd58 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cd3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d12c      	bne.n	800cda8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f04f 0200 	mov.w	r2, #0
 800cd54:	70da      	strb	r2, [r3, #3]
 800cd56:	e027      	b.n	800cda8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cd58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d007      	beq.n	800cd7a <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 f8e4 	bl	800df3c <RTC_Bcd2ToByte>
 800cd74:	4603      	mov	r3, r0
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	e003      	b.n	800cd82 <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f04f 0200 	mov.w	r2, #0
 800cd80:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	689b      	ldr	r3, [r3, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d107      	bne.n	800cd9a <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	7b1b      	ldrb	r3, [r3, #12]
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f001 f8d4 	bl	800df3c <RTC_Bcd2ToByte>
 800cd94:	4603      	mov	r3, r0
 800cd96:	617b      	str	r3, [r7, #20]
 800cd98:	e006      	b.n	800cda8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	7b1b      	ldrb	r3, [r3, #12]
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f001 f8cc 	bl	800df3c <RTC_Bcd2ToByte>
 800cda4:	4603      	mov	r3, r0
 800cda6:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d01d      	beq.n	800cdea <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	785b      	ldrb	r3, [r3, #1]
 800cdba:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800cdbe:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800cdc4:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	78db      	ldrb	r3, [r3, #3]
 800cdca:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800cdce:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	7b1b      	ldrb	r3, [r3, #12]
 800cdd4:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800cdd8:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800cdde:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800cde4:	4313      	orrs	r3, r2
 800cde6:	617b      	str	r3, [r7, #20]
 800cde8:	e02f      	b.n	800ce4a <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f001 f882 	bl	800def8 <RTC_ByteToBcd2>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	785b      	ldrb	r3, [r3, #1]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f001 f87a 	bl	800def8 <RTC_ByteToBcd2>
 800ce04:	4603      	mov	r3, r0
 800ce06:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800ce0a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	789b      	ldrb	r3, [r3, #2]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f001 f871 	bl	800def8 <RTC_ByteToBcd2>
 800ce16:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800ce18:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	78db      	ldrb	r3, [r3, #3]
 800ce20:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800ce24:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	7b1b      	ldrb	r3, [r3, #12]
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	f001 f863 	bl	800def8 <RTC_ByteToBcd2>
 800ce32:	4603      	mov	r3, r0
 800ce34:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800ce38:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800ce40:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800ce46:	4313      	orrs	r3, r2
 800ce48:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ce4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce52:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ce56:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ce58:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce60:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ce64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ce6c:	d106      	bne.n	800ce7c <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800ce6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce76:	697a      	ldr	r2, [r7, #20]
 800ce78:	61da      	str	r2, [r3, #28]
 800ce7a:	e005      	b.n	800ce88 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800ce7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce84:	697a      	ldr	r2, [r7, #20]
 800ce86:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800ce88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce90:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ce94:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ce96:	f107 071c 	add.w	r7, r7, #28
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd90      	pop	{r4, r7, pc}
 800ce9e:	bf00      	nop

0800cea0 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f04f 0200 	mov.w	r2, #0
 800ceae:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f04f 0200 	mov.w	r2, #0
 800ceb6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f04f 0200 	mov.w	r2, #0
 800cebe:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f04f 0200 	mov.w	r2, #0
 800cec6:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f04f 0200 	mov.w	r2, #0
 800cece:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f04f 0201 	mov.w	r2, #1
 800ced6:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f04f 0200 	mov.w	r2, #0
 800cede:	605a      	str	r2, [r3, #4]
}
 800cee0:	f107 070c 	add.w	r7, r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bc80      	pop	{r7}
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop

0800ceec <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b086      	sub	sp, #24
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800cef8:	f04f 0300 	mov.w	r3, #0
 800cefc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf04:	d106      	bne.n	800cf14 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800cf06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf0e:	69db      	ldr	r3, [r3, #28]
 800cf10:	617b      	str	r3, [r7, #20]
 800cf12:	e005      	b.n	800cf20 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800cf14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf1c:	6a1b      	ldr	r3, [r3, #32]
 800cf1e:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800cf26:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800cf36:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	b2db      	uxtb	r3, r3
 800cf44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf48:	b2da      	uxtb	r2, r3
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf54:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800cf58:	b2da      	uxtb	r2, r3
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800cf64:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d123      	bne.n	800cfd0 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	781b      	ldrb	r3, [r3, #0]
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 ffd5 	bl	800df3c <RTC_Bcd2ToByte>
 800cf92:	4603      	mov	r3, r0
 800cf94:	461a      	mov	r2, r3
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	785b      	ldrb	r3, [r3, #1]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f000 ffcc 	bl	800df3c <RTC_Bcd2ToByte>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	461a      	mov	r2, r3
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	789b      	ldrb	r3, [r3, #2]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 ffc3 	bl	800df3c <RTC_Bcd2ToByte>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	461a      	mov	r2, r3
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	7b1b      	ldrb	r3, [r3, #12]
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 ffba 	bl	800df3c <RTC_Bcd2ToByte>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	461a      	mov	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	731a      	strb	r2, [r3, #12]
  }  
}
 800cfd0:	f107 0718 	add.w	r7, r7, #24
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800cfd8:	b480      	push	{r7}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800cfe4:	f04f 0300 	mov.w	r3, #0
 800cfe8:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800cfea:	f04f 0300 	mov.w	r3, #0
 800cfee:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800cff0:	f04f 0300 	mov.w	r3, #0
 800cff4:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800cff6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cffa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cffe:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d002:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d004:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d008:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d00c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800d012:	78fb      	ldrb	r3, [r7, #3]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00f      	beq.n	800d038 <RTC_AlarmCmd+0x60>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800d018:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d01c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d020:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d024:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d028:	6891      	ldr	r1, [r2, #8]
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	430a      	orrs	r2, r1
 800d02e:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800d030:	f04f 0301 	mov.w	r3, #1
 800d034:	75fb      	strb	r3, [r7, #23]
 800d036:	e034      	b.n	800d0a2 <RTC_AlarmCmd+0xca>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800d038:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d03c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d040:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d044:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d048:	6891      	ldr	r1, [r2, #8]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	ea6f 0202 	mvn.w	r2, r2
 800d050:	400a      	ands	r2, r1
 800d052:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800d054:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d058:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d05c:	68da      	ldr	r2, [r3, #12]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d064:	4013      	ands	r3, r2
 800d066:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	f103 0301 	add.w	r3, r3, #1
 800d06e:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d076:	d002      	beq.n	800d07e <RTC_AlarmCmd+0xa6>
 800d078:	693b      	ldr	r3, [r7, #16]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0ea      	beq.n	800d054 <RTC_AlarmCmd+0x7c>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800d07e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d086:	68da      	ldr	r2, [r3, #12]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d08e:	4013      	ands	r3, r2
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <RTC_AlarmCmd+0xc4>
    {
      status = ERROR;
 800d094:	f04f 0300 	mov.w	r3, #0
 800d098:	75fb      	strb	r3, [r7, #23]
 800d09a:	e002      	b.n	800d0a2 <RTC_AlarmCmd+0xca>
    } 
    else
    {
      status = SUCCESS;
 800d09c:	f04f 0301 	mov.w	r3, #1
 800d0a0:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d0a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d0a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d0aa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d0ae:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d0b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f107 071c 	add.w	r7, r7, #28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bc80      	pop	{r7}
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop

0800d0c0 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b087      	sub	sp, #28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	60f8      	str	r0, [r7, #12]
 800d0c8:	60b9      	str	r1, [r7, #8]
 800d0ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d0cc:	f04f 0300 	mov.w	r3, #0
 800d0d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d0d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d0d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d0da:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d0de:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d0e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d0e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d0e8:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d0ec:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0fc:	d106      	bne.n	800d10c <RTC_AlarmSubSecondConfig+0x4c>
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 800d0fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d102:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d106:	697a      	ldr	r2, [r7, #20]
 800d108:	645a      	str	r2, [r3, #68]	; 0x44
 800d10a:	e005      	b.n	800d118 <RTC_AlarmSubSecondConfig+0x58>
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 800d10c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d110:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d114:	697a      	ldr	r2, [r7, #20]
 800d116:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800d118:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d11c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d120:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d124:	625a      	str	r2, [r3, #36]	; 0x24

}
 800d126:	f107 071c 	add.w	r7, r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bc80      	pop	{r7}
 800d12e:	4770      	bx	lr

0800d130 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800d130:	b480      	push	{r7}
 800d132:	b085      	sub	sp, #20
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d138:	f04f 0300 	mov.w	r3, #0
 800d13c:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d144:	d10a      	bne.n	800d15c <RTC_GetAlarmSubSecond+0x2c>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800d146:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d14a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d14e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d150:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d154:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	e009      	b.n	800d170 <RTC_GetAlarmSubSecond+0x40>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800d15c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d160:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d166:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d16a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d16e:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800d170:	68fb      	ldr	r3, [r7, #12]
}
 800d172:	4618      	mov	r0, r3
 800d174:	f107 0714 	add.w	r7, r7, #20
 800d178:	46bd      	mov	sp, r7
 800d17a:	bc80      	pop	{r7}
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop

0800d180 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d188:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d18c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d190:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d194:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d196:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d19a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d19e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d1a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d1a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d1a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d1ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d1b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d1b4:	6892      	ldr	r2, [r2, #8]
 800d1b6:	f022 0207 	bic.w	r2, r2, #7
 800d1ba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800d1bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d1c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d1c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d1c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d1cc:	6891      	ldr	r1, [r2, #8]
 800d1ce:	687a      	ldr	r2, [r7, #4]
 800d1d0:	430a      	orrs	r2, r1
 800d1d2:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d1d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d1d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d1dc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d1e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d1e2:	f107 070c 	add.w	r7, r7, #12
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bc80      	pop	{r7}
 800d1ea:	4770      	bx	lr

0800d1ec <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800d1ec:	b480      	push	{r7}
 800d1ee:	b083      	sub	sp, #12
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d1f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d1f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d1fc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d200:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d202:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d206:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d20a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d20e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800d210:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d214:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d218:	687a      	ldr	r2, [r7, #4]
 800d21a:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d21c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d220:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d224:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d228:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d22a:	f107 070c 	add.w	r7, r7, #12
 800d22e:	46bd      	mov	sp, r7
 800d230:	bc80      	pop	{r7}
 800d232:	4770      	bx	lr

0800d234 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800d234:	b480      	push	{r7}
 800d236:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800d238:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d23c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d240:	695b      	ldr	r3, [r3, #20]
 800d242:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800d246:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bc80      	pop	{r7}
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop

0800d254 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800d254:	b480      	push	{r7}
 800d256:	b087      	sub	sp, #28
 800d258:	af00      	add	r7, sp, #0
 800d25a:	4603      	mov	r3, r0
 800d25c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800d25e:	f04f 0300 	mov.w	r3, #0
 800d262:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800d264:	f04f 0300 	mov.w	r3, #0
 800d268:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800d26a:	f04f 0300 	mov.w	r3, #0
 800d26e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d270:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d274:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d278:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d27c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d27e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d282:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d286:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d28a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800d28c:	79fb      	ldrb	r3, [r7, #7]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00f      	beq.n	800d2b2 <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800d292:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d296:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d29a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d29e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d2a2:	6892      	ldr	r2, [r2, #8]
 800d2a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d2a8:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800d2aa:	f04f 0301 	mov.w	r3, #1
 800d2ae:	75fb      	strb	r3, [r7, #23]
 800d2b0:	e02e      	b.n	800d310 <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800d2b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2ba:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d2be:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d2c2:	6892      	ldr	r2, [r2, #8]
 800d2c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2c8:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800d2ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	f003 0304 	and.w	r3, r3, #4
 800d2d8:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	f103 0301 	add.w	r3, r3, #1
 800d2e0:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2e8:	d002      	beq.n	800d2f0 <RTC_WakeUpCmd+0x9c>
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0ec      	beq.n	800d2ca <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800d2f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2f8:	68db      	ldr	r3, [r3, #12]
 800d2fa:	f003 0304 	and.w	r3, r3, #4
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d103      	bne.n	800d30a <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800d302:	f04f 0300 	mov.w	r3, #0
 800d306:	75fb      	strb	r3, [r7, #23]
 800d308:	e002      	b.n	800d310 <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800d30a:	f04f 0301 	mov.w	r3, #1
 800d30e:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d310:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d314:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d318:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d31c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d320:	4618      	mov	r0, r3
 800d322:	f107 071c 	add.w	r7, r7, #28
 800d326:	46bd      	mov	sp, r7
 800d328:	bc80      	pop	{r7}
 800d32a:	4770      	bx	lr

0800d32c <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800d32c:	b480      	push	{r7}
 800d32e:	b083      	sub	sp, #12
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d336:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d33a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d33e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d342:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d344:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d348:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d34c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d350:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800d352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d356:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d35a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d35e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d362:	6892      	ldr	r2, [r2, #8]
 800d364:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d368:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800d36a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d36e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d372:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d376:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d37a:	6891      	ldr	r1, [r2, #8]
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	4302      	orrs	r2, r0
 800d382:	430a      	orrs	r2, r1
 800d384:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d386:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d38a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d38e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d392:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d394:	f107 070c 	add.w	r7, r7, #12
 800d398:	46bd      	mov	sp, r7
 800d39a:	bc80      	pop	{r7}
 800d39c:	4770      	bx	lr
 800d39e:	bf00      	nop

0800d3a0 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800d3a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3ac:	689b      	ldr	r3, [r3, #8]
 800d3ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bc80      	pop	{r7}
 800d3b8:	4770      	bx	lr
 800d3ba:	bf00      	nop

0800d3bc <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b083      	sub	sp, #12
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d3c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3ce:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d3d2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d3d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3dc:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800d3e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3ea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d3ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d3f2:	6892      	ldr	r2, [r2, #8]
 800d3f4:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800d3f8:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800d3fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d402:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d406:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d40a:	6891      	ldr	r1, [r2, #8]
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	4302      	orrs	r2, r0
 800d412:	430a      	orrs	r2, r1
 800d414:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d416:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d41a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d41e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d422:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d424:	f107 070c 	add.w	r7, r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	bc80      	pop	{r7}
 800d42c:	4770      	bx	lr
 800d42e:	bf00      	nop

0800d430 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800d43a:	f04f 0300 	mov.w	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d448:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d44c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d44e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d452:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d456:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d45a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d45c:	f7ff f8ec 	bl	800c638 <RTC_EnterInitMode>
 800d460:	4603      	mov	r3, r0
 800d462:	2b00      	cmp	r3, #0
 800d464:	d103      	bne.n	800d46e <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800d466:	f04f 0300 	mov.w	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
 800d46c:	e00c      	b.n	800d488 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800d46e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d472:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d476:	6879      	ldr	r1, [r7, #4]
 800d478:	683a      	ldr	r2, [r7, #0]
 800d47a:	430a      	orrs	r2, r1
 800d47c:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800d47e:	f7ff f925 	bl	800c6cc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800d482:	f04f 0301 	mov.w	r3, #1
 800d486:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d488:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d48c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d490:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d494:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d496:	7bfb      	ldrb	r3, [r7, #15]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	f107 0710 	add.w	r7, r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop

0800d4a4 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800d4ae:	f04f 0300 	mov.w	r3, #0
 800d4b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d4b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d4b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d4bc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d4c0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d4c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d4c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d4ca:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d4ce:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d4d0:	f7ff f8b2 	bl	800c638 <RTC_EnterInitMode>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d103      	bne.n	800d4e2 <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800d4da:	f04f 0300 	mov.w	r3, #0
 800d4de:	73fb      	strb	r3, [r7, #15]
 800d4e0:	e020      	b.n	800d524 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00c      	beq.n	800d502 <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800d4e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d4ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d4f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d4f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d4f8:	6892      	ldr	r2, [r2, #8]
 800d4fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d4fe:	609a      	str	r2, [r3, #8]
 800d500:	e00b      	b.n	800d51a <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800d502:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d506:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d50a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d50e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d512:	6892      	ldr	r2, [r2, #8]
 800d514:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d518:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800d51a:	f7ff f8d7 	bl	800c6cc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800d51e:	f04f 0301 	mov.w	r3, #1
 800d522:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d524:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d528:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d52c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d530:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d532:	7bfb      	ldrb	r3, [r7, #15]
}
 800d534:	4618      	mov	r0, r3
 800d536:	f107 0710 	add.w	r7, r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
 800d53e:	bf00      	nop

0800d540 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800d540:	b480      	push	{r7}
 800d542:	b083      	sub	sp, #12
 800d544:	af00      	add	r7, sp, #0
 800d546:	4603      	mov	r3, r0
 800d548:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d54a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d54e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d552:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d556:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d558:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d55c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d560:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d564:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00c      	beq.n	800d586 <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800d56c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d570:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d574:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d578:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d57c:	6892      	ldr	r2, [r2, #8]
 800d57e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800d582:	609a      	str	r2, [r3, #8]
 800d584:	e00b      	b.n	800d59e <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800d586:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d58a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d58e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d592:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d596:	6892      	ldr	r2, [r2, #8]
 800d598:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800d59c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d59e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5a6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d5aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d5ac:	f107 070c 	add.w	r7, r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bc80      	pop	{r7}
 800d5b4:	4770      	bx	lr
 800d5b6:	bf00      	nop

0800d5b8 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d5c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5c8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d5cc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d5ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5d6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d5da:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800d5dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5e4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d5e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d5ec:	6892      	ldr	r2, [r2, #8]
 800d5ee:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800d5f2:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800d5f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5fc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d600:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d604:	6891      	ldr	r1, [r2, #8]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	430a      	orrs	r2, r1
 800d60a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800d60c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d610:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d614:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d61a:	f107 070c 	add.w	r7, r7, #12
 800d61e:	46bd      	mov	sp, r7
 800d620:	bc80      	pop	{r7}
 800d622:	4770      	bx	lr

0800d624 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800d624:	b480      	push	{r7}
 800d626:	b087      	sub	sp, #28
 800d628:	af00      	add	r7, sp, #0
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	60b9      	str	r1, [r7, #8]
 800d62e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800d630:	f04f 0300 	mov.w	r3, #0
 800d634:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800d636:	f04f 0300 	mov.w	r3, #0
 800d63a:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d63c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d640:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d644:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d648:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d64a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d64e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d652:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d656:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800d658:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d65c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d660:	68db      	ldr	r3, [r3, #12]
 800d662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d666:	2b00      	cmp	r3, #0
 800d668:	d011      	beq.n	800d68e <RTC_SmoothCalibConfig+0x6a>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800d66a:	e003      	b.n	800d674 <RTC_SmoothCalibConfig+0x50>
    {
      recalpfcount++;
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	f103 0301 	add.w	r3, r3, #1
 800d672:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800d674:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d678:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d67c:	68db      	ldr	r3, [r3, #12]
 800d67e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <RTC_SmoothCalibConfig+0x6a>
 800d686:	693b      	ldr	r3, [r7, #16]
 800d688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d68c:	d1ee      	bne.n	800d66c <RTC_SmoothCalibConfig+0x48>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800d68e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d692:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d696:	68db      	ldr	r3, [r3, #12]
 800d698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10d      	bne.n	800d6bc <RTC_SmoothCalibConfig+0x98>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800d6a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d6a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6a8:	68f9      	ldr	r1, [r7, #12]
 800d6aa:	68ba      	ldr	r2, [r7, #8]
 800d6ac:	4311      	orrs	r1, r2
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	430a      	orrs	r2, r1
 800d6b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 800d6b4:	f04f 0301 	mov.w	r3, #1
 800d6b8:	75fb      	strb	r3, [r7, #23]
 800d6ba:	e002      	b.n	800d6c2 <RTC_SmoothCalibConfig+0x9e>
  }
  else
  {
    status = ERROR;
 800d6bc:	f04f 0300 	mov.w	r3, #0
 800d6c0:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800d6c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d6c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6ca:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d6ce:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f107 071c 	add.w	r7, r7, #28
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bc80      	pop	{r7}
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop

0800d6e0 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b085      	sub	sp, #20
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800d6ec:	f04f 0300 	mov.w	r3, #0
 800d6f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800d6f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d6f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6fa:	689b      	ldr	r3, [r3, #8]
 800d6fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d700:	f023 0308 	bic.w	r3, r3, #8
 800d704:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800d706:	78fb      	ldrb	r3, [r7, #3]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d006      	beq.n	800d71a <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	4313      	orrs	r3, r2
 800d712:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	e003      	b.n	800d722 <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800d71a:	68fa      	ldr	r2, [r7, #12]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4313      	orrs	r3, r2
 800d720:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d722:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d726:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d72a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d72e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d730:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d734:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d738:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d73c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800d73e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d742:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d746:	68fa      	ldr	r2, [r7, #12]
 800d748:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d74a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d74e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d752:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d756:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d758:	f107 0714 	add.w	r7, r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bc80      	pop	{r7}
 800d760:	4770      	bx	lr
 800d762:	bf00      	nop

0800d764 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b086      	sub	sp, #24
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800d770:	f04f 0300 	mov.w	r3, #0
 800d774:	617b      	str	r3, [r7, #20]
 800d776:	f04f 0300 	mov.w	r3, #0
 800d77a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800d77c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d780:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d786:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800d78a:	f2c0 037f 	movt	r3, #127	; 0x7f
 800d78e:	4013      	ands	r3, r2
 800d790:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800d792:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d796:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d79c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d7a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d7a4:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800d7a6:	697b      	ldr	r3, [r7, #20]
 800d7a8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d7ac:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d7b0:	b2da      	uxtb	r2, r3
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d7bc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d7c0:	b2da      	uxtb	r2, r3
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800d7c6:	697b      	ldr	r3, [r7, #20]
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7ce:	b2da      	uxtb	r2, r3
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7da:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d7de:	b2da      	uxtb	r2, r3
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f04f 0200 	mov.w	r2, #0
 800d7ea:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800d7f2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d7f6:	b2da      	uxtb	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d804:	b2da      	uxtb	r2, r3
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d810:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800d814:	b2da      	uxtb	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d135      	bne.n	800d88c <RTC_GetTimeStamp+0x128>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	4618      	mov	r0, r3
 800d826:	f000 fb89 	bl	800df3c <RTC_Bcd2ToByte>
 800d82a:	4603      	mov	r3, r0
 800d82c:	461a      	mov	r2, r3
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	785b      	ldrb	r3, [r3, #1]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 fb80 	bl	800df3c <RTC_Bcd2ToByte>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	789b      	ldrb	r3, [r3, #2]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 fb77 	bl	800df3c <RTC_Bcd2ToByte>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	785b      	ldrb	r3, [r3, #1]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 fb6e 	bl	800df3c <RTC_Bcd2ToByte>
 800d860:	4603      	mov	r3, r0
 800d862:	461a      	mov	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	789b      	ldrb	r3, [r3, #2]
 800d86c:	4618      	mov	r0, r3
 800d86e:	f000 fb65 	bl	800df3c <RTC_Bcd2ToByte>
 800d872:	4603      	mov	r3, r0
 800d874:	461a      	mov	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	4618      	mov	r0, r3
 800d880:	f000 fb5c 	bl	800df3c <RTC_Bcd2ToByte>
 800d884:	4603      	mov	r3, r0
 800d886:	461a      	mov	r2, r3
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	701a      	strb	r2, [r3, #0]
  }
}
 800d88c:	f107 0718 	add.w	r7, r7, #24
 800d890:	46bd      	mov	sp, r7
 800d892:	bd80      	pop	{r7, pc}

0800d894 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800d894:	b480      	push	{r7}
 800d896:	af00      	add	r7, sp, #0
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800d898:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d89c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bc80      	pop	{r7}
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop

0800d8ac <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d110      	bne.n	800d8de <RTC_TamperTriggerConfig+0x32>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800d8bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d8c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d8cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8d4:	ea6f 0202 	mvn.w	r2, r2
 800d8d8:	400a      	ands	r2, r1
 800d8da:	641a      	str	r2, [r3, #64]	; 0x40
 800d8dc:	e00d      	b.n	800d8fa <RTC_TamperTriggerConfig+0x4e>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800d8de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8e6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d8ea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d8ee:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d8f0:	687a      	ldr	r2, [r7, #4]
 800d8f2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800d8f6:	430a      	orrs	r2, r1
 800d8f8:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800d8fa:	f107 070c 	add.w	r7, r7, #12
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bc80      	pop	{r7}
 800d902:	4770      	bx	lr

0800d904 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d910:	78fb      	ldrb	r3, [r7, #3]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00c      	beq.n	800d930 <RTC_TamperCmd+0x2c>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800d916:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d91a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d91e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d922:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d926:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d928:	687a      	ldr	r2, [r7, #4]
 800d92a:	430a      	orrs	r2, r1
 800d92c:	641a      	str	r2, [r3, #64]	; 0x40
 800d92e:	e00d      	b.n	800d94c <RTC_TamperCmd+0x48>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800d930:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d934:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d938:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d93c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d940:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	ea6f 0202 	mvn.w	r2, r2
 800d948:	400a      	ands	r2, r1
 800d94a:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800d94c:	f107 070c 	add.w	r7, r7, #12
 800d950:	46bd      	mov	sp, r7
 800d952:	bc80      	pop	{r7}
 800d954:	4770      	bx	lr
 800d956:	bf00      	nop

0800d958 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800d958:	b480      	push	{r7}
 800d95a:	b083      	sub	sp, #12
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800d960:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d964:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d968:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d96c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d970:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d972:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800d976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800d978:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d97c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d980:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d984:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d988:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	430a      	orrs	r2, r1
 800d98e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d990:	f107 070c 	add.w	r7, r7, #12
 800d994:	46bd      	mov	sp, r7
 800d996:	bc80      	pop	{r7}
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop

0800d99c <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800d9a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d9b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d9b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d9b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800d9ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800d9bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d9c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d9cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	430a      	orrs	r2, r1
 800d9d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d9d4:	f107 070c 	add.w	r7, r7, #12
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bc80      	pop	{r7}
 800d9dc:	4770      	bx	lr
 800d9de:	bf00      	nop

0800d9e0 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800d9e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d9f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d9f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800d9fa:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800d9fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800da00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da08:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800da0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800da10:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800da12:	687a      	ldr	r2, [r7, #4]
 800da14:	430a      	orrs	r2, r1
 800da16:	641a      	str	r2, [r3, #64]	; 0x40
}
 800da18:	f107 070c 	add.w	r7, r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	bc80      	pop	{r7}
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop

0800da24 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00c      	beq.n	800da4e <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800da34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da38:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da3c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800da40:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800da44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800da46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800da4a:	641a      	str	r2, [r3, #64]	; 0x40
 800da4c:	e00b      	b.n	800da66 <RTC_TimeStampOnTamperDetectionCmd+0x42>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800da4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da56:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800da5a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800da5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800da60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800da64:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800da66:	f107 070c 	add.w	r7, r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bc80      	pop	{r7}
 800da6e:	4770      	bx	lr

0800da70 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800da70:	b480      	push	{r7}
 800da72:	b083      	sub	sp, #12
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d00c      	beq.n	800da9a <RTC_TamperPullUpCmd+0x2a>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800da80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da88:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800da8c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800da90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800da92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da96:	641a      	str	r2, [r3, #64]	; 0x40
 800da98:	e00b      	b.n	800dab2 <RTC_TamperPullUpCmd+0x42>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800da9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800daa2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800daa6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800daaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800daac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800dab0:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 800dab2:	f107 070c 	add.w	r7, r7, #12
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bc80      	pop	{r7}
 800daba:	4770      	bx	lr

0800dabc <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800dabc:	b480      	push	{r7}
 800dabe:	b085      	sub	sp, #20
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800dac6:	f04f 0300 	mov.w	r3, #0
 800daca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800dacc:	f642 0350 	movw	r3, #10320	; 0x2850
 800dad0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dad4:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	18d3      	adds	r3, r2, r3
 800dae0:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	683a      	ldr	r2, [r7, #0]
 800dae6:	601a      	str	r2, [r3, #0]
}
 800dae8:	f107 0714 	add.w	r7, r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	bc80      	pop	{r7}
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop

0800daf4 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b085      	sub	sp, #20
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800dafc:	f04f 0300 	mov.w	r3, #0
 800db00:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800db02:	f642 0350 	movw	r3, #10320	; 0x2850
 800db06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db0a:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	18d3      	adds	r3, r2, r3
 800db16:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	f107 0714 	add.w	r7, r7, #20
 800db22:	46bd      	mov	sp, r7
 800db24:	bc80      	pop	{r7}
 800db26:	4770      	bx	lr

0800db28 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800db30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db38:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db3c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800db40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800db42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800db46:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800db48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db50:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db54:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800db58:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	430a      	orrs	r2, r1
 800db5e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800db60:	f107 070c 	add.w	r7, r7, #12
 800db64:	46bd      	mov	sp, r7
 800db66:	bc80      	pop	{r7}
 800db68:	4770      	bx	lr
 800db6a:	bf00      	nop

0800db6c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800db74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db7c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800db84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800db86:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800db8a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800db8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db94:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db98:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800db9c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	430a      	orrs	r2, r1
 800dba2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800dba4:	f107 070c 	add.w	r7, r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bc80      	pop	{r7}
 800dbac:	4770      	bx	lr
 800dbae:	bf00      	nop

0800dbb0 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800dbb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dbbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dbc0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dbc4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dbc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800dbca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800dbce:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800dbd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dbd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dbd8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dbdc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dbe0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	430a      	orrs	r2, r1
 800dbe6:	641a      	str	r2, [r3, #64]	; 0x40
}
 800dbe8:	f107 070c 	add.w	r7, r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bc80      	pop	{r7}
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop

0800dbf4 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800dbfe:	f04f 0300 	mov.w	r3, #0
 800dc02:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800dc04:	f04f 0300 	mov.w	r3, #0
 800dc08:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dc0a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc12:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dc16:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dc18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc20:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dc24:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800dc26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc2e:	68db      	ldr	r3, [r3, #12]
 800dc30:	f003 0308 	and.w	r3, r3, #8
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d011      	beq.n	800dc5c <RTC_SynchroShiftConfig+0x68>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800dc38:	e003      	b.n	800dc42 <RTC_SynchroShiftConfig+0x4e>
    {
      shpfcount++;
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	f103 0301 	add.w	r3, r3, #1
 800dc40:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800dc42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	f003 0308 	and.w	r3, r3, #8
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d003      	beq.n	800dc5c <RTC_SynchroShiftConfig+0x68>
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc5a:	d1ee      	bne.n	800dc3a <RTC_SynchroShiftConfig+0x46>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800dc5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	f003 0308 	and.w	r3, r3, #8
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d121      	bne.n	800dcb2 <RTC_SynchroShiftConfig+0xbe>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800dc6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc76:	689b      	ldr	r3, [r3, #8]
 800dc78:	f003 0310 	and.w	r3, r3, #16
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d114      	bne.n	800dcaa <RTC_SynchroShiftConfig+0xb6>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800dc80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	430a      	orrs	r2, r1
 800dc8e:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800dc90:	f7fe fd2e 	bl	800c6f0 <RTC_WaitForSynchro>
 800dc94:	4603      	mov	r3, r0
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d103      	bne.n	800dca2 <RTC_SynchroShiftConfig+0xae>
      {
        status = ERROR;
 800dc9a:	f04f 0300 	mov.w	r3, #0
 800dc9e:	73fb      	strb	r3, [r7, #15]
 800dca0:	e00a      	b.n	800dcb8 <RTC_SynchroShiftConfig+0xc4>
      }
      else
      {
        status = SUCCESS;
 800dca2:	f04f 0301 	mov.w	r3, #1
 800dca6:	73fb      	strb	r3, [r7, #15]
 800dca8:	e006      	b.n	800dcb8 <RTC_SynchroShiftConfig+0xc4>
      }
    }
    else
    {
      status = ERROR;
 800dcaa:	f04f 0300 	mov.w	r3, #0
 800dcae:	73fb      	strb	r3, [r7, #15]
 800dcb0:	e002      	b.n	800dcb8 <RTC_SynchroShiftConfig+0xc4>
    }
  }
  else
  {
    status = ERROR;
 800dcb2:	f04f 0300 	mov.w	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800dcb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dcbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dcc0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dcc4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800dcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f107 0710 	add.w	r7, r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop

0800dcd4 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	460b      	mov	r3, r1
 800dcde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dce0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dce4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dce8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dcec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dcee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dcf2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dcf6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dcfa:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800dcfc:	78fb      	ldrb	r3, [r7, #3]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d01c      	beq.n	800dd3c <RTC_ITConfig+0x68>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800dd02:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd0a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dd0e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dd12:	6891      	ldr	r1, [r2, #8]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	f022 0204 	bic.w	r2, r2, #4
 800dd1a:	430a      	orrs	r2, r1
 800dd1c:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800dd1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd26:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dd2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dd2e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	f002 0204 	and.w	r2, r2, #4
 800dd36:	430a      	orrs	r2, r1
 800dd38:	641a      	str	r2, [r3, #64]	; 0x40
 800dd3a:	e01f      	b.n	800dd7c <RTC_ITConfig+0xa8>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800dd3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd44:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dd48:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dd4c:	6891      	ldr	r1, [r2, #8]
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	f022 0204 	bic.w	r2, r2, #4
 800dd54:	ea6f 0202 	mvn.w	r2, r2
 800dd58:	400a      	ands	r2, r1
 800dd5a:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800dd5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd64:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dd68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dd6c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800dd6e:	687a      	ldr	r2, [r7, #4]
 800dd70:	f002 0204 	and.w	r2, r2, #4
 800dd74:	ea6f 0202 	mvn.w	r2, r2
 800dd78:	400a      	ands	r2, r1
 800dd7a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800dd7c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd80:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd84:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dd88:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dd8a:	f107 070c 	add.w	r7, r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bc80      	pop	{r7}
 800dd92:	4770      	bx	lr

0800dd94 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800dd94:	b480      	push	{r7}
 800dd96:	b085      	sub	sp, #20
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800dd9c:	f04f 0300 	mov.w	r3, #0
 800dda0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800dda2:	f04f 0300 	mov.w	r3, #0
 800dda6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800dda8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ddac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddb0:	68da      	ldr	r2, [r3, #12]
 800ddb2:	f643 7377 	movw	r3, #16247	; 0x3f77
 800ddb6:	4013      	ands	r3, r2
 800ddb8:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800ddba:	68ba      	ldr	r2, [r7, #8]
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d003      	beq.n	800ddcc <RTC_GetFlagStatus+0x38>
  {
    bitstatus = SET;
 800ddc4:	f04f 0301 	mov.w	r3, #1
 800ddc8:	73fb      	strb	r3, [r7, #15]
 800ddca:	e002      	b.n	800ddd2 <RTC_GetFlagStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800ddcc:	f04f 0300 	mov.w	r3, #0
 800ddd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f107 0714 	add.w	r7, r7, #20
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bc80      	pop	{r7}
 800ddde:	4770      	bx	lr

0800dde0 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800dde8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ddec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800ddf6:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ddfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ddfe:	ea6f 0102 	mvn.w	r1, r2
 800de02:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800de06:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800de0a:	68d2      	ldr	r2, [r2, #12]
 800de0c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800de10:	430a      	orrs	r2, r1
 800de12:	60da      	str	r2, [r3, #12]
}
 800de14:	f107 070c 	add.w	r7, r7, #12
 800de18:	46bd      	mov	sp, r7
 800de1a:	bc80      	pop	{r7}
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop

0800de20 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800de20:	b480      	push	{r7}
 800de22:	b087      	sub	sp, #28
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800de28:	f04f 0300 	mov.w	r3, #0
 800de2c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800de2e:	f04f 0300 	mov.w	r3, #0
 800de32:	613b      	str	r3, [r7, #16]
 800de34:	f04f 0300 	mov.w	r3, #0
 800de38:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800de3a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de44:	f003 0304 	and.w	r3, r3, #4
 800de48:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800de4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de52:	689a      	ldr	r2, [r3, #8]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	401a      	ands	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800de5e:	693b      	ldr	r3, [r7, #16]
 800de60:	400b      	ands	r3, r1
 800de62:	4313      	orrs	r3, r2
 800de64:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800de66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de6e:	68da      	ldr	r2, [r3, #12]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800de76:	4013      	ands	r3, r2
 800de78:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00a      	beq.n	800de96 <RTC_GetITStatus+0x76>
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800de86:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d003      	beq.n	800de96 <RTC_GetITStatus+0x76>
  {
    bitstatus = SET;
 800de8e:	f04f 0301 	mov.w	r3, #1
 800de92:	75fb      	strb	r3, [r7, #23]
 800de94:	e002      	b.n	800de9c <RTC_GetITStatus+0x7c>
  }
  else
  {
    bitstatus = RESET;
 800de96:	f04f 0300 	mov.w	r3, #0
 800de9a:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800de9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	f107 071c 	add.w	r7, r7, #28
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bc80      	pop	{r7}
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop

0800deac <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800deac:	b480      	push	{r7}
 800deae:	b085      	sub	sp, #20
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800deb4:	f04f 0300 	mov.w	r3, #0
 800deb8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800dec0:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800dec2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dec6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800ded0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ded4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ded8:	ea6f 0102 	mvn.w	r1, r2
 800dedc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dee0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dee4:	68d2      	ldr	r2, [r2, #12]
 800dee6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800deea:	430a      	orrs	r2, r1
 800deec:	60da      	str	r2, [r3, #12]
}
 800deee:	f107 0714 	add.w	r7, r7, #20
 800def2:	46bd      	mov	sp, r7
 800def4:	bc80      	pop	{r7}
 800def6:	4770      	bx	lr

0800def8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800def8:	b480      	push	{r7}
 800defa:	b085      	sub	sp, #20
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800df02:	f04f 0300 	mov.w	r3, #0
 800df06:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800df08:	e007      	b.n	800df1a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800df0a:	7bfb      	ldrb	r3, [r7, #15]
 800df0c:	f103 0301 	add.w	r3, r3, #1
 800df10:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	f1a3 030a 	sub.w	r3, r3, #10
 800df18:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	2b09      	cmp	r3, #9
 800df1e:	d8f4      	bhi.n	800df0a <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800df20:	7bfb      	ldrb	r3, [r7, #15]
 800df22:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800df26:	b2da      	uxtb	r2, r3
 800df28:	79fb      	ldrb	r3, [r7, #7]
 800df2a:	4313      	orrs	r3, r2
 800df2c:	b2db      	uxtb	r3, r3
}
 800df2e:	4618      	mov	r0, r3
 800df30:	f107 0714 	add.w	r7, r7, #20
 800df34:	46bd      	mov	sp, r7
 800df36:	bc80      	pop	{r7}
 800df38:	4770      	bx	lr
 800df3a:	bf00      	nop

0800df3c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800df3c:	b480      	push	{r7}
 800df3e:	b085      	sub	sp, #20
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800df46:	f04f 0300 	mov.w	r3, #0
 800df4a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800df52:	b2db      	uxtb	r3, r3
 800df54:	461a      	mov	r2, r3
 800df56:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800df5a:	18d3      	adds	r3, r2, r3
 800df5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df60:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800df62:	79fb      	ldrb	r3, [r7, #7]
 800df64:	f003 030f 	and.w	r3, r3, #15
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	7bfb      	ldrb	r3, [r7, #15]
 800df6c:	18d3      	adds	r3, r2, r3
 800df6e:	b2db      	uxtb	r3, r3
}
 800df70:	4618      	mov	r0, r3
 800df72:	f107 0714 	add.w	r7, r7, #20
 800df76:	46bd      	mov	sp, r7
 800df78:	bc80      	pop	{r7}
 800df7a:	4770      	bx	lr

0800df7c <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800df80:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800df84:	f04f 0101 	mov.w	r1, #1
 800df88:	f7fd ff80 	bl	800be8c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800df8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800df90:	f04f 0100 	mov.w	r1, #0
 800df94:	f7fd ff7a 	bl	800be8c <RCC_APB2PeriphResetCmd>
}
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop

0800df9c <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800df9c:	b480      	push	{r7}
 800df9e:	b085      	sub	sp, #20
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800dfa4:	f04f 0300 	mov.w	r3, #0
 800dfa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800dfaa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800dfae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800dfbc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dfc0:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	7d1b      	ldrb	r3, [r3, #20]
 800dfc6:	461a      	mov	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	689b      	ldr	r3, [r3, #8]
 800dfcc:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800dfd2:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	68db      	ldr	r3, [r3, #12]
 800dfd8:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800dfde:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	4313      	orrs	r3, r2
 800dfea:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800dfec:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800dff0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800dff4:	68fa      	ldr	r2, [r7, #12]
 800dff6:	605a      	str	r2, [r3, #4]
}
 800dff8:	f107 0714 	add.w	r7, r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bc80      	pop	{r7}
 800e000:	4770      	bx	lr
 800e002:	bf00      	nop

0800e004 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800e004:	b480      	push	{r7}
 800e006:	b083      	sub	sp, #12
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f04f 0200 	mov.w	r2, #0
 800e012:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	f04f 0200 	mov.w	r2, #0
 800e01a:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f04f 0200 	mov.w	r2, #0
 800e022:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f04f 0200 	mov.w	r2, #0
 800e02a:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f04f 0200 	mov.w	r2, #0
 800e032:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f04f 0200 	mov.w	r2, #0
 800e03a:	611a      	str	r2, [r3, #16]
}
 800e03c:	f107 070c 	add.w	r7, r7, #12
 800e040:	46bd      	mov	sp, r7
 800e042:	bc80      	pop	{r7}
 800e044:	4770      	bx	lr
 800e046:	bf00      	nop

0800e048 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800e052:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800e056:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e05a:	79fa      	ldrb	r2, [r7, #7]
 800e05c:	601a      	str	r2, [r3, #0]
}
 800e05e:	f107 070c 	add.w	r7, r7, #12
 800e062:	46bd      	mov	sp, r7
 800e064:	bc80      	pop	{r7}
 800e066:	4770      	bx	lr

0800e068 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800e070:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e074:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	601a      	str	r2, [r3, #0]
}
 800e07c:	f107 070c 	add.w	r7, r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	bc80      	pop	{r7}
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop

0800e088 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800e088:	b480      	push	{r7}
 800e08a:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800e08c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e090:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f003 0303 	and.w	r3, r3, #3
}
 800e09a:	4618      	mov	r0, r3
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bc80      	pop	{r7}
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop

0800e0a4 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800e0a4:	b480      	push	{r7}
 800e0a6:	b085      	sub	sp, #20
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e0ac:	f04f 0300 	mov.w	r3, #0
 800e0b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800e0b2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e0b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	6812      	ldr	r2, [r2, #0]
 800e0be:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800e0c0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e0c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e0d2:	f023 030f 	bic.w	r3, r3, #15
 800e0d6:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	685a      	ldr	r2, [r3, #4]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	689b      	ldr	r3, [r3, #8]
 800e0e0:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	68db      	ldr	r3, [r3, #12]
 800e0e6:	431a      	orrs	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	691b      	ldr	r3, [r3, #16]
 800e0ec:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800e0ee:	68fa      	ldr	r2, [r7, #12]
 800e0f0:	4313      	orrs	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800e0f4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e0f8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	60da      	str	r2, [r3, #12]
}
 800e100:	f107 0714 	add.w	r7, r7, #20
 800e104:	46bd      	mov	sp, r7
 800e106:	bc80      	pop	{r7}
 800e108:	4770      	bx	lr
 800e10a:	bf00      	nop

0800e10c <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800e10c:	b480      	push	{r7}
 800e10e:	b083      	sub	sp, #12
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f04f 0200 	mov.w	r2, #0
 800e11a:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f04f 0200 	mov.w	r2, #0
 800e122:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f04f 0200 	mov.w	r2, #0
 800e12a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f04f 0200 	mov.w	r2, #0
 800e132:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f04f 0200 	mov.w	r2, #0
 800e13a:	611a      	str	r2, [r3, #16]
}
 800e13c:	f107 070c 	add.w	r7, r7, #12
 800e140:	46bd      	mov	sp, r7
 800e142:	bc80      	pop	{r7}
 800e144:	4770      	bx	lr
 800e146:	bf00      	nop

0800e148 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800e148:	b480      	push	{r7}
 800e14a:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800e14c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e150:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e154:	691b      	ldr	r3, [r3, #16]
 800e156:	b2db      	uxtb	r3, r3
}
 800e158:	4618      	mov	r0, r3
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bc80      	pop	{r7}
 800e15e:	4770      	bx	lr

0800e160 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800e160:	b480      	push	{r7}
 800e162:	b085      	sub	sp, #20
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800e168:	f04f 0300 	mov.w	r3, #0
 800e16c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	f642 4314 	movw	r3, #11284	; 0x2c14
 800e174:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e178:	18d3      	adds	r3, r2, r3
 800e17a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	681b      	ldr	r3, [r3, #0]
}
 800e180:	4618      	mov	r0, r3
 800e182:	f107 0714 	add.w	r7, r7, #20
 800e186:	46bd      	mov	sp, r7
 800e188:	bc80      	pop	{r7}
 800e18a:	4770      	bx	lr

0800e18c <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800e18c:	b480      	push	{r7}
 800e18e:	b085      	sub	sp, #20
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e194:	f04f 0300 	mov.w	r3, #0
 800e198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800e19a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e19e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	6812      	ldr	r2, [r2, #0]
 800e1a6:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800e1a8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e1ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	6852      	ldr	r2, [r2, #4]
 800e1b4:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800e1b6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e1ba:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c0:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800e1c8:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	689a      	ldr	r2, [r3, #8]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	691b      	ldr	r3, [r3, #16]
 800e1d8:	431a      	orrs	r2, r3
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800e1e0:	68fa      	ldr	r2, [r7, #12]
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800e1e6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e1ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e1f2:	f107 0714 	add.w	r7, r7, #20
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bc80      	pop	{r7}
 800e1fa:	4770      	bx	lr

0800e1fc <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f04f 32ff 	mov.w	r2, #4294967295
 800e20a:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f04f 0200 	mov.w	r2, #0
 800e212:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	f04f 0200 	mov.w	r2, #0
 800e21a:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f04f 0200 	mov.w	r2, #0
 800e222:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f04f 0200 	mov.w	r2, #0
 800e22a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f04f 0200 	mov.w	r2, #0
 800e232:	615a      	str	r2, [r3, #20]
}
 800e234:	f107 070c 	add.w	r7, r7, #12
 800e238:	46bd      	mov	sp, r7
 800e23a:	bc80      	pop	{r7}
 800e23c:	4770      	bx	lr
 800e23e:	bf00      	nop

0800e240 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800e244:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e248:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e24c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800e24e:	4618      	mov	r0, r3
 800e250:	46bd      	mov	sp, r7
 800e252:	bc80      	pop	{r7}
 800e254:	4770      	bx	lr
 800e256:	bf00      	nop

0800e258 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800e258:	b480      	push	{r7}
 800e25a:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800e25c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e260:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e268:	4618      	mov	r0, r3
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bc80      	pop	{r7}
 800e26e:	4770      	bx	lr

0800e270 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800e270:	b480      	push	{r7}
 800e272:	b083      	sub	sp, #12
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800e278:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e27c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800e286:	f107 070c 	add.w	r7, r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bc80      	pop	{r7}
 800e28e:	4770      	bx	lr

0800e290 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800e290:	b480      	push	{r7}
 800e292:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800e294:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e298:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e29c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bc80      	pop	{r7}
 800e2a4:	4770      	bx	lr
 800e2a6:	bf00      	nop

0800e2a8 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800e2b2:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800e2b6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e2ba:	79fa      	ldrb	r2, [r7, #7]
 800e2bc:	601a      	str	r2, [r3, #0]
}
 800e2be:	f107 070c 	add.w	r7, r7, #12
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bc80      	pop	{r7}
 800e2c6:	4770      	bx	lr

0800e2c8 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	4603      	mov	r3, r0
 800e2d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800e2d2:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800e2d6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e2da:	79fa      	ldrb	r2, [r7, #7]
 800e2dc:	601a      	str	r2, [r3, #0]
}
 800e2de:	f107 070c 	add.w	r7, r7, #12
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bc80      	pop	{r7}
 800e2e6:	4770      	bx	lr

0800e2e8 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800e2f0:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800e2f4:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	601a      	str	r2, [r3, #0]
}
 800e2fc:	f107 070c 	add.w	r7, r7, #12
 800e300:	46bd      	mov	sp, r7
 800e302:	bc80      	pop	{r7}
 800e304:	4770      	bx	lr
 800e306:	bf00      	nop

0800e308 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	4603      	mov	r3, r0
 800e310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800e312:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800e316:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e31a:	79fa      	ldrb	r2, [r7, #7]
 800e31c:	601a      	str	r2, [r3, #0]
}
 800e31e:	f107 070c 	add.w	r7, r7, #12
 800e322:	46bd      	mov	sp, r7
 800e324:	bc80      	pop	{r7}
 800e326:	4770      	bx	lr

0800e328 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800e328:	b480      	push	{r7}
 800e32a:	b083      	sub	sp, #12
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	4603      	mov	r3, r0
 800e330:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800e332:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800e336:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e33a:	79fa      	ldrb	r2, [r7, #7]
 800e33c:	601a      	str	r2, [r3, #0]
}
 800e33e:	f107 070c 	add.w	r7, r7, #12
 800e342:	46bd      	mov	sp, r7
 800e344:	bc80      	pop	{r7}
 800e346:	4770      	bx	lr

0800e348 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800e348:	b480      	push	{r7}
 800e34a:	b083      	sub	sp, #12
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	4603      	mov	r3, r0
 800e350:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800e352:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800e356:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e35a:	79fa      	ldrb	r2, [r7, #7]
 800e35c:	601a      	str	r2, [r3, #0]
}
 800e35e:	f107 070c 	add.w	r7, r7, #12
 800e362:	46bd      	mov	sp, r7
 800e364:	bc80      	pop	{r7}
 800e366:	4770      	bx	lr

0800e368 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800e372:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800e376:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e37a:	79fa      	ldrb	r2, [r7, #7]
 800e37c:	f002 0201 	and.w	r2, r2, #1
 800e380:	2a00      	cmp	r2, #0
 800e382:	bf14      	ite	ne
 800e384:	2200      	movne	r2, #0
 800e386:	2201      	moveq	r2, #1
 800e388:	601a      	str	r2, [r3, #0]
}
 800e38a:	f107 070c 	add.w	r7, r7, #12
 800e38e:	46bd      	mov	sp, r7
 800e390:	bc80      	pop	{r7}
 800e392:	4770      	bx	lr

0800e394 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	4603      	mov	r3, r0
 800e39c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800e39e:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800e3a2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e3a6:	79fa      	ldrb	r2, [r7, #7]
 800e3a8:	601a      	str	r2, [r3, #0]
}
 800e3aa:	f107 070c 	add.w	r7, r7, #12
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bc80      	pop	{r7}
 800e3b2:	4770      	bx	lr

0800e3b4 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800e3be:	f248 538c 	movw	r3, #34188	; 0x858c
 800e3c2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e3c6:	79fa      	ldrb	r2, [r7, #7]
 800e3c8:	601a      	str	r2, [r3, #0]
}
 800e3ca:	f107 070c 	add.w	r7, r7, #12
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bc80      	pop	{r7}
 800e3d2:	4770      	bx	lr

0800e3d4 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800e3d4:	b480      	push	{r7}
 800e3d6:	b083      	sub	sp, #12
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d00c      	beq.n	800e400 <SDIO_ITConfig+0x2c>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800e3e6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e3ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e3ee:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800e3f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e3f6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	430a      	orrs	r2, r1
 800e3fc:	63da      	str	r2, [r3, #60]	; 0x3c
 800e3fe:	e00d      	b.n	800e41c <SDIO_ITConfig+0x48>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800e400:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e404:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e408:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800e40c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800e410:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800e412:	687a      	ldr	r2, [r7, #4]
 800e414:	ea6f 0202 	mvn.w	r2, r2
 800e418:	400a      	ands	r2, r1
 800e41a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800e41c:	f107 070c 	add.w	r7, r7, #12
 800e420:	46bd      	mov	sp, r7
 800e422:	bc80      	pop	{r7}
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop

0800e428 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800e430:	f04f 0300 	mov.w	r3, #0
 800e434:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800e436:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e43a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e43e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	4013      	ands	r3, r2
 800e444:	2b00      	cmp	r3, #0
 800e446:	d003      	beq.n	800e450 <SDIO_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800e448:	f04f 0301 	mov.w	r3, #1
 800e44c:	73fb      	strb	r3, [r7, #15]
 800e44e:	e002      	b.n	800e456 <SDIO_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800e450:	f04f 0300 	mov.w	r3, #0
 800e454:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e456:	7bfb      	ldrb	r3, [r7, #15]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	f107 0714 	add.w	r7, r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	bc80      	pop	{r7}
 800e462:	4770      	bx	lr

0800e464 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800e464:	b480      	push	{r7}
 800e466:	b083      	sub	sp, #12
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800e46c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e470:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e474:	687a      	ldr	r2, [r7, #4]
 800e476:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e478:	f107 070c 	add.w	r7, r7, #12
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bc80      	pop	{r7}
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop

0800e484 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800e484:	b480      	push	{r7}
 800e486:	b085      	sub	sp, #20
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800e48c:	f04f 0300 	mov.w	r3, #0
 800e490:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800e492:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e496:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e49a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	4013      	ands	r3, r2
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d003      	beq.n	800e4ac <SDIO_GetITStatus+0x28>
  {
    bitstatus = SET;
 800e4a4:	f04f 0301 	mov.w	r3, #1
 800e4a8:	73fb      	strb	r3, [r7, #15]
 800e4aa:	e002      	b.n	800e4b2 <SDIO_GetITStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800e4ac:	f04f 0300 	mov.w	r3, #0
 800e4b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f107 0714 	add.w	r7, r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bc80      	pop	{r7}
 800e4be:	4770      	bx	lr

0800e4c0 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800e4c0:	b480      	push	{r7}
 800e4c2:	b083      	sub	sp, #12
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800e4c8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e4cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	639a      	str	r2, [r3, #56]	; 0x38
}
 800e4d4:	f107 070c 	add.w	r7, r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bc80      	pop	{r7}
 800e4dc:	4770      	bx	lr
 800e4de:	bf00      	nop

0800e4e0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800e4e8:	687a      	ldr	r2, [r7, #4]
 800e4ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800e4ee:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d10c      	bne.n	800e510 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800e4f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e4fa:	f04f 0101 	mov.w	r1, #1
 800e4fe:	f7fd fcc5 	bl	800be8c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800e502:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800e506:	f04f 0100 	mov.w	r1, #0
 800e50a:	f7fd fcbf 	bl	800be8c <RCC_APB2PeriphResetCmd>
 800e50e:	e026      	b.n	800e55e <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800e510:	687a      	ldr	r2, [r7, #4]
 800e512:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e516:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d10c      	bne.n	800e538 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800e51e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e522:	f04f 0101 	mov.w	r1, #1
 800e526:	f7fd fc87 	bl	800be38 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800e52a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800e52e:	f04f 0100 	mov.w	r1, #0
 800e532:	f7fd fc81 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800e536:	e012      	b.n	800e55e <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e53e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e542:	429a      	cmp	r2, r3
 800e544:	d10b      	bne.n	800e55e <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800e546:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e54a:	f04f 0101 	mov.w	r1, #1
 800e54e:	f7fd fc73 	bl	800be38 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800e552:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800e556:	f04f 0100 	mov.w	r1, #0
 800e55a:	f7fd fc6d 	bl	800be38 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800e55e:	f107 0708 	add.w	r7, r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}
 800e566:	bf00      	nop

0800e568 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800e568:	b480      	push	{r7}
 800e56a:	b085      	sub	sp, #20
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800e572:	f04f 0300 	mov.w	r3, #0
 800e576:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	881b      	ldrh	r3, [r3, #0]
 800e57c:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800e57e:	89fb      	ldrh	r3, [r7, #14]
 800e580:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800e584:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	881a      	ldrh	r2, [r3, #0]
 800e58a:	683b      	ldr	r3, [r7, #0]
 800e58c:	885b      	ldrh	r3, [r3, #2]
 800e58e:	4313      	orrs	r3, r2
 800e590:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e596:	4313      	orrs	r3, r2
 800e598:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800e59a:	683b      	ldr	r3, [r7, #0]
 800e59c:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e59e:	4313      	orrs	r3, r2
 800e5a0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e5a6:	4313      	orrs	r3, r2
 800e5a8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	89fb      	ldrh	r3, [r7, #14]
 800e5c4:	4313      	orrs	r3, r2
 800e5c6:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	89fa      	ldrh	r2, [r7, #14]
 800e5cc:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8b9b      	ldrh	r3, [r3, #28]
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e5d8:	b29a      	uxth	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800e5de:	683b      	ldr	r3, [r7, #0]
 800e5e0:	8a1a      	ldrh	r2, [r3, #16]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	821a      	strh	r2, [r3, #16]
}
 800e5e6:	f107 0714 	add.w	r7, r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bc80      	pop	{r7}
 800e5ee:	4770      	bx	lr

0800e5f0 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b08b      	sub	sp, #44	; 0x2c
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800e5fa:	f04f 0300 	mov.w	r3, #0
 800e5fe:	837b      	strh	r3, [r7, #26]
 800e600:	f04f 0302 	mov.w	r3, #2
 800e604:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e606:	f04f 0300 	mov.w	r3, #0
 800e60a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800e60c:	f04f 0301 	mov.w	r3, #1
 800e610:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800e612:	f04f 0300 	mov.w	r3, #0
 800e616:	61fb      	str	r3, [r7, #28]
 800e618:	f04f 0300 	mov.w	r3, #0
 800e61c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800e61e:	f04f 0300 	mov.w	r3, #0
 800e622:	613b      	str	r3, [r7, #16]
 800e624:	f04f 0300 	mov.w	r3, #0
 800e628:	60fb      	str	r3, [r7, #12]
 800e62a:	f04f 0300 	mov.w	r3, #0
 800e62e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	8b9b      	ldrh	r3, [r3, #28]
 800e634:	b29b      	uxth	r3, r3
 800e636:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800e63a:	f023 031f 	bic.w	r3, r3, #31
 800e63e:	b29a      	uxth	r2, r3
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f04f 0202 	mov.w	r2, #2
 800e64a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	8b9b      	ldrh	r3, [r3, #28]
 800e650:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	689b      	ldr	r3, [r3, #8]
 800e656:	2b02      	cmp	r3, #2
 800e658:	d106      	bne.n	800e668 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800e65a:	f04f 0300 	mov.w	r3, #0
 800e65e:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800e660:	f04f 0302 	mov.w	r3, #2
 800e664:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e666:	e09a      	b.n	800e79e <I2S_Init+0x1ae>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	889b      	ldrh	r3, [r3, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d103      	bne.n	800e678 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800e670:	f04f 0301 	mov.w	r3, #1
 800e674:	847b      	strh	r3, [r7, #34]	; 0x22
 800e676:	e002      	b.n	800e67e <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800e678:	f04f 0302 	mov.w	r3, #2
 800e67c:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800e67e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e682:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e686:	689b      	ldr	r3, [r3, #8]
 800e688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00b      	beq.n	800e6a8 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800e690:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800e69c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800e6a0:	6892      	ldr	r2, [r2, #8]
 800e6a2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e6a6:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800e6a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e6ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e6b0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800e6b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800e6be:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800e6c2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800e6c6:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800e6c8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e6cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e6d4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800e6d8:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800e6dc:	f003 0307 	and.w	r3, r3, #7
 800e6e0:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800e6e2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800e6e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6f0:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800e6f2:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800e6f6:	f2c0 037a 	movt	r3, #122	; 0x7a
 800e6fa:	693a      	ldr	r2, [r7, #16]
 800e6fc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e700:	68fa      	ldr	r2, [r7, #12]
 800e702:	fb02 f203 	mul.w	r2, r2, r3
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	fbb2 f3f3 	udiv	r3, r2, r3
 800e70c:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	88db      	ldrh	r3, [r3, #6]
 800e712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e716:	d113      	bne.n	800e740 <I2S_Init+0x150>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800e71e:	4613      	mov	r3, r2
 800e720:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e724:	189b      	adds	r3, r3, r2
 800e726:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e72a:	461a      	mov	r2, r3
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	689b      	ldr	r3, [r3, #8]
 800e730:	fbb2 f3f3 	udiv	r3, r2, r3
 800e734:	b29b      	uxth	r3, r3
 800e736:	f103 0305 	add.w	r3, r3, #5
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	61fb      	str	r3, [r7, #28]
 800e73e:	e015      	b.n	800e76c <I2S_Init+0x17c>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800e740:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e742:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800e746:	697a      	ldr	r2, [r7, #20]
 800e748:	fbb2 f2f3 	udiv	r2, r2, r3
 800e74c:	4613      	mov	r3, r2
 800e74e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800e752:	189b      	adds	r3, r3, r2
 800e754:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e758:	461a      	mov	r2, r3
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e762:	b29b      	uxth	r3, r3
 800e764:	f103 0305 	add.w	r3, r3, #5
 800e768:	b29b      	uxth	r3, r3
 800e76a:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800e76c:	69fa      	ldr	r2, [r7, #28]
 800e76e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800e772:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800e776:	fba3 1302 	umull	r1, r3, r3, r2
 800e77a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800e77e:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	b29b      	uxth	r3, r3
 800e784:	f003 0301 	and.w	r3, r3, #1
 800e788:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800e78a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e78c:	69fa      	ldr	r2, [r7, #28]
 800e78e:	1ad3      	subs	r3, r2, r3
 800e790:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800e794:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800e796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e798:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e79c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800e79e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d902      	bls.n	800e7aa <I2S_Init+0x1ba>
 800e7a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7a6:	2bff      	cmp	r3, #255	; 0xff
 800e7a8:	d905      	bls.n	800e7b6 <I2S_Init+0x1c6>
  {
    /* Set the default values */
    i2sdiv = 2;
 800e7aa:	f04f 0302 	mov.w	r3, #2
 800e7ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800e7b0:	f04f 0300 	mov.w	r3, #0
 800e7b4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800e7b6:	683b      	ldr	r3, [r7, #0]
 800e7b8:	88da      	ldrh	r2, [r3, #6]
 800e7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7bc:	4313      	orrs	r3, r2
 800e7be:	b29a      	uxth	r2, r3
 800e7c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e7c2:	4313      	orrs	r3, r2
 800e7c4:	b29a      	uxth	r2, r3
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	8859      	ldrh	r1, [r3, #2]
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800e7da:	4303      	orrs	r3, r0
 800e7dc:	b29b      	uxth	r3, r3
 800e7de:	430b      	orrs	r3, r1
 800e7e0:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800e7e2:	4313      	orrs	r3, r2
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	8b7b      	ldrh	r3, [r7, #26]
 800e7e8:	4313      	orrs	r3, r2
 800e7ea:	b29b      	uxth	r3, r3
 800e7ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e7f0:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	8b7a      	ldrh	r2, [r7, #26]
 800e7f6:	839a      	strh	r2, [r3, #28]
}
 800e7f8:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bc80      	pop	{r7}
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop

0800e804 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f04f 0200 	mov.w	r2, #0
 800e812:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f04f 0200 	mov.w	r2, #0
 800e81a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f04f 0200 	mov.w	r2, #0
 800e822:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f04f 0200 	mov.w	r2, #0
 800e82a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f04f 0200 	mov.w	r2, #0
 800e832:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f04f 0200 	mov.w	r2, #0
 800e842:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f04f 0200 	mov.w	r2, #0
 800e84a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f04f 0207 	mov.w	r2, #7
 800e852:	821a      	strh	r2, [r3, #16]
}
 800e854:	f107 070c 	add.w	r7, r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	bc80      	pop	{r7}
 800e85c:	4770      	bx	lr
 800e85e:	bf00      	nop

0800e860 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f04f 0200 	mov.w	r2, #0
 800e86e:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f04f 0200 	mov.w	r2, #0
 800e876:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f04f 0200 	mov.w	r2, #0
 800e87e:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f04f 0200 	mov.w	r2, #0
 800e886:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f04f 0202 	mov.w	r2, #2
 800e88e:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f04f 0200 	mov.w	r2, #0
 800e896:	819a      	strh	r2, [r3, #12]
}
 800e898:	f107 070c 	add.w	r7, r7, #12
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bc80      	pop	{r7}
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop

0800e8a4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800e8a4:	b480      	push	{r7}
 800e8a6:	b083      	sub	sp, #12
 800e8a8:	af00      	add	r7, sp, #0
 800e8aa:	6078      	str	r0, [r7, #4]
 800e8ac:	460b      	mov	r3, r1
 800e8ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d008      	beq.n	800e8c8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	881b      	ldrh	r3, [r3, #0]
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8c0:	b29a      	uxth	r2, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	801a      	strh	r2, [r3, #0]
 800e8c6:	e007      	b.n	800e8d8 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	881b      	ldrh	r3, [r3, #0]
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8d2:	b29a      	uxth	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	801a      	strh	r2, [r3, #0]
  }
}
 800e8d8:	f107 070c 	add.w	r7, r7, #12
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bc80      	pop	{r7}
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop

0800e8e4 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b083      	sub	sp, #12
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e8f0:	78fb      	ldrb	r3, [r7, #3]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d008      	beq.n	800e908 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	8b9b      	ldrh	r3, [r3, #28]
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e900:	b29a      	uxth	r2, r3
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	839a      	strh	r2, [r3, #28]
 800e906:	e007      	b.n	800e918 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8b9b      	ldrh	r3, [r3, #28]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e912:	b29a      	uxth	r2, r3
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	839a      	strh	r2, [r3, #28]
  }
}
 800e918:	f107 070c 	add.w	r7, r7, #12
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bc80      	pop	{r7}
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop

0800e924 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800e924:	b480      	push	{r7}
 800e926:	b083      	sub	sp, #12
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	460b      	mov	r3, r1
 800e92e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	b29b      	uxth	r3, r3
 800e936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	881b      	ldrh	r3, [r3, #0]
 800e944:	b29a      	uxth	r2, r3
 800e946:	887b      	ldrh	r3, [r7, #2]
 800e948:	4313      	orrs	r3, r2
 800e94a:	b29a      	uxth	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	801a      	strh	r2, [r3, #0]
}
 800e950:	f107 070c 	add.w	r7, r7, #12
 800e954:	46bd      	mov	sp, r7
 800e956:	bc80      	pop	{r7}
 800e958:	4770      	bx	lr
 800e95a:	bf00      	nop

0800e95c <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800e95c:	b480      	push	{r7}
 800e95e:	b083      	sub	sp, #12
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
 800e964:	460b      	mov	r3, r1
 800e966:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800e968:	887b      	ldrh	r3, [r7, #2]
 800e96a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e96e:	d108      	bne.n	800e982 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	881b      	ldrh	r3, [r3, #0]
 800e974:	b29b      	uxth	r3, r3
 800e976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e97a:	b29a      	uxth	r2, r3
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	801a      	strh	r2, [r3, #0]
 800e980:	e007      	b.n	800e992 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	881b      	ldrh	r3, [r3, #0]
 800e986:	b29b      	uxth	r3, r3
 800e988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	801a      	strh	r2, [r3, #0]
  }
}
 800e992:	f107 070c 	add.w	r7, r7, #12
 800e996:	46bd      	mov	sp, r7
 800e998:	bc80      	pop	{r7}
 800e99a:	4770      	bx	lr

0800e99c <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	460b      	mov	r3, r1
 800e9a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800e9a8:	887a      	ldrh	r2, [r7, #2]
 800e9aa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800e9ae:	429a      	cmp	r2, r3
 800e9b0:	d008      	beq.n	800e9c4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e9bc:	b29a      	uxth	r2, r3
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	801a      	strh	r2, [r3, #0]
 800e9c2:	e007      	b.n	800e9d4 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	881b      	ldrh	r3, [r3, #0]
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9ce:	b29a      	uxth	r2, r3
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	801a      	strh	r2, [r3, #0]
  }
}
 800e9d4:	f107 070c 	add.w	r7, r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bc80      	pop	{r7}
 800e9dc:	4770      	bx	lr
 800e9de:	bf00      	nop

0800e9e0 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e9ec:	78fb      	ldrb	r3, [r7, #3]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d008      	beq.n	800ea04 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	889b      	ldrh	r3, [r3, #4]
 800e9f6:	b29b      	uxth	r3, r3
 800e9f8:	f043 0304 	orr.w	r3, r3, #4
 800e9fc:	b29a      	uxth	r2, r3
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	809a      	strh	r2, [r3, #4]
 800ea02:	e007      	b.n	800ea14 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	889b      	ldrh	r3, [r3, #4]
 800ea08:	b29b      	uxth	r3, r3
 800ea0a:	f023 0304 	bic.w	r3, r3, #4
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	809a      	strh	r2, [r3, #4]
  }
}
 800ea14:	f107 070c 	add.w	r7, r7, #12
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bc80      	pop	{r7}
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop

0800ea20 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	460b      	mov	r3, r1
 800ea2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ea2c:	78fb      	ldrb	r3, [r7, #3]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d008      	beq.n	800ea44 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	889b      	ldrh	r3, [r3, #4]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	f043 0310 	orr.w	r3, r3, #16
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	809a      	strh	r2, [r3, #4]
 800ea42:	e007      	b.n	800ea54 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	889b      	ldrh	r3, [r3, #4]
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	f023 0310 	bic.w	r3, r3, #16
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	809a      	strh	r2, [r3, #4]
  }
}
 800ea54:	f107 070c 	add.w	r7, r7, #12
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bc80      	pop	{r7}
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop

0800ea60 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800ea60:	b480      	push	{r7}
 800ea62:	b085      	sub	sp, #20
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800ea6a:	f04f 0300 	mov.w	r3, #0
 800ea6e:	81bb      	strh	r3, [r7, #12]
 800ea70:	f04f 0300 	mov.w	r3, #0
 800ea74:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8b9b      	ldrh	r3, [r3, #28]
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800ea80:	f023 031f 	bic.w	r3, r3, #31
 800ea84:	b29a      	uxth	r2, r3
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f04f 0202 	mov.w	r2, #2
 800ea90:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	8b9b      	ldrh	r3, [r3, #28]
 800ea96:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eaa0:	d003      	beq.n	800eaaa <I2S_FullDuplexConfig+0x4a>
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	881b      	ldrh	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d103      	bne.n	800eab2 <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 800eaaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eaae:	81fb      	strh	r3, [r7, #14]
 800eab0:	e00c      	b.n	800eacc <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800eab2:	683b      	ldr	r3, [r7, #0]
 800eab4:	881b      	ldrh	r3, [r3, #0]
 800eab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800eaba:	d004      	beq.n	800eac6 <I2S_FullDuplexConfig+0x66>
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	881b      	ldrh	r3, [r3, #0]
 800eac0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eac4:	d102      	bne.n	800eacc <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 800eac6:	f04f 0300 	mov.w	r3, #0
 800eaca:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	885a      	ldrh	r2, [r3, #2]
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800ead8:	430b      	orrs	r3, r1
 800eada:	b29b      	uxth	r3, r3
 800eadc:	4313      	orrs	r3, r2
 800eade:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800eae0:	89fb      	ldrh	r3, [r7, #14]
 800eae2:	4313      	orrs	r3, r2
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	89bb      	ldrh	r3, [r7, #12]
 800eae8:	4313      	orrs	r3, r2
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800eaf0:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	89ba      	ldrh	r2, [r7, #12]
 800eaf6:	839a      	strh	r2, [r3, #28]
}
 800eaf8:	f107 0714 	add.w	r7, r7, #20
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bc80      	pop	{r7}
 800eb00:	4770      	bx	lr
 800eb02:	bf00      	nop

0800eb04 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	899b      	ldrh	r3, [r3, #12]
 800eb10:	b29b      	uxth	r3, r3
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	f107 070c 	add.w	r7, r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bc80      	pop	{r7}
 800eb1c:	4770      	bx	lr
 800eb1e:	bf00      	nop

0800eb20 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	887a      	ldrh	r2, [r7, #2]
 800eb30:	819a      	strh	r2, [r3, #12]
}
 800eb32:	f107 070c 	add.w	r7, r7, #12
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bc80      	pop	{r7}
 800eb3a:	4770      	bx	lr

0800eb3c <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b083      	sub	sp, #12
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	460b      	mov	r3, r1
 800eb46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800eb48:	78fb      	ldrb	r3, [r7, #3]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d008      	beq.n	800eb60 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	b29b      	uxth	r3, r3
 800eb54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800eb58:	b29a      	uxth	r2, r3
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	801a      	strh	r2, [r3, #0]
 800eb5e:	e007      	b.n	800eb70 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	881b      	ldrh	r3, [r3, #0]
 800eb64:	b29b      	uxth	r3, r3
 800eb66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800eb6a:	b29a      	uxth	r2, r3
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	801a      	strh	r2, [r3, #0]
  }
}
 800eb70:	f107 070c 	add.w	r7, r7, #12
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bc80      	pop	{r7}
 800eb78:	4770      	bx	lr
 800eb7a:	bf00      	nop

0800eb7c <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	881b      	ldrh	r3, [r3, #0]
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800eb8e:	b29a      	uxth	r2, r3
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	801a      	strh	r2, [r3, #0]
}
 800eb94:	f107 070c 	add.w	r7, r7, #12
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bc80      	pop	{r7}
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop

0800eba0 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800eba0:	b480      	push	{r7}
 800eba2:	b085      	sub	sp, #20
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
 800eba8:	460b      	mov	r3, r1
 800ebaa:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800ebac:	f04f 0300 	mov.w	r3, #0
 800ebb0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800ebb2:	78fb      	ldrb	r3, [r7, #3]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d003      	beq.n	800ebc0 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	8b1b      	ldrh	r3, [r3, #24]
 800ebbc:	81fb      	strh	r3, [r7, #14]
 800ebbe:	e002      	b.n	800ebc6 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	8a9b      	ldrh	r3, [r3, #20]
 800ebc4:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800ebc6:	89fb      	ldrh	r3, [r7, #14]
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f107 0714 	add.w	r7, r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bc80      	pop	{r7}
 800ebd2:	4770      	bx	lr

0800ebd4 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	8a1b      	ldrh	r3, [r3, #16]
 800ebe0:	b29b      	uxth	r3, r3
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f107 070c 	add.w	r7, r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bc80      	pop	{r7}
 800ebec:	4770      	bx	lr
 800ebee:	bf00      	nop

0800ebf0 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	4613      	mov	r3, r2
 800ebfa:	460a      	mov	r2, r1
 800ebfc:	807a      	strh	r2, [r7, #2]
 800ebfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800ec00:	787b      	ldrb	r3, [r7, #1]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d008      	beq.n	800ec18 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	889b      	ldrh	r3, [r3, #4]
 800ec0a:	b29a      	uxth	r2, r3
 800ec0c:	887b      	ldrh	r3, [r7, #2]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	b29a      	uxth	r2, r3
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	809a      	strh	r2, [r3, #4]
 800ec16:	e00a      	b.n	800ec2e <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	889b      	ldrh	r3, [r3, #4]
 800ec1c:	b29a      	uxth	r2, r3
 800ec1e:	887b      	ldrh	r3, [r7, #2]
 800ec20:	ea6f 0303 	mvn.w	r3, r3
 800ec24:	b29b      	uxth	r3, r3
 800ec26:	4013      	ands	r3, r2
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	809a      	strh	r2, [r3, #4]
  }
}
 800ec2e:	f107 070c 	add.w	r7, r7, #12
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bc80      	pop	{r7}
 800ec36:	4770      	bx	lr

0800ec38 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
 800ec40:	4613      	mov	r3, r2
 800ec42:	460a      	mov	r2, r1
 800ec44:	70fa      	strb	r2, [r7, #3]
 800ec46:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800ec48:	f04f 0300 	mov.w	r3, #0
 800ec4c:	81fb      	strh	r3, [r7, #14]
 800ec4e:	f04f 0300 	mov.w	r3, #0
 800ec52:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800ec54:	78fb      	ldrb	r3, [r7, #3]
 800ec56:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800ec5e:	89fb      	ldrh	r3, [r7, #14]
 800ec60:	f04f 0201 	mov.w	r2, #1
 800ec64:	fa02 f303 	lsl.w	r3, r2, r3
 800ec68:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800ec6a:	78bb      	ldrb	r3, [r7, #2]
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d008      	beq.n	800ec82 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	889b      	ldrh	r3, [r3, #4]
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	89bb      	ldrh	r3, [r7, #12]
 800ec78:	4313      	orrs	r3, r2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	809a      	strh	r2, [r3, #4]
 800ec80:	e00a      	b.n	800ec98 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	889b      	ldrh	r3, [r3, #4]
 800ec86:	b29a      	uxth	r2, r3
 800ec88:	89bb      	ldrh	r3, [r7, #12]
 800ec8a:	ea6f 0303 	mvn.w	r3, r3
 800ec8e:	b29b      	uxth	r3, r3
 800ec90:	4013      	ands	r3, r2
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	809a      	strh	r2, [r3, #4]
  }
}
 800ec98:	f107 0714 	add.w	r7, r7, #20
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bc80      	pop	{r7}
 800eca0:	4770      	bx	lr
 800eca2:	bf00      	nop

0800eca4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800eca4:	b480      	push	{r7}
 800eca6:	b085      	sub	sp, #20
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	460b      	mov	r3, r1
 800ecae:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800ecb0:	f04f 0300 	mov.w	r3, #0
 800ecb4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	891b      	ldrh	r3, [r3, #8]
 800ecba:	b29a      	uxth	r2, r3
 800ecbc:	887b      	ldrh	r3, [r7, #2]
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d003      	beq.n	800ecce <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800ecc6:	f04f 0301 	mov.w	r3, #1
 800ecca:	73fb      	strb	r3, [r7, #15]
 800eccc:	e002      	b.n	800ecd4 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800ecce:	f04f 0300 	mov.w	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f107 0714 	add.w	r7, r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bc80      	pop	{r7}
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop

0800ece4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800ecf0:	887b      	ldrh	r3, [r7, #2]
 800ecf2:	ea6f 0303 	mvn.w	r3, r3
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	811a      	strh	r2, [r3, #8]
}
 800ecfc:	f107 070c 	add.w	r7, r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bc80      	pop	{r7}
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop

0800ed08 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b085      	sub	sp, #20
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
 800ed10:	460b      	mov	r3, r1
 800ed12:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800ed14:	f04f 0300 	mov.w	r3, #0
 800ed18:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800ed1a:	f04f 0300 	mov.w	r3, #0
 800ed1e:	81bb      	strh	r3, [r7, #12]
 800ed20:	f04f 0300 	mov.w	r3, #0
 800ed24:	817b      	strh	r3, [r7, #10]
 800ed26:	f04f 0300 	mov.w	r3, #0
 800ed2a:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800ed2c:	78fb      	ldrb	r3, [r7, #3]
 800ed2e:	f003 030f 	and.w	r3, r3, #15
 800ed32:	f04f 0201 	mov.w	r2, #1
 800ed36:	fa02 f303 	lsl.w	r3, r2, r3
 800ed3a:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ed42:	b2db      	uxtb	r3, r3
 800ed44:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800ed46:	897b      	ldrh	r3, [r7, #10]
 800ed48:	f04f 0201 	mov.w	r2, #1
 800ed4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed50:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	889b      	ldrh	r3, [r3, #4]
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	897b      	ldrh	r3, [r7, #10]
 800ed5a:	4013      	ands	r3, r2
 800ed5c:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	891b      	ldrh	r3, [r3, #8]
 800ed62:	b29a      	uxth	r2, r3
 800ed64:	89bb      	ldrh	r3, [r7, #12]
 800ed66:	4013      	ands	r3, r2
 800ed68:	b29b      	uxth	r3, r3
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d006      	beq.n	800ed7c <SPI_I2S_GetITStatus+0x74>
 800ed6e:	893b      	ldrh	r3, [r7, #8]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d003      	beq.n	800ed7c <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800ed74:	f04f 0301 	mov.w	r3, #1
 800ed78:	73fb      	strb	r3, [r7, #15]
 800ed7a:	e002      	b.n	800ed82 <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800ed7c:	f04f 0300 	mov.w	r3, #0
 800ed80:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed84:	4618      	mov	r0, r3
 800ed86:	f107 0714 	add.w	r7, r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bc80      	pop	{r7}
 800ed8e:	4770      	bx	lr

0800ed90 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800ed90:	b480      	push	{r7}
 800ed92:	b085      	sub	sp, #20
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800ed9c:	f04f 0300 	mov.w	r3, #0
 800eda0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800eda2:	78fb      	ldrb	r3, [r7, #3]
 800eda4:	f003 030f 	and.w	r3, r3, #15
 800eda8:	f04f 0201 	mov.w	r2, #1
 800edac:	fa02 f303 	lsl.w	r3, r2, r3
 800edb0:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800edb2:	89fb      	ldrh	r3, [r7, #14]
 800edb4:	ea6f 0303 	mvn.w	r3, r3
 800edb8:	b29a      	uxth	r2, r3
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	811a      	strh	r2, [r3, #8]
}
 800edbe:	f107 0714 	add.w	r7, r7, #20
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bc80      	pop	{r7}
 800edc6:	4770      	bx	lr

0800edc8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800edcc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800edd0:	f04f 0101 	mov.w	r1, #1
 800edd4:	f7fd f85a 	bl	800be8c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800edd8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800eddc:	f04f 0100 	mov.w	r1, #0
 800ede0:	f7fd f854 	bl	800be8c <RCC_APB2PeriphResetCmd>
}
 800ede4:	bd80      	pop	{r7, pc}
 800ede6:	bf00      	nop

0800ede8 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800ede8:	b480      	push	{r7}
 800edea:	b083      	sub	sp, #12
 800edec:	af00      	add	r7, sp, #0
 800edee:	4603      	mov	r3, r0
 800edf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800edf2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edf6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800edfa:	79fa      	ldrb	r2, [r7, #7]
 800edfc:	601a      	str	r2, [r3, #0]
}
 800edfe:	f107 070c 	add.w	r7, r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bc80      	pop	{r7}
 800ee06:	4770      	bx	lr

0800ee08 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800ee08:	b490      	push	{r4, r7}
 800ee0a:	b084      	sub	sp, #16
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	4602      	mov	r2, r0
 800ee10:	460b      	mov	r3, r1
 800ee12:	71fa      	strb	r2, [r7, #7]
 800ee14:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800ee16:	f04f 0300 	mov.w	r3, #0
 800ee1a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800ee1c:	79bb      	ldrb	r3, [r7, #6]
 800ee1e:	f003 0303 	and.w	r3, r3, #3
 800ee22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee26:	f04f 020f 	mov.w	r2, #15
 800ee2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee2e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800ee30:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ee34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ee38:	79ba      	ldrb	r2, [r7, #6]
 800ee3a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800ee3e:	b2d2      	uxtb	r2, r2
 800ee40:	4610      	mov	r0, r2
 800ee42:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ee46:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800ee4a:	79b9      	ldrb	r1, [r7, #6]
 800ee4c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800ee50:	b2c9      	uxtb	r1, r1
 800ee52:	f101 0102 	add.w	r1, r1, #2
 800ee56:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	ea6f 0202 	mvn.w	r2, r2
 800ee60:	4011      	ands	r1, r2
 800ee62:	f100 0202 	add.w	r2, r0, #2
 800ee66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800ee6a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ee6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ee72:	79ba      	ldrb	r2, [r7, #6]
 800ee74:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800ee78:	b2d2      	uxtb	r2, r2
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ee80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800ee84:	79b9      	ldrb	r1, [r7, #6]
 800ee86:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800ee8a:	b2c9      	uxtb	r1, r1
 800ee8c:	f101 0102 	add.w	r1, r1, #2
 800ee90:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800ee94:	79fc      	ldrb	r4, [r7, #7]
 800ee96:	79ba      	ldrb	r2, [r7, #6]
 800ee98:	f002 0203 	and.w	r2, r2, #3
 800ee9c:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800eea0:	fa04 f202 	lsl.w	r2, r4, r2
 800eea4:	4311      	orrs	r1, r2
 800eea6:	f100 0202 	add.w	r2, r0, #2
 800eeaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800eeae:	f107 0710 	add.w	r7, r7, #16
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bc90      	pop	{r4, r7}
 800eeb6:	4770      	bx	lr

0800eeb8 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800eeb8:	b480      	push	{r7}
 800eeba:	b083      	sub	sp, #12
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800eec0:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800eec4:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	601a      	str	r2, [r3, #0]
}
 800eecc:	f107 070c 	add.w	r7, r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bc80      	pop	{r7}
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop

0800eed8 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800eee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eee6:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800eeea:	79fa      	ldrb	r2, [r7, #7]
 800eeec:	601a      	str	r2, [r3, #0]
}
 800eeee:	f107 070c 	add.w	r7, r7, #12
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bc80      	pop	{r7}
 800eef6:	4770      	bx	lr

0800eef8 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800eefe:	f04f 0300 	mov.w	r3, #0
 800ef02:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800ef04:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ef08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d003      	beq.n	800ef1e <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800ef16:	f04f 0301 	mov.w	r3, #1
 800ef1a:	71fb      	strb	r3, [r7, #7]
 800ef1c:	e002      	b.n	800ef24 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800ef1e:	f04f 0300 	mov.w	r3, #0
 800ef22:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800ef24:	79fb      	ldrb	r3, [r7, #7]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	f107 070c 	add.w	r7, r7, #12
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bc80      	pop	{r7}
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop

0800ef34 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	f04f 0300 	mov.w	r3, #0
 800ef42:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d10c      	bne.n	800ef64 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800ef4a:	f04f 0001 	mov.w	r0, #1
 800ef4e:	f04f 0101 	mov.w	r1, #1
 800ef52:	f7fc ff9b 	bl	800be8c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800ef56:	f04f 0001 	mov.w	r0, #1
 800ef5a:	f04f 0100 	mov.w	r1, #0
 800ef5e:	f7fc ff95 	bl	800be8c <RCC_APB2PeriphResetCmd>
 800ef62:	e0ff      	b.n	800f164 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef6a:	d10c      	bne.n	800ef86 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800ef6c:	f04f 0001 	mov.w	r0, #1
 800ef70:	f04f 0101 	mov.w	r1, #1
 800ef74:	f7fc ff60 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800ef78:	f04f 0001 	mov.w	r0, #1
 800ef7c:	f04f 0100 	mov.w	r1, #0
 800ef80:	f7fc ff5a 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800ef84:	e0ee      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d10c      	bne.n	800efae <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800ef94:	f04f 0002 	mov.w	r0, #2
 800ef98:	f04f 0101 	mov.w	r1, #1
 800ef9c:	f7fc ff4c 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800efa0:	f04f 0002 	mov.w	r0, #2
 800efa4:	f04f 0100 	mov.w	r1, #0
 800efa8:	f7fc ff46 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800efac:	e0da      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800efae:	687a      	ldr	r2, [r7, #4]
 800efb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800efb8:	429a      	cmp	r2, r3
 800efba:	d10c      	bne.n	800efd6 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800efbc:	f04f 0004 	mov.w	r0, #4
 800efc0:	f04f 0101 	mov.w	r1, #1
 800efc4:	f7fc ff38 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800efc8:	f04f 0004 	mov.w	r0, #4
 800efcc:	f04f 0100 	mov.w	r1, #0
 800efd0:	f7fc ff32 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800efd4:	e0c6      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800efdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d10c      	bne.n	800effe <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800efe4:	f04f 0008 	mov.w	r0, #8
 800efe8:	f04f 0101 	mov.w	r1, #1
 800efec:	f7fc ff24 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800eff0:	f04f 0008 	mov.w	r0, #8
 800eff4:	f04f 0100 	mov.w	r1, #0
 800eff8:	f7fc ff1e 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800effc:	e0b2      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f008:	429a      	cmp	r2, r3
 800f00a:	d10c      	bne.n	800f026 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800f00c:	f04f 0010 	mov.w	r0, #16
 800f010:	f04f 0101 	mov.w	r1, #1
 800f014:	f7fc ff10 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800f018:	f04f 0010 	mov.w	r0, #16
 800f01c:	f04f 0100 	mov.w	r1, #0
 800f020:	f7fc ff0a 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800f024:	e09e      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f02c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f030:	429a      	cmp	r2, r3
 800f032:	d10c      	bne.n	800f04e <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800f034:	f04f 0020 	mov.w	r0, #32
 800f038:	f04f 0101 	mov.w	r1, #1
 800f03c:	f7fc fefc 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800f040:	f04f 0020 	mov.w	r0, #32
 800f044:	f04f 0100 	mov.w	r1, #0
 800f048:	f7fc fef6 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800f04c:	e08a      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800f04e:	687a      	ldr	r2, [r7, #4]
 800f050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f054:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f058:	429a      	cmp	r2, r3
 800f05a:	d10c      	bne.n	800f076 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800f05c:	f04f 0002 	mov.w	r0, #2
 800f060:	f04f 0101 	mov.w	r1, #1
 800f064:	f7fc ff12 	bl	800be8c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800f068:	f04f 0002 	mov.w	r0, #2
 800f06c:	f04f 0100 	mov.w	r1, #0
 800f070:	f7fc ff0c 	bl	800be8c <RCC_APB2PeriphResetCmd>
 800f074:	e076      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f07c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f080:	429a      	cmp	r2, r3
 800f082:	d10c      	bne.n	800f09e <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800f084:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f088:	f04f 0101 	mov.w	r1, #1
 800f08c:	f7fc fefe 	bl	800be8c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800f090:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f094:	f04f 0100 	mov.w	r1, #0
 800f098:	f7fc fef8 	bl	800be8c <RCC_APB2PeriphResetCmd>
 800f09c:	e062      	b.n	800f164 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800f0a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d10c      	bne.n	800f0c6 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800f0ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f0b0:	f04f 0101 	mov.w	r1, #1
 800f0b4:	f7fc feea 	bl	800be8c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800f0b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f0bc:	f04f 0100 	mov.w	r1, #0
 800f0c0:	f7fc fee4 	bl	800be8c <RCC_APB2PeriphResetCmd>
 800f0c4:	e04e      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800f0cc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0d0:	429a      	cmp	r2, r3
 800f0d2:	d10c      	bne.n	800f0ee <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800f0d4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f0d8:	f04f 0101 	mov.w	r1, #1
 800f0dc:	f7fc fed6 	bl	800be8c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800f0e0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f0e4:	f04f 0100 	mov.w	r1, #0
 800f0e8:	f7fc fed0 	bl	800be8c <RCC_APB2PeriphResetCmd>
 800f0ec:	e03a      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f0f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f0f8:	429a      	cmp	r2, r3
 800f0fa:	d10c      	bne.n	800f116 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800f0fc:	f04f 0040 	mov.w	r0, #64	; 0x40
 800f100:	f04f 0101 	mov.w	r1, #1
 800f104:	f7fc fe98 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800f108:	f04f 0040 	mov.w	r0, #64	; 0x40
 800f10c:	f04f 0100 	mov.w	r1, #0
 800f110:	f7fc fe92 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800f114:	e026      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f11c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f120:	429a      	cmp	r2, r3
 800f122:	d10c      	bne.n	800f13e <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800f124:	f04f 0080 	mov.w	r0, #128	; 0x80
 800f128:	f04f 0101 	mov.w	r1, #1
 800f12c:	f7fc fe84 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800f130:	f04f 0080 	mov.w	r0, #128	; 0x80
 800f134:	f04f 0100 	mov.w	r1, #0
 800f138:	f7fc fe7e 	bl	800be38 <RCC_APB1PeriphResetCmd>
 800f13c:	e012      	b.n	800f164 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f144:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f148:	429a      	cmp	r2, r3
 800f14a:	d10b      	bne.n	800f164 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800f14c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f150:	f04f 0101 	mov.w	r1, #1
 800f154:	f7fc fe70 	bl	800be38 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800f158:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f15c:	f04f 0100 	mov.w	r1, #0
 800f160:	f7fc fe6a 	bl	800be38 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800f164:	f107 0708 	add.w	r7, r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}

0800f16c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800f16c:	b480      	push	{r7}
 800f16e:	b085      	sub	sp, #20
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800f176:	f04f 0300 	mov.w	r3, #0
 800f17a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800f182:	687a      	ldr	r2, [r7, #4]
 800f184:	f04f 0300 	mov.w	r3, #0
 800f188:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d01f      	beq.n	800f1d0 <TIM_TimeBaseInit+0x64>
 800f190:	687a      	ldr	r2, [r7, #4]
 800f192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f196:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d018      	beq.n	800f1d0 <TIM_TimeBaseInit+0x64>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1a4:	d014      	beq.n	800f1d0 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800f1a6:	687a      	ldr	r2, [r7, #4]
 800f1a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1b0:	429a      	cmp	r2, r3
 800f1b2:	d00d      	beq.n	800f1d0 <TIM_TimeBaseInit+0x64>
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f1ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d006      	beq.n	800f1d0 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800f1c2:	687a      	ldr	r2, [r7, #4]
 800f1c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f1c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d108      	bne.n	800f1e2 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800f1d0:	89fb      	ldrh	r3, [r7, #14]
 800f1d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1d6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	885a      	ldrh	r2, [r3, #2]
 800f1dc:	89fb      	ldrh	r3, [r7, #14]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d00f      	beq.n	800f210 <TIM_TimeBaseInit+0xa4>
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f1f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d008      	beq.n	800f210 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800f1fe:	89fb      	ldrh	r3, [r7, #14]
 800f200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f204:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	891a      	ldrh	r2, [r3, #8]
 800f20a:	89fb      	ldrh	r3, [r7, #14]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	89fa      	ldrh	r2, [r7, #14]
 800f214:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800f216:	683b      	ldr	r3, [r7, #0]
 800f218:	685a      	ldr	r2, [r3, #4]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	881a      	ldrh	r2, [r3, #0]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800f226:	687a      	ldr	r2, [r7, #4]
 800f228:	f04f 0300 	mov.w	r3, #0
 800f22c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f230:	429a      	cmp	r2, r3
 800f232:	d006      	beq.n	800f242 <TIM_TimeBaseInit+0xd6>
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f23a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f23e:	429a      	cmp	r2, r3
 800f240:	d104      	bne.n	800f24c <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800f242:	683b      	ldr	r3, [r7, #0]
 800f244:	7a9b      	ldrb	r3, [r3, #10]
 800f246:	461a      	mov	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f04f 0201 	mov.w	r2, #1
 800f252:	829a      	strh	r2, [r3, #20]
}
 800f254:	f107 0714 	add.w	r7, r7, #20
 800f258:	46bd      	mov	sp, r7
 800f25a:	bc80      	pop	{r7}
 800f25c:	4770      	bx	lr
 800f25e:	bf00      	nop

0800f260 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800f260:	b480      	push	{r7}
 800f262:	b083      	sub	sp, #12
 800f264:	af00      	add	r7, sp, #0
 800f266:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	f04f 32ff 	mov.w	r2, #4294967295
 800f26e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	f04f 0200 	mov.w	r2, #0
 800f276:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	f04f 0200 	mov.w	r2, #0
 800f27e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f04f 0200 	mov.w	r2, #0
 800f286:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f04f 0200 	mov.w	r2, #0
 800f28e:	729a      	strb	r2, [r3, #10]
}
 800f290:	f107 070c 	add.w	r7, r7, #12
 800f294:	46bd      	mov	sp, r7
 800f296:	bc80      	pop	{r7}
 800f298:	4770      	bx	lr
 800f29a:	bf00      	nop

0800f29c <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	6078      	str	r0, [r7, #4]
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	460a      	mov	r2, r1
 800f2a8:	807a      	strh	r2, [r7, #2]
 800f2aa:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	887a      	ldrh	r2, [r7, #2]
 800f2b0:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	883a      	ldrh	r2, [r7, #0]
 800f2b6:	829a      	strh	r2, [r3, #20]
}
 800f2b8:	f107 070c 	add.w	r7, r7, #12
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bc80      	pop	{r7}
 800f2c0:	4770      	bx	lr
 800f2c2:	bf00      	nop

0800f2c4 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b085      	sub	sp, #20
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	460b      	mov	r3, r1
 800f2ce:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800f2d0:	f04f 0300 	mov.w	r3, #0
 800f2d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f2dc:	89fb      	ldrh	r3, [r7, #14]
 800f2de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2e2:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800f2e4:	89fa      	ldrh	r2, [r7, #14]
 800f2e6:	887b      	ldrh	r3, [r7, #2]
 800f2e8:	4313      	orrs	r3, r2
 800f2ea:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	89fa      	ldrh	r2, [r7, #14]
 800f2f0:	801a      	strh	r2, [r3, #0]
}
 800f2f2:	f107 0714 	add.w	r7, r7, #20
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bc80      	pop	{r7}
 800f2fa:	4770      	bx	lr

0800f2fc <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800f2fc:	b480      	push	{r7}
 800f2fe:	b083      	sub	sp, #12
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	683a      	ldr	r2, [r7, #0]
 800f30a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f30c:	f107 070c 	add.w	r7, r7, #12
 800f310:	46bd      	mov	sp, r7
 800f312:	bc80      	pop	{r7}
 800f314:	4770      	bx	lr
 800f316:	bf00      	nop

0800f318 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	683a      	ldr	r2, [r7, #0]
 800f326:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f328:	f107 070c 	add.w	r7, r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bc80      	pop	{r7}
 800f330:	4770      	bx	lr
 800f332:	bf00      	nop

0800f334 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800f340:	4618      	mov	r0, r3
 800f342:	f107 070c 	add.w	r7, r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	bc80      	pop	{r7}
 800f34a:	4770      	bx	lr

0800f34c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f358:	b29b      	uxth	r3, r3
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	f107 070c 	add.w	r7, r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	bc80      	pop	{r7}
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop

0800f368 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	460b      	mov	r3, r1
 800f372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f374:	78fb      	ldrb	r3, [r7, #3]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d008      	beq.n	800f38c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	f043 0302 	orr.w	r3, r3, #2
 800f384:	b29a      	uxth	r2, r3
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	801a      	strh	r2, [r3, #0]
 800f38a:	e007      	b.n	800f39c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	881b      	ldrh	r3, [r3, #0]
 800f390:	b29b      	uxth	r3, r3
 800f392:	f023 0302 	bic.w	r3, r3, #2
 800f396:	b29a      	uxth	r2, r3
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	801a      	strh	r2, [r3, #0]
  }
}
 800f39c:	f107 070c 	add.w	r7, r7, #12
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bc80      	pop	{r7}
 800f3a4:	4770      	bx	lr
 800f3a6:	bf00      	nop

0800f3a8 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
 800f3b0:	460b      	mov	r3, r1
 800f3b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800f3b4:	887b      	ldrh	r3, [r7, #2]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d008      	beq.n	800f3cc <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	881b      	ldrh	r3, [r3, #0]
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	f043 0304 	orr.w	r3, r3, #4
 800f3c4:	b29a      	uxth	r2, r3
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	801a      	strh	r2, [r3, #0]
 800f3ca:	e007      	b.n	800f3dc <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	881b      	ldrh	r3, [r3, #0]
 800f3d0:	b29b      	uxth	r3, r3
 800f3d2:	f023 0304 	bic.w	r3, r3, #4
 800f3d6:	b29a      	uxth	r2, r3
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	801a      	strh	r2, [r3, #0]
  }
}
 800f3dc:	f107 070c 	add.w	r7, r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bc80      	pop	{r7}
 800f3e4:	4770      	bx	lr
 800f3e6:	bf00      	nop

0800f3e8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f3f4:	78fb      	ldrb	r3, [r7, #3]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d008      	beq.n	800f40c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	881b      	ldrh	r3, [r3, #0]
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f404:	b29a      	uxth	r2, r3
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	801a      	strh	r2, [r3, #0]
 800f40a:	e007      	b.n	800f41c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	881b      	ldrh	r3, [r3, #0]
 800f410:	b29b      	uxth	r3, r3
 800f412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f416:	b29a      	uxth	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	801a      	strh	r2, [r3, #0]
  }
}
 800f41c:	f107 070c 	add.w	r7, r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	bc80      	pop	{r7}
 800f424:	4770      	bx	lr
 800f426:	bf00      	nop

0800f428 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	460b      	mov	r3, r1
 800f432:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	b29b      	uxth	r3, r3
 800f43a:	f023 0308 	bic.w	r3, r3, #8
 800f43e:	b29a      	uxth	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	881b      	ldrh	r3, [r3, #0]
 800f448:	b29a      	uxth	r2, r3
 800f44a:	887b      	ldrh	r3, [r7, #2]
 800f44c:	4313      	orrs	r3, r2
 800f44e:	b29a      	uxth	r2, r3
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	801a      	strh	r2, [r3, #0]
}
 800f454:	f107 070c 	add.w	r7, r7, #12
 800f458:	46bd      	mov	sp, r7
 800f45a:	bc80      	pop	{r7}
 800f45c:	4770      	bx	lr
 800f45e:	bf00      	nop

0800f460 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800f460:	b480      	push	{r7}
 800f462:	b083      	sub	sp, #12
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	460b      	mov	r3, r1
 800f46a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	881b      	ldrh	r3, [r3, #0]
 800f470:	b29b      	uxth	r3, r3
 800f472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f476:	b29a      	uxth	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	881b      	ldrh	r3, [r3, #0]
 800f480:	b29a      	uxth	r2, r3
 800f482:	887b      	ldrh	r3, [r7, #2]
 800f484:	4313      	orrs	r3, r2
 800f486:	b29a      	uxth	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	801a      	strh	r2, [r3, #0]
}
 800f48c:	f107 070c 	add.w	r7, r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	bc80      	pop	{r7}
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop

0800f498 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f4a4:	78fb      	ldrb	r3, [r7, #3]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d008      	beq.n	800f4bc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	881b      	ldrh	r3, [r3, #0]
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	f043 0301 	orr.w	r3, r3, #1
 800f4b4:	b29a      	uxth	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	801a      	strh	r2, [r3, #0]
 800f4ba:	e007      	b.n	800f4cc <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	881b      	ldrh	r3, [r3, #0]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	f023 0301 	bic.w	r3, r3, #1
 800f4c6:	b29a      	uxth	r2, r3
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	801a      	strh	r2, [r3, #0]
  }
}
 800f4cc:	f107 070c 	add.w	r7, r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bc80      	pop	{r7}
 800f4d4:	4770      	bx	lr
 800f4d6:	bf00      	nop

0800f4d8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b085      	sub	sp, #20
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800f4e2:	f04f 0300 	mov.w	r3, #0
 800f4e6:	817b      	strh	r3, [r7, #10]
 800f4e8:	f04f 0300 	mov.w	r3, #0
 800f4ec:	81fb      	strh	r3, [r7, #14]
 800f4ee:	f04f 0300 	mov.w	r3, #0
 800f4f2:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	8c1b      	ldrh	r3, [r3, #32]
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	f023 0301 	bic.w	r3, r3, #1
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	8c1b      	ldrh	r3, [r3, #32]
 800f508:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	889b      	ldrh	r3, [r3, #4]
 800f50e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	8b1b      	ldrh	r3, [r3, #24]
 800f514:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800f516:	897b      	ldrh	r3, [r7, #10]
 800f518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f51c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800f51e:	897b      	ldrh	r3, [r7, #10]
 800f520:	f023 0303 	bic.w	r3, r3, #3
 800f524:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	881a      	ldrh	r2, [r3, #0]
 800f52a:	897b      	ldrh	r3, [r7, #10]
 800f52c:	4313      	orrs	r3, r2
 800f52e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800f530:	89fb      	ldrh	r3, [r7, #14]
 800f532:	f023 0302 	bic.w	r3, r3, #2
 800f536:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	899a      	ldrh	r2, [r3, #12]
 800f53c:	89fb      	ldrh	r3, [r7, #14]
 800f53e:	4313      	orrs	r3, r2
 800f540:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800f542:	683b      	ldr	r3, [r7, #0]
 800f544:	885a      	ldrh	r2, [r3, #2]
 800f546:	89fb      	ldrh	r3, [r7, #14]
 800f548:	4313      	orrs	r3, r2
 800f54a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	f04f 0300 	mov.w	r3, #0
 800f552:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f556:	429a      	cmp	r2, r3
 800f558:	d006      	beq.n	800f568 <TIM_OC1Init+0x90>
 800f55a:	687a      	ldr	r2, [r7, #4]
 800f55c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f560:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f564:	429a      	cmp	r2, r3
 800f566:	d123      	bne.n	800f5b0 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800f568:	89fb      	ldrh	r3, [r7, #14]
 800f56a:	f023 0308 	bic.w	r3, r3, #8
 800f56e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	89da      	ldrh	r2, [r3, #14]
 800f574:	89fb      	ldrh	r3, [r7, #14]
 800f576:	4313      	orrs	r3, r2
 800f578:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800f57a:	89fb      	ldrh	r3, [r7, #14]
 800f57c:	f023 0304 	bic.w	r3, r3, #4
 800f580:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800f582:	683b      	ldr	r3, [r7, #0]
 800f584:	889a      	ldrh	r2, [r3, #4]
 800f586:	89fb      	ldrh	r3, [r7, #14]
 800f588:	4313      	orrs	r3, r2
 800f58a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800f58c:	89bb      	ldrh	r3, [r7, #12]
 800f58e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f592:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800f594:	89bb      	ldrh	r3, [r7, #12]
 800f596:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f59a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	8a1a      	ldrh	r2, [r3, #16]
 800f5a0:	89bb      	ldrh	r3, [r7, #12]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800f5a6:	683b      	ldr	r3, [r7, #0]
 800f5a8:	8a5a      	ldrh	r2, [r3, #18]
 800f5aa:	89bb      	ldrh	r3, [r7, #12]
 800f5ac:	4313      	orrs	r3, r2
 800f5ae:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	89ba      	ldrh	r2, [r7, #12]
 800f5b4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	897a      	ldrh	r2, [r7, #10]
 800f5ba:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	689a      	ldr	r2, [r3, #8]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	89fa      	ldrh	r2, [r7, #14]
 800f5c8:	841a      	strh	r2, [r3, #32]
}
 800f5ca:	f107 0714 	add.w	r7, r7, #20
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bc80      	pop	{r7}
 800f5d2:	4770      	bx	lr

0800f5d4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b085      	sub	sp, #20
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
 800f5dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800f5de:	f04f 0300 	mov.w	r3, #0
 800f5e2:	817b      	strh	r3, [r7, #10]
 800f5e4:	f04f 0300 	mov.w	r3, #0
 800f5e8:	81fb      	strh	r3, [r7, #14]
 800f5ea:	f04f 0300 	mov.w	r3, #0
 800f5ee:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	8c1b      	ldrh	r3, [r3, #32]
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	f023 0310 	bic.w	r3, r3, #16
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	8c1b      	ldrh	r3, [r3, #32]
 800f604:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	889b      	ldrh	r3, [r3, #4]
 800f60a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8b1b      	ldrh	r3, [r3, #24]
 800f610:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800f612:	897b      	ldrh	r3, [r7, #10]
 800f614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f618:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800f61a:	897b      	ldrh	r3, [r7, #10]
 800f61c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f620:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	881b      	ldrh	r3, [r3, #0]
 800f626:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f62a:	b29a      	uxth	r2, r3
 800f62c:	897b      	ldrh	r3, [r7, #10]
 800f62e:	4313      	orrs	r3, r2
 800f630:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800f632:	89fb      	ldrh	r3, [r7, #14]
 800f634:	f023 0320 	bic.w	r3, r3, #32
 800f638:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800f63a:	683b      	ldr	r3, [r7, #0]
 800f63c:	899b      	ldrh	r3, [r3, #12]
 800f63e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f642:	b29a      	uxth	r2, r3
 800f644:	89fb      	ldrh	r3, [r7, #14]
 800f646:	4313      	orrs	r3, r2
 800f648:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	885b      	ldrh	r3, [r3, #2]
 800f64e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f652:	b29a      	uxth	r2, r3
 800f654:	89fb      	ldrh	r3, [r7, #14]
 800f656:	4313      	orrs	r3, r2
 800f658:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	f04f 0300 	mov.w	r3, #0
 800f660:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f664:	429a      	cmp	r2, r3
 800f666:	d006      	beq.n	800f676 <TIM_OC2Init+0xa2>
 800f668:	687a      	ldr	r2, [r7, #4]
 800f66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f66e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f672:	429a      	cmp	r2, r3
 800f674:	d12f      	bne.n	800f6d6 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800f676:	89fb      	ldrh	r3, [r7, #14]
 800f678:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f67c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	89db      	ldrh	r3, [r3, #14]
 800f682:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f686:	b29a      	uxth	r2, r3
 800f688:	89fb      	ldrh	r3, [r7, #14]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800f68e:	89fb      	ldrh	r3, [r7, #14]
 800f690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f694:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	889b      	ldrh	r3, [r3, #4]
 800f69a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f69e:	b29a      	uxth	r2, r3
 800f6a0:	89fb      	ldrh	r3, [r7, #14]
 800f6a2:	4313      	orrs	r3, r2
 800f6a4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800f6a6:	89bb      	ldrh	r3, [r7, #12]
 800f6a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f6ac:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800f6ae:	89bb      	ldrh	r3, [r7, #12]
 800f6b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f6b4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	8a1b      	ldrh	r3, [r3, #16]
 800f6ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f6be:	b29a      	uxth	r2, r3
 800f6c0:	89bb      	ldrh	r3, [r7, #12]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	8a5b      	ldrh	r3, [r3, #18]
 800f6ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f6ce:	b29a      	uxth	r2, r3
 800f6d0:	89bb      	ldrh	r3, [r7, #12]
 800f6d2:	4313      	orrs	r3, r2
 800f6d4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	89ba      	ldrh	r2, [r7, #12]
 800f6da:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	897a      	ldrh	r2, [r7, #10]
 800f6e0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	689a      	ldr	r2, [r3, #8]
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	89fa      	ldrh	r2, [r7, #14]
 800f6ee:	841a      	strh	r2, [r3, #32]
}
 800f6f0:	f107 0714 	add.w	r7, r7, #20
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bc80      	pop	{r7}
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop

0800f6fc <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800f706:	f04f 0300 	mov.w	r3, #0
 800f70a:	817b      	strh	r3, [r7, #10]
 800f70c:	f04f 0300 	mov.w	r3, #0
 800f710:	81fb      	strh	r3, [r7, #14]
 800f712:	f04f 0300 	mov.w	r3, #0
 800f716:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	8c1b      	ldrh	r3, [r3, #32]
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f722:	b29a      	uxth	r2, r3
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	8c1b      	ldrh	r3, [r3, #32]
 800f72c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	889b      	ldrh	r3, [r3, #4]
 800f732:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	8b9b      	ldrh	r3, [r3, #28]
 800f738:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800f73a:	897b      	ldrh	r3, [r7, #10]
 800f73c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f740:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800f742:	897b      	ldrh	r3, [r7, #10]
 800f744:	f023 0303 	bic.w	r3, r3, #3
 800f748:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	881a      	ldrh	r2, [r3, #0]
 800f74e:	897b      	ldrh	r3, [r7, #10]
 800f750:	4313      	orrs	r3, r2
 800f752:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800f754:	89fb      	ldrh	r3, [r7, #14]
 800f756:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f75a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	899b      	ldrh	r3, [r3, #12]
 800f760:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f764:	b29a      	uxth	r2, r3
 800f766:	89fb      	ldrh	r3, [r7, #14]
 800f768:	4313      	orrs	r3, r2
 800f76a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	885b      	ldrh	r3, [r3, #2]
 800f770:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f774:	b29a      	uxth	r2, r3
 800f776:	89fb      	ldrh	r3, [r7, #14]
 800f778:	4313      	orrs	r3, r2
 800f77a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	f04f 0300 	mov.w	r3, #0
 800f782:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f786:	429a      	cmp	r2, r3
 800f788:	d006      	beq.n	800f798 <TIM_OC3Init+0x9c>
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f790:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f794:	429a      	cmp	r2, r3
 800f796:	d12f      	bne.n	800f7f8 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800f798:	89fb      	ldrh	r3, [r7, #14]
 800f79a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f79e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	89db      	ldrh	r3, [r3, #14]
 800f7a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	89fb      	ldrh	r3, [r7, #14]
 800f7ac:	4313      	orrs	r3, r2
 800f7ae:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800f7b0:	89fb      	ldrh	r3, [r7, #14]
 800f7b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7b6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800f7b8:	683b      	ldr	r3, [r7, #0]
 800f7ba:	889b      	ldrh	r3, [r3, #4]
 800f7bc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	89fb      	ldrh	r3, [r7, #14]
 800f7c4:	4313      	orrs	r3, r2
 800f7c6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800f7c8:	89bb      	ldrh	r3, [r7, #12]
 800f7ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f7ce:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800f7d0:	89bb      	ldrh	r3, [r7, #12]
 800f7d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f7d6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	8a1b      	ldrh	r3, [r3, #16]
 800f7dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	89bb      	ldrh	r3, [r7, #12]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	8a5b      	ldrh	r3, [r3, #18]
 800f7ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800f7f0:	b29a      	uxth	r2, r3
 800f7f2:	89bb      	ldrh	r3, [r7, #12]
 800f7f4:	4313      	orrs	r3, r2
 800f7f6:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	89ba      	ldrh	r2, [r7, #12]
 800f7fc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	897a      	ldrh	r2, [r7, #10]
 800f802:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800f804:	683b      	ldr	r3, [r7, #0]
 800f806:	689a      	ldr	r2, [r3, #8]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	89fa      	ldrh	r2, [r7, #14]
 800f810:	841a      	strh	r2, [r3, #32]
}
 800f812:	f107 0714 	add.w	r7, r7, #20
 800f816:	46bd      	mov	sp, r7
 800f818:	bc80      	pop	{r7}
 800f81a:	4770      	bx	lr

0800f81c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800f826:	f04f 0300 	mov.w	r3, #0
 800f82a:	81bb      	strh	r3, [r7, #12]
 800f82c:	f04f 0300 	mov.w	r3, #0
 800f830:	817b      	strh	r3, [r7, #10]
 800f832:	f04f 0300 	mov.w	r3, #0
 800f836:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	8c1b      	ldrh	r3, [r3, #32]
 800f83c:	b29b      	uxth	r3, r3
 800f83e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f842:	b29a      	uxth	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	8c1b      	ldrh	r3, [r3, #32]
 800f84c:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	889b      	ldrh	r3, [r3, #4]
 800f852:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	8b9b      	ldrh	r3, [r3, #28]
 800f858:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800f85a:	89bb      	ldrh	r3, [r7, #12]
 800f85c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f860:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800f862:	89bb      	ldrh	r3, [r7, #12]
 800f864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f868:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800f86a:	683b      	ldr	r3, [r7, #0]
 800f86c:	881b      	ldrh	r3, [r3, #0]
 800f86e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f872:	b29a      	uxth	r2, r3
 800f874:	89bb      	ldrh	r3, [r7, #12]
 800f876:	4313      	orrs	r3, r2
 800f878:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800f87a:	897b      	ldrh	r3, [r7, #10]
 800f87c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f880:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	899b      	ldrh	r3, [r3, #12]
 800f886:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	897b      	ldrh	r3, [r7, #10]
 800f88e:	4313      	orrs	r3, r2
 800f890:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800f892:	683b      	ldr	r3, [r7, #0]
 800f894:	885b      	ldrh	r3, [r3, #2]
 800f896:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	897b      	ldrh	r3, [r7, #10]
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	f04f 0300 	mov.w	r3, #0
 800f8a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d006      	beq.n	800f8be <TIM_OC4Init+0xa2>
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d10b      	bne.n	800f8d6 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800f8be:	89fb      	ldrh	r3, [r7, #14]
 800f8c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f8c4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	8a1b      	ldrh	r3, [r3, #16]
 800f8ca:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800f8ce:	b29a      	uxth	r2, r3
 800f8d0:	89fb      	ldrh	r3, [r7, #14]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	89fa      	ldrh	r2, [r7, #14]
 800f8da:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	89ba      	ldrh	r2, [r7, #12]
 800f8e0:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	689a      	ldr	r2, [r3, #8]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	897a      	ldrh	r2, [r7, #10]
 800f8ee:	841a      	strh	r2, [r3, #32]
}
 800f8f0:	f107 0714 	add.w	r7, r7, #20
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bc80      	pop	{r7}
 800f8f8:	4770      	bx	lr
 800f8fa:	bf00      	nop

0800f8fc <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f04f 0200 	mov.w	r2, #0
 800f90a:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f04f 0200 	mov.w	r2, #0
 800f912:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f04f 0200 	mov.w	r2, #0
 800f91a:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f04f 0200 	mov.w	r2, #0
 800f922:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f04f 0200 	mov.w	r2, #0
 800f92a:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	f04f 0200 	mov.w	r2, #0
 800f932:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f04f 0200 	mov.w	r2, #0
 800f93a:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	f04f 0200 	mov.w	r2, #0
 800f942:	825a      	strh	r2, [r3, #18]
}
 800f944:	f107 070c 	add.w	r7, r7, #12
 800f948:	46bd      	mov	sp, r7
 800f94a:	bc80      	pop	{r7}
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop

0800f950 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	4613      	mov	r3, r2
 800f95a:	460a      	mov	r2, r1
 800f95c:	807a      	strh	r2, [r7, #2]
 800f95e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800f960:	f04f 0300 	mov.w	r3, #0
 800f964:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800f966:	f04f 0300 	mov.w	r3, #0
 800f96a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	f103 0318 	add.w	r3, r3, #24
 800f976:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800f978:	887b      	ldrh	r3, [r7, #2]
 800f97a:	f04f 0201 	mov.w	r2, #1
 800f97e:	fa02 f303 	lsl.w	r3, r2, r3
 800f982:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	8c1b      	ldrh	r3, [r3, #32]
 800f988:	b29a      	uxth	r2, r3
 800f98a:	897b      	ldrh	r3, [r7, #10]
 800f98c:	ea6f 0303 	mvn.w	r3, r3
 800f990:	b29b      	uxth	r3, r3
 800f992:	4013      	ands	r3, r2
 800f994:	b29a      	uxth	r2, r3
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800f99a:	887b      	ldrh	r3, [r7, #2]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d002      	beq.n	800f9a6 <TIM_SelectOCxM+0x56>
 800f9a0:	887b      	ldrh	r3, [r7, #2]
 800f9a2:	2b08      	cmp	r3, #8
 800f9a4:	d114      	bne.n	800f9d0 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 800f9a6:	887b      	ldrh	r3, [r7, #2]
 800f9a8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800f9ac:	b29b      	uxth	r3, r3
 800f9ae:	68fa      	ldr	r2, [r7, #12]
 800f9b0:	18d3      	adds	r3, r2, r3
 800f9b2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6819      	ldr	r1, [r3, #0]
 800f9ba:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800f9be:	400b      	ands	r3, r1
 800f9c0:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	68fa      	ldr	r2, [r7, #12]
 800f9c6:	6811      	ldr	r1, [r2, #0]
 800f9c8:	883a      	ldrh	r2, [r7, #0]
 800f9ca:	430a      	orrs	r2, r1
 800f9cc:	601a      	str	r2, [r3, #0]
 800f9ce:	e019      	b.n	800fa04 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800f9d0:	887b      	ldrh	r3, [r7, #2]
 800f9d2:	f1a3 0304 	sub.w	r3, r3, #4
 800f9d6:	b29b      	uxth	r3, r3
 800f9d8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800f9dc:	b29b      	uxth	r3, r3
 800f9de:	68fa      	ldr	r2, [r7, #12]
 800f9e0:	18d3      	adds	r3, r2, r3
 800f9e2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6819      	ldr	r1, [r3, #0]
 800f9ea:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800f9ee:	400b      	ands	r3, r1
 800f9f0:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	68fa      	ldr	r2, [r7, #12]
 800f9f6:	6811      	ldr	r1, [r2, #0]
 800f9f8:	883a      	ldrh	r2, [r7, #0]
 800f9fa:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800f9fe:	b292      	uxth	r2, r2
 800fa00:	430a      	orrs	r2, r1
 800fa02:	601a      	str	r2, [r3, #0]
  }
}
 800fa04:	f107 0714 	add.w	r7, r7, #20
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bc80      	pop	{r7}
 800fa0c:	4770      	bx	lr
 800fa0e:	bf00      	nop

0800fa10 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	683a      	ldr	r2, [r7, #0]
 800fa1e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800fa20:	f107 070c 	add.w	r7, r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bc80      	pop	{r7}
 800fa28:	4770      	bx	lr
 800fa2a:	bf00      	nop

0800fa2c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	683a      	ldr	r2, [r7, #0]
 800fa3a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800fa3c:	f107 070c 	add.w	r7, r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bc80      	pop	{r7}
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop

0800fa48 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800fa58:	f107 070c 	add.w	r7, r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bc80      	pop	{r7}
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop

0800fa64 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	641a      	str	r2, [r3, #64]	; 0x40
}
 800fa74:	f107 070c 	add.w	r7, r7, #12
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bc80      	pop	{r7}
 800fa7c:	4770      	bx	lr
 800fa7e:	bf00      	nop

0800fa80 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800fa80:	b480      	push	{r7}
 800fa82:	b085      	sub	sp, #20
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fa8c:	f04f 0300 	mov.w	r3, #0
 800fa90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	8b1b      	ldrh	r3, [r3, #24]
 800fa96:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800fa98:	89fb      	ldrh	r3, [r7, #14]
 800fa9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa9e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800faa0:	89fa      	ldrh	r2, [r7, #14]
 800faa2:	887b      	ldrh	r3, [r7, #2]
 800faa4:	4313      	orrs	r3, r2
 800faa6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	89fa      	ldrh	r2, [r7, #14]
 800faac:	831a      	strh	r2, [r3, #24]
}
 800faae:	f107 0714 	add.w	r7, r7, #20
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bc80      	pop	{r7}
 800fab6:	4770      	bx	lr

0800fab8 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800fab8:	b480      	push	{r7}
 800faba:	b085      	sub	sp, #20
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	460b      	mov	r3, r1
 800fac2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fac4:	f04f 0300 	mov.w	r3, #0
 800fac8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	8b1b      	ldrh	r3, [r3, #24]
 800face:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800fad0:	89fb      	ldrh	r3, [r7, #14]
 800fad2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fad6:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800fad8:	887b      	ldrh	r3, [r7, #2]
 800fada:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fade:	b29a      	uxth	r2, r3
 800fae0:	89fb      	ldrh	r3, [r7, #14]
 800fae2:	4313      	orrs	r3, r2
 800fae4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	89fa      	ldrh	r2, [r7, #14]
 800faea:	831a      	strh	r2, [r3, #24]
}
 800faec:	f107 0714 	add.w	r7, r7, #20
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bc80      	pop	{r7}
 800faf4:	4770      	bx	lr
 800faf6:	bf00      	nop

0800faf8 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b085      	sub	sp, #20
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	460b      	mov	r3, r1
 800fb02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	8b9b      	ldrh	r3, [r3, #28]
 800fb0e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800fb10:	89fb      	ldrh	r3, [r7, #14]
 800fb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb16:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800fb18:	89fa      	ldrh	r2, [r7, #14]
 800fb1a:	887b      	ldrh	r3, [r7, #2]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	89fa      	ldrh	r2, [r7, #14]
 800fb24:	839a      	strh	r2, [r3, #28]
}
 800fb26:	f107 0714 	add.w	r7, r7, #20
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bc80      	pop	{r7}
 800fb2e:	4770      	bx	lr

0800fb30 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800fb30:	b480      	push	{r7}
 800fb32:	b085      	sub	sp, #20
 800fb34:	af00      	add	r7, sp, #0
 800fb36:	6078      	str	r0, [r7, #4]
 800fb38:	460b      	mov	r3, r1
 800fb3a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fb3c:	f04f 0300 	mov.w	r3, #0
 800fb40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	8b9b      	ldrh	r3, [r3, #28]
 800fb46:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800fb48:	89fb      	ldrh	r3, [r7, #14]
 800fb4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb4e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800fb50:	887b      	ldrh	r3, [r7, #2]
 800fb52:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fb56:	b29a      	uxth	r2, r3
 800fb58:	89fb      	ldrh	r3, [r7, #14]
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	89fa      	ldrh	r2, [r7, #14]
 800fb62:	839a      	strh	r2, [r3, #28]
}
 800fb64:	f107 0714 	add.w	r7, r7, #20
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bc80      	pop	{r7}
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop

0800fb70 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fb7c:	f04f 0300 	mov.w	r3, #0
 800fb80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	8b1b      	ldrh	r3, [r3, #24]
 800fb86:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800fb88:	89fb      	ldrh	r3, [r7, #14]
 800fb8a:	f023 0308 	bic.w	r3, r3, #8
 800fb8e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800fb90:	89fa      	ldrh	r2, [r7, #14]
 800fb92:	887b      	ldrh	r3, [r7, #2]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	89fa      	ldrh	r2, [r7, #14]
 800fb9c:	831a      	strh	r2, [r3, #24]
}
 800fb9e:	f107 0714 	add.w	r7, r7, #20
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bc80      	pop	{r7}
 800fba6:	4770      	bx	lr

0800fba8 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
 800fbb0:	460b      	mov	r3, r1
 800fbb2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fbb4:	f04f 0300 	mov.w	r3, #0
 800fbb8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	8b1b      	ldrh	r3, [r3, #24]
 800fbbe:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800fbc0:	89fb      	ldrh	r3, [r7, #14]
 800fbc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fbc6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800fbc8:	887b      	ldrh	r3, [r7, #2]
 800fbca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fbce:	b29a      	uxth	r2, r3
 800fbd0:	89fb      	ldrh	r3, [r7, #14]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	89fa      	ldrh	r2, [r7, #14]
 800fbda:	831a      	strh	r2, [r3, #24]
}
 800fbdc:	f107 0714 	add.w	r7, r7, #20
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bc80      	pop	{r7}
 800fbe4:	4770      	bx	lr
 800fbe6:	bf00      	nop

0800fbe8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800fbe8:	b480      	push	{r7}
 800fbea:	b085      	sub	sp, #20
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
 800fbf0:	460b      	mov	r3, r1
 800fbf2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fbf4:	f04f 0300 	mov.w	r3, #0
 800fbf8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	8b9b      	ldrh	r3, [r3, #28]
 800fbfe:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800fc00:	89fb      	ldrh	r3, [r7, #14]
 800fc02:	f023 0308 	bic.w	r3, r3, #8
 800fc06:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800fc08:	89fa      	ldrh	r2, [r7, #14]
 800fc0a:	887b      	ldrh	r3, [r7, #2]
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	89fa      	ldrh	r2, [r7, #14]
 800fc14:	839a      	strh	r2, [r3, #28]
}
 800fc16:	f107 0714 	add.w	r7, r7, #20
 800fc1a:	46bd      	mov	sp, r7
 800fc1c:	bc80      	pop	{r7}
 800fc1e:	4770      	bx	lr

0800fc20 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800fc20:	b480      	push	{r7}
 800fc22:	b085      	sub	sp, #20
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	460b      	mov	r3, r1
 800fc2a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fc2c:	f04f 0300 	mov.w	r3, #0
 800fc30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8b9b      	ldrh	r3, [r3, #28]
 800fc36:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800fc38:	89fb      	ldrh	r3, [r7, #14]
 800fc3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fc3e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800fc40:	887b      	ldrh	r3, [r7, #2]
 800fc42:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fc46:	b29a      	uxth	r2, r3
 800fc48:	89fb      	ldrh	r3, [r7, #14]
 800fc4a:	4313      	orrs	r3, r2
 800fc4c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	89fa      	ldrh	r2, [r7, #14]
 800fc52:	839a      	strh	r2, [r3, #28]
}
 800fc54:	f107 0714 	add.w	r7, r7, #20
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bc80      	pop	{r7}
 800fc5c:	4770      	bx	lr
 800fc5e:	bf00      	nop

0800fc60 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800fc60:	b480      	push	{r7}
 800fc62:	b085      	sub	sp, #20
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	6078      	str	r0, [r7, #4]
 800fc68:	460b      	mov	r3, r1
 800fc6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fc6c:	f04f 0300 	mov.w	r3, #0
 800fc70:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8b1b      	ldrh	r3, [r3, #24]
 800fc76:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800fc78:	89fb      	ldrh	r3, [r7, #14]
 800fc7a:	f023 0304 	bic.w	r3, r3, #4
 800fc7e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800fc80:	89fa      	ldrh	r2, [r7, #14]
 800fc82:	887b      	ldrh	r3, [r7, #2]
 800fc84:	4313      	orrs	r3, r2
 800fc86:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	89fa      	ldrh	r2, [r7, #14]
 800fc8c:	831a      	strh	r2, [r3, #24]
}
 800fc8e:	f107 0714 	add.w	r7, r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	bc80      	pop	{r7}
 800fc96:	4770      	bx	lr

0800fc98 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b085      	sub	sp, #20
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fca4:	f04f 0300 	mov.w	r3, #0
 800fca8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	8b1b      	ldrh	r3, [r3, #24]
 800fcae:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800fcb0:	89fb      	ldrh	r3, [r7, #14]
 800fcb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fcb6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800fcb8:	887b      	ldrh	r3, [r7, #2]
 800fcba:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	89fb      	ldrh	r3, [r7, #14]
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	89fa      	ldrh	r2, [r7, #14]
 800fcca:	831a      	strh	r2, [r3, #24]
}
 800fccc:	f107 0714 	add.w	r7, r7, #20
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bc80      	pop	{r7}
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop

0800fcd8 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800fcd8:	b480      	push	{r7}
 800fcda:	b085      	sub	sp, #20
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	6078      	str	r0, [r7, #4]
 800fce0:	460b      	mov	r3, r1
 800fce2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fce4:	f04f 0300 	mov.w	r3, #0
 800fce8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	8b9b      	ldrh	r3, [r3, #28]
 800fcee:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800fcf0:	89fb      	ldrh	r3, [r7, #14]
 800fcf2:	f023 0304 	bic.w	r3, r3, #4
 800fcf6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800fcf8:	89fa      	ldrh	r2, [r7, #14]
 800fcfa:	887b      	ldrh	r3, [r7, #2]
 800fcfc:	4313      	orrs	r3, r2
 800fcfe:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	89fa      	ldrh	r2, [r7, #14]
 800fd04:	839a      	strh	r2, [r3, #28]
}
 800fd06:	f107 0714 	add.w	r7, r7, #20
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bc80      	pop	{r7}
 800fd0e:	4770      	bx	lr

0800fd10 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
 800fd18:	460b      	mov	r3, r1
 800fd1a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fd1c:	f04f 0300 	mov.w	r3, #0
 800fd20:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	8b9b      	ldrh	r3, [r3, #28]
 800fd26:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800fd28:	89fb      	ldrh	r3, [r7, #14]
 800fd2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd2e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800fd30:	887b      	ldrh	r3, [r7, #2]
 800fd32:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fd36:	b29a      	uxth	r2, r3
 800fd38:	89fb      	ldrh	r3, [r7, #14]
 800fd3a:	4313      	orrs	r3, r2
 800fd3c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	89fa      	ldrh	r2, [r7, #14]
 800fd42:	839a      	strh	r2, [r3, #28]
}
 800fd44:	f107 0714 	add.w	r7, r7, #20
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bc80      	pop	{r7}
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop

0800fd50 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	460b      	mov	r3, r1
 800fd5a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fd5c:	f04f 0300 	mov.w	r3, #0
 800fd60:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	8b1b      	ldrh	r3, [r3, #24]
 800fd66:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800fd68:	89fb      	ldrh	r3, [r7, #14]
 800fd6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd6e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800fd70:	89fa      	ldrh	r2, [r7, #14]
 800fd72:	887b      	ldrh	r3, [r7, #2]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	89fa      	ldrh	r2, [r7, #14]
 800fd7c:	831a      	strh	r2, [r3, #24]
}
 800fd7e:	f107 0714 	add.w	r7, r7, #20
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bc80      	pop	{r7}
 800fd86:	4770      	bx	lr

0800fd88 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	460b      	mov	r3, r1
 800fd92:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800fd94:	f04f 0300 	mov.w	r3, #0
 800fd98:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	8b1b      	ldrh	r3, [r3, #24]
 800fd9e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800fda0:	89fb      	ldrh	r3, [r7, #14]
 800fda2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800fda6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800fdaa:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800fdac:	887b      	ldrh	r3, [r7, #2]
 800fdae:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fdb2:	b29a      	uxth	r2, r3
 800fdb4:	89fb      	ldrh	r3, [r7, #14]
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	89fa      	ldrh	r2, [r7, #14]
 800fdbe:	831a      	strh	r2, [r3, #24]
}
 800fdc0:	f107 0714 	add.w	r7, r7, #20
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bc80      	pop	{r7}
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop

0800fdcc <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fdd8:	f04f 0300 	mov.w	r3, #0
 800fddc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	8b9b      	ldrh	r3, [r3, #28]
 800fde2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800fde4:	89fb      	ldrh	r3, [r7, #14]
 800fde6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdea:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800fdec:	89fa      	ldrh	r2, [r7, #14]
 800fdee:	887b      	ldrh	r3, [r7, #2]
 800fdf0:	4313      	orrs	r3, r2
 800fdf2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	89fa      	ldrh	r2, [r7, #14]
 800fdf8:	839a      	strh	r2, [r3, #28]
}
 800fdfa:	f107 0714 	add.w	r7, r7, #20
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	bc80      	pop	{r7}
 800fe02:	4770      	bx	lr

0800fe04 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800fe04:	b480      	push	{r7}
 800fe06:	b085      	sub	sp, #20
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	460b      	mov	r3, r1
 800fe0e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800fe10:	f04f 0300 	mov.w	r3, #0
 800fe14:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	8b9b      	ldrh	r3, [r3, #28]
 800fe1a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800fe1c:	89fb      	ldrh	r3, [r7, #14]
 800fe1e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800fe22:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800fe26:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800fe28:	887b      	ldrh	r3, [r7, #2]
 800fe2a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fe2e:	b29a      	uxth	r2, r3
 800fe30:	89fb      	ldrh	r3, [r7, #14]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	89fa      	ldrh	r2, [r7, #14]
 800fe3a:	839a      	strh	r2, [r3, #28]
}
 800fe3c:	f107 0714 	add.w	r7, r7, #20
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bc80      	pop	{r7}
 800fe44:	4770      	bx	lr
 800fe46:	bf00      	nop

0800fe48 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	460b      	mov	r3, r1
 800fe52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800fe54:	f04f 0300 	mov.w	r3, #0
 800fe58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	8c1b      	ldrh	r3, [r3, #32]
 800fe5e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800fe60:	89fb      	ldrh	r3, [r7, #14]
 800fe62:	f023 0302 	bic.w	r3, r3, #2
 800fe66:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800fe68:	89fa      	ldrh	r2, [r7, #14]
 800fe6a:	887b      	ldrh	r3, [r7, #2]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	89fa      	ldrh	r2, [r7, #14]
 800fe74:	841a      	strh	r2, [r3, #32]
}
 800fe76:	f107 0714 	add.w	r7, r7, #20
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bc80      	pop	{r7}
 800fe7e:	4770      	bx	lr

0800fe80 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
 800fe88:	460b      	mov	r3, r1
 800fe8a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800fe8c:	f04f 0300 	mov.w	r3, #0
 800fe90:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8c1b      	ldrh	r3, [r3, #32]
 800fe96:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800fe98:	89fb      	ldrh	r3, [r7, #14]
 800fe9a:	f023 0308 	bic.w	r3, r3, #8
 800fe9e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800fea0:	89fa      	ldrh	r2, [r7, #14]
 800fea2:	887b      	ldrh	r3, [r7, #2]
 800fea4:	4313      	orrs	r3, r2
 800fea6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	89fa      	ldrh	r2, [r7, #14]
 800feac:	841a      	strh	r2, [r3, #32]
}
 800feae:	f107 0714 	add.w	r7, r7, #20
 800feb2:	46bd      	mov	sp, r7
 800feb4:	bc80      	pop	{r7}
 800feb6:	4770      	bx	lr

0800feb8 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
 800fec0:	460b      	mov	r3, r1
 800fec2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800fec4:	f04f 0300 	mov.w	r3, #0
 800fec8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8c1b      	ldrh	r3, [r3, #32]
 800fece:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800fed0:	89fb      	ldrh	r3, [r7, #14]
 800fed2:	f023 0320 	bic.w	r3, r3, #32
 800fed6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800fed8:	887b      	ldrh	r3, [r7, #2]
 800feda:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fede:	b29a      	uxth	r2, r3
 800fee0:	89fb      	ldrh	r3, [r7, #14]
 800fee2:	4313      	orrs	r3, r2
 800fee4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	89fa      	ldrh	r2, [r7, #14]
 800feea:	841a      	strh	r2, [r3, #32]
}
 800feec:	f107 0714 	add.w	r7, r7, #20
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bc80      	pop	{r7}
 800fef4:	4770      	bx	lr
 800fef6:	bf00      	nop

0800fef8 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800fef8:	b480      	push	{r7}
 800fefa:	b085      	sub	sp, #20
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	460b      	mov	r3, r1
 800ff02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800ff04:	f04f 0300 	mov.w	r3, #0
 800ff08:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	8c1b      	ldrh	r3, [r3, #32]
 800ff0e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800ff10:	89fb      	ldrh	r3, [r7, #14]
 800ff12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff16:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800ff18:	887b      	ldrh	r3, [r7, #2]
 800ff1a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	89fb      	ldrh	r3, [r7, #14]
 800ff22:	4313      	orrs	r3, r2
 800ff24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	89fa      	ldrh	r2, [r7, #14]
 800ff2a:	841a      	strh	r2, [r3, #32]
}
 800ff2c:	f107 0714 	add.w	r7, r7, #20
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bc80      	pop	{r7}
 800ff34:	4770      	bx	lr
 800ff36:	bf00      	nop

0800ff38 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b085      	sub	sp, #20
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
 800ff40:	460b      	mov	r3, r1
 800ff42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800ff44:	f04f 0300 	mov.w	r3, #0
 800ff48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	8c1b      	ldrh	r3, [r3, #32]
 800ff4e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800ff50:	89fb      	ldrh	r3, [r7, #14]
 800ff52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ff56:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800ff58:	887b      	ldrh	r3, [r7, #2]
 800ff5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	89fb      	ldrh	r3, [r7, #14]
 800ff62:	4313      	orrs	r3, r2
 800ff64:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	89fa      	ldrh	r2, [r7, #14]
 800ff6a:	841a      	strh	r2, [r3, #32]
}
 800ff6c:	f107 0714 	add.w	r7, r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bc80      	pop	{r7}
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop

0800ff78 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800ff78:	b480      	push	{r7}
 800ff7a:	b085      	sub	sp, #20
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	460b      	mov	r3, r1
 800ff82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800ff84:	f04f 0300 	mov.w	r3, #0
 800ff88:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	8c1b      	ldrh	r3, [r3, #32]
 800ff8e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800ff90:	89fb      	ldrh	r3, [r7, #14]
 800ff92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff96:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800ff98:	887b      	ldrh	r3, [r7, #2]
 800ff9a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ff9e:	b29a      	uxth	r2, r3
 800ffa0:	89fb      	ldrh	r3, [r7, #14]
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	89fa      	ldrh	r2, [r7, #14]
 800ffaa:	841a      	strh	r2, [r3, #32]
}
 800ffac:	f107 0714 	add.w	r7, r7, #20
 800ffb0:	46bd      	mov	sp, r7
 800ffb2:	bc80      	pop	{r7}
 800ffb4:	4770      	bx	lr
 800ffb6:	bf00      	nop

0800ffb8 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800ffb8:	b480      	push	{r7}
 800ffba:	b085      	sub	sp, #20
 800ffbc:	af00      	add	r7, sp, #0
 800ffbe:	6078      	str	r0, [r7, #4]
 800ffc0:	460b      	mov	r3, r1
 800ffc2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800ffc4:	f04f 0300 	mov.w	r3, #0
 800ffc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	8c1b      	ldrh	r3, [r3, #32]
 800ffce:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800ffd0:	89fb      	ldrh	r3, [r7, #14]
 800ffd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffd6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800ffd8:	887b      	ldrh	r3, [r7, #2]
 800ffda:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ffde:	b29a      	uxth	r2, r3
 800ffe0:	89fb      	ldrh	r3, [r7, #14]
 800ffe2:	4313      	orrs	r3, r2
 800ffe4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	89fa      	ldrh	r2, [r7, #14]
 800ffea:	841a      	strh	r2, [r3, #32]
}
 800ffec:	f107 0714 	add.w	r7, r7, #20
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bc80      	pop	{r7}
 800fff4:	4770      	bx	lr
 800fff6:	bf00      	nop

0800fff8 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800fff8:	b480      	push	{r7}
 800fffa:	b085      	sub	sp, #20
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	4613      	mov	r3, r2
 8010002:	460a      	mov	r2, r1
 8010004:	807a      	strh	r2, [r7, #2]
 8010006:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8010008:	f04f 0300 	mov.w	r3, #0
 801000c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 801000e:	887b      	ldrh	r3, [r7, #2]
 8010010:	f04f 0201 	mov.w	r2, #1
 8010014:	fa02 f303 	lsl.w	r3, r2, r3
 8010018:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	8c1b      	ldrh	r3, [r3, #32]
 801001e:	b29a      	uxth	r2, r3
 8010020:	89fb      	ldrh	r3, [r7, #14]
 8010022:	ea6f 0303 	mvn.w	r3, r3
 8010026:	b29b      	uxth	r3, r3
 8010028:	4013      	ands	r3, r2
 801002a:	b29a      	uxth	r2, r3
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	8c1b      	ldrh	r3, [r3, #32]
 8010034:	b29a      	uxth	r2, r3
 8010036:	8839      	ldrh	r1, [r7, #0]
 8010038:	887b      	ldrh	r3, [r7, #2]
 801003a:	fa01 f303 	lsl.w	r3, r1, r3
 801003e:	b29b      	uxth	r3, r3
 8010040:	4313      	orrs	r3, r2
 8010042:	b29a      	uxth	r2, r3
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	841a      	strh	r2, [r3, #32]
}
 8010048:	f107 0714 	add.w	r7, r7, #20
 801004c:	46bd      	mov	sp, r7
 801004e:	bc80      	pop	{r7}
 8010050:	4770      	bx	lr
 8010052:	bf00      	nop

08010054 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	4613      	mov	r3, r2
 801005e:	460a      	mov	r2, r1
 8010060:	807a      	strh	r2, [r7, #2]
 8010062:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8010064:	f04f 0300 	mov.w	r3, #0
 8010068:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 801006a:	887b      	ldrh	r3, [r7, #2]
 801006c:	f04f 0204 	mov.w	r2, #4
 8010070:	fa02 f303 	lsl.w	r3, r2, r3
 8010074:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	8c1b      	ldrh	r3, [r3, #32]
 801007a:	b29a      	uxth	r2, r3
 801007c:	89fb      	ldrh	r3, [r7, #14]
 801007e:	ea6f 0303 	mvn.w	r3, r3
 8010082:	b29b      	uxth	r3, r3
 8010084:	4013      	ands	r3, r2
 8010086:	b29a      	uxth	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	8c1b      	ldrh	r3, [r3, #32]
 8010090:	b29a      	uxth	r2, r3
 8010092:	8839      	ldrh	r1, [r7, #0]
 8010094:	887b      	ldrh	r3, [r7, #2]
 8010096:	fa01 f303 	lsl.w	r3, r1, r3
 801009a:	b29b      	uxth	r3, r3
 801009c:	4313      	orrs	r3, r2
 801009e:	b29a      	uxth	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	841a      	strh	r2, [r3, #32]
}
 80100a4:	f107 0714 	add.w	r7, r7, #20
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bc80      	pop	{r7}
 80100ac:	4770      	bx	lr
 80100ae:	bf00      	nop

080100b0 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b082      	sub	sp, #8
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
 80100b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d10f      	bne.n	80100e2 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80100c6:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80100c8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80100ca:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80100cc:	891b      	ldrh	r3, [r3, #8]
 80100ce:	6878      	ldr	r0, [r7, #4]
 80100d0:	f000 fcc4 	bl	8010a5c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	88db      	ldrh	r3, [r3, #6]
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	4619      	mov	r1, r3
 80100dc:	f000 f8ec 	bl	80102b8 <TIM_SetIC1Prescaler>
 80100e0:	e036      	b.n	8010150 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	881b      	ldrh	r3, [r3, #0]
 80100e6:	2b04      	cmp	r3, #4
 80100e8:	d10f      	bne.n	801010a <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80100ea:	683b      	ldr	r3, [r7, #0]
 80100ec:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80100ee:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80100f0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80100f2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80100f4:	891b      	ldrh	r3, [r3, #8]
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 fcf0 	bl	8010adc <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80100fc:	683b      	ldr	r3, [r7, #0]
 80100fe:	88db      	ldrh	r3, [r3, #6]
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	4619      	mov	r1, r3
 8010104:	f000 f8f4 	bl	80102f0 <TIM_SetIC2Prescaler>
 8010108:	e022      	b.n	8010150 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	2b08      	cmp	r3, #8
 8010110:	d10f      	bne.n	8010132 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8010112:	683b      	ldr	r3, [r7, #0]
 8010114:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010116:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8010118:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801011a:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801011c:	891b      	ldrh	r3, [r3, #8]
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f000 fd2a 	bl	8010b78 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	88db      	ldrh	r3, [r3, #6]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	4619      	mov	r1, r3
 801012c:	f000 f8fe 	bl	801032c <TIM_SetIC3Prescaler>
 8010130:	e00e      	b.n	8010150 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010136:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010138:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801013a:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801013c:	891b      	ldrh	r3, [r3, #8]
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 fd60 	bl	8010c04 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	88db      	ldrh	r3, [r3, #6]
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	4619      	mov	r1, r3
 801014c:	f000 f90a 	bl	8010364 <TIM_SetIC4Prescaler>
  }
}
 8010150:	f107 0708 	add.w	r7, r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f04f 0200 	mov.w	r2, #0
 8010166:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f04f 0200 	mov.w	r2, #0
 801016e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f04f 0201 	mov.w	r2, #1
 8010176:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f04f 0200 	mov.w	r2, #0
 801017e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f04f 0200 	mov.w	r2, #0
 8010186:	811a      	strh	r2, [r3, #8]
}
 8010188:	f107 070c 	add.w	r7, r7, #12
 801018c:	46bd      	mov	sp, r7
 801018e:	bc80      	pop	{r7}
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop

08010194 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8010194:	b580      	push	{r7, lr}
 8010196:	b084      	sub	sp, #16
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 801019e:	f04f 0300 	mov.w	r3, #0
 80101a2:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 80101a4:	f04f 0301 	mov.w	r3, #1
 80101a8:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80101aa:	683b      	ldr	r3, [r7, #0]
 80101ac:	885b      	ldrh	r3, [r3, #2]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d103      	bne.n	80101ba <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80101b2:	f04f 0302 	mov.w	r3, #2
 80101b6:	81fb      	strh	r3, [r7, #14]
 80101b8:	e002      	b.n	80101c0 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80101ba:	f04f 0300 	mov.w	r3, #0
 80101be:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	889b      	ldrh	r3, [r3, #4]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d103      	bne.n	80101d0 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80101c8:	f04f 0302 	mov.w	r3, #2
 80101cc:	81bb      	strh	r3, [r7, #12]
 80101ce:	e002      	b.n	80101d6 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80101d0:	f04f 0301 	mov.w	r3, #1
 80101d4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d11c      	bne.n	8010218 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	8859      	ldrh	r1, [r3, #2]
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80101e6:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80101e8:	891b      	ldrh	r3, [r3, #8]
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	f000 fc36 	bl	8010a5c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	88db      	ldrh	r3, [r3, #6]
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	4619      	mov	r1, r3
 80101f8:	f000 f85e 	bl	80102b8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	891b      	ldrh	r3, [r3, #8]
 8010200:	89f9      	ldrh	r1, [r7, #14]
 8010202:	89ba      	ldrh	r2, [r7, #12]
 8010204:	6878      	ldr	r0, [r7, #4]
 8010206:	f000 fc69 	bl	8010adc <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801020a:	683b      	ldr	r3, [r7, #0]
 801020c:	88db      	ldrh	r3, [r3, #6]
 801020e:	6878      	ldr	r0, [r7, #4]
 8010210:	4619      	mov	r1, r3
 8010212:	f000 f86d 	bl	80102f0 <TIM_SetIC2Prescaler>
 8010216:	e01b      	b.n	8010250 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	8859      	ldrh	r1, [r3, #2]
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8010220:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8010222:	891b      	ldrh	r3, [r3, #8]
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 fc59 	bl	8010adc <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801022a:	683b      	ldr	r3, [r7, #0]
 801022c:	88db      	ldrh	r3, [r3, #6]
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	4619      	mov	r1, r3
 8010232:	f000 f85d 	bl	80102f0 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	891b      	ldrh	r3, [r3, #8]
 801023a:	89f9      	ldrh	r1, [r7, #14]
 801023c:	89ba      	ldrh	r2, [r7, #12]
 801023e:	6878      	ldr	r0, [r7, #4]
 8010240:	f000 fc0c 	bl	8010a5c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	88db      	ldrh	r3, [r3, #6]
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	4619      	mov	r1, r3
 801024c:	f000 f834 	bl	80102b8 <TIM_SetIC1Prescaler>
  }
}
 8010250:	f107 0710 	add.w	r7, r7, #16
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}

08010258 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8010258:	b480      	push	{r7}
 801025a:	b083      	sub	sp, #12
 801025c:	af00      	add	r7, sp, #0
 801025e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8010264:	4618      	mov	r0, r3
 8010266:	f107 070c 	add.w	r7, r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	bc80      	pop	{r7}
 801026e:	4770      	bx	lr

08010270 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8010270:	b480      	push	{r7}
 8010272:	b083      	sub	sp, #12
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 801027c:	4618      	mov	r0, r3
 801027e:	f107 070c 	add.w	r7, r7, #12
 8010282:	46bd      	mov	sp, r7
 8010284:	bc80      	pop	{r7}
 8010286:	4770      	bx	lr

08010288 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8010288:	b480      	push	{r7}
 801028a:	b083      	sub	sp, #12
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8010294:	4618      	mov	r0, r3
 8010296:	f107 070c 	add.w	r7, r7, #12
 801029a:	46bd      	mov	sp, r7
 801029c:	bc80      	pop	{r7}
 801029e:	4770      	bx	lr

080102a0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b083      	sub	sp, #12
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80102ac:	4618      	mov	r0, r3
 80102ae:	f107 070c 	add.w	r7, r7, #12
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bc80      	pop	{r7}
 80102b6:	4770      	bx	lr

080102b8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b083      	sub	sp, #12
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
 80102c0:	460b      	mov	r3, r1
 80102c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	8b1b      	ldrh	r3, [r3, #24]
 80102c8:	b29b      	uxth	r3, r3
 80102ca:	f023 030c 	bic.w	r3, r3, #12
 80102ce:	b29a      	uxth	r2, r3
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	8b1b      	ldrh	r3, [r3, #24]
 80102d8:	b29a      	uxth	r2, r3
 80102da:	887b      	ldrh	r3, [r7, #2]
 80102dc:	4313      	orrs	r3, r2
 80102de:	b29a      	uxth	r2, r3
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	831a      	strh	r2, [r3, #24]
}
 80102e4:	f107 070c 	add.w	r7, r7, #12
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bc80      	pop	{r7}
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop

080102f0 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
 80102f8:	460b      	mov	r3, r1
 80102fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	8b1b      	ldrh	r3, [r3, #24]
 8010300:	b29b      	uxth	r3, r3
 8010302:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010306:	b29a      	uxth	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	8b1b      	ldrh	r3, [r3, #24]
 8010310:	b29a      	uxth	r2, r3
 8010312:	887b      	ldrh	r3, [r7, #2]
 8010314:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010318:	b29b      	uxth	r3, r3
 801031a:	4313      	orrs	r3, r2
 801031c:	b29a      	uxth	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	831a      	strh	r2, [r3, #24]
}
 8010322:	f107 070c 	add.w	r7, r7, #12
 8010326:	46bd      	mov	sp, r7
 8010328:	bc80      	pop	{r7}
 801032a:	4770      	bx	lr

0801032c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 801032c:	b480      	push	{r7}
 801032e:	b083      	sub	sp, #12
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
 8010334:	460b      	mov	r3, r1
 8010336:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	8b9b      	ldrh	r3, [r3, #28]
 801033c:	b29b      	uxth	r3, r3
 801033e:	f023 030c 	bic.w	r3, r3, #12
 8010342:	b29a      	uxth	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	8b9b      	ldrh	r3, [r3, #28]
 801034c:	b29a      	uxth	r2, r3
 801034e:	887b      	ldrh	r3, [r7, #2]
 8010350:	4313      	orrs	r3, r2
 8010352:	b29a      	uxth	r2, r3
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	839a      	strh	r2, [r3, #28]
}
 8010358:	f107 070c 	add.w	r7, r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	bc80      	pop	{r7}
 8010360:	4770      	bx	lr
 8010362:	bf00      	nop

08010364 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	460b      	mov	r3, r1
 801036e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	8b9b      	ldrh	r3, [r3, #28]
 8010374:	b29b      	uxth	r3, r3
 8010376:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 801037a:	b29a      	uxth	r2, r3
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8b9b      	ldrh	r3, [r3, #28]
 8010384:	b29a      	uxth	r2, r3
 8010386:	887b      	ldrh	r3, [r7, #2]
 8010388:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801038c:	b29b      	uxth	r3, r3
 801038e:	4313      	orrs	r3, r2
 8010390:	b29a      	uxth	r2, r3
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	839a      	strh	r2, [r3, #28]
}
 8010396:	f107 070c 	add.w	r7, r7, #12
 801039a:	46bd      	mov	sp, r7
 801039c:	bc80      	pop	{r7}
 801039e:	4770      	bx	lr

080103a0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
 80103a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	881a      	ldrh	r2, [r3, #0]
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	885b      	ldrh	r3, [r3, #2]
 80103b2:	4313      	orrs	r3, r2
 80103b4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80103ba:	4313      	orrs	r3, r2
 80103bc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80103c2:	4313      	orrs	r3, r2
 80103c4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80103ca:	4313      	orrs	r3, r2
 80103cc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80103d2:	4313      	orrs	r3, r2
 80103d4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80103da:	4313      	orrs	r3, r2
 80103dc:	b29a      	uxth	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80103e4:	f107 070c 	add.w	r7, r7, #12
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bc80      	pop	{r7}
 80103ec:	4770      	bx	lr
 80103ee:	bf00      	nop

080103f0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f04f 0200 	mov.w	r2, #0
 80103fe:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f04f 0200 	mov.w	r2, #0
 8010406:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f04f 0200 	mov.w	r2, #0
 801040e:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f04f 0200 	mov.w	r2, #0
 8010416:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f04f 0200 	mov.w	r2, #0
 801041e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	f04f 0200 	mov.w	r2, #0
 8010426:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	819a      	strh	r2, [r3, #12]
}
 8010430:	f107 070c 	add.w	r7, r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	bc80      	pop	{r7}
 8010438:	4770      	bx	lr
 801043a:	bf00      	nop

0801043c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010448:	78fb      	ldrb	r3, [r7, #3]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00c      	beq.n	8010468 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010454:	b29b      	uxth	r3, r3
 8010456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801045a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801045e:	b29a      	uxth	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8010466:	e00b      	b.n	8010480 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801046e:	b29b      	uxth	r3, r3
 8010470:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8010474:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8010478:	b29a      	uxth	r2, r3
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8010480:	f107 070c 	add.w	r7, r7, #12
 8010484:	46bd      	mov	sp, r7
 8010486:	bc80      	pop	{r7}
 8010488:	4770      	bx	lr
 801048a:	bf00      	nop

0801048c <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801048c:	b480      	push	{r7}
 801048e:	b083      	sub	sp, #12
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010498:	78fb      	ldrb	r3, [r7, #3]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d008      	beq.n	80104b0 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	889b      	ldrh	r3, [r3, #4]
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	f043 0304 	orr.w	r3, r3, #4
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	809a      	strh	r2, [r3, #4]
 80104ae:	e007      	b.n	80104c0 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	889b      	ldrh	r3, [r3, #4]
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	f023 0304 	bic.w	r3, r3, #4
 80104ba:	b29a      	uxth	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	809a      	strh	r2, [r3, #4]
  }
}
 80104c0:	f107 070c 	add.w	r7, r7, #12
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bc80      	pop	{r7}
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop

080104cc <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	6078      	str	r0, [r7, #4]
 80104d4:	460b      	mov	r3, r1
 80104d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80104d8:	78fb      	ldrb	r3, [r7, #3]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d008      	beq.n	80104f0 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	889b      	ldrh	r3, [r3, #4]
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	f043 0301 	orr.w	r3, r3, #1
 80104e8:	b29a      	uxth	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	809a      	strh	r2, [r3, #4]
 80104ee:	e007      	b.n	8010500 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	889b      	ldrh	r3, [r3, #4]
 80104f4:	b29b      	uxth	r3, r3
 80104f6:	f023 0301 	bic.w	r3, r3, #1
 80104fa:	b29a      	uxth	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	809a      	strh	r2, [r3, #4]
  }
}
 8010500:	f107 070c 	add.w	r7, r7, #12
 8010504:	46bd      	mov	sp, r7
 8010506:	bc80      	pop	{r7}
 8010508:	4770      	bx	lr
 801050a:	bf00      	nop

0801050c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 801050c:	b480      	push	{r7}
 801050e:	b083      	sub	sp, #12
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
 8010514:	4613      	mov	r3, r2
 8010516:	460a      	mov	r2, r1
 8010518:	807a      	strh	r2, [r7, #2]
 801051a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801051c:	787b      	ldrb	r3, [r7, #1]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d008      	beq.n	8010534 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	899b      	ldrh	r3, [r3, #12]
 8010526:	b29a      	uxth	r2, r3
 8010528:	887b      	ldrh	r3, [r7, #2]
 801052a:	4313      	orrs	r3, r2
 801052c:	b29a      	uxth	r2, r3
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	819a      	strh	r2, [r3, #12]
 8010532:	e00a      	b.n	801054a <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	899b      	ldrh	r3, [r3, #12]
 8010538:	b29a      	uxth	r2, r3
 801053a:	887b      	ldrh	r3, [r7, #2]
 801053c:	ea6f 0303 	mvn.w	r3, r3
 8010540:	b29b      	uxth	r3, r3
 8010542:	4013      	ands	r3, r2
 8010544:	b29a      	uxth	r2, r3
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	819a      	strh	r2, [r3, #12]
  }
}
 801054a:	f107 070c 	add.w	r7, r7, #12
 801054e:	46bd      	mov	sp, r7
 8010550:	bc80      	pop	{r7}
 8010552:	4770      	bx	lr

08010554 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	460b      	mov	r3, r1
 801055e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	887a      	ldrh	r2, [r7, #2]
 8010564:	829a      	strh	r2, [r3, #20]
}
 8010566:	f107 070c 	add.w	r7, r7, #12
 801056a:	46bd      	mov	sp, r7
 801056c:	bc80      	pop	{r7}
 801056e:	4770      	bx	lr

08010570 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8010570:	b480      	push	{r7}
 8010572:	b085      	sub	sp, #20
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	460b      	mov	r3, r1
 801057a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 801057c:	f04f 0300 	mov.w	r3, #0
 8010580:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8a1b      	ldrh	r3, [r3, #16]
 8010586:	b29a      	uxth	r2, r3
 8010588:	887b      	ldrh	r3, [r7, #2]
 801058a:	4013      	ands	r3, r2
 801058c:	b29b      	uxth	r3, r3
 801058e:	2b00      	cmp	r3, #0
 8010590:	d003      	beq.n	801059a <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8010592:	f04f 0301 	mov.w	r3, #1
 8010596:	73fb      	strb	r3, [r7, #15]
 8010598:	e002      	b.n	80105a0 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 801059a:	f04f 0300 	mov.w	r3, #0
 801059e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80105a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	f107 0714 	add.w	r7, r7, #20
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bc80      	pop	{r7}
 80105ac:	4770      	bx	lr
 80105ae:	bf00      	nop

080105b0 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80105bc:	887b      	ldrh	r3, [r7, #2]
 80105be:	ea6f 0303 	mvn.w	r3, r3
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	821a      	strh	r2, [r3, #16]
}
 80105c8:	f107 070c 	add.w	r7, r7, #12
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bc80      	pop	{r7}
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop

080105d4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	460b      	mov	r3, r1
 80105de:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80105e0:	f04f 0300 	mov.w	r3, #0
 80105e4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80105e6:	f04f 0300 	mov.w	r3, #0
 80105ea:	81bb      	strh	r3, [r7, #12]
 80105ec:	f04f 0300 	mov.w	r3, #0
 80105f0:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	8a1b      	ldrh	r3, [r3, #16]
 80105f6:	b29a      	uxth	r2, r3
 80105f8:	887b      	ldrh	r3, [r7, #2]
 80105fa:	4013      	ands	r3, r2
 80105fc:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	899b      	ldrh	r3, [r3, #12]
 8010602:	b29a      	uxth	r2, r3
 8010604:	887b      	ldrh	r3, [r7, #2]
 8010606:	4013      	ands	r3, r2
 8010608:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 801060a:	89bb      	ldrh	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d006      	beq.n	801061e <TIM_GetITStatus+0x4a>
 8010610:	897b      	ldrh	r3, [r7, #10]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d003      	beq.n	801061e <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 8010616:	f04f 0301 	mov.w	r3, #1
 801061a:	73fb      	strb	r3, [r7, #15]
 801061c:	e002      	b.n	8010624 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 801061e:	f04f 0300 	mov.w	r3, #0
 8010622:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010624:	7bfb      	ldrb	r3, [r7, #15]
}
 8010626:	4618      	mov	r0, r3
 8010628:	f107 0714 	add.w	r7, r7, #20
 801062c:	46bd      	mov	sp, r7
 801062e:	bc80      	pop	{r7}
 8010630:	4770      	bx	lr
 8010632:	bf00      	nop

08010634 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8010634:	b480      	push	{r7}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	460b      	mov	r3, r1
 801063e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8010640:	887b      	ldrh	r3, [r7, #2]
 8010642:	ea6f 0303 	mvn.w	r3, r3
 8010646:	b29a      	uxth	r2, r3
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	821a      	strh	r2, [r3, #16]
}
 801064c:	f107 070c 	add.w	r7, r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	bc80      	pop	{r7}
 8010654:	4770      	bx	lr
 8010656:	bf00      	nop

08010658 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8010658:	b480      	push	{r7}
 801065a:	b083      	sub	sp, #12
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	4613      	mov	r3, r2
 8010662:	460a      	mov	r2, r1
 8010664:	807a      	strh	r2, [r7, #2]
 8010666:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8010668:	887a      	ldrh	r2, [r7, #2]
 801066a:	883b      	ldrh	r3, [r7, #0]
 801066c:	4313      	orrs	r3, r2
 801066e:	b29a      	uxth	r2, r3
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8010676:	f107 070c 	add.w	r7, r7, #12
 801067a:	46bd      	mov	sp, r7
 801067c:	bc80      	pop	{r7}
 801067e:	4770      	bx	lr

08010680 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8010680:	b480      	push	{r7}
 8010682:	b083      	sub	sp, #12
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	4613      	mov	r3, r2
 801068a:	460a      	mov	r2, r1
 801068c:	807a      	strh	r2, [r7, #2]
 801068e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8010690:	787b      	ldrb	r3, [r7, #1]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d008      	beq.n	80106a8 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	899b      	ldrh	r3, [r3, #12]
 801069a:	b29a      	uxth	r2, r3
 801069c:	887b      	ldrh	r3, [r7, #2]
 801069e:	4313      	orrs	r3, r2
 80106a0:	b29a      	uxth	r2, r3
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	819a      	strh	r2, [r3, #12]
 80106a6:	e00a      	b.n	80106be <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	899b      	ldrh	r3, [r3, #12]
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	887b      	ldrh	r3, [r7, #2]
 80106b0:	ea6f 0303 	mvn.w	r3, r3
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	4013      	ands	r3, r2
 80106b8:	b29a      	uxth	r2, r3
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	819a      	strh	r2, [r3, #12]
  }
}
 80106be:	f107 070c 	add.w	r7, r7, #12
 80106c2:	46bd      	mov	sp, r7
 80106c4:	bc80      	pop	{r7}
 80106c6:	4770      	bx	lr

080106c8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	460b      	mov	r3, r1
 80106d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80106d4:	78fb      	ldrb	r3, [r7, #3]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d008      	beq.n	80106ec <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	889b      	ldrh	r3, [r3, #4]
 80106de:	b29b      	uxth	r3, r3
 80106e0:	f043 0308 	orr.w	r3, r3, #8
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	809a      	strh	r2, [r3, #4]
 80106ea:	e007      	b.n	80106fc <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	889b      	ldrh	r3, [r3, #4]
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	f023 0308 	bic.w	r3, r3, #8
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	809a      	strh	r2, [r3, #4]
  }
}
 80106fc:	f107 070c 	add.w	r7, r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	bc80      	pop	{r7}
 8010704:	4770      	bx	lr
 8010706:	bf00      	nop

08010708 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	891b      	ldrh	r3, [r3, #8]
 8010714:	b29b      	uxth	r3, r3
 8010716:	f023 0307 	bic.w	r3, r3, #7
 801071a:	b29a      	uxth	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	811a      	strh	r2, [r3, #8]
}
 8010720:	f107 070c 	add.w	r7, r7, #12
 8010724:	46bd      	mov	sp, r7
 8010726:	bc80      	pop	{r7}
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop

0801072c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	460b      	mov	r3, r1
 8010736:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8010738:	887b      	ldrh	r3, [r7, #2]
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	4619      	mov	r1, r3
 801073e:	f000 f87d 	bl	801083c <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	891b      	ldrh	r3, [r3, #8]
 8010746:	b29b      	uxth	r3, r3
 8010748:	f043 0307 	orr.w	r3, r3, #7
 801074c:	b29a      	uxth	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	811a      	strh	r2, [r3, #8]
}
 8010752:	f107 0708 	add.w	r7, r7, #8
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop

0801075c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 801075c:	b580      	push	{r7, lr}
 801075e:	b084      	sub	sp, #16
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	8179      	strh	r1, [r7, #10]
 8010766:	813a      	strh	r2, [r7, #8]
 8010768:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 801076a:	897b      	ldrh	r3, [r7, #10]
 801076c:	2b60      	cmp	r3, #96	; 0x60
 801076e:	d108      	bne.n	8010782 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8010770:	893a      	ldrh	r2, [r7, #8]
 8010772:	88fb      	ldrh	r3, [r7, #6]
 8010774:	68f8      	ldr	r0, [r7, #12]
 8010776:	4611      	mov	r1, r2
 8010778:	f04f 0201 	mov.w	r2, #1
 801077c:	f000 f9ae 	bl	8010adc <TI2_Config>
 8010780:	e007      	b.n	8010792 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8010782:	893a      	ldrh	r2, [r7, #8]
 8010784:	88fb      	ldrh	r3, [r7, #6]
 8010786:	68f8      	ldr	r0, [r7, #12]
 8010788:	4611      	mov	r1, r2
 801078a:	f04f 0201 	mov.w	r2, #1
 801078e:	f000 f965 	bl	8010a5c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8010792:	897b      	ldrh	r3, [r7, #10]
 8010794:	68f8      	ldr	r0, [r7, #12]
 8010796:	4619      	mov	r1, r3
 8010798:	f000 f850 	bl	801083c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	891b      	ldrh	r3, [r3, #8]
 80107a0:	b29b      	uxth	r3, r3
 80107a2:	f043 0307 	orr.w	r3, r3, #7
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	811a      	strh	r2, [r3, #8]
}
 80107ac:	f107 0710 	add.w	r7, r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}

080107b4 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b086      	sub	sp, #24
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	60f8      	str	r0, [r7, #12]
 80107bc:	8179      	strh	r1, [r7, #10]
 80107be:	813a      	strh	r2, [r7, #8]
 80107c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80107c2:	f04f 0300 	mov.w	r3, #0
 80107c6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80107c8:	8979      	ldrh	r1, [r7, #10]
 80107ca:	893a      	ldrh	r2, [r7, #8]
 80107cc:	88fb      	ldrh	r3, [r7, #6]
 80107ce:	68f8      	ldr	r0, [r7, #12]
 80107d0:	f000 f8a4 	bl	801091c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	891b      	ldrh	r3, [r3, #8]
 80107d8:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80107da:	8afb      	ldrh	r3, [r7, #22]
 80107dc:	f023 0307 	bic.w	r3, r3, #7
 80107e0:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80107e2:	8afb      	ldrh	r3, [r7, #22]
 80107e4:	f043 0307 	orr.w	r3, r3, #7
 80107e8:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80107ea:	8afb      	ldrh	r3, [r7, #22]
 80107ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80107f0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80107f2:	8afb      	ldrh	r3, [r7, #22]
 80107f4:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80107f8:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	8afa      	ldrh	r2, [r7, #22]
 80107fe:	811a      	strh	r2, [r3, #8]
}
 8010800:	f107 0718 	add.w	r7, r7, #24
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}

08010808 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	8179      	strh	r1, [r7, #10]
 8010812:	813a      	strh	r2, [r7, #8]
 8010814:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8010816:	8979      	ldrh	r1, [r7, #10]
 8010818:	893a      	ldrh	r2, [r7, #8]
 801081a:	88fb      	ldrh	r3, [r7, #6]
 801081c:	68f8      	ldr	r0, [r7, #12]
 801081e:	f000 f87d 	bl	801091c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	891b      	ldrh	r3, [r3, #8]
 8010826:	b29b      	uxth	r3, r3
 8010828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801082c:	b29a      	uxth	r2, r3
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	811a      	strh	r2, [r3, #8]
}
 8010832:	f107 0710 	add.w	r7, r7, #16
 8010836:	46bd      	mov	sp, r7
 8010838:	bd80      	pop	{r7, pc}
 801083a:	bf00      	nop

0801083c <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 801083c:	b480      	push	{r7}
 801083e:	b085      	sub	sp, #20
 8010840:	af00      	add	r7, sp, #0
 8010842:	6078      	str	r0, [r7, #4]
 8010844:	460b      	mov	r3, r1
 8010846:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8010848:	f04f 0300 	mov.w	r3, #0
 801084c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	891b      	ldrh	r3, [r3, #8]
 8010852:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8010854:	89fb      	ldrh	r3, [r7, #14]
 8010856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801085a:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 801085c:	89fa      	ldrh	r2, [r7, #14]
 801085e:	887b      	ldrh	r3, [r7, #2]
 8010860:	4313      	orrs	r3, r2
 8010862:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	89fa      	ldrh	r2, [r7, #14]
 8010868:	811a      	strh	r2, [r3, #8]
}
 801086a:	f107 0714 	add.w	r7, r7, #20
 801086e:	46bd      	mov	sp, r7
 8010870:	bc80      	pop	{r7}
 8010872:	4770      	bx	lr

08010874 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	460b      	mov	r3, r1
 801087e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	889b      	ldrh	r3, [r3, #4]
 8010884:	b29b      	uxth	r3, r3
 8010886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	889b      	ldrh	r3, [r3, #4]
 8010894:	b29a      	uxth	r2, r3
 8010896:	887b      	ldrh	r3, [r7, #2]
 8010898:	4313      	orrs	r3, r2
 801089a:	b29a      	uxth	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	809a      	strh	r2, [r3, #4]
}
 80108a0:	f107 070c 	add.w	r7, r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bc80      	pop	{r7}
 80108a8:	4770      	bx	lr
 80108aa:	bf00      	nop

080108ac <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 80108ac:	b480      	push	{r7}
 80108ae:	b083      	sub	sp, #12
 80108b0:	af00      	add	r7, sp, #0
 80108b2:	6078      	str	r0, [r7, #4]
 80108b4:	460b      	mov	r3, r1
 80108b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	891b      	ldrh	r3, [r3, #8]
 80108bc:	b29b      	uxth	r3, r3
 80108be:	f023 0307 	bic.w	r3, r3, #7
 80108c2:	b29a      	uxth	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	891b      	ldrh	r3, [r3, #8]
 80108cc:	b29a      	uxth	r2, r3
 80108ce:	887b      	ldrh	r3, [r7, #2]
 80108d0:	4313      	orrs	r3, r2
 80108d2:	b29a      	uxth	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	811a      	strh	r2, [r3, #8]
}
 80108d8:	f107 070c 	add.w	r7, r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	bc80      	pop	{r7}
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop

080108e4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80108e4:	b480      	push	{r7}
 80108e6:	b083      	sub	sp, #12
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
 80108ec:	460b      	mov	r3, r1
 80108ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	891b      	ldrh	r3, [r3, #8]
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	891b      	ldrh	r3, [r3, #8]
 8010904:	b29a      	uxth	r2, r3
 8010906:	887b      	ldrh	r3, [r7, #2]
 8010908:	4313      	orrs	r3, r2
 801090a:	b29a      	uxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	811a      	strh	r2, [r3, #8]
}
 8010910:	f107 070c 	add.w	r7, r7, #12
 8010914:	46bd      	mov	sp, r7
 8010916:	bc80      	pop	{r7}
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop

0801091c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801091c:	b480      	push	{r7}
 801091e:	b087      	sub	sp, #28
 8010920:	af00      	add	r7, sp, #0
 8010922:	60f8      	str	r0, [r7, #12]
 8010924:	8179      	strh	r1, [r7, #10]
 8010926:	813a      	strh	r2, [r7, #8]
 8010928:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801092a:	f04f 0300 	mov.w	r3, #0
 801092e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	891b      	ldrh	r3, [r3, #8]
 8010934:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8010936:	8afb      	ldrh	r3, [r7, #22]
 8010938:	b2db      	uxtb	r3, r3
 801093a:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801093c:	88fb      	ldrh	r3, [r7, #6]
 801093e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010942:	b29a      	uxth	r2, r3
 8010944:	893b      	ldrh	r3, [r7, #8]
 8010946:	4313      	orrs	r3, r2
 8010948:	b29a      	uxth	r2, r3
 801094a:	897b      	ldrh	r3, [r7, #10]
 801094c:	4313      	orrs	r3, r2
 801094e:	b29a      	uxth	r2, r3
 8010950:	8afb      	ldrh	r3, [r7, #22]
 8010952:	4313      	orrs	r3, r2
 8010954:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	8afa      	ldrh	r2, [r7, #22]
 801095a:	811a      	strh	r2, [r3, #8]
}
 801095c:	f107 071c 	add.w	r7, r7, #28
 8010960:	46bd      	mov	sp, r7
 8010962:	bc80      	pop	{r7}
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop

08010968 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8010968:	b480      	push	{r7}
 801096a:	b087      	sub	sp, #28
 801096c:	af00      	add	r7, sp, #0
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	8179      	strh	r1, [r7, #10]
 8010972:	813a      	strh	r2, [r7, #8]
 8010974:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8010976:	f04f 0300 	mov.w	r3, #0
 801097a:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 801097c:	f04f 0300 	mov.w	r3, #0
 8010980:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 8010982:	f04f 0300 	mov.w	r3, #0
 8010986:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	891b      	ldrh	r3, [r3, #8]
 801098c:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	8b1b      	ldrh	r3, [r3, #24]
 8010992:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	8c1b      	ldrh	r3, [r3, #32]
 8010998:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 801099a:	8afb      	ldrh	r3, [r7, #22]
 801099c:	f023 0307 	bic.w	r3, r3, #7
 80109a0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80109a2:	8afa      	ldrh	r2, [r7, #22]
 80109a4:	897b      	ldrh	r3, [r7, #10]
 80109a6:	4313      	orrs	r3, r2
 80109a8:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80109aa:	8abb      	ldrh	r3, [r7, #20]
 80109ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109b0:	f023 0303 	bic.w	r3, r3, #3
 80109b4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80109b6:	8abb      	ldrh	r3, [r7, #20]
 80109b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80109bc:	f043 0301 	orr.w	r3, r3, #1
 80109c0:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80109c2:	8a7b      	ldrh	r3, [r7, #18]
 80109c4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80109c8:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80109ca:	88fb      	ldrh	r3, [r7, #6]
 80109cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80109d0:	b29a      	uxth	r2, r3
 80109d2:	893b      	ldrh	r3, [r7, #8]
 80109d4:	4313      	orrs	r3, r2
 80109d6:	b29a      	uxth	r2, r3
 80109d8:	8a7b      	ldrh	r3, [r7, #18]
 80109da:	4313      	orrs	r3, r2
 80109dc:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	8afa      	ldrh	r2, [r7, #22]
 80109e2:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	8aba      	ldrh	r2, [r7, #20]
 80109e8:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	8a7a      	ldrh	r2, [r7, #18]
 80109ee:	841a      	strh	r2, [r3, #32]
}
 80109f0:	f107 071c 	add.w	r7, r7, #28
 80109f4:	46bd      	mov	sp, r7
 80109f6:	bc80      	pop	{r7}
 80109f8:	4770      	bx	lr
 80109fa:	bf00      	nop

080109fc <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80109fc:	b480      	push	{r7}
 80109fe:	b083      	sub	sp, #12
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	460b      	mov	r3, r1
 8010a06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010a08:	78fb      	ldrb	r3, [r7, #3]
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d008      	beq.n	8010a20 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	889b      	ldrh	r3, [r3, #4]
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a18:	b29a      	uxth	r2, r3
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	809a      	strh	r2, [r3, #4]
 8010a1e:	e007      	b.n	8010a30 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	889b      	ldrh	r3, [r3, #4]
 8010a24:	b29b      	uxth	r3, r3
 8010a26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a2a:	b29a      	uxth	r2, r3
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	809a      	strh	r2, [r3, #4]
  }
}
 8010a30:	f107 070c 	add.w	r7, r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bc80      	pop	{r7}
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop

08010a3c <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8010a3c:	b480      	push	{r7}
 8010a3e:	b083      	sub	sp, #12
 8010a40:	af00      	add	r7, sp, #0
 8010a42:	6078      	str	r0, [r7, #4]
 8010a44:	460b      	mov	r3, r1
 8010a46:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	887a      	ldrh	r2, [r7, #2]
 8010a4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8010a50:	f107 070c 	add.w	r7, r7, #12
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bc80      	pop	{r7}
 8010a58:	4770      	bx	lr
 8010a5a:	bf00      	nop

08010a5c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b087      	sub	sp, #28
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60f8      	str	r0, [r7, #12]
 8010a64:	8179      	strh	r1, [r7, #10]
 8010a66:	813a      	strh	r2, [r7, #8]
 8010a68:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8010a6a:	f04f 0300 	mov.w	r3, #0
 8010a6e:	82fb      	strh	r3, [r7, #22]
 8010a70:	f04f 0300 	mov.w	r3, #0
 8010a74:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	8c1b      	ldrh	r3, [r3, #32]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	f023 0301 	bic.w	r3, r3, #1
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	8b1b      	ldrh	r3, [r3, #24]
 8010a8a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	8c1b      	ldrh	r3, [r3, #32]
 8010a90:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 8010a92:	8afb      	ldrh	r3, [r7, #22]
 8010a94:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8010a98:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8010a9a:	88fb      	ldrh	r3, [r7, #6]
 8010a9c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010aa0:	b29a      	uxth	r2, r3
 8010aa2:	893b      	ldrh	r3, [r7, #8]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	b29a      	uxth	r2, r3
 8010aa8:	8afb      	ldrh	r3, [r7, #22]
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010aae:	8abb      	ldrh	r3, [r7, #20]
 8010ab0:	f023 030a 	bic.w	r3, r3, #10
 8010ab4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8010ab6:	897a      	ldrh	r2, [r7, #10]
 8010ab8:	8abb      	ldrh	r3, [r7, #20]
 8010aba:	4313      	orrs	r3, r2
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	f043 0301 	orr.w	r3, r3, #1
 8010ac2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	8afa      	ldrh	r2, [r7, #22]
 8010ac8:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	8aba      	ldrh	r2, [r7, #20]
 8010ace:	841a      	strh	r2, [r3, #32]
}
 8010ad0:	f107 071c 	add.w	r7, r7, #28
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bc80      	pop	{r7}
 8010ad8:	4770      	bx	lr
 8010ada:	bf00      	nop

08010adc <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b087      	sub	sp, #28
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	60f8      	str	r0, [r7, #12]
 8010ae4:	8179      	strh	r1, [r7, #10]
 8010ae6:	813a      	strh	r2, [r7, #8]
 8010ae8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8010aea:	f04f 0300 	mov.w	r3, #0
 8010aee:	82fb      	strh	r3, [r7, #22]
 8010af0:	f04f 0300 	mov.w	r3, #0
 8010af4:	82bb      	strh	r3, [r7, #20]
 8010af6:	f04f 0300 	mov.w	r3, #0
 8010afa:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	8c1b      	ldrh	r3, [r3, #32]
 8010b00:	b29b      	uxth	r3, r3
 8010b02:	f023 0310 	bic.w	r3, r3, #16
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	8b1b      	ldrh	r3, [r3, #24]
 8010b10:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	8c1b      	ldrh	r3, [r3, #32]
 8010b16:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8010b18:	897b      	ldrh	r3, [r7, #10]
 8010b1a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010b1e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8010b20:	8afb      	ldrh	r3, [r7, #22]
 8010b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b26:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8010b2a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8010b2e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8010b30:	88fb      	ldrh	r3, [r7, #6]
 8010b32:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	8afb      	ldrh	r3, [r7, #22]
 8010b3a:	4313      	orrs	r3, r2
 8010b3c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8010b3e:	893b      	ldrh	r3, [r7, #8]
 8010b40:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010b44:	b29a      	uxth	r2, r3
 8010b46:	8afb      	ldrh	r3, [r7, #22]
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010b4c:	8abb      	ldrh	r3, [r7, #20]
 8010b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8010b52:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8010b54:	8a7a      	ldrh	r2, [r7, #18]
 8010b56:	8abb      	ldrh	r3, [r7, #20]
 8010b58:	4313      	orrs	r3, r2
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	f043 0310 	orr.w	r3, r3, #16
 8010b60:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	8afa      	ldrh	r2, [r7, #22]
 8010b66:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	8aba      	ldrh	r2, [r7, #20]
 8010b6c:	841a      	strh	r2, [r3, #32]
}
 8010b6e:	f107 071c 	add.w	r7, r7, #28
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bc80      	pop	{r7}
 8010b76:	4770      	bx	lr

08010b78 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8010b78:	b480      	push	{r7}
 8010b7a:	b087      	sub	sp, #28
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	60f8      	str	r0, [r7, #12]
 8010b80:	8179      	strh	r1, [r7, #10]
 8010b82:	813a      	strh	r2, [r7, #8]
 8010b84:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8010b86:	f04f 0300 	mov.w	r3, #0
 8010b8a:	82fb      	strh	r3, [r7, #22]
 8010b8c:	f04f 0300 	mov.w	r3, #0
 8010b90:	82bb      	strh	r3, [r7, #20]
 8010b92:	f04f 0300 	mov.w	r3, #0
 8010b96:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	8c1b      	ldrh	r3, [r3, #32]
 8010b9c:	b29b      	uxth	r3, r3
 8010b9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ba2:	b29a      	uxth	r2, r3
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	8b9b      	ldrh	r3, [r3, #28]
 8010bac:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	8c1b      	ldrh	r3, [r3, #32]
 8010bb2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8010bb4:	897b      	ldrh	r3, [r7, #10]
 8010bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010bba:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8010bbc:	8afb      	ldrh	r3, [r7, #22]
 8010bbe:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8010bc2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8010bc4:	88fb      	ldrh	r3, [r7, #6]
 8010bc6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	893b      	ldrh	r3, [r7, #8]
 8010bce:	4313      	orrs	r3, r2
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	8afb      	ldrh	r3, [r7, #22]
 8010bd4:	4313      	orrs	r3, r2
 8010bd6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010bd8:	8abb      	ldrh	r3, [r7, #20]
 8010bda:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8010bde:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8010be0:	8a7a      	ldrh	r2, [r7, #18]
 8010be2:	8abb      	ldrh	r3, [r7, #20]
 8010be4:	4313      	orrs	r3, r2
 8010be6:	b29b      	uxth	r3, r3
 8010be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010bec:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	8afa      	ldrh	r2, [r7, #22]
 8010bf2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	8aba      	ldrh	r2, [r7, #20]
 8010bf8:	841a      	strh	r2, [r3, #32]
}
 8010bfa:	f107 071c 	add.w	r7, r7, #28
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bc80      	pop	{r7}
 8010c02:	4770      	bx	lr

08010c04 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8010c04:	b480      	push	{r7}
 8010c06:	b087      	sub	sp, #28
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	8179      	strh	r1, [r7, #10]
 8010c0e:	813a      	strh	r2, [r7, #8]
 8010c10:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8010c12:	f04f 0300 	mov.w	r3, #0
 8010c16:	82fb      	strh	r3, [r7, #22]
 8010c18:	f04f 0300 	mov.w	r3, #0
 8010c1c:	82bb      	strh	r3, [r7, #20]
 8010c1e:	f04f 0300 	mov.w	r3, #0
 8010c22:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	8c1b      	ldrh	r3, [r3, #32]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c2e:	b29a      	uxth	r2, r3
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	8b9b      	ldrh	r3, [r3, #28]
 8010c38:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	8c1b      	ldrh	r3, [r3, #32]
 8010c3e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8010c40:	897b      	ldrh	r3, [r7, #10]
 8010c42:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010c46:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8010c48:	8afb      	ldrh	r3, [r7, #22]
 8010c4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010c4e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8010c52:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8010c56:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8010c58:	893b      	ldrh	r3, [r7, #8]
 8010c5a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	8afb      	ldrh	r3, [r7, #22]
 8010c62:	4313      	orrs	r3, r2
 8010c64:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8010c66:	88fb      	ldrh	r3, [r7, #6]
 8010c68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010c6c:	b29a      	uxth	r2, r3
 8010c6e:	8afb      	ldrh	r3, [r7, #22]
 8010c70:	4313      	orrs	r3, r2
 8010c72:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010c74:	8abb      	ldrh	r3, [r7, #20]
 8010c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010c7a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8010c7e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8010c82:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8010c84:	8a7a      	ldrh	r2, [r7, #18]
 8010c86:	8abb      	ldrh	r3, [r7, #20]
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010c90:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	8afa      	ldrh	r2, [r7, #22]
 8010c96:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	8aba      	ldrh	r2, [r7, #20]
 8010c9c:	841a      	strh	r2, [r3, #32]
}
 8010c9e:	f107 071c 	add.w	r7, r7, #28
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bc80      	pop	{r7}
 8010ca6:	4770      	bx	lr

08010ca8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cb6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d10c      	bne.n	8010cd8 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8010cbe:	f04f 0010 	mov.w	r0, #16
 8010cc2:	f04f 0101 	mov.w	r1, #1
 8010cc6:	f7fb f8e1 	bl	800be8c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8010cca:	f04f 0010 	mov.w	r0, #16
 8010cce:	f04f 0100 	mov.w	r1, #0
 8010cd2:	f7fb f8db 	bl	800be8c <RCC_APB2PeriphResetCmd>
 8010cd6:	e062      	b.n	8010d9e <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8010cde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d10c      	bne.n	8010d00 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8010ce6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010cea:	f04f 0101 	mov.w	r1, #1
 8010cee:	f7fb f8a3 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8010cf2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8010cf6:	f04f 0100 	mov.w	r1, #0
 8010cfa:	f7fb f89d 	bl	800be38 <RCC_APB1PeriphResetCmd>
 8010cfe:	e04e      	b.n	8010d9e <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 8010d00:	687a      	ldr	r2, [r7, #4]
 8010d02:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8010d06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d10c      	bne.n	8010d28 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8010d0e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010d12:	f04f 0101 	mov.w	r1, #1
 8010d16:	f7fb f88f 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8010d1a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8010d1e:	f04f 0100 	mov.w	r1, #0
 8010d22:	f7fb f889 	bl	800be38 <RCC_APB1PeriphResetCmd>
 8010d26:	e03a      	b.n	8010d9e <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 8010d28:	687a      	ldr	r2, [r7, #4]
 8010d2a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8010d2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d10c      	bne.n	8010d50 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8010d36:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010d3a:	f04f 0101 	mov.w	r1, #1
 8010d3e:	f7fb f87b 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8010d42:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8010d46:	f04f 0100 	mov.w	r1, #0
 8010d4a:	f7fb f875 	bl	800be38 <RCC_APB1PeriphResetCmd>
 8010d4e:	e026      	b.n	8010d9e <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 8010d50:	687a      	ldr	r2, [r7, #4]
 8010d52:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8010d56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d10c      	bne.n	8010d78 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8010d5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010d62:	f04f 0101 	mov.w	r1, #1
 8010d66:	f7fb f867 	bl	800be38 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8010d6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010d6e:	f04f 0100 	mov.w	r1, #0
 8010d72:	f7fb f861 	bl	800be38 <RCC_APB1PeriphResetCmd>
 8010d76:	e012      	b.n	8010d9e <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010d7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d10b      	bne.n	8010d9e <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8010d86:	f04f 0020 	mov.w	r0, #32
 8010d8a:	f04f 0101 	mov.w	r1, #1
 8010d8e:	f7fb f87d 	bl	800be8c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8010d92:	f04f 0020 	mov.w	r0, #32
 8010d96:	f04f 0100 	mov.w	r1, #0
 8010d9a:	f7fb f877 	bl	800be8c <RCC_APB2PeriphResetCmd>
    }
  }
}
 8010d9e:	f107 0708 	add.w	r7, r7, #8
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop

08010da8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08a      	sub	sp, #40	; 0x28
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8010db2:	f04f 0300 	mov.w	r3, #0
 8010db6:	627b      	str	r3, [r7, #36]	; 0x24
 8010db8:	f04f 0300 	mov.w	r3, #0
 8010dbc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8010dbe:	f04f 0300 	mov.w	r3, #0
 8010dc2:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8010dc4:	f04f 0300 	mov.w	r3, #0
 8010dc8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	8a1b      	ldrh	r3, [r3, #16]
 8010dce:	b29b      	uxth	r3, r3
 8010dd0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8010dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010dd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	88db      	ldrh	r3, [r3, #6]
 8010dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de0:	4313      	orrs	r3, r2
 8010de2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	b29a      	uxth	r2, r3
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	899b      	ldrh	r3, [r3, #12]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8010df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8010dfa:	f023 030c 	bic.w	r3, r3, #12
 8010dfe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	889a      	ldrh	r2, [r3, #4]
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	891b      	ldrh	r3, [r3, #8]
 8010e08:	4313      	orrs	r3, r2
 8010e0a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8010e10:	4313      	orrs	r3, r2
 8010e12:	b29b      	uxth	r3, r3
 8010e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e16:	4313      	orrs	r3, r2
 8010e18:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8010e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e1c:	b29a      	uxth	r2, r3
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	8a9b      	ldrh	r3, [r3, #20]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8010e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010e30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	899b      	ldrh	r3, [r3, #12]
 8010e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e38:	4313      	orrs	r3, r2
 8010e3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8010e44:	f107 0308 	add.w	r3, r7, #8
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7fa fd55 	bl	800b8f8 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8010e4e:	687a      	ldr	r2, [r7, #4]
 8010e50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e54:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d006      	beq.n	8010e6a <USART_Init+0xc2>
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010e62:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d102      	bne.n	8010e70 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	623b      	str	r3, [r7, #32]
 8010e6e:	e001      	b.n	8010e74 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8010e70:	693b      	ldr	r3, [r7, #16]
 8010e72:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	899b      	ldrh	r3, [r3, #12]
 8010e78:	b29b      	uxth	r3, r3
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	b21b      	sxth	r3, r3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	da0f      	bge.n	8010ea2 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8010e82:	6a3a      	ldr	r2, [r7, #32]
 8010e84:	4613      	mov	r3, r2
 8010e86:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010e8a:	189b      	adds	r3, r3, r2
 8010e8c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010e90:	189a      	adds	r2, r3, r2
 8010e92:	683b      	ldr	r3, [r7, #0]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e9e:	61fb      	str	r3, [r7, #28]
 8010ea0:	e00e      	b.n	8010ec0 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8010ea2:	6a3a      	ldr	r2, [r7, #32]
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010eaa:	189b      	adds	r3, r3, r2
 8010eac:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8010eb0:	189a      	adds	r2, r3, r2
 8010eb2:	683b      	ldr	r3, [r7, #0]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8010eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ebe:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8010ec0:	69fa      	ldr	r2, [r7, #28]
 8010ec2:	f248 531f 	movw	r3, #34079	; 0x851f
 8010ec6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8010eca:	fba3 1302 	umull	r1, r3, r3, r2
 8010ece:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8010ed2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010ed6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eda:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8010ede:	f04f 0264 	mov.w	r2, #100	; 0x64
 8010ee2:	fb02 f303 	mul.w	r3, r2, r3
 8010ee6:	69fa      	ldr	r2, [r7, #28]
 8010ee8:	1ad3      	subs	r3, r2, r3
 8010eea:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	899b      	ldrh	r3, [r3, #12]
 8010ef0:	b29b      	uxth	r3, r3
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	b21b      	sxth	r3, r3
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	da12      	bge.n	8010f20 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8010efa:	69bb      	ldr	r3, [r7, #24]
 8010efc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010f00:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010f04:	f248 531f 	movw	r3, #34079	; 0x851f
 8010f08:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8010f0c:	fba3 1302 	umull	r1, r3, r3, r2
 8010f10:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8010f14:	f003 0307 	and.w	r3, r3, #7
 8010f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f1a:	4313      	orrs	r3, r2
 8010f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8010f1e:	e011      	b.n	8010f44 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8010f2a:	f248 531f 	movw	r3, #34079	; 0x851f
 8010f2e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8010f32:	fba3 1302 	umull	r1, r3, r3, r2
 8010f36:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8010f3a:	f003 030f 	and.w	r3, r3, #15
 8010f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f40:	4313      	orrs	r3, r2
 8010f42:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	811a      	strh	r2, [r3, #8]
}
 8010f4c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8010f62:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	f04f 0200 	mov.w	r2, #0
 8010f6a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f04f 0200 	mov.w	r2, #0
 8010f72:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f04f 0200 	mov.w	r2, #0
 8010f7a:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	f04f 020c 	mov.w	r2, #12
 8010f82:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f04f 0200 	mov.w	r2, #0
 8010f8a:	819a      	strh	r2, [r3, #12]
}
 8010f8c:	f107 070c 	add.w	r7, r7, #12
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bc80      	pop	{r7}
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop

08010f98 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b085      	sub	sp, #20
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8010fa2:	f04f 0300 	mov.w	r3, #0
 8010fa6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	8a1b      	ldrh	r3, [r3, #16]
 8010fac:	b29b      	uxth	r3, r3
 8010fae:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8010fb6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	881a      	ldrh	r2, [r3, #0]
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	b29a      	uxth	r2, r3
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	889b      	ldrh	r3, [r3, #4]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	88db      	ldrh	r3, [r3, #6]
 8010fd0:	4313      	orrs	r3, r2
 8010fd2:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8010fd4:	68fa      	ldr	r2, [r7, #12]
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	b29a      	uxth	r2, r3
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	821a      	strh	r2, [r3, #16]
}
 8010fe2:	f107 0714 	add.w	r7, r7, #20
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	bc80      	pop	{r7}
 8010fea:	4770      	bx	lr

08010fec <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f04f 0200 	mov.w	r2, #0
 8010ffa:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	f04f 0200 	mov.w	r2, #0
 8011002:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f04f 0200 	mov.w	r2, #0
 801100a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	f04f 0200 	mov.w	r2, #0
 8011012:	80da      	strh	r2, [r3, #6]
}
 8011014:	f107 070c 	add.w	r7, r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	bc80      	pop	{r7}
 801101c:	4770      	bx	lr
 801101e:	bf00      	nop

08011020 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011020:	b480      	push	{r7}
 8011022:	b083      	sub	sp, #12
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	460b      	mov	r3, r1
 801102a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801102c:	78fb      	ldrb	r3, [r7, #3]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d008      	beq.n	8011044 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	899b      	ldrh	r3, [r3, #12]
 8011036:	b29b      	uxth	r3, r3
 8011038:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801103c:	b29a      	uxth	r2, r3
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	819a      	strh	r2, [r3, #12]
 8011042:	e007      	b.n	8011054 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	899b      	ldrh	r3, [r3, #12]
 8011048:	b29b      	uxth	r3, r3
 801104a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801104e:	b29a      	uxth	r2, r3
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	819a      	strh	r2, [r3, #12]
  }
}
 8011054:	f107 070c 	add.w	r7, r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	bc80      	pop	{r7}
 801105c:	4770      	bx	lr
 801105e:	bf00      	nop

08011060 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	460b      	mov	r3, r1
 801106a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8b1b      	ldrh	r3, [r3, #24]
 8011070:	b29b      	uxth	r3, r3
 8011072:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011076:	b29a      	uxth	r2, r3
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	8b1b      	ldrh	r3, [r3, #24]
 8011080:	b29a      	uxth	r2, r3
 8011082:	78fb      	ldrb	r3, [r7, #3]
 8011084:	b29b      	uxth	r3, r3
 8011086:	4313      	orrs	r3, r2
 8011088:	b29a      	uxth	r2, r3
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	831a      	strh	r2, [r3, #24]
}
 801108e:	f107 070c 	add.w	r7, r7, #12
 8011092:	46bd      	mov	sp, r7
 8011094:	bc80      	pop	{r7}
 8011096:	4770      	bx	lr

08011098 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011098:	b480      	push	{r7}
 801109a:	b083      	sub	sp, #12
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	460b      	mov	r3, r1
 80110a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80110a4:	78fb      	ldrb	r3, [r7, #3]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d00a      	beq.n	80110c0 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	899b      	ldrh	r3, [r3, #12]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	819a      	strh	r2, [r3, #12]
 80110be:	e009      	b.n	80110d4 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	899b      	ldrh	r3, [r3, #12]
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80110ca:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	819a      	strh	r2, [r3, #12]
  }
}  
 80110d4:	f107 070c 	add.w	r7, r7, #12
 80110d8:	46bd      	mov	sp, r7
 80110da:	bc80      	pop	{r7}
 80110dc:	4770      	bx	lr
 80110de:	bf00      	nop

080110e0 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	460b      	mov	r3, r1
 80110ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80110ec:	78fb      	ldrb	r3, [r7, #3]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d008      	beq.n	8011104 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	8a9b      	ldrh	r3, [r3, #20]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	829a      	strh	r2, [r3, #20]
 8011102:	e007      	b.n	8011114 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	8a9b      	ldrh	r3, [r3, #20]
 8011108:	b29b      	uxth	r3, r3
 801110a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801110e:	b29a      	uxth	r2, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	829a      	strh	r2, [r3, #20]
  }
}
 8011114:	f107 070c 	add.w	r7, r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	bc80      	pop	{r7}
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop

08011120 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8011120:	b480      	push	{r7}
 8011122:	b083      	sub	sp, #12
 8011124:	af00      	add	r7, sp, #0
 8011126:	6078      	str	r0, [r7, #4]
 8011128:	460b      	mov	r3, r1
 801112a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 801112c:	887b      	ldrh	r3, [r7, #2]
 801112e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011132:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011136:	b29a      	uxth	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	809a      	strh	r2, [r3, #4]
}
 801113c:	f107 070c 	add.w	r7, r7, #12
 8011140:	46bd      	mov	sp, r7
 8011142:	bc80      	pop	{r7}
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop

08011148 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8011148:	b480      	push	{r7}
 801114a:	b083      	sub	sp, #12
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	889b      	ldrh	r3, [r3, #4]
 8011154:	b29b      	uxth	r3, r3
 8011156:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801115a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801115e:	b29b      	uxth	r3, r3
}
 8011160:	4618      	mov	r0, r3
 8011162:	f107 070c 	add.w	r7, r7, #12
 8011166:	46bd      	mov	sp, r7
 8011168:	bc80      	pop	{r7}
 801116a:	4770      	bx	lr

0801116c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	460b      	mov	r3, r1
 8011176:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	8a1b      	ldrh	r3, [r3, #16]
 801117c:	b29b      	uxth	r3, r3
 801117e:	f023 030f 	bic.w	r3, r3, #15
 8011182:	b29a      	uxth	r2, r3
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	8a1b      	ldrh	r3, [r3, #16]
 801118c:	b29a      	uxth	r2, r3
 801118e:	78fb      	ldrb	r3, [r7, #3]
 8011190:	b29b      	uxth	r3, r3
 8011192:	4313      	orrs	r3, r2
 8011194:	b29a      	uxth	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	821a      	strh	r2, [r3, #16]
}
 801119a:	f107 070c 	add.w	r7, r7, #12
 801119e:	46bd      	mov	sp, r7
 80111a0:	bc80      	pop	{r7}
 80111a2:	4770      	bx	lr

080111a4 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b083      	sub	sp, #12
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	460b      	mov	r3, r1
 80111ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80111b0:	78fb      	ldrb	r3, [r7, #3]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d008      	beq.n	80111c8 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	899b      	ldrh	r3, [r3, #12]
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	f043 0302 	orr.w	r3, r3, #2
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	819a      	strh	r2, [r3, #12]
 80111c6:	e007      	b.n	80111d8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	899b      	ldrh	r3, [r3, #12]
 80111cc:	b29b      	uxth	r3, r3
 80111ce:	f023 0302 	bic.w	r3, r3, #2
 80111d2:	b29a      	uxth	r2, r3
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	819a      	strh	r2, [r3, #12]
  }
}
 80111d8:	f107 070c 	add.w	r7, r7, #12
 80111dc:	46bd      	mov	sp, r7
 80111de:	bc80      	pop	{r7}
 80111e0:	4770      	bx	lr
 80111e2:	bf00      	nop

080111e4 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 80111e4:	b480      	push	{r7}
 80111e6:	b083      	sub	sp, #12
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	460b      	mov	r3, r1
 80111ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	899b      	ldrh	r3, [r3, #12]
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80111fa:	b29a      	uxth	r2, r3
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	899b      	ldrh	r3, [r3, #12]
 8011204:	b29a      	uxth	r2, r3
 8011206:	887b      	ldrh	r3, [r7, #2]
 8011208:	4313      	orrs	r3, r2
 801120a:	b29a      	uxth	r2, r3
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	819a      	strh	r2, [r3, #12]
}
 8011210:	f107 070c 	add.w	r7, r7, #12
 8011214:	46bd      	mov	sp, r7
 8011216:	bc80      	pop	{r7}
 8011218:	4770      	bx	lr
 801121a:	bf00      	nop

0801121c <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	460b      	mov	r3, r1
 8011226:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	8a1b      	ldrh	r3, [r3, #16]
 801122c:	b29b      	uxth	r3, r3
 801122e:	f023 0320 	bic.w	r3, r3, #32
 8011232:	b29a      	uxth	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	8a1b      	ldrh	r3, [r3, #16]
 801123c:	b29a      	uxth	r2, r3
 801123e:	887b      	ldrh	r3, [r7, #2]
 8011240:	4313      	orrs	r3, r2
 8011242:	b29a      	uxth	r2, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	821a      	strh	r2, [r3, #16]
}
 8011248:	f107 070c 	add.w	r7, r7, #12
 801124c:	46bd      	mov	sp, r7
 801124e:	bc80      	pop	{r7}
 8011250:	4770      	bx	lr
 8011252:	bf00      	nop

08011254 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011254:	b480      	push	{r7}
 8011256:	b083      	sub	sp, #12
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	460b      	mov	r3, r1
 801125e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011260:	78fb      	ldrb	r3, [r7, #3]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d008      	beq.n	8011278 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	8a1b      	ldrh	r3, [r3, #16]
 801126a:	b29b      	uxth	r3, r3
 801126c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011270:	b29a      	uxth	r2, r3
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	821a      	strh	r2, [r3, #16]
 8011276:	e007      	b.n	8011288 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	8a1b      	ldrh	r3, [r3, #16]
 801127c:	b29b      	uxth	r3, r3
 801127e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011282:	b29a      	uxth	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	821a      	strh	r2, [r3, #16]
  }
}
 8011288:	f107 070c 	add.w	r7, r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	bc80      	pop	{r7}
 8011290:	4770      	bx	lr
 8011292:	bf00      	nop

08011294 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	899b      	ldrh	r3, [r3, #12]
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	f043 0301 	orr.w	r3, r3, #1
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	819a      	strh	r2, [r3, #12]
}
 80112ac:	f107 070c 	add.w	r7, r7, #12
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bc80      	pop	{r7}
 80112b4:	4770      	bx	lr
 80112b6:	bf00      	nop

080112b8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80112b8:	b480      	push	{r7}
 80112ba:	b083      	sub	sp, #12
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	460b      	mov	r3, r1
 80112c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80112c4:	78fb      	ldrb	r3, [r7, #3]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d008      	beq.n	80112dc <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	8a9b      	ldrh	r3, [r3, #20]
 80112ce:	b29b      	uxth	r3, r3
 80112d0:	f043 0308 	orr.w	r3, r3, #8
 80112d4:	b29a      	uxth	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	829a      	strh	r2, [r3, #20]
 80112da:	e007      	b.n	80112ec <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	8a9b      	ldrh	r3, [r3, #20]
 80112e0:	b29b      	uxth	r3, r3
 80112e2:	f023 0308 	bic.w	r3, r3, #8
 80112e6:	b29a      	uxth	r2, r3
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	829a      	strh	r2, [r3, #20]
  }
}
 80112ec:	f107 070c 	add.w	r7, r7, #12
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bc80      	pop	{r7}
 80112f4:	4770      	bx	lr
 80112f6:	bf00      	nop

080112f8 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 80112f8:	b480      	push	{r7}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	460b      	mov	r3, r1
 8011302:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	8b1b      	ldrh	r3, [r3, #24]
 8011308:	b29b      	uxth	r3, r3
 801130a:	b2db      	uxtb	r3, r3
 801130c:	b29a      	uxth	r2, r3
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	8b1b      	ldrh	r3, [r3, #24]
 8011316:	b29a      	uxth	r2, r3
 8011318:	78fb      	ldrb	r3, [r7, #3]
 801131a:	b29b      	uxth	r3, r3
 801131c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011320:	b29b      	uxth	r3, r3
 8011322:	4313      	orrs	r3, r2
 8011324:	b29a      	uxth	r2, r3
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	831a      	strh	r2, [r3, #24]
}
 801132a:	f107 070c 	add.w	r7, r7, #12
 801132e:	46bd      	mov	sp, r7
 8011330:	bc80      	pop	{r7}
 8011332:	4770      	bx	lr

08011334 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011334:	b480      	push	{r7}
 8011336:	b083      	sub	sp, #12
 8011338:	af00      	add	r7, sp, #0
 801133a:	6078      	str	r0, [r7, #4]
 801133c:	460b      	mov	r3, r1
 801133e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011340:	78fb      	ldrb	r3, [r7, #3]
 8011342:	2b00      	cmp	r3, #0
 8011344:	d008      	beq.n	8011358 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	8a9b      	ldrh	r3, [r3, #20]
 801134a:	b29b      	uxth	r3, r3
 801134c:	f043 0320 	orr.w	r3, r3, #32
 8011350:	b29a      	uxth	r2, r3
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	829a      	strh	r2, [r3, #20]
 8011356:	e007      	b.n	8011368 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	8a9b      	ldrh	r3, [r3, #20]
 801135c:	b29b      	uxth	r3, r3
 801135e:	f023 0320 	bic.w	r3, r3, #32
 8011362:	b29a      	uxth	r2, r3
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	829a      	strh	r2, [r3, #20]
  }
}
 8011368:	f107 070c 	add.w	r7, r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	bc80      	pop	{r7}
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop

08011374 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	460b      	mov	r3, r1
 801137e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011380:	78fb      	ldrb	r3, [r7, #3]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d008      	beq.n	8011398 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	8a9b      	ldrh	r3, [r3, #20]
 801138a:	b29b      	uxth	r3, r3
 801138c:	f043 0310 	orr.w	r3, r3, #16
 8011390:	b29a      	uxth	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	829a      	strh	r2, [r3, #20]
 8011396:	e007      	b.n	80113a8 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	8a9b      	ldrh	r3, [r3, #20]
 801139c:	b29b      	uxth	r3, r3
 801139e:	f023 0310 	bic.w	r3, r3, #16
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	829a      	strh	r2, [r3, #20]
  }
}
 80113a8:	f107 070c 	add.w	r7, r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bc80      	pop	{r7}
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop

080113b4 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	460b      	mov	r3, r1
 80113be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	8a9b      	ldrh	r3, [r3, #20]
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	f023 0304 	bic.w	r3, r3, #4
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	8a9b      	ldrh	r3, [r3, #20]
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	887b      	ldrh	r3, [r7, #2]
 80113d8:	4313      	orrs	r3, r2
 80113da:	b29a      	uxth	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	829a      	strh	r2, [r3, #20]
}
 80113e0:	f107 070c 	add.w	r7, r7, #12
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bc80      	pop	{r7}
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop

080113ec <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80113ec:	b480      	push	{r7}
 80113ee:	b083      	sub	sp, #12
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
 80113f4:	460b      	mov	r3, r1
 80113f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80113f8:	78fb      	ldrb	r3, [r7, #3]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d008      	beq.n	8011410 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	8a9b      	ldrh	r3, [r3, #20]
 8011402:	b29b      	uxth	r3, r3
 8011404:	f043 0302 	orr.w	r3, r3, #2
 8011408:	b29a      	uxth	r2, r3
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	829a      	strh	r2, [r3, #20]
 801140e:	e007      	b.n	8011420 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	8a9b      	ldrh	r3, [r3, #20]
 8011414:	b29b      	uxth	r3, r3
 8011416:	f023 0302 	bic.w	r3, r3, #2
 801141a:	b29a      	uxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	829a      	strh	r2, [r3, #20]
  }
}
 8011420:	f107 070c 	add.w	r7, r7, #12
 8011424:	46bd      	mov	sp, r7
 8011426:	bc80      	pop	{r7}
 8011428:	4770      	bx	lr
 801142a:	bf00      	nop

0801142c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 801142c:	b480      	push	{r7}
 801142e:	b083      	sub	sp, #12
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	4613      	mov	r3, r2
 8011436:	460a      	mov	r2, r1
 8011438:	807a      	strh	r2, [r7, #2]
 801143a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 801143c:	787b      	ldrb	r3, [r7, #1]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d008      	beq.n	8011454 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	8a9b      	ldrh	r3, [r3, #20]
 8011446:	b29a      	uxth	r2, r3
 8011448:	887b      	ldrh	r3, [r7, #2]
 801144a:	4313      	orrs	r3, r2
 801144c:	b29a      	uxth	r2, r3
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	829a      	strh	r2, [r3, #20]
 8011452:	e00a      	b.n	801146a <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	8a9b      	ldrh	r3, [r3, #20]
 8011458:	b29a      	uxth	r2, r3
 801145a:	887b      	ldrh	r3, [r7, #2]
 801145c:	ea6f 0303 	mvn.w	r3, r3
 8011460:	b29b      	uxth	r3, r3
 8011462:	4013      	ands	r3, r2
 8011464:	b29a      	uxth	r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	829a      	strh	r2, [r3, #20]
  }
}
 801146a:	f107 070c 	add.w	r7, r7, #12
 801146e:	46bd      	mov	sp, r7
 8011470:	bc80      	pop	{r7}
 8011472:	4770      	bx	lr

08011474 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8011474:	b480      	push	{r7}
 8011476:	b087      	sub	sp, #28
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	4613      	mov	r3, r2
 801147e:	460a      	mov	r2, r1
 8011480:	807a      	strh	r2, [r7, #2]
 8011482:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8011484:	f04f 0300 	mov.w	r3, #0
 8011488:	613b      	str	r3, [r7, #16]
 801148a:	f04f 0300 	mov.w	r3, #0
 801148e:	60fb      	str	r3, [r7, #12]
 8011490:	f04f 0300 	mov.w	r3, #0
 8011494:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8011496:	f04f 0300 	mov.w	r3, #0
 801149a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80114a0:	887b      	ldrh	r3, [r7, #2]
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80114a8:	b2db      	uxtb	r3, r3
 80114aa:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80114ac:	887b      	ldrh	r3, [r7, #2]
 80114ae:	f003 031f 	and.w	r3, r3, #31
 80114b2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	f04f 0201 	mov.w	r2, #1
 80114ba:	fa02 f303 	lsl.w	r3, r2, r3
 80114be:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80114c0:	693b      	ldr	r3, [r7, #16]
 80114c2:	2b01      	cmp	r3, #1
 80114c4:	d104      	bne.n	80114d0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	f103 030c 	add.w	r3, r3, #12
 80114cc:	617b      	str	r3, [r7, #20]
 80114ce:	e00b      	b.n	80114e8 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	2b02      	cmp	r3, #2
 80114d4:	d104      	bne.n	80114e0 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 80114d6:	697b      	ldr	r3, [r7, #20]
 80114d8:	f103 0310 	add.w	r3, r3, #16
 80114dc:	617b      	str	r3, [r7, #20]
 80114de:	e003      	b.n	80114e8 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80114e0:	697b      	ldr	r3, [r7, #20]
 80114e2:	f103 0314 	add.w	r3, r3, #20
 80114e6:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80114e8:	787b      	ldrb	r3, [r7, #1]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d006      	beq.n	80114fc <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	697a      	ldr	r2, [r7, #20]
 80114f2:	6811      	ldr	r1, [r2, #0]
 80114f4:	68ba      	ldr	r2, [r7, #8]
 80114f6:	430a      	orrs	r2, r1
 80114f8:	601a      	str	r2, [r3, #0]
 80114fa:	e007      	b.n	801150c <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	697a      	ldr	r2, [r7, #20]
 8011500:	6811      	ldr	r1, [r2, #0]
 8011502:	68ba      	ldr	r2, [r7, #8]
 8011504:	ea6f 0202 	mvn.w	r2, r2
 8011508:	400a      	ands	r2, r1
 801150a:	601a      	str	r2, [r3, #0]
  }
}
 801150c:	f107 071c 	add.w	r7, r7, #28
 8011510:	46bd      	mov	sp, r7
 8011512:	bc80      	pop	{r7}
 8011514:	4770      	bx	lr
 8011516:	bf00      	nop

08011518 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8011518:	b480      	push	{r7}
 801151a:	b085      	sub	sp, #20
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	460b      	mov	r3, r1
 8011522:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8011524:	f04f 0300 	mov.w	r3, #0
 8011528:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	881b      	ldrh	r3, [r3, #0]
 801152e:	b29a      	uxth	r2, r3
 8011530:	887b      	ldrh	r3, [r7, #2]
 8011532:	4013      	ands	r3, r2
 8011534:	b29b      	uxth	r3, r3
 8011536:	2b00      	cmp	r3, #0
 8011538:	d003      	beq.n	8011542 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 801153a:	f04f 0301 	mov.w	r3, #1
 801153e:	73fb      	strb	r3, [r7, #15]
 8011540:	e002      	b.n	8011548 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8011542:	f04f 0300 	mov.w	r3, #0
 8011546:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011548:	7bfb      	ldrb	r3, [r7, #15]
}
 801154a:	4618      	mov	r0, r3
 801154c:	f107 0714 	add.w	r7, r7, #20
 8011550:	46bd      	mov	sp, r7
 8011552:	bc80      	pop	{r7}
 8011554:	4770      	bx	lr
 8011556:	bf00      	nop

08011558 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8011558:	b480      	push	{r7}
 801155a:	b083      	sub	sp, #12
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
 8011560:	460b      	mov	r3, r1
 8011562:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8011564:	887b      	ldrh	r3, [r7, #2]
 8011566:	ea6f 0303 	mvn.w	r3, r3
 801156a:	b29a      	uxth	r2, r3
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	801a      	strh	r2, [r3, #0]
}
 8011570:	f107 070c 	add.w	r7, r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	bc80      	pop	{r7}
 8011578:	4770      	bx	lr
 801157a:	bf00      	nop

0801157c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 801157c:	b480      	push	{r7}
 801157e:	b087      	sub	sp, #28
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	460b      	mov	r3, r1
 8011586:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8011588:	f04f 0300 	mov.w	r3, #0
 801158c:	60fb      	str	r3, [r7, #12]
 801158e:	f04f 0300 	mov.w	r3, #0
 8011592:	617b      	str	r3, [r7, #20]
 8011594:	f04f 0300 	mov.w	r3, #0
 8011598:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 801159a:	f04f 0300 	mov.w	r3, #0
 801159e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80115a0:	887b      	ldrh	r3, [r7, #2]
 80115a2:	b2db      	uxtb	r3, r3
 80115a4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80115ac:	887b      	ldrh	r3, [r7, #2]
 80115ae:	f003 031f 	and.w	r3, r3, #31
 80115b2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	f04f 0201 	mov.w	r2, #1
 80115ba:	fa02 f303 	lsl.w	r3, r2, r3
 80115be:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	2b01      	cmp	r3, #1
 80115c4:	d106      	bne.n	80115d4 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	899b      	ldrh	r3, [r3, #12]
 80115ca:	b29b      	uxth	r3, r3
 80115cc:	697a      	ldr	r2, [r7, #20]
 80115ce:	4013      	ands	r3, r2
 80115d0:	617b      	str	r3, [r7, #20]
 80115d2:	e00f      	b.n	80115f4 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	2b02      	cmp	r3, #2
 80115d8:	d106      	bne.n	80115e8 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	8a1b      	ldrh	r3, [r3, #16]
 80115de:	b29b      	uxth	r3, r3
 80115e0:	697a      	ldr	r2, [r7, #20]
 80115e2:	4013      	ands	r3, r2
 80115e4:	617b      	str	r3, [r7, #20]
 80115e6:	e005      	b.n	80115f4 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	8a9b      	ldrh	r3, [r3, #20]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	697a      	ldr	r2, [r7, #20]
 80115f0:	4013      	ands	r3, r2
 80115f2:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80115f4:	887b      	ldrh	r3, [r7, #2]
 80115f6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80115fa:	b29b      	uxth	r3, r3
 80115fc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	f04f 0201 	mov.w	r2, #1
 8011604:	fa02 f303 	lsl.w	r3, r2, r3
 8011608:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	881b      	ldrh	r3, [r3, #0]
 801160e:	b29b      	uxth	r3, r3
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	4013      	ands	r3, r2
 8011614:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d006      	beq.n	801162a <USART_GetITStatus+0xae>
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d003      	beq.n	801162a <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 8011622:	f04f 0301 	mov.w	r3, #1
 8011626:	74fb      	strb	r3, [r7, #19]
 8011628:	e002      	b.n	8011630 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 801162a:	f04f 0300 	mov.w	r3, #0
 801162e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8011630:	7cfb      	ldrb	r3, [r7, #19]
}
 8011632:	4618      	mov	r0, r3
 8011634:	f107 071c 	add.w	r7, r7, #28
 8011638:	46bd      	mov	sp, r7
 801163a:	bc80      	pop	{r7}
 801163c:	4770      	bx	lr
 801163e:	bf00      	nop

08011640 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8011640:	b480      	push	{r7}
 8011642:	b085      	sub	sp, #20
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
 8011648:	460b      	mov	r3, r1
 801164a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 801164c:	f04f 0300 	mov.w	r3, #0
 8011650:	81fb      	strh	r3, [r7, #14]
 8011652:	f04f 0300 	mov.w	r3, #0
 8011656:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8011658:	887b      	ldrh	r3, [r7, #2]
 801165a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 801165e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8011660:	89fb      	ldrh	r3, [r7, #14]
 8011662:	f04f 0201 	mov.w	r2, #1
 8011666:	fa02 f303 	lsl.w	r3, r2, r3
 801166a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 801166c:	89bb      	ldrh	r3, [r7, #12]
 801166e:	ea6f 0303 	mvn.w	r3, r3
 8011672:	b29a      	uxth	r2, r3
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	801a      	strh	r2, [r3, #0]
}
 8011678:	f107 0714 	add.w	r7, r7, #20
 801167c:	46bd      	mov	sp, r7
 801167e:	bc80      	pop	{r7}
 8011680:	4770      	bx	lr
 8011682:	bf00      	nop

08011684 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8011688:	f44f 6000 	mov.w	r0, #2048	; 0x800
 801168c:	f04f 0101 	mov.w	r1, #1
 8011690:	f7fa fbd2 	bl	800be38 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8011694:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011698:	f04f 0100 	mov.w	r1, #0
 801169c:	f7fa fbcc 	bl	800be38 <RCC_APB1PeriphResetCmd>
}
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop

080116a4 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 80116a4:	b480      	push	{r7}
 80116a6:	b085      	sub	sp, #20
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80116ac:	f04f 0300 	mov.w	r3, #0
 80116b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 80116b2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80116b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80116ba:	685b      	ldr	r3, [r3, #4]
 80116bc:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80116c0:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	4313      	orrs	r3, r2
 80116c8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80116ca:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80116ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	605a      	str	r2, [r3, #4]
}
 80116d6:	f107 0714 	add.w	r7, r7, #20
 80116da:	46bd      	mov	sp, r7
 80116dc:	bc80      	pop	{r7}
 80116de:	4770      	bx	lr

080116e0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	4603      	mov	r3, r0
 80116e8:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 80116ea:	f04f 0300 	mov.w	r3, #0
 80116ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80116f0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80116f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80116f8:	685b      	ldr	r3, [r3, #4]
 80116fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80116fe:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8011700:	79fb      	ldrb	r3, [r7, #7]
 8011702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	4313      	orrs	r3, r2
 801170a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 801170c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011710:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	605a      	str	r2, [r3, #4]
}
 8011718:	f107 0714 	add.w	r7, r7, #20
 801171c:	46bd      	mov	sp, r7
 801171e:	bc80      	pop	{r7}
 8011720:	4770      	bx	lr
 8011722:	bf00      	nop

08011724 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 8011724:	b480      	push	{r7}
 8011726:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8011728:	f248 03a4 	movw	r3, #32932	; 0x80a4
 801172c:	f2c4 2305 	movt	r3, #16901	; 0x4205
 8011730:	f04f 0201 	mov.w	r2, #1
 8011734:	601a      	str	r2, [r3, #0]
}
 8011736:	46bd      	mov	sp, r7
 8011738:	bc80      	pop	{r7}
 801173a:	4770      	bx	lr

0801173c <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	4603      	mov	r3, r0
 8011744:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8011746:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801174a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801174e:	79fa      	ldrb	r2, [r7, #7]
 8011750:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011754:	601a      	str	r2, [r3, #0]
}
 8011756:	f107 070c 	add.w	r7, r7, #12
 801175a:	46bd      	mov	sp, r7
 801175c:	bc80      	pop	{r7}
 801175e:	4770      	bx	lr

08011760 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8011760:	b480      	push	{r7}
 8011762:	b083      	sub	sp, #12
 8011764:	af00      	add	r7, sp, #0
 8011766:	4603      	mov	r3, r0
 8011768:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 801176a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801176e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011772:	79fa      	ldrb	r2, [r7, #7]
 8011774:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8011778:	b2d2      	uxtb	r2, r2
 801177a:	601a      	str	r2, [r3, #0]
}
 801177c:	f107 070c 	add.w	r7, r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	bc80      	pop	{r7}
 8011784:	4770      	bx	lr
 8011786:	bf00      	nop

08011788 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 801178e:	f04f 0300 	mov.w	r3, #0
 8011792:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8011794:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011798:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d003      	beq.n	80117aa <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 80117a2:	f04f 0301 	mov.w	r3, #1
 80117a6:	71fb      	strb	r3, [r7, #7]
 80117a8:	e002      	b.n	80117b0 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 80117aa:	f04f 0300 	mov.w	r3, #0
 80117ae:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 80117b0:	79fb      	ldrb	r3, [r7, #7]
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	f107 070c 	add.w	r7, r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bc80      	pop	{r7}
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop

080117c0 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 80117c0:	b480      	push	{r7}
 80117c2:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 80117c4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80117c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80117cc:	f04f 0200 	mov.w	r2, #0
 80117d0:	609a      	str	r2, [r3, #8]
}
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bc80      	pop	{r7}
 80117d6:	4770      	bx	lr

080117d8 <ASCII16x24_Table>:
	...
 8011808:	0000 0180 0180 0180 0180 0180 0180 0180     ................
 8011818:	0180 0180 0180 0180 0180 0180 0000 0000     ................
 8011828:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 8011838:	0000 0000 00cc 00cc 00cc 00cc 00cc 00cc     ................
	...
 8011874:	0c60 0c60 0c60 0630 0630 1ffe 1ffe 0630     `.`.`.0.0.....0.
 8011884:	0738 0318 1ffe 1ffe 0318 0318 018c 018c     8...............
 8011894:	018c 0000 0000 0080 03e0 0ff8 0e9c 1c8c     ................
 80118a4:	188c 008c 0098 01f8 07e0 0e80 1c80 188c     ................
 80118b4:	188c 189c 0cb8 0ff0 03e0 0080 0080 0000     ................
	...
 80118cc:	0000 180e 0c1b 0c11 0611 0611 0311 0311     ................
 80118dc:	019b 018e 38c0 6cc0 4460 4460 4430 4430     .....8.l`D`D0D0D
 80118ec:	4418 6c18 380c 0000 0000 0000 0000 01e0     .D.l.8..........
 80118fc:	03f0 0738 0618 0618 0330 01f0 00f0 00f8     ..8.....0.......
 801190c:	319c 330e 1e06 1c06 1c06 3f06 73fc 21f0     .1.3.......?.s.!
	...
 801192c:	000c 000c 000c 000c 000c 000c 0000 0000     ................
	...
 8011958:	0000 0200 0300 0180 00c0 00c0 0060 0060     ............`.`.
 8011968:	0030 0030 0030 0030 0030 0030 0030 0030     0.0.0.0.0.0.0.0.
 8011978:	0060 0060 00c0 00c0 0180 0300 0200 0000     `.`.............
 8011988:	0000 0020 0060 00c0 0180 0180 0300 0300     .. .`...........
 8011998:	0600 0600 0600 0600 0600 0600 0600 0600     ................
 80119a8:	0300 0300 0180 0180 00c0 0060 0020 0000     ..........`. ...
	...
 80119c4:	00c0 00c0 06d8 07f8 01e0 0330 0738 0000     ..........0.8...
	...
 80119f4:	0180 0180 0180 0180 0180 3ffc 3ffc 0180     ...........?.?..
 8011a04:	0180 0180 0180 0180 0000 0000 0000 0000     ................
	...
 8011a38:	0000 0180 0180 0100 0100 0080 0000 0000     ................
	...
 8011a60:	07e0 07e0 0000 0000 0000 0000 0000 0000     ................
	...
 8011a98:	0000 00c0 00c0 0000 0000 0000 0000 0000     ................
 8011aa8:	0000 0c00 0c00 0600 0600 0600 0300 0300     ................
 8011ab8:	0300 0380 0180 0180 0180 00c0 00c0 00c0     ................
 8011ac8:	0060 0060 0000 0000 0000 0000 0000 0000     `.`.............
 8011ad8:	0000 03e0 07f0 0e38 0c18 180c 180c 180c     ......8.........
 8011ae8:	180c 180c 180c 180c 180c 180c 0c18 0e38     ..............8.
 8011af8:	07f0 03e0 0000 0000 0000 0000 0000 0000     ................
 8011b08:	0000 0100 0180 01c0 01f0 0198 0188 0180     ................
 8011b18:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 8011b28:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 8011b38:	0000 03e0 0ff8 0c18 180c 180c 1800 1800     ................
 8011b48:	0c00 0600 0300 0180 00c0 0060 0030 0018     ..........`.0...
 8011b58:	1ffc 1ffc 0000 0000 0000 0000 0000 0000     ................
 8011b68:	0000 01e0 07f8 0e18 0c0c 0c0c 0c00 0600     ................
 8011b78:	03c0 07c0 0c00 1800 1800 180c 180c 0c18     ................
 8011b88:	07f8 03e0 0000 0000 0000 0000 0000 0000     ................
 8011b98:	0000 0c00 0e00 0f00 0f00 0d80 0cc0 0c60     ..............`.
 8011ba8:	0c60 0c30 0c18 0c0c 3ffc 3ffc 0c00 0c00     `.0......?.?....
 8011bb8:	0c00 0c00 0000 0000 0000 0000 0000 0000     ................
 8011bc8:	0000 0ff8 0ff8 0018 0018 000c 03ec 07fc     ................
 8011bd8:	0e1c 1c00 1800 1800 1800 180c 0c1c 0e18     ................
 8011be8:	07f8 03e0 0000 0000 0000 0000 0000 0000     ................
 8011bf8:	0000 07c0 0ff0 1c38 1818 0018 000c 03cc     ......8.........
 8011c08:	0fec 0e3c 1c1c 180c 180c 180c 1c18 0e38     ..<...........8.
 8011c18:	07f0 03e0 0000 0000 0000 0000 0000 0000     ................
 8011c28:	0000 1ffc 1ffc 0c00 0600 0600 0300 0380     ................
 8011c38:	0180 01c0 00c0 00e0 0060 0060 0070 0030     ........`.`.p.0.
 8011c48:	0030 0030 0000 0000 0000 0000 0000 0000     0.0.............
 8011c58:	0000 03e0 07f0 0e38 0c18 0c18 0c18 0638     ......8.......8.
 8011c68:	07f0 07f0 0c18 180c 180c 180c 180c 0c38     ..............8.
 8011c78:	0ff8 03e0 0000 0000 0000 0000 0000 0000     ................
 8011c88:	0000 03e0 07f0 0e38 0c1c 180c 180c 180c     ......8.........
 8011c98:	1c1c 1e38 1bf8 19e0 1800 0c00 0c00 0e1c     ..8.............
 8011ca8:	07f8 01f0 0000 0000 0000 0000 0000 0000     ................
	...
 8011cc4:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 8011cd4:	0000 0000 0180 0180 0000 0000 0000 0000     ................
	...
 8011cf4:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 8011d04:	0000 0000 0180 0180 0100 0100 0080 0000     ................
	...
 8011d28:	1000 1c00 0f80 03e0 00f8 0018 00f8 03e0     ................
 8011d38:	0f80 1c00 1000 0000 0000 0000 0000 0000     ................
	...
 8011d58:	1ff8 0000 0000 0000 1ff8 0000 0000 0000     ................
	...
 8011d88:	0008 0038 01f0 07c0 1f00 1800 1f00 07c0     ..8.............
 8011d98:	01f0 0038 0008 0000 0000 0000 0000 0000     ..8.............
 8011da8:	0000 03e0 0ff8 0c18 180c 180c 1800 0c00     ................
 8011db8:	0600 0300 0180 00c0 00c0 00c0 0000 0000     ................
 8011dc8:	00c0 00c0 0000 0000 0000 0000 0000 0000     ................
 8011dd8:	0000 0000 07e0 1818 2004 29c2 4a22 4411     ......... .)"J.D
 8011de8:	4409 4409 4409 2209 1311 0ce2 4002 2004     .D.D.D.".....@. 
 8011df8:	1818 07e0 0000 0000 0000 0000 0000 0000     ................
 8011e08:	0000 0380 0380 06c0 06c0 06c0 0c60 0c60     ............`.`.
 8011e18:	1830 1830 1830 3ff8 3ff8 701c 600c 600c     0.0.0..?.?.p.`.`
 8011e28:	c006 c006 0000 0000 0000 0000 0000 0000     ................
 8011e38:	0000 03fc 0ffc 0c0c 180c 180c 180c 0c0c     ................
 8011e48:	07fc 0ffc 180c 300c 300c 300c 300c 180c     .......0.0.0.0..
 8011e58:	1ffc 07fc 0000 0000 0000 0000 0000 0000     ................
 8011e68:	0000 07c0 1ff0 3838 301c 700c 6006 0006     ......88.0.p.`..
 8011e78:	0006 0006 0006 0006 0006 6006 700c 301c     ...........`.p.0
 8011e88:	1ff0 07e0 0000 0000 0000 0000 0000 0000     ................
 8011e98:	0000 03fe 0ffe 0e06 1806 1806 3006 3006     .............0.0
 8011ea8:	3006 3006 3006 3006 3006 1806 1806 0e06     .0.0.0.0.0......
 8011eb8:	0ffe 03fe 0000 0000 0000 0000 0000 0000     ................
 8011ec8:	0000 3ffc 3ffc 000c 000c 000c 000c 000c     ...?.?..........
 8011ed8:	1ffc 1ffc 000c 000c 000c 000c 000c 000c     ................
 8011ee8:	3ffc 3ffc 0000 0000 0000 0000 0000 0000     .?.?............
 8011ef8:	0000 3ff8 3ff8 0018 0018 0018 0018 0018     ...?.?..........
 8011f08:	1ff8 1ff8 0018 0018 0018 0018 0018 0018     ................
 8011f18:	0018 0018 0000 0000 0000 0000 0000 0000     ................
 8011f28:	0000 0fe0 3ff8 783c 600e e006 c007 0003     .....?<x.`......
 8011f38:	0003 fe03 fe03 c003 c007 c006 c00e f03c     ..............<.
 8011f48:	3ff8 0fe0 0000 0000 0000 0000 0000 0000     .?..............
 8011f58:	0000 300c 300c 300c 300c 300c 300c 300c     ...0.0.0.0.0.0.0
 8011f68:	3ffc 3ffc 300c 300c 300c 300c 300c 300c     .?.?.0.0.0.0.0.0
 8011f78:	300c 300c 0000 0000 0000 0000 0000 0000     .0.0............
 8011f88:	0000 0180 0180 0180 0180 0180 0180 0180     ................
 8011f98:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 8011fa8:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 8011fb8:	0000 0600 0600 0600 0600 0600 0600 0600     ................
 8011fc8:	0600 0600 0600 0600 0600 0618 0618 0738     ..............8.
 8011fd8:	03f0 01e0 0000 0000 0000 0000 0000 0000     ................
 8011fe8:	0000 3006 1806 0c06 0606 0306 0186 00c6     ...0............
 8011ff8:	0066 0076 00de 018e 0306 0606 0c06 1806     f.v.............
 8012008:	3006 6006 0000 0000 0000 0000 0000 0000     .0.`............
 8012018:	0000 0018 0018 0018 0018 0018 0018 0018     ................
 8012028:	0018 0018 0018 0018 0018 0018 0018 0018     ................
 8012038:	1ff8 1ff8 0000 0000 0000 0000 0000 0000     ................
 8012048:	0000 e00e f01e f01e f01e d836 d836 d836     ..........6.6.6.
 8012058:	d836 cc66 cc66 cc66 c6c6 c6c6 c6c6 c6c6     6.f.f.f.........
 8012068:	c386 c386 0000 0000 0000 0000 0000 0000     ................
 8012078:	0000 300c 301c 303c 303c 306c 306c 30cc     ...0.0<0<0l0l0.0
 8012088:	30cc 318c 330c 330c 360c 360c 3c0c 3c0c     .0.1.3.3.6.6.<.<
 8012098:	380c 300c 0000 0000 0000 0000 0000 0000     .8.0............
 80120a8:	0000 07e0 1ff8 381c 700e 6006 c003 c003     .......8.p.`....
 80120b8:	c003 c003 c003 c003 c003 6006 700e 381c     ...........`.p.8
 80120c8:	1ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 80120d8:	0000 0ffc 1ffc 380c 300c 300c 300c 300c     .......8.0.0.0.0
 80120e8:	180c 1ffc 07fc 000c 000c 000c 000c 000c     ................
 80120f8:	000c 000c 0000 0000 0000 0000 0000 0000     ................
 8012108:	0000 07e0 1ff8 381c 700e 6006 e003 c003     .......8.p.`....
 8012118:	c003 c003 c003 c003 e007 6306 3f0e 3c1c     ...........c.?.<
 8012128:	3ff8 f7e0 c000 0000 0000 0000 0000 0000     .?..............
 8012138:	0000 0ffe 1ffe 3806 3006 3006 3006 3806     .......8.0.0.0.8
 8012148:	1ffe 07fe 0306 0606 0c06 1806 1806 3006     ...............0
 8012158:	3006 6006 0000 0000 0000 0000 0000 0000     .0.`............
 8012168:	0000 03e0 0ff8 0c1c 180c 180c 000c 001c     ................
 8012178:	03f8 0fe0 1e00 3800 3006 3006 300e 1c1c     .......8.0.0.0..
 8012188:	0ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 8012198:	0000 7ffe 7ffe 0180 0180 0180 0180 0180     ................
 80121a8:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 80121b8:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 80121c8:	0000 300c 300c 300c 300c 300c 300c 300c     ...0.0.0.0.0.0.0
 80121d8:	300c 300c 300c 300c 300c 300c 300c 1818     .0.0.0.0.0.0.0..
 80121e8:	1ff8 07e0 0000 0000 0000 0000 0000 0000     ................
 80121f8:	0000 6003 3006 3006 3006 180c 180c 180c     ...`.0.0.0......
 8012208:	0c18 0c18 0e38 0630 0630 0770 0360 0360     ....8.0.0.p.`.`.
 8012218:	01c0 01c0 0000 0000 0000 0000 0000 0000     ................
 8012228:	0000 6003 61c3 61c3 61c3 3366 3366 3366     ...`.a.a.af3f3f3
 8012238:	3366 3366 3366 1b6c 1b6c 1b6c 1a2c 1e3c     f3f3f3l.l.l.,.<.
 8012248:	0e38 0e38 0000 0000 0000 0000 0000 0000     8.8.............
 8012258:	0000 e00f 700c 3018 1830 0c70 0e60 07c0     .....p.00.p.`...
 8012268:	0380 0380 03c0 06e0 0c70 1c30 1818 300c     ........p.0....0
 8012278:	600e e007 0000 0000 0000 0000 0000 0000     .`..............
 8012288:	0000 c003 6006 300c 381c 1838 0c30 0660     .....`.0.88.0.`.
 8012298:	07e0 03c0 0180 0180 0180 0180 0180 0180     ................
 80122a8:	0180 0180 0000 0000 0000 0000 0000 0000     ................
 80122b8:	0000 7ffc 7ffc 6000 3000 1800 0c00 0600     .......`.0......
 80122c8:	0300 0180 00c0 0060 0030 0018 000c 0006     ......`.0.......
 80122d8:	7ffe 7ffe 0000 0000 0000 0000 0000 0000     ................
 80122e8:	0000 03e0 03e0 0060 0060 0060 0060 0060     ......`.`.`.`.`.
 80122f8:	0060 0060 0060 0060 0060 0060 0060 0060     `.`.`.`.`.`.`.`.
 8012308:	0060 0060 0060 0060 0060 03e0 03e0 0000     `.`.`.`.`.......
 8012318:	0000 0030 0030 0060 0060 0060 00c0 00c0     ..0.0.`.`.`.....
 8012328:	00c0 01c0 0180 0180 0180 0300 0300 0300     ................
 8012338:	0600 0600 0000 0000 0000 0000 0000 0000     ................
 8012348:	0000 03e0 03e0 0300 0300 0300 0300 0300     ................
 8012358:	0300 0300 0300 0300 0300 0300 0300 0300     ................
 8012368:	0300 0300 0300 0300 0300 03e0 03e0 0000     ................
 8012378:	0000 0000 01c0 01c0 0360 0360 0360 0630     ........`.`.`.0.
 8012388:	0630 0c18 0c18 0000 0000 0000 0000 0000     0...............
	...
 80123c8:	0000 ffff ffff 0000 0000 0000 0000 0000     ................
 80123d8:	0000 000c 000c 000c 000c 000c 000c 0000     ................
	...
 8012414:	03f0 07f8 0c1c 0c0c 0f00 0ff0 0cf8 0c0c     ................
 8012424:	0c0c 0f1c 0ff8 18f0 0000 0000 0000 0000     ................
 8012434:	0000 0000 0000 0018 0018 0018 0018 0018     ................
 8012444:	03d8 0ff8 0c38 1818 1818 1818 1818 1818     ....8...........
 8012454:	1818 0c38 0ff8 03d8 0000 0000 0000 0000     ..8.............
	...
 8012474:	03c0 07f0 0e30 0c18 0018 0018 0018 0018     ....0...........
 8012484:	0c18 0e30 07f0 03c0 0000 0000 0000 0000     ..0.............
 8012494:	0000 0000 0000 1800 1800 1800 1800 1800     ................
 80124a4:	1bc0 1ff0 1c30 1818 1818 1818 1818 1818     ....0...........
 80124b4:	1818 1c30 1ff0 1bc0 0000 0000 0000 0000     ..0.............
	...
 80124d4:	03c0 0ff0 0c30 1818 1ff8 1ff8 0018 0018     ....0...........
 80124e4:	1838 1c30 0ff0 07c0 0000 0000 0000 0000     8.0.............
 80124f4:	0000 0000 0000 0f80 0fc0 00c0 00c0 00c0     ................
 8012504:	07f0 07f0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 8012514:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
	...
 8012534:	0de0 0ff8 0e18 0c0c 0c0c 0c0c 0c0c 0c0c     ................
 8012544:	0c0c 0e18 0ff8 0de0 0c00 0c0c 061c 07f8     ................
 8012554:	01f0 0000 0000 0018 0018 0018 0018 0018     ................
 8012564:	07d8 0ff8 1c38 1818 1818 1818 1818 1818     ....8...........
 8012574:	1818 1818 1818 1818 0000 0000 0000 0000     ................
 8012584:	0000 0000 0000 00c0 00c0 0000 0000 0000     ................
 8012594:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 80125a4:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
 80125b4:	0000 0000 0000 00c0 00c0 0000 0000 0000     ................
 80125c4:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 80125d4:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00f8     ................
 80125e4:	0078 0000 0000 000c 000c 000c 000c 000c     x...............
 80125f4:	0c0c 060c 030c 018c 00cc 006c 00fc 019c     ..........l.....
 8012604:	038c 030c 060c 0c0c 0000 0000 0000 0000     ................
 8012614:	0000 0000 0000 00c0 00c0 00c0 00c0 00c0     ................
 8012624:	00c0 00c0 00c0 00c0 00c0 00c0 00c0 00c0     ................
 8012634:	00c0 00c0 00c0 00c0 0000 0000 0000 0000     ................
	...
 8012654:	3c7c 7eff e3c7 c183 c183 c183 c183 c183     |<.~............
 8012664:	c183 c183 c183 c183 0000 0000 0000 0000     ................
	...
 8012684:	0798 0ff8 1c38 1818 1818 1818 1818 1818     ....8...........
 8012694:	1818 1818 1818 1818 0000 0000 0000 0000     ................
	...
 80126b4:	03c0 0ff0 0c30 1818 1818 1818 1818 1818     ....0...........
 80126c4:	1818 0c30 0ff0 03c0 0000 0000 0000 0000     ..0.............
	...
 80126e4:	03d8 0ff8 0c38 1818 1818 1818 1818 1818     ....8...........
 80126f4:	1818 0c38 0ff8 03d8 0018 0018 0018 0018     ..8.............
 8012704:	0018 0000 0000 0000 0000 0000 0000 0000     ................
 8012714:	1bc0 1ff0 1c30 1818 1818 1818 1818 1818     ....0...........
 8012724:	1818 1c30 1ff0 1bc0 1800 1800 1800 1800     ..0.............
 8012734:	1800 0000 0000 0000 0000 0000 0000 0000     ................
 8012744:	07b0 03f0 0070 0030 0030 0030 0030 0030     ....p.0.0.0.0.0.
 8012754:	0030 0030 0030 0030 0000 0000 0000 0000     0.0.0.0.........
	...
 8012774:	03e0 03f0 0e38 0c18 0038 03f0 07c0 0c00     ....8...8.......
 8012784:	0c18 0e38 07f0 03e0 0000 0000 0000 0000     ..8.............
	...
 801279c:	0080 00c0 00c0 00c0 07f0 07f0 00c0 00c0     ................
 80127ac:	00c0 00c0 00c0 00c0 00c0 00c0 07c0 0780     ................
	...
 80127d4:	1818 1818 1818 1818 1818 1818 1818 1818     ................
 80127e4:	1818 1c38 1ff0 19e0 0000 0000 0000 0000     ..8.............
	...
 8012804:	180c 0c18 0c18 0c18 0630 0630 0630 0360     ........0.0.0.`.
 8012814:	0360 0360 01c0 01c0 0000 0000 0000 0000     `.`.............
	...
 8012834:	41c1 41c1 61c3 6363 6363 6363 3636 3636     .A.A.acccccc6666
 8012844:	3636 1c1c 1c1c 1c1c 0000 0000 0000 0000     66..............
	...
 8012864:	381c 1c38 0c30 0660 0360 0360 0360 0360     .88.0.`.`.`.`.`.
 8012874:	0660 0c30 1c38 381c 0000 0000 0000 0000     `.0.8..8........
	...
 8012894:	3018 1830 1830 1870 0c60 0c60 0ce0 06c0     .00.0.p.`.`.....
 80128a4:	06c0 0380 0380 0380 0180 0180 01c0 00f0     ................
 80128b4:	0070 0000 0000 0000 0000 0000 0000 0000     p...............
 80128c4:	1ffc 1ffc 0c00 0600 0300 0180 00c0 0060     ..............`.
 80128d4:	0030 0018 1ffc 1ffc 0000 0000 0000 0000     0...............
 80128e4:	0000 0000 0000 0300 0180 00c0 00c0 00c0     ................
 80128f4:	00c0 00c0 00c0 0060 0060 0030 0060 0040     ......`.`.0.`.@.
 8012904:	00c0 00c0 00c0 00c0 00c0 00c0 0180 0300     ................
 8012914:	0000 0000 0000 0180 0180 0180 0180 0180     ................
 8012924:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 8012934:	0180 0180 0180 0180 0180 0180 0180 0180     ................
 8012944:	0180 0000 0000 0060 00c0 01c0 0180 0180     ......`.........
 8012954:	0180 0180 0180 0300 0300 0600 0300 0100     ................
 8012964:	0180 0180 0180 0180 0180 0180 00c0 0060     ..............`.
	...
 8012988:	10f0 1ff8 0f08 0000 0000 0000 0000 0000     ................
	...

080129a8 <ASCII12x12_Table>:
	...
 80129c0:	0000 2000 2000 2000 2000 2000 2000 2000     ... . . . . . . 
 80129d0:	0000 2000 0000 0000 0000 5000 5000 5000     ... .......P.P.P
	...
 80129f0:	0000 0900 0900 1200 7f00 1200 7f00 1200     ................
 8012a00:	2400 2400 0000 0000 1000 3800 5400 5000     .$.$.......8.T.P
 8012a10:	5000 3800 1400 5400 5400 3800 1000 0000     .P.8...T.T.8....
 8012a20:	0000 3080 4900 4900 4a00 32c0 0520 0920     ...0.I.I.J.2 . .
 8012a30:	0920 10c0 0000 0000 0000 0c00 1200 1200      ...............
 8012a40:	1400 1800 2500 2300 2300 1d80 0000 0000     .....%.#.#......
 8012a50:	0000 4000 4000 4000 0000 0000 0000 0000     ...@.@.@........
	...
 8012a68:	0000 0800 1000 1000 2000 2000 2000 2000     ......... . . . 
 8012a78:	2000 2000 1000 1000 0000 4000 2000 2000     . . .......@. . 
 8012a88:	1000 1000 1000 1000 1000 1000 2000 2000     ............. . 
 8012a98:	0000 2000 7000 2000 5000 0000 0000 0000     ... .p. .P......
	...
 8012ab4:	0000 0800 0800 7f00 0800 0800 0000 0000     ................
	...
 8012ad8:	0000 2000 2000 4000 0000 0000 0000 0000     ... . .@........
 8012ae8:	0000 0000 7000 0000 0000 0000 0000 0000     .....p..........
	...
 8012b08:	0000 2000 0000 0000 0000 1000 1000 1000     ... ............
 8012b18:	2000 2000 2000 2000 4000 4000 0000 0000     . . . . .@.@....
 8012b28:	0000 1000 2800 4400 4400 4400 4400 4400     .....(.D.D.D.D.D
 8012b38:	2800 1000 0000 0000 0000 1000 3000 5000     .(...........0.P
 8012b48:	1000 1000 1000 1000 1000 1000 0000 0000     ................
 8012b58:	0000 3000 4800 4400 0400 0800 1000 2000     ...0.H.D....... 
 8012b68:	4000 7c00 0000 0000 0000 3000 4800 0400     .@.|.......0.H..
 8012b78:	0800 1000 0800 4400 4800 3000 0000 0000     .......D.H.0....
 8012b88:	0000 0800 1800 1800 2800 2800 4800 7c00     .........(.(.H.|
 8012b98:	0800 0800 0000 0000 0000 3c00 2000 4000     ...........<. .@
 8012ba8:	7000 4800 0400 4400 4800 3000 0000 0000     .p.H...D.H.0....
 8012bb8:	0000 1800 2400 4000 5000 6800 4400 4400     .....$.@.P.h.D.D
 8012bc8:	2800 1000 0000 0000 0000 7c00 0400 0800     .(.........|....
 8012bd8:	1000 1000 1000 2000 2000 2000 0000 0000     ....... . . ....
 8012be8:	0000 1000 2800 4400 2800 1000 2800 4400     .....(.D.(...(.D
 8012bf8:	2800 1000 0000 0000 0000 1000 2800 4400     .(...........(.D
 8012c08:	4400 2c00 1400 0400 4800 3000 0000 0000     .D.,.....H.0....
 8012c18:	0000 0000 0000 2000 0000 0000 0000 0000     ....... ........
 8012c28:	0000 2000 0000 0000 0000 0000 0000 2000     ... ........... 
	...
 8012c40:	0000 2000 2000 4000 0000 0000 0400 0800     ... . .@........
 8012c50:	3000 4000 3000 0800 0400 0000 0000 0000     .0.@.0..........
 8012c60:	0000 0000 0000 7c00 0000 0000 7c00 0000     .......|.....|..
	...
 8012c7c:	4000 2000 1800 0400 1800 2000 4000 0000     .@. ....... .@..
 8012c8c:	0000 0000 0000 3800 6400 4400 0400 0800     .......8.d.D....
 8012c9c:	1000 1000 0000 1000 0000 0000 0000 0f80     ................
 8012cac:	1040 2ea0 51a0 5120 5120 5120 5320 4dc0     @....Q Q Q Q S.M
 8012cbc:	2020 1040 0000 0800 1400 1400 1400 2200       @............"
 8012ccc:	3e00 2200 4100 4100 0000 0000 0000 3c00     .>.".A.A.......<
 8012cdc:	2200 2200 2200 3c00 2200 2200 2200 3c00     .".".".<.".".".<
 8012cec:	0000 0000 0000 0e00 1100 2100 2000 2000     ...........!. . 
 8012cfc:	2000 2100 1100 0e00 0000 0000 0000 3c00     . .!...........<
 8012d0c:	2200 2100 2100 2100 2100 2100 2200 3c00     .".!.!.!.!.!.".<
 8012d1c:	0000 0000 0000 3e00 2000 2000 2000 3e00     .......>. . . .>
 8012d2c:	2000 2000 2000 3e00 0000 0000 0000 3e00     . . . .>.......>
 8012d3c:	2000 2000 2000 3c00 2000 2000 2000 2000     . . . .<. . . . 
 8012d4c:	0000 0000 0000 0e00 1100 2100 2000 2700     ...........!. .'
 8012d5c:	2100 2100 1100 0e00 0000 0000 0000 2100     .!.!...........!
 8012d6c:	2100 2100 2100 3f00 2100 2100 2100 2100     .!.!.!.?.!.!.!.!
 8012d7c:	0000 0000 0000 2000 2000 2000 2000 2000     ....... . . . . 
 8012d8c:	2000 2000 2000 2000 0000 0000 0000 0800     . . . . ........
 8012d9c:	0800 0800 0800 0800 0800 4800 4800 3000     ...........H.H.0
 8012dac:	0000 0000 0000 2200 2400 2800 2800 3800     .......".$.(.(.8
 8012dbc:	2800 2400 2400 2200 0000 0000 0000 2000     .(.$.$."....... 
 8012dcc:	2000 2000 2000 2000 2000 2000 2000 3e00     . . . . . . . .>
 8012ddc:	0000 0000 0000 2080 3180 3180 3180 2a80     ....... .1.1.1.*
 8012dec:	2a80 2a80 2a80 2480 0000 0000 0000 2100     .*.*.*.$.......!
 8012dfc:	3100 3100 2900 2900 2500 2300 2300 2100     .1.1.).).%.#.#.!
 8012e0c:	0000 0000 0000 0c00 1200 2100 2100 2100     ...........!.!.!
 8012e1c:	2100 2100 1200 0c00 0000 0000 0000 3c00     .!.!...........<
 8012e2c:	2200 2200 2200 3c00 2000 2000 2000 2000     .".".".<. . . . 
 8012e3c:	0000 0000 0000 0c00 1200 2100 2100 2100     ...........!.!.!
 8012e4c:	2100 2100 1600 0d00 0100 0000 0000 3e00     .!.!...........>
 8012e5c:	2100 2100 2100 3e00 2400 2200 2100 2080     .!.!.!.>.$.".!. 
 8012e6c:	0000 0000 0000 1c00 2200 2200 2000 1c00     .........".". ..
 8012e7c:	0200 2200 2200 1c00 0000 0000 0000 3e00     ...".".........>
 8012e8c:	0800 0800 0800 0800 0800 0800 0800 0800     ................
 8012e9c:	0000 0000 0000 2100 2100 2100 2100 2100     .......!.!.!.!.!
 8012eac:	2100 2100 1200 0c00 0000 0000 0000 4100     .!.!...........A
 8012ebc:	4100 2200 2200 2200 1400 1400 1400 0800     .A."."."........
 8012ecc:	0000 0000 0000 4440 4a40 2a40 2a80 2a80     ......@D@J@*.*.*
 8012edc:	2a80 2a80 2a80 1100 0000 0000 0000 4100     .*.*.*.........A
 8012eec:	2200 1400 1400 0800 1400 1400 2200 4100     ."...........".A
 8012efc:	0000 0000 0000 4100 2200 2200 1400 0800     .......A."."....
 8012f0c:	0800 0800 0800 0800 0000 0000 0000 7e00     ...............~
 8012f1c:	0200 0400 0800 1000 1000 2000 4000 7e00     ........... .@.~
 8012f2c:	0000 0000 0000 3000 2000 2000 2000 2000     .......0. . . . 
 8012f3c:	2000 2000 2000 2000 2000 2000 0000 4000     . . . . . . ...@
 8012f4c:	4000 2000 2000 2000 2000 2000 1000 1000     .@. . . . . ....
 8012f5c:	0000 0000 0000 6000 2000 2000 2000 2000     .......`. . . . 
 8012f6c:	2000 2000 2000 2000 2000 2000 0000 1000     . . . . . . ....
 8012f7c:	2800 2800 2800 4400 0000 0000 0000 0000     .(.(.(.D........
	...
 8012fa4:	0000 7e00 4000 2000 0000 0000 0000 0000     ...~.@. ........
	...
 8012fc4:	0000 3800 4400 0400 3c00 4400 4400 3c00     ...8.D...<.D.D.<
 8012fd4:	0000 0000 0000 4000 4000 5800 6400 4400     .......@.@.X.d.D
 8012fe4:	4400 4400 6400 5800 0000 0000 0000 0000     .D.D.d.X........
 8012ff4:	0000 3000 4800 4000 4000 4000 4800 3000     ...0.H.@.@.@.H.0
 8013004:	0000 0000 0000 0400 0400 3400 4c00 4400     ...........4.L.D
 8013014:	4400 4400 4c00 3400 0000 0000 0000 0000     .D.D.L.4........
 8013024:	0000 3800 4400 4400 7c00 4000 4400 3800     ...8.D.D.|.@.D.8
 8013034:	0000 0000 0000 6000 4000 e000 4000 4000     .......`.@...@.@
 8013044:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 8013054:	0000 3400 4c00 4400 4400 4400 4c00 3400     ...4.L.D.D.D.L.4
 8013064:	0400 4400 0000 4000 4000 5800 6400 4400     ...D...@.@.X.d.D
 8013074:	4400 4400 4400 4400 0000 0000 0000 4000     .D.D.D.D.......@
 8013084:	0000 4000 4000 4000 4000 4000 4000 4000     ...@.@.@.@.@.@.@
 8013094:	0000 0000 0000 4000 0000 4000 4000 4000     .......@...@.@.@
 80130a4:	4000 4000 4000 4000 4000 4000 0000 4000     .@.@.@.@.@.@...@
 80130b4:	4000 4800 5000 6000 5000 5000 4800 4800     .@.H.P.`.P.P.H.H
 80130c4:	0000 0000 0000 4000 4000 4000 4000 4000     .......@.@.@.@.@
 80130d4:	4000 4000 4000 4000 0000 0000 0000 0000     .@.@.@.@........
 80130e4:	0000 5200 6d00 4900 4900 4900 4900 4900     ...R.m.I.I.I.I.I
	...
 80130fc:	0000 5800 6400 4400 4400 4400 4400 4400     ...X.d.D.D.D.D.D
	...
 8013114:	0000 3800 4400 4400 4400 4400 4400 3800     ...8.D.D.D.D.D.8
	...
 801312c:	0000 5800 6400 4400 4400 4400 6400 5800     ...X.d.D.D.D.d.X
 801313c:	4000 4000 0000 0000 0000 3400 4c00 4400     .@.@.......4.L.D
 801314c:	4400 4400 4c00 3400 0400 0400 0000 0000     .D.D.L.4........
 801315c:	0000 5000 6000 4000 4000 4000 4000 4000     ...P.`.@.@.@.@.@
	...
 8013174:	0000 3000 4800 4000 3000 0800 4800 3000     ...0.H.@.0...H.0
 8013184:	0000 0000 0000 4000 4000 e000 4000 4000     .......@.@...@.@
 8013194:	4000 4000 4000 6000 0000 0000 0000 0000     .@.@.@.`........
 80131a4:	0000 4400 4400 4400 4400 4400 4c00 3400     ...D.D.D.D.D.L.4
	...
 80131bc:	0000 4400 4400 2800 2800 2800 2800 1000     ...D.D.(.(.(.(..
	...
 80131d4:	0000 4900 4900 5500 5500 5500 5500 2200     ...I.I.U.U.U.U."
	...
 80131ec:	0000 4400 2800 2800 1000 2800 2800 4400     ...D.(.(...(.(.D
	...
 8013204:	0000 4400 4400 2800 2800 2800 1000 1000     ...D.D.(.(.(....
 8013214:	1000 1000 0000 0000 0000 7800 0800 1000     ...........x....
 8013224:	2000 2000 4000 7800 0000 0000 0000 1000     . . .@.x........
 8013234:	2000 2000 2000 2000 4000 2000 2000 2000     . . . . .@. . . 
 8013244:	2000 2000 0000 2000 2000 2000 2000 2000     . . ... . . . . 
 8013254:	2000 2000 2000 2000 2000 2000 0000 4000     . . . . . . ...@
 8013264:	2000 2000 2000 2000 1000 2000 2000 2000     . . . . ... . . 
 8013274:	2000 2000 0000 0000 0000 0000 7400 5800     . . .........t.X
	...
 8013294:	7000 5000 5000 5000 5000 5000 5000 7000     .p.P.P.P.P.P.P.p
 80132a4:	0000 0000                                   ....

080132a8 <ASCII8x12_Table>:
	...
 80132c4:	0000 0010 0010 0010 0010 0010 0010 0000     ................
 80132d4:	0010 0000 0000 0000 0000 0028 0028 0028     ..........(.(.(.
	...
 80132f4:	0000 0014 0014 003e 0014 0028 007c 0028     ......>...(.|.(.
 8013304:	0028 0000 0000 0000 0010 0038 0054 0050     (.........8.T.P.
 8013314:	0038 0014 0014 0054 0038 0010 0000 0000     8.....T.8.......
 8013324:	0000 0044 00a8 00a8 0050 0014 001a 002a     ..D.....P.....*.
 8013334:	0024 0000 0000 0000 0000 0020 0050 0050     $......... .P.P.
 8013344:	0020 00e8 0098 0098 0060 0000 0000 0000      .......`.......
 8013354:	0000 0080 0080 0080 0000 0000 0000 0000     ................
	...
 801336c:	0000 0040 0080 0080 0080 0080 0080 0080     ..@.............
 801337c:	0080 0080 0000 0000 0000 0080 0040 0040     ............@.@.
 801338c:	0040 0040 0040 0040 0040 0040 0000 0000     @.@.@.@.@.@.....
 801339c:	0000 0040 00e0 0040 00a0 0000 0000 0000     ..@...@.........
	...
 80133b8:	0000 0020 0020 00f8 0020 0020 0000 0000     .. . ... . .....
	...
 80133dc:	0040 0040 0000 0000 0000 0000 0000 0000     @.@.............
 80133ec:	0000 0000 00c0 0000 0000 0000 0000 0000     ................
	...
 801340c:	0040 0000 0000 0000 0000 0020 0020 0020     @......... . . .
 801341c:	0040 0040 0080 0080 0080 0000 0000 0000     @.@.............
 801342c:	0000 0060 0090 0090 0090 0090 0090 0090     ..`.............
 801343c:	0060 0000 0000 0000 0000 0020 0060 00a0     `......... .`...
 801344c:	0020 0020 0020 0020 0020 0000 0000 0000      . . . . .......
 801345c:	0000 0060 0090 0010 0010 0020 0040 0080     ..`....... .@...
 801346c:	00f0 0000 0000 0000 0000 0060 0090 0010     ..........`.....
 801347c:	0060 0010 0010 0090 0060 0000 0000 0000     `.......`.......
 801348c:	0000 0010 0030 0050 0050 0090 00f8 0010     ....0.P.P.......
 801349c:	0010 0000 0000 0000 0000 0070 0040 0080     ..........p.@...
 80134ac:	00e0 0010 0010 0090 0060 0000 0000 0000     ........`.......
 80134bc:	0000 0060 0090 0080 00a0 00d0 0090 0090     ..`.............
 80134cc:	0060 0000 0000 0000 0000 00f0 0010 0020     `............. .
 80134dc:	0020 0020 0040 0040 0040 0000 0000 0000      . .@.@.@.......
 80134ec:	0000 0060 0090 0090 0060 0090 0090 0090     ..`.....`.......
 80134fc:	0060 0000 0000 0000 0000 0060 0090 0090     `.........`.....
 801350c:	00b0 0050 0010 0090 0060 0000 0000 0000     ..P.....`.......
 801351c:	0000 0000 0000 0040 0000 0000 0000 0000     ......@.........
 801352c:	0040 0000 0000 0000 0000 0000 0000 0040     @.............@.
	...
 8013544:	0040 0040 0000 0000 0000 0000 0000 0010     @.@.............
 8013554:	0060 0080 0060 0010 0000 0000 0000 0000     `...`...........
	...
 801356c:	00f0 0000 00f0 0000 0000 0000 0000 0000     ................
 801357c:	0000 0000 0000 0080 0060 0010 0060 0080     ........`...`...
	...
 8013594:	0000 0060 0090 0010 0020 0040 0040 0000     ..`..... .@.@...
 80135a4:	0040 0000 0000 0000 0000 001c 0022 005b     @...........".[.
 80135b4:	00a5 00a5 00a5 00a5 009e 0041 0000 0000     ..........A.....
 80135c4:	0000 0020 0050 0050 0050 0050 0070 0088     .. .P.P.P.P.p...
 80135d4:	0088 0000 0000 0000 0000 00f0 0088 0088     ................
 80135e4:	00f0 0088 0088 0088 00f0 0000 0000 0000     ................
 80135f4:	0000 0038 0044 0084 0080 0080 0084 0044     ..8.D.........D.
 8013604:	0038 0000 0000 0000 0000 00e0 0090 0088     8...............
 8013614:	0088 0088 0088 0090 00e0 0000 0000 0000     ................
 8013624:	0000 00f8 0080 0080 00f8 0080 0080 0080     ................
 8013634:	00f8 0000 0000 0000 0000 0078 0040 0040     ..........x.@.@.
 8013644:	0070 0040 0040 0040 0040 0000 0000 0000     p.@.@.@.@.......
 8013654:	0000 0038 0044 0084 0080 009c 0084 0044     ..8.D.........D.
 8013664:	0038 0000 0000 0000 0000 0088 0088 0088     8...............
 8013674:	00f8 0088 0088 0088 0088 0000 0000 0000     ................
 8013684:	0000 0080 0080 0080 0080 0080 0080 0080     ................
 8013694:	0080 0000 0000 0000 0000 0010 0010 0010     ................
 80136a4:	0010 0010 0090 0090 0060 0000 0000 0000     ........`.......
 80136b4:	0000 0088 0090 00a0 00e0 00a0 0090 0090     ................
 80136c4:	0088 0000 0000 0000 0000 0080 0080 0080     ................
 80136d4:	0080 0080 0080 0080 00f0 0000 0000 0000     ................
 80136e4:	0000 0082 00c6 00c6 00aa 00aa 00aa 00aa     ................
 80136f4:	0092 0000 0000 0000 0000 0084 00c4 00a4     ................
 8013704:	00a4 0094 0094 008c 0084 0000 0000 0000     ................
 8013714:	0000 0030 0048 0084 0084 0084 0084 0048     ..0.H.........H.
 8013724:	0030 0000 0000 0000 0000 00f0 0088 0088     0...............
 8013734:	0088 00f0 0080 0080 0080 0000 0000 0000     ................
 8013744:	0000 0030 0048 0084 0084 0084 0084 0058     ..0.H.........X.
 8013754:	0034 0004 0000 0000 0000 0078 0044 0044     4.........x.D.D.
 8013764:	0078 0050 0048 0044 0042 0000 0000 0000     x.P.H.D.B.......
 8013774:	0000 0070 0088 0080 0070 0008 0088 0088     ..p.....p.......
 8013784:	0070 0000 0000 0000 0000 00f8 0020 0020     p........... . .
 8013794:	0020 0020 0020 0020 0020 0000 0000 0000      . . . . .......
 80137a4:	0000 0084 0084 0084 0084 0084 0084 0048     ..............H.
 80137b4:	0030 0000 0000 0000 0000 0088 0088 0050     0.............P.
 80137c4:	0050 0050 0050 0050 0020 0000 0000 0000     P.P.P.P. .......
 80137d4:	0000 0092 00aa 00aa 00aa 00aa 00aa 00aa     ................
 80137e4:	0044 0000 0000 0000 0000 0084 0048 0048     D...........H.H.
 80137f4:	0030 0030 0048 0048 0084 0000 0000 0000     0.0.H.H.........
 8013804:	0000 0088 0050 0050 0020 0020 0020 0020     ....P.P. . . . .
 8013814:	0020 0000 0000 0000 0000 00f8 0008 0010      ...............
 8013824:	0020 0020 0040 0080 00f8 0000 0000 0000      . .@...........
 8013834:	0000 00c0 0080 0080 0080 0080 0080 0080     ................
 8013844:	0080 0080 0000 0000 0000 0080 0080 0040     ..............@.
 8013854:	0040 0040 0040 0020 0020 0000 0000 0000     @.@.@. . .......
 8013864:	0000 00c0 0040 0040 0040 0040 0040 0040     ....@.@.@.@.@.@.
 8013874:	0040 0040 0000 0000 0000 0040 00a0 00a0     @.@.......@.....
 8013884:	00a0 0000 0000 0000 0000 0000 0000 0000     ................
	...
 80138a4:	0000 00f8 0000 0000 0000 0080 0040 0000     ............@...
	...
 80138c8:	0000 00e0 0010 0070 0090 0090 0070 0000     ......p.....p...
 80138d8:	0000 0000 0000 0080 0080 00a0 00d0 0090     ................
 80138e8:	0090 00d0 00a0 0000 0000 0000 0000 0000     ................
 80138f8:	0000 0060 0090 0080 0080 0090 0060 0000     ..`.........`...
 8013908:	0000 0000 0000 0010 0010 0050 00b0 0090     ..........P.....
 8013918:	0090 00b0 0050 0000 0000 0000 0000 0000     ....P...........
 8013928:	0000 0060 0090 00f0 0080 0090 0060 0000     ..`.........`...
 8013938:	0000 0000 0000 00c0 0080 00c0 0080 0080     ................
 8013948:	0080 0080 0080 0000 0000 0000 0000 0000     ................
 8013958:	0000 0050 00b0 0090 0090 00b0 0050 0010     ..P.........P...
 8013968:	0000 0000 0000 0080 0080 00a0 00d0 0090     ................
 8013978:	0090 0090 0090 0000 0000 0000 0000 0080     ................
 8013988:	0000 0080 0080 0080 0080 0080 0080 0000     ................
 8013998:	0000 0000 0000 0080 0000 0080 0080 0080     ................
 80139a8:	0080 0080 0080 0080 0000 0000 0000 0080     ................
 80139b8:	0080 0090 00a0 00c0 00a0 0090 0090 0000     ................
 80139c8:	0000 0000 0000 0080 0080 0080 0080 0080     ................
 80139d8:	0080 0080 0080 0000 0000 0000 0000 0000     ................
 80139e8:	0000 00a6 00da 0092 0092 0092 0092 0000     ................
	...
 8013a00:	0000 00a0 00d0 0090 0090 0090 0090 0000     ................
	...
 8013a18:	0000 0060 0090 0090 0090 0090 0060 0000     ..`.........`...
	...
 8013a30:	0000 00a0 00d0 0090 0090 00d0 00a0 0080     ................
	...
 8013a48:	0000 0050 00b0 0090 0090 00b0 0050 0010     ..P.........P...
	...
 8013a60:	0000 00a0 00c0 0080 0080 0080 0080 0000     ................
	...
 8013a78:	0000 00e0 0090 0040 0020 0090 0060 0000     ......@. ...`...
 8013a88:	0000 0000 0000 0080 0080 00c0 0080 0080     ................
 8013a98:	0080 0080 00c0 0000 0000 0000 0000 0000     ................
 8013aa8:	0000 0090 0090 0090 0090 00b0 0050 0000     ............P...
	...
 8013ac0:	0000 0088 0088 0050 0050 0050 0020 0000     ......P.P.P. ...
	...
 8013ad8:	0000 0092 00aa 00aa 00aa 00aa 0044 0000     ............D...
	...
 8013af0:	0000 0088 0050 0020 0020 0050 0088 0000     ....P. . .P.....
	...
 8013b08:	0000 0088 0050 0050 0050 0020 0020 0020     ....P.P.P. . . .
	...
 8013b20:	0000 00f0 0010 0020 0040 0080 00f0 0000     ...... .@.......
 8013b30:	0000 0000 0000 00c0 0080 0080 0080 0000     ................
 8013b40:	0080 0080 0080 0080 0000 0000 0000 0080     ................
 8013b50:	0080 0080 0080 0080 0080 0080 0080 0080     ................
 8013b60:	0000 0000 0000 00c0 0040 0040 0040 0020     ........@.@.@. .
 8013b70:	0040 0040 0040 0040 0000 0000 0000 0000     @.@.@.@.........
 8013b80:	0000 0000 00e8 00b0 0000 0000 0000 0000     ................
	...
 8013b98:	00e0 00a0 00a0 00a0 00a0 00a0 00e0 0000     ................

08013ba8 <ASCII8x8_Table>:
	...
 8013bb8:	0040 0040 0040 0040 0040 0040 0000 0040     @.@.@.@.@.@...@.
 8013bc8:	00a0 00a0 00a0 0000 0000 0000 0000 0000     ................
 8013bd8:	0000 0024 0024 00fe 0048 00fc 0048 0048     ..$.$...H...H.H.
 8013be8:	0038 0054 0050 0038 0014 0014 0054 0038     8.T.P.8.....T.8.
 8013bf8:	0044 00a8 00a8 0050 0014 001a 002a 0024     D.....P.....*.$.
 8013c08:	0010 0028 0028 0010 0074 004c 004c 0030     ..(.(...t.L.L.0.
 8013c18:	0010 0010 0010 0000 0000 0000 0000 0000     ................
 8013c28:	0008 0010 0010 0010 0010 0010 0010 0008     ................
 8013c38:	0010 0008 0008 0008 0008 0008 0008 0010     ................
 8013c48:	0000 0000 0024 0018 003c 0018 0024 0000     ....$...<...$...
 8013c58:	0000 0000 0010 0010 007c 0010 0010 0000     ........|.......
	...
 8013c70:	0000 0008 0008 0010 0000 0000 0000 0000     ................
 8013c80:	003c 0000 0000 0000 0000 0000 0000 0000     <...............
 8013c90:	0000 0000 0018 0018 0008 0008 0008 0010     ................
 8013ca0:	0010 0020 0020 0020 0018 0024 0024 0024     .. . . ...$.$.$.
 8013cb0:	0024 0024 0024 0018 0008 0018 0028 0008     $.$.$.......(...
 8013cc0:	0008 0008 0008 0008 0038 0044 0000 0004     ........8.D.....
 8013cd0:	0008 0010 0020 007c 0018 0024 0004 0018     .... .|...$.....
 8013ce0:	0004 0004 0024 0018 0004 000c 0014 0024     ....$.........$.
 8013cf0:	0044 007e 0004 0004 003c 0020 0020 0038     D.~.....<. . .8.
 8013d00:	0004 0004 0024 0018 0018 0024 0020 0038     ....$.....$. .8.
 8013d10:	0024 0024 0024 0018 003c 0004 0008 0008     $.$.$...<.......
 8013d20:	0008 0010 0010 0010 0018 0024 0024 0018     ..........$.$...
 8013d30:	0024 0024 0024 0018 0018 0024 0024 0024     $.$.$.....$.$.$.
 8013d40:	001c 0004 0024 0018 0000 0000 0010 0000     ....$...........
 8013d50:	0000 0010 0000 0000 0000 0000 0008 0000     ................
 8013d60:	0000 0008 0010 0000 0000 0000 0004 0018     ................
 8013d70:	0020 0018 0004 0000 0000 0000 0000 003c      .............<.
 8013d80:	0000 003c 0000 0000 0000 0000 0020 0018     ..<......... ...
 8013d90:	0004 0018 0020 0000 0018 0024 0004 0008     .... .....$.....
 8013da0:	0010 0010 0000 0010 003c 0042 0099 00a5     ........<.B.....
 8013db0:	00a5 009d 0042 0038 0038 0044 0044 0044     ....B.8.8.D.D.D.
 8013dc0:	007c 0044 0044 0044 0078 0044 0044 0078     |.D.D.D.x.D.D.x.
 8013dd0:	0044 0044 0044 0078 001c 0022 0042 0040     D.D.D.x...".B.@.
 8013de0:	0040 0042 0022 001c 0070 0048 0044 0044     @.B."...p.H.D.D.
 8013df0:	0044 0044 0048 0070 007c 0040 0040 007c     D.D.H.p.|.@.@.|.
 8013e00:	0040 0040 0040 007c 003c 0020 0020 0038     @.@.@.|.<. . .8.
 8013e10:	0020 0020 0020 0020 001c 0022 0042 0040      . . . ...".B.@.
 8013e20:	004e 0042 0022 001c 0044 0044 0044 007c     N.B."...D.D.D.|.
 8013e30:	0044 0044 0044 0044 0010 0010 0010 0010     D.D.D.D.........
 8013e40:	0010 0010 0010 0010 0004 0004 0004 0004     ................
 8013e50:	0004 0024 0024 0018 0044 0048 0050 0070     ..$.$...D.H.P.p.
 8013e60:	0050 0048 0048 0044 0020 0020 0020 0020     P.H.H.D. . . . .
 8013e70:	0020 0020 0020 003c 0082 00c6 00c6 00aa      . . .<.........
 8013e80:	00aa 00aa 00aa 0092 0042 0062 0052 0052     ........B.b.R.R.
 8013e90:	004a 004a 0046 0042 0018 0024 0042 0042     J.J.F.B...$.B.B.
 8013ea0:	0042 0042 0024 0018 0078 0044 0044 0044     B.B.$...x.D.D.D.
 8013eb0:	0078 0040 0040 0040 0018 0024 0042 0042     x.@.@.@...$.B.B.
 8013ec0:	0042 0042 002c 001a 0078 0044 0044 0078     B.B.,...x.D.D.x.
 8013ed0:	0050 0048 0044 0042 0038 0044 0040 0038     P.H.D.B.8.D.@.8.
 8013ee0:	0004 0044 0044 0038 007c 0010 0010 0010     ..D.D.8.|.......
 8013ef0:	0010 0010 0010 0010 0042 0042 0042 0042     ........B.B.B.B.
 8013f00:	0042 0042 0024 0018 0044 0044 0028 0028     B.B.$...D.D.(.(.
 8013f10:	0028 0028 0028 0010 0092 00aa 00aa 00aa     (.(.(...........
 8013f20:	00aa 00aa 00aa 0044 0042 0024 0024 0018     ......D.B.$.$...
 8013f30:	0018 0024 0024 0042 0044 0028 0028 0010     ..$.$.B.D.(.(...
 8013f40:	0010 0010 0010 0010 007c 0004 0008 0010     ........|.......
 8013f50:	0010 0020 0040 007c 001c 0010 0010 0010     .. .@.|.........
 8013f60:	0010 0010 0010 001c 0010 0010 0008 0008     ................
 8013f70:	0008 0008 0004 0004 001c 0004 0004 0004     ................
 8013f80:	0004 0004 0004 001c 0010 0028 0044 0000     ..........(.D...
	...
 8013fa8:	0020 0010 0010 0000 0000 0000 0000 0000      ...............
 8013fb8:	0000 0000 0018 0004 001c 0024 0024 001c     ..........$.$...
 8013fc8:	0020 0020 0028 0034 0024 0024 0034 0028      . .(.4.$.$.4.(.
 8013fd8:	0000 0000 0018 0024 0020 0020 0024 0018     ......$. . .$...
 8013fe8:	0004 0004 0014 002c 0024 0024 002c 0014     ......,.$.$.,...
 8013ff8:	0000 0000 0018 0024 003c 0020 0024 0018     ......$.<. .$...
 8014008:	0000 0018 0010 0010 0018 0010 0010 0010     ................
 8014018:	0000 0018 0024 0024 0018 0004 0024 0018     ....$.$.....$...
 8014028:	0020 0020 0028 0034 0024 0024 0024 0024      . .(.4.$.$.$.$.
 8014038:	0010 0000 0010 0010 0010 0010 0010 0010     ................
 8014048:	0008 0000 0008 0008 0008 0008 0028 0010     ............(...
 8014058:	0020 0020 0024 0028 0030 0028 0024 0024      . .$.(.0.(.$.$.
 8014068:	0010 0010 0010 0010 0010 0010 0010 0010     ................
 8014078:	0000 0000 00a6 00da 0092 0092 0092 0092     ................
 8014088:	0000 0000 0028 0034 0024 0024 0024 0024     ....(.4.$.$.$.$.
 8014098:	0000 0000 0018 0024 0024 0024 0024 0018     ......$.$.$.$...
 80140a8:	0000 0028 0034 0024 0038 0020 0020 0020     ..(.4.$.8. . . .
 80140b8:	0000 0014 002c 0024 001c 0004 0004 0004     ....,.$.........
 80140c8:	0000 0000 002c 0030 0020 0020 0020 0020     ....,.0. . . . .
 80140d8:	0000 0000 0018 0024 0010 0008 0024 0018     ......$.....$...
 80140e8:	0000 0010 0038 0010 0010 0010 0010 0018     ....8...........
 80140f8:	0000 0000 0024 0024 0024 0024 002c 0014     ....$.$.$.$.,...
 8014108:	0000 0000 0044 0044 0028 0028 0028 0010     ....D.D.(.(.(...
 8014118:	0000 0000 0092 00aa 00aa 00aa 00aa 0044     ..............D.
 8014128:	0000 0000 0044 0028 0010 0010 0028 0044     ....D.(.....(.D.
 8014138:	0000 0028 0028 0028 0010 0010 0010 0010     ..(.(.(.........
 8014148:	0000 0000 003c 0004 0008 0010 0020 003c     ....<....... .<.
 8014158:	0000 0008 0010 0010 0020 0010 0010 0008     ........ .......
 8014168:	0010 0010 0010 0010 0010 0010 0010 0010     ................
 8014178:	0000 0010 0008 0008 0004 0008 0008 0010     ................
 8014188:	0000 0000 0000 0060 0092 000c 0000 0000     ......`.........
 8014198:	00ff 00ff 00ff 00ff 00ff 00ff 00ff 00ff     ................

080141a8 <GPIO_PIN>:
 80141a8:	1000 2000 4000 8000                         ... .@..

080141b0 <GPIO_CLK>:
 80141b0:	0008 0000 0008 0000 0008 0000 0008 0000     ................

080141c0 <BUTTON_PIN>:
 80141c0:	0001 0000                                   ....

080141c4 <BUTTON_CLK>:
 80141c4:	0001 0000                                   ....

080141c8 <BUTTON_EXTI_LINE>:
 80141c8:	0001 0000                                   ....

080141cc <BUTTON_PORT_SOURCE>:
 80141cc:	0000 0000                                   ....

080141d0 <BUTTON_PIN_SOURCE>:
 80141d0:	0000 0000                                   ....

080141d4 <BUTTON_IRQn>:
 80141d4:	0006 0000                                   ....

080141d8 <__EH_FRAME_BEGIN__>:
 80141d8:	0000 0000                                   ....

080141dc <_init>:
 80141dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141de:	bf00      	nop
 80141e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141e2:	bc08      	pop	{r3}
 80141e4:	469e      	mov	lr, r3
 80141e6:	4770      	bx	lr

080141e8 <_fini>:
 80141e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ea:	bf00      	nop
 80141ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ee:	bc08      	pop	{r3}
 80141f0:	469e      	mov	lr, r3
 80141f2:	4770      	bx	lr
