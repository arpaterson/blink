
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015020  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080151a8  080151a8  0001d1a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080151ac  080151ac  0001d1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000025c  20000000  080151b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .jcr          00000004  2000025c  0801540c  0002025c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000260  08015410  00020260  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000028c  08015410  0002028c  2**0
                  ALLOC
  8 .ARM.attributes 0000002f  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013f40  00000000  00000000  0002028f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003524  00000000  00000000  000341cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000091d0  00000000  00000000  000376f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000018d0  00000000  00000000  000408c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001678  00000000  00000000  00042198  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00009be7  00000000  00000000  00043810  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007429  00000000  00000000  0004d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  00054820  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004ec0  00000000  00000000  00054850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 2460 	movw	r4, #608	; 0x260
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f245 108c 	movw	r0, #20876	; 0x518c
 80001a4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f245 108c 	movw	r0, #20876	; 0x518c
 80001c4:	f240 2164 	movw	r1, #612	; 0x264
 80001c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 205c 	movw	r0, #604	; 0x25c
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop
 80001f0:	080151b0 	.word	0x080151b0
 80001f4:	20000000 	.word	0x20000000
 80001f8:	2000025c 	.word	0x2000025c
 80001fc:	20000260 	.word	0x20000260
 8000200:	2000028c 	.word	0x2000028c

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f092 0f00 	teq	r2, #0
 80004ee:	bf14      	ite	ne
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e720      	b.n	8000348 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aedc 	beq.w	80002f6 <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6c1      	b.n	80002f6 <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__gedf2>:
 8000574:	f04f 3cff 	mov.w	ip, #4294967295
 8000578:	e006      	b.n	8000588 <__cmpdf2+0x4>
 800057a:	bf00      	nop

0800057c <__ledf2>:
 800057c:	f04f 0c01 	mov.w	ip, #1
 8000580:	e002      	b.n	8000588 <__cmpdf2+0x4>
 8000582:	bf00      	nop

08000584 <__cmpdf2>:
 8000584:	f04f 0c01 	mov.w	ip, #1
 8000588:	f84d cd04 	str.w	ip, [sp, #-4]!
 800058c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000598:	bf18      	it	ne
 800059a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800059e:	d01b      	beq.n	80005d8 <__cmpdf2+0x54>
 80005a0:	b001      	add	sp, #4
 80005a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005a6:	bf0c      	ite	eq
 80005a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005ac:	ea91 0f03 	teqne	r1, r3
 80005b0:	bf02      	ittt	eq
 80005b2:	ea90 0f02 	teqeq	r0, r2
 80005b6:	2000      	moveq	r0, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	f110 0f00 	cmn.w	r0, #0
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf58      	it	pl
 80005c4:	4299      	cmppl	r1, r3
 80005c6:	bf08      	it	eq
 80005c8:	4290      	cmpeq	r0, r2
 80005ca:	bf2c      	ite	cs
 80005cc:	17d8      	asrcs	r0, r3, #31
 80005ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d2:	f040 0001 	orr.w	r0, r0, #1
 80005d6:	4770      	bx	lr
 80005d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d102      	bne.n	80005e8 <__cmpdf2+0x64>
 80005e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005e6:	d107      	bne.n	80005f8 <__cmpdf2+0x74>
 80005e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f0:	d1d6      	bne.n	80005a0 <__cmpdf2+0x1c>
 80005f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005f6:	d0d3      	beq.n	80005a0 <__cmpdf2+0x1c>
 80005f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <__aeabi_cdrcmple>:
 8000600:	4684      	mov	ip, r0
 8000602:	4610      	mov	r0, r2
 8000604:	4662      	mov	r2, ip
 8000606:	468c      	mov	ip, r1
 8000608:	4619      	mov	r1, r3
 800060a:	4663      	mov	r3, ip
 800060c:	e000      	b.n	8000610 <__aeabi_cdcmpeq>
 800060e:	bf00      	nop

08000610 <__aeabi_cdcmpeq>:
 8000610:	b501      	push	{r0, lr}
 8000612:	f7ff ffb7 	bl	8000584 <__cmpdf2>
 8000616:	2800      	cmp	r0, #0
 8000618:	bf48      	it	mi
 800061a:	f110 0f00 	cmnmi.w	r0, #0
 800061e:	bd01      	pop	{r0, pc}

08000620 <__aeabi_dcmpeq>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff fff4 	bl	8000610 <__aeabi_cdcmpeq>
 8000628:	bf0c      	ite	eq
 800062a:	2001      	moveq	r0, #1
 800062c:	2000      	movne	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmplt>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffea 	bl	8000610 <__aeabi_cdcmpeq>
 800063c:	bf34      	ite	cc
 800063e:	2001      	movcc	r0, #1
 8000640:	2000      	movcs	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmple>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffe0 	bl	8000610 <__aeabi_cdcmpeq>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpge>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffce 	bl	8000600 <__aeabi_cdrcmple>
 8000664:	bf94      	ite	ls
 8000666:	2001      	movls	r0, #1
 8000668:	2000      	movhi	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_dcmpgt>:
 8000670:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000674:	f7ff ffc4 	bl	8000600 <__aeabi_cdrcmple>
 8000678:	bf34      	ite	cc
 800067a:	2001      	movcc	r0, #1
 800067c:	2000      	movcs	r0, #0
 800067e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000682:	bf00      	nop

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f245 16a8 	movw	r6, #20904	; 0x51a8
 800068a:	f245 15a8 	movw	r5, #20904	; 0x51a8
 800068e:	f6c0 0601 	movt	r6, #2049	; 0x801
 8000692:	f6c0 0501 	movt	r5, #2049	; 0x801
 8000696:	1b76      	subs	r6, r6, r5
 8000698:	10b6      	asrs	r6, r6, #2
 800069a:	d006      	beq.n	80006aa <__libc_init_array+0x26>
 800069c:	2400      	movs	r4, #0
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	3401      	adds	r4, #1
 80006a4:	4798      	blx	r3
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d1f9      	bne.n	800069e <__libc_init_array+0x1a>
 80006aa:	f245 16ac 	movw	r6, #20908	; 0x51ac
 80006ae:	f245 15a8 	movw	r5, #20904	; 0x51a8
 80006b2:	f6c0 0601 	movt	r6, #2049	; 0x801
 80006b6:	f6c0 0501 	movt	r5, #2049	; 0x801
 80006ba:	1b76      	subs	r6, r6, r5
 80006bc:	f014 fd68 	bl	8015190 <_init>
 80006c0:	10b6      	asrs	r6, r6, #2
 80006c2:	d006      	beq.n	80006d2 <__libc_init_array+0x4e>
 80006c4:	2400      	movs	r4, #0
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	3401      	adds	r4, #1
 80006cc:	4798      	blx	r3
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d1f9      	bne.n	80006c6 <__libc_init_array+0x42>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}

080006d4 <_sbrk>:

/** Function for malloc, realloc, free */
extern int  _end;

caddr_t _sbrk ( int incr )
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  static unsigned char *heap = NULL;
  unsigned char *prev_heap;

  if (heap == NULL) {
 80006dc:	f240 237c 	movw	r3, #636	; 0x27c
 80006e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d108      	bne.n	80006fc <_sbrk+0x28>
    heap = (unsigned char *)&_end;
 80006ea:	f240 237c 	movw	r3, #636	; 0x27c
 80006ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006f2:	f240 228c 	movw	r2, #652	; 0x28c
 80006f6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80006fa:	601a      	str	r2, [r3, #0]
  }
  prev_heap = heap;
 80006fc:	f240 237c 	movw	r3, #636	; 0x27c
 8000700:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	60fb      	str	r3, [r7, #12]
  /* check removed to show basic approach */

  heap += incr;
 8000708:	f240 237c 	movw	r3, #636	; 0x27c
 800070c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000710:	681a      	ldr	r2, [r3, #0]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	18d2      	adds	r2, r2, r3
 8000716:	f240 237c 	movw	r3, #636	; 0x27c
 800071a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800071e:	601a      	str	r2, [r3, #0]

  return (caddr_t) prev_heap;
 8000720:	68fb      	ldr	r3, [r7, #12]
}
 8000722:	4618      	mov	r0, r3
 8000724:	f107 0714 	add.w	r7, r7, #20
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <_close>:



int _close(int file) {
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
           return -1;
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
        }
 800073c:	4618      	mov	r0, r3
 800073e:	f107 070c 	add.w	r7, r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <_fstat>:


int _fstat(int file, struct stat *st) {
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
    st->st_mode = S_IFCHR;
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000758:	605a      	str	r2, [r3, #4]
    return 0;
 800075a:	f04f 0300 	mov.w	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	f107 070c 	add.w	r7, r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <_isatty>:

int _isatty(int file) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
            return 1;
 8000774:	f04f 0301 	mov.w	r3, #1
          }
 8000778:	4618      	mov	r0, r3
 800077a:	f107 070c 	add.w	r7, r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000784:	b480      	push	{r7}
 8000786:	b085      	sub	sp, #20
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	607a      	str	r2, [r7, #4]
            return 0;
 8000790:	f04f 0300 	mov.w	r3, #0
          }
 8000794:	4618      	mov	r0, r3
 8000796:	f107 0714 	add.w	r7, r7, #20
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <_read>:

int _read(int file, char *ptr, int len) {
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
            return 0;
 80007ac:	f04f 0300 	mov.w	r3, #0
          }
 80007b0:	4618      	mov	r0, r3
 80007b2:	f107 0714 	add.w	r7, r7, #20
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <_write>:

int _write(int file, char *ptr, int len) {
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
            return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
          }
 80007ca:	4618      	mov	r0, r3
 80007cc:	f107 0714 	add.w	r7, r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <PutChar>:
 *
 * @param  pStr    Storage string.
 * @param  c    Character to write.
 */
signed int PutChar(char *pStr, char c)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	460b      	mov	r3, r1
 80007e2:	70fb      	strb	r3, [r7, #3]
    *pStr = c;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	78fa      	ldrb	r2, [r7, #3]
 80007e8:	701a      	strb	r2, [r3, #0]
    return 1;
 80007ea:	f04f 0301 	mov.w	r3, #1
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	f107 070c 	add.w	r7, r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <PutString>:
 * @param  pStr     Storage string.
 * @param  pSource  Source string.
 * @return  The size of the written
 */
signed int PutString(char *pStr, const char *pSource)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    signed int num = 0;
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]

    while (*pSource != 0) {
 800080c:	e00f      	b.n	800082e <PutString+0x32>

        *pStr++ = *pSource++;
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f103 0301 	add.w	r3, r3, #1
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	f103 0301 	add.w	r3, r3, #1
 8000824:	603b      	str	r3, [r7, #0]
        num++;
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	f103 0301 	add.w	r3, r3, #1
 800082c:	60fb      	str	r3, [r7, #12]
 */
signed int PutString(char *pStr, const char *pSource)
{
    signed int num = 0;

    while (*pSource != 0) {
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d1eb      	bne.n	800080e <PutString+0x12>

        *pStr++ = *pSource++;
        num++;
    }

    return num;
 8000836:	68fb      	ldr	r3, [r7, #12]
}
 8000838:	4618      	mov	r0, r3
 800083a:	f107 0714 	add.w	r7, r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <PutUnsignedInt>:
signed int PutUnsignedInt(
    char *pStr,
    char fill,
    signed int width,
    unsigned int value)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	460b      	mov	r3, r1
 8000852:	72fb      	strb	r3, [r7, #11]
    signed int num = 0;
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

    /* Take current digit into account when calculating width */
    width--;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000860:	607b      	str	r3, [r7, #4]

    /* Recursively write upper digits */
    if ((value / 10) > 0) {
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	2b09      	cmp	r3, #9
 8000866:	d925      	bls.n	80008b4 <PutUnsignedInt+0x70>

        num = PutUnsignedInt(pStr, fill, width, value / 10);
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800086e:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8000872:	fba3 1302 	umull	r1, r3, r3, r2
 8000876:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800087a:	7afa      	ldrb	r2, [r7, #11]
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	4611      	mov	r1, r2
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	f7ff ffdf 	bl	8000844 <PutUnsignedInt>
 8000886:	6178      	str	r0, [r7, #20]
        pStr += num;
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	18d3      	adds	r3, r2, r3
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e013      	b.n	80008ba <PutUnsignedInt+0x76>
    /* Write filler characters */
    else {

        while (width > 0) {

            PutChar(pStr, fill);
 8000892:	7afb      	ldrb	r3, [r7, #11]
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	4619      	mov	r1, r3
 8000898:	f7ff ff9e 	bl	80007d8 <PutChar>
            pStr++;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f103 0301 	add.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
            num++;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	f103 0301 	add.w	r3, r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
            width--;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80008b2:	607b      	str	r3, [r7, #4]
    }

    /* Write filler characters */
    else {

        while (width > 0) {
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	dceb      	bgt.n	8000892 <PutUnsignedInt+0x4e>
            width--;
        }
    }

    /* Write lower digit */
    num += PutChar(pStr, (value % 10) + '0');
 80008ba:	6839      	ldr	r1, [r7, #0]
 80008bc:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80008c0:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80008c4:	fba3 2301 	umull	r2, r3, r3, r1
 80008c8:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80008cc:	4613      	mov	r3, r2
 80008ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80008d2:	189b      	adds	r3, r3, r2
 80008d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008d8:	1aca      	subs	r2, r1, r3
 80008da:	b2d3      	uxtb	r3, r2
 80008dc:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	68f8      	ldr	r0, [r7, #12]
 80008e4:	4619      	mov	r1, r3
 80008e6:	f7ff ff77 	bl	80007d8 <PutChar>
 80008ea:	4603      	mov	r3, r0
 80008ec:	697a      	ldr	r2, [r7, #20]
 80008ee:	18d3      	adds	r3, r2, r3
 80008f0:	617b      	str	r3, [r7, #20]

    return num;
 80008f2:	697b      	ldr	r3, [r7, #20]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	f107 0718 	add.w	r7, r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop

08000900 <PutSignedInt>:
signed int PutSignedInt(
    char *pStr,
    char fill,
    signed int width,
    signed int value)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	607a      	str	r2, [r7, #4]
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	460b      	mov	r3, r1
 800090e:	72fb      	strb	r3, [r7, #11]
    signed int num = 0;
 8000910:	f04f 0300 	mov.w	r3, #0
 8000914:	617b      	str	r3, [r7, #20]
    unsigned int absolute;

    /* Compute absolute value */
    if (value < 0) {
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	da04      	bge.n	8000926 <PutSignedInt+0x26>

        absolute = -value;
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	f1c3 0300 	rsb	r3, r3, #0
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	e001      	b.n	800092a <PutSignedInt+0x2a>
    }
    else {

        absolute = value;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	613b      	str	r3, [r7, #16]
    }

    /* Take current digit into account when calculating width */
    width--;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000930:	607b      	str	r3, [r7, #4]

    /* Recursively write upper digits */
    if ((absolute / 10) > 0) {
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	2b09      	cmp	r3, #9
 8000936:	d92a      	bls.n	800098e <PutSignedInt+0x8e>

        if (value < 0) {
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	2b00      	cmp	r3, #0
 800093c:	da12      	bge.n	8000964 <PutSignedInt+0x64>

            num = PutSignedInt(pStr, fill, width, -(absolute / 10));
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 8000944:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 8000948:	fba3 1302 	umull	r1, r3, r3, r2
 800094c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000950:	f1c3 0300 	rsb	r3, r3, #0
 8000954:	7afa      	ldrb	r2, [r7, #11]
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	4611      	mov	r1, r2
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	f7ff ffd0 	bl	8000900 <PutSignedInt>
 8000960:	6178      	str	r0, [r7, #20]
 8000962:	e00f      	b.n	8000984 <PutSignedInt+0x84>
        }
        else {

            num = PutSignedInt(pStr, fill, width, absolute / 10);
 8000964:	693a      	ldr	r2, [r7, #16]
 8000966:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800096a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800096e:	fba3 1302 	umull	r1, r3, r3, r2
 8000972:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8000976:	7afa      	ldrb	r2, [r7, #11]
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	4611      	mov	r1, r2
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	f7ff ffbf 	bl	8000900 <PutSignedInt>
 8000982:	6178      	str	r0, [r7, #20]
        }
        pStr += num;
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	e02b      	b.n	80009e6 <PutSignedInt+0xe6>
    }
    else {

        /* Reserve space for sign */
        if (value < 0) {
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	da15      	bge.n	80009c0 <PutSignedInt+0xc0>

            width--;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f103 33ff 	add.w	r3, r3, #4294967295
 800099a:	607b      	str	r3, [r7, #4]
        }

        /* Write filler characters */
        while (width > 0) {
 800099c:	e010      	b.n	80009c0 <PutSignedInt+0xc0>

            PutChar(pStr, fill);
 800099e:	7afb      	ldrb	r3, [r7, #11]
 80009a0:	68f8      	ldr	r0, [r7, #12]
 80009a2:	4619      	mov	r1, r3
 80009a4:	f7ff ff18 	bl	80007d8 <PutChar>
            pStr++;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f103 0301 	add.w	r3, r3, #1
 80009ae:	60fb      	str	r3, [r7, #12]
            num++;
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f103 0301 	add.w	r3, r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
            width--;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80009be:	607b      	str	r3, [r7, #4]

            width--;
        }

        /* Write filler characters */
        while (width > 0) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	dceb      	bgt.n	800099e <PutSignedInt+0x9e>
            num++;
            width--;
        }

        /* Write sign */
        if (value < 0) {
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	da0c      	bge.n	80009e6 <PutSignedInt+0xe6>

            num += PutChar(pStr, '-');
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f04f 012d 	mov.w	r1, #45	; 0x2d
 80009d2:	f7ff ff01 	bl	80007d8 <PutChar>
 80009d6:	4603      	mov	r3, r0
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	18d3      	adds	r3, r2, r3
 80009dc:	617b      	str	r3, [r7, #20]
            pStr++;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f103 0301 	add.w	r3, r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
        }
    }

    /* Write lower digit */
    num += PutChar(pStr, (absolute % 10) + '0');
 80009e6:	6939      	ldr	r1, [r7, #16]
 80009e8:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 80009ec:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 80009f0:	fba3 2301 	umull	r2, r3, r3, r1
 80009f4:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80009f8:	4613      	mov	r3, r2
 80009fa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	1aca      	subs	r2, r1, r3
 8000a06:	b2d3      	uxtb	r3, r2
 8000a08:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	4619      	mov	r1, r3
 8000a12:	f7ff fee1 	bl	80007d8 <PutChar>
 8000a16:	4603      	mov	r3, r0
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	18d3      	adds	r3, r2, r3
 8000a1c:	617b      	str	r3, [r7, #20]

    return num;
 8000a1e:	697b      	ldr	r3, [r7, #20]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	f107 0718 	add.w	r7, r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop

08000a2c <PutHexa>:
    char *pStr,
    char fill,
    signed int width,
    unsigned char maj,
    unsigned int value)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b088      	sub	sp, #32
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	607a      	str	r2, [r7, #4]
 8000a36:	460a      	mov	r2, r1
 8000a38:	72fa      	strb	r2, [r7, #11]
 8000a3a:	72bb      	strb	r3, [r7, #10]
    signed int num = 0;
 8000a3c:	f04f 0300 	mov.w	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]

    /* Decrement width */
    width--;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f103 33ff 	add.w	r3, r3, #4294967295
 8000a48:	607b      	str	r3, [r7, #4]

    /* Recursively output upper digits */
    if ((value >> 4) > 0) {
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d024      	beq.n	8000a9e <PutHexa+0x72>

        num += PutHexa(pStr, fill, width, maj, value >> 4);
 8000a54:	6a3b      	ldr	r3, [r7, #32]
 8000a56:	ea4f 1113 	mov.w	r1, r3, lsr #4
 8000a5a:	7afa      	ldrb	r2, [r7, #11]
 8000a5c:	7abb      	ldrb	r3, [r7, #10]
 8000a5e:	9100      	str	r1, [sp, #0]
 8000a60:	68f8      	ldr	r0, [r7, #12]
 8000a62:	4611      	mov	r1, r2
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	f7ff ffe1 	bl	8000a2c <PutHexa>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	18d3      	adds	r3, r2, r3
 8000a70:	617b      	str	r3, [r7, #20]
        pStr += num;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	18d3      	adds	r3, r2, r3
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	e013      	b.n	8000aa4 <PutHexa+0x78>
    /* Write filler chars */
    else {

        while (width > 0) {

            PutChar(pStr, fill);
 8000a7c:	7afb      	ldrb	r3, [r7, #11]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	4619      	mov	r1, r3
 8000a82:	f7ff fea9 	bl	80007d8 <PutChar>
            pStr++;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f103 0301 	add.w	r3, r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
            num++;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	f103 0301 	add.w	r3, r3, #1
 8000a94:	617b      	str	r3, [r7, #20]
            width--;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f103 33ff 	add.w	r3, r3, #4294967295
 8000a9c:	607b      	str	r3, [r7, #4]
        pStr += num;
    }
    /* Write filler chars */
    else {

        while (width > 0) {
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	dceb      	bgt.n	8000a7c <PutHexa+0x50>
            width--;
        }
    }

    /* Write current digit */
    if ((value & 0xF) < 10) {
 8000aa4:	6a3b      	ldr	r3, [r7, #32]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	2b09      	cmp	r3, #9
 8000aac:	d80c      	bhi.n	8000ac8 <PutHexa+0x9c>

        PutChar(pStr, (value & 0xF) + '0');
 8000aae:	6a3b      	ldr	r3, [r7, #32]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	f7ff fe89 	bl	80007d8 <PutChar>
 8000ac6:	e01b      	b.n	8000b00 <PutHexa+0xd4>
    }
    else if (maj) {
 8000ac8:	7abb      	ldrb	r3, [r7, #10]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00c      	beq.n	8000ae8 <PutHexa+0xbc>

        PutChar(pStr, (value & 0xF) - 10 + 'A');
 8000ace:	6a3b      	ldr	r3, [r7, #32]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	f103 0337 	add.w	r3, r3, #55	; 0x37
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f7ff fe79 	bl	80007d8 <PutChar>
 8000ae6:	e00b      	b.n	8000b00 <PutHexa+0xd4>
    }
    else {

        PutChar(pStr, (value & 0xF) - 10 + 'a');
 8000ae8:	6a3b      	ldr	r3, [r7, #32]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	f003 030f 	and.w	r3, r3, #15
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	f103 0357 	add.w	r3, r3, #87	; 0x57
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	4619      	mov	r1, r3
 8000afc:	f7ff fe6c 	bl	80007d8 <PutChar>
    }
    num++;
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	f103 0301 	add.w	r3, r3, #1
 8000b06:	617b      	str	r3, [r7, #20]

    return num;
 8000b08:	697b      	ldr	r3, [r7, #20]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f107 0718 	add.w	r7, r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <vsnprintf>:
 * @param ap      Argument list.
 *
 * @return  The number of characters written.
 */
signed int vsnprintf(char *pStr, size_t length, const char *pFormat, va_list ap)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af02      	add	r7, sp, #8
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	603b      	str	r3, [r7, #0]
    char          fill;
    unsigned char width;
    signed int    num = 0;
 8000b22:	f04f 0300 	mov.w	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
    signed int    size = 0;
 8000b28:	f04f 0300 	mov.w	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]

    /* Clear the string */
    if (pStr) {
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f000 811c 	beq.w	8000d6e <vsnprintf+0x25a>

        *pStr = 0;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f04f 0200 	mov.w	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
    }

    /* Phase string */
    while (*pFormat != 0 && size < length) {
 8000b3e:	e116      	b.n	8000d6e <vsnprintf+0x25a>

        /* Normal character */
        if (*pFormat != '%') {
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b25      	cmp	r3, #37	; 0x25
 8000b46:	d010      	beq.n	8000b6a <vsnprintf+0x56>

            *pStr++ = *pFormat++;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f103 0301 	add.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f103 0301 	add.w	r3, r3, #1
 8000b5e:	607b      	str	r3, [r7, #4]
            size++;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	f103 0301 	add.w	r3, r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
 8000b68:	e102      	b.n	8000d70 <vsnprintf+0x25c>
        }
        /* Escaped '%' */
        else if (*(pFormat+1) == '%') {
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	f103 0301 	add.w	r3, r3, #1
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b25      	cmp	r3, #37	; 0x25
 8000b74:	d110      	bne.n	8000b98 <vsnprintf+0x84>

            *pStr++ = '%';
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f04f 0225 	mov.w	r2, #37	; 0x25
 8000b7c:	701a      	strb	r2, [r3, #0]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f103 0301 	add.w	r3, r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
            pFormat += 2;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f103 0302 	add.w	r3, r3, #2
 8000b8c:	607b      	str	r3, [r7, #4]
            size++;
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	f103 0301 	add.w	r3, r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e0eb      	b.n	8000d70 <vsnprintf+0x25c>
        }
        /* Token delimiter */
        else {

            fill = ' ';
 8000b98:	f04f 0320 	mov.w	r3, #32
 8000b9c:	77fb      	strb	r3, [r7, #31]
            width = 0;
 8000b9e:	f04f 0300 	mov.w	r3, #0
 8000ba2:	77bb      	strb	r3, [r7, #30]
            pFormat++;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f103 0301 	add.w	r3, r3, #1
 8000baa:	607b      	str	r3, [r7, #4]

            /* Parse filler */
            if (*pFormat == '0') {
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b30      	cmp	r3, #48	; 0x30
 8000bb2:	d11b      	bne.n	8000bec <vsnprintf+0xd8>

                fill = '0';
 8000bb4:	f04f 0330 	mov.w	r3, #48	; 0x30
 8000bb8:	77fb      	strb	r3, [r7, #31]
                pFormat++;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f103 0301 	add.w	r3, r3, #1
 8000bc0:	607b      	str	r3, [r7, #4]
            }

            /* Parse width */
            while ((*pFormat >= '0') && (*pFormat <= '9')) {
 8000bc2:	e013      	b.n	8000bec <vsnprintf+0xd8>

                width = (width*10) + *pFormat-'0';
 8000bc4:	7fbb      	ldrb	r3, [r7, #30]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8000bcc:	18d3      	adds	r3, r2, r3
 8000bce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	18d3      	adds	r3, r2, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8000be0:	77bb      	strb	r3, [r7, #30]
                pFormat++;
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f103 0301 	add.w	r3, r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	e000      	b.n	8000bee <vsnprintf+0xda>
                fill = '0';
                pFormat++;
            }

            /* Parse width */
            while ((*pFormat >= '0') && (*pFormat <= '9')) {
 8000bec:	bf00      	nop
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2b2f      	cmp	r3, #47	; 0x2f
 8000bf4:	d903      	bls.n	8000bfe <vsnprintf+0xea>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b39      	cmp	r3, #57	; 0x39
 8000bfc:	d9e2      	bls.n	8000bc4 <vsnprintf+0xb0>
                width = (width*10) + *pFormat-'0';
                pFormat++;
            }

            /* Check if there is enough space */
            if (size + width > length) {
 8000bfe:	7fba      	ldrb	r2, [r7, #30]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d905      	bls.n	8000c18 <vsnprintf+0x104>

                width = length - size;
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	77bb      	strb	r3, [r7, #30]
            }

            /* Parse type */
            switch (*pFormat) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	f1a3 0358 	sub.w	r3, r3, #88	; 0x58
 8000c20:	2b20      	cmp	r3, #32
 8000c22:	f200 8094 	bhi.w	8000d4e <vsnprintf+0x23a>
 8000c26:	a201      	add	r2, pc, #4	; (adr r2, 8000c2c <vsnprintf+0x118>)
 8000c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c2c:	08000d01 	.word	0x08000d01
 8000c30:	08000d4f 	.word	0x08000d4f
 8000c34:	08000d4f 	.word	0x08000d4f
 8000c38:	08000d4f 	.word	0x08000d4f
 8000c3c:	08000d4f 	.word	0x08000d4f
 8000c40:	08000d4f 	.word	0x08000d4f
 8000c44:	08000d4f 	.word	0x08000d4f
 8000c48:	08000d4f 	.word	0x08000d4f
 8000c4c:	08000d4f 	.word	0x08000d4f
 8000c50:	08000d4f 	.word	0x08000d4f
 8000c54:	08000d4f 	.word	0x08000d4f
 8000c58:	08000d37 	.word	0x08000d37
 8000c5c:	08000cb1 	.word	0x08000cb1
 8000c60:	08000d4f 	.word	0x08000d4f
 8000c64:	08000d4f 	.word	0x08000d4f
 8000c68:	08000d4f 	.word	0x08000d4f
 8000c6c:	08000d4f 	.word	0x08000d4f
 8000c70:	08000cb1 	.word	0x08000cb1
 8000c74:	08000d4f 	.word	0x08000d4f
 8000c78:	08000d4f 	.word	0x08000d4f
 8000c7c:	08000d4f 	.word	0x08000d4f
 8000c80:	08000d4f 	.word	0x08000d4f
 8000c84:	08000d4f 	.word	0x08000d4f
 8000c88:	08000d4f 	.word	0x08000d4f
 8000c8c:	08000d4f 	.word	0x08000d4f
 8000c90:	08000d4f 	.word	0x08000d4f
 8000c94:	08000d4f 	.word	0x08000d4f
 8000c98:	08000d21 	.word	0x08000d21
 8000c9c:	08000d4f 	.word	0x08000d4f
 8000ca0:	08000cc9 	.word	0x08000cc9
 8000ca4:	08000d4f 	.word	0x08000d4f
 8000ca8:	08000d4f 	.word	0x08000d4f
 8000cac:	08000ce1 	.word	0x08000ce1
            case 'd':
            case 'i': num = PutSignedInt(pStr, fill, width, va_arg(ap, signed int)); break;
 8000cb0:	7fba      	ldrb	r2, [r7, #30]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	f103 0104 	add.w	r1, r3, #4
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	7ff9      	ldrb	r1, [r7, #31]
 8000cbe:	68f8      	ldr	r0, [r7, #12]
 8000cc0:	f7ff fe1e 	bl	8000900 <PutSignedInt>
 8000cc4:	61b8      	str	r0, [r7, #24]
 8000cc6:	e045      	b.n	8000d54 <vsnprintf+0x240>
            case 'u': num = PutUnsignedInt(pStr, fill, width, va_arg(ap, unsigned int)); break;
 8000cc8:	7fba      	ldrb	r2, [r7, #30]
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f103 0104 	add.w	r1, r3, #4
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	7ff9      	ldrb	r1, [r7, #31]
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff fdb4 	bl	8000844 <PutUnsignedInt>
 8000cdc:	61b8      	str	r0, [r7, #24]
 8000cde:	e039      	b.n	8000d54 <vsnprintf+0x240>
            case 'x': num = PutHexa(pStr, fill, width, 0, va_arg(ap, unsigned int)); break;
 8000ce0:	7fba      	ldrb	r2, [r7, #30]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f103 0104 	add.w	r1, r3, #4
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	6819      	ldr	r1, [r3, #0]
 8000cec:	7ffb      	ldrb	r3, [r7, #31]
 8000cee:	9100      	str	r1, [sp, #0]
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	f7ff fe98 	bl	8000a2c <PutHexa>
 8000cfc:	61b8      	str	r0, [r7, #24]
 8000cfe:	e029      	b.n	8000d54 <vsnprintf+0x240>
            case 'X': num = PutHexa(pStr, fill, width, 1, va_arg(ap, unsigned int)); break;
 8000d00:	7fba      	ldrb	r2, [r7, #30]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	f103 0104 	add.w	r1, r3, #4
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	6819      	ldr	r1, [r3, #0]
 8000d0c:	7ffb      	ldrb	r3, [r7, #31]
 8000d0e:	9100      	str	r1, [sp, #0]
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	4619      	mov	r1, r3
 8000d14:	f04f 0301 	mov.w	r3, #1
 8000d18:	f7ff fe88 	bl	8000a2c <PutHexa>
 8000d1c:	61b8      	str	r0, [r7, #24]
 8000d1e:	e019      	b.n	8000d54 <vsnprintf+0x240>
            case 's': num = PutString(pStr, va_arg(ap, char *)); break;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f103 0204 	add.w	r2, r3, #4
 8000d26:	603a      	str	r2, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	f7ff fd65 	bl	80007fc <PutString>
 8000d32:	61b8      	str	r0, [r7, #24]
 8000d34:	e00e      	b.n	8000d54 <vsnprintf+0x240>
            case 'c': num = PutChar(pStr, va_arg(ap, unsigned int)); break;
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f103 0204 	add.w	r2, r3, #4
 8000d3c:	603a      	str	r2, [r7, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	4619      	mov	r1, r3
 8000d46:	f7ff fd47 	bl	80007d8 <PutChar>
 8000d4a:	61b8      	str	r0, [r7, #24]
 8000d4c:	e002      	b.n	8000d54 <vsnprintf+0x240>
            default:
                return EOF;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e02c      	b.n	8000dae <vsnprintf+0x29a>
            }

            pFormat++;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f103 0301 	add.w	r3, r3, #1
 8000d5a:	607b      	str	r3, [r7, #4]
            pStr += num;
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	18d3      	adds	r3, r2, r3
 8000d62:	60fb      	str	r3, [r7, #12]
            size += num;
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	e000      	b.n	8000d70 <vsnprintf+0x25c>

        *pStr = 0;
    }

    /* Phase string */
    while (*pFormat != 0 && size < length) {
 8000d6e:	bf00      	nop
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d004      	beq.n	8000d82 <vsnprintf+0x26e>
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f4ff aedf 	bcc.w	8000b40 <vsnprintf+0x2c>
            size += num;
        }
    }

    /* NULL-terminated (final \0 is not counted) */
    if (size < length) {
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d204      	bcs.n	8000d94 <vsnprintf+0x280>

        *pStr = 0;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	e00b      	b.n	8000dac <vsnprintf+0x298>
    }
    else {

        *(--pStr) = 0;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f103 33ff 	add.w	r3, r3, #4294967295
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f04f 0200 	mov.w	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
        size--;
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	f103 33ff 	add.w	r3, r3, #4294967295
 8000daa:	617b      	str	r3, [r7, #20]
    }

    return size;
 8000dac:	697b      	ldr	r3, [r7, #20]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	f107 0720 	add.w	r7, r7, #32
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <snprintf>:
 * @param ...     Other arguments
 *
 * @return  The number of characters written.
 */
signed int snprintf(char *pString, size_t length, const char *pFormat, ...)
{
 8000db8:	b40c      	push	{r2, r3}
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	6039      	str	r1, [r7, #0]
    va_list    ap;
    signed int rc;

    va_start(ap, pFormat);
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	60bb      	str	r3, [r7, #8]
    rc = vsnprintf(pString, length, pFormat, ap);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	6839      	ldr	r1, [r7, #0]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f7ff fe9f 	bl	8000b14 <vsnprintf>
 8000dd6:	60f8      	str	r0, [r7, #12]
    va_end(ap);

    return rc;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f107 0710 	add.w	r7, r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de6:	b002      	add	sp, #8
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <vsprintf>:
 * @param ap       Argument list.
 *
 * @return  The number of characters written.
 */
signed int vsprintf(char *pString, const char *pFormat, va_list ap)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
    return vsnprintf(pString, MAX_STRING_SIZE, pFormat, ap);
 8000df8:	68f8      	ldr	r0, [r7, #12]
 8000dfa:	f04f 0164 	mov.w	r1, #100	; 0x64
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f7ff fe87 	bl	8000b14 <vsnprintf>
 8000e06:	4603      	mov	r3, r0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f107 0710 	add.w	r7, r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop

08000e14 <vfprintf>:
 * @param pStream  Output stream.
 * @param pFormat  Format string
 * @param ap       Argument list.
 */
signed int vfprintf(FILE *pStream, const char *pFormat, va_list ap)
{
 8000e14:	b5b0      	push	{r4, r5, r7, lr}
 8000e16:	b0a6      	sub	sp, #152	; 0x98
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
    char pStr[MAX_STRING_SIZE];
    char pError[] = "stdio.c: increase MAX_STRING_SIZE\n\r";
 8000e20:	f242 63c0 	movw	r3, #9920	; 0x26c0
 8000e24:	f6c0 0301 	movt	r3, #2049	; 0x801
 8000e28:	f107 0410 	add.w	r4, r7, #16
 8000e2c:	461d      	mov	r5, r3
 8000e2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e36:	682b      	ldr	r3, [r5, #0]
 8000e38:	6023      	str	r3, [r4, #0]

    /* Write formatted string in buffer */
    if (vsprintf(pStr, pFormat, ap) >= MAX_STRING_SIZE) {
 8000e3a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e3e:	4618      	mov	r0, r3
 8000e40:	68b9      	ldr	r1, [r7, #8]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	f7ff ffd2 	bl	8000dec <vsprintf>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b63      	cmp	r3, #99	; 0x63
 8000e4c:	dd0c      	ble.n	8000e68 <vfprintf+0x54>

        fputs(pError, stderr);
 8000e4e:	f240 0304 	movw	r3, #4
 8000e52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68db      	ldr	r3, [r3, #12]
 8000e5a:	f107 0210 	add.w	r2, r7, #16
 8000e5e:	4610      	mov	r0, r2
 8000e60:	4619      	mov	r1, r3
 8000e62:	f000 f87d 	bl	8000f60 <fputs>
        while (1); /* Increase MAX_STRING_SIZE */
 8000e66:	e7fe      	b.n	8000e66 <vfprintf+0x52>
    }

    /* Display string */
    return fputs(pStr, pStream);
 8000e68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	68f9      	ldr	r1, [r7, #12]
 8000e70:	f000 f876 	bl	8000f60 <fputs>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	f107 0798 	add.w	r7, r7, #152	; 0x98
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bdb0      	pop	{r4, r5, r7, pc}

08000e80 <vprintf>:
 *
 * @param pFormat  Format string.
 * @param ap  Argument list.
 */
signed int vprintf(const char *pFormat, va_list ap)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
    return vfprintf(stdout, pFormat, ap);
 8000e8a:	f240 0304 	movw	r3, #4
 8000e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	4618      	mov	r0, r3
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	f7ff ffba 	bl	8000e14 <vfprintf>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f107 0708 	add.w	r7, r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <fprintf>:
 *
 * @param pStream  Output stream.
 * @param pFormat  Format string.
 */
signed int fprintf(FILE *pStream, const char *pFormat, ...)
{
 8000eac:	b40e      	push	{r1, r2, r3}
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b085      	sub	sp, #20
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
    va_list ap;
    signed int result;

    /* Forward call to vfprintf */
    va_start(ap, pFormat);
 8000eb6:	f107 0320 	add.w	r3, r7, #32
 8000eba:	60bb      	str	r3, [r7, #8]
    result = vfprintf(pStream, pFormat, ap);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	69f9      	ldr	r1, [r7, #28]
 8000ec0:	68ba      	ldr	r2, [r7, #8]
 8000ec2:	f7ff ffa7 	bl	8000e14 <vfprintf>
 8000ec6:	60f8      	str	r0, [r7, #12]
    va_end(ap);

    return result;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f107 0714 	add.w	r7, r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ed6:	b003      	add	sp, #12
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <printf>:
 *         arguments.
 *
 * @param  pFormat  Format string.
 */
signed int printf(const char *pFormat, ...)
{
 8000edc:	b40f      	push	{r0, r1, r2, r3}
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
    va_list ap;
    signed int result;

    /* Forward call to vprintf */
    va_start(ap, pFormat);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	603b      	str	r3, [r7, #0]
    result = vprintf(pFormat, ap);
 8000eea:	6938      	ldr	r0, [r7, #16]
 8000eec:	6839      	ldr	r1, [r7, #0]
 8000eee:	f7ff ffc7 	bl	8000e80 <vprintf>
 8000ef2:	6078      	str	r0, [r7, #4]
    va_end(ap);

    return result;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f107 0708 	add.w	r7, r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f02:	b004      	add	sp, #16
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <sprintf>:
 *
 * @param pStr     torage string.
 * @param pFormat  Format string.
 */
signed int sprintf(char *pStr, const char *pFormat, ...)
{
 8000f08:	b40e      	push	{r1, r2, r3}
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b085      	sub	sp, #20
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
    va_list ap;
    signed int result;

    // Forward call to vsprintf
    va_start(ap, pFormat);
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	60bb      	str	r3, [r7, #8]
    result = vsprintf(pStr, pFormat, ap);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	69f9      	ldr	r1, [r7, #28]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	f7ff ff65 	bl	8000dec <vsprintf>
 8000f22:	60f8      	str	r0, [r7, #12]
    va_end(ap);

    return result;
 8000f24:	68fb      	ldr	r3, [r7, #12]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	f107 0714 	add.w	r7, r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f32:	b003      	add	sp, #12
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <puts>:
 * @brief  Outputs a string on stdout.
 *
 * @param pStr  String to output.
 */
signed int puts(const char *pStr)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
    return fputs(pStr, stdout);
 8000f40:	f240 0304 	movw	r3, #4
 8000f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f000 f806 	bl	8000f60 <fputs>
 8000f54:	4603      	mov	r3, r0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	f107 0708 	add.w	r7, r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <fputs>:
 *
 * @return  Number of characters written if successful, or -1 if the output
 *          stream is not stdout or stderr.
 */
signed int fputs(const char *pStr, FILE *pStream)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    signed int num = 0;
 8000f6a:	f04f 0300 	mov.w	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]

    while (*pStr != 0) {
 8000f70:	e014      	b.n	8000f9c <fputs+0x3c>

        if (fputc(*pStr, pStream) == -1) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	f000 fe53 	bl	8001c24 <fputc>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f84:	d102      	bne.n	8000f8c <fputs+0x2c>

            return -1;
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8a:	e00c      	b.n	8000fa6 <fputs+0x46>
        }
        num++;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f103 0301 	add.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
        pStr++;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f103 0301 	add.w	r3, r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 */
signed int fputs(const char *pStr, FILE *pStream)
{
    signed int num = 0;

    while (*pStr != 0) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1e6      	bne.n	8000f72 <fputs+0x12>
        }
        num++;
        pStr++;
    }

    return num;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f107 0710 	add.w	r7, r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fb2:	f000 b804 	b.w	8000fbe <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 8000fb8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fba:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fbc:	3104      	adds	r1, #4

08000fbe <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 8000fc2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fc4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc6:	f4ff aff6 	bcc.w	8000fb6 <CopyDataInit>
  ldr  r2, =_sbss
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 8000fcc:	f000 b803 	b.w	8000fd6 <LoopFillZerobss>

08000fd0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fd0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fd2:	f842 3b04 	str.w	r3, [r2], #4

08000fd6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <LoopFillZerobss+0x32>)
  cmp  r2, r3
 8000fd8:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fda:	f4ff aff9 	bcc.w	8000fd0 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8000fde:	480b      	ldr	r0, [pc, #44]	; (800100c <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 8000fe0:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8000fe2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 8000fe6:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe8:	f000 f82a 	bl	8001040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fec:	f7ff fb4a 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff0:	f000 f810 	bl	8001014 <main>
  bx  lr    
 8000ff4:	4770      	bx	lr
 8000ff6:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000ff8:	080151b0 	.word	0x080151b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001000:	2000025c 	.word	0x2000025c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8001004:	20000260 	.word	0x20000260
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001008:	2000028c 	.word	0x2000028c
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800100c:	e000ed88 	.word	0xe000ed88

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	f7ff bffe 	b.w	8001010 <ADC_IRQHandler>

08001014 <main>:
/**
  * @brief  Main program.
  * @param
  * @retval
  */
int main(void){
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	   To reconfigure the default setting of SystemInit() function, refer to
	   system_stm32f4xx.c file
	 */


	STM32f4_Discovery_LCD_Init();
 8001018:	f001 f9c2 	bl	80023a0 <STM32f4_Discovery_LCD_Init>
	LCD_RGB_Test();
 800101c:	f001 fb26 	bl	800266c <LCD_RGB_Test>

	STM32f4_Discovery_Debug_Init();
 8001020:	f000 fdc0 	bl	8001ba4 <STM32f4_Discovery_Debug_Init>
	/* Output a message on Hyperterminal using printf function */
	printf("\n\rUSART Printf Example: retarget the C library printf function to the USART\n\r");
 8001024:	f242 60e4 	movw	r0, #9956	; 0x26e4
 8001028:	f6c0 0001 	movt	r0, #2049	; 0x801
 800102c:	f7ff ff56 	bl	8000edc <printf>



	while (1)
	{
	printf("printf");
 8001030:	f242 7034 	movw	r0, #10036	; 0x2734
 8001034:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001038:	f7ff ff50 	bl	8000edc <printf>
	}
 800103c:	e7f8      	b.n	8001030 <main+0x1c>
 800103e:	bf00      	nop

08001040 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001044:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001048:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800104c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001050:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	f042 0201 	orr.w	r2, r2, #1
 800105a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800105c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800106a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800106e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001072:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001076:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001080:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001084:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001086:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800108a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800108e:	f243 0210 	movw	r2, #12304	; 0x3010
 8001092:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8001096:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001098:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800109c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80010a8:	6812      	ldr	r2, [r2, #0]
 80010aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80010ae:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80010be:	f000 f8c1 	bl	8001244 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80010c6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80010ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ce:	609a      	str	r2, [r3, #8]
#endif
}
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop

080010d4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	f04f 0300 	mov.w	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	f04f 0302 	mov.w	r3, #2
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	f04f 0302 	mov.w	r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80010f8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 030c 	and.w	r3, r3, #12
 8001106:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	2b04      	cmp	r3, #4
 800110c:	d00d      	beq.n	800112a <SystemCoreClockUpdate+0x56>
 800110e:	2b08      	cmp	r3, #8
 8001110:	d015      	beq.n	800113e <SystemCoreClockUpdate+0x6a>
 8001112:	2b00      	cmp	r3, #0
 8001114:	d169      	bne.n	80011ea <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001116:	f240 13e8 	movw	r3, #488	; 0x1e8
 800111a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800111e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8001122:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8001126:	601a      	str	r2, [r3, #0]
      break;
 8001128:	e069      	b.n	80011fe <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800112a:	f240 13e8 	movw	r3, #488	; 0x1e8
 800112e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001132:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8001136:	f2c0 027a 	movt	r2, #122	; 0x7a
 800113a:	601a      	str	r2, [r3, #0]
      break;
 800113c:	e05f      	b.n	80011fe <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800113e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001142:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8001150:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001152:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001156:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001160:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d014      	beq.n	8001192 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001168:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800116c:	f2c0 037a 	movt	r3, #122	; 0x7a
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	fbb3 f2f2 	udiv	r2, r3, r2
 8001176:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800117a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800117e:	6859      	ldr	r1, [r3, #4]
 8001180:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001184:	400b      	ands	r3, r1
 8001186:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800118a:	fb03 f302 	mul.w	r3, r3, r2
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e013      	b.n	80011ba <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001192:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001196:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	fbb3 f2f2 	udiv	r2, r3, r2
 80011a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011a8:	6859      	ldr	r1, [r3, #4]
 80011aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80011ae:	400b      	ands	r3, r1
 80011b0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80011b4:	fb03 f302 	mul.w	r3, r3, r2
 80011b8:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80011ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80011be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80011cc:	f103 0301 	add.w	r3, r3, #1
 80011d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80011d4:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	fbb2 f2f3 	udiv	r2, r2, r3
 80011de:	f240 13e8 	movw	r3, #488	; 0x1e8
 80011e2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011e6:	601a      	str	r2, [r3, #0]
      break;
 80011e8:	e009      	b.n	80011fe <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 80011ea:	f240 13e8 	movw	r3, #488	; 0x1e8
 80011ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011f2:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80011f6:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80011fa:	601a      	str	r2, [r3, #0]
      break;
 80011fc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80011fe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001202:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800120c:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8001210:	f240 13ec 	movw	r3, #492	; 0x1ec
 8001214:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001218:	5c9b      	ldrb	r3, [r3, r2]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800121e:	f240 13e8 	movw	r3, #488	; 0x1e8
 8001222:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	fa22 f203 	lsr.w	r2, r2, r3
 800122e:	f240 13e8 	movw	r3, #488	; 0x1e8
 8001232:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	f107 071c 	add.w	r7, r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop

08001244 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001256:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800125a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800125e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001262:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001266:	6812      	ldr	r2, [r2, #0]
 8001268:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800126c:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800126e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001272:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f103 0301 	add.w	r3, r3, #1
 8001284:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d103      	bne.n	8001294 <SetSysClock+0x50>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001292:	d1ec      	bne.n	800126e <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001294:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001298:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80012a6:	f04f 0301 	mov.w	r3, #1
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	e002      	b.n	80012b4 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	f040 8082 	bne.w	80013c0 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012bc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012c4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80012ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012d2:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80012d4:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80012d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80012dc:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80012e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012ea:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80012f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80012f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80012fc:	6892      	ldr	r2, [r2, #8]
 80012fe:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001300:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001304:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001308:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800130c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001310:	6892      	ldr	r2, [r2, #8]
 8001312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001316:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001318:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800131c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001324:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001328:	6892      	ldr	r2, [r2, #8]
 800132a:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800132e:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001330:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001338:	f245 4208 	movw	r2, #21512	; 0x5408
 800133c:	f2c0 7240 	movt	r2, #1856	; 0x740
 8001340:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001342:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001346:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800134a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800134e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001358:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800135a:	bf00      	nop
 800135c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001360:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f6      	beq.n	800135c <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800136e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001372:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001376:	f240 6205 	movw	r2, #1541	; 0x605
 800137a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800137c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001380:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8001384:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001388:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800138c:	6892      	ldr	r2, [r2, #8]
 800138e:	f022 0203 	bic.w	r2, r2, #3
 8001392:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001394:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001398:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800139c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013a4:	6892      	ldr	r2, [r2, #8]
 80013a6:	f042 0202 	orr.w	r2, r2, #2
 80013aa:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80013ac:	bf00      	nop
 80013ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 030c 	and.w	r3, r3, #12
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d1f6      	bne.n	80013ae <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 80013c0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013c4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013c8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013cc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013d0:	6892      	ldr	r2, [r2, #8]
 80013d2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80013d6:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 80013d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013e0:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80013e4:	f2c5 0200 	movt	r2, #20480	; 0x5000
 80013e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 80013ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80013f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80013f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80013f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001402:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8001404:	bf00      	nop
 8001406:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800140a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f6      	beq.n	8001406 <SetSysClock+0x1c2>
  {
  }
}
 8001418:	f107 070c 	add.w	r7, r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	bc80      	pop	{r7}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop

08001424 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 800142e:	79fa      	ldrb	r2, [r7, #7]
 8001430:	f245 1330 	movw	r3, #20784	; 0x5130
 8001434:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143c:	4618      	mov	r0, r3
 800143e:	f04f 0101 	mov.w	r1, #1
 8001442:	f00b fb1d 	bl	800ca80 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 8001446:	79fa      	ldrb	r2, [r7, #7]
 8001448:	f245 1328 	movw	r3, #20776	; 0x5128
 800144c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001450:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001454:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001456:	f04f 0301 	mov.w	r3, #1
 800145a:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001462:	f04f 0301 	mov.w	r3, #1
 8001466:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001468:	f04f 0302 	mov.w	r3, #2
 800146c:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 800146e:	79fa      	ldrb	r2, [r7, #7]
 8001470:	f240 231c 	movw	r3, #540	; 0x21c
 8001474:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147c:	4618      	mov	r0, r3
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	4619      	mov	r1, r3
 8001484:	f009 f8b6 	bl	800a5f4 <GPIO_Init>
}
 8001488:	f107 0710 	add.w	r7, r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	f240 231c 	movw	r3, #540	; 0x21c
 80014a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014a8:	79f9      	ldrb	r1, [r7, #7]
 80014aa:	f245 1328 	movw	r3, #20776	; 0x5128
 80014ae:	f6c0 0301 	movt	r3, #2049	; 0x801
 80014b2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014b6:	8313      	strh	r3, [r2, #24]
}
 80014b8:	f107 070c 	add.w	r7, r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop

080014c4 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 80014ce:	79fa      	ldrb	r2, [r7, #7]
 80014d0:	f240 231c 	movw	r3, #540	; 0x21c
 80014d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80014d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014dc:	79f9      	ldrb	r1, [r7, #7]
 80014de:	f245 1328 	movw	r3, #20776	; 0x5128
 80014e2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80014e6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80014ea:	8353      	strh	r3, [r2, #26]
}
 80014ec:	f107 070c 	add.w	r7, r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop

080014f8 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8001502:	79fa      	ldrb	r2, [r7, #7]
 8001504:	f240 231c 	movw	r3, #540	; 0x21c
 8001508:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800150c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001510:	79f9      	ldrb	r1, [r7, #7]
 8001512:	f240 231c 	movw	r3, #540	; 0x21c
 8001516:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800151a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800151e:	6959      	ldr	r1, [r3, #20]
 8001520:	79f8      	ldrb	r0, [r7, #7]
 8001522:	f245 1328 	movw	r3, #20776	; 0x5128
 8001526:	f6c0 0301 	movt	r3, #2049	; 0x801
 800152a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 800152e:	404b      	eors	r3, r1
 8001530:	6153      	str	r3, [r2, #20]
}
 8001532:	f107 070c 	add.w	r7, r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	71fa      	strb	r2, [r7, #7]
 8001548:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 800154a:	79fa      	ldrb	r2, [r7, #7]
 800154c:	f245 1344 	movw	r3, #20804	; 0x5144
 8001550:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001558:	4618      	mov	r0, r3
 800155a:	f04f 0101 	mov.w	r1, #1
 800155e:	f00b fa8f 	bl	800ca80 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8001562:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001566:	f04f 0101 	mov.w	r1, #1
 800156a:	f00b fb31 	bl	800cbd0 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 800157a:	79fa      	ldrb	r2, [r7, #7]
 800157c:	f245 1340 	movw	r3, #20800	; 0x5140
 8001580:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001584:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001588:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	f240 232c 	movw	r3, #556	; 0x22c
 8001590:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001598:	4618      	mov	r0, r3
 800159a:	f107 0318 	add.w	r3, r7, #24
 800159e:	4619      	mov	r1, r3
 80015a0:	f009 f828 	bl	800a5f4 <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d13a      	bne.n	8001620 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 80015aa:	79fa      	ldrb	r2, [r7, #7]
 80015ac:	f245 134c 	movw	r3, #20812	; 0x514c
 80015b0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80015b4:	5c9a      	ldrb	r2, [r3, r2]
 80015b6:	79f9      	ldrb	r1, [r7, #7]
 80015b8:	f245 1350 	movw	r3, #20816	; 0x5150
 80015bc:	f6c0 0301 	movt	r3, #2049	; 0x801
 80015c0:	5c5b      	ldrb	r3, [r3, r1]
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f00e fb93 	bl	800fcf0 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 80015ca:	79fa      	ldrb	r2, [r7, #7]
 80015cc:	f245 1348 	movw	r3, #20808	; 0x5148
 80015d0:	f6c0 0301 	movt	r3, #2049	; 0x801
 80015d4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015d8:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 80015e0:	f04f 0308 	mov.w	r3, #8
 80015e4:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 80015e6:	f04f 0301 	mov.w	r3, #1
 80015ea:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	4618      	mov	r0, r3
 80015f2:	f007 fb2f 	bl	8008c54 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	f245 1354 	movw	r3, #20820	; 0x5154
 80015fc:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001600:	5c9b      	ldrb	r3, [r3, r2]
 8001602:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8001604:	f04f 030f 	mov.w	r3, #15
 8001608:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800160a:	f04f 030f 	mov.w	r3, #15
 800160e:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001610:	f04f 0301 	mov.w	r3, #1
 8001614:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	4618      	mov	r0, r3
 800161c:	f002 fa62 	bl	8003ae4 <NVIC_Init>
  }
}
 8001620:	f107 0720 	add.w	r7, r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001632:	79fa      	ldrb	r2, [r7, #7]
 8001634:	f240 232c 	movw	r3, #556	; 0x22c
 8001638:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800163c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001640:	79f9      	ldrb	r1, [r7, #7]
 8001642:	f245 1340 	movw	r3, #20800	; 0x5140
 8001646:	f6c0 0301 	movt	r3, #2049	; 0x801
 800164a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	f009 f8b1 	bl	800a7b8 <GPIO_ReadInputDataBit>
 8001656:	4603      	mov	r3, r0
}
 8001658:	4618      	mov	r0, r3
 800165a:	f107 0708 	add.w	r7, r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop

08001664 <STM_EVAL_COMInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that
  *   contains the configuration information for the specified USART peripheral.
  * @retval None
  */
void STM_EVAL_COMInit(COM_TypeDef COM, USART_InitTypeDef* USART_InitStruct)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	6039      	str	r1, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIO clock */
  RCC_AHB1PeriphClockCmd(COM_TX_PORT_CLK[COM] | COM_RX_PORT_CLK[COM], ENABLE);
 8001670:	79fa      	ldrb	r2, [r7, #7]
 8001672:	f245 1360 	movw	r3, #20832	; 0x5160
 8001676:	f6c0 0301 	movt	r3, #2049	; 0x801
 800167a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800167e:	79f9      	ldrb	r1, [r7, #7]
 8001680:	f245 1368 	movw	r3, #20840	; 0x5168
 8001684:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001688:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800168c:	4313      	orrs	r3, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f04f 0101 	mov.w	r1, #1
 8001694:	f00b f9f4 	bl	800ca80 <RCC_AHB1PeriphClockCmd>

   /* Enable UART clock */
  RCC_APB2PeriphClockCmd(COM_USART_CLK[COM], ENABLE);
 8001698:	79fa      	ldrb	r2, [r7, #7]
 800169a:	f245 1358 	movw	r3, #20824	; 0x5158
 800169e:	f6c0 0301 	movt	r3, #2049	; 0x801
 80016a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f04f 0101 	mov.w	r1, #1
 80016ac:	f00b fa90 	bl	800cbd0 <RCC_APB2PeriphClockCmd>

    /* Enable UART clock */
  //RCC_APB1PeriphClockCmd(COM_USART_CLK[COM], ENABLE);

  /* Connect PXx to USARTx_Tx*/
  GPIO_PinAFConfig(COM_TX_PORT[COM], COM_TX_PIN_SOURCE[COM], COM_TX_AF[COM]);
 80016b0:	79fa      	ldrb	r2, [r7, #7]
 80016b2:	f240 2338 	movw	r3, #568	; 0x238
 80016b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016be:	79fa      	ldrb	r2, [r7, #7]
 80016c0:	f245 1378 	movw	r3, #20856	; 0x5178
 80016c4:	f6c0 0301 	movt	r3, #2049	; 0x801
 80016c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80016cc:	79f8      	ldrb	r0, [r7, #7]
 80016ce:	f245 1380 	movw	r3, #20864	; 0x5180
 80016d2:	f6c0 0301 	movt	r3, #2049	; 0x801
 80016d6:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	4608      	mov	r0, r1
 80016de:	4611      	mov	r1, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	f009 f915 	bl	800a910 <GPIO_PinAFConfig>

  /* Connect PXx to USARTx_Rx*/
  GPIO_PinAFConfig(COM_RX_PORT[COM], COM_RX_PIN_SOURCE[COM], COM_RX_AF[COM]);
 80016e6:	79fa      	ldrb	r2, [r7, #7]
 80016e8:	f240 2340 	movw	r3, #576	; 0x240
 80016ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80016f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	f245 137c 	movw	r3, #20860	; 0x517c
 80016fa:	f6c0 0301 	movt	r3, #2049	; 0x801
 80016fe:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001702:	79f8      	ldrb	r0, [r7, #7]
 8001704:	f245 1384 	movw	r3, #20868	; 0x5184
 8001708:	f6c0 0301 	movt	r3, #2049	; 0x801
 800170c:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4608      	mov	r0, r1
 8001714:	4611      	mov	r1, r2
 8001716:	461a      	mov	r2, r3
 8001718:	f009 f8fa 	bl	800a910 <GPIO_PinAFConfig>

  /* Configure USART Tx as alternate function  */
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001722:	f04f 0301 	mov.w	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001728:	f04f 0302 	mov.w	r3, #2
 800172c:	733b      	strb	r3, [r7, #12]

  GPIO_InitStructure.GPIO_Pin = COM_TX_PIN[COM];
 800172e:	79fa      	ldrb	r2, [r7, #7]
 8001730:	f245 1370 	movw	r3, #20848	; 0x5170
 8001734:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001738:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800173c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800173e:	f04f 0302 	mov.w	r3, #2
 8001742:	737b      	strb	r3, [r7, #13]
  GPIO_Init(COM_TX_PORT[COM], &GPIO_InitStructure);
 8001744:	79fa      	ldrb	r2, [r7, #7]
 8001746:	f240 2338 	movw	r3, #568	; 0x238
 800174a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800174e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001752:	4618      	mov	r0, r3
 8001754:	f107 0308 	add.w	r3, r7, #8
 8001758:	4619      	mov	r1, r3
 800175a:	f008 ff4b 	bl	800a5f4 <GPIO_Init>

  /* Configure USART Rx as alternate function  */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800175e:	f04f 0302 	mov.w	r3, #2
 8001762:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_Pin = COM_RX_PIN[COM];
 8001764:	79fa      	ldrb	r2, [r7, #7]
 8001766:	f245 1374 	movw	r3, #20852	; 0x5174
 800176a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800176e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001772:	60bb      	str	r3, [r7, #8]
  GPIO_Init(COM_RX_PORT[COM], &GPIO_InitStructure);
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	f240 2340 	movw	r3, #576	; 0x240
 800177a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800177e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001782:	4618      	mov	r0, r3
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	4619      	mov	r1, r3
 800178a:	f008 ff33 	bl	800a5f4 <GPIO_Init>

  /* USART configuration */
  USART_Init(COM_USART[COM], USART_InitStruct);
 800178e:	79fa      	ldrb	r2, [r7, #7]
 8001790:	f240 2330 	movw	r3, #560	; 0x230
 8001794:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179c:	4618      	mov	r0, r3
 800179e:	6839      	ldr	r1, [r7, #0]
 80017a0:	f010 fa76 	bl	8011c90 <USART_Init>

  /* Enable USART */
  USART_Cmd(COM_USART[COM], ENABLE);
 80017a4:	79fa      	ldrb	r2, [r7, #7]
 80017a6:	f240 2330 	movw	r3, #560	; 0x230
 80017aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80017ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f04f 0101 	mov.w	r1, #1
 80017b8:	f010 fba6 	bl	8011f08 <USART_Cmd>
}
 80017bc:	f107 0710 	add.w	r7, r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <SD_LowLevel_DeInit>:
  * @brief  DeInitializes the SDIO interface.
  * @param  None
  * @retval None
  */
void SD_LowLevel_DeInit(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;

  /*!< Disable SDIO Clock */
  SDIO_ClockCmd(DISABLE);
 80017ca:	f04f 0000 	mov.w	r0, #0
 80017ce:	f00d fbaf 	bl	800ef30 <SDIO_ClockCmd>

  /*!< Set Power State to OFF */
  SDIO_SetPowerState(SDIO_PowerState_OFF);
 80017d2:	f04f 0000 	mov.w	r0, #0
 80017d6:	f00d fbbb 	bl	800ef50 <SDIO_SetPowerState>

  /*!< DeInitializes the SDIO peripheral */
  SDIO_DeInit();
 80017da:	f00d fb43 	bl	800ee64 <SDIO_DeInit>

  /* Disable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
 80017de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017e2:	f04f 0100 	mov.w	r1, #0
 80017e6:	f00b f9f3 	bl	800cbd0 <RCC_APB2PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
 80017ea:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017ee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017f2:	f04f 0108 	mov.w	r1, #8
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f009 f889 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
 80017fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001802:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001806:	f04f 0109 	mov.w	r1, #9
 800180a:	f04f 0200 	mov.w	r2, #0
 800180e:	f009 f87f 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
 8001812:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001816:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800181a:	f04f 010a 	mov.w	r1, #10
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f009 f875 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
 8001826:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800182a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800182e:	f04f 010b 	mov.w	r1, #11
 8001832:	f04f 0200 	mov.w	r2, #0
 8001836:	f009 f86b 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
 800183a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800183e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001842:	f04f 010c 	mov.w	r1, #12
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f009 f861 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
 800184e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001852:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001856:	f04f 0102 	mov.w	r1, #2
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f009 f857 	bl	800a910 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8001862:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001866:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001874:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001878:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	f008 feb8 	bl	800a5f4 <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001884:	f04f 0304 	mov.w	r3, #4
 8001888:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 800188a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800188e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001892:	463b      	mov	r3, r7
 8001894:	4619      	mov	r1, r3
 8001896:	f008 fead 	bl	800a5f4 <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189e:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 80018a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018a4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80018a8:	463b      	mov	r3, r7
 80018aa:	4619      	mov	r1, r3
 80018ac:	f008 fea2 	bl	800a5f4 <GPIO_Init>
}
 80018b0:	f107 0708 	add.w	r7, r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SD_LowLevel_Init>:
  *         data transfer).
  * @param  None
  * @retval None
  */
void SD_LowLevel_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;

  /* GPIOC and GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
 80018be:	f04f 000e 	mov.w	r0, #14
 80018c2:	f04f 0101 	mov.w	r1, #1
 80018c6:	f00b f8db 	bl	800ca80 <RCC_AHB1PeriphClockCmd>

  GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
 80018ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80018d2:	f04f 0108 	mov.w	r1, #8
 80018d6:	f04f 020c 	mov.w	r2, #12
 80018da:	f009 f819 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
 80018de:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80018e6:	f04f 0109 	mov.w	r1, #9
 80018ea:	f04f 020c 	mov.w	r2, #12
 80018ee:	f009 f80f 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
 80018f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80018f6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80018fa:	f04f 010a 	mov.w	r1, #10
 80018fe:	f04f 020c 	mov.w	r2, #12
 8001902:	f009 f805 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
 8001906:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800190a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800190e:	f04f 010b 	mov.w	r1, #11
 8001912:	f04f 020c 	mov.w	r2, #12
 8001916:	f008 fffb 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
 800191a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800191e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001922:	f04f 010c 	mov.w	r1, #12
 8001926:	f04f 020c 	mov.w	r2, #12
 800192a:	f008 fff1 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
 800192e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001932:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001936:	f04f 0102 	mov.w	r1, #2
 800193a:	f04f 020c 	mov.w	r2, #12
 800193e:	f008 ffe7 	bl	800a910 <GPIO_PinAFConfig>

  /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
 8001942:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001946:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8001948:	f04f 0301 	mov.w	r3, #1
 800194c:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800194e:	f04f 0302 	mov.w	r3, #2
 8001952:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800195a:	f04f 0301 	mov.w	r3, #1
 800195e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001960:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001964:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	f008 fe42 	bl	800a5f4 <GPIO_Init>

  /* Configure PD.02 CMD line */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001970:	f04f 0304 	mov.w	r3, #4
 8001974:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001976:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800197a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800197e:	463b      	mov	r3, r7
 8001980:	4619      	mov	r1, r3
 8001982:	f008 fe37 	bl	800a5f4 <GPIO_Init>

  /* Configure PC.12 pin: CLK pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001992:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001996:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800199a:	463b      	mov	r3, r7
 800199c:	4619      	mov	r1, r3
 800199e:	f008 fe29 	bl	800a5f4 <GPIO_Init>

  /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
  GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
 80019a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80019a8:	f04f 0300 	mov.w	r3, #0
 80019ac:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80019ae:	f04f 0301 	mov.w	r3, #1
 80019b2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
 80019b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80019b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	f008 fe18 	bl	800a5f4 <GPIO_Init>

  /* Enable the SDIO APB2 Clock */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
 80019c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80019c8:	f04f 0101 	mov.w	r1, #1
 80019cc:	f00b f900 	bl	800cbd0 <RCC_APB2PeriphClockCmd>

  /* Enable the DMA2 Clock */
  RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
 80019d0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80019d4:	f04f 0101 	mov.w	r1, #1
 80019d8:	f00b f852 	bl	800ca80 <RCC_AHB1PeriphClockCmd>
}
 80019dc:	f107 0708 	add.w	r7, r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <SD_LowLevel_DMA_TxConfig>:
  * @param  BufferSRC: pointer to the source buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b092      	sub	sp, #72	; 0x48
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 80019ee:	f246 4058 	movw	r0, #25688	; 0x6458
 80019f2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019f6:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 80019fa:	f007 f801 	bl	8008a00 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 80019fe:	f246 4058 	movw	r0, #25688	; 0x6458
 8001a02:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a06:	f04f 0100 	mov.w	r1, #0
 8001a0a:	f006 fead 	bl	8008768 <DMA_Cmd>

  /* DMA2 Stream3  or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8001a0e:	f246 4058 	movw	r0, #25688	; 0x6458
 8001a12:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a16:	f006 fce7 	bl	80083e8 <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8001a1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a1e:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8001a20:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 8001a24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001a28:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001a2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8001a32:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8001a46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001a4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001a58:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8001a5e:	f04f 0304 	mov.w	r3, #4
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001a64:	f04f 0303 	mov.w	r3, #3
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8001a6a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8001a70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001a74:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8001a76:	f246 4058 	movw	r0, #25688	; 0x6458
 8001a7a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a7e:	f107 030c 	add.w	r3, r7, #12
 8001a82:	4619      	mov	r1, r3
 8001a84:	f006 fdd2 	bl	800862c <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8001a88:	f246 4058 	movw	r0, #25688	; 0x6458
 8001a8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a90:	f04f 0110 	mov.w	r1, #16
 8001a94:	f04f 0201 	mov.w	r2, #1
 8001a98:	f006 ffe4 	bl	8008a64 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8001a9c:	f246 4058 	movw	r0, #25688	; 0x6458
 8001aa0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001aa4:	f04f 0120 	mov.w	r1, #32
 8001aa8:	f006 fe94 	bl	80087d4 <DMA_FlowControllerConfig>

  /* DMA2 Stream3  or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8001aac:	f246 4058 	movw	r0, #25688	; 0x6458
 8001ab0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ab4:	f04f 0101 	mov.w	r1, #1
 8001ab8:	f006 fe56 	bl	8008768 <DMA_Cmd>

}
 8001abc:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <SD_LowLevel_DMA_RxConfig>:
  * @param  BufferDST: pointer to the destination buffer
  * @param  BufferSize: buffer size
  * @retval None
  */
void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b092      	sub	sp, #72	; 0x48
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  DMA_InitTypeDef SDDMA_InitStructure;

  DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
 8001ace:	f246 4058 	movw	r0, #25688	; 0x6458
 8001ad2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ad6:	f04f 51fa 	mov.w	r1, #524288000	; 0x1f400000
 8001ada:	f006 ff91 	bl	8008a00 <DMA_ClearFlag>

  /* DMA2 Stream3  or Stream6 disable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
 8001ade:	f246 4058 	movw	r0, #25688	; 0x6458
 8001ae2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ae6:	f04f 0100 	mov.w	r1, #0
 8001aea:	f006 fe3d 	bl	8008768 <DMA_Cmd>

  /* DMA2 Stream3 or Stream6 Config */
  DMA_DeInit(SD_SDIO_DMA_STREAM);
 8001aee:	f246 4058 	movw	r0, #25688	; 0x6458
 8001af2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001af6:	f006 fc77 	bl	80083e8 <DMA_DeInit>

  SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
 8001afa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001afe:	60fb      	str	r3, [r7, #12]
  SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
 8001b00:	f44f 5332 	mov.w	r3, #11392	; 0x2c80
 8001b04:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8001b08:	613b      	str	r3, [r7, #16]
  SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	617b      	str	r3, [r7, #20]
  SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
  SDDMA_InitStructure.DMA_BufferSize = 0;
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	61fb      	str	r3, [r7, #28]
  SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001b1a:	f04f 0300 	mov.w	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
  SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
  SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 8001b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 8001b2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	633b      	str	r3, [r7, #48]	; 0x30
  SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001b38:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
 8001b3e:	f04f 0304 	mov.w	r3, #4
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
  SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
 8001b44:	f04f 0303 	mov.w	r3, #3
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
  SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
 8001b4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001b4e:	643b      	str	r3, [r7, #64]	; 0x40
  SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
 8001b50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b54:	647b      	str	r3, [r7, #68]	; 0x44
  DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
 8001b56:	f246 4058 	movw	r0, #25688	; 0x6458
 8001b5a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	f006 fd62 	bl	800862c <DMA_Init>
  DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
 8001b68:	f246 4058 	movw	r0, #25688	; 0x6458
 8001b6c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b70:	f04f 0110 	mov.w	r1, #16
 8001b74:	f04f 0201 	mov.w	r2, #1
 8001b78:	f006 ff74 	bl	8008a64 <DMA_ITConfig>
  DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
 8001b7c:	f246 4058 	movw	r0, #25688	; 0x6458
 8001b80:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b84:	f04f 0120 	mov.w	r1, #32
 8001b88:	f006 fe24 	bl	80087d4 <DMA_FlowControllerConfig>

  /* DMA2 Stream3 or Stream6 enable */
  DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
 8001b8c:	f246 4058 	movw	r0, #25688	; 0x6458
 8001b90:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b94:	f04f 0101 	mov.w	r1, #1
 8001b98:	f006 fde6 	bl	8008768 <DMA_Cmd>
}
 8001b9c:	f107 0748 	add.w	r7, r7, #72	; 0x48
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <STM32f4_Discovery_Debug_Init>:
  * @brief  Display Init (LCD or/and USART)
  * @param  None
  * @retval None
  */
void STM32f4_Discovery_Debug_Init(void)
{ 
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
        - One Stop Bit
        - No parity
        - Hardware flow control disabled (RTS and CTS signals)
        - Receive and transmit enabled
  */
  USART_InitStructure.USART_BaudRate = 115200;
 8001baa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001bae:	603b      	str	r3, [r7, #0]
  USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	80bb      	strh	r3, [r7, #4]
  USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	80fb      	strh	r3, [r7, #6]
  USART_InitStructure.USART_Parity = USART_Parity_No;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	813b      	strh	r3, [r7, #8]
  USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	81bb      	strh	r3, [r7, #12]
  USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001bc8:	f04f 030c 	mov.w	r3, #12
 8001bcc:	817b      	strh	r3, [r7, #10]

  STM_EVAL_COMInit(COM1, &USART_InitStructure);
 8001bce:	f04f 0000 	mov.w	r0, #0
 8001bd2:	463b      	mov	r3, r7
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	f7ff fd45 	bl	8001664 <STM_EVAL_COMInit>
  printf("\n\r Debug Module Init \n\r");
 8001bda:	f242 703c 	movw	r0, #10044	; 0x273c
 8001bde:	f6c0 0001 	movt	r0, #2049	; 0x801
 8001be2:	f7ff f97b 	bl	8000edc <printf>
}
 8001be6:	f107 0710 	add.w	r7, r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop

08001bf0 <Get_Peek_Key>:
  * @param  None
  * @retval None
  */
/*  */
int Get_Peek_Key(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_RXNE) == RESET) 
 8001bf4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001bf8:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001bfc:	f04f 0120 	mov.w	r1, #32
 8001c00:	f010 fbfe 	bl	8012400 <USART_GetFlagStatus>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d102      	bne.n	8001c10 <Get_Peek_Key+0x20>
	{
		return EOF;
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	e006      	b.n	8001c1e <Get_Peek_Key+0x2e>
	}
	return (USART_ReceiveData(EVAL_COM1));
 8001c10:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001c14:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001c18:	f010 fa0a 	bl	8012030 <USART_ReceiveData>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop

08001c24 <fputc>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
  USART_SendData(EVAL_COM1, (uint8_t) ch);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001c36:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f010 f9e4 	bl	8012008 <USART_SendData>

  /* Loop until the end of transmission */
  while (USART_GetFlagStatus(EVAL_COM1, USART_FLAG_TC) == RESET)
 8001c40:	bf00      	nop
 8001c42:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001c46:	f2c4 0001 	movt	r0, #16385	; 0x4001
 8001c4a:	f04f 0140 	mov.w	r1, #64	; 0x40
 8001c4e:	f010 fbd7 	bl	8012400 <USART_GetFlagStatus>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0f4      	beq.n	8001c42 <fputc+0x1e>
  {}

  return ch;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f107 0708 	add.w	r7, r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <LCD_DeInit>:
  * @brief  LCD Default FSMC Init
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /*!< LCD Display Off */
  LCD_DisplayOff();
 8001c6a:	f000 fd9f 	bl	80027ac <LCD_DisplayOff>

  /* BANK 3 (of NOR/SRAM Bank 1~4) is disabled */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
 8001c6e:	f04f 0004 	mov.w	r0, #4
 8001c72:	f04f 0101 	mov.w	r1, #1
 8001c76:	f007 ff83 	bl	8009b80 <FSMC_NORSRAMCmd>
  
  /*!< LCD_SPI DeInit */
  FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM3);
 8001c7a:	f04f 0004 	mov.w	r0, #4
 8001c7e:	f007 fe21 	bl	80098c4 <FSMC_NORSRAMDeInit>
   
/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 8001c82:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001c86:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001c94:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001c98:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f008 fca8 	bl	800a5f4 <GPIO_Init>
 
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_MCO);
 8001ca4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ca8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001cac:	f04f 0100 	mov.w	r1, #0
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f008 fe2c 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_MCO);
 8001cb8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001cbc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001cc0:	f04f 0101 	mov.w	r1, #1
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f008 fe22 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_MCO);
 8001ccc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001cd0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001cd4:	f04f 0108 	mov.w	r1, #8
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f008 fe18 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_MCO);
 8001ce0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ce4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ce8:	f04f 0109 	mov.w	r1, #9
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	f008 fe0e 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_MCO);
 8001cf4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001cf8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001cfc:	f04f 010a 	mov.w	r1, #10
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	f008 fe04 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_MCO);
 8001d08:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001d0c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d10:	f04f 010e 	mov.w	r1, #14
 8001d14:	f04f 0200 	mov.w	r2, #0
 8001d18:	f008 fdfa 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_MCO);
 8001d1c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001d20:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d24:	f04f 010f 	mov.w	r1, #15
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f008 fdf0 	bl	800a910 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8001d30:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001d34:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d36:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d3a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d3e:	463b      	mov	r3, r7
 8001d40:	4619      	mov	r1, r3
 8001d42:	f008 fc57 	bl	800a5f4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_MCO);
 8001d46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d4a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d4e:	f04f 0107 	mov.w	r1, #7
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	f008 fddb 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_MCO);
 8001d5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d5e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d62:	f04f 0108 	mov.w	r1, #8
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f008 fdd1 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_MCO);
 8001d6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d72:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d76:	f04f 0109 	mov.w	r1, #9
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f008 fdc7 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_MCO);
 8001d82:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d86:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d8a:	f04f 010a 	mov.w	r1, #10
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f008 fdbd 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_MCO);
 8001d96:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d9a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001d9e:	f04f 010b 	mov.w	r1, #11
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	f008 fdb3 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_MCO);
 8001daa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001db2:	f04f 010c 	mov.w	r1, #12
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	f008 fda9 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_MCO);
 8001dbe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dc2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001dc6:	f04f 010d 	mov.w	r1, #13
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f008 fd9f 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_MCO);
 8001dd2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dd6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001dda:	f04f 010e 	mov.w	r1, #14
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	f008 fd95 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_MCO);
 8001de6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dea:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001dee:	f04f 010f 	mov.w	r1, #15
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	f008 fd8b 	bl	800a910 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 8001dfa:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001dfe:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
                                GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001e00:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e04:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e08:	463b      	mov	r3, r7
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f008 fbf2 	bl	800a5f4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_MCO);
 8001e10:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e14:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f008 fd76 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_MCO);
 8001e24:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e28:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e2c:	f04f 0101 	mov.w	r1, #1
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	f008 fd6c 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_MCO);
 8001e38:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e3c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e40:	f04f 0102 	mov.w	r1, #2
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f008 fd62 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_MCO);
 8001e4c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e50:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e54:	f04f 0103 	mov.w	r1, #3
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f008 fd58 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_MCO);
 8001e60:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e64:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e68:	f04f 0104 	mov.w	r1, #4
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	f008 fd4e 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_MCO);
 8001e74:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e78:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e7c:	f04f 0105 	mov.w	r1, #5
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	f008 fd44 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_MCO);
 8001e88:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001e8c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001e90:	f04f 010c 	mov.w	r1, #12
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	f008 fd3a 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_MCO);
 8001e9c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001ea0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ea4:	f04f 010d 	mov.w	r1, #13
 8001ea8:	f04f 0200 	mov.w	r2, #0
 8001eac:	f008 fd30 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_MCO);
 8001eb0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001eb4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001eb8:	f04f 010e 	mov.w	r1, #14
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	f008 fd26 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_MCO);
 8001ec4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001ec8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ecc:	f04f 010f 	mov.w	r1, #15
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	f008 fd1c 	bl	800a910 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 8001ed8:	f04f 033f 	mov.w	r3, #63	; 0x3f
 8001edc:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5;

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ede:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001ee2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ee6:	463b      	mov	r3, r7
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f008 fb83 	bl	800a5f4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_MCO);
 8001eee:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001ef2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	f008 fd07 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_MCO);
 8001f02:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001f06:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f0a:	f04f 0101 	mov.w	r1, #1
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f008 fcfd 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_MCO);
 8001f16:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001f1a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f1e:	f04f 0102 	mov.w	r1, #2
 8001f22:	f04f 0200 	mov.w	r2, #0
 8001f26:	f008 fcf3 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_MCO);
 8001f2a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001f2e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f32:	f04f 0103 	mov.w	r1, #3
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	f008 fce9 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_MCO);
 8001f3e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001f42:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f46:	f04f 0104 	mov.w	r1, #4
 8001f4a:	f04f 0200 	mov.w	r2, #0
 8001f4e:	f008 fcdf 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_MCO);
 8001f52:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001f56:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f5a:	f04f 0105 	mov.w	r1, #5
 8001f5e:	f04f 0200 	mov.w	r2, #0
 8001f62:	f008 fcd5 	bl	800a910 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
 8001f66:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001f6a:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f6c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f70:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f74:	463b      	mov	r3, r7
 8001f76:	4619      	mov	r1, r3
 8001f78:	f008 fb3c 	bl	800a5f4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_MCO);
 8001f7c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f80:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f84:	f04f 010b 	mov.w	r1, #11
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	f008 fcc0 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_MCO);
 8001f90:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001f94:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001f98:	f04f 010c 	mov.w	r1, #12
 8001f9c:	f04f 0200 	mov.w	r2, #0
 8001fa0:	f008 fcb6 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_MCO);
 8001fa4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fa8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fac:	f04f 010d 	mov.w	r1, #13
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f008 fcac 	bl	800a910 <GPIO_PinAFConfig>

  /* NOE and NWE configuration */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
 8001fb8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001fbc:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001fbe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fc2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f008 fb13 	bl	800a5f4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_MCO);
 8001fce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fd2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fd6:	f04f 0104 	mov.w	r1, #4
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	f008 fc97 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_MCO);
 8001fe2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001fe6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001fea:	f04f 0105 	mov.w	r1, #5
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f008 fc8d 	bl	800a910 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 8001ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ffa:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001ffc:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002000:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002004:	463b      	mov	r3, r7
 8002006:	4619      	mov	r1, r3
 8002008:	f008 faf4 	bl	800a5f4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 800200c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002010:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002014:	f04f 010c 	mov.w	r1, #12
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f008 fc78 	bl	800a910 <GPIO_PinAFConfig>

  /* NBL0, NBL1 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
 8002020:	f04f 0303 	mov.w	r3, #3
 8002024:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure); 
 8002026:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800202a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	f008 fadf 	bl	800a5f4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_MCO);
 8002036:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800203a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	f008 fc63 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_MCO);
 800204a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800204e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002052:	f04f 0101 	mov.w	r1, #1
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f008 fc59 	bl	800a910 <GPIO_PinAFConfig>
}
 800205e:	f107 0708 	add.w	r7, r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <LCD_CtrlLinesConfig>:
  * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOB, GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE |
 800206e:	f04f 003a 	mov.w	r0, #58	; 0x3a
 8002072:	f04f 0101 	mov.w	r1, #1
 8002076:	f00a fd03 	bl	800ca80 <RCC_AHB1PeriphClockCmd>
                         RCC_AHB1Periph_GPIOF, ENABLE);

/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 800207a:	f24c 7333 	movw	r3, #50995	; 0xc733
 800207e:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002080:	f04f 0302 	mov.w	r3, #2
 8002084:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002086:	f04f 0302 	mov.w	r3, #2
 800208a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800208c:	f04f 0300 	mov.w	r3, #0
 8002090:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002098:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800209c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80020a0:	463b      	mov	r3, r7
 80020a2:	4619      	mov	r1, r3
 80020a4:	f008 faa6 	bl	800a5f4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
 80020a8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80020ac:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	f04f 020c 	mov.w	r2, #12
 80020b8:	f008 fc2a 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
 80020bc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80020c0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80020c4:	f04f 0101 	mov.w	r1, #1
 80020c8:	f04f 020c 	mov.w	r2, #12
 80020cc:	f008 fc20 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
 80020d0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80020d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80020d8:	f04f 0104 	mov.w	r1, #4
 80020dc:	f04f 020c 	mov.w	r2, #12
 80020e0:	f008 fc16 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
 80020e4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80020e8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80020ec:	f04f 0105 	mov.w	r1, #5
 80020f0:	f04f 020c 	mov.w	r2, #12
 80020f4:	f008 fc0c 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
 80020f8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80020fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002100:	f04f 0108 	mov.w	r1, #8
 8002104:	f04f 020c 	mov.w	r2, #12
 8002108:	f008 fc02 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
 800210c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002110:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002114:	f04f 0109 	mov.w	r1, #9
 8002118:	f04f 020c 	mov.w	r2, #12
 800211c:	f008 fbf8 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 8002120:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002124:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002128:	f04f 010a 	mov.w	r1, #10
 800212c:	f04f 020c 	mov.w	r2, #12
 8002130:	f008 fbee 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
 8002134:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002138:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800213c:	f04f 010e 	mov.w	r1, #14
 8002140:	f04f 020c 	mov.w	r2, #12
 8002144:	f008 fbe4 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
 8002148:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800214c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002150:	f04f 010f 	mov.w	r1, #15
 8002154:	f04f 020c 	mov.w	r2, #12
 8002158:	f008 fbda 	bl	800a910 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 800215c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002160:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002162:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002166:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800216a:	463b      	mov	r3, r7
 800216c:	4619      	mov	r1, r3
 800216e:	f008 fa41 	bl	800a5f4 <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
 8002172:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002176:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800217a:	f04f 0107 	mov.w	r1, #7
 800217e:	f04f 020c 	mov.w	r2, #12
 8002182:	f008 fbc5 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
 8002186:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800218a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800218e:	f04f 0108 	mov.w	r1, #8
 8002192:	f04f 020c 	mov.w	r2, #12
 8002196:	f008 fbbb 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
 800219a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800219e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021a2:	f04f 0109 	mov.w	r1, #9
 80021a6:	f04f 020c 	mov.w	r2, #12
 80021aa:	f008 fbb1 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
 80021ae:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021b2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021b6:	f04f 010a 	mov.w	r1, #10
 80021ba:	f04f 020c 	mov.w	r2, #12
 80021be:	f008 fba7 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
 80021c2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021c6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021ca:	f04f 010b 	mov.w	r1, #11
 80021ce:	f04f 020c 	mov.w	r2, #12
 80021d2:	f008 fb9d 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
 80021d6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021de:	f04f 010c 	mov.w	r1, #12
 80021e2:	f04f 020c 	mov.w	r2, #12
 80021e6:	f008 fb93 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
 80021ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80021ee:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80021f2:	f04f 010d 	mov.w	r1, #13
 80021f6:	f04f 020c 	mov.w	r2, #12
 80021fa:	f008 fb89 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
 80021fe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002202:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002206:	f04f 010e 	mov.w	r1, #14
 800220a:	f04f 020c 	mov.w	r2, #12
 800220e:	f008 fb7f 	bl	800a910 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
 8002212:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002216:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800221a:	f04f 010f 	mov.w	r1, #15
 800221e:	f04f 020c 	mov.w	r2, #12
 8002222:	f008 fb75 	bl	800a910 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration LCD-DC */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8002226:	f04f 0308 	mov.w	r3, #8
 800222a:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure);  
 800222c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002230:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002234:	463b      	mov	r3, r7
 8002236:	4619      	mov	r1, r3
 8002238:	f008 f9dc 	bl	800a5f4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource3, GPIO_AF_FSMC);	   
 800223c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002240:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8002244:	f04f 0103 	mov.w	r1, #3
 8002248:	f04f 020c 	mov.w	r2, #12
 800224c:	f008 fb60 	bl	800a910 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
 8002250:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002254:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002256:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800225a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800225e:	463b      	mov	r3, r7
 8002260:	4619      	mov	r1, r3
 8002262:	f008 f9c7 	bl	800a5f4 <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 8002266:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800226a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800226e:	f04f 010a 	mov.w	r1, #10
 8002272:	f04f 020c 	mov.w	r2, #12
 8002276:	f008 fb4b 	bl	800a910 <GPIO_PinAFConfig>

  /* LCD RST configuration */
  GPIO_InitStructure.GPIO_Pin = LCD_RST_PIN; 
 800227a:	f04f 0308 	mov.w	r3, #8
 800227e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002280:	f04f 0301 	mov.w	r3, #1
 8002284:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(LCD_RST_PORT, &GPIO_InitStructure);
 8002298:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800229c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80022a0:	463b      	mov	r3, r7
 80022a2:	4619      	mov	r1, r3
 80022a4:	f008 f9a6 	bl	800a5f4 <GPIO_Init>

   /* LCD pwm configuration */
  GPIO_InitStructure.GPIO_Pin = LCD_PWM_PIN; 
 80022a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ac:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80022ae:	f04f 0301 	mov.w	r3, #1
 80022b2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 80022b4:	f04f 0301 	mov.w	r3, #1
 80022b8:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(LCD_PWM_PORT, &GPIO_InitStructure);
 80022c6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80022ca:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80022ce:	463b      	mov	r3, r7
 80022d0:	4619      	mov	r1, r3
 80022d2:	f008 f98f 	bl	800a5f4 <GPIO_Init>
  GPIO_SetBits(LCD_PWM_PORT, LCD_PWM_PIN);
 80022d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80022da:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80022de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e2:	f008 fac1 	bl	800a868 <GPIO_SetBits>
}
 80022e6:	f107 0708 	add.w	r7, r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop

080022f0 <LCD_FSMCConfig>:
  * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
  * @param  None
  * @retval None
  */
void LCD_FSMCConfig(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b096      	sub	sp, #88	; 0x58
 80022f4:	af00      	add	r7, sp, #0
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
   
  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 80022f6:	f04f 0001 	mov.w	r0, #1
 80022fa:	f04f 0101 	mov.w	r1, #1
 80022fe:	f00a fc13 	bl	800cb28 <RCC_AHB3PeriphClockCmd>
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 1 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 1;
 8002302:	f04f 0301 	mov.w	r3, #1
 8002306:	603b      	str	r3, [r7, #0]
  p.FSMC_AddressHoldTime = 0;
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	607b      	str	r3, [r7, #4]
  p.FSMC_DataSetupTime = 9;
 800230e:	f04f 0309 	mov.w	r3, #9
 8002312:	60bb      	str	r3, [r7, #8]
  p.FSMC_BusTurnAroundDuration = 0;
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  p.FSMC_CLKDivision = 0;
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	613b      	str	r3, [r7, #16]
  p.FSMC_DataLatency = 0;
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  p.FSMC_AccessMode = FSMC_AccessMode_A;
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
        - Data Width = 16bit
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8002338:	f04f 0300 	mov.w	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
 800233e:	f04f 0310 	mov.w	r3, #16
 8002342:	62bb      	str	r3, [r7, #40]	; 0x28
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	62fb      	str	r3, [r7, #44]	; 0x2c
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8002350:	f04f 0300 	mov.w	r3, #0
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	63bb      	str	r3, [r7, #56]	; 0x38
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8002362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002366:	643b      	str	r3, [r7, #64]	; 0x40
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	647b      	str	r3, [r7, #68]	; 0x44
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 800236e:	f04f 0300 	mov.w	r3, #0
 8002372:	64bb      	str	r3, [r7, #72]	; 0x48
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
 800237a:	463b      	mov	r3, r7
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
 800237e:	463b      	mov	r3, r7
 8002380:	657b      	str	r3, [r7, #84]	; 0x54

  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
 8002382:	f107 031c 	add.w	r3, r7, #28
 8002386:	4618      	mov	r0, r3
 8002388:	f007 faca 	bl	8009920 <FSMC_NORSRAMInit>

  /* Enable FSMC NOR/SRAM Bank1 */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
 800238c:	f04f 0000 	mov.w	r0, #0
 8002390:	f04f 0101 	mov.w	r1, #1
 8002394:	f007 fbf4 	bl	8009b80 <FSMC_NORSRAMCmd>
}
 8002398:	f107 0758 	add.w	r7, r7, #88	; 0x58
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <STM32f4_Discovery_LCD_Init>:
/**
  * @brief  LCD Init.
  * @retval None
  */
void STM32f4_Discovery_LCD_Init(void)
{ 
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0

  unsigned long ulCount;
	
  /* Configure the LCD Control pins */
  LCD_CtrlLinesConfig();
 80023a6:	f7ff fe5f 	bl	8002068 <LCD_CtrlLinesConfig>
	
  /* Configure the FSMC Parallel interface */
  LCD_FSMCConfig();
 80023aa:	f7ff ffa1 	bl	80022f0 <LCD_FSMCConfig>
	
  _delay_(5); 
 80023ae:	f04f 0005 	mov.w	r0, #5
 80023b2:	f001 fb69 	bl	8003a88 <delay>
	
  /* Reset LCD */
  GPIO_ResetBits(LCD_RST_PORT, LCD_RST_PIN);	
 80023b6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80023ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80023be:	f04f 0108 	mov.w	r1, #8
 80023c2:	f008 fa5f 	bl	800a884 <GPIO_ResetBits>
  _delay_(10);	
 80023c6:	f04f 000a 	mov.w	r0, #10
 80023ca:	f001 fb5d 	bl	8003a88 <delay>
  GPIO_SetBits(LCD_RST_PORT, LCD_RST_PIN);
 80023ce:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80023d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80023d6:	f04f 0108 	mov.w	r1, #8
 80023da:	f008 fa45 	bl	800a868 <GPIO_SetBits>

  /*
  SSD2119Init(void)
  */
  /* Enter sleep mode (if we are not already there).*/
  LCD_WriteReg(SSD2119_SLEEP_MODE_1_REG, 0x0001);
 80023de:	f04f 0010 	mov.w	r0, #16
 80023e2:	f04f 0101 	mov.w	r1, #1
 80023e6:	f000 f8e7 	bl	80025b8 <LCD_WriteReg>

  /* Set initial power parameters. */
  LCD_WriteReg(SSD2119_PWR_CTRL_5_REG, 0x00B2);
 80023ea:	f04f 001e 	mov.w	r0, #30
 80023ee:	f04f 01b2 	mov.w	r1, #178	; 0xb2
 80023f2:	f000 f8e1 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_VCOM_OTP_1_REG, 0x0006);
 80023f6:	f04f 0028 	mov.w	r0, #40	; 0x28
 80023fa:	f04f 0106 	mov.w	r1, #6
 80023fe:	f000 f8db 	bl	80025b8 <LCD_WriteReg>
  
  /* Start the oscillator.*/
  LCD_WriteReg(SSD2119_OSC_START_REG, 0x0001);
 8002402:	f04f 0000 	mov.w	r0, #0
 8002406:	f04f 0101 	mov.w	r1, #1
 800240a:	f000 f8d5 	bl	80025b8 <LCD_WriteReg>

  /* Set pixel format and basic display orientation (scanning direction).*/
  LCD_WriteReg(SSD2119_OUTPUT_CTRL_REG, 0x30EF);
 800240e:	f04f 0001 	mov.w	r0, #1
 8002412:	f243 01ef 	movw	r1, #12527	; 0x30ef
 8002416:	f000 f8cf 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_LCD_DRIVE_AC_CTRL_REG, 0x0600);
 800241a:	f04f 0002 	mov.w	r0, #2
 800241e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002422:	f000 f8c9 	bl	80025b8 <LCD_WriteReg>

  /* Exit sleep mode.*/
  LCD_WriteReg(SSD2119_SLEEP_MODE_1_REG, 0x0000);
 8002426:	f04f 0010 	mov.w	r0, #16
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	f000 f8c3 	bl	80025b8 <LCD_WriteReg>
  _delay_(5);
 8002432:	f04f 0005 	mov.w	r0, #5
 8002436:	f001 fb27 	bl	8003a88 <delay>
	  
  /* Configure pixel color format and MCU interface parameters.*/
  LCD_WriteReg(SSD2119_ENTRY_MODE_REG, ENTRY_MODE_DEFAULT);
 800243a:	f04f 0011 	mov.w	r0, #17
 800243e:	f646 0130 	movw	r1, #26672	; 0x6830
 8002442:	f000 f8b9 	bl	80025b8 <LCD_WriteReg>

  /* Set analog parameters */
  LCD_WriteReg(SSD2119_SLEEP_MODE_2_REG, 0x0999);
 8002446:	f04f 0012 	mov.w	r0, #18
 800244a:	f640 1199 	movw	r1, #2457	; 0x999
 800244e:	f000 f8b3 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_ANALOG_SET_REG, 0x3800);
 8002452:	f04f 0026 	mov.w	r0, #38	; 0x26
 8002456:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800245a:	f000 f8ad 	bl	80025b8 <LCD_WriteReg>

  /* Enable the display */
  LCD_WriteReg(SSD2119_DISPLAY_CTRL_REG, 0x0033);
 800245e:	f04f 0007 	mov.w	r0, #7
 8002462:	f04f 0133 	mov.w	r1, #51	; 0x33
 8002466:	f000 f8a7 	bl	80025b8 <LCD_WriteReg>

  /* Set VCIX2 voltage to 6.1V.*/
  LCD_WriteReg(SSD2119_PWR_CTRL_2_REG, 0x0005);
 800246a:	f04f 000c 	mov.w	r0, #12
 800246e:	f04f 0105 	mov.w	r1, #5
 8002472:	f000 f8a1 	bl	80025b8 <LCD_WriteReg>

  /* Configure gamma correction.*/
  LCD_WriteReg(SSD2119_GAMMA_CTRL_1_REG, 0x0000);
 8002476:	f04f 0030 	mov.w	r0, #48	; 0x30
 800247a:	f04f 0100 	mov.w	r1, #0
 800247e:	f000 f89b 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_2_REG, 0x0303);
 8002482:	f04f 0031 	mov.w	r0, #49	; 0x31
 8002486:	f240 3103 	movw	r1, #771	; 0x303
 800248a:	f000 f895 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_3_REG, 0x0407);
 800248e:	f04f 0032 	mov.w	r0, #50	; 0x32
 8002492:	f240 4107 	movw	r1, #1031	; 0x407
 8002496:	f000 f88f 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_4_REG, 0x0301);
 800249a:	f04f 0033 	mov.w	r0, #51	; 0x33
 800249e:	f240 3101 	movw	r1, #769	; 0x301
 80024a2:	f000 f889 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_5_REG, 0x0301);
 80024a6:	f04f 0034 	mov.w	r0, #52	; 0x34
 80024aa:	f240 3101 	movw	r1, #769	; 0x301
 80024ae:	f000 f883 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_6_REG, 0x0403);
 80024b2:	f04f 0035 	mov.w	r0, #53	; 0x35
 80024b6:	f240 4103 	movw	r1, #1027	; 0x403
 80024ba:	f000 f87d 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_7_REG, 0x0707);
 80024be:	f04f 0036 	mov.w	r0, #54	; 0x36
 80024c2:	f240 7107 	movw	r1, #1799	; 0x707
 80024c6:	f000 f877 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_8_REG, 0x0400);
 80024ca:	f04f 0037 	mov.w	r0, #55	; 0x37
 80024ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d2:	f000 f871 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_9_REG, 0x0a00);
 80024d6:	f04f 003a 	mov.w	r0, #58	; 0x3a
 80024da:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80024de:	f000 f86b 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_10_REG, 0x1000);
 80024e2:	f04f 003b 	mov.w	r0, #59	; 0x3b
 80024e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ea:	f000 f865 	bl	80025b8 <LCD_WriteReg>

  /* Configure Vlcd63 and VCOMl */
  LCD_WriteReg(SSD2119_PWR_CTRL_3_REG, 0x000A);
 80024ee:	f04f 000d 	mov.w	r0, #13
 80024f2:	f04f 010a 	mov.w	r1, #10
 80024f6:	f000 f85f 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_PWR_CTRL_4_REG, 0x2E00);
 80024fa:	f04f 000e 	mov.w	r0, #14
 80024fe:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 8002502:	f000 f859 	bl	80025b8 <LCD_WriteReg>

  /* Set the display size and ensure that the GRAM window is set to allow
     access to the full display buffer.*/
  LCD_WriteReg(SSD2119_V_RAM_POS_REG, (LCD_PIXEL_HEIGHT-1) << 8);
 8002506:	f04f 0044 	mov.w	r0, #68	; 0x44
 800250a:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 800250e:	f000 f853 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_H_RAM_START_REG, 0x0000);
 8002512:	f04f 0045 	mov.w	r0, #69	; 0x45
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	f000 f84d 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_H_RAM_END_REG, LCD_PIXEL_WIDTH-1);
 800251e:	f04f 0046 	mov.w	r0, #70	; 0x46
 8002522:	f240 113f 	movw	r1, #319	; 0x13f
 8002526:	f000 f847 	bl	80025b8 <LCD_WriteReg>

  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, 0x00);
 800252a:	f04f 004e 	mov.w	r0, #78	; 0x4e
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	f000 f841 	bl	80025b8 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, 0x00);
 8002536:	f04f 004f 	mov.w	r0, #79	; 0x4f
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	f000 f83b 	bl	80025b8 <LCD_WriteReg>
  
  /* clear the lcd  */
  LCD_WriteReg(SSD2119_RAM_DATA_REG, 0x0000);
 8002542:	f04f 0022 	mov.w	r0, #34	; 0x22
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	f000 f835 	bl	80025b8 <LCD_WriteReg>
  for(ulCount = 0; ulCount < (LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT); ulCount++)
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	e007      	b.n	8002566 <STM32f4_Discovery_LCD_Init+0x1c6>
  {
    LCD_WriteRAM(0x0000);
 8002556:	f04f 0000 	mov.w	r0, #0
 800255a:	f000 f86b 	bl	8002634 <LCD_WriteRAM>
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, 0x00);
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, 0x00);
  
  /* clear the lcd  */
  LCD_WriteReg(SSD2119_RAM_DATA_REG, 0x0000);
  for(ulCount = 0; ulCount < (LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT); ulCount++)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f103 0301 	add.w	r3, r3, #1
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	f642 33ff 	movw	r3, #11263	; 0x2bff
 800256c:	f2c0 0301 	movt	r3, #1
 8002570:	429a      	cmp	r2, r3
 8002572:	d9f0      	bls.n	8002556 <STM32f4_Discovery_LCD_Init+0x1b6>
  {
    LCD_WriteRAM(0x0000);
  }
  LCD_SetFont(&LCD_DEFAULT_FONT);
 8002574:	f240 10fc 	movw	r0, #508	; 0x1fc
 8002578:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800257c:	f000 f922 	bl	80027c4 <LCD_SetFont>
}
 8002580:	f107 0708 	add.w	r7, r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval None
  */
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	80fa      	strh	r2, [r7, #6]
 8002594:	80bb      	strh	r3, [r7, #4]
  /* Set the X address of the display cursor.*/
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, Xpos);
 8002596:	88fb      	ldrh	r3, [r7, #6]
 8002598:	f04f 004e 	mov.w	r0, #78	; 0x4e
 800259c:	4619      	mov	r1, r3
 800259e:	f000 f80b 	bl	80025b8 <LCD_WriteReg>
	
  /* Set the Y address of the display cursor.*/
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, Ypos);
 80025a2:	88bb      	ldrh	r3, [r7, #4]
 80025a4:	f04f 004f 	mov.w	r0, #79	; 0x4f
 80025a8:	4619      	mov	r1, r3
 80025aa:	f000 f805 	bl	80025b8 <LCD_WriteReg>
}
 80025ae:	f107 0708 	add.w	r7, r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop

080025b8 <LCD_WriteReg>:
  * @param  LCD_Reg: address of the selected register.
  * @param  LCD_RegValue: value to write to the selected register.
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	71fa      	strb	r2, [r7, #7]
 80025c4:	80bb      	strh	r3, [r7, #4]
  /* Write 16-bit Index, then Write Reg */
  LCD_CMD = LCD_Reg;
 80025c6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	801a      	strh	r2, [r3, #0]
  /* Write 16-bit Reg */
  LCD_Data = LCD_RegValue;
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80025dc:	88ba      	ldrh	r2, [r7, #4]
 80025de:	801a      	strh	r2, [r3, #0]
}
 80025e0:	f107 070c 	add.w	r7, r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop

080025ec <LCD_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCD_Reg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_CMD = LCD_Reg;
 80025f6:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	460b      	mov	r3, r1
 8002602:	801a      	strh	r2, [r3, #0]
  /* Read 16-bit Reg */
  return (LCD_Data);
 8002604:	f04f 0300 	mov.w	r3, #0
 8002608:	f2c6 0310 	movt	r3, #24592	; 0x6010
 800260c:	881b      	ldrh	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	f107 070c 	add.w	r7, r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <LCD_WriteRAM_Prepare>:
  * @brief  Prepare to write to the LCD RAM.
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
	LCD_CMD = SSD2119_RAM_DATA_REG;
 8002620:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8002624:	f04f 0322 	mov.w	r3, #34	; 0x22
 8002628:	461a      	mov	r2, r3
 800262a:	460b      	mov	r3, r1
 800262c:	801a      	strh	r2, [r3, #0]
}
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <LCD_WriteRAM>:
  * @brief  Writes to the LCD RAM.
  * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
  * @retval None
  */
void LCD_WriteRAM(uint16_t RGB_Code)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit GRAM Reg */
  LCD_Data = RGB_Code;
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8002646:	88fa      	ldrh	r2, [r7, #6]
 8002648:	801a      	strh	r2, [r3, #0]
}
 800264a:	f107 070c 	add.w	r7, r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr

08002654 <LCD_ReadRAM>:
  * @brief  Reads the LCD RAM.
  * @param  None
  * @retval LCD RAM Value.
  */
uint16_t LCD_ReadRAM(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* Write 16-bit Index (then Read Reg) */
//  LCD_CMD = SSD2119_RAM_DATA_REG; /* Select GRAM Reg */
  /* Read 16-bit Reg */
  return LCD_Data;
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	b29b      	uxth	r3, r3
}
 8002664:	4618      	mov	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <LCD_RGB_Test>:
/**
  * @brief  Test LCD Display
  * @retval None
  */
void LCD_RGB_Test(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t index;

  LCD_SetCursor(0x00, 0x00); 
 8002672:	f04f 0000 	mov.w	r0, #0
 8002676:	f04f 0100 	mov.w	r1, #0
 800267a:	f7ff ff85 	bl	8002588 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 800267e:	f7ff ffcd 	bl	800261c <LCD_WriteRAM_Prepare>

	/* R */
  for(index = 0; index < (LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	e00a      	b.n	80026a0 <LCD_RGB_Test+0x34>
  {
    LCD_Data = LCD_COLOR_RED;
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8002692:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002696:	801a      	strh	r2, [r3, #0]

  LCD_SetCursor(0x00, 0x00); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */

	/* R */
  for(index = 0; index < (LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f103 0301 	add.w	r3, r3, #1
 800269e:	607b      	str	r3, [r7, #4]
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	f246 33ff 	movw	r3, #25599	; 0x63ff
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d9ef      	bls.n	800268a <LCD_RGB_Test+0x1e>
  {
    LCD_Data = LCD_COLOR_RED;
  }
	  
  /* G */
  for(;index < 2*(LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 80026aa:	e00a      	b.n	80026c2 <LCD_RGB_Test+0x56>
  {
    LCD_Data = LCD_COLOR_GREEN;
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80026b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026b8:	801a      	strh	r2, [r3, #0]
  {
    LCD_Data = LCD_COLOR_RED;
  }
	  
  /* G */
  for(;index < 2*(LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f103 0301 	add.w	r3, r3, #1
 80026c0:	607b      	str	r3, [r7, #4]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d9ef      	bls.n	80026ac <LCD_RGB_Test+0x40>
  {
    LCD_Data = LCD_COLOR_GREEN;
  }
	  
	/* B */
  for(; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 80026cc:	e00a      	b.n	80026e4 <LCD_RGB_Test+0x78>
  {
    LCD_Data = LCD_COLOR_BLUE;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80026d6:	f04f 021f 	mov.w	r2, #31
 80026da:	801a      	strh	r2, [r3, #0]
  {
    LCD_Data = LCD_COLOR_GREEN;
  }
	  
	/* B */
  for(; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0301 	add.w	r3, r3, #1
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	f642 33ff 	movw	r3, #11263	; 0x2bff
 80026ea:	f2c0 0301 	movt	r3, #1
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d9ed      	bls.n	80026ce <LCD_RGB_Test+0x62>
  {
    LCD_Data = LCD_COLOR_BLUE;
  }
}
 80026f2:	f107 0708 	add.w	r7, r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop

080026fc <LCD_SetColors>:
  * @param  _TextColor: specifies the Text Color.
  * @param  _BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(__IO uint16_t _TextColor, __IO uint16_t _BackColor)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4602      	mov	r2, r0
 8002704:	460b      	mov	r3, r1
 8002706:	80fa      	strh	r2, [r7, #6]
 8002708:	80bb      	strh	r3, [r7, #4]
  TextColor = _TextColor; 
 800270a:	88fb      	ldrh	r3, [r7, #6]
 800270c:	b29a      	uxth	r2, r3
 800270e:	f240 2384 	movw	r3, #644	; 0x284
 8002712:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002716:	801a      	strh	r2, [r3, #0]
  BackColor = _BackColor;
 8002718:	88bb      	ldrh	r3, [r7, #4]
 800271a:	b29a      	uxth	r2, r3
 800271c:	f240 2348 	movw	r3, #584	; 0x248
 8002720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002724:	801a      	strh	r2, [r3, #0]
}
 8002726:	f107 070c 	add.w	r7, r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <LCD_GetColors>:
  * @param  _BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(__IO uint16_t *_TextColor, __IO uint16_t *_BackColor)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  *_TextColor = TextColor; *_BackColor = BackColor;
 800273a:	f240 2384 	movw	r3, #644	; 0x284
 800273e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	b29a      	uxth	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	801a      	strh	r2, [r3, #0]
 800274a:	f240 2348 	movw	r3, #584	; 0x248
 800274e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002752:	881b      	ldrh	r3, [r3, #0]
 8002754:	b29a      	uxth	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	801a      	strh	r2, [r3, #0]
}
 800275a:	f107 070c 	add.w	r7, r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	80fb      	strh	r3, [r7, #6]
  TextColor = Color;
 800276e:	88fb      	ldrh	r3, [r7, #6]
 8002770:	b29a      	uxth	r2, r3
 8002772:	f240 2384 	movw	r3, #644	; 0x284
 8002776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800277a:	801a      	strh	r2, [r3, #0]
}
 800277c:	f107 070c 	add.w	r7, r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop

08002788 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	4603      	mov	r3, r0
 8002790:	80fb      	strh	r3, [r7, #6]
  BackColor = Color;
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b29a      	uxth	r2, r3
 8002796:	f240 2348 	movw	r3, #584	; 0x248
 800279a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800279e:	801a      	strh	r2, [r3, #0]
}
 80027a0:	f107 070c 	add.w	r7, r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <LCD_DisplayOff>:

/**
LCD_DisplayOff
  */
void LCD_DisplayOff(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0

}
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop

080027b8 <LCD_DisplayOn>:

/**
LCD_DisplayOn
  */
void LCD_DisplayOn(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

}
 80027bc:	46bd      	mov	sp, r7
 80027be:	bc80      	pop	{r7}
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop

080027c4 <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80027cc:	f240 2380 	movw	r3, #640	; 0x280
 80027d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	601a      	str	r2, [r3, #0]
}
 80027d8:	f107 070c 	add.w	r7, r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop

080027e4 <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 80027e8:	f240 2380 	movw	r3, #640	; 0x280
 80027ec:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027f0:	681b      	ldr	r3, [r3, #0]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <LCD_ClearLine>:
  *   This parameter can be one of the following values:
  *     @arg Linex: where x can be 0..n
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	81fb      	strh	r3, [r7, #14]

  do {
       /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	4610      	mov	r0, r2
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 0220 	mov.w	r2, #32
 8002818:	f000 f906 	bl	8002a28 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 800281c:	f240 2380 	movw	r3, #640	; 0x280
 8002820:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	889a      	ldrh	r2, [r3, #4]
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	18d3      	adds	r3, r2, r3
 800282c:	81fb      	strh	r3, [r7, #14]
  } while (refcolumn < LCD_PIXEL_WIDTH);	
 800282e:	89fa      	ldrh	r2, [r7, #14]
 8002830:	f240 133f 	movw	r3, #319	; 0x13f
 8002834:	429a      	cmp	r2, r3
 8002836:	d9e9      	bls.n	800280c <LCD_ClearLine+0x10>
}
 8002838:	f107 0710 	add.w	r7, r7, #16
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(0x00, 0x00); 
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	f7ff fe96 	bl	8002588 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 800285c:	f7ff fede 	bl	800261c <LCD_WriteRAM_Prepare>
  for(index = 0; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e009      	b.n	800287c <LCD_Clear+0x3c>
  {
    LCD_Data = Color;
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8002870:	88fa      	ldrh	r2, [r7, #6]
 8002872:	801a      	strh	r2, [r3, #0]
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x00); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f103 0301 	add.w	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8002882:	f2c0 0301 	movt	r3, #1
 8002886:	429a      	cmp	r2, r3
 8002888:	d9ee      	bls.n	8002868 <LCD_Clear+0x28>
  {
    LCD_Data = Color;
  }  
}
 800288a:	f107 0710 	add.w	r7, r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop

08002894 <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	80fa      	strh	r2, [r7, #6]
 80028a0:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > LCD_PIXEL_WIDTH-1 || y < 0 || y > LCD_PIXEL_HEIGHT-1)
 80028a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	db18      	blt.n	80028dc <PutPixel+0x48>
 80028aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028ae:	f240 133f 	movw	r3, #319	; 0x13f
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dc12      	bgt.n	80028dc <PutPixel+0x48>
 80028b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	db0e      	blt.n	80028dc <PutPixel+0x48>
 80028be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028c2:	2bef      	cmp	r3, #239	; 0xef
 80028c4:	dc0a      	bgt.n	80028dc <PutPixel+0x48>
  {
    return;  
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	88bb      	ldrh	r3, [r7, #4]
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f04f 0201 	mov.w	r2, #1
 80028d2:	f04f 0300 	mov.w	r3, #0
 80028d6:	f000 f953 	bl	8002b80 <LCD_DrawLine>
 80028da:	e000      	b.n	80028de <PutPixel+0x4a>
  */
static void PutPixel(int16_t x, int16_t y)
{ 
  if(x < 0 || x > LCD_PIXEL_WIDTH-1 || y < 0 || y > LCD_PIXEL_HEIGHT-1)
  {
    return;  
 80028dc:	bf00      	nop
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
}
 80028de:	f107 0708 	add.w	r7, r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop

080028e8 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	460b      	mov	r3, r1
 80028f0:	603a      	str	r2, [r7, #0]
 80028f2:	4602      	mov	r2, r0
 80028f4:	80fa      	strh	r2, [r7, #6]
 80028f6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, i = 0;
 80028f8:	f04f 0300 	mov.w	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
  uint16_t  Xaddress = 0;
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	81fb      	strh	r3, [r7, #14]
  Xaddress = Xpos;
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	81fb      	strh	r3, [r7, #14]
  
  LCD_SetCursor(Ypos, Xaddress);
 800290e:	88ba      	ldrh	r2, [r7, #4]
 8002910:	89fb      	ldrh	r3, [r7, #14]
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7ff fe37 	bl	8002588 <LCD_SetCursor>
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800291a:	f04f 0300 	mov.w	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	e074      	b.n	8002a0c <LCD_DrawChar+0x124>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002922:	f7ff fe7b 	bl	800261c <LCD_WriteRAM_Prepare>
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 8002926:	f04f 0300 	mov.w	r3, #0
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	e056      	b.n	80029dc <LCD_DrawChar+0xf4>
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	18d3      	adds	r3, r2, r3
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	461a      	mov	r2, r3
 800293c:	f240 2380 	movw	r3, #640	; 0x280
 8002940:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	8899      	ldrh	r1, [r3, #4]
 8002948:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 800294c:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 8002950:	fba3 0301 	umull	r0, r3, r3, r1
 8002954:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8002958:	b29b      	uxth	r3, r3
 800295a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800295e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002962:	fa01 f103 	lsl.w	r1, r1, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	fa41 f303 	asr.w	r3, r1, r3
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <LCD_DrawChar+0x9a>
 8002972:	f240 2380 	movw	r3, #640	; 0x280
 8002976:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	889b      	ldrh	r3, [r3, #4]
 800297e:	2b0c      	cmp	r3, #12
 8002980:	d915      	bls.n	80029ae <LCD_DrawChar+0xc6>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	18d3      	adds	r3, r2, r3
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	fa42 f303 	asr.w	r3, r2, r3
 8002996:	f003 0301 	and.w	r3, r3, #1
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d111      	bne.n	80029c2 <LCD_DrawChar+0xda>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 800299e:	f240 2380 	movw	r3, #640	; 0x280
 80029a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	889b      	ldrh	r3, [r3, #4]
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d909      	bls.n	80029c2 <LCD_DrawChar+0xda>

      {
        LCD_WriteRAM(BackColor);
 80029ae:	f240 2348 	movw	r3, #584	; 0x248
 80029b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fe3a 	bl	8002634 <LCD_WriteRAM>
 80029c0:	e008      	b.n	80029d4 <LCD_DrawChar+0xec>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 80029c2:	f240 2384 	movw	r3, #644	; 0x284
 80029c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029ca:	881b      	ldrh	r3, [r3, #0]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7ff fe30 	bl	8002634 <LCD_WriteRAM>
  LCD_SetCursor(Ypos, Xaddress);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	f103 0301 	add.w	r3, r3, #1
 80029da:	613b      	str	r3, [r7, #16]
 80029dc:	f240 2380 	movw	r3, #640	; 0x280
 80029e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	889b      	ldrh	r3, [r3, #4]
 80029e8:	461a      	mov	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d89e      	bhi.n	800292e <LCD_DrawChar+0x46>
      else
      {
        LCD_WriteRAM(TextColor);
      } 
    }
    Xaddress++;
 80029f0:	89fb      	ldrh	r3, [r7, #14]
 80029f2:	f103 0301 	add.w	r3, r3, #1
 80029f6:	81fb      	strh	r3, [r7, #14]
    LCD_SetCursor(Ypos, Xaddress);
 80029f8:	88ba      	ldrh	r2, [r7, #4]
 80029fa:	89fb      	ldrh	r3, [r7, #14]
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7ff fdc2 	bl	8002588 <LCD_SetCursor>
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Ypos, Xaddress);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	f103 0301 	add.w	r3, r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	f240 2380 	movw	r3, #640	; 0x280
 8002a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	88db      	ldrh	r3, [r3, #6]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d880      	bhi.n	8002922 <LCD_DrawChar+0x3a>
      } 
    }
    Xaddress++;
    LCD_SetCursor(Ypos, Xaddress);
  }
}
 8002a20:	f107 0718 	add.w	r7, r7, #24
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4613      	mov	r3, r2
 8002a30:	4602      	mov	r2, r0
 8002a32:	80fa      	strh	r2, [r7, #6]
 8002a34:	460a      	mov	r2, r1
 8002a36:	80ba      	strh	r2, [r7, #4]
 8002a38:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	f1a3 0320 	sub.w	r3, r3, #32
 8002a40:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8002a42:	f240 2380 	movw	r3, #640	; 0x280
 8002a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	78f9      	ldrb	r1, [r7, #3]
 8002a50:	f240 2380 	movw	r3, #640	; 0x280
 8002a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	88db      	ldrh	r3, [r3, #6]
 8002a5c:	fb03 f301 	mul.w	r3, r3, r1
 8002a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002a64:	18d3      	adds	r3, r2, r3
 8002a66:	88f9      	ldrh	r1, [r7, #6]
 8002a68:	88ba      	ldrh	r2, [r7, #4]
 8002a6a:	4608      	mov	r0, r1
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f7ff ff3a 	bl	80028e8 <LCD_DrawChar>
}
 8002a74:	f107 0708 	add.w	r7, r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	81fb      	strh	r3, [r7, #14]

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 8002a8e:	e01a      	b.n	8002ac6 <LCD_DisplayStringLine+0x4a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	88f9      	ldrh	r1, [r7, #6]
 8002a96:	89fa      	ldrh	r2, [r7, #14]
 8002a98:	4608      	mov	r0, r1
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f7ff ffc3 	bl	8002a28 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8002aa2:	f240 2380 	movw	r3, #640	; 0x280
 8002aa6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	889a      	ldrh	r2, [r3, #4]
 8002aae:	89fb      	ldrh	r3, [r7, #14]
 8002ab0:	18d3      	adds	r3, r2, r3
 8002ab2:	81fb      	strh	r3, [r7, #14]
	if (refcolumn >= LCD_PIXEL_WIDTH) {
 8002ab4:	89fa      	ldrh	r2, [r7, #14]
 8002ab6:	f240 133f 	movw	r3, #319	; 0x13f
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d808      	bhi.n	8002ad0 <LCD_DisplayStringLine+0x54>
		break;
	}
    /* Point on the next character */
    ptr++;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f103 0301 	add.w	r3, r3, #1
 8002ac4:	603b      	str	r3, [r7, #0]
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
  uint16_t refcolumn = 0;

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1e0      	bne.n	8002a90 <LCD_DisplayStringLine+0x14>
 8002ace:	e000      	b.n	8002ad2 <LCD_DisplayStringLine+0x56>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
	if (refcolumn >= LCD_PIXEL_WIDTH) {
		break;
 8002ad0:	bf00      	nop
	}
    /* Point on the next character */
    ptr++;
  }
}
 8002ad2:	f107 0710 	add.w	r7, r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop

08002adc <LCD_SetDisplayWindow>:
  * @param  Height: display window width.
  * @param  Width: display window Height.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t width, uint16_t Height)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	80f8      	strh	r0, [r7, #6]
 8002ae4:	80b9      	strh	r1, [r7, #4]
 8002ae6:	807a      	strh	r2, [r7, #2]
 8002ae8:	803b      	strh	r3, [r7, #0]
  uint32_t value = 0;	
 8002aea:	f04f 0300 	mov.w	r3, #0
 8002aee:	60fb      	str	r3, [r7, #12]

  LCD_WriteReg(SSD2119_H_RAM_START_REG, Xpos);
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	f04f 0045 	mov.w	r0, #69	; 0x45
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7ff fd5e 	bl	80025b8 <LCD_WriteReg>
	
  if ((Xpos+width) >= LCD_PIXEL_WIDTH) {
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	887b      	ldrh	r3, [r7, #2]
 8002b00:	18d2      	adds	r2, r2, r3
 8002b02:	f240 133f 	movw	r3, #319	; 0x13f
 8002b06:	429a      	cmp	r2, r3
 8002b08:	dd06      	ble.n	8002b18 <LCD_SetDisplayWindow+0x3c>
    LCD_WriteReg(SSD2119_H_RAM_END_REG, LCD_PIXEL_WIDTH-1);	
 8002b0a:	f04f 0046 	mov.w	r0, #70	; 0x46
 8002b0e:	f240 113f 	movw	r1, #319	; 0x13f
 8002b12:	f7ff fd51 	bl	80025b8 <LCD_WriteReg>
 8002b16:	e008      	b.n	8002b2a <LCD_SetDisplayWindow+0x4e>
  } else {
    LCD_WriteReg(SSD2119_H_RAM_END_REG, Xpos+width);		
 8002b18:	88fa      	ldrh	r2, [r7, #6]
 8002b1a:	887b      	ldrh	r3, [r7, #2]
 8002b1c:	18d3      	adds	r3, r2, r3
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f04f 0046 	mov.w	r0, #70	; 0x46
 8002b24:	4619      	mov	r1, r3
 8002b26:	f7ff fd47 	bl	80025b8 <LCD_WriteReg>
  }
  
  if ((Ypos+Height) >= LCD_PIXEL_HEIGHT) {
 8002b2a:	88ba      	ldrh	r2, [r7, #4]
 8002b2c:	883b      	ldrh	r3, [r7, #0]
 8002b2e:	18d3      	adds	r3, r2, r3
 8002b30:	2bef      	cmp	r3, #239	; 0xef
 8002b32:	dd03      	ble.n	8002b3c <LCD_SetDisplayWindow+0x60>
    value = (LCD_PIXEL_HEIGHT-1) << 8;	
 8002b34:	f44f 436f 	mov.w	r3, #61184	; 0xef00
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	e005      	b.n	8002b48 <LCD_SetDisplayWindow+0x6c>
  } else {
    value = (Ypos+Height) << 8;	
 8002b3c:	88ba      	ldrh	r2, [r7, #4]
 8002b3e:	883b      	ldrh	r3, [r7, #0]
 8002b40:	18d3      	adds	r3, r2, r3
 8002b42:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8002b46:	60fb      	str	r3, [r7, #12]
  }
  value |= Xpos;
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  LCD_WriteReg(SSD2119_V_RAM_POS_REG, value);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f04f 0044 	mov.w	r0, #68	; 0x44
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7ff fd2d 	bl	80025b8 <LCD_WriteReg>
  LCD_SetCursor(Xpos, Ypos);
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	88bb      	ldrh	r3, [r7, #4]
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	f7ff fd0f 	bl	8002588 <LCD_SetCursor>
}
 8002b6a:	f107 0710 	add.w	r7, r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop

08002b74 <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
#if 0
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
  LCD_WriteReg(LCD_REG_3, 0x1018);    
#endif
}
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: Vertical or Horizontal.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	80f8      	strh	r0, [r7, #6]
 8002b88:	80b9      	strh	r1, [r7, #4]
 8002b8a:	807a      	strh	r2, [r7, #2]
 8002b8c:	707b      	strb	r3, [r7, #1]
  uint32_t i = 0;
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(Xpos, Ypos);
 8002b94:	88fa      	ldrh	r2, [r7, #6]
 8002b96:	88bb      	ldrh	r3, [r7, #4]
 8002b98:	4610      	mov	r0, r2
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	f7ff fcf4 	bl	8002588 <LCD_SetCursor>
  if(Direction == LCD_DIR_HORIZONTAL)
 8002ba0:	787b      	ldrb	r3, [r7, #1]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d117      	bne.n	8002bd6 <LCD_DrawLine+0x56>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002ba6:	f7ff fd39 	bl	800261c <LCD_WriteRAM_Prepare>
    for(i = 0; i < Length; i++)
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e00c      	b.n	8002bcc <LCD_DrawLine+0x4c>
    {
      LCD_WriteRAM(TextColor);
 8002bb2:	f240 2384 	movw	r3, #644	; 0x284
 8002bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff fd38 	bl	8002634 <LCD_WriteRAM>
  
  LCD_SetCursor(Xpos, Ypos);
  if(Direction == LCD_DIR_HORIZONTAL)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f103 0301 	add.w	r3, r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	887a      	ldrh	r2, [r7, #2]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d8ee      	bhi.n	8002bb2 <LCD_DrawLine+0x32>
 8002bd4:	e020      	b.n	8002c18 <LCD_DrawLine+0x98>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002bd6:	f04f 0300 	mov.w	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e018      	b.n	8002c10 <LCD_DrawLine+0x90>
    {
      LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002bde:	f7ff fd1d 	bl	800261c <LCD_WriteRAM_Prepare>
      LCD_WriteRAM(TextColor);
 8002be2:	f240 2384 	movw	r3, #644	; 0x284
 8002be6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fd20 	bl	8002634 <LCD_WriteRAM>
      Ypos++;
 8002bf4:	88bb      	ldrh	r3, [r7, #4]
 8002bf6:	f103 0301 	add.w	r3, r3, #1
 8002bfa:	80bb      	strh	r3, [r7, #4]
      LCD_SetCursor(Xpos, Ypos);
 8002bfc:	88fa      	ldrh	r2, [r7, #6]
 8002bfe:	88bb      	ldrh	r3, [r7, #4]
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7ff fcc0 	bl	8002588 <LCD_SetCursor>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f103 0301 	add.w	r3, r3, #1
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	887a      	ldrh	r2, [r7, #2]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d8e2      	bhi.n	8002bde <LCD_DrawLine+0x5e>
      LCD_WriteRAM(TextColor);
      Ypos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
 8002c18:	f107 0710 	add.w	r7, r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <LCD_DrawRect>:
  * @param  Height: display rectangle height.
  * @param  Width: display rectangle width.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	80f8      	strh	r0, [r7, #6]
 8002c28:	80b9      	strh	r1, [r7, #4]
 8002c2a:	70fa      	strb	r2, [r7, #3]
 8002c2c:	803b      	strh	r3, [r7, #0]
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_VERTICAL);
 8002c2e:	88f9      	ldrh	r1, [r7, #6]
 8002c30:	88ba      	ldrh	r2, [r7, #4]
 8002c32:	883b      	ldrh	r3, [r7, #0]
 8002c34:	4608      	mov	r0, r1
 8002c36:	4611      	mov	r1, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	f04f 0301 	mov.w	r3, #1
 8002c3e:	f7ff ff9f 	bl	8002b80 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Height-1), Ypos, Width, LCD_DIR_VERTICAL);
 8002c42:	78fb      	ldrb	r3, [r7, #3]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	18d3      	adds	r3, r2, r3
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002c50:	b299      	uxth	r1, r3
 8002c52:	88ba      	ldrh	r2, [r7, #4]
 8002c54:	883b      	ldrh	r3, [r7, #0]
 8002c56:	4608      	mov	r0, r1
 8002c58:	4611      	mov	r1, r2
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	f04f 0301 	mov.w	r3, #1
 8002c60:	f7ff ff8e 	bl	8002b80 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_HORIZONTAL);
 8002c64:	78fb      	ldrb	r3, [r7, #3]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	88f9      	ldrh	r1, [r7, #6]
 8002c6a:	88ba      	ldrh	r2, [r7, #4]
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	f7ff ff83 	bl	8002b80 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos + Width), Height, LCD_DIR_HORIZONTAL);
 8002c7a:	88ba      	ldrh	r2, [r7, #4]
 8002c7c:	883b      	ldrh	r3, [r7, #0]
 8002c7e:	18d3      	adds	r3, r2, r3
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	88f9      	ldrh	r1, [r7, #6]
 8002c88:	4608      	mov	r0, r1
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	f7ff ff75 	bl	8002b80 <LCD_DrawLine>
}
 8002c96:	f107 0708 	add.w	r7, r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop

08002ca0 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	4602      	mov	r2, r0
 8002caa:	80fa      	strh	r2, [r7, #6]
 8002cac:	460a      	mov	r2, r1
 8002cae:	80ba      	strh	r2, [r7, #4]
 8002cb0:	807b      	strh	r3, [r7, #2]
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002cb8:	f1c3 0303 	rsb	r3, r3, #3
 8002cbc:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8002cc8:	e0e5      	b.n	8002e96 <LCD_DrawCircle+0x1f6>
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	18d3      	adds	r3, r2, r3
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	b299      	uxth	r1, r3
 8002cd8:	88bb      	ldrh	r3, [r7, #4]
 8002cda:	18cb      	adds	r3, r1, r3
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f7ff fc51 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002ce6:	f7ff fc99 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002cea:	f240 2384 	movw	r3, #644	; 0x284
 8002cee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002cf2:	881b      	ldrh	r3, [r3, #0]
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fc9c 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	18d3      	adds	r3, r2, r3
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	88b9      	ldrh	r1, [r7, #4]
 8002d0c:	1acb      	subs	r3, r1, r3
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	f7ff fc38 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002d18:	f7ff fc80 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002d1c:	f240 2384 	movw	r3, #644	; 0x284
 8002d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fc83 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	88fa      	ldrh	r2, [r7, #6]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	b299      	uxth	r1, r3
 8002d3c:	88bb      	ldrh	r3, [r7, #4]
 8002d3e:	18cb      	adds	r3, r1, r3
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f7ff fc1f 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002d4a:	f7ff fc67 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002d4e:	f240 2384 	movw	r3, #644	; 0x284
 8002d52:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fc6a 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	88fa      	ldrh	r2, [r7, #6]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	88b9      	ldrh	r1, [r7, #4]
 8002d70:	1acb      	subs	r3, r1, r3
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	4610      	mov	r0, r2
 8002d76:	4619      	mov	r1, r3
 8002d78:	f7ff fc06 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002d7c:	f7ff fc4e 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002d80:	f240 2384 	movw	r3, #644	; 0x284
 8002d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002d88:	881b      	ldrh	r3, [r3, #0]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff fc51 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	18d3      	adds	r3, r2, r3
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	b299      	uxth	r1, r3
 8002da0:	88bb      	ldrh	r3, [r7, #4]
 8002da2:	18cb      	adds	r3, r1, r3
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f7ff fbed 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002dae:	f7ff fc35 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002db2:	f240 2384 	movw	r3, #644	; 0x284
 8002db6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fc38 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	88fb      	ldrh	r3, [r7, #6]
 8002dca:	18d3      	adds	r3, r2, r3
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	88b9      	ldrh	r1, [r7, #4]
 8002dd4:	1acb      	subs	r3, r1, r3
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f7ff fbd4 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002de0:	f7ff fc1c 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002de4:	f240 2384 	movw	r3, #644	; 0x284
 8002de8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dec:	881b      	ldrh	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff fc1f 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos + CurX);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	b299      	uxth	r1, r3
 8002e04:	88bb      	ldrh	r3, [r7, #4]
 8002e06:	18cb      	adds	r3, r1, r3
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7ff fbbb 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002e12:	f7ff fc03 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002e16:	f240 2384 	movw	r3, #644	; 0x284
 8002e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fc06 	bl	8002634 <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos - CurX);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	88fa      	ldrh	r2, [r7, #6]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	88b9      	ldrh	r1, [r7, #4]
 8002e38:	1acb      	subs	r3, r1, r3
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f7ff fba2 	bl	8002588 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002e44:	f7ff fbea 	bl	800261c <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002e48:	f240 2384 	movw	r3, #644	; 0x284
 8002e4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff fbed 	bl	8002634 <LCD_WriteRAM>
    if (D < 0)
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	da08      	bge.n	8002e72 <LCD_DrawCircle+0x1d2>
    { 
      D += (CurX << 2) + 6;
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	18d3      	adds	r3, r2, r3
 8002e6a:	f103 0306 	add.w	r3, r3, #6
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00d      	b.n	8002e8e <LCD_DrawCircle+0x1ee>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	18d3      	adds	r3, r2, r3
 8002e80:	f103 030a 	add.w	r3, r3, #10
 8002e84:	617b      	str	r3, [r7, #20]
      CurY--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f103 33ff 	add.w	r3, r3, #4294967295
 8002e8c:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	f103 0301 	add.w	r3, r3, #1
 8002e94:	613b      	str	r3, [r7, #16]
  
  D = 3 - (Radius << 1);
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f67f af15 	bls.w	8002cca <LCD_DrawCircle+0x2a>
      D += ((CurX - CurY) << 2) + 10;
      CurY--;
    }
    CurX++;
  }
}
 8002ea0:	f107 0718 	add.w	r7, r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, i = 0;
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	60bb      	str	r3, [r7, #8]
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
 8002ebc:	f04f 0000 	mov.w	r0, #0
 8002ec0:	f240 113f 	movw	r1, #319	; 0x13f
 8002ec4:	f7ff fb60 	bl	8002588 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002ec8:	f7ff fba8 	bl	800261c <LCD_WriteRAM_Prepare>
  for(index = 0; index < 2400; index++)
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	e02f      	b.n	8002f34 <LCD_DrawMonoPict+0x8c>
  {
    for(i = 0; i < 32; i++)
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	e024      	b.n	8002f26 <LCD_DrawMonoPict+0x7e>
    {
      if((Pict[index] & (1 << i)) == 0x00)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	18d3      	adds	r3, r2, r3
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f04f 0101 	mov.w	r1, #1
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <LCD_DrawMonoPict+0x64>
      {
        LCD_WriteRAM(BackColor);
 8002ef8:	f240 2348 	movw	r3, #584	; 0x248
 8002efc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f00:	881b      	ldrh	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff fb95 	bl	8002634 <LCD_WriteRAM>
 8002f0a:	e008      	b.n	8002f1e <LCD_DrawMonoPict+0x76>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8002f0c:	f240 2384 	movw	r3, #644	; 0x284
 8002f10:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff fb8b 	bl	8002634 <LCD_WriteRAM>
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f103 0301 	add.w	r3, r3, #1
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b1f      	cmp	r3, #31
 8002f2a:	d9d7      	bls.n	8002edc <LCD_DrawMonoPict+0x34>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f103 0301 	add.w	r3, r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	f640 135f 	movw	r3, #2399	; 0x95f
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d9ca      	bls.n	8002ed4 <LCD_DrawMonoPict+0x2c>
      {
        LCD_WriteRAM(TextColor);
      }
    }
  }
}
 8002f3e:	f107 0710 	add.w	r7, r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop

08002f48 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  LCD_WriteReg(LCD_REG_3, 0x1018);
#endif
}
 8002f50:	f107 070c 	add.w	r7, r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bc80      	pop	{r7}
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	80f8      	strh	r0, [r7, #6]
 8002f64:	80b9      	strh	r1, [r7, #4]
 8002f66:	807a      	strh	r2, [r7, #2]
 8002f68:	803b      	strh	r3, [r7, #0]
  LCD_SetTextColor(TextColor);
 8002f6a:	f240 2384 	movw	r3, #644	; 0x284
 8002f6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fbf4 	bl	8002764 <LCD_SetTextColor>

  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 8002f7c:	88f9      	ldrh	r1, [r7, #6]
 8002f7e:	88ba      	ldrh	r2, [r7, #4]
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	4608      	mov	r0, r1
 8002f84:	4611      	mov	r1, r2
 8002f86:	461a      	mov	r2, r3
 8002f88:	f04f 0300 	mov.w	r3, #0
 8002f8c:	f7ff fdf8 	bl	8002b80 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+Height), Width, LCD_DIR_HORIZONTAL);
 8002f90:	88ba      	ldrh	r2, [r7, #4]
 8002f92:	883b      	ldrh	r3, [r7, #0]
 8002f94:	18d3      	adds	r3, r2, r3
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	88f9      	ldrh	r1, [r7, #6]
 8002f9a:	887b      	ldrh	r3, [r7, #2]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	f7ff fdeb 	bl	8002b80 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 8002faa:	88f9      	ldrh	r1, [r7, #6]
 8002fac:	88ba      	ldrh	r2, [r7, #4]
 8002fae:	883b      	ldrh	r3, [r7, #0]
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	f04f 0301 	mov.w	r3, #1
 8002fba:	f7ff fde1 	bl	8002b80 <LCD_DrawLine>
  LCD_DrawLine((Xpos+Width-1), Ypos, Height, LCD_DIR_VERTICAL);
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	887b      	ldrh	r3, [r7, #2]
 8002fc2:	18d3      	adds	r3, r2, r3
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8002fca:	b299      	uxth	r1, r3
 8002fcc:	88ba      	ldrh	r2, [r7, #4]
 8002fce:	883b      	ldrh	r3, [r7, #0]
 8002fd0:	4608      	mov	r0, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	f04f 0301 	mov.w	r3, #1
 8002fda:	f7ff fdd1 	bl	8002b80 <LCD_DrawLine>

  Height--;
 8002fde:	883b      	ldrh	r3, [r7, #0]
 8002fe0:	f103 33ff 	add.w	r3, r3, #4294967295
 8002fe4:	803b      	strh	r3, [r7, #0]
  Ypos++;
 8002fe6:	88bb      	ldrh	r3, [r7, #4]
 8002fe8:	f103 0301 	add.w	r3, r3, #1
 8002fec:	80bb      	strh	r3, [r7, #4]

  LCD_SetTextColor(BackColor);
 8002fee:	f240 2348 	movw	r3, #584	; 0x248
 8002ff2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fbb2 	bl	8002764 <LCD_SetTextColor>

  while(Height--)
 8003000:	e00d      	b.n	800301e <LCD_DrawFullRect+0xc2>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);    
 8003002:	88ba      	ldrh	r2, [r7, #4]
 8003004:	88bb      	ldrh	r3, [r7, #4]
 8003006:	f103 0301 	add.w	r3, r3, #1
 800300a:	80bb      	strh	r3, [r7, #4]
 800300c:	88f9      	ldrh	r1, [r7, #6]
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	f04f 0300 	mov.w	r3, #0
 800301a:	f7ff fdb1 	bl	8002b80 <LCD_DrawLine>
  Height--;
  Ypos++;

  LCD_SetTextColor(BackColor);

  while(Height--)
 800301e:	883b      	ldrh	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2300      	moveq	r3, #0
 8003026:	2301      	movne	r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	883a      	ldrh	r2, [r7, #0]
 800302c:	f102 32ff 	add.w	r2, r2, #4294967295
 8003030:	803a      	strh	r2, [r7, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e5      	bne.n	8003002 <LCD_DrawFullRect+0xa6>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);    
  }

  LCD_SetTextColor(TextColor);
 8003036:	f240 2384 	movw	r3, #644	; 0x284
 800303a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800303e:	881b      	ldrh	r3, [r3, #0]
 8003040:	b29b      	uxth	r3, r3
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff fb8e 	bl	8002764 <LCD_SetTextColor>
}
 8003048:	f107 0708 	add.w	r7, r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	4613      	mov	r3, r2
 8003058:	4602      	mov	r2, r0
 800305a:	80fa      	strh	r2, [r7, #6]
 800305c:	460a      	mov	r2, r1
 800305e:	80ba      	strh	r2, [r7, #4]
 8003060:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003068:	f1c3 0303 	rsb	r3, r3, #3
 800306c:	617b      	str	r3, [r7, #20]

  CurX = 0;
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	60fb      	str	r3, [r7, #12]
  
  LCD_SetTextColor(BackColor);
 8003078:	f240 2348 	movw	r3, #584	; 0x248
 800307c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b29b      	uxth	r3, r3
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fb6d 	bl	8002764 <LCD_SetTextColor>

  while (CurX <= CurY)
 800308a:	e07b      	b.n	8003184 <LCD_DrawFullCircle+0x134>
  {
    if(CurY > 0) 
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d02b      	beq.n	80030ea <LCD_DrawFullCircle+0x9a>
    {
      LCD_DrawLine(Xpos - CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	b29b      	uxth	r3, r3
 8003096:	88fa      	ldrh	r2, [r7, #6]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	b299      	uxth	r1, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	88bb      	ldrh	r3, [r7, #4]
 80030a2:	18d3      	adds	r3, r2, r3
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f7ff fd61 	bl	8002b80 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	88fb      	ldrh	r3, [r7, #6]
 80030c4:	18d3      	adds	r3, r2, r3
 80030c6:	b299      	uxth	r1, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	b29a      	uxth	r2, r3
 80030cc:	88bb      	ldrh	r3, [r7, #4]
 80030ce:	18d3      	adds	r3, r2, r3
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030da:	b29b      	uxth	r3, r3
 80030dc:	4608      	mov	r0, r1
 80030de:	4611      	mov	r1, r2
 80030e0:	461a      	mov	r2, r3
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	f7ff fd4b 	bl	8002b80 <LCD_DrawLine>
    }

    if(CurX > 0) 
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d02b      	beq.n	8003148 <LCD_DrawFullCircle+0xf8>
    {
      LCD_DrawLine(Xpos - CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	88fa      	ldrh	r2, [r7, #6]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	b299      	uxth	r1, r3
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	88bb      	ldrh	r3, [r7, #4]
 8003100:	18d3      	adds	r3, r2, r3
 8003102:	b29a      	uxth	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	b29b      	uxth	r3, r3
 8003108:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800310c:	b29b      	uxth	r3, r3
 800310e:	4608      	mov	r0, r1
 8003110:	4611      	mov	r1, r2
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	f7ff fd32 	bl	8002b80 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	b29a      	uxth	r2, r3
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	18d3      	adds	r3, r2, r3
 8003124:	b299      	uxth	r1, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	b29a      	uxth	r2, r3
 800312a:	88bb      	ldrh	r3, [r7, #4]
 800312c:	18d3      	adds	r3, r2, r3
 800312e:	b29a      	uxth	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	b29b      	uxth	r3, r3
 8003134:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003138:	b29b      	uxth	r3, r3
 800313a:	4608      	mov	r0, r1
 800313c:	4611      	mov	r1, r2
 800313e:	461a      	mov	r2, r3
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	f7ff fd1c 	bl	8002b80 <LCD_DrawLine>
    }
    if (D < 0)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	da08      	bge.n	8003160 <LCD_DrawFullCircle+0x110>
    { 
      D += (CurX << 2) + 6;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	18d3      	adds	r3, r2, r3
 8003158:	f103 0306 	add.w	r3, r3, #6
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	e00d      	b.n	800317c <LCD_DrawFullCircle+0x12c>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	18d3      	adds	r3, r2, r3
 800316e:	f103 030a 	add.w	r3, r3, #10
 8003172:	617b      	str	r3, [r7, #20]
      CurY--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f103 33ff 	add.w	r3, r3, #4294967295
 800317a:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f103 0301 	add.w	r3, r3, #1
 8003182:	613b      	str	r3, [r7, #16]
  CurX = 0;
  CurY = Radius;
  
  LCD_SetTextColor(BackColor);

  while (CurX <= CurY)
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	429a      	cmp	r2, r3
 800318a:	f67f af7f 	bls.w	800308c <LCD_DrawFullCircle+0x3c>
      CurY--;
    }
    CurX++;
  }

  LCD_SetTextColor(TextColor);
 800318e:	f240 2384 	movw	r3, #644	; 0x284
 8003192:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29b      	uxth	r3, r3
 800319a:	4618      	mov	r0, r3
 800319c:	f7ff fae2 	bl	8002764 <LCD_SetTextColor>
  LCD_DrawCircle(Xpos, Ypos, Radius);
 80031a0:	88f9      	ldrh	r1, [r7, #6]
 80031a2:	88ba      	ldrh	r2, [r7, #4]
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	4608      	mov	r0, r1
 80031a8:	4611      	mov	r1, r2
 80031aa:	461a      	mov	r2, r3
 80031ac:	f7ff fd78 	bl	8002ca0 <LCD_DrawCircle>
}
 80031b0:	f107 0718 	add.w	r7, r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	; 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	80f8      	strh	r0, [r7, #6]
 80031c0:	80b9      	strh	r1, [r7, #4]
 80031c2:	807a      	strh	r2, [r7, #2]
 80031c4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	823b      	strh	r3, [r7, #16]
 80031cc:	f04f 0300 	mov.w	r3, #0
 80031d0:	81fb      	strh	r3, [r7, #14]
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	83fb      	strh	r3, [r7, #30]
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	83bb      	strh	r3, [r7, #28]
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	837b      	strh	r3, [r7, #26]
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	833b      	strh	r3, [r7, #24]
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	82fb      	strh	r3, [r7, #22]
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003214:	887a      	ldrh	r2, [r7, #2]
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	bfb8      	it	lt
 800321e:	425b      	neglt	r3, r3
 8003220:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003222:	883a      	ldrh	r2, [r7, #0]
 8003224:	88bb      	ldrh	r3, [r7, #4]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	bfb8      	it	lt
 800322c:	425b      	neglt	r3, r3
 800322e:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003230:	88fb      	ldrh	r3, [r7, #6]
 8003232:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003234:	88bb      	ldrh	r3, [r7, #4]
 8003236:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	429a      	cmp	r2, r3
 800323e:	d306      	bcc.n	800324e <LCD_DrawUniLine+0x96>
  {
    xinc1 = 1;
 8003240:	f04f 0301 	mov.w	r3, #1
 8003244:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003246:	f04f 0301 	mov.w	r3, #1
 800324a:	843b      	strh	r3, [r7, #32]
 800324c:	e005      	b.n	800325a <LCD_DrawUniLine+0xa2>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 800324e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003252:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003258:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800325a:	883a      	ldrh	r2, [r7, #0]
 800325c:	88bb      	ldrh	r3, [r7, #4]
 800325e:	429a      	cmp	r2, r3
 8003260:	d306      	bcc.n	8003270 <LCD_DrawUniLine+0xb8>
  {
    yinc1 = 1;
 8003262:	f04f 0301 	mov.w	r3, #1
 8003266:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003268:	f04f 0301 	mov.w	r3, #1
 800326c:	83bb      	strh	r3, [r7, #28]
 800326e:	e005      	b.n	800327c <LCD_DrawUniLine+0xc4>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003274:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800327a:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800327c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003284:	429a      	cmp	r2, r3
 8003286:	db14      	blt.n	80032b2 <LCD_DrawUniLine+0xfa>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003294:	8a3b      	ldrh	r3, [r7, #16]
 8003296:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003298:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800329c:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80032a0:	18d3      	adds	r3, r2, r3
 80032a2:	ea4f 0363 	mov.w	r3, r3, asr #1
 80032a6:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80032a8:	89fb      	ldrh	r3, [r7, #14]
 80032aa:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80032ac:	8a3b      	ldrh	r3, [r7, #16]
 80032ae:	82bb      	strh	r3, [r7, #20]
 80032b0:	e013      	b.n	80032da <LCD_DrawUniLine+0x122>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80032be:	89fb      	ldrh	r3, [r7, #14]
 80032c0:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80032c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80032c6:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 80032ca:	18d3      	adds	r3, r2, r3
 80032cc:	ea4f 0363 	mov.w	r3, r3, asr #1
 80032d0:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80032d2:	8a3b      	ldrh	r3, [r7, #16]
 80032d4:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	827b      	strh	r3, [r7, #18]
 80032e0:	e02f      	b.n	8003342 <LCD_DrawUniLine+0x18a>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 80032e2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80032e6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80032ea:	4610      	mov	r0, r2
 80032ec:	4619      	mov	r1, r3
 80032ee:	f7ff fad1 	bl	8002894 <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 80032f2:	8b3a      	ldrh	r2, [r7, #24]
 80032f4:	8afb      	ldrh	r3, [r7, #22]
 80032f6:	18d3      	adds	r3, r2, r3
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80032fc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003300:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003304:	429a      	cmp	r2, r3
 8003306:	db0e      	blt.n	8003326 <LCD_DrawUniLine+0x16e>
    {
      num -= den;               /* Calculate the new numerator value */
 8003308:	8b3a      	ldrh	r2, [r7, #24]
 800330a:	8b7b      	ldrh	r3, [r7, #26]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	b29b      	uxth	r3, r3
 8003310:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8003312:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003316:	18d3      	adds	r3, r2, r3
 8003318:	b29b      	uxth	r3, r3
 800331a:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 800331c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800331e:	8bfb      	ldrh	r3, [r7, #30]
 8003320:	18d3      	adds	r3, r2, r3
 8003322:	b29b      	uxth	r3, r3
 8003324:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8003326:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003328:	8c3b      	ldrh	r3, [r7, #32]
 800332a:	18d3      	adds	r3, r2, r3
 800332c:	b29b      	uxth	r3, r3
 800332e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8003330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003332:	8bbb      	ldrh	r3, [r7, #28]
 8003334:	18d3      	adds	r3, r2, r3
 8003336:	b29b      	uxth	r3, r3
 8003338:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800333a:	8a7b      	ldrh	r3, [r7, #18]
 800333c:	f103 0301 	add.w	r3, r3, #1
 8003340:	827b      	strh	r3, [r7, #18]
 8003342:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003346:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800334a:	429a      	cmp	r2, r3
 800334c:	ddc9      	ble.n	80032e2 <LCD_DrawUniLine+0x12a>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 800334e:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop

08003358 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	460b      	mov	r3, r1
 8003362:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8003364:	f04f 0300 	mov.w	r3, #0
 8003368:	81fb      	strh	r3, [r7, #14]
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8003370:	887b      	ldrh	r3, [r7, #2]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d814      	bhi.n	80033a0 <LCD_PolyLine+0x48>
  {
    return;
 8003376:	e01a      	b.n	80033ae <LCD_PolyLine+0x56>
  }

  while(--PointCount)
  {
    X = Points->X;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	885b      	ldrh	r3, [r3, #2]
 8003382:	81bb      	strh	r3, [r7, #12]
    Points++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f103 0304 	add.w	r3, r3, #4
 800338a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 800338c:	89f8      	ldrh	r0, [r7, #14]
 800338e:	89b9      	ldrh	r1, [r7, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29a      	uxth	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	885b      	ldrh	r3, [r3, #2]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f7ff ff0c 	bl	80031b8 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 80033a0:	887b      	ldrh	r3, [r7, #2]
 80033a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80033a6:	807b      	strh	r3, [r7, #2]
 80033a8:	887b      	ldrh	r3, [r7, #2]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1e4      	bne.n	8003378 <LCD_PolyLine+0x20>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 80033ae:	f107 0710 	add.w	r7, r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop

080033b8 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 80033b8:	b590      	push	{r4, r7, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	460a      	mov	r2, r1
 80033c4:	807a      	strh	r2, [r7, #2]
 80033c6:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	81fb      	strh	r3, [r7, #14]
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 80033d8:	887b      	ldrh	r3, [r7, #2]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d93d      	bls.n	800345a <LCD_PolyLineRelativeClosed+0xa2>
  {
    return;
  }  
  X = Points->X;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	885b      	ldrh	r3, [r3, #2]
 80033e8:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 80033ea:	e021      	b.n	8003430 <LCD_PolyLineRelativeClosed+0x78>
  {
    Points++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f103 0304 	add.w	r3, r3, #4
 80033f2:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 80033f4:	89f8      	ldrh	r0, [r7, #14]
 80033f6:	89b9      	ldrh	r1, [r7, #12]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	881b      	ldrh	r3, [r3, #0]
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	89fb      	ldrh	r3, [r7, #14]
 8003400:	18d3      	adds	r3, r2, r3
 8003402:	b29a      	uxth	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	885b      	ldrh	r3, [r3, #2]
 8003408:	b29c      	uxth	r4, r3
 800340a:	89bb      	ldrh	r3, [r7, #12]
 800340c:	18e3      	adds	r3, r4, r3
 800340e:	b29b      	uxth	r3, r3
 8003410:	f7ff fed2 	bl	80031b8 <LCD_DrawUniLine>
    X = X + Points->X;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	b29a      	uxth	r2, r3
 800341a:	89fb      	ldrh	r3, [r7, #14]
 800341c:	18d3      	adds	r3, r2, r3
 800341e:	b29b      	uxth	r3, r3
 8003420:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	885b      	ldrh	r3, [r3, #2]
 8003426:	b29a      	uxth	r2, r3
 8003428:	89bb      	ldrh	r3, [r7, #12]
 800342a:	18d3      	adds	r3, r2, r3
 800342c:	b29b      	uxth	r3, r3
 800342e:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8003430:	887b      	ldrh	r3, [r7, #2]
 8003432:	f103 33ff 	add.w	r3, r3, #4294967295
 8003436:	807b      	strh	r3, [r7, #2]
 8003438:	887b      	ldrh	r3, [r7, #2]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1d6      	bne.n	80033ec <LCD_PolyLineRelativeClosed+0x34>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 800343e:	883b      	ldrh	r3, [r7, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <LCD_PolyLineRelativeClosed+0xa4>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	b298      	uxth	r0, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	885b      	ldrh	r3, [r3, #2]
 800344e:	b299      	uxth	r1, r3
 8003450:	89fa      	ldrh	r2, [r7, #14]
 8003452:	89bb      	ldrh	r3, [r7, #12]
 8003454:	f7ff feb0 	bl	80031b8 <LCD_DrawUniLine>
 8003458:	e000      	b.n	800345c <LCD_PolyLineRelativeClosed+0xa4>
  int16_t X = 0, Y = 0;
  pPoint First = Points;

  if(PointCount < 2)
  {
    return;
 800345a:	bf00      	nop
  }
  if(Closed)
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
  }  
}
 800345c:	f107 0714 	add.w	r7, r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	bd90      	pop	{r4, r7, pc}

08003464 <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4619      	mov	r1, r3
 8003476:	f7ff ff6f 	bl	8003358 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	b298      	uxth	r0, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	885b      	ldrh	r3, [r3, #2]
 8003484:	b299      	uxth	r1, r3
 8003486:	887b      	ldrh	r3, [r7, #2]
 8003488:	f103 33ff 	add.w	r3, r3, #4294967295
 800348c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	18d3      	adds	r3, r2, r3
 8003494:	881b      	ldrh	r3, [r3, #0]
 8003496:	b29a      	uxth	r2, r3
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	f103 33ff 	add.w	r3, r3, #4294967295
 800349e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80034a2:	687c      	ldr	r4, [r7, #4]
 80034a4:	18e3      	adds	r3, r4, r3
 80034a6:	885b      	ldrh	r3, [r3, #2]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f7ff fe85 	bl	80031b8 <LCD_DrawUniLine>
}
 80034ae:	f107 070c 	add.w	r7, r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd90      	pop	{r4, r7, pc}
 80034b6:	bf00      	nop

080034b8 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 80034c4:	887b      	ldrh	r3, [r7, #2]
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	4619      	mov	r1, r3
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f7ff ff73 	bl	80033b8 <LCD_PolyLineRelativeClosed>
}
 80034d2:	f107 0708 	add.w	r7, r7, #8
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop

080034dc <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 80034e8:	887b      	ldrh	r3, [r7, #2]
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	4619      	mov	r1, r3
 80034ee:	f04f 0201 	mov.w	r2, #1
 80034f2:	f7ff ff61 	bl	80033b8 <LCD_PolyLineRelativeClosed>
}
 80034f6:	f107 0708 	add.w	r7, r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop

08003500 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8003500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003502:	b0ed      	sub	sp, #436	; 0x1b4
 8003504:	af00      	add	r7, sp, #0
 8003506:	f107 0304 	add.w	r3, r7, #4
 800350a:	6018      	str	r0, [r3, #0]
 800350c:	460b      	mov	r3, r1
 800350e:	461a      	mov	r2, r3
 8003510:	f107 0302 	add.w	r3, r7, #2
 8003514:	801a      	strh	r2, [r3, #0]
  /*  public-domain code by Darel Rex Finley, 2007 */
  uint16_t  nodes = 0, nodeX[MAX_POLY_CORNERS], pixelX = 0, pixelY = 0, i = 0,
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
  j = 0, swap = 0;
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
 8003546:	f04f 0300 	mov.w	r3, #0
 800354a:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8003566:	f107 0304 	add.w	r3, r7, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8003572:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8003576:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 800357a:	f107 0304 	add.w	r3, r7, #4
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	885b      	ldrh	r3, [r3, #2]
 8003582:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
 8003586:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 800358a:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

  for(i = 1; i < PointCount; i++)
 800358e:	f04f 0301 	mov.w	r3, #1
 8003592:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003596:	e043      	b.n	8003620 <LCD_FillPolyLine+0x120>
  {
    pixelX = POLY_X(i);
 8003598:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800359c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035a0:	f107 0204 	add.w	r2, r7, #4
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	18d3      	adds	r3, r2, r3
 80035a8:	885b      	ldrh	r3, [r3, #2]
 80035aa:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    if(pixelX < IMAGE_LEFT)
 80035ae:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 80035b2:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d203      	bcs.n	80035c2 <LCD_FillPolyLine+0xc2>
    {
      IMAGE_LEFT = pixelX;
 80035ba:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 80035be:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
    }
    if(pixelX > IMAGE_RIGHT)
 80035c2:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 80035c6:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d903      	bls.n	80035d6 <LCD_FillPolyLine+0xd6>
    {
      IMAGE_RIGHT = pixelX;
 80035ce:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 80035d2:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
    }
    
    pixelY = POLY_Y(i);
 80035d6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80035da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80035de:	f107 0204 	add.w	r2, r7, #4
 80035e2:	6812      	ldr	r2, [r2, #0]
 80035e4:	18d3      	adds	r3, r2, r3
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
    if(pixelY < IMAGE_TOP)
 80035ec:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 80035f0:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d203      	bcs.n	8003600 <LCD_FillPolyLine+0x100>
    { 
      IMAGE_TOP = pixelY;
 80035f8:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 80035fc:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
    }
    if(pixelY > IMAGE_BOTTOM)
 8003600:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8003604:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8003608:	429a      	cmp	r2, r3
 800360a:	d903      	bls.n	8003614 <LCD_FillPolyLine+0x114>
    {
      IMAGE_BOTTOM = pixelY;
 800360c:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8003610:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(i = 1; i < PointCount; i++)
 8003614:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003618:	f103 0301 	add.w	r3, r3, #1
 800361c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003620:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003624:	f107 0302 	add.w	r3, r7, #2
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	429a      	cmp	r2, r3
 800362c:	d3b4      	bcc.n	8003598 <LCD_FillPolyLine+0x98>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }
  
  LCD_SetTextColor(BackColor);  
 800362e:	f240 2348 	movw	r3, #584	; 0x248
 8003632:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff f892 	bl	8002764 <LCD_SetTextColor>

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 8003640:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8003644:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8003648:	e209      	b.n	8003a5e <LCD_FillPolyLine+0x55e>
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8003652:	f107 0302 	add.w	r3, r7, #2
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	f103 33ff 	add.w	r3, r3, #4294967295
 800365c:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8

    for (i = 0; i < PointCount; i++) 
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003668:	e0f6      	b.n	8003858 <LCD_FillPolyLine+0x358>
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 800366a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800366e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003672:	f107 0204 	add.w	r2, r7, #4
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	b21b      	sxth	r3, r3
 800367e:	4618      	mov	r0, r3
 8003680:	f7fc ff12 	bl	80004a8 <__aeabi_i2d>
 8003684:	4604      	mov	r4, r0
 8003686:	460d      	mov	r5, r1
 8003688:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 800368c:	4618      	mov	r0, r3
 800368e:	f7fc fefb 	bl	8000488 <__aeabi_ui2d>
 8003692:	4602      	mov	r2, r0
 8003694:	460b      	mov	r3, r1
 8003696:	f04f 0101 	mov.w	r1, #1
 800369a:	460e      	mov	r6, r1
 800369c:	4620      	mov	r0, r4
 800369e:	4629      	mov	r1, r5
 80036a0:	f7fc ffc8 	bl	8000634 <__aeabi_dcmplt>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <LCD_FillPolyLine+0x1b0>
 80036aa:	f04f 0300 	mov.w	r3, #0
 80036ae:	461e      	mov	r6, r3
 80036b0:	b2f3      	uxtb	r3, r6
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d025      	beq.n	8003702 <LCD_FillPolyLine+0x202>
 80036b6:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 80036ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80036be:	f107 0204 	add.w	r2, r7, #4
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	18d3      	adds	r3, r2, r3
 80036c6:	881b      	ldrh	r3, [r3, #0]
 80036c8:	b21b      	sxth	r3, r3
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fc feec 	bl	80004a8 <__aeabi_i2d>
 80036d0:	4604      	mov	r4, r0
 80036d2:	460d      	mov	r5, r1
 80036d4:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fc fed5 	bl	8000488 <__aeabi_ui2d>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	f04f 0101 	mov.w	r1, #1
 80036e6:	460e      	mov	r6, r1
 80036e8:	4620      	mov	r0, r4
 80036ea:	4629      	mov	r1, r5
 80036ec:	f7fc ffb6 	bl	800065c <__aeabi_dcmpge>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d102      	bne.n	80036fc <LCD_FillPolyLine+0x1fc>
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	461e      	mov	r6, r3
 80036fc:	b2f3      	uxtb	r3, r6
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d14b      	bne.n	800379a <LCD_FillPolyLine+0x29a>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 8003702:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8003706:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800370a:	f107 0204 	add.w	r2, r7, #4
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	18d3      	adds	r3, r2, r3
 8003712:	881b      	ldrh	r3, [r3, #0]
 8003714:	b21b      	sxth	r3, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f7fc fec6 	bl	80004a8 <__aeabi_i2d>
 800371c:	4604      	mov	r4, r0
 800371e:	460d      	mov	r5, r1
 8003720:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8003724:	4618      	mov	r0, r3
 8003726:	f7fc feaf 	bl	8000488 <__aeabi_ui2d>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	f04f 0101 	mov.w	r1, #1
 8003732:	460e      	mov	r6, r1
 8003734:	4620      	mov	r0, r4
 8003736:	4629      	mov	r1, r5
 8003738:	f7fc ff7c 	bl	8000634 <__aeabi_dcmplt>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <LCD_FillPolyLine+0x248>
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	461e      	mov	r6, r3
 8003748:	b2f3      	uxtb	r3, r6
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 800374a:	2b00      	cmp	r3, #0
 800374c:	d07a      	beq.n	8003844 <LCD_FillPolyLine+0x344>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 800374e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003752:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003756:	f107 0204 	add.w	r2, r7, #4
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	18d3      	adds	r3, r2, r3
 800375e:	881b      	ldrh	r3, [r3, #0]
 8003760:	b21b      	sxth	r3, r3
 8003762:	4618      	mov	r0, r3
 8003764:	f7fc fea0 	bl	80004a8 <__aeabi_i2d>
 8003768:	4604      	mov	r4, r0
 800376a:	460d      	mov	r5, r1
 800376c:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8003770:	4618      	mov	r0, r3
 8003772:	f7fc fe89 	bl	8000488 <__aeabi_ui2d>
 8003776:	4602      	mov	r2, r0
 8003778:	460b      	mov	r3, r1
 800377a:	f04f 0101 	mov.w	r1, #1
 800377e:	460e      	mov	r6, r1
 8003780:	4620      	mov	r0, r4
 8003782:	4629      	mov	r1, r5
 8003784:	f7fc ff6a 	bl	800065c <__aeabi_dcmpge>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <LCD_FillPolyLine+0x294>
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	461e      	mov	r6, r3
 8003794:	b2f3      	uxtb	r3, r6
 8003796:	2b00      	cmp	r3, #0
 8003798:	d054      	beq.n	8003844 <LCD_FillPolyLine+0x344>
      {
        nodeX[nodes++]=(int) (POLY_X(i)+((pixelY-POLY_Y(i))*(POLY_X(j)-POLY_X(i)))/(POLY_Y(j)-POLY_Y(i))); 
 800379a:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 800379e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80037a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80037a6:	f107 0104 	add.w	r1, r7, #4
 80037aa:	6809      	ldr	r1, [r1, #0]
 80037ac:	18cb      	adds	r3, r1, r3
 80037ae:	885b      	ldrh	r3, [r3, #2]
 80037b0:	b299      	uxth	r1, r3
 80037b2:	f8b7 01ac 	ldrh.w	r0, [r7, #428]	; 0x1ac
 80037b6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80037ba:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80037be:	f107 0404 	add.w	r4, r7, #4
 80037c2:	6824      	ldr	r4, [r4, #0]
 80037c4:	18e3      	adds	r3, r4, r3
 80037c6:	881b      	ldrh	r3, [r3, #0]
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	1ac3      	subs	r3, r0, r3
 80037cc:	f8b7 01a8 	ldrh.w	r0, [r7, #424]	; 0x1a8
 80037d0:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80037d4:	f107 0404 	add.w	r4, r7, #4
 80037d8:	6824      	ldr	r4, [r4, #0]
 80037da:	1820      	adds	r0, r4, r0
 80037dc:	8840      	ldrh	r0, [r0, #2]
 80037de:	b204      	sxth	r4, r0
 80037e0:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 80037e4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 80037e8:	f107 0504 	add.w	r5, r7, #4
 80037ec:	682d      	ldr	r5, [r5, #0]
 80037ee:	1828      	adds	r0, r5, r0
 80037f0:	8840      	ldrh	r0, [r0, #2]
 80037f2:	b200      	sxth	r0, r0
 80037f4:	1a20      	subs	r0, r4, r0
 80037f6:	fb00 f003 	mul.w	r0, r0, r3
 80037fa:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 80037fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003802:	f107 0404 	add.w	r4, r7, #4
 8003806:	6824      	ldr	r4, [r4, #0]
 8003808:	18e3      	adds	r3, r4, r3
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	b21c      	sxth	r4, r3
 800380e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003812:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003816:	f107 0504 	add.w	r5, r7, #4
 800381a:	682d      	ldr	r5, [r5, #0]
 800381c:	18eb      	adds	r3, r5, r3
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	b21b      	sxth	r3, r3
 8003822:	1ae3      	subs	r3, r4, r3
 8003824:	fb90 f3f3 	sdiv	r3, r0, r3
 8003828:	b29b      	uxth	r3, r3
 800382a:	18cb      	adds	r3, r1, r3
 800382c:	b29b      	uxth	r3, r3
 800382e:	4619      	mov	r1, r3
 8003830:	f107 030c 	add.w	r3, r7, #12
 8003834:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003838:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 800383c:	f103 0301 	add.w	r3, r3, #1
 8003840:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
      }
      j = i; 
 8003844:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003848:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
 800384c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003850:	f103 0301 	add.w	r3, r3, #1
 8003854:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003858:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800385c:	f107 0302 	add.w	r3, r7, #2
 8003860:	881b      	ldrh	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	f4ff af01 	bcc.w	800366a <LCD_FillPolyLine+0x16a>
      }
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
    while (i < nodes-1) 
 8003870:	e041      	b.n	80038f6 <LCD_FillPolyLine+0x3f6>
    {
      if (nodeX[i]>nodeX[i+1]) 
 8003872:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003876:	f107 030c 	add.w	r3, r7, #12
 800387a:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800387e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003882:	f103 0101 	add.w	r1, r3, #1
 8003886:	f107 030c 	add.w	r3, r7, #12
 800388a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800388e:	429a      	cmp	r2, r3
 8003890:	d92b      	bls.n	80038ea <LCD_FillPolyLine+0x3ea>
      {
        swap = nodeX[i]; 
 8003892:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003896:	f107 030c 	add.w	r3, r7, #12
 800389a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800389e:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
        nodeX[i] = nodeX[i+1]; 
 80038a2:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80038a6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80038aa:	f103 0101 	add.w	r1, r3, #1
 80038ae:	f107 030c 	add.w	r3, r7, #12
 80038b2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80038b6:	4619      	mov	r1, r3
 80038b8:	f107 030c 	add.w	r3, r7, #12
 80038bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        nodeX[i+1] = swap; 
 80038c0:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80038c4:	f103 0201 	add.w	r2, r3, #1
 80038c8:	f8b7 119c 	ldrh.w	r1, [r7, #412]	; 0x19c
 80038cc:	f107 030c 	add.w	r3, r7, #12
 80038d0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if(i)
 80038d4:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00c      	beq.n	80038f6 <LCD_FillPolyLine+0x3f6>
        {
          i--; 
 80038dc:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80038e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80038e4:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 80038e8:	e005      	b.n	80038f6 <LCD_FillPolyLine+0x3f6>
        }
      }
      else 
      {
        i++;
 80038ea:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80038ee:	f103 0301 	add.w	r3, r3, #1
 80038f2:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
    while (i < nodes-1) 
 80038f6:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80038fa:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 80038fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8003902:	429a      	cmp	r2, r3
 8003904:	dbb5      	blt.n	8003872 <LCD_FillPolyLine+0x372>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 800390e:	e097      	b.n	8003a40 <LCD_FillPolyLine+0x540>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
 8003910:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003914:	f107 030c 	add.w	r3, r7, #12
 8003918:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800391c:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8003920:	429a      	cmp	r2, r3
 8003922:	f240 8095 	bls.w	8003a50 <LCD_FillPolyLine+0x550>
      {
        break;
      }
      if(nodeX[i+1] > IMAGE_LEFT) 
 8003926:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800392a:	f103 0201 	add.w	r2, r3, #1
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003936:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 800393a:	429a      	cmp	r2, r3
 800393c:	d27a      	bcs.n	8003a34 <LCD_FillPolyLine+0x534>
      {
        if (nodeX[i] < IMAGE_LEFT)
 800393e:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003942:	f107 030c 	add.w	r3, r7, #12
 8003946:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800394a:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 800394e:	429a      	cmp	r2, r3
 8003950:	d907      	bls.n	8003962 <LCD_FillPolyLine+0x462>
        {
          nodeX[i]=IMAGE_LEFT;
 8003952:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003956:	f8b7 11a6 	ldrh.w	r1, [r7, #422]	; 0x1a6
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        if(nodeX[i+1] > IMAGE_RIGHT)
 8003962:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003966:	f103 0201 	add.w	r2, r3, #1
 800396a:	f107 030c 	add.w	r3, r7, #12
 800396e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003972:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8003976:	429a      	cmp	r2, r3
 8003978:	d209      	bcs.n	800398e <LCD_FillPolyLine+0x48e>
        {
          nodeX[i+1] = IMAGE_RIGHT;
 800397a:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800397e:	f103 0201 	add.w	r2, r3, #1
 8003982:	f8b7 11a4 	ldrh.w	r1, [r7, #420]	; 0x1a4
 8003986:	f107 030c 	add.w	r3, r7, #12
 800398a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        LCD_SetTextColor(BackColor);
 800398e:	f240 2348 	movw	r3, #584	; 0x248
 8003992:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b29b      	uxth	r3, r3
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fee2 	bl	8002764 <LCD_SetTextColor>
        LCD_DrawLine(pixelY, nodeX[i+1], nodeX[i+1] - nodeX[i], LCD_DIR_HORIZONTAL);
 80039a0:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80039a4:	f103 0201 	add.w	r2, r3, #1
 80039a8:	f107 030c 	add.w	r3, r7, #12
 80039ac:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80039b0:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80039b4:	f103 0101 	add.w	r1, r3, #1
 80039b8:	f107 030c 	add.w	r3, r7, #12
 80039bc:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80039c0:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80039cc:	1acb      	subs	r3, r1, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	f8b7 11ac 	ldrh.w	r1, [r7, #428]	; 0x1ac
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	f7ff f8cf 	bl	8002b80 <LCD_DrawLine>
        LCD_SetTextColor(TextColor);
 80039e2:	f240 2384 	movw	r3, #644	; 0x284
 80039e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe feb8 	bl	8002764 <LCD_SetTextColor>
        PutPixel(pixelY, nodeX[i+1]);
 80039f4:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 80039f8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80039fc:	f103 0101 	add.w	r1, r3, #1
 8003a00:	f107 030c 	add.w	r3, r7, #12
 8003a04:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	b212      	sxth	r2, r2
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	4619      	mov	r1, r3
 8003a12:	f7fe ff3f 	bl	8002894 <PutPixel>
        PutPixel(pixelY, nodeX[i]);
 8003a16:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8003a1a:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 8003a1e:	f107 030c 	add.w	r3, r7, #12
 8003a22:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	b212      	sxth	r2, r2
 8003a2a:	b21b      	sxth	r3, r3
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f7fe ff30 	bl	8002894 <PutPixel>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 8003a34:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003a38:	f103 0302 	add.w	r3, r3, #2
 8003a3c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003a40:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003a44:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	f4ff af61 	bcc.w	8003910 <LCD_FillPolyLine+0x410>
 8003a4e:	e000      	b.n	8003a52 <LCD_FillPolyLine+0x552>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
      {
        break;
 8003a50:	bf00      	nop
  }
  
  LCD_SetTextColor(BackColor);  

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 8003a52:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8003a56:	f103 0301 	add.w	r3, r3, #1
 8003a5a:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8003a5e:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8003a62:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8003a66:	429a      	cmp	r2, r3
 8003a68:	f4ff adef 	bcc.w	800364a <LCD_FillPolyLine+0x14a>
        /* for (j=nodeX[i]; j<nodeX[i+1]; j++) PutPixel(j,pixelY); */
      }
    }
  } 
  /* draw the edges */
  LCD_SetTextColor(TextColor);
 8003a6c:	f240 2384 	movw	r3, #644	; 0x284
 8003a70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe fe73 	bl	8002764 <LCD_SetTextColor>
}
 8003a7e:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a86:	bf00      	nop

08003a88 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	60fb      	str	r3, [r7, #12]
  for(index = (10000 * nCount); index != 0; index--)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e003      	b.n	8003aac <delay+0x24>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f103 33ff 	add.w	r3, r3, #4294967295
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f8      	bne.n	8003aa4 <delay+0x1c>
  {
  }
}
 8003ab2:	f107 0714 	add.w	r7, r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8003ac4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003ac8:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 8003ad2:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8003ad6:	60da      	str	r2, [r3, #12]
}
 8003ad8:	f107 070c 	add.w	r7, r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bc80      	pop	{r7}
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop

08003ae4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	73bb      	strb	r3, [r7, #14]
 8003af8:	f04f 030f 	mov.w	r3, #15
 8003afc:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	78db      	ldrb	r3, [r3, #3]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d045      	beq.n	8003b92 <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8003b06:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003b0a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	ea6f 0303 	mvn.w	r3, r3
 8003b14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b18:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003b1c:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	f1c3 0304 	rsb	r3, r3, #4
 8003b24:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8003b26:	7b7a      	ldrb	r2, [r7, #13]
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	fa42 f303 	asr.w	r3, r2, r3
 8003b2e:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	785b      	ldrb	r3, [r3, #1]
 8003b34:	461a      	mov	r2, r3
 8003b36:	7bbb      	ldrb	r3, [r7, #14]
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	789a      	ldrb	r2, [r3, #2]
 8003b42:	7b7b      	ldrb	r3, [r7, #13]
 8003b44:	4013      	ands	r3, r2
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003b54:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8003b56:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003b5a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	7812      	ldrb	r2, [r2, #0]
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	7bfa      	ldrb	r2, [r7, #15]
 8003b66:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b6a:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003b6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003b7a:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003b7c:	6879      	ldr	r1, [r7, #4]
 8003b7e:	7809      	ldrb	r1, [r1, #0]
 8003b80:	f001 011f 	and.w	r1, r1, #31
 8003b84:	f04f 0001 	mov.w	r0, #1
 8003b88:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003b90:	e014      	b.n	8003bbc <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003b92:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8003b96:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	7812      	ldrb	r2, [r2, #0]
 8003b9e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8003ba2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	7809      	ldrb	r1, [r1, #0]
 8003ba8:	f001 011f 	and.w	r1, r1, #31
 8003bac:	f04f 0001 	mov.w	r0, #1
 8003bb0:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8003bb4:	f102 0220 	add.w	r2, r2, #32
 8003bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003bbc:	f107 0714 	add.w	r7, r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop

08003bc8 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 8003bd2:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003bd6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003be0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	609a      	str	r2, [r3, #8]
}
 8003bea:	f107 070c 	add.w	r7, r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	71fa      	strb	r2, [r7, #7]
 8003c00:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8003c02:	79bb      	ldrb	r3, [r7, #6]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8003c08:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003c0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003c10:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8003c14:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003c18:	6911      	ldr	r1, [r2, #16]
 8003c1a:	79fa      	ldrb	r2, [r7, #7]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	611a      	str	r2, [r3, #16]
 8003c20:	e00d      	b.n	8003c3e <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8003c22:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003c26:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003c2a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8003c2e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003c32:	6911      	ldr	r1, [r2, #16]
 8003c34:	79fa      	ldrb	r2, [r7, #7]
 8003c36:	ea6f 0202 	mvn.w	r2, r2
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	611a      	str	r2, [r3, #16]
  }
}
 8003c3e:	f107 070c 	add.w	r7, r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d10c      	bne.n	8003c70 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8003c56:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003c5a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003c5e:	f24e 0210 	movw	r2, #57360	; 0xe010
 8003c62:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	f042 0204 	orr.w	r2, r2, #4
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	e00b      	b.n	8003c88 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8003c70:	f24e 0310 	movw	r3, #57360	; 0xe010
 8003c74:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003c78:	f24e 0210 	movw	r2, #57360	; 0xe010
 8003c7c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	f022 0204 	bic.w	r2, r2, #4
 8003c86:	601a      	str	r2, [r3, #0]
  }
}
 8003c88:	f107 070c 	add.w	r7, r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop

08003c94 <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8003c98:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003c9c:	f04f 0101 	mov.w	r1, #1
 8003ca0:	f009 f868 	bl	800cd74 <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8003ca4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	f009 f862 	bl	800cd74 <RCC_APB2PeriphResetCmd>
}
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop

08003cb4 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cda:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8003d02:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 8003d06:	4013      	ands	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003d12:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8003d18:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	795b      	ldrb	r3, [r3, #5]
 8003d1e:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003d22:	4313      	orrs	r3, r2
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d3c:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	7d1b      	ldrb	r3, [r3, #20]
 8003d42:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8003d4e:	7afb      	ldrb	r3, [r7, #11]
 8003d50:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003d60:	f107 0714 	add.w	r7, r7, #20
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop

08003d6c <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f04f 0200 	mov.w	r2, #0
 8003da2:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f04f 0201 	mov.w	r2, #1
 8003daa:	751a      	strb	r2, [r3, #20]
}
 8003dac:	f107 070c 	add.w	r7, r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8003dc0:	f04f 0300 	mov.w	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8003dc6:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003dca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8003dd8:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8003ddc:	4013      	ands	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003de8:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8003dee:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003df4:	4313      	orrs	r3, r2
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8003dfc:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003e00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	605a      	str	r2, [r3, #4]
}
 8003e08:	f107 0714 	add.w	r7, r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bc80      	pop	{r7}
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop

08003e14 <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	60da      	str	r2, [r3, #12]
}
 8003e3c:	f107 070c 	add.w	r7, r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop

08003e48 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d006      	beq.n	8003e68 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f043 0201 	orr.w	r2, r3, #1
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	e005      	b.n	8003e74 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f023 0201 	bic.w	r2, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	609a      	str	r2, [r3, #8]
  }
}
 8003e74:	f107 070c 	add.w	r7, r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003e8a:	f04f 0300 	mov.w	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003e9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ea0:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68fa      	ldr	r2, [r7, #12]
 8003eae:	605a      	str	r2, [r3, #4]
}
 8003eb0:	f107 0714 	add.w	r7, r7, #20
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop

08003ebc <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	460a      	mov	r2, r1
 8003ec8:	807a      	strh	r2, [r7, #2]
 8003eca:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8003ecc:	887a      	ldrh	r2, [r7, #2]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8003ed2:	883a      	ldrh	r2, [r7, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ed8:	f107 070c 	add.w	r7, r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop

08003ee4 <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f023 031f 	bic.w	r3, r3, #31
 8003f02:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8003f04:	78fb      	ldrb	r3, [r7, #3]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	605a      	str	r2, [r3, #4]
}
 8003f12:	f107 0714 	add.w	r7, r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bc80      	pop	{r7}
 8003f1a:	4770      	bx	lr

08003f1c <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00c      	beq.n	8003f46 <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8003f2c:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003f30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f34:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003f38:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f3c:	6852      	ldr	r2, [r2, #4]
 8003f3e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003f42:	605a      	str	r2, [r3, #4]
 8003f44:	e00b      	b.n	8003f5e <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8003f46:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003f4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f4e:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003f52:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f56:	6852      	ldr	r2, [r2, #4]
 8003f58:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8003f5c:	605a      	str	r2, [r3, #4]
  }
}
 8003f5e:	f107 070c 	add.w	r7, r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bc80      	pop	{r7}
 8003f66:	4770      	bx	lr

08003f68 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003f72:	79fb      	ldrb	r3, [r7, #7]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d00c      	beq.n	8003f92 <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8003f78:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003f7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f80:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003f84:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003f88:	6852      	ldr	r2, [r2, #4]
 8003f8a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	e00b      	b.n	8003faa <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8003f92:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003f96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003f9a:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003f9e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003fa2:	6852      	ldr	r2, [r2, #4]
 8003fa4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8003fa8:	605a      	str	r2, [r3, #4]
  }
}
 8003faa:	f107 070c 	add.w	r7, r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bc80      	pop	{r7}
 8003fb2:	4770      	bx	lr

08003fb4 <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	70f9      	strb	r1, [r7, #3]
 8003fbe:	70ba      	strb	r2, [r7, #2]
 8003fc0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	f04f 0300 	mov.w	r3, #0
 8003fcc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	d927      	bls.n	8004024 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003fe2:	189b      	adds	r3, r3, r2
 8003fe4:	f1a3 031e 	sub.w	r3, r3, #30
 8003fe8:	f04f 0207 	mov.w	r2, #7
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	ea6f 0303 	mvn.w	r3, r3
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003ffe:	7879      	ldrb	r1, [r7, #1]
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	4613      	mov	r3, r2
 8004004:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004008:	189b      	adds	r3, r3, r2
 800400a:	f1a3 031e 	sub.w	r3, r3, #30
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	60da      	str	r2, [r3, #12]
 8004022:	e022      	b.n	800406a <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	4613      	mov	r3, r2
 800402e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004032:	189b      	adds	r3, r3, r2
 8004034:	f04f 0207 	mov.w	r2, #7
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	ea6f 0303 	mvn.w	r3, r3
 8004044:	68fa      	ldr	r2, [r7, #12]
 8004046:	4013      	ands	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800404a:	7879      	ldrb	r1, [r7, #1]
 800404c:	78fa      	ldrb	r2, [r7, #3]
 800404e:	4613      	mov	r3, r2
 8004050:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004054:	189b      	adds	r3, r3, r2
 8004056:	fa01 f303 	lsl.w	r3, r1, r3
 800405a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800406a:	78bb      	ldrb	r3, [r7, #2]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d827      	bhi.n	80040c0 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004074:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8004076:	78bb      	ldrb	r3, [r7, #2]
 8004078:	f103 32ff 	add.w	r2, r3, #4294967295
 800407c:	4613      	mov	r3, r2
 800407e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004082:	189b      	adds	r3, r3, r2
 8004084:	f04f 021f 	mov.w	r2, #31
 8004088:	fa02 f303 	lsl.w	r3, r2, r3
 800408c:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	ea6f 0303 	mvn.w	r3, r3
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800409a:	78f9      	ldrb	r1, [r7, #3]
 800409c:	78bb      	ldrb	r3, [r7, #2]
 800409e:	f103 32ff 	add.w	r2, r3, #4294967295
 80040a2:	4613      	mov	r3, r2
 80040a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80040a8:	189b      	adds	r3, r3, r2
 80040aa:	fa01 f303 	lsl.w	r3, r1, r3
 80040ae:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34
 80040be:	e051      	b.n	8004164 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 80040c0:	78bb      	ldrb	r3, [r7, #2]
 80040c2:	2b0c      	cmp	r3, #12
 80040c4:	d827      	bhi.n	8004116 <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 80040cc:	78ba      	ldrb	r2, [r7, #2]
 80040ce:	4613      	mov	r3, r2
 80040d0:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80040d4:	189b      	adds	r3, r3, r2
 80040d6:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 80040da:	f04f 021f 	mov.w	r2, #31
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	ea6f 0303 	mvn.w	r3, r3
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	4013      	ands	r3, r2
 80040ee:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80040f0:	78f9      	ldrb	r1, [r7, #3]
 80040f2:	78ba      	ldrb	r2, [r7, #2]
 80040f4:	4613      	mov	r3, r2
 80040f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80040fa:	189b      	adds	r3, r3, r2
 80040fc:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	631a      	str	r2, [r3, #48]	; 0x30
 8004114:	e026      	b.n	8004164 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 800411c:	78ba      	ldrb	r2, [r7, #2]
 800411e:	4613      	mov	r3, r2
 8004120:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004124:	189b      	adds	r3, r3, r2
 8004126:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 800412a:	f04f 021f 	mov.w	r2, #31
 800412e:	fa02 f303 	lsl.w	r3, r2, r3
 8004132:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	ea6f 0303 	mvn.w	r3, r3
 800413a:	68fa      	ldr	r2, [r7, #12]
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8004140:	78f9      	ldrb	r1, [r7, #3]
 8004142:	78ba      	ldrb	r2, [r7, #2]
 8004144:	4613      	mov	r3, r2
 8004146:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800414a:	189b      	adds	r3, r3, r2
 800414c:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004164:	f107 0714 	add.w	r7, r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	609a      	str	r2, [r3, #8]
}
 8004184:	f107 070c 	add.w	r7, r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	bc80      	pop	{r7}
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop

08004190 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80041aa:	f04f 0301 	mov.w	r3, #1
 80041ae:	73fb      	strb	r3, [r7, #15]
 80041b0:	e002      	b.n	80041b8 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	f107 0714 	add.w	r7, r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop

080041c8 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d006      	beq.n	80041e8 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	609a      	str	r2, [r3, #8]
 80041e6:	e005      	b.n	80041f4 <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	609a      	str	r2, [r3, #8]
  }
}
 80041f4:	f107 070c 	add.w	r7, r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop

08004200 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d006      	beq.n	8004220 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f043 0202 	orr.w	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	e005      	b.n	800422c <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f023 0202 	bic.w	r2, r3, #2
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
  }
}
 800422c:	f107 070c 	add.w	r7, r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop

08004238 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800425c:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f103 33ff 	add.w	r3, r3, #4294967295
 8004264:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	ea4f 3343 	mov.w	r3, r3, lsl #13
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	605a      	str	r2, [r3, #4]
}
 8004278:	f107 0714 	add.w	r7, r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop

08004284 <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	e005      	b.n	80042b0 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]
  }
}
 80042b0:	f107 070c 	add.w	r7, r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop

080042bc <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	b29b      	uxth	r3, r3
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	f107 070c 	add.w	r7, r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bc80      	pop	{r7}
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop

080042d8 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 80042dc:	f242 3308 	movw	r3, #8968	; 0x2308
 80042e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80042e4:	681b      	ldr	r3, [r3, #0]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop

080042f0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80042fc:	78fb      	ldrb	r3, [r7, #3]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	e005      	b.n	800431c <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	609a      	str	r2, [r3, #8]
  }
}
 800431c:	f107 070c 	add.w	r7, r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	bc80      	pop	{r7}
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop

08004328 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	460b      	mov	r3, r1
 8004332:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	609a      	str	r2, [r3, #8]
 8004346:	e005      	b.n	8004354 <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]
  }
}
 8004354:	f107 070c 	add.w	r7, r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop

08004360 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800436a:	79fb      	ldrb	r3, [r7, #7]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00c      	beq.n	800438a <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8004370:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8004374:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004378:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800437c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8004380:	6852      	ldr	r2, [r2, #4]
 8004382:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	e00b      	b.n	80043a2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 800438a:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800438e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8004392:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8004396:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800439a:	6852      	ldr	r2, [r2, #4]
 800439c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a0:	605a      	str	r2, [r3, #4]
  }
}
 80043a2:	f107 070c 	add.w	r7, r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	70f9      	strb	r1, [r7, #3]
 80043b6:	70ba      	strb	r2, [r7, #2]
 80043b8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80043ba:	f04f 0300 	mov.w	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	f04f 0300 	mov.w	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	d927      	bls.n	8004422 <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 80043d8:	78fa      	ldrb	r2, [r7, #3]
 80043da:	4613      	mov	r3, r2
 80043dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80043e0:	189b      	adds	r3, r3, r2
 80043e2:	f1a3 031e 	sub.w	r3, r3, #30
 80043e6:	f04f 0207 	mov.w	r2, #7
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	ea6f 0303 	mvn.w	r3, r3
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	4013      	ands	r3, r2
 80043fa:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 80043fc:	7879      	ldrb	r1, [r7, #1]
 80043fe:	78fa      	ldrb	r2, [r7, #3]
 8004400:	4613      	mov	r3, r2
 8004402:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004406:	189b      	adds	r3, r3, r2
 8004408:	f1a3 031e 	sub.w	r3, r3, #30
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	697a      	ldr	r2, [r7, #20]
 800441e:	60da      	str	r2, [r3, #12]
 8004420:	e022      	b.n	8004468 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	4613      	mov	r3, r2
 800442c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004430:	189b      	adds	r3, r3, r2
 8004432:	f04f 0207 	mov.w	r2, #7
 8004436:	fa02 f303 	lsl.w	r3, r2, r3
 800443a:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	ea6f 0303 	mvn.w	r3, r3
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	4013      	ands	r3, r2
 8004446:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8004448:	7879      	ldrb	r1, [r7, #1]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	4613      	mov	r3, r2
 800444e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004452:	189b      	adds	r3, r3, r2
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004474:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8004478:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	ea6f 0303 	mvn.w	r3, r3
 8004482:	b2da      	uxtb	r2, r3
 8004484:	78bb      	ldrb	r3, [r7, #2]
 8004486:	18d3      	adds	r3, r2, r3
 8004488:	b2db      	uxtb	r3, r3
 800448a:	f103 0303 	add.w	r3, r3, #3
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	4613      	mov	r3, r2
 8004494:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8004498:	189b      	adds	r3, r3, r2
 800449a:	f04f 021f 	mov.w	r2, #31
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	ea6f 0303 	mvn.w	r3, r3
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	4013      	ands	r3, r2
 80044ae:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80044b0:	78f9      	ldrb	r1, [r7, #3]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	ea6f 0303 	mvn.w	r3, r3
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	78bb      	ldrb	r3, [r7, #2]
 80044be:	18d3      	adds	r3, r2, r3
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f103 0303 	add.w	r3, r3, #3
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	4613      	mov	r3, r2
 80044cc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	fa01 f303 	lsl.w	r3, r1, r3
 80044d6:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80044e6:	f107 071c 	add.w	r7, r7, #28
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bc80      	pop	{r7}
 80044ee:	4770      	bx	lr

080044f0 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004514:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	f103 33ff 	add.w	r3, r3, #4294967295
 800451c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004530:	f107 0714 	add.w	r7, r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop

0800453c <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	4613      	mov	r3, r2
 8004546:	460a      	mov	r2, r1
 8004548:	70fa      	strb	r2, [r7, #3]
 800454a:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	18d3      	adds	r3, r2, r3
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	883a      	ldrh	r2, [r7, #0]
 8004562:	601a      	str	r2, [r3, #0]
}
 8004564:	f107 0714 	add.w	r7, r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800458c:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	609a      	str	r2, [r3, #8]
}
 800459c:	f107 0714 	add.w	r7, r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bc80      	pop	{r7}
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop

080045a8 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	609a      	str	r2, [r3, #8]
}
 80045d4:	f107 0714 	add.w	r7, r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	bc80      	pop	{r7}
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop

080045e0 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	609a      	str	r2, [r3, #8]
}
 80045f4:	f107 070c 	add.w	r7, r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 800461a:	f04f 0301 	mov.w	r3, #1
 800461e:	73fb      	strb	r3, [r7, #15]
 8004620:	e002      	b.n	8004628 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8004628:	7bfb      	ldrb	r3, [r7, #15]
}
 800462a:	4618      	mov	r0, r3
 800462c:	f107 0714 	add.w	r7, r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	bc80      	pop	{r7}
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop

08004638 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d006      	beq.n	8004658 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	605a      	str	r2, [r3, #4]
 8004656:	e005      	b.n	8004664 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	605a      	str	r2, [r3, #4]
  }
}
 8004664:	f107 070c 	add.w	r7, r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	460b      	mov	r3, r1
 800467a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800467c:	78fb      	ldrb	r3, [r7, #3]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	605a      	str	r2, [r3, #4]
 800468e:	e005      	b.n	800469c <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	605a      	str	r2, [r3, #4]
  }
}
 800469c:	f107 070c 	add.w	r7, r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bc80      	pop	{r7}
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b085      	sub	sp, #20
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	460b      	mov	r3, r1
 80046b2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	18d3      	adds	r3, r2, r3
 80046c4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80046c8:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	b29b      	uxth	r3, r3
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	f107 0714 	add.w	r7, r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr

080046dc <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	4613      	mov	r3, r2
 80046e6:	460a      	mov	r2, r1
 80046e8:	807a      	strh	r2, [r7, #2]
 80046ea:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80046ec:	f04f 0300 	mov.w	r3, #0
 80046f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80046f2:	887b      	ldrh	r3, [r7, #2]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f04f 0201 	mov.w	r2, #1
 80046fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004702:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8004704:	787b      	ldrb	r3, [r7, #1]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d006      	beq.n	8004718 <ADC_ITConfig+0x3c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	e007      	b.n	8004728 <ADC_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	ea6f 0303 	mvn.w	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	605a      	str	r2, [r3, #4]
  }
}
 8004728:	f107 0714 	add.w	r7, r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	bc80      	pop	{r7}
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop

08004734 <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	4013      	ands	r3, r2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8004752:	f04f 0301 	mov.w	r3, #1
 8004756:	73fb      	strb	r3, [r7, #15]
 8004758:	e002      	b.n	8004760 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	f107 0714 	add.w	r7, r7, #20
 8004768:	46bd      	mov	sp, r7
 800476a:	bc80      	pop	{r7}
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	ea6f 0203 	mvn.w	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	601a      	str	r2, [r3, #0]
}
 8004786:	f107 070c 	add.w	r7, r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	bc80      	pop	{r7}
 800478e:	4770      	bx	lr

08004790 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8004790:	b480      	push	{r7}
 8004792:	b087      	sub	sp, #28
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 80047ae:	887b      	ldrh	r3, [r7, #2]
 80047b0:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	887b      	ldrh	r3, [r7, #2]
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	f04f 0101 	mov.w	r1, #1
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	4013      	ands	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4013      	ands	r3, r2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d006      	beq.n	80047e6 <ADC_GetITStatus+0x56>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <ADC_GetITStatus+0x56>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 80047de:	f04f 0301 	mov.w	r3, #1
 80047e2:	75fb      	strb	r3, [r7, #23]
 80047e4:	e002      	b.n	80047ec <ADC_GetITStatus+0x5c>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 80047ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	f107 071c 	add.w	r7, r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc80      	pop	{r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop

080047fc <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004814:	b29b      	uxth	r3, r3
 8004816:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	ea6f 0203 	mvn.w	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
}                    
 8004822:	f107 0714 	add.w	r7, r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800483a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800483e:	429a      	cmp	r2, r3
 8004840:	d10c      	bne.n	800485c <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 8004842:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004846:	f04f 0101 	mov.w	r1, #1
 800484a:	f008 fa69 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 800484e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8004852:	f04f 0100 	mov.w	r1, #0
 8004856:	f008 fa63 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800485a:	e00b      	b.n	8004874 <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 800485c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004860:	f04f 0101 	mov.w	r1, #1
 8004864:	f008 fa5c 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8004868:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800486c:	f04f 0100 	mov.w	r1, #0
 8004870:	f008 fa56 	bl	800cd20 <RCC_APB1PeriphResetCmd>
  }
}
 8004874:	f107 0708 	add.w	r7, r7, #8
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8004886:	f04f 0300 	mov.w	r3, #0
 800488a:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f023 0202 	bic.w	r2, r3, #2
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80048aa:	e003      	b.n	80048b4 <CAN_Init+0x38>
  {
    wait_ack++;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f103 0301 	add.w	r3, r3, #1
 80048b2:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d104      	bne.n	80048ca <CAN_Init+0x4e>
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d1f0      	bne.n	80048ac <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 80048d6:	f04f 0300 	mov.w	r3, #0
 80048da:	73fb      	strb	r3, [r7, #15]
 80048dc:	e0a7      	b.n	8004a2e <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	799b      	ldrb	r3, [r3, #6]
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d106      	bne.n	80048f4 <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	e005      	b.n	8004900 <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	79db      	ldrb	r3, [r3, #7]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d106      	bne.n	8004916 <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	e005      	b.n	8004922 <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	7a1b      	ldrb	r3, [r3, #8]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d106      	bne.n	8004938 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e005      	b.n	8004944 <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 0220 	bic.w	r2, r3, #32
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	7a5b      	ldrb	r3, [r3, #9]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d106      	bne.n	800495a <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f043 0210 	orr.w	r2, r3, #16
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e005      	b.n	8004966 <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f023 0210 	bic.w	r2, r3, #16
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	7a9b      	ldrb	r3, [r3, #10]
 800496a:	2b01      	cmp	r3, #1
 800496c:	d106      	bne.n	800497c <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	e005      	b.n	8004988 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f023 0208 	bic.w	r2, r3, #8
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	7adb      	ldrb	r3, [r3, #11]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d106      	bne.n	800499e <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f043 0204 	orr.w	r2, r3, #4
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e005      	b.n	80049aa <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 0204 	bic.w	r2, r3, #4
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	789b      	ldrb	r3, [r3, #2]
 80049ae:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	78db      	ldrb	r3, [r3, #3]
 80049b6:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80049ba:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	791b      	ldrb	r3, [r3, #4]
 80049c0:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80049c4:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	795b      	ldrb	r3, [r3, #5]
 80049ca:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80049ce:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	881b      	ldrh	r3, [r3, #0]
 80049d4:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80049d8:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80049f0:	e003      	b.n	80049fa <CAN_Init+0x17e>
   {
     wait_ack++;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	f103 0301 	add.w	r3, r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d004      	beq.n	8004a12 <CAN_Init+0x196>
 8004a08:	68ba      	ldr	r2, [r7, #8]
 8004a0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d1ef      	bne.n	80049f2 <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	73fb      	strb	r3, [r7, #15]
 8004a26:	e002      	b.n	8004a2e <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8004a28:	f04f 0301 	mov.w	r3, #1
 8004a2c:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	f107 0714 	add.w	r7, r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bc80      	pop	{r7}
 8004a3a:	4770      	bx	lr

08004a3c <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8004a44:	f04f 0300 	mov.w	r3, #0
 8004a48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	7a9b      	ldrb	r3, [r3, #10]
 8004a4e:	f04f 0201 	mov.w	r2, #1
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8004a58:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a5c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a60:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004a64:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a68:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004a6c:	f042 0201 	orr.w	r2, r2, #1
 8004a70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8004a74:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004a78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a7c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004a80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004a84:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	ea6f 0202 	mvn.w	r2, r2
 8004a8e:	400a      	ands	r2, r1
 8004a90:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	7b1b      	ldrb	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d133      	bne.n	8004b04 <CAN_FilterInit+0xc8>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8004a9c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004aa0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004aa4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004aa8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004aac:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	ea6f 0202 	mvn.w	r2, r2
 8004ab6:	400a      	ands	r2, r1
 8004ab8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004abc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004ac0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	88c9      	ldrh	r1, [r1, #6]
 8004acc:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8004ad0:	6879      	ldr	r1, [r7, #4]
 8004ad2:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8004ad4:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004ad6:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8004ada:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004ade:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004ae2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	8889      	ldrh	r1, [r1, #4]
 8004aee:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8004af2:	6879      	ldr	r1, [r7, #4]
 8004af4:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8004af6:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004af8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8004afc:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004b00:	18d3      	adds	r3, r2, r3
 8004b02:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	7b1b      	ldrb	r3, [r3, #12]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d131      	bne.n	8004b70 <CAN_FilterInit+0x134>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8004b0c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b14:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004b18:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b1c:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004b28:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	8809      	ldrh	r1, [r1, #0]
 8004b38:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8004b3c:	6879      	ldr	r1, [r7, #4]
 8004b3e:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8004b40:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004b42:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8004b46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004b4a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004b4e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	8889      	ldrh	r1, [r1, #4]
 8004b5a:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8004b62:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004b64:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8004b68:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004b6c:	18d3      	adds	r3, r2, r3
 8004b6e:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	7adb      	ldrb	r3, [r3, #11]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d110      	bne.n	8004b9a <CAN_FilterInit+0x15e>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8004b78:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b7c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b80:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004b84:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b88:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8004b8c:	68fa      	ldr	r2, [r7, #12]
 8004b8e:	ea6f 0202 	mvn.w	r2, r2
 8004b92:	400a      	ands	r2, r1
 8004b94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8004b98:	e00d      	b.n	8004bb6 <CAN_FilterInit+0x17a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8004b9a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004b9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004ba2:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004ba6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004baa:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	891b      	ldrh	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10f      	bne.n	8004bde <CAN_FilterInit+0x1a2>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8004bbe:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004bc2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bc6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004bca:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004bce:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	ea6f 0202 	mvn.w	r2, r2
 8004bd8:	400a      	ands	r2, r1
 8004bda:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	891b      	ldrh	r3, [r3, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10d      	bne.n	8004c02 <CAN_FilterInit+0x1c6>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8004be6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004bea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bee:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004bf2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004bf6:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7b5b      	ldrb	r3, [r3, #13]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10d      	bne.n	8004c26 <CAN_FilterInit+0x1ea>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8004c0a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004c0e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c12:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004c16:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c1a:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	430a      	orrs	r2, r1
 8004c22:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8004c26:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004c2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c2e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004c32:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004c36:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004c3a:	f022 0201 	bic.w	r2, r2, #1
 8004c3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004c42:	f107 0714 	add.w	r7, r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr

08004c4c <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f04f 0200 	mov.w	r2, #0
 8004c82:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f04f 0200 	mov.w	r2, #0
 8004c8a:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f04f 0203 	mov.w	r2, #3
 8004c9a:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f04f 0202 	mov.w	r2, #2
 8004ca2:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f04f 0201 	mov.w	r2, #1
 8004caa:	801a      	strh	r2, [r3, #0]
}
 8004cac:	f107 070c 	add.w	r7, r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bc80      	pop	{r7}
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop

08004cb8 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8004cc2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004cc6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004cca:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004cce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004cd2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8004cde:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004ce2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004ce6:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004cea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004cee:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004cf2:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8004cf6:	f022 020e 	bic.w	r2, r2, #14
 8004cfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8004cfe:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d06:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004d0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004d0e:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8004d12:	79fa      	ldrb	r2, [r7, #7]
 8004d14:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8004d1e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004d22:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004d26:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004d2a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004d2e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004d32:	f022 0201 	bic.w	r2, r2, #1
 8004d36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004d3a:	f107 070c 	add.w	r7, r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e005      	b.n	8004d70 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	601a      	str	r2, [r3, #0]
  }
}
 8004d70:	f107 070c 	add.w	r7, r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bc80      	pop	{r7}
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop

08004d7c <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	460b      	mov	r3, r1
 8004d86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d01e      	beq.n	8004dcc <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8004da0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004db0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004dc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8004dca:	e01d      	b.n	8004e08 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8004dde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004dee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004dfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8004e08:	f107 070c 	add.w	r7, r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b085      	sub	sp, #20
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 8004e30:	f04f 0300 	mov.w	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
 8004e36:	e016      	b.n	8004e66 <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d003      	beq.n	8004e4c <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 8004e44:	f04f 0301 	mov.w	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e00c      	b.n	8004e66 <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d003      	beq.n	8004e60 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 8004e58:	f04f 0302 	mov.w	r3, #2
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	e002      	b.n	8004e66 <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8004e60:	f04f 0304 	mov.w	r3, #4
 8004e64:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b04      	cmp	r3, #4
 8004e6a:	f000 80ba 	beq.w	8004fe2 <CAN_Transmit+0x1ce>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	7bfa      	ldrb	r2, [r7, #15]
 8004e72:	6879      	ldr	r1, [r7, #4]
 8004e74:	f102 0218 	add.w	r2, r2, #24
 8004e78:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004e7c:	188a      	adds	r2, r1, r2
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	f002 0201 	and.w	r2, r2, #1
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	f103 0318 	add.w	r3, r3, #24
 8004e8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004e8e:	18cb      	adds	r3, r1, r3
 8004e90:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	7a1b      	ldrb	r3, [r3, #8]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d118      	bne.n	8004ecc <CAN_Transmit+0xb8>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	7bfa      	ldrb	r2, [r7, #15]
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	f102 0218 	add.w	r2, r2, #24
 8004ea4:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004ea8:	188a      	adds	r2, r1, r2
 8004eaa:	6811      	ldr	r1, [r2, #0]
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	6812      	ldr	r2, [r2, #0]
 8004eb0:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8004eb8:	4302      	orrs	r2, r0
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	f103 0318 	add.w	r3, r3, #24
 8004ec2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004ec6:	18cb      	adds	r3, r1, r3
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e01a      	b.n	8004f02 <CAN_Transmit+0xee>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	7bfa      	ldrb	r2, [r7, #15]
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	f102 0218 	add.w	r2, r2, #24
 8004ed6:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004eda:	188a      	adds	r2, r1, r2
 8004edc:	6811      	ldr	r1, [r2, #0]
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	6852      	ldr	r2, [r2, #4]
 8004ee2:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 8004ee6:	683a      	ldr	r2, [r7, #0]
 8004ee8:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8004eea:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8004ef0:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	f103 0318 	add.w	r3, r3, #24
 8004efa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004efe:	18cb      	adds	r3, r1, r3
 8004f00:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	7a9b      	ldrb	r3, [r3, #10]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	7bfa      	ldrb	r2, [r7, #15]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	f102 0218 	add.w	r2, r2, #24
 8004f1a:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004f1e:	188a      	adds	r2, r1, r2
 8004f20:	6852      	ldr	r2, [r2, #4]
 8004f22:	f022 020f 	bic.w	r2, r2, #15
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	f103 0318 	add.w	r3, r3, #24
 8004f2c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004f30:	18cb      	adds	r3, r1, r3
 8004f32:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8004f34:	7bfb      	ldrb	r3, [r7, #15]
 8004f36:	7bfa      	ldrb	r2, [r7, #15]
 8004f38:	6879      	ldr	r1, [r7, #4]
 8004f3a:	f102 0218 	add.w	r2, r2, #24
 8004f3e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004f42:	188a      	adds	r2, r1, r2
 8004f44:	6851      	ldr	r1, [r2, #4]
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	7a92      	ldrb	r2, [r2, #10]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	6879      	ldr	r1, [r7, #4]
 8004f4e:	f103 0318 	add.w	r3, r3, #24
 8004f52:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004f56:	18cb      	adds	r3, r1, r3
 8004f58:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004f5a:	7bfb      	ldrb	r3, [r7, #15]
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	7b92      	ldrb	r2, [r2, #14]
 8004f60:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8004f64:	683a      	ldr	r2, [r7, #0]
 8004f66:	7b52      	ldrb	r2, [r2, #13]
 8004f68:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004f6c:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	7b12      	ldrb	r2, [r2, #12]
 8004f72:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8004f76:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8004f7c:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8004f7e:	6879      	ldr	r1, [r7, #4]
 8004f80:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004f84:	18cb      	adds	r3, r1, r3
 8004f86:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004f8a:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	7c92      	ldrb	r2, [r2, #18]
 8004f92:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	7c52      	ldrb	r2, [r2, #17]
 8004f9a:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8004f9e:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	7c12      	ldrb	r2, [r2, #16]
 8004fa4:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8004fa8:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8004faa:	683a      	ldr	r2, [r7, #0]
 8004fac:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8004fae:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8004fb0:	6879      	ldr	r1, [r7, #4]
 8004fb2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004fb6:	18cb      	adds	r3, r1, r3
 8004fb8:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004fbc:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	7bfa      	ldrb	r2, [r7, #15]
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	f102 0218 	add.w	r2, r2, #24
 8004fc8:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004fcc:	188a      	adds	r2, r1, r2
 8004fce:	6812      	ldr	r2, [r2, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	6879      	ldr	r1, [r7, #4]
 8004fd6:	f103 0318 	add.w	r3, r3, #24
 8004fda:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004fde:	18cb      	adds	r3, r1, r3
 8004fe0:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f107 0714 	add.w	r7, r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bc80      	pop	{r7}
 8004fee:	4770      	bx	lr

08004ff0 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8005002:	78fb      	ldrb	r3, [r7, #3]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d00c      	beq.n	8005022 <CAN_TransmitStatus+0x32>
 8005008:	2b02      	cmp	r3, #2
 800500a:	d013      	beq.n	8005034 <CAN_TransmitStatus+0x44>
 800500c:	2b00      	cmp	r3, #0
 800500e:	d11a      	bne.n	8005046 <CAN_TransmitStatus+0x56>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	f04f 0303 	mov.w	r3, #3
 8005018:	f2c0 4300 	movt	r3, #1024	; 0x400
 800501c:	4013      	ands	r3, r2
 800501e:	60fb      	str	r3, [r7, #12]
      break;
 8005020:	e015      	b.n	800504e <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800502a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800502e:	4013      	ands	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
      break;
 8005032:	e00c      	b.n	800504e <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689a      	ldr	r2, [r3, #8]
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	f2c1 0303 	movt	r3, #4099	; 0x1003
 8005040:	4013      	ands	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
      break;
 8005044:	e003      	b.n	800504e <CAN_TransmitStatus+0x5e>
    default:
      state = CAN_TxStatus_Failed;
 8005046:	f04f 0300 	mov.w	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
      break;
 800504c:	bf00      	nop
  }
  switch (state)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005054:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005058:	4293      	cmp	r3, r2
 800505a:	d02f      	beq.n	80050bc <CAN_TransmitStatus+0xcc>
 800505c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005060:	f6c0 0200 	movt	r2, #2048	; 0x800
 8005064:	4293      	cmp	r3, r2
 8005066:	d80e      	bhi.n	8005086 <CAN_TransmitStatus+0x96>
 8005068:	f04f 0201 	mov.w	r2, #1
 800506c:	f2c0 4200 	movt	r2, #1024	; 0x400
 8005070:	4293      	cmp	r3, r2
 8005072:	d01f      	beq.n	80050b4 <CAN_TransmitStatus+0xc4>
 8005074:	f04f 0203 	mov.w	r2, #3
 8005078:	f2c0 4200 	movt	r2, #1024	; 0x400
 800507c:	4293      	cmp	r3, r2
 800507e:	d025      	beq.n	80050cc <CAN_TransmitStatus+0xdc>
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <CAN_TransmitStatus+0xbc>
 8005084:	e02e      	b.n	80050e4 <CAN_TransmitStatus+0xf4>
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f2c1 0201 	movt	r2, #4097	; 0x1001
 800508e:	4293      	cmp	r3, r2
 8005090:	d018      	beq.n	80050c4 <CAN_TransmitStatus+0xd4>
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f2c1 0203 	movt	r2, #4099	; 0x1003
 800509a:	4293      	cmp	r3, r2
 800509c:	d01e      	beq.n	80050dc <CAN_TransmitStatus+0xec>
 800509e:	f44f 7240 	mov.w	r2, #768	; 0x300
 80050a2:	f6c0 0200 	movt	r2, #2048	; 0x800
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d014      	beq.n	80050d4 <CAN_TransmitStatus+0xe4>
 80050aa:	e01b      	b.n	80050e4 <CAN_TransmitStatus+0xf4>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 80050ac:	f04f 0302 	mov.w	r3, #2
 80050b0:	60fb      	str	r3, [r7, #12]
      break;
 80050b2:	e01b      	b.n	80050ec <CAN_TransmitStatus+0xfc>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 80050b4:	f04f 0300 	mov.w	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
      break;
 80050ba:	e017      	b.n	80050ec <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
      break;
 80050c2:	e013      	b.n	80050ec <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
      break;
 80050ca:	e00f      	b.n	80050ec <CAN_TransmitStatus+0xfc>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 80050cc:	f04f 0301 	mov.w	r3, #1
 80050d0:	60fb      	str	r3, [r7, #12]
      break;
 80050d2:	e00b      	b.n	80050ec <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 80050d4:	f04f 0301 	mov.w	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
      break;
 80050da:	e007      	b.n	80050ec <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 80050dc:	f04f 0301 	mov.w	r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
      break;
 80050e2:	e003      	b.n	80050ec <CAN_TransmitStatus+0xfc>
    default: state = CAN_TxStatus_Failed;
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
      break;
 80050ea:	bf00      	nop
  }
  return (uint8_t) state;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	b2db      	uxtb	r3, r3
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	f107 0714 	add.w	r7, r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	460b      	mov	r3, r1
 8005106:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d00a      	beq.n	8005124 <CAN_CancelTransmit+0x28>
 800510e:	2b02      	cmp	r3, #2
 8005110:	d00f      	beq.n	8005132 <CAN_CancelTransmit+0x36>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d114      	bne.n	8005140 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	609a      	str	r2, [r3, #8]
      break;
 8005122:	e00e      	b.n	8005142 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	609a      	str	r2, [r3, #8]
      break;
 8005130:	e007      	b.n	8005142 <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
      break;
 800513e:	e000      	b.n	8005142 <CAN_CancelTransmit+0x46>
    default:
      break;
 8005140:	bf00      	nop
  }
}
 8005142:	f107 070c 	add.w	r7, r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	460b      	mov	r3, r1
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800515a:	7afb      	ldrb	r3, [r7, #11]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	f103 031b 	add.w	r3, r3, #27
 8005162:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005166:	18d3      	adds	r3, r2, r3
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	b2da      	uxtb	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	7a1b      	ldrb	r3, [r3, #8]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10c      	bne.n	8005198 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f103 031b 	add.w	r3, r3, #27
 8005186:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800518a:	18d3      	adds	r3, r2, r3
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	ea4f 5253 	mov.w	r2, r3, lsr #21
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e00b      	b.n	80051b0 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8005198:	7afb      	ldrb	r3, [r7, #11]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	f103 031b 	add.w	r3, r3, #27
 80051a0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80051a4:	18d3      	adds	r3, r2, r3
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	f103 031b 	add.w	r3, r3, #27
 80051b8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80051bc:	18d3      	adds	r3, r2, r3
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80051cc:	7afb      	ldrb	r3, [r7, #11]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	f103 031b 	add.w	r3, r3, #27
 80051d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80051d8:	18d3      	adds	r3, r2, r3
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80051e8:	7afb      	ldrb	r3, [r7, #11]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	f103 031b 	add.w	r3, r3, #27
 80051f0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8005202:	7afb      	ldrb	r3, [r7, #11]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800520a:	18d3      	adds	r3, r2, r3
 800520c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	b2da      	uxtb	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8005218:	7afb      	ldrb	r3, [r7, #11]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005220:	18d3      	adds	r3, r2, r3
 8005222:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800522c:	b2da      	uxtb	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8005232:	7afb      	ldrb	r3, [r7, #11]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800523a:	18d3      	adds	r3, r2, r3
 800523c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005246:	b2da      	uxtb	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800524c:	7afb      	ldrb	r3, [r7, #11]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005254:	18d3      	adds	r3, r2, r3
 8005256:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8005260:	b2da      	uxtb	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8005266:	7afb      	ldrb	r3, [r7, #11]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800526e:	18d3      	adds	r3, r2, r3
 8005270:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	b2da      	uxtb	r2, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 800527c:	7afb      	ldrb	r3, [r7, #11]
 800527e:	68fa      	ldr	r2, [r7, #12]
 8005280:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005284:	18d3      	adds	r3, r2, r3
 8005286:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8005290:	b2da      	uxtb	r2, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800529e:	18d3      	adds	r3, r2, r3
 80052a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80052b0:	7afb      	ldrb	r3, [r7, #11]
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80052b8:	18d3      	adds	r3, r2, r3
 80052ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80052c4:	b2da      	uxtb	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80052ca:	7afb      	ldrb	r3, [r7, #11]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d106      	bne.n	80052de <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	60da      	str	r2, [r3, #12]
 80052dc:	e005      	b.n	80052ea <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f043 0220 	orr.w	r2, r3, #32
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	611a      	str	r2, [r3, #16]
  }
}
 80052ea:	f107 0714 	add.w	r7, r7, #20
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8005300:	78fb      	ldrb	r3, [r7, #3]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d106      	bne.n	8005314 <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60da      	str	r2, [r3, #12]
 8005312:	e005      	b.n	8005320 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f043 0220 	orr.w	r2, r3, #32
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	611a      	str	r2, [r3, #16]
  }
}
 8005320:	f107 070c 	add.w	r7, r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop

0800532c <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	460b      	mov	r3, r1
 8005336:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 800533e:	78fb      	ldrb	r3, [r7, #3]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d106      	bne.n	8005352 <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	73fb      	strb	r3, [r7, #15]
 8005350:	e00c      	b.n	800536c <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 8005352:	78fb      	ldrb	r3, [r7, #3]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d106      	bne.n	8005366 <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	f003 0303 	and.w	r3, r3, #3
 8005362:	73fb      	strb	r3, [r7, #15]
 8005364:	e002      	b.n	800536c <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	f107 0714 	add.w	r7, r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop

0800537c <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	460b      	mov	r3, r1
 8005386:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 800538e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005392:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8005394:	78fb      	ldrb	r3, [r7, #3]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d123      	bne.n	80053e2 <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	f043 0201 	orr.w	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80053aa:	e003      	b.n	80053b4 <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80053b2:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d002      	beq.n	80053c6 <CAN_OperatingModeRequest+0x4a>
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1f2      	bne.n	80053ac <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d003      	beq.n	80053da <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 80053d2:	f04f 0300 	mov.w	r3, #0
 80053d6:	73fb      	strb	r3, [r7, #15]
 80053d8:	e052      	b.n	8005480 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 80053da:	f04f 0301 	mov.w	r3, #1
 80053de:	73fb      	strb	r3, [r7, #15]
 80053e0:	e04e      	b.n	8005480 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 80053e2:	78fb      	ldrb	r3, [r7, #3]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d121      	bne.n	800542c <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f023 0203 	bic.w	r2, r3, #3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 80053f4:	e003      	b.n	80053fe <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80053fc:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <CAN_OperatingModeRequest+0x94>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f2      	bne.n	80053f6 <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 800541c:	f04f 0300 	mov.w	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
 8005422:	e02d      	b.n	8005480 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8005424:	f04f 0301 	mov.w	r3, #1
 8005428:	73fb      	strb	r3, [r7, #15]
 800542a:	e029      	b.n	8005480 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 800542c:	78fb      	ldrb	r3, [r7, #3]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d123      	bne.n	800547a <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	f043 0202 	orr.w	r2, r3, #2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8005442:	e003      	b.n	800544c <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f103 33ff 	add.w	r3, r3, #4294967295
 800544a:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d002      	beq.n	800545e <CAN_OperatingModeRequest+0xe2>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f2      	bne.n	8005444 <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f003 0303 	and.w	r3, r3, #3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d003      	beq.n	8005472 <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	73fb      	strb	r3, [r7, #15]
 8005470:	e006      	b.n	8005480 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8005472:	f04f 0301 	mov.w	r3, #1
 8005476:	73fb      	strb	r3, [r7, #15]
 8005478:	e002      	b.n	8005480 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8005480:	7bfb      	ldrb	r3, [r7, #15]
}
 8005482:	4618      	mov	r0, r3
 8005484:	f107 0714 	add.w	r7, r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop

08005490 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8005490:	b480      	push	{r7}
 8005492:	b085      	sub	sp, #20
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	f043 0202 	orr.w	r2, r3, #2
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d102      	bne.n	80054c0 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80054ba:	f04f 0301 	mov.w	r3, #1
 80054be:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	f107 0714 	add.w	r7, r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop

080054d0 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 80054d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80054dc:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f023 0202 	bic.w	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80054f0:	e003      	b.n	80054fa <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80054f8:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <CAN_WakeUp+0x3c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1f2      	bne.n	80054f2 <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d102      	bne.n	800551e <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8005518:	f04f 0301 	mov.w	r3, #1
 800551c:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 800551e:	7afb      	ldrb	r3, [r7, #11]
}
 8005520:	4618      	mov	r0, r3
 8005522:	f107 0714 	add.w	r7, r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	b2db      	uxtb	r3, r3
 8005540:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005544:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8005546:	7bfb      	ldrb	r3, [r7, #15]
}
 8005548:	4618      	mov	r0, r3
 800554a:	f107 0714 	add.w	r7, r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 800555c:	f04f 0300 	mov.w	r3, #0
 8005560:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	699b      	ldr	r3, [r3, #24]
 8005566:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800556a:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
}
 800556e:	4618      	mov	r0, r3
 8005570:	f107 0714 	add.w	r7, r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	bc80      	pop	{r7}
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop

0800557c <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8005584:	f04f 0300 	mov.w	r3, #0
 8005588:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005592:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8005596:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	f107 0714 	add.w	r7, r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bc80      	pop	{r7}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop

080055a8 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d006      	beq.n	80055ca <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	615a      	str	r2, [r3, #20]
 80055c8:	e007      	b.n	80055da <CAN_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	695a      	ldr	r2, [r3, #20]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	ea6f 0303 	mvn.w	r3, r3
 80055d4:	401a      	ands	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	615a      	str	r2, [r3, #20]
  }
}
 80055da:	f107 0714 	add.w	r7, r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr

080055e4 <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80055ee:	f04f 0300 	mov.w	r3, #0
 80055f2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d011      	beq.n	8005622 <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	4013      	ands	r3, r2
 8005606:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800560a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <CAN_GetFlagStatus+0x36>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8005612:	f04f 0301 	mov.w	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
 8005618:	e059      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800561a:	f04f 0300 	mov.w	r3, #0
 800561e:	73fb      	strb	r3, [r7, #15]
 8005620:	e055      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005628:	2b00      	cmp	r3, #0
 800562a:	d011      	beq.n	8005650 <CAN_GetFlagStatus+0x6c>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	4013      	ands	r3, r2
 8005634:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <CAN_GetFlagStatus+0x64>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8005640:	f04f 0301 	mov.w	r3, #1
 8005644:	73fb      	strb	r3, [r7, #15]
 8005646:	e042      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8005648:	f04f 0300 	mov.w	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e03e      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d011      	beq.n	800567e <CAN_GetFlagStatus+0x9a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689a      	ldr	r2, [r3, #8]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	4013      	ands	r3, r2
 8005662:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005666:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <CAN_GetFlagStatus+0x92>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800566e:	f04f 0301 	mov.w	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
 8005674:	e02b      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	73fb      	strb	r3, [r7, #15]
 800567c:	e027      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d011      	beq.n	80056ac <CAN_GetFlagStatus+0xc8>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68da      	ldr	r2, [r3, #12]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	4013      	ands	r3, r2
 8005690:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005694:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d003      	beq.n	80056a4 <CAN_GetFlagStatus+0xc0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800569c:	f04f 0301 	mov.w	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
 80056a2:	e014      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80056a4:	f04f 0300 	mov.w	r3, #0
 80056a8:	73fb      	strb	r3, [r7, #15]
 80056aa:	e010      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691a      	ldr	r2, [r3, #16]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	4013      	ands	r3, r2
 80056b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056b8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <CAN_GetFlagStatus+0xe4>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80056c0:	f04f 0301 	mov.w	r3, #1
 80056c4:	73fb      	strb	r3, [r7, #15]
 80056c6:	e002      	b.n	80056ce <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80056c8:	f04f 0300 	mov.w	r3, #0
 80056cc:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	f107 0714 	add.w	r7, r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 80056e6:	f04f 0300 	mov.w	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	f04f 0370 	mov.w	r3, #112	; 0x70
 80056f2:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d104      	bne.n	8005704 <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	619a      	str	r2, [r3, #24]
 8005702:	e023      	b.n	800574c <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800570a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800570e:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	60da      	str	r2, [r3, #12]
 8005720:	e014      	b.n	800574c <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	611a      	str	r2, [r3, #16]
 8005732:	e00b      	b.n	800574c <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d003      	beq.n	8005746 <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	609a      	str	r2, [r3, #8]
 8005744:	e002      	b.n	800574c <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	605a      	str	r2, [r3, #4]
    }
  }
}
 800574c:	f107 0714 	add.w	r7, r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	bc80      	pop	{r7}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695a      	ldr	r2, [r3, #20]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	4013      	ands	r3, r2
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 80c4 	beq.w	80058fe <CAN_GetITStatus+0x1a6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b40      	cmp	r3, #64	; 0x40
 800577a:	d06b      	beq.n	8005854 <CAN_GetITStatus+0xfc>
 800577c:	2b40      	cmp	r3, #64	; 0x40
 800577e:	d80f      	bhi.n	80057a0 <CAN_GetITStatus+0x48>
 8005780:	2b04      	cmp	r3, #4
 8005782:	d03f      	beq.n	8005804 <CAN_GetITStatus+0xac>
 8005784:	2b04      	cmp	r3, #4
 8005786:	d804      	bhi.n	8005792 <CAN_GetITStatus+0x3a>
 8005788:	2b01      	cmp	r3, #1
 800578a:	d025      	beq.n	80057d8 <CAN_GetITStatus+0x80>
 800578c:	2b02      	cmp	r3, #2
 800578e:	d02f      	beq.n	80057f0 <CAN_GetITStatus+0x98>
 8005790:	e0b1      	b.n	80058f6 <CAN_GetITStatus+0x19e>
 8005792:	2b10      	cmp	r3, #16
 8005794:	d04a      	beq.n	800582c <CAN_GetITStatus+0xd4>
 8005796:	2b20      	cmp	r3, #32
 8005798:	d052      	beq.n	8005840 <CAN_GetITStatus+0xe8>
 800579a:	2b08      	cmp	r3, #8
 800579c:	d03c      	beq.n	8005818 <CAN_GetITStatus+0xc0>
 800579e:	e0aa      	b.n	80058f6 <CAN_GetITStatus+0x19e>
 80057a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057a4:	f000 8092 	beq.w	80058cc <CAN_GetITStatus+0x174>
 80057a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ac:	d809      	bhi.n	80057c2 <CAN_GetITStatus+0x6a>
 80057ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057b2:	d077      	beq.n	80058a4 <CAN_GetITStatus+0x14c>
 80057b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057b8:	d07e      	beq.n	80058b8 <CAN_GetITStatus+0x160>
 80057ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057be:	d067      	beq.n	8005890 <CAN_GetITStatus+0x138>
 80057c0:	e099      	b.n	80058f6 <CAN_GetITStatus+0x19e>
 80057c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c6:	d04f      	beq.n	8005868 <CAN_GetITStatus+0x110>
 80057c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057cc:	d056      	beq.n	800587c <CAN_GetITStatus+0x124>
 80057ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057d2:	f000 8085 	beq.w	80058e0 <CAN_GetITStatus+0x188>
 80057d6:	e08e      	b.n	80058f6 <CAN_GetITStatus+0x19e>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	4618      	mov	r0, r3
 80057de:	f240 1101 	movw	r1, #257	; 0x101
 80057e2:	f2c0 0101 	movt	r1, #1
 80057e6:	f000 f911 	bl	8005a0c <CheckITStatus>
 80057ea:	4603      	mov	r3, r0
 80057ec:	73fb      	strb	r3, [r7, #15]
        break;
 80057ee:	e089      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f04f 0103 	mov.w	r1, #3
 80057fa:	f000 f907 	bl	8005a0c <CheckITStatus>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
        break;
 8005802:	e07f      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	4618      	mov	r0, r3
 800580a:	f04f 0108 	mov.w	r1, #8
 800580e:	f000 f8fd 	bl	8005a0c <CheckITStatus>
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
        break;
 8005816:	e075      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	4618      	mov	r0, r3
 800581e:	f04f 0110 	mov.w	r1, #16
 8005822:	f000 f8f3 	bl	8005a0c <CheckITStatus>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
        break;
 800582a:	e06b      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	4618      	mov	r0, r3
 8005832:	f04f 0103 	mov.w	r1, #3
 8005836:	f000 f8e9 	bl	8005a0c <CheckITStatus>
 800583a:	4603      	mov	r3, r0
 800583c:	73fb      	strb	r3, [r7, #15]
        break;
 800583e:	e061      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4618      	mov	r0, r3
 8005846:	f04f 0108 	mov.w	r1, #8
 800584a:	f000 f8df 	bl	8005a0c <CheckITStatus>
 800584e:	4603      	mov	r3, r0
 8005850:	73fb      	strb	r3, [r7, #15]
        break;
 8005852:	e057      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	4618      	mov	r0, r3
 800585a:	f04f 0110 	mov.w	r1, #16
 800585e:	f000 f8d5 	bl	8005a0c <CheckITStatus>
 8005862:	4603      	mov	r3, r0
 8005864:	73fb      	strb	r3, [r7, #15]
        break;
 8005866:	e04d      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	4618      	mov	r0, r3
 800586e:	f04f 0108 	mov.w	r1, #8
 8005872:	f000 f8cb 	bl	8005a0c <CheckITStatus>
 8005876:	4603      	mov	r3, r0
 8005878:	73fb      	strb	r3, [r7, #15]
        break;
 800587a:	e043      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4618      	mov	r0, r3
 8005882:	f04f 0110 	mov.w	r1, #16
 8005886:	f000 f8c1 	bl	8005a0c <CheckITStatus>
 800588a:	4603      	mov	r3, r0
 800588c:	73fb      	strb	r3, [r7, #15]
        break;
 800588e:	e039      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	4618      	mov	r0, r3
 8005896:	f04f 0101 	mov.w	r1, #1
 800589a:	f000 f8b7 	bl	8005a0c <CheckITStatus>
 800589e:	4603      	mov	r3, r0
 80058a0:	73fb      	strb	r3, [r7, #15]
        break;
 80058a2:	e02f      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f04f 0102 	mov.w	r1, #2
 80058ae:	f000 f8ad 	bl	8005a0c <CheckITStatus>
 80058b2:	4603      	mov	r3, r0
 80058b4:	73fb      	strb	r3, [r7, #15]
        break;
 80058b6:	e025      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	4618      	mov	r0, r3
 80058be:	f04f 0104 	mov.w	r1, #4
 80058c2:	f000 f8a3 	bl	8005a0c <CheckITStatus>
 80058c6:	4603      	mov	r3, r0
 80058c8:	73fb      	strb	r3, [r7, #15]
        break;
 80058ca:	e01b      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f04f 0170 	mov.w	r1, #112	; 0x70
 80058d6:	f000 f899 	bl	8005a0c <CheckITStatus>
 80058da:	4603      	mov	r3, r0
 80058dc:	73fb      	strb	r3, [r7, #15]
        break;
 80058de:	e011      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f04f 0104 	mov.w	r1, #4
 80058ea:	f000 f88f 	bl	8005a0c <CheckITStatus>
 80058ee:	4603      	mov	r3, r0
 80058f0:	73fb      	strb	r3, [r7, #15]
        break;
 80058f2:	bf00      	nop
 80058f4:	e006      	b.n	8005904 <CAN_GetITStatus+0x1ac>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	73fb      	strb	r3, [r7, #15]
        break;
 80058fc:	e002      	b.n	8005904 <CAN_GetITStatus+0x1ac>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80058fe:	f04f 0300 	mov.w	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	f107 0710 	add.w	r7, r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005920:	d04c      	beq.n	80059bc <CAN_ClearITPendingBit+0xac>
 8005922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005926:	d80d      	bhi.n	8005944 <CAN_ClearITPendingBit+0x34>
 8005928:	2b08      	cmp	r3, #8
 800592a:	d02e      	beq.n	800598a <CAN_ClearITPendingBit+0x7a>
 800592c:	2b08      	cmp	r3, #8
 800592e:	d804      	bhi.n	800593a <CAN_ClearITPendingBit+0x2a>
 8005930:	2b01      	cmp	r3, #1
 8005932:	d01e      	beq.n	8005972 <CAN_ClearITPendingBit+0x62>
 8005934:	2b04      	cmp	r3, #4
 8005936:	d023      	beq.n	8005980 <CAN_ClearITPendingBit+0x70>
 8005938:	e061      	b.n	80059fe <CAN_ClearITPendingBit+0xee>
 800593a:	2b20      	cmp	r3, #32
 800593c:	d02a      	beq.n	8005994 <CAN_ClearITPendingBit+0x84>
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d02d      	beq.n	800599e <CAN_ClearITPendingBit+0x8e>
 8005942:	e05c      	b.n	80059fe <CAN_ClearITPendingBit+0xee>
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005948:	d047      	beq.n	80059da <CAN_ClearITPendingBit+0xca>
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594e:	d806      	bhi.n	800595e <CAN_ClearITPendingBit+0x4e>
 8005950:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005954:	d037      	beq.n	80059c6 <CAN_ClearITPendingBit+0xb6>
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800595a:	d039      	beq.n	80059d0 <CAN_ClearITPendingBit+0xc0>
 800595c:	e04f      	b.n	80059fe <CAN_ClearITPendingBit+0xee>
 800595e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005962:	d021      	beq.n	80059a8 <CAN_ClearITPendingBit+0x98>
 8005964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005968:	d023      	beq.n	80059b2 <CAN_ClearITPendingBit+0xa2>
 800596a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800596e:	d03d      	beq.n	80059ec <CAN_ClearITPendingBit+0xdc>
 8005970:	e045      	b.n	80059fe <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	f240 1301 	movw	r3, #257	; 0x101
 8005978:	f2c0 0301 	movt	r3, #1
 800597c:	6093      	str	r3, [r2, #8]
      break;
 800597e:	e03f      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f04f 0208 	mov.w	r2, #8
 8005986:	60da      	str	r2, [r3, #12]
      break;
 8005988:	e03a      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f04f 0210 	mov.w	r2, #16
 8005990:	60da      	str	r2, [r3, #12]
      break;
 8005992:	e035      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f04f 0208 	mov.w	r2, #8
 800599a:	611a      	str	r2, [r3, #16]
      break;
 800599c:	e030      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f04f 0210 	mov.w	r2, #16
 80059a4:	611a      	str	r2, [r3, #16]
      break;
 80059a6:	e02b      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f04f 0208 	mov.w	r2, #8
 80059ae:	605a      	str	r2, [r3, #4]
      break;
 80059b0:	e026      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f04f 0210 	mov.w	r2, #16
 80059b8:	605a      	str	r2, [r3, #4]
      break;
 80059ba:	e021      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f04f 0204 	mov.w	r2, #4
 80059c2:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 80059c4:	e01c      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f04f 0204 	mov.w	r2, #4
 80059cc:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 80059ce:	e017      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f04f 0204 	mov.w	r2, #4
 80059d6:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 80059d8:	e012      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f04f 0204 	mov.w	r2, #4
 80059e8:	605a      	str	r2, [r3, #4]
      break;
 80059ea:	e009      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f04f 0200 	mov.w	r2, #0
 80059f2:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f04f 0204 	mov.w	r2, #4
 80059fa:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 80059fc:	e000      	b.n	8005a00 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 80059fe:	bf00      	nop
   }
}
 8005a00:	f107 070c 	add.w	r7, r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bc80      	pop	{r7}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop

08005a0c <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 8005a26:	f04f 0301 	mov.w	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
 8005a2c:	e002      	b.n	8005a34 <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8005a2e:	f04f 0300 	mov.w	r3, #0
 8005a32:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8005a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	f107 0714 	add.w	r7, r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop

08005a44 <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8005a48:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a50:	f04f 0201 	mov.w	r2, #1
 8005a54:	609a      	str	r2, [r3, #8]
}
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 8005a64:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8005a70:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005a74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005a78:	681b      	ldr	r3, [r3, #0]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f107 070c 	add.w	r7, r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop

08005a88 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 8005a92:	f04f 0300 	mov.w	r3, #0
 8005a96:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 8005a98:	f04f 0300 	mov.w	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e00e      	b.n	8005abe <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 8005aa0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005aa4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	188a      	adds	r2, r1, r2
 8005ab2:	6812      	ldr	r2, [r2, #0]
 8005ab4:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f103 0301 	add.w	r3, r3, #1
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d3ec      	bcc.n	8005aa0 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 8005ac6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005aca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ace:	681b      	ldr	r3, [r3, #0]
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f107 0714 	add.w	r7, r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bc80      	pop	{r7}
 8005ada:	4770      	bx	lr

08005adc <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8005ae0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005ae4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ae8:	681b      	ldr	r3, [r3, #0]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop

08005af4 <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	4603      	mov	r3, r0
 8005afc:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8005afe:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b06:	79fa      	ldrb	r2, [r7, #7]
 8005b08:	711a      	strb	r2, [r3, #4]
}
 8005b0a:	f107 070c 	add.w	r7, r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr

08005b14 <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8005b18:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005b1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005b20:	791b      	ldrb	r3, [r3, #4]
 8005b22:	b2db      	uxtb	r3, r3
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bc80      	pop	{r7}
 8005b2a:	4770      	bx	lr

08005b2c <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8005b30:	f04f 0010 	mov.w	r0, #16
 8005b34:	f04f 0101 	mov.w	r1, #1
 8005b38:	f007 f89e 	bl	800cc78 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8005b3c:	f04f 0010 	mov.w	r0, #16
 8005b40:	f04f 0100 	mov.w	r1, #0
 8005b44:	f007 f898 	bl	800cc78 <RCC_AHB2PeriphResetCmd>
}
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop

08005b4c <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005b64:	6812      	ldr	r2, [r2, #0]
 8005b66:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8005b6a:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005b7c:	6811      	ldr	r1, [r2, #0]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	8852      	ldrh	r2, [r2, #2]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b9c:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 8005b9e:	f04f 0300 	mov.w	r3, #0
 8005ba2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005bae:	6811      	ldr	r1, [r2, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	8892      	ldrh	r2, [r2, #4]
 8005bb4:	430a      	orrs	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	885b      	ldrh	r3, [r3, #2]
 8005bbc:	2b20      	cmp	r3, #32
 8005bbe:	d00b      	beq.n	8005bd8 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8005bc4:	2b28      	cmp	r3, #40	; 0x28
 8005bc6:	d007      	beq.n	8005bd8 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8005bcc:	2b30      	cmp	r3, #48	; 0x30
 8005bce:	d003      	beq.n	8005bd8 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8005bd4:	2b38      	cmp	r3, #56	; 0x38
 8005bd6:	d118      	bne.n	8005c0a <CRYP_Init+0xbe>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8005bd8:	f04f 0300 	mov.w	r3, #0
 8005bdc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005be0:	f04f 0200 	mov.w	r2, #0
 8005be4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005bee:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005c00:	6811      	ldr	r1, [r2, #0]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	88d2      	ldrh	r2, [r2, #6]
 8005c06:	430a      	orrs	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005c12:	f04f 0200 	mov.w	r2, #0
 8005c16:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	f022 0204 	bic.w	r2, r2, #4
 8005c20:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8005c22:	f04f 0300 	mov.w	r3, #0
 8005c26:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005c32:	6811      	ldr	r1, [r2, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	8812      	ldrh	r2, [r2, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
}
 8005c3c:	f107 070c 	add.w	r7, r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bc80      	pop	{r7}
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop

08005c48 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f04f 0200 	mov.w	r2, #0
 8005c5e:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	80da      	strh	r2, [r3, #6]
}
 8005c70:	f107 070c 	add.w	r7, r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop

08005c7c <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8005c92:	f04f 0300 	mov.w	r3, #0
 8005c96:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6852      	ldr	r2, [r2, #4]
 8005c9e:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ca8:	687a      	ldr	r2, [r7, #4]
 8005caa:	6892      	ldr	r2, [r2, #8]
 8005cac:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68d2      	ldr	r2, [r2, #12]
 8005cba:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6912      	ldr	r2, [r2, #16]
 8005cc8:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8005cca:	f04f 0300 	mov.w	r3, #0
 8005cce:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	6952      	ldr	r2, [r2, #20]
 8005cd6:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8005cd8:	f04f 0300 	mov.w	r3, #0
 8005cdc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6992      	ldr	r2, [r2, #24]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	69d2      	ldr	r2, [r2, #28]
 8005cf2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005cf4:	f107 070c 	add.w	r7, r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop

08005d00 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	61da      	str	r2, [r3, #28]
}
 8005d48:	f107 070c 	add.w	r7, r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bc80      	pop	{r7}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6852      	ldr	r2, [r2, #4]
 8005d76:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6892      	ldr	r2, [r2, #8]
 8005d84:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8005d86:	f04f 0300 	mov.w	r3, #0
 8005d8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	68d2      	ldr	r2, [r2, #12]
 8005d92:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005d94:	f107 070c 	add.w	r7, r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bc80      	pop	{r7}
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop

08005da0 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	60da      	str	r2, [r3, #12]
}
 8005dc8:	f107 070c 	add.w	r7, r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bc80      	pop	{r7}
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop

08005dd4 <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005de0:	f04f 0200 	mov.w	r2, #0
 8005de4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dee:	601a      	str	r2, [r3, #0]
}
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bc80      	pop	{r7}
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop

08005df8 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00c      	beq.n	8005e22 <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005e10:	f04f 0200 	mov.w	r2, #0
 8005e14:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	e00b      	b.n	8005e3a <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8005e22:	f04f 0300 	mov.w	r3, #0
 8005e26:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005e32:	6812      	ldr	r2, [r2, #0]
 8005e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e38:	601a      	str	r2, [r3, #0]
  }
}
 8005e3a:	f107 070c 	add.w	r7, r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bc80      	pop	{r7}
 8005e42:	4770      	bx	lr

08005e44 <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	f107 070c 	add.w	r7, r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bc80      	pop	{r7}
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005e70:	68db      	ldr	r3, [r3, #12]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bc80      	pop	{r7}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop

08005e7c <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b087      	sub	sp, #28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8005e86:	f04f 0300 	mov.w	r3, #0
 8005e8a:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8005e8c:	f04f 0300 	mov.w	r3, #0
 8005e90:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8005e98:	f04f 0300 	mov.w	r3, #0
 8005e9c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005ea8:	6912      	ldr	r2, [r2, #16]
 8005eaa:	f022 0201 	bic.w	r2, r2, #1
 8005eae:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 0308 	and.w	r3, r3, #8
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d003      	beq.n	8005eca <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8005ec2:	f04f 0311 	mov.w	r3, #17
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e002      	b.n	8005ed0 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8005eca:	f04f 0315 	mov.w	r3, #21
 8005ece:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ed8:	685a      	ldr	r2, [r3, #4]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
    timeout++;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f103 0301 	add.w	r3, r3, #1
 8005ee6:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d002      	beq.n	8005ef8 <CRYP_SaveContext+0x7c>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d1eb      	bne.n	8005ed0 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d003      	beq.n	8005f12 <CRYP_SaveContext+0x96>
  {
    status = ERROR;
 8005f0a:	f04f 0300 	mov.w	r3, #0
 8005f0e:	74fb      	strb	r3, [r7, #19]
 8005f10:	e05f      	b.n	8005fd2 <CRYP_SaveContext+0x156>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8005f12:	f04f 0300 	mov.w	r3, #0
 8005f16:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005f22:	6912      	ldr	r2, [r2, #16]
 8005f24:	f022 0202 	bic.w	r2, r2, #2
 8005f28:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8005f2a:	f04f 0300 	mov.w	r3, #0
 8005f2e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f32:	f04f 0200 	mov.w	r2, #0
 8005f36:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f40:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8005f7e:	f04f 0300 	mov.w	r3, #0
 8005f82:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	695a      	ldr	r2, [r3, #20]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	699a      	ldr	r2, [r3, #24]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	69da      	ldr	r2, [r3, #28]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8005fcc:	f04f 0301 	mov.w	r3, #1
 8005fd0:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 8005fd2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f107 071c 	add.w	r7, r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bc80      	pop	{r7}
 8005fde:	4770      	bx	lr

08005fe0 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6812      	ldr	r2, [r2, #0]
 8005ff4:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6952      	ldr	r2, [r2, #20]
 8006002:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6992      	ldr	r2, [r2, #24]
 8006010:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	69d2      	ldr	r2, [r2, #28]
 800601e:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	6a12      	ldr	r2, [r2, #32]
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 800602e:	f04f 0300 	mov.w	r3, #0
 8006032:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800603a:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006048:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 800604a:	f04f 0300 	mov.w	r3, #0
 800604e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006056:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8006066:	f04f 0300 	mov.w	r3, #0
 800606a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6852      	ldr	r2, [r2, #4]
 8006072:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8006074:	f04f 0300 	mov.w	r3, #0
 8006078:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6892      	ldr	r2, [r2, #8]
 8006080:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	68d2      	ldr	r2, [r2, #12]
 800608e:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	6912      	ldr	r2, [r2, #16]
 800609c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 800609e:	f04f 0300 	mov.w	r3, #0
 80060a2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80060a6:	f04f 0200 	mov.w	r2, #0
 80060aa:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80060ae:	6812      	ldr	r2, [r2, #0]
 80060b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060b4:	601a      	str	r2, [r3, #0]
}
 80060b6:	f107 070c 	add.w	r7, r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr

080060c0 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	71fa      	strb	r2, [r7, #7]
 80060cc:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80060ce:	79bb      	ldrb	r3, [r7, #6]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <CRYP_DMACmd+0x2e>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80060e4:	6911      	ldr	r1, [r2, #16]
 80060e6:	79fa      	ldrb	r2, [r7, #7]
 80060e8:	430a      	orrs	r2, r1
 80060ea:	611a      	str	r2, [r3, #16]
 80060ec:	e00e      	b.n	800610c <CRYP_DMACmd+0x4c>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80060fe:	6911      	ldr	r1, [r2, #16]
 8006100:	79fa      	ldrb	r2, [r7, #7]
 8006102:	ea6f 0202 	mvn.w	r2, r2
 8006106:	b2d2      	uxtb	r2, r2
 8006108:	400a      	ands	r2, r1
 800610a:	611a      	str	r2, [r3, #16]
  }
}
 800610c:	f107 070c 	add.w	r7, r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	bc80      	pop	{r7}
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop

08006118 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	71fa      	strb	r2, [r7, #7]
 8006124:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006126:	79bb      	ldrb	r3, [r7, #6]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <CRYP_ITConfig+0x2e>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800613c:	6951      	ldr	r1, [r2, #20]
 800613e:	79fa      	ldrb	r2, [r7, #7]
 8006140:	430a      	orrs	r2, r1
 8006142:	615a      	str	r2, [r3, #20]
 8006144:	e00e      	b.n	8006164 <CRYP_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8006146:	f04f 0300 	mov.w	r3, #0
 800614a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8006156:	6951      	ldr	r1, [r2, #20]
 8006158:	79fa      	ldrb	r2, [r7, #7]
 800615a:	ea6f 0202 	mvn.w	r2, r2
 800615e:	b2d2      	uxtb	r2, r2
 8006160:	400a      	ands	r2, r1
 8006162:	615a      	str	r2, [r3, #20]
  }
}
 8006164:	f107 070c 	add.w	r7, r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	bc80      	pop	{r7}
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop

08006170 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	4603      	mov	r3, r0
 8006178:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8006180:	f04f 0300 	mov.w	r3, #0
 8006184:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8006188:	69da      	ldr	r2, [r3, #28]
 800618a:	79fb      	ldrb	r3, [r7, #7]
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <CRYP_GetITStatus+0x2a>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8006192:	f04f 0301 	mov.w	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
 8006198:	e002      	b.n	80061a0 <CRYP_GetITStatus+0x30>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	f107 0714 	add.w	r7, r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bc80      	pop	{r7}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop

080061b0 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 80061c0:	f04f 0300 	mov.w	r3, #0
 80061c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 80061c6:	79fb      	ldrb	r3, [r7, #7]
 80061c8:	f003 0320 	and.w	r3, r3, #32
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d006      	beq.n	80061de <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60bb      	str	r3, [r7, #8]
 80061dc:	e005      	b.n	80061ea <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 80061ea:	79fa      	ldrb	r2, [r7, #7]
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	4013      	ands	r3, r2
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 80061f4:	f04f 0301 	mov.w	r3, #1
 80061f8:	73fb      	strb	r3, [r7, #15]
 80061fa:	e002      	b.n	8006202 <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	f107 0714 	add.w	r7, r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	bc80      	pop	{r7}
 800620e:	4770      	bx	lr

08006210 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8006210:	b590      	push	{r4, r7, lr}
 8006212:	b0bb      	sub	sp, #236	; 0xec
 8006214:	af00      	add	r7, sp, #0
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607b      	str	r3, [r7, #4]
 800621a:	4603      	mov	r3, r0
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	4613      	mov	r3, r2
 8006220:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006222:	f04f 0300 	mov.w	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ErrorStatus status = SUCCESS;
 8006230:	f04f 0301 	mov.w	r3, #1
 8006234:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint32_t keyaddr    = (uint32_t)Key;
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t inputaddr  = (uint32_t)Input;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t outputaddr = (uint32_t)Output;
 8006244:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006248:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t i = 0;
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006254:	f107 0318 	add.w	r3, r7, #24
 8006258:	4618      	mov	r0, r3
 800625a:	f7ff fd51 	bl	8005d00 <CRYP_KeyStructInit>

  switch(Keysize)
 800625e:	89bb      	ldrh	r3, [r7, #12]
 8006260:	2bc0      	cmp	r3, #192	; 0xc0
 8006262:	d050      	beq.n	8006306 <CRYP_AES_ECB+0xf6>
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	f000 80bd 	beq.w	80063e6 <CRYP_AES_ECB+0x1d6>
 800626c:	2b80      	cmp	r3, #128	; 0x80
 800626e:	f040 8130 	bne.w	80064d2 <CRYP_AES_ECB+0x2c2>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006278:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006282:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006286:	ba1c      	rev	r4, r3
 8006288:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  return(result);
 800628c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006292:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006296:	f103 0304 	add.w	r3, r3, #4
 800629a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800629e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80062a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80062ac:	ba1c      	rev	r4, r3
 80062ae:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
  return(result);
 80062b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80062b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80062b8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062bc:	f103 0304 	add.w	r3, r3, #4
 80062c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80062c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062d2:	ba1c      	rev	r4, r3
 80062d4:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
  return(result);
 80062d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062dc:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80062de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062e2:	f103 0304 	add.w	r3, r3, #4
 80062e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80062ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80062f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80062f8:	ba1c      	rev	r4, r3
 80062fa:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
  return(result);
 80062fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8006304:	e0e6      	b.n	80064d4 <CRYP_AES_ECB+0x2c4>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8006306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800630a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800630c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800631a:	ba1c      	rev	r4, r3
 800631c:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  return(result);
 8006320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006324:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8006326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800632a:	f103 0304 	add.w	r3, r3, #4
 800632e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006332:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800633c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006340:	ba1c      	rev	r4, r3
 8006342:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  return(result);
 8006346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 800634c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006350:	f103 0304 	add.w	r3, r3, #4
 8006354:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006358:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006362:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006366:	ba1c      	rev	r4, r3
 8006368:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  return(result);
 800636c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006370:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006372:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006376:	f103 0304 	add.w	r3, r3, #4
 800637a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800637e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800638c:	ba1c      	rev	r4, r3
 800638e:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
  return(result);
 8006392:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006398:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800639c:	f103 0304 	add.w	r3, r3, #4
 80063a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80063a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80063ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80063b2:	ba1c      	rev	r4, r3
 80063b4:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
  return(result);
 80063b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80063be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063c2:	f103 0304 	add.w	r3, r3, #4
 80063c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80063ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80063d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063d8:	ba1c      	rev	r4, r3
 80063da:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
  return(result);
 80063de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80063e4:	e076      	b.n	80064d4 <CRYP_AES_ECB+0x2c4>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80063e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80063ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80063f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f6:	ba1c      	rev	r4, r3
 80063f8:	67bc      	str	r4, [r7, #120]	; 0x78
  return(result);
 80063fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063fc:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 80063fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006402:	f103 0304 	add.w	r3, r3, #4
 8006406:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800640a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006412:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006414:	ba1c      	rev	r4, r3
 8006416:	673c      	str	r4, [r7, #112]	; 0x70
  return(result);
 8006418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800641a:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 800641c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006420:	f103 0304 	add.w	r3, r3, #4
 8006424:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006428:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006430:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006432:	ba1c      	rev	r4, r3
 8006434:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 8006436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006438:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 800643a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800643e:	f103 0304 	add.w	r3, r3, #4
 8006442:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006446:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800644e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006450:	ba1c      	rev	r4, r3
 8006452:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8006454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800645c:	f103 0304 	add.w	r3, r3, #4
 8006460:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006464:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800646c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800646e:	ba1c      	rev	r4, r3
 8006470:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8006472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006474:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006476:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800647a:	f103 0304 	add.w	r3, r3, #4
 800647e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006482:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800648a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800648c:	ba1c      	rev	r4, r3
 800648e:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8006490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006492:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006494:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006498:	f103 0304 	add.w	r3, r3, #4
 800649c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80064a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80064a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064aa:	ba1c      	rev	r4, r3
 80064ac:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80064ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064b0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80064b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064b6:	f103 0304 	add.w	r3, r3, #4
 80064ba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80064be:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064c8:	ba1c      	rev	r4, r3
 80064ca:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80064cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80064ce:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80064d0:	e000      	b.n	80064d4 <CRYP_AES_ECB+0x2c4>
    default:
    break;
 80064d2:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d138      	bne.n	800654c <CRYP_AES_ECB+0x33c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80064da:	f7ff fc7b 	bl	8005dd4 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80064de:	f04f 0304 	mov.w	r3, #4
 80064e2:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80064e4:	f04f 0338 	mov.w	r3, #56	; 0x38
 80064e8:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80064ea:	f04f 0300 	mov.w	r3, #0
 80064ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 80064f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff fb29 	bl	8005b4c <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80064fa:	f107 0318 	add.w	r3, r7, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fbbc 	bl	8005c7c <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8006504:	f04f 0001 	mov.w	r0, #1
 8006508:	f7ff fc76 	bl	8005df8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800650c:	f04f 0010 	mov.w	r0, #16
 8006510:	f7ff fe4e 	bl	80061b0 <CRYP_GetFlagStatus>
 8006514:	4603      	mov	r3, r0
 8006516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f103 0301 	add.w	r3, r3, #1
 8006520:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006528:	d003      	beq.n	8006532 <CRYP_AES_ECB+0x322>
 800652a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1ec      	bne.n	800650c <CRYP_AES_ECB+0x2fc>

    if (busystatus != RESET)
 8006532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d004      	beq.n	8006544 <CRYP_AES_ECB+0x334>
   {
       status = ERROR;
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8006542:	e00b      	b.n	800655c <CRYP_AES_ECB+0x34c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006544:	f04f 0304 	mov.w	r3, #4
 8006548:	873b      	strh	r3, [r7, #56]	; 0x38
 800654a:	e007      	b.n	800655c <CRYP_AES_ECB+0x34c>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800654c:	f107 0318 	add.w	r3, r7, #24
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fb93 	bl	8005c7c <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8006556:	f04f 0300 	mov.w	r3, #0
 800655a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 800655c:	f04f 0320 	mov.w	r3, #32
 8006560:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006562:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006566:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8006568:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff faed 	bl	8005b4c <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8006572:	f7ff fc2f 	bl	8005dd4 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006576:	f04f 0001 	mov.w	r0, #1
 800657a:	f7ff fc3d 	bl	8005df8 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800657e:	f04f 0300 	mov.w	r3, #0
 8006582:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006586:	e084      	b.n	8006692 <CRYP_AES_ECB+0x482>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7ff fc58 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8006594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006598:	f103 0304 	add.w	r3, r3, #4
 800659c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7ff fc4c 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80065ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b0:	f103 0304 	add.w	r3, r3, #4
 80065b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fc40 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80065c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065c8:	f103 0304 	add.w	r3, r3, #4
 80065cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80065d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fc34 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80065dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e0:	f103 0304 	add.w	r3, r3, #4
 80065e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Wait until the complete message has been processed */
    counter = 0;
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80065ee:	f04f 0010 	mov.w	r0, #16
 80065f2:	f7ff fddd 	bl	80061b0 <CRYP_GetFlagStatus>
 80065f6:	4603      	mov	r3, r0
 80065f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f103 0301 	add.w	r3, r3, #1
 8006602:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800660a:	d003      	beq.n	8006614 <CRYP_AES_ECB+0x404>
 800660c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1ec      	bne.n	80065ee <CRYP_AES_ECB+0x3de>

    if (busystatus != RESET)
 8006614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d004      	beq.n	8006626 <CRYP_AES_ECB+0x416>
   {
       status = ERROR;
 800661c:	f04f 0300 	mov.w	r3, #0
 8006620:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8006624:	e02f      	b.n	8006686 <CRYP_AES_ECB+0x476>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006626:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800662a:	f7ff fc1b 	bl	8005e64 <CRYP_DataOut>
 800662e:	4603      	mov	r3, r0
 8006630:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006636:	f103 0304 	add.w	r3, r3, #4
 800663a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800663e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8006642:	f7ff fc0f 	bl	8005e64 <CRYP_DataOut>
 8006646:	4603      	mov	r3, r0
 8006648:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f103 0304 	add.w	r3, r3, #4
 8006652:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006656:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800665a:	f7ff fc03 	bl	8005e64 <CRYP_DataOut>
 800665e:	4603      	mov	r3, r0
 8006660:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006666:	f103 0304 	add.w	r3, r3, #4
 800666a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 800666e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8006672:	f7ff fbf7 	bl	8005e64 <CRYP_DataOut>
 8006676:	4603      	mov	r3, r0
 8006678:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800667a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800667e:	f103 0304 	add.w	r3, r3, #4
 8006682:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8006686:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800668a:	f103 0310 	add.w	r3, r3, #16
 800668e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006692:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8006696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800669a:	429a      	cmp	r2, r3
 800669c:	d204      	bcs.n	80066a8 <CRYP_AES_ECB+0x498>
 800669e:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f47f af70 	bne.w	8006588 <CRYP_AES_ECB+0x378>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80066a8:	f04f 0000 	mov.w	r0, #0
 80066ac:	f7ff fba4 	bl	8005df8 <CRYP_Cmd>

  return status; 
 80066b0:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	f107 07ec 	add.w	r7, r7, #236	; 0xec
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd90      	pop	{r4, r7, pc}
 80066be:	bf00      	nop

080066c0 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b0c7      	sub	sp, #284	; 0x11c
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	f107 0408 	add.w	r4, r7, #8
 80066ca:	6021      	str	r1, [r4, #0]
 80066cc:	f107 0104 	add.w	r1, r7, #4
 80066d0:	600a      	str	r2, [r1, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	f107 0310 	add.w	r3, r7, #16
 80066d8:	f103 33ff 	add.w	r3, r3, #4294967295
 80066dc:	4601      	mov	r1, r0
 80066de:	7019      	strb	r1, [r3, #0]
 80066e0:	f107 030c 	add.w	r3, r7, #12
 80066e4:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	f107 0310 	add.w	r3, r7, #16
 80066ee:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 80066f0:	f04f 0300 	mov.w	r3, #0
 80066f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 80066f8:	f04f 0301 	mov.w	r3, #1
 80066fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8006700:	f107 0304 	add.w	r3, r7, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 800670a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800670e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8006712:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006716:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800671a:	f107 0308 	add.w	r3, r7, #8
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8006724:	f04f 0300 	mov.w	r3, #0
 8006728:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800672c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006730:	4618      	mov	r0, r3
 8006732:	f7ff fae5 	bl	8005d00 <CRYP_KeyStructInit>

  switch(Keysize)
 8006736:	f107 030c 	add.w	r3, r7, #12
 800673a:	881b      	ldrh	r3, [r3, #0]
 800673c:	2bc0      	cmp	r3, #192	; 0xc0
 800673e:	d051      	beq.n	80067e4 <CRYP_AES_CBC+0x124>
 8006740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006744:	f000 80bf 	beq.w	80068c6 <CRYP_AES_CBC+0x206>
 8006748:	2b80      	cmp	r3, #128	; 0x80
 800674a:	f040 8149 	bne.w	80069e0 <CRYP_AES_CBC+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006756:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006760:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006764:	ba1c      	rev	r4, r3
 8006766:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800676e:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006770:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006774:	f103 0304 	add.w	r3, r3, #4
 8006778:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800677c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006786:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800678a:	ba1c      	rev	r4, r3
 800678c:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8006790:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006794:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8006796:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800679a:	f103 0304 	add.w	r3, r3, #4
 800679e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80067a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067b0:	ba1c      	rev	r4, r3
 80067b2:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 80067b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80067bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067c0:	f103 0304 	add.w	r3, r3, #4
 80067c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80067c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d6:	ba1c      	rev	r4, r3
 80067d8:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 80067dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067e0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80067e2:	e0fe      	b.n	80069e2 <CRYP_AES_CBC+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80067e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80067ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067fa:	ba1c      	rev	r4, r3
 80067fc:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8006800:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006806:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800680a:	f103 0304 	add.w	r3, r3, #4
 800680e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006812:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800681c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006820:	ba1c      	rev	r4, r3
 8006822:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8006826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800682c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006830:	f103 0304 	add.w	r3, r3, #4
 8006834:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006838:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006842:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006846:	ba1c      	rev	r4, r3
 8006848:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 800684c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006850:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006852:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006856:	f103 0304 	add.w	r3, r3, #4
 800685a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800685e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006868:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800686c:	ba1c      	rev	r4, r3
 800686e:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8006872:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006876:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8006878:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800687c:	f103 0304 	add.w	r3, r3, #4
 8006880:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006884:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800688e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006892:	ba1c      	rev	r4, r3
 8006894:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 8006898:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800689c:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 800689e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068a2:	f103 0304 	add.w	r3, r3, #4
 80068a6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80068aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80068b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80068b8:	ba1c      	rev	r4, r3
 80068ba:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 80068be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068c2:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80068c4:	e08d      	b.n	80069e2 <CRYP_AES_CBC+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80068c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068ca:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80068ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80068d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068dc:	ba1c      	rev	r4, r3
 80068de:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 80068e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80068e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068ec:	f103 0304 	add.w	r3, r3, #4
 80068f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 80068f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80068fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006902:	ba1c      	rev	r4, r3
 8006904:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8006908:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800690c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800690e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006912:	f103 0304 	add.w	r3, r3, #4
 8006916:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800691a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006924:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006928:	ba1c      	rev	r4, r3
 800692a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 800692e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006932:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006934:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006938:	f103 0304 	add.w	r3, r3, #4
 800693c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006940:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800694a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800694e:	ba1c      	rev	r4, r3
 8006950:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8006954:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006958:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800695a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800695e:	f103 0304 	add.w	r3, r3, #4
 8006962:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006966:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006970:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006974:	ba1c      	rev	r4, r3
 8006976:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 800697a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006980:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006984:	f103 0304 	add.w	r3, r3, #4
 8006988:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 800698c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800699a:	ba1c      	rev	r4, r3
 800699c:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 800699e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069a0:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80069a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069a6:	f103 0304 	add.w	r3, r3, #4
 80069aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80069ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80069b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069b8:	ba1c      	rev	r4, r3
 80069ba:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80069bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80069be:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80069c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069c4:	f103 0304 	add.w	r3, r3, #4
 80069c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80069cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80069d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80069d6:	ba1c      	rev	r4, r3
 80069d8:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80069da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069dc:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80069de:	e000      	b.n	80069e2 <CRYP_AES_CBC+0x322>
    default:
    break;
 80069e0:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80069e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80069ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069ec:	ba1c      	rev	r4, r3
 80069ee:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80069f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f2:	461a      	mov	r2, r3
 80069f4:	f107 0314 	add.w	r3, r7, #20
 80069f8:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 80069fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069fe:	f103 0304 	add.w	r3, r3, #4
 8006a02:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8006a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	ba1c      	rev	r4, r3
 8006a12:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8006a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a16:	461a      	mov	r2, r3
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8006a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a22:	f103 0304 	add.w	r3, r3, #4
 8006a26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8006a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a34:	ba1c      	rev	r4, r3
 8006a36:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8006a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f107 0314 	add.w	r3, r7, #20
 8006a40:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8006a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a46:	f103 0304 	add.w	r3, r3, #4
 8006a4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8006a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a58:	ba1c      	rev	r4, r3
 8006a5a:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8006a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f107 0314 	add.w	r3, r7, #20
 8006a64:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8006a66:	f107 0310 	add.w	r3, r7, #16
 8006a6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d142      	bne.n	8006afa <CRYP_AES_CBC+0x43a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8006a74:	f7ff f9ae 	bl	8005dd4 <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006a78:	f04f 0304 	mov.w	r3, #4
 8006a7c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8006a80:	f04f 0338 	mov.w	r3, #56	; 0x38
 8006a84:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 8006a90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7ff f859 	bl	8005b4c <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff f8ec 	bl	8005c7c <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8006aa4:	f04f 0001 	mov.w	r0, #1
 8006aa8:	f7ff f9a6 	bl	8005df8 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006aac:	f04f 0010 	mov.w	r0, #16
 8006ab0:	f7ff fb7e 	bl	80061b0 <CRYP_GetFlagStatus>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8006aba:	f107 0310 	add.w	r3, r7, #16
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f103 0201 	add.w	r2, r3, #1
 8006ac4:	f107 0310 	add.w	r3, r7, #16
 8006ac8:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006aca:	f107 0310 	add.w	r3, r7, #16
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d003      	beq.n	8006ade <CRYP_AES_CBC+0x41e>
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e6      	bne.n	8006aac <CRYP_AES_CBC+0x3ec>

    if (busystatus != RESET)
 8006ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d004      	beq.n	8006af0 <CRYP_AES_CBC+0x430>
   {
       status = ERROR;
 8006ae6:	f04f 0300 	mov.w	r3, #0
 8006aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8006aee:	e00d      	b.n	8006b0c <CRYP_AES_CBC+0x44c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006af0:	f04f 0304 	mov.w	r3, #4
 8006af4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006af8:	e008      	b.n	8006b0c <CRYP_AES_CBC+0x44c>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006afa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7ff f8bc 	bl	8005c7c <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8006b04:	f04f 0300 	mov.w	r3, #0
 8006b08:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8006b0c:	f04f 0328 	mov.w	r3, #40	; 0x28
 8006b10:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006b14:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b18:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8006b1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b20:	4618      	mov	r0, r3
 8006b22:	f7ff f813 	bl	8005b4c <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8006b26:	f107 0314 	add.w	r3, r7, #20
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff f912 	bl	8005d54 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8006b30:	f7ff f950 	bl	8005dd4 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006b34:	f04f 0001 	mov.w	r0, #1
 8006b38:	f7ff f95e 	bl	8005df8 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8006b3c:	f04f 0300 	mov.w	r3, #0
 8006b40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006b44:	e08c      	b.n	8006c60 <CRYP_AES_CBC+0x5a0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006b46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7ff f979 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8006b52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b56:	f103 0304 	add.w	r3, r3, #4
 8006b5a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006b5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff f96d 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8006b6a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b6e:	f103 0304 	add.w	r3, r3, #4
 8006b72:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006b76:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7ff f961 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8006b82:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b86:	f103 0304 	add.w	r3, r3, #4
 8006b8a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006b8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff f955 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8006b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006b9e:	f103 0304 	add.w	r3, r3, #4
 8006ba2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	f107 0310 	add.w	r3, r7, #16
 8006bae:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006bb0:	f04f 0010 	mov.w	r0, #16
 8006bb4:	f7ff fafc 	bl	80061b0 <CRYP_GetFlagStatus>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8006bbe:	f107 0310 	add.w	r3, r7, #16
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f103 0201 	add.w	r2, r3, #1
 8006bc8:	f107 0310 	add.w	r3, r7, #16
 8006bcc:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006bce:	f107 0310 	add.w	r3, r7, #16
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd8:	d003      	beq.n	8006be2 <CRYP_AES_CBC+0x522>
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1e6      	bne.n	8006bb0 <CRYP_AES_CBC+0x4f0>

    if (busystatus != RESET)
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d004      	beq.n	8006bf4 <CRYP_AES_CBC+0x534>
   {
       status = ERROR;
 8006bea:	f04f 0300 	mov.w	r3, #0
 8006bee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8006bf2:	e02f      	b.n	8006c54 <CRYP_AES_CBC+0x594>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006bf4:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006bf8:	f7ff f934 	bl	8005e64 <CRYP_DataOut>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006c00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c04:	f103 0304 	add.w	r3, r3, #4
 8006c08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006c0c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006c10:	f7ff f928 	bl	8005e64 <CRYP_DataOut>
 8006c14:	4603      	mov	r3, r0
 8006c16:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c1c:	f103 0304 	add.w	r3, r3, #4
 8006c20:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006c24:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006c28:	f7ff f91c 	bl	8005e64 <CRYP_DataOut>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006c30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c34:	f103 0304 	add.w	r3, r3, #4
 8006c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006c3c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006c40:	f7ff f910 	bl	8005e64 <CRYP_DataOut>
 8006c44:	4603      	mov	r3, r0
 8006c46:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006c4c:	f103 0304 	add.w	r3, r3, #4
 8006c50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8006c54:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006c58:	f103 0310 	add.w	r3, r3, #16
 8006c5c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006c60:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8006c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d204      	bcs.n	8006c76 <CRYP_AES_CBC+0x5b6>
 8006c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f47f af68 	bne.w	8006b46 <CRYP_AES_CBC+0x486>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8006c76:	f04f 0000 	mov.w	r0, #0
 8006c7a:	f7ff f8bd 	bl	8005df8 <CRYP_Cmd>

  return status;
 8006c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd90      	pop	{r4, r7, pc}

08006c8c <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8006c8c:	b590      	push	{r4, r7, lr}
 8006c8e:	b0c7      	sub	sp, #284	; 0x11c
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	f107 0408 	add.w	r4, r7, #8
 8006c96:	6021      	str	r1, [r4, #0]
 8006c98:	f107 0104 	add.w	r1, r7, #4
 8006c9c:	600a      	str	r2, [r1, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ca8:	4601      	mov	r1, r0
 8006caa:	7019      	strb	r1, [r3, #0]
 8006cac:	f107 030c 	add.w	r3, r7, #12
 8006cb0:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f107 0310 	add.w	r3, r7, #16
 8006cba:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8006cbc:	f04f 0300 	mov.w	r3, #0
 8006cc0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8006cc4:	f04f 0301 	mov.w	r3, #1
 8006cc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8006ccc:	f107 0304 	add.w	r3, r7, #4
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8006cd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cda:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8006cde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006ce2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8006ce6:	f107 0308 	add.w	r3, r7, #8
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe ffff 	bl	8005d00 <CRYP_KeyStructInit>

  switch(Keysize)
 8006d02:	f107 030c 	add.w	r3, r7, #12
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	2bc0      	cmp	r3, #192	; 0xc0
 8006d0a:	d051      	beq.n	8006db0 <CRYP_AES_CTR+0x124>
 8006d0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d10:	f000 80bf 	beq.w	8006e92 <CRYP_AES_CTR+0x206>
 8006d14:	2b80      	cmp	r3, #128	; 0x80
 8006d16:	f040 8149 	bne.w	8006fac <CRYP_AES_CTR+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006d22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006d2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d30:	ba1c      	rev	r4, r3
 8006d32:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8006d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006d3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d40:	f103 0304 	add.w	r3, r3, #4
 8006d44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006d48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006d52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006d56:	ba1c      	rev	r4, r3
 8006d58:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8006d5c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006d60:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8006d62:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d66:	f103 0304 	add.w	r3, r3, #4
 8006d6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006d6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006d78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d7c:	ba1c      	rev	r4, r3
 8006d7e:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8006d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8006d88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d8c:	f103 0304 	add.w	r3, r3, #4
 8006d90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006d94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da2:	ba1c      	rev	r4, r3
 8006da4:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8006da8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dac:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8006dae:	e0fe      	b.n	8006fae <CRYP_AES_CTR+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8006db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006db4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006db8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006dc6:	ba1c      	rev	r4, r3
 8006dc8:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8006dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006dd2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dd6:	f103 0304 	add.w	r3, r3, #4
 8006dda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006dde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006de8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006dec:	ba1c      	rev	r4, r3
 8006dee:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8006df2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006df8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006dfc:	f103 0304 	add.w	r3, r3, #4
 8006e00:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006e04:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006e0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006e12:	ba1c      	rev	r4, r3
 8006e14:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8006e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006e1c:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006e1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e22:	f103 0304 	add.w	r3, r3, #4
 8006e26:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006e2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006e38:	ba1c      	rev	r4, r3
 8006e3a:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8006e3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8006e44:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e48:	f103 0304 	add.w	r3, r3, #4
 8006e4c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006e50:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006e5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006e5e:	ba1c      	rev	r4, r3
 8006e60:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 8006e64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006e68:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8006e6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e6e:	f103 0304 	add.w	r3, r3, #4
 8006e72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006e76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006e84:	ba1c      	rev	r4, r3
 8006e86:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 8006e8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006e8e:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8006e90:	e08d      	b.n	8006fae <CRYP_AES_CTR+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8006e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e96:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8006e9a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006ea4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006ea8:	ba1c      	rev	r4, r3
 8006eaa:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 8006eae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006eb4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eb8:	f103 0304 	add.w	r3, r3, #4
 8006ebc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8006ec0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006eca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ece:	ba1c      	rev	r4, r3
 8006ed0:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8006ed4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006eda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006ede:	f103 0304 	add.w	r3, r3, #4
 8006ee2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006ee6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ef4:	ba1c      	rev	r4, r3
 8006ef6:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8006efa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006f00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f04:	f103 0304 	add.w	r3, r3, #4
 8006f08:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006f0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f1a:	ba1c      	rev	r4, r3
 8006f1c:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8006f20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f24:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006f26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f2a:	f103 0304 	add.w	r3, r3, #4
 8006f2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006f32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006f3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f40:	ba1c      	rev	r4, r3
 8006f42:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8006f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f4a:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006f4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f50:	f103 0304 	add.w	r3, r3, #4
 8006f54:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006f58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006f62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f66:	ba1c      	rev	r4, r3
 8006f68:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8006f6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8006f6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f72:	f103 0304 	add.w	r3, r3, #4
 8006f76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006f7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f84:	ba1c      	rev	r4, r3
 8006f86:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8006f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8006f8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f90:	f103 0304 	add.w	r3, r3, #4
 8006f94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006f98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fa2:	ba1c      	rev	r4, r3
 8006fa4:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8006fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa8:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8006faa:	e000      	b.n	8006fae <CRYP_AES_CTR+0x322>
    default:
    break;
 8006fac:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8006fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006fb8:	ba1c      	rev	r4, r3
 8006fba:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8006fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f107 0314 	add.w	r3, r7, #20
 8006fc4:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8006fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fca:	f103 0304 	add.w	r3, r3, #4
 8006fce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006fdc:	ba1c      	rev	r4, r3
 8006fde:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8006fe0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f107 0314 	add.w	r3, r7, #20
 8006fe8:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8006fea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fee:	f103 0304 	add.w	r3, r3, #4
 8006ff2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8006ff6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006ffe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007000:	ba1c      	rev	r4, r3
 8007002:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8007004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007006:	461a      	mov	r2, r3
 8007008:	f107 0314 	add.w	r3, r7, #20
 800700c:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 800700e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007012:	f103 0304 	add.w	r3, r3, #4
 8007016:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 800701a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007024:	ba1c      	rev	r4, r3
 8007026:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8007028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800702a:	461a      	mov	r2, r3
 800702c:	f107 0314 	add.w	r3, r7, #20
 8007030:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8007032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007036:	4618      	mov	r0, r3
 8007038:	f7fe fe20 	bl	8005c7c <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800703c:	f107 0310 	add.w	r3, r7, #16
 8007040:	f103 33ff 	add.w	r3, r3, #4294967295
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d104      	bne.n	8007054 <CRYP_AES_CTR+0x3c8>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800704a:	f04f 0304 	mov.w	r3, #4
 800704e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007052:	e003      	b.n	800705c <CRYP_AES_CTR+0x3d0>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007054:	f04f 0300 	mov.w	r3, #0
 8007058:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 800705c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8007060:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007064:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007068:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 800706c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007070:	4618      	mov	r0, r3
 8007072:	f7fe fd6b 	bl	8005b4c <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8007076:	f107 0314 	add.w	r3, r7, #20
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fe6a 	bl	8005d54 <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8007080:	f7fe fea8 	bl	8005dd4 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007084:	f04f 0001 	mov.w	r0, #1
 8007088:	f7fe feb6 	bl	8005df8 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007094:	e08c      	b.n	80071b0 <CRYP_AES_CTR+0x524>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007096:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fed1 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80070a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070a6:	f103 0304 	add.w	r3, r3, #4
 80070aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fec5 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80070ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070be:	f103 0304 	add.w	r3, r3, #4
 80070c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe feb9 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80070d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070d6:	f103 0304 	add.w	r3, r3, #4
 80070da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fead 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80070ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070ee:	f103 0304 	add.w	r3, r3, #4
 80070f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 80070f6:	f04f 0200 	mov.w	r2, #0
 80070fa:	f107 0310 	add.w	r3, r7, #16
 80070fe:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007100:	f04f 0010 	mov.w	r0, #16
 8007104:	f7ff f854 	bl	80061b0 <CRYP_GetFlagStatus>
 8007108:	4603      	mov	r3, r0
 800710a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 800710e:	f107 0310 	add.w	r3, r7, #16
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f103 0201 	add.w	r2, r3, #1
 8007118:	f107 0310 	add.w	r3, r7, #16
 800711c:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800711e:	f107 0310 	add.w	r3, r7, #16
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007128:	d003      	beq.n	8007132 <CRYP_AES_CTR+0x4a6>
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1e6      	bne.n	8007100 <CRYP_AES_CTR+0x474>

    if (busystatus != RESET)
 8007132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007136:	2b00      	cmp	r3, #0
 8007138:	d004      	beq.n	8007144 <CRYP_AES_CTR+0x4b8>
   {
       status = ERROR;
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8007142:	e02f      	b.n	80071a4 <CRYP_AES_CTR+0x518>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007144:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8007148:	f7fe fe8c 	bl	8005e64 <CRYP_DataOut>
 800714c:	4603      	mov	r3, r0
 800714e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007150:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007154:	f103 0304 	add.w	r3, r3, #4
 8007158:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800715c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8007160:	f7fe fe80 	bl	8005e64 <CRYP_DataOut>
 8007164:	4603      	mov	r3, r0
 8007166:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007168:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800716c:	f103 0304 	add.w	r3, r3, #4
 8007170:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007174:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8007178:	f7fe fe74 	bl	8005e64 <CRYP_DataOut>
 800717c:	4603      	mov	r3, r0
 800717e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007180:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007184:	f103 0304 	add.w	r3, r3, #4
 8007188:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800718c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8007190:	f7fe fe68 	bl	8005e64 <CRYP_DataOut>
 8007194:	4603      	mov	r3, r0
 8007196:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007198:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800719c:	f103 0304 	add.w	r3, r3, #4
 80071a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80071a4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80071a8:	f103 0310 	add.w	r3, r3, #16
 80071ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80071b0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80071b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d204      	bcs.n	80071c6 <CRYP_AES_CTR+0x53a>
 80071bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f47f af68 	bne.w	8007096 <CRYP_AES_CTR+0x40a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80071c6:	f04f 0000 	mov.w	r0, #0
 80071ca:	f7fe fe15 	bl	8005df8 <CRYP_Cmd>

  return status;
 80071ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd90      	pop	{r4, r7, pc}

080071dc <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b09b      	sub	sp, #108	; 0x6c
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	603b      	str	r3, [r7, #0]
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 80071f8:	f04f 0301 	mov.w	r3, #1
 80071fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8007208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800720a:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 800720c:	f04f 0300 	mov.w	r3, #0
 8007210:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8007212:	f107 0318 	add.w	r3, r7, #24
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fd72 	bl	8005d00 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d103      	bne.n	800722a <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8007222:	f04f 0300 	mov.w	r3, #0
 8007226:	873b      	strh	r3, [r7, #56]	; 0x38
 8007228:	e002      	b.n	8007230 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 800722a:	f04f 0304 	mov.w	r3, #4
 800722e:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8007230:	f04f 0310 	mov.w	r3, #16
 8007234:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8007236:	f04f 0380 	mov.w	r3, #128	; 0x80
 800723a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 800723c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007240:	4618      	mov	r0, r3
 8007242:	f7fe fc83 	bl	8005b4c <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800724c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724e:	ba1c      	rev	r4, r3
 8007250:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8007252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007254:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8007256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007258:	f103 0304 	add.w	r3, r3, #4
 800725c:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007266:	ba1c      	rev	r4, r3
 8007268:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800726a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 800726e:	f107 0318 	add.w	r3, r7, #24
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fd02 	bl	8005c7c <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8007278:	f7fe fdac 	bl	8005dd4 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800727c:	f04f 0001 	mov.w	r0, #1
 8007280:	f7fe fdba 	bl	8005df8 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8007284:	f04f 0300 	mov.w	r3, #0
 8007288:	65bb      	str	r3, [r7, #88]	; 0x58
 800728a:	e043      	b.n	8007314 <CRYP_DES_ECB+0x138>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800728c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4618      	mov	r0, r3
 8007292:	f7fe fdd7 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8007296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007298:	f103 0304 	add.w	r3, r3, #4
 800729c:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800729e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fdce 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 80072a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072aa:	f103 0304 	add.w	r3, r3, #4
 80072ae:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80072b6:	f04f 0010 	mov.w	r0, #16
 80072ba:	f7fe ff79 	bl	80061b0 <CRYP_GetFlagStatus>
 80072be:	4603      	mov	r3, r0
 80072c0:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f103 0301 	add.w	r3, r3, #1
 80072c8:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072d0:	d002      	beq.n	80072d8 <CRYP_DES_ECB+0xfc>
 80072d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1ee      	bne.n	80072b6 <CRYP_DES_ECB+0xda>

    if (busystatus != RESET)
 80072d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <CRYP_DES_ECB+0x10c>
   {
       status = ERROR;
 80072de:	f04f 0300 	mov.w	r3, #0
 80072e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80072e6:	e011      	b.n	800730c <CRYP_DES_ECB+0x130>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80072e8:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80072ea:	f7fe fdbb 	bl	8005e64 <CRYP_DataOut>
 80072ee:	4603      	mov	r3, r0
 80072f0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80072f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072f4:	f103 0304 	add.w	r3, r3, #4
 80072f8:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80072fa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 80072fc:	f7fe fdb2 	bl	8005e64 <CRYP_DataOut>
 8007300:	4603      	mov	r3, r0
 8007302:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007306:	f103 0304 	add.w	r3, r3, #4
 800730a:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800730c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800730e:	f103 0308 	add.w	r3, r3, #8
 8007312:	65bb      	str	r3, [r7, #88]	; 0x58
 8007314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d203      	bcs.n	8007324 <CRYP_DES_ECB+0x148>
 800731c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007320:	2b00      	cmp	r3, #0
 8007322:	d1b3      	bne.n	800728c <CRYP_DES_ECB+0xb0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8007324:	f04f 0000 	mov.w	r0, #0
 8007328:	f7fe fd66 	bl	8005df8 <CRYP_Cmd>

  return status; 
 800732c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007330:	4618      	mov	r0, r3
 8007332:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 8007336:	46bd      	mov	sp, r7
 8007338:	bd90      	pop	{r4, r7, pc}
 800733a:	bf00      	nop

0800733c <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 800733c:	b590      	push	{r4, r7, lr}
 800733e:	b0a3      	sub	sp, #140	; 0x8c
 8007340:	af00      	add	r7, sp, #0
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
 8007348:	4603      	mov	r3, r0
 800734a:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8007358:	f04f 0301 	mov.w	r3, #1
 800735c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 800736a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800736e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 8007374:	f04f 0300 	mov.w	r3, #0
 8007378:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800737a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800737e:	4618      	mov	r0, r3
 8007380:	f7fe fcbe 	bl	8005d00 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8007384:	7bfb      	ldrb	r3, [r7, #15]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d104      	bne.n	8007394 <CRYP_DES_CBC+0x58>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800738a:	f04f 0300 	mov.w	r3, #0
 800738e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007392:	e003      	b.n	800739c <CRYP_DES_CBC+0x60>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8007394:	f04f 0304 	mov.w	r3, #4
 8007398:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 800739c:	f04f 0318 	mov.w	r3, #24
 80073a0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80073a4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80073a8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 80073ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe fbcb 	bl	8005b4c <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80073b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80073bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073be:	ba1c      	rev	r4, r3
 80073c0:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80073c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80073c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073c8:	f103 0304 	add.w	r3, r3, #4
 80073cc:	673b      	str	r3, [r7, #112]	; 0x70
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80073ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80073d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073d6:	ba1c      	rev	r4, r3
 80073d8:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 80073da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073dc:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 80073de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7fe fc4a 	bl	8005c7c <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80073e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80073ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073f0:	ba1c      	rev	r4, r3
 80073f2:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 80073f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073f6:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 80073f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073fa:	f103 0304 	add.w	r3, r3, #4
 80073fe:	66fb      	str	r3, [r7, #108]	; 0x6c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007408:	ba1c      	rev	r4, r3
 800740a:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800740c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800740e:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe fc9d 	bl	8005d54 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 800741a:	f7fe fcdb 	bl	8005dd4 <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800741e:	f04f 0001 	mov.w	r0, #1
 8007422:	f7fe fce9 	bl	8005df8 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	67bb      	str	r3, [r7, #120]	; 0x78
 800742c:	e049      	b.n	80074c2 <CRYP_DES_CBC+0x186>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800742e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4618      	mov	r0, r3
 8007436:	f7fe fd05 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 800743a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800743e:	f103 0304 	add.w	r3, r3, #4
 8007442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007446:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4618      	mov	r0, r3
 800744e:	f7fe fcf9 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8007452:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007456:	f103 0304 	add.w	r3, r3, #4
 800745a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 800745e:	f04f 0300 	mov.w	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007464:	f04f 0010 	mov.w	r0, #16
 8007468:	f7fe fea2 	bl	80061b0 <CRYP_GetFlagStatus>
 800746c:	4603      	mov	r3, r0
 800746e:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f103 0301 	add.w	r3, r3, #1
 8007476:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800747e:	d002      	beq.n	8007486 <CRYP_DES_CBC+0x14a>
 8007480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1ee      	bne.n	8007464 <CRYP_DES_CBC+0x128>

    if (busystatus != RESET)
 8007486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007488:	2b00      	cmp	r3, #0
 800748a:	d004      	beq.n	8007496 <CRYP_DES_CBC+0x15a>
   {
       status = ERROR;
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8007494:	e011      	b.n	80074ba <CRYP_DES_CBC+0x17e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007496:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8007498:	f7fe fce4 	bl	8005e64 <CRYP_DataOut>
 800749c:	4603      	mov	r3, r0
 800749e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80074a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074a2:	f103 0304 	add.w	r3, r3, #4
 80074a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80074a8:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80074aa:	f7fe fcdb 	bl	8005e64 <CRYP_DataOut>
 80074ae:	4603      	mov	r3, r0
 80074b0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80074b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074b4:	f103 0304 	add.w	r3, r3, #4
 80074b8:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80074ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074bc:	f103 0308 	add.w	r3, r3, #8
 80074c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80074c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d203      	bcs.n	80074d4 <CRYP_DES_CBC+0x198>
 80074cc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1ac      	bne.n	800742e <CRYP_DES_CBC+0xf2>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80074d4:	f04f 0000 	mov.w	r0, #0
 80074d8:	f7fe fc8e 	bl	8005df8 <CRYP_Cmd>

  return status; 
 80074dc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd90      	pop	{r4, r7, pc}
 80074ea:	bf00      	nop

080074ec <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b0a3      	sub	sp, #140	; 0x8c
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60b9      	str	r1, [r7, #8]
 80074f4:	607a      	str	r2, [r7, #4]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 80074fc:	f04f 0300 	mov.w	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8007502:	f04f 0300 	mov.w	r3, #0
 8007506:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8007508:	f04f 0301 	mov.w	r3, #1
 800750c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 800751a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800751e:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t i = 0;
 8007520:	f04f 0300 	mov.w	r3, #0
 8007524:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8007526:	f107 0318 	add.w	r3, r7, #24
 800752a:	4618      	mov	r0, r3
 800752c:	f7fe fbe8 	bl	8005d00 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d103      	bne.n	800753e <CRYP_TDES_ECB+0x52>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007536:	f04f 0300 	mov.w	r3, #0
 800753a:	873b      	strh	r3, [r7, #56]	; 0x38
 800753c:	e002      	b.n	8007544 <CRYP_TDES_ECB+0x58>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800753e:	f04f 0304 	mov.w	r3, #4
 8007542:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8007544:	f04f 0300 	mov.w	r3, #0
 8007548:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800754a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800754e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8007550:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe faf9 	bl	8005b4c <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800755a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007560:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007562:	ba1c      	rev	r4, r3
 8007564:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 8007566:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007568:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800756a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800756c:	f103 0304 	add.w	r3, r3, #4
 8007570:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800757a:	ba1c      	rev	r4, r3
 800757c:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800757e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8007582:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007584:	f103 0304 	add.w	r3, r3, #4
 8007588:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800758a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007590:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007592:	ba1c      	rev	r4, r3
 8007594:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8007596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007598:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 800759a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800759c:	f103 0304 	add.w	r3, r3, #4
 80075a0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80075a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80075a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075aa:	ba1c      	rev	r4, r3
 80075ac:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80075ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80075b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075b4:	f103 0304 	add.w	r3, r3, #4
 80075b8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80075ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80075c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c2:	ba1c      	rev	r4, r3
 80075c4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80075c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c8:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 80075ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075cc:	f103 0304 	add.w	r3, r3, #4
 80075d0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80075d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80075d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075da:	ba1c      	rev	r4, r3
 80075dc:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80075de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e0:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fb48 	bl	8005c7c <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80075ec:	f7fe fbf2 	bl	8005dd4 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80075f0:	f04f 0001 	mov.w	r0, #1
 80075f4:	f7fe fc00 	bl	8005df8 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80075f8:	f04f 0300 	mov.w	r3, #0
 80075fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80075fe:	e049      	b.n	8007694 <CRYP_TDES_ECB+0x1a8>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007600:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fc1c 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 800760c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007610:	f103 0304 	add.w	r3, r3, #4
 8007614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007618:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fc10 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8007624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007628:	f103 0304 	add.w	r3, r3, #4
 800762c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8007630:	f04f 0300 	mov.w	r3, #0
 8007634:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007636:	f04f 0010 	mov.w	r0, #16
 800763a:	f7fe fdb9 	bl	80061b0 <CRYP_GetFlagStatus>
 800763e:	4603      	mov	r3, r0
 8007640:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f103 0301 	add.w	r3, r3, #1
 8007648:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007650:	d002      	beq.n	8007658 <CRYP_TDES_ECB+0x16c>
 8007652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1ee      	bne.n	8007636 <CRYP_TDES_ECB+0x14a>

    if (busystatus != RESET)
 8007658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800765a:	2b00      	cmp	r3, #0
 800765c:	d004      	beq.n	8007668 <CRYP_TDES_ECB+0x17c>
    {
       status = ERROR;
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8007666:	e011      	b.n	800768c <CRYP_TDES_ECB+0x1a0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007668:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800766a:	f7fe fbfb 	bl	8005e64 <CRYP_DataOut>
 800766e:	4603      	mov	r3, r0
 8007670:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007674:	f103 0304 	add.w	r3, r3, #4
 8007678:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800767a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800767c:	f7fe fbf2 	bl	8005e64 <CRYP_DataOut>
 8007680:	4603      	mov	r3, r0
 8007682:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007684:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007686:	f103 0304 	add.w	r3, r3, #4
 800768a:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800768c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800768e:	f103 0308 	add.w	r3, r3, #8
 8007692:	67bb      	str	r3, [r7, #120]	; 0x78
 8007694:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d203      	bcs.n	80076a4 <CRYP_TDES_ECB+0x1b8>
 800769c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1ad      	bne.n	8007600 <CRYP_TDES_ECB+0x114>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80076a4:	f04f 0000 	mov.w	r0, #0
 80076a8:	f7fe fba6 	bl	8005df8 <CRYP_Cmd>

  return status; 
 80076ac:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd90      	pop	{r4, r7, pc}
 80076ba:	bf00      	nop

080076bc <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80076bc:	b590      	push	{r4, r7, lr}
 80076be:	b0ab      	sub	sp, #172	; 0xac
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4603      	mov	r3, r0
 80076ca:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80076d2:	f04f 0300 	mov.w	r3, #0
 80076d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 80076da:	f04f 0301 	mov.w	r3, #1
 80076de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 80076ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80076f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t i = 0;
 80076fc:	f04f 0300 	mov.w	r3, #0
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8007704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007708:	4618      	mov	r0, r3
 800770a:	f7fe faf9 	bl	8005d00 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 800770e:	7bfb      	ldrb	r3, [r7, #15]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d104      	bne.n	800771e <CRYP_TDES_CBC+0x62>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800771c:	e003      	b.n	8007726 <CRYP_TDES_CBC+0x6a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800771e:	f04f 0304 	mov.w	r3, #4
 8007722:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8007726:	f04f 0308 	mov.w	r3, #8
 800772a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800772e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007732:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 8007736:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fa06 	bl	8005b4c <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8007740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800774a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800774e:	ba1c      	rev	r4, r3
 8007750:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8007754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007758:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 800775a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800775e:	f103 0304 	add.w	r3, r3, #4
 8007762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8007766:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007774:	ba1c      	rev	r4, r3
 8007776:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8007778:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800777a:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 800777c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007780:	f103 0304 	add.w	r3, r3, #4
 8007784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8007788:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007790:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007792:	ba1c      	rev	r4, r3
 8007794:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8007796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 800779a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800779e:	f103 0304 	add.w	r3, r3, #4
 80077a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80077a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80077ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077b0:	ba1c      	rev	r4, r3
 80077b2:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80077b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077b6:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 80077b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077bc:	f103 0304 	add.w	r3, r3, #4
 80077c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80077c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80077cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077ce:	ba1c      	rev	r4, r3
 80077d0:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80077d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 80077d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077da:	f103 0304 	add.w	r3, r3, #4
 80077de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80077e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80077ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077ec:	ba1c      	rev	r4, r3
 80077ee:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 80077f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80077f2:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 80077f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7fe fa3f 	bl	8005c7c <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80077fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007808:	ba1c      	rev	r4, r3
 800780a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800780c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800780e:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8007810:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007814:	f103 0304 	add.w	r3, r3, #4
 8007818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800781c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007826:	ba1c      	rev	r4, r3
 8007828:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800782a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782c:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 800782e:	f107 0314 	add.w	r3, r7, #20
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fa8e 	bl	8005d54 <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8007838:	f7fe facc 	bl	8005dd4 <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800783c:	f04f 0001 	mov.w	r0, #1
 8007840:	f7fe fada 	bl	8005df8 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8007844:	f04f 0300 	mov.w	r3, #0
 8007848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800784c:	e054      	b.n	80078f8 <CRYP_TDES_CBC+0x23c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800784e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f7fe faf5 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 800785a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800785e:	f103 0304 	add.w	r3, r3, #4
 8007862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007866:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4618      	mov	r0, r3
 800786e:	f7fe fae9 	bl	8005e44 <CRYP_DataIn>
    inputaddr+=4;
 8007872:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007876:	f103 0304 	add.w	r3, r3, #4
 800787a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 800787e:	f04f 0300 	mov.w	r3, #0
 8007882:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8007884:	f04f 0010 	mov.w	r0, #16
 8007888:	f7fe fc92 	bl	80061b0 <CRYP_GetFlagStatus>
 800788c:	4603      	mov	r3, r0
 800788e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	f103 0301 	add.w	r3, r3, #1
 8007898:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a0:	d003      	beq.n	80078aa <CRYP_TDES_CBC+0x1ee>
 80078a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1ec      	bne.n	8007884 <CRYP_TDES_CBC+0x1c8>

    if (busystatus != RESET)
 80078aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d004      	beq.n	80078bc <CRYP_TDES_CBC+0x200>
   {
       status = ERROR;
 80078b2:	f04f 0300 	mov.w	r3, #0
 80078b6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80078ba:	e017      	b.n	80078ec <CRYP_TDES_CBC+0x230>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80078bc:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80078c0:	f7fe fad0 	bl	8005e64 <CRYP_DataOut>
 80078c4:	4603      	mov	r3, r0
 80078c6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80078c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078cc:	f103 0304 	add.w	r3, r3, #4
 80078d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80078d4:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80078d8:	f7fe fac4 	bl	8005e64 <CRYP_DataOut>
 80078dc:	4603      	mov	r3, r0
 80078de:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80078e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078e4:	f103 0304 	add.w	r3, r3, #4
 80078e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80078ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80078f0:	f103 0308 	add.w	r3, r3, #8
 80078f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80078fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007900:	429a      	cmp	r2, r3
 8007902:	d203      	bcs.n	800790c <CRYP_TDES_CBC+0x250>
 8007904:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007908:	2b00      	cmp	r3, #0
 800790a:	d1a0      	bne.n	800784e <CRYP_TDES_CBC+0x192>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800790c:	f04f 0000 	mov.w	r0, #0
 8007910:	f7fe fa72 	bl	8005df8 <CRYP_Cmd>

  return status; 
 8007914:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8007918:	4618      	mov	r0, r3
 800791a:	f107 07ac 	add.w	r7, r7, #172	; 0xac
 800791e:	46bd      	mov	sp, r7
 8007920:	bd90      	pop	{r4, r7, pc}
 8007922:	bf00      	nop

08007924 <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8007928:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800792c:	f04f 0101 	mov.w	r1, #1
 8007930:	f005 f9f6 	bl	800cd20 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 8007934:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007938:	f04f 0100 	mov.w	r1, #0
 800793c:	f005 f9f0 	bl	800cd20 <RCC_APB1PeriphResetCmd>
}
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800794e:	f04f 0300 	mov.w	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	f04f 0300 	mov.w	r3, #0
 8007958:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 800795a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800795e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f640 72fe 	movw	r2, #4094	; 0xffe
 800796c:	fa02 f303 	lsl.w	r3, r2, r3
 8007970:	ea6f 0303 	mvn.w	r3, r3
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	4013      	ands	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 8007988:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800798e:	4313      	orrs	r3, r2
 8007990:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	4313      	orrs	r3, r2
 800799e:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80079a0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80079a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	601a      	str	r2, [r3, #0]
}
 80079ac:	f107 0714 	add.w	r7, r7, #20
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bc80      	pop	{r7}
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop

080079b8 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	f04f 0200 	mov.w	r2, #0
 80079c6:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f04f 0200 	mov.w	r2, #0
 80079ce:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f04f 0200 	mov.w	r2, #0
 80079d6:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f04f 0200 	mov.w	r2, #0
 80079de:	60da      	str	r2, [r3, #12]
}
 80079e0:	f107 070c 	add.w	r7, r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc80      	pop	{r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop

080079ec <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d010      	beq.n	8007a20 <DAC_Cmd+0x34>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80079fe:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007a02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a06:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007a0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007a0e:	6811      	ldr	r1, [r2, #0]
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	f04f 0001 	mov.w	r0, #1
 8007a16:	fa00 f202 	lsl.w	r2, r0, r2
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	e011      	b.n	8007a44 <DAC_Cmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8007a20:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007a24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a28:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007a2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007a30:	6811      	ldr	r1, [r2, #0]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	f04f 0001 	mov.w	r0, #1
 8007a38:	fa00 f202 	lsl.w	r2, r0, r2
 8007a3c:	ea6f 0202 	mvn.w	r2, r2
 8007a40:	400a      	ands	r2, r1
 8007a42:	601a      	str	r2, [r3, #0]
  }
}
 8007a44:	f107 070c 	add.w	r7, r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bc80      	pop	{r7}
 8007a4c:	4770      	bx	lr
 8007a4e:	bf00      	nop

08007a50 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007a5c:	78fb      	ldrb	r3, [r7, #3]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d012      	beq.n	8007a88 <DAC_SoftwareTriggerCmd+0x38>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8007a62:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007a66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a6a:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007a6e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007a72:	6851      	ldr	r1, [r2, #4]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8007a7a:	f04f 0001 	mov.w	r0, #1
 8007a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8007a82:	430a      	orrs	r2, r1
 8007a84:	605a      	str	r2, [r3, #4]
 8007a86:	e013      	b.n	8007ab0 <DAC_SoftwareTriggerCmd+0x60>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8007a88:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007a8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007a90:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007a94:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007a98:	6851      	ldr	r1, [r2, #4]
 8007a9a:	687a      	ldr	r2, [r7, #4]
 8007a9c:	ea4f 1212 	mov.w	r2, r2, lsr #4
 8007aa0:	f04f 0001 	mov.w	r0, #1
 8007aa4:	fa00 f202 	lsl.w	r2, r0, r2
 8007aa8:	ea6f 0202 	mvn.w	r2, r2
 8007aac:	400a      	ands	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }
}
 8007ab0:	f107 070c 	add.w	r7, r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bc80      	pop	{r7}
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007ac6:	79fb      	ldrb	r3, [r7, #7]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00c      	beq.n	8007ae6 <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8007acc:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007ad0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007ad4:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007ad8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007adc:	6852      	ldr	r2, [r2, #4]
 8007ade:	f042 0203 	orr.w	r2, r2, #3
 8007ae2:	605a      	str	r2, [r3, #4]
 8007ae4:	e00b      	b.n	8007afe <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 8007ae6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007aea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007aee:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007af2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007af6:	6852      	ldr	r2, [r2, #4]
 8007af8:	f022 0203 	bic.w	r2, r2, #3
 8007afc:	605a      	str	r2, [r3, #4]
  }
}
 8007afe:	f107 070c 	add.w	r7, r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bc80      	pop	{r7}
 8007b06:	4770      	bx	lr

08007b08 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	4613      	mov	r3, r2
 8007b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00f      	beq.n	8007b3c <DAC_WaveGenerationCmd+0x34>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8007b1c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007b20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b24:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007b28:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	68b8      	ldr	r0, [r7, #8]
 8007b32:	fa00 f202 	lsl.w	r2, r0, r2
 8007b36:	430a      	orrs	r2, r1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	e010      	b.n	8007b5e <DAC_WaveGenerationCmd+0x56>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8007b3c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007b40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b44:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007b48:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007b4c:	6811      	ldr	r1, [r2, #0]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	68b8      	ldr	r0, [r7, #8]
 8007b52:	fa00 f202 	lsl.w	r2, r0, r2
 8007b56:	ea6f 0202 	mvn.w	r2, r2
 8007b5a:	400a      	ands	r2, r1
 8007b5c:	601a      	str	r2, [r3, #0]
  }
}
 8007b5e:	f107 0714 	add.w	r7, r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8007b68:	b480      	push	{r7}
 8007b6a:	b085      	sub	sp, #20
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 8007b7a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007b7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007b82:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	18d3      	adds	r3, r2, r3
 8007b8a:	f103 0308 	add.w	r3, r3, #8
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	887a      	ldrh	r2, [r7, #2]
 8007b94:	601a      	str	r2, [r3, #0]
}
 8007b96:	f107 0714 	add.w	r7, r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bc80      	pop	{r7}
 8007b9e:	4770      	bx	lr

08007ba0 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 8007bb2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007bb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007bba:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	18d3      	adds	r3, r2, r3
 8007bc2:	f103 0314 	add.w	r3, r3, #20
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	887a      	ldrh	r2, [r7, #2]
 8007bcc:	601a      	str	r2, [r3, #0]
}
 8007bce:	f107 0714 	add.w	r7, r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bc80      	pop	{r7}
 8007bd6:	4770      	bx	lr

08007bd8 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	4613      	mov	r3, r2
 8007be2:	460a      	mov	r2, r1
 8007be4:	807a      	strh	r2, [r7, #2]
 8007be6:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	f04f 0300 	mov.w	r3, #0
 8007bf2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b08      	cmp	r3, #8
 8007bf8:	d106      	bne.n	8007c08 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8007bfa:	887b      	ldrh	r3, [r7, #2]
 8007bfc:	ea4f 2203 	mov.w	r2, r3, lsl #8
 8007c00:	883b      	ldrh	r3, [r7, #0]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e005      	b.n	8007c14 <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8007c08:	887b      	ldrh	r3, [r7, #2]
 8007c0a:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8007c0e:	883b      	ldrh	r3, [r7, #0]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8007c14:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007c18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007c1c:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	18d3      	adds	r3, r2, r3
 8007c24:	f103 0320 	add.w	r3, r3, #32
 8007c28:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	601a      	str	r2, [r3, #0]
}
 8007c30:	f107 0714 	add.w	r7, r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bc80      	pop	{r7}
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop

08007c3c <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b085      	sub	sp, #20
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8007c4a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007c4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007c52:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	18d3      	adds	r3, r2, r3
 8007c5e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007c62:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	b29b      	uxth	r3, r3
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f107 0714 	add.w	r7, r7, #20
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bc80      	pop	{r7}
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop

08007c78 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d010      	beq.n	8007cac <DAC_DMACmd+0x34>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8007c8a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007c8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007c92:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007c96:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007c9a:	6811      	ldr	r1, [r2, #0]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	601a      	str	r2, [r3, #0]
 8007caa:	e011      	b.n	8007cd0 <DAC_DMACmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8007cac:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007cb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007cb4:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007cb8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007cbc:	6811      	ldr	r1, [r2, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007cc4:	fa00 f202 	lsl.w	r2, r0, r2
 8007cc8:	ea6f 0202 	mvn.w	r2, r2
 8007ccc:	400a      	ands	r2, r1
 8007cce:	601a      	str	r2, [r3, #0]
  }
}
 8007cd0:	f107 070c 	add.w	r7, r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bc80      	pop	{r7}
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop

08007cdc <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b085      	sub	sp, #20
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	60f8      	str	r0, [r7, #12]
 8007ce4:	60b9      	str	r1, [r7, #8]
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8007cea:	79fb      	ldrb	r3, [r7, #7]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00f      	beq.n	8007d10 <DAC_ITConfig+0x34>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8007cf0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007cf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007cf8:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007cfc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007d00:	6811      	ldr	r1, [r2, #0]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	68b8      	ldr	r0, [r7, #8]
 8007d06:	fa00 f202 	lsl.w	r2, r0, r2
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	e010      	b.n	8007d32 <DAC_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8007d10:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007d14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d18:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007d1c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007d20:	6811      	ldr	r1, [r2, #0]
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	68b8      	ldr	r0, [r7, #8]
 8007d26:	fa00 f202 	lsl.w	r2, r0, r2
 8007d2a:	ea6f 0202 	mvn.w	r2, r2
 8007d2e:	400a      	ands	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
  }
}
 8007d32:	f107 0714 	add.w	r7, r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bc80      	pop	{r7}
 8007d3a:	4770      	bx	lr

08007d3c <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8007d4c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007d50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5e:	4013      	ands	r3, r2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <DAC_GetFlagStatus+0x30>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8007d64:	f04f 0301 	mov.w	r3, #1
 8007d68:	73fb      	strb	r3, [r7, #15]
 8007d6a:	e002      	b.n	8007d72 <DAC_GetFlagStatus+0x36>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	f107 0714 	add.w	r7, r7, #20
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bc80      	pop	{r7}
 8007d7e:	4770      	bx	lr

08007d80 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8007d8a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007d8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6839      	ldr	r1, [r7, #0]
 8007d96:	fa01 f202 	lsl.w	r2, r1, r2
 8007d9a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007d9c:	f107 070c 	add.w	r7, r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop

08007da8 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007db2:	f04f 0300 	mov.w	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8007db8:	f04f 0300 	mov.w	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8007dbe:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007dc2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8007dd4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007dd8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007ddc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	fa01 f303 	lsl.w	r3, r1, r3
 8007de6:	4013      	ands	r3, r2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d006      	beq.n	8007dfa <DAC_GetITStatus+0x52>
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <DAC_GetITStatus+0x52>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8007df2:	f04f 0301 	mov.w	r3, #1
 8007df6:	73fb      	strb	r3, [r7, #15]
 8007df8:	e002      	b.n	8007e00 <DAC_GetITStatus+0x58>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8007dfa:	f04f 0300 	mov.w	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	f107 0714 	add.w	r7, r7, #20
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop

08007e10 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8007e1a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007e1e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6839      	ldr	r1, [r7, #0]
 8007e26:	fa01 f202 	lsl.w	r2, r1, r2
 8007e2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007e2c:	f107 070c 	add.w	r7, r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bc80      	pop	{r7}
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop

08007e38 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8007e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e40:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bc80      	pop	{r7}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop

08007e54 <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8007e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e5c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8007e66:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop

08007e74 <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007e80:	78fb      	ldrb	r3, [r7, #3]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00c      	beq.n	8007ea0 <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8007e86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e8a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007e8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007e92:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007e96:	6851      	ldr	r1, [r2, #4]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	430a      	orrs	r2, r1
 8007e9c:	605a      	str	r2, [r3, #4]
 8007e9e:	e00d      	b.n	8007ebc <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8007ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ea4:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007ea8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007eac:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007eb0:	6851      	ldr	r1, [r2, #4]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	ea6f 0202 	mvn.w	r2, r2
 8007eb8:	400a      	ands	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }
}
 8007ebc:	f107 070c 	add.w	r7, r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bc80      	pop	{r7}
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop

08007ec8 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00c      	beq.n	8007ef4 <DBGMCU_APB1PeriphConfig+0x2c>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8007eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ede:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ee6:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007eea:	6891      	ldr	r1, [r2, #8]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	430a      	orrs	r2, r1
 8007ef0:	609a      	str	r2, [r3, #8]
 8007ef2:	e00d      	b.n	8007f10 <DBGMCU_APB1PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8007ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ef8:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f00:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007f04:	6891      	ldr	r1, [r2, #8]
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	ea6f 0202 	mvn.w	r2, r2
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	609a      	str	r2, [r3, #8]
  }
}
 8007f10:	f107 070c 	add.w	r7, r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bc80      	pop	{r7}
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop

08007f1c <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007f28:	78fb      	ldrb	r3, [r7, #3]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00c      	beq.n	8007f48 <DBGMCU_APB2PeriphConfig+0x2c>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8007f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f32:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f3a:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007f3e:	68d1      	ldr	r1, [r2, #12]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	60da      	str	r2, [r3, #12]
 8007f46:	e00d      	b.n	8007f64 <DBGMCU_APB2PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8007f48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f4c:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f54:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007f58:	68d1      	ldr	r1, [r2, #12]
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	ea6f 0202 	mvn.w	r2, r2
 8007f60:	400a      	ands	r2, r1
 8007f62:	60da      	str	r2, [r3, #12]
  }
}
 8007f64:	f107 070c 	add.w	r7, r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 8007f74:	f04f 0300 	mov.w	r3, #0
 8007f78:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007f7c:	f04f 0200 	mov.w	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8007f82:	f04f 0300 	mov.w	r3, #0
 8007f86:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007f98:	f04f 021f 	mov.w	r2, #31
 8007f9c:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 8007f9e:	f04f 0300 	mov.w	r3, #0
 8007fa2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8007fc8:	f04f 0300 	mov.w	r3, #0
 8007fcc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr

08007fdc <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8007fe4:	f04f 0300 	mov.w	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8007fea:	f04f 0300 	mov.w	r3, #0
 8007fee:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007ff2:	f04f 0200 	mov.w	r2, #0
 8007ff6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007ffa:	6812      	ldr	r2, [r2, #0]
 8007ffc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008000:	f022 0201 	bic.w	r2, r2, #1
 8008004:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8008006:	f04f 0300 	mov.w	r3, #0
 800800a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8008018:	f023 0312 	bic.w	r3, r3, #18
 800801c:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8008026:	4313      	orrs	r3, r2
 8008028:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800802e:	4313      	orrs	r3, r2
 8008030:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8008036:	4313      	orrs	r3, r2
 8008038:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 800803e:	4313      	orrs	r3, r2
 8008040:	b29a      	uxth	r2, r3
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	895b      	ldrh	r3, [r3, #10]
 8008046:	4313      	orrs	r3, r2
 8008048:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800804e:	4313      	orrs	r3, r2
 8008050:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4313      	orrs	r3, r2
 8008056:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8008058:	f04f 0300 	mov.w	r3, #0
 800805c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	601a      	str	r2, [r3, #0]
}
 8008064:	f107 0714 	add.w	r7, r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop

08008070 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f04f 0200 	mov.w	r2, #0
 8008086:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f04f 0200 	mov.w	r2, #0
 800808e:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f04f 0200 	mov.w	r2, #0
 8008096:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f04f 0200 	mov.w	r2, #0
 80080a6:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f04f 0200 	mov.w	r2, #0
 80080ae:	819a      	strh	r2, [r3, #12]
}
 80080b0:	f107 070c 	add.w	r7, r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	8852      	ldrh	r2, [r2, #2]
 80080d0:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	8812      	ldrh	r2, [r2, #0]
 80080d6:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 80080da:	430a      	orrs	r2, r1
 80080dc:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 80080de:	f04f 0300 	mov.w	r3, #0
 80080e2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	88d2      	ldrh	r2, [r2, #6]
 80080ea:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	8892      	ldrh	r2, [r2, #4]
 80080f0:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 80080f4:	430a      	orrs	r2, r1
 80080f6:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 80080f8:	f107 070c 	add.w	r7, r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bc80      	pop	{r7}
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop

08008104 <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	4603      	mov	r3, r0
 800810c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800810e:	79fb      	ldrb	r3, [r7, #7]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00c      	beq.n	800812e <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800811c:	f04f 0200 	mov.w	r2, #0
 8008120:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	f042 0204 	orr.w	r2, r2, #4
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	e00b      	b.n	8008146 <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008136:	f04f 0200 	mov.w	r2, #0
 800813a:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800813e:	6812      	ldr	r2, [r2, #0]
 8008140:	f022 0204 	bic.w	r2, r2, #4
 8008144:	601a      	str	r2, [r3, #0]
  }
}
 8008146:	f107 070c 	add.w	r7, r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr

08008150 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8008158:	f04f 0300 	mov.w	r3, #0
 800815c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	7852      	ldrb	r2, [r2, #1]
 800816a:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 800816e:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	7892      	ldrb	r2, [r2, #2]
 8008174:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8008178:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	78d2      	ldrb	r2, [r2, #3]
 800817e:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8008182:	430a      	orrs	r2, r1
 8008184:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8008186:	f107 070c 	add.w	r7, r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	bc80      	pop	{r7}
 800818e:	4770      	bx	lr

08008190 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00c      	beq.n	80081ba <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80081a8:	f04f 0200 	mov.w	r2, #0
 80081ac:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	f042 0208 	orr.w	r2, r2, #8
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	e00b      	b.n	80081d2 <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80081c2:	f04f 0200 	mov.w	r2, #0
 80081c6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80081ca:	6812      	ldr	r2, [r2, #0]
 80081cc:	f022 0208 	bic.w	r2, r2, #8
 80081d0:	601a      	str	r2, [r3, #0]
  }
}
 80081d2:	f107 070c 	add.w	r7, r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bc80      	pop	{r7}
 80081da:	4770      	bx	lr

080081dc <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80081e6:	79fb      	ldrb	r3, [r7, #7]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d00c      	beq.n	8008206 <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	e00b      	b.n	800821e <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800820e:	f04f 0200 	mov.w	r2, #0
 8008212:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8008216:	6812      	ldr	r2, [r2, #0]
 8008218:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800821c:	601a      	str	r2, [r3, #0]
  }
}
 800821e:	f107 070c 	add.w	r7, r7, #12
 8008222:	46bd      	mov	sp, r7
 8008224:	bc80      	pop	{r7}
 8008226:	4770      	bx	lr

08008228 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	4603      	mov	r3, r0
 8008230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8008232:	79fb      	ldrb	r3, [r7, #7]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00c      	beq.n	8008252 <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8008238:	f04f 0300 	mov.w	r3, #0
 800823c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008240:	f04f 0200 	mov.w	r2, #0
 8008244:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	f042 0201 	orr.w	r2, r2, #1
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	e00b      	b.n	800826a <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8008252:	f04f 0300 	mov.w	r3, #0
 8008256:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8008262:	6812      	ldr	r2, [r2, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]
  }
}
 800826a:	f107 070c 	add.w	r7, r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8008282:	4618      	mov	r0, r3
 8008284:	46bd      	mov	sp, r7
 8008286:	bc80      	pop	{r7}
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop

0800828c <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	80fa      	strh	r2, [r7, #6]
 8008298:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800829a:	797b      	ldrb	r3, [r7, #5]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d00c      	beq.n	80082ba <DCMI_ITConfig+0x2e>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 80082a0:	f04f 0300 	mov.w	r3, #0
 80082a4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80082b0:	68d1      	ldr	r1, [r2, #12]
 80082b2:	88fa      	ldrh	r2, [r7, #6]
 80082b4:	430a      	orrs	r2, r1
 80082b6:	60da      	str	r2, [r3, #12]
 80082b8:	e00e      	b.n	80082d8 <DCMI_ITConfig+0x4c>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 80082ba:	f04f 0300 	mov.w	r3, #0
 80082be:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80082ca:	68d1      	ldr	r1, [r2, #12]
 80082cc:	88fa      	ldrh	r2, [r7, #6]
 80082ce:	ea6f 0202 	mvn.w	r2, r2
 80082d2:	b292      	uxth	r2, r2
 80082d4:	400a      	ands	r2, r1
 80082d6:	60da      	str	r2, [r3, #12]
  }  
}
 80082d8:	f107 070c 	add.w	r7, r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop

080082e4 <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b087      	sub	sp, #28
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	4603      	mov	r3, r0
 80082ec:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 80082ee:	f04f 0300 	mov.w	r3, #0
 80082f2:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 80082f4:	f04f 0300 	mov.w	r3, #0
 80082f8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 80082fa:	88fb      	ldrh	r3, [r7, #6]
 80082fc:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8008300:	b29b      	uxth	r3, r3
 8008302:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d106      	bne.n	8008318 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	e00f      	b.n	8008338 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d106      	bne.n	800832c <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	613b      	str	r3, [r7, #16]
 800832a:	e005      	b.n	8008338 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8008338:	88fa      	ldrh	r2, [r7, #6]
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 8008342:	f04f 0301 	mov.w	r3, #1
 8008346:	75fb      	strb	r3, [r7, #23]
 8008348:	e002      	b.n	8008350 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 800834a:	f04f 0300 	mov.w	r3, #0
 800834e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
}
 8008352:	4618      	mov	r0, r3
 8008354:	f107 071c 	add.w	r7, r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	bc80      	pop	{r7}
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop

08008360 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	4603      	mov	r3, r0
 8008368:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 800836a:	f04f 0300 	mov.w	r3, #0
 800836e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8008372:	88fa      	ldrh	r2, [r7, #6]
 8008374:	615a      	str	r2, [r3, #20]
}
 8008376:	f107 070c 	add.w	r7, r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	bc80      	pop	{r7}
 800837e:	4770      	bx	lr

08008380 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	4603      	mov	r3, r0
 8008388:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 800838a:	f04f 0300 	mov.w	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8008390:	f04f 0300 	mov.w	r3, #0
 8008394:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8008396:	f04f 0300 	mov.w	r3, #0
 800839a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800839e:	691a      	ldr	r2, [r3, #16]
 80083a0:	88fb      	ldrh	r3, [r7, #6]
 80083a2:	4013      	ands	r3, r2
 80083a4:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d003      	beq.n	80083b4 <DCMI_GetITStatus+0x34>
  {
    bitstatus = SET;
 80083ac:	f04f 0301 	mov.w	r3, #1
 80083b0:	73fb      	strb	r3, [r7, #15]
 80083b2:	e002      	b.n	80083ba <DCMI_GetITStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
 80083b4:	f04f 0300 	mov.w	r3, #0
 80083b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	f107 0714 	add.w	r7, r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr

080083c8 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	4603      	mov	r3, r0
 80083d0:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 80083d2:	f04f 0300 	mov.w	r3, #0
 80083d6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	615a      	str	r2, [r3, #20]
}
 80083de:	f107 070c 	add.w	r7, r7, #12
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bc80      	pop	{r7}
 80083e6:	4770      	bx	lr

080083e8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f023 0201 	bic.w	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f04f 0200 	mov.w	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f04f 0200 	mov.w	r2, #0
 800840a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f04f 0200 	mov.w	r2, #0
 8008412:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f04f 0200 	mov.w	r2, #0
 800841a:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f04f 0221 	mov.w	r2, #33	; 0x21
 800842a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	f246 0310 	movw	r3, #24592	; 0x6010
 8008432:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008436:	429a      	cmp	r2, r3
 8008438:	d107      	bne.n	800844a <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 800843a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800843e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008442:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8008446:	609a      	str	r2, [r3, #8]
 8008448:	e0eb      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	f246 0328 	movw	r3, #24616	; 0x6028
 8008450:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008454:	429a      	cmp	r2, r3
 8008456:	d107      	bne.n	8008468 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8008458:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800845c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008460:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8008464:	609a      	str	r2, [r3, #8]
 8008466:	e0dc      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f246 0340 	movw	r3, #24640	; 0x6040
 800846e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008472:	429a      	cmp	r2, r3
 8008474:	d107      	bne.n	8008486 <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8008476:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800847a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800847e:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8008482:	609a      	str	r2, [r3, #8]
 8008484:	e0cd      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	f246 0358 	movw	r3, #24664	; 0x6058
 800848c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008490:	429a      	cmp	r2, r3
 8008492:	d107      	bne.n	80084a4 <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8008494:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008498:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800849c:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80084a0:	609a      	str	r2, [r3, #8]
 80084a2:	e0be      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	f246 0370 	movw	r3, #24688	; 0x6070
 80084aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d109      	bne.n	80084c6 <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80084b2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80084b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084ba:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80084be:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80084c2:	60da      	str	r2, [r3, #12]
 80084c4:	e0ad      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	f246 0388 	movw	r3, #24712	; 0x6088
 80084cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d109      	bne.n	80084e8 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80084d4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80084d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084dc:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80084e0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80084e4:	60da      	str	r2, [r3, #12]
 80084e6:	e09c      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	f246 03a0 	movw	r3, #24736	; 0x60a0
 80084ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d109      	bne.n	800850a <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 80084f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80084fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80084fe:	f04f 0200 	mov.w	r2, #0
 8008502:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8008506:	60da      	str	r2, [r3, #12]
 8008508:	e08b      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8008510:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008514:	429a      	cmp	r2, r3
 8008516:	d107      	bne.n	8008528 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8008518:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800851c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008520:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e07c      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	f246 4310 	movw	r3, #25616	; 0x6410
 800852e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008532:	429a      	cmp	r2, r3
 8008534:	d107      	bne.n	8008546 <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8008536:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800853a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800853e:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	e06d      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8008546:	687a      	ldr	r2, [r7, #4]
 8008548:	f246 4328 	movw	r3, #25640	; 0x6428
 800854c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008550:	429a      	cmp	r2, r3
 8008552:	d107      	bne.n	8008564 <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8008554:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008558:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800855c:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8008560:	609a      	str	r2, [r3, #8]
 8008562:	e05e      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	f246 4340 	movw	r3, #25664	; 0x6440
 800856a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800856e:	429a      	cmp	r2, r3
 8008570:	d107      	bne.n	8008582 <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8008572:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008576:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800857a:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800857e:	609a      	str	r2, [r3, #8]
 8008580:	e04f      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	f246 4358 	movw	r3, #25688	; 0x6458
 8008588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800858c:	429a      	cmp	r2, r3
 800858e:	d107      	bne.n	80085a0 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8008590:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008598:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800859c:	609a      	str	r2, [r3, #8]
 800859e:	e040      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	f246 4370 	movw	r3, #25712	; 0x6470
 80085a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d109      	bne.n	80085c2 <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80085ae:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80085b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085b6:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80085ba:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80085be:	60da      	str	r2, [r3, #12]
 80085c0:	e02f      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	f246 4388 	movw	r3, #25736	; 0x6488
 80085c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d109      	bne.n	80085e4 <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80085d0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80085d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085d8:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80085dc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80085e0:	60da      	str	r2, [r3, #12]
 80085e2:	e01e      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	f246 43a0 	movw	r3, #25760	; 0x64a0
 80085ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d109      	bne.n	8008606 <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80085f2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80085f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80085fa:	f04f 0200 	mov.w	r2, #0
 80085fe:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8008602:	60da      	str	r2, [r3, #12]
 8008604:	e00d      	b.n	8008622 <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	f246 43b8 	movw	r3, #25784	; 0x64b8
 800860c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008610:	429a      	cmp	r2, r3
 8008612:	d106      	bne.n	8008622 <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8008614:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008618:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800861c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8008620:	60da      	str	r2, [r3, #12]
    }
  }
}
 8008622:	f107 070c 	add.w	r7, r7, #12
 8008626:	46bd      	mov	sp, r7
 8008628:	bc80      	pop	{r7}
 800862a:	4770      	bx	lr

0800862c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008636:	f04f 0300 	mov.w	r3, #0
 800863a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	f248 033f 	movw	r3, #32831	; 0x803f
 8008648:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 800864c:	4013      	ands	r3, r2
 800864e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800865e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	699b      	ldr	r3, [r3, #24]
 8008664:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800866a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	6a1b      	ldr	r3, [r3, #32]
 8008670:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8008676:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800867c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8008682:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008688:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	4313      	orrs	r3, r2
 800868e:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	695b      	ldr	r3, [r3, #20]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f023 0307 	bic.w	r3, r3, #7
 80086a2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ac:	4313      	orrs	r3, r2
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689a      	ldr	r2, [r3, #8]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60da      	str	r2, [r3, #12]
}
 80086d2:	f107 0714 	add.w	r7, r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f04f 0200 	mov.w	r2, #0
 80086ea:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f04f 0200 	mov.w	r2, #0
 80086f2:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f04f 0200 	mov.w	r2, #0
 8008702:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f04f 0200 	mov.w	r2, #0
 800870a:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f04f 0200 	mov.w	r2, #0
 800871a:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f04f 0200 	mov.w	r2, #0
 800872a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f04f 0200 	mov.w	r2, #0
 8008732:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f04f 0200 	mov.w	r2, #0
 8008742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f04f 0200 	mov.w	r2, #0
 8008752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f04f 0200 	mov.w	r2, #0
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800875c:	f107 070c 	add.w	r7, r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop

08008768 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f043 0201 	orr.w	r2, r3, #1
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e005      	b.n	8008794 <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f023 0201 	bic.w	r2, r3, #1
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	601a      	str	r2, [r3, #0]
  }
}
 8008794:	f107 070c 	add.w	r7, r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	bc80      	pop	{r7}
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop

080087a0 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d006      	beq.n	80087be <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	601a      	str	r2, [r3, #0]
 80087bc:	e005      	b.n	80087ca <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	601a      	str	r2, [r3, #0]
  }
}
 80087ca:	f107 070c 	add.w	r7, r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d006      	beq.n	80087f2 <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f043 0220 	orr.w	r2, r3, #32
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	e005      	b.n	80087fe <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f023 0220 	bic.w	r2, r3, #32
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	601a      	str	r2, [r3, #0]
  }
}
 80087fe:	f107 070c 	add.w	r7, r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	bc80      	pop	{r7}
 8008806:	4770      	bx	lr

08008808 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 8008814:	887a      	ldrh	r2, [r7, #2]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	605a      	str	r2, [r3, #4]
}
 800881a:	f107 070c 	add.w	r7, r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	bc80      	pop	{r7}
 8008822:	4770      	bx	lr

08008824 <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	b29b      	uxth	r3, r3
}
 8008832:	4618      	mov	r0, r3
 8008834:	f107 070c 	add.w	r7, r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	bc80      	pop	{r7}
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop

08008840 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d006      	beq.n	8008860 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	e005      	b.n	800886c <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	611a      	str	r2, [r3, #16]
}
 8008872:	f107 0714 	add.w	r7, r7, #20
 8008876:	46bd      	mov	sp, r7
 8008878:	bc80      	pop	{r7}
 800887a:	4770      	bx	lr

0800887c <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	460b      	mov	r3, r1
 8008886:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 8008888:	78fb      	ldrb	r3, [r7, #3]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d006      	beq.n	800889c <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	601a      	str	r2, [r3, #0]
 800889a:	e005      	b.n	80088a8 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	601a      	str	r2, [r3, #0]
  }
}
 80088a8:	f107 070c 	add.w	r7, r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop

080088b4 <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	611a      	str	r2, [r3, #16]
 80088cc:	e002      	b.n	80088d4 <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	68ba      	ldr	r2, [r7, #8]
 80088d2:	60da      	str	r2, [r3, #12]
  }
}
 80088d4:	f107 0714 	add.w	r7, r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	bc80      	pop	{r7}
 80088dc:	4770      	bx	lr
 80088de:	bf00      	nop

080088e0 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80088e8:	f04f 0300 	mov.w	r3, #0
 80088ec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 80088fa:	f04f 0301 	mov.w	r3, #1
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e002      	b.n	8008908 <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8008908:	68fb      	ldr	r3, [r7, #12]
}
 800890a:	4618      	mov	r0, r3
 800890c:	f107 0714 	add.w	r7, r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	bc80      	pop	{r7}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8008920:	f04f 0300 	mov.w	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	b2db      	uxtb	r3, r3
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8008934:	f04f 0301 	mov.w	r3, #1
 8008938:	73fb      	strb	r3, [r7, #15]
 800893a:	e002      	b.n	8008942 <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8008942:	7bfb      	ldrb	r3, [r7, #15]
}
 8008944:	4618      	mov	r0, r3
 8008946:	f107 0714 	add.w	r7, r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008958:	f04f 0300 	mov.w	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008966:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8008968:	68fb      	ldr	r3, [r7, #12]
}
 800896a:	4618      	mov	r0, r3
 800896c:	f107 0714 	add.w	r7, r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	bc80      	pop	{r7}
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop

08008978 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8008982:	f04f 0300 	mov.w	r3, #0
 8008986:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8008988:	f04f 0300 	mov.w	r3, #0
 800898c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	f246 430f 	movw	r3, #25615	; 0x640f
 8008994:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008998:	429a      	cmp	r2, r3
 800899a:	d805      	bhi.n	80089a8 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800899c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80089a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089a4:	613b      	str	r3, [r7, #16]
 80089a6:	e004      	b.n	80089b2 <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80089a8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80089ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089b0:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	60fb      	str	r3, [r7, #12]
 80089c2:	e002      	b.n	80089ca <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	f640 737d 	movw	r3, #3965	; 0xf7d
 80089d0:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80089d4:	4013      	ands	r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	4013      	ands	r3, r2
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 80089e2:	f04f 0301 	mov.w	r3, #1
 80089e6:	75fb      	strb	r3, [r7, #23]
 80089e8:	e002      	b.n	80089f0 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 80089ea:	f04f 0300 	mov.w	r3, #0
 80089ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	f107 071c 	add.w	r7, r7, #28
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop

08008a00 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	f246 430f 	movw	r3, #25615	; 0x640f
 8008a10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d805      	bhi.n	8008a24 <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8008a18:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008a1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	e004      	b.n	8008a2e <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8008a24:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008a28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d008      	beq.n	8008a4a <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8008a38:	683a      	ldr	r2, [r7, #0]
 8008a3a:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008a3e:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008a42:	4013      	ands	r3, r2
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	60d3      	str	r3, [r2, #12]
 8008a48:	e007      	b.n	8008a5a <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008a50:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008a54:	4013      	ands	r3, r2
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	6093      	str	r3, [r2, #8]
  }    
}
 8008a5a:	f107 0714 	add.w	r7, r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bc80      	pop	{r7}
 8008a62:	4770      	bx	lr

08008a64 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	4613      	mov	r3, r2
 8008a70:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00f      	beq.n	8008a9c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8008a7c:	79fb      	ldrb	r3, [r7, #7]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d006      	beq.n	8008a90 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	615a      	str	r2, [r3, #20]
 8008a8e:	e005      	b.n	8008a9c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b80      	cmp	r3, #128	; 0x80
 8008aa0:	d015      	beq.n	8008ace <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d008      	beq.n	8008aba <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	f003 031e 	and.w	r3, r3, #30
 8008ab2:	431a      	orrs	r2, r3
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	601a      	str	r2, [r3, #0]
 8008ab8:	e009      	b.n	8008ace <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	f003 031e 	and.w	r3, r3, #30
 8008ac4:	ea6f 0303 	mvn.w	r3, r3
 8008ac8:	401a      	ands	r2, r3
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8008ace:	f107 0714 	add.w	r7, r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bc80      	pop	{r7}
 8008ad6:	4770      	bx	lr

08008ad8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8008ae2:	f04f 0300 	mov.w	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8008ae8:	f04f 0300 	mov.w	r3, #0
 8008aec:	60fb      	str	r3, [r7, #12]
 8008aee:	f04f 0300 	mov.w	r3, #0
 8008af2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8008af4:	687a      	ldr	r2, [r7, #4]
 8008af6:	f246 430f 	movw	r3, #25615	; 0x640f
 8008afa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d805      	bhi.n	8008b0e <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8008b02:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008b06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b0a:	613b      	str	r3, [r7, #16]
 8008b0c:	e004      	b.n	8008b18 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8008b0e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008b12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b16:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8008b18:	683a      	ldr	r2, [r7, #0]
 8008b1a:	f640 733c 	movw	r3, #3900	; 0xf3c
 8008b1e:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 8008b22:	4013      	ands	r3, r2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <DMA_GetITStatus+0x68>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008b2e:	f003 031e 	and.w	r3, r3, #30
 8008b32:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	60bb      	str	r3, [r7, #8]
 8008b3e:	e004      	b.n	8008b4a <DMA_GetITStatus+0x72>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b48:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <DMA_GetITStatus+0x84>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	60fb      	str	r3, [r7, #12]
 8008b5a:	e002      	b.n	8008b62 <DMA_GetITStatus+0x8a>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008b68:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008b6c:	4013      	ands	r3, r2
 8008b6e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	4013      	ands	r3, r2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d006      	beq.n	8008b88 <DMA_GetITStatus+0xb0>
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <DMA_GetITStatus+0xb0>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8008b80:	f04f 0301 	mov.w	r3, #1
 8008b84:	75fb      	strb	r3, [r7, #23]
 8008b86:	e002      	b.n	8008b8e <DMA_GetITStatus+0xb6>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8008b88:	f04f 0300 	mov.w	r3, #0
 8008b8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	f107 071c 	add.w	r7, r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bc80      	pop	{r7}
 8008b9a:	4770      	bx	lr

08008b9c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	f246 430f 	movw	r3, #25615	; 0x640f
 8008bac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d805      	bhi.n	8008bc0 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8008bb4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008bb8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	e004      	b.n	8008bca <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8008bc0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bc8:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d008      	beq.n	8008be6 <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8008bd4:	683a      	ldr	r2, [r7, #0]
 8008bd6:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008bda:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008bde:	4013      	ands	r3, r2
 8008be0:	68fa      	ldr	r2, [r7, #12]
 8008be2:	60d3      	str	r3, [r2, #12]
 8008be4:	e007      	b.n	8008bf6 <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008bec:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	6093      	str	r3, [r2, #8]
  }   
}
 8008bf6:	f107 0714 	add.w	r7, r7, #20
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bc80      	pop	{r7}
 8008bfe:	4770      	bx	lr

08008c00 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8008c04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8008c12:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c16:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8008c20:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c24:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c28:	f04f 0200 	mov.w	r2, #0
 8008c2c:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8008c2e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c32:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8008c3c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c40:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c48:	f2c0 027f 	movt	r2, #127	; 0x7f
 8008c4c:	615a      	str	r2, [r3, #20]
}
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr

08008c54 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8008c5c:	f04f 0300 	mov.w	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8008c62:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c6a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	799b      	ldrb	r3, [r3, #6]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d078      	beq.n	8008d66 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8008c74:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c7c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008c80:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008c84:	6811      	ldr	r1, [r2, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	ea6f 0202 	mvn.w	r2, r2
 8008c8e:	400a      	ands	r2, r1
 8008c90:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8008c92:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008c9a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008c9e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008ca2:	6851      	ldr	r1, [r2, #4]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	6812      	ldr	r2, [r2, #0]
 8008ca8:	ea6f 0202 	mvn.w	r2, r2
 8008cac:	400a      	ands	r2, r1
 8008cae:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	791b      	ldrb	r3, [r3, #4]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	18d3      	adds	r3, r2, r3
 8008cb8:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	6811      	ldr	r1, [r2, #0]
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6812      	ldr	r2, [r2, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8008cc8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ccc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008cd0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008cd4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008cd8:	6891      	ldr	r1, [r2, #8]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	6812      	ldr	r2, [r2, #0]
 8008cde:	ea6f 0202 	mvn.w	r2, r2
 8008ce2:	400a      	ands	r2, r1
 8008ce4:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8008ce6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008cee:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008cf2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008cf6:	68d1      	ldr	r1, [r2, #12]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	6812      	ldr	r2, [r2, #0]
 8008cfc:	ea6f 0202 	mvn.w	r2, r2
 8008d00:	400a      	ands	r2, r1
 8008d02:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	795b      	ldrb	r3, [r3, #5]
 8008d08:	2b10      	cmp	r3, #16
 8008d0a:	d11a      	bne.n	8008d42 <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8008d0c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d10:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008d14:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008d18:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008d1c:	6891      	ldr	r1, [r2, #8]
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	6812      	ldr	r2, [r2, #0]
 8008d22:	430a      	orrs	r2, r1
 8008d24:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8008d26:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008d2e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008d32:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008d36:	68d1      	ldr	r1, [r2, #12]
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	6812      	ldr	r2, [r2, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	60da      	str	r2, [r3, #12]
 8008d40:	e01f      	b.n	8008d82 <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8008d42:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d46:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008d4a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	795b      	ldrb	r3, [r3, #5]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	18d3      	adds	r3, r2, r3
 8008d54:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	6811      	ldr	r1, [r2, #0]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6812      	ldr	r2, [r2, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	601a      	str	r2, [r3, #0]
 8008d64:	e00d      	b.n	8008d82 <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	791b      	ldrb	r3, [r3, #4]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	18d3      	adds	r3, r2, r3
 8008d6e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	6811      	ldr	r1, [r2, #0]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	6812      	ldr	r2, [r2, #0]
 8008d7a:	ea6f 0202 	mvn.w	r2, r2
 8008d7e:	400a      	ands	r2, r1
 8008d80:	601a      	str	r2, [r3, #0]
  }
}
 8008d82:	f107 0714 	add.w	r7, r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f04f 0200 	mov.w	r2, #0
 8008d9a:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f04f 0200 	mov.w	r2, #0
 8008da2:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f04f 020c 	mov.w	r2, #12
 8008daa:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f04f 0200 	mov.w	r2, #0
 8008db2:	719a      	strb	r2, [r3, #6]
}
 8008db4:	f107 070c 	add.w	r7, r7, #12
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bc80      	pop	{r7}
 8008dbc:	4770      	bx	lr
 8008dbe:	bf00      	nop

08008dc0 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8008dc8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008dcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008dd0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008dd4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008dd8:	6911      	ldr	r1, [r2, #16]
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	611a      	str	r2, [r3, #16]
}
 8008de0:	f107 070c 	add.w	r7, r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop

08008dec <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8008df4:	f04f 0300 	mov.w	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8008dfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008dfe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008e02:	695a      	ldr	r2, [r3, #20]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4013      	ands	r3, r2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8008e0c:	f04f 0301 	mov.w	r3, #1
 8008e10:	73fb      	strb	r3, [r7, #15]
 8008e12:	e002      	b.n	8008e1a <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8008e14:	f04f 0300 	mov.w	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f107 0714 	add.w	r7, r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bc80      	pop	{r7}
 8008e26:	4770      	bx	lr

08008e28 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8008e30:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	615a      	str	r2, [r3, #20]
}
 8008e3c:	f107 070c 	add.w	r7, r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bc80      	pop	{r7}
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop

08008e48 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8008e50:	f04f 0300 	mov.w	r3, #0
 8008e54:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8008e56:	f04f 0300 	mov.w	r3, #0
 8008e5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8008e5c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8008e6c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008e70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d006      	beq.n	8008e8c <EXTI_GetITStatus+0x44>
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d003      	beq.n	8008e8c <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 8008e84:	f04f 0301 	mov.w	r3, #1
 8008e88:	73fb      	strb	r3, [r7, #15]
 8008e8a:	e002      	b.n	8008e92 <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	f107 0714 	add.w	r7, r7, #20
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bc80      	pop	{r7}
 8008e9e:	4770      	bx	lr

08008ea0 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8008ea8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008eac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	615a      	str	r2, [r3, #20]
}
 8008eb4:	f107 070c 	add.w	r7, r7, #12
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop

08008ec0 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8008ec8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ecc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	b2d2      	uxtb	r2, r2
 8008ed4:	701a      	strb	r2, [r3, #0]
}
 8008ed6:	f107 070c 	add.w	r7, r7, #12
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bc80      	pop	{r7}
 8008ede:	4770      	bx	lr

08008ee0 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8008eea:	79fb      	ldrb	r3, [r7, #7]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00c      	beq.n	8008f0a <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8008ef0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ef4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ef8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008efc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f00:	6812      	ldr	r2, [r2, #0]
 8008f02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f06:	601a      	str	r2, [r3, #0]
 8008f08:	e00b      	b.n	8008f22 <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8008f0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f12:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008f16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f1a:	6812      	ldr	r2, [r2, #0]
 8008f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f20:	601a      	str	r2, [r3, #0]
  }
}
 8008f22:	f107 070c 	add.w	r7, r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bc80      	pop	{r7}
 8008f2a:	4770      	bx	lr

08008f2c <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8008f36:	79fb      	ldrb	r3, [r7, #7]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00c      	beq.n	8008f56 <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8008f3c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f40:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f44:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008f48:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f4c:	6812      	ldr	r2, [r2, #0]
 8008f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e00b      	b.n	8008f6e <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8008f56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f5e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008f62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f66:	6812      	ldr	r2, [r2, #0]
 8008f68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008f6c:	601a      	str	r2, [r3, #0]
  }
}
 8008f6e:	f107 070c 	add.w	r7, r7, #12
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bc80      	pop	{r7}
 8008f76:	4770      	bx	lr

08008f78 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	4603      	mov	r3, r0
 8008f80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8008f82:	79fb      	ldrb	r3, [r7, #7]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d00c      	beq.n	8008fa2 <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8008f88:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f90:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008f94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	e00b      	b.n	8008fba <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8008fa2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008faa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008fae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fb8:	601a      	str	r2, [r3, #0]
  }
}
 8008fba:	f107 070c 	add.w	r7, r7, #12
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bc80      	pop	{r7}
 8008fc2:	4770      	bx	lr

08008fc4 <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8008fc8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fd0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008fd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fd8:	6812      	ldr	r2, [r2, #0]
 8008fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fde:	601a      	str	r2, [r3, #0]
}
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop

08008fe8 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8008fec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ff0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ff4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008ff8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ffc:	6812      	ldr	r2, [r2, #0]
 8008ffe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009002:	601a      	str	r2, [r3, #0]
}
 8009004:	46bd      	mov	sp, r7
 8009006:	bc80      	pop	{r7}
 8009008:	4770      	bx	lr
 800900a:	bf00      	nop

0800900c <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8009010:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009014:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da11      	bge.n	8009042 <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 800901e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009022:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009026:	f240 1223 	movw	r2, #291	; 0x123
 800902a:	f2c4 5267 	movt	r2, #17767	; 0x4567
 800902e:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8009030:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009038:	f648 12ab 	movw	r2, #35243	; 0x89ab
 800903c:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8009040:	605a      	str	r2, [r3, #4]
  }  
}
 8009042:	46bd      	mov	sp, r7
 8009044:	bc80      	pop	{r7}
 8009046:	4770      	bx	lr

08009048 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8009048:	b480      	push	{r7}
 800904a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800904c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009050:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009054:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009058:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800905c:	6912      	ldr	r2, [r2, #16]
 800905e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8009062:	611a      	str	r2, [r3, #16]
}
 8009064:	46bd      	mov	sp, r7
 8009066:	bc80      	pop	{r7}
 8009068:	4770      	bx	lr
 800906a:	bf00      	nop

0800906c <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8009078:	f04f 0300 	mov.w	r3, #0
 800907c:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 800907e:	f04f 0308 	mov.w	r3, #8
 8009082:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8009084:	78fb      	ldrb	r3, [r7, #3]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d103      	bne.n	8009092 <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800908a:	f04f 0300 	mov.w	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e010      	b.n	80090b4 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8009092:	78fb      	ldrb	r3, [r7, #3]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d103      	bne.n	80090a0 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8009098:	f44f 7380 	mov.w	r3, #256	; 0x100
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	e009      	b.n	80090b4 <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 80090a0:	78fb      	ldrb	r3, [r7, #3]
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d103      	bne.n	80090ae <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80090a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80090aa:	60fb      	str	r3, [r7, #12]
 80090ac:	e002      	b.n	80090b4 <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80090ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090b2:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80090b4:	f000 fbec 	bl	8009890 <FLASH_WaitForLastOperation>
 80090b8:	4603      	mov	r3, r0
 80090ba:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	2b08      	cmp	r3, #8
 80090c0:	d159      	bne.n	8009176 <FLASH_EraseSector+0x10a>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 80090c2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80090c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80090ca:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80090ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80090d2:	6912      	ldr	r2, [r2, #16]
 80090d4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80090d8:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 80090da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80090de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80090e2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80090e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80090ea:	6911      	ldr	r1, [r2, #16]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	430a      	orrs	r2, r1
 80090f0:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 80090f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80090f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80090fa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80090fe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009102:	6912      	ldr	r2, [r2, #16]
 8009104:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009108:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 800910a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800910e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009112:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009116:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800911a:	6911      	ldr	r1, [r2, #16]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	430a      	orrs	r2, r1
 8009120:	f042 0202 	orr.w	r2, r2, #2
 8009124:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8009126:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800912a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800912e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009132:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009136:	6912      	ldr	r2, [r2, #16]
 8009138:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800913c:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800913e:	f000 fba7 	bl	8009890 <FLASH_WaitForLastOperation>
 8009142:	4603      	mov	r3, r0
 8009144:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8009146:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800914a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800914e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009152:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009156:	6912      	ldr	r2, [r2, #16]
 8009158:	f022 0202 	bic.w	r2, r2, #2
 800915c:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 800915e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009162:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009166:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800916a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800916e:	6912      	ldr	r2, [r2, #16]
 8009170:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8009174:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 8009176:	7afb      	ldrb	r3, [r7, #11]
}
 8009178:	4618      	mov	r0, r3
 800917a:	f107 0710 	add.w	r7, r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop

08009184 <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	4603      	mov	r3, r0
 800918c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 800918e:	f04f 0300 	mov.w	r3, #0
 8009192:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8009194:	f04f 0308 	mov.w	r3, #8
 8009198:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800919a:	f000 fb79 	bl	8009890 <FLASH_WaitForLastOperation>
 800919e:	4603      	mov	r3, r0
 80091a0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d103      	bne.n	80091b0 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80091a8:	f04f 0300 	mov.w	r3, #0
 80091ac:	60fb      	str	r3, [r7, #12]
 80091ae:	e010      	b.n	80091d2 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 80091b0:	79fb      	ldrb	r3, [r7, #7]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d103      	bne.n	80091be <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80091b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091ba:	60fb      	str	r3, [r7, #12]
 80091bc:	e009      	b.n	80091d2 <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 80091be:	79fb      	ldrb	r3, [r7, #7]
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d103      	bne.n	80091cc <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80091c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80091c8:	60fb      	str	r3, [r7, #12]
 80091ca:	e002      	b.n	80091d2 <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80091cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80091d0:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 80091d2:	7afb      	ldrb	r3, [r7, #11]
 80091d4:	2b08      	cmp	r3, #8
 80091d6:	d13f      	bne.n	8009258 <FLASH_EraseAllSectors+0xd4>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 80091d8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80091dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091e0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80091e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80091e8:	6912      	ldr	r2, [r2, #16]
 80091ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80091ee:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 80091f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80091f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091f8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80091fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009200:	6911      	ldr	r1, [r2, #16]
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	430a      	orrs	r2, r1
 8009206:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 8009208:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800920c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009210:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009214:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009218:	6912      	ldr	r2, [r2, #16]
 800921a:	f042 0204 	orr.w	r2, r2, #4
 800921e:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8009220:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009224:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009228:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800922c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009230:	6912      	ldr	r2, [r2, #16]
 8009232:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009236:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8009238:	f000 fb2a 	bl	8009890 <FLASH_WaitForLastOperation>
 800923c:	4603      	mov	r3, r0
 800923e:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8009240:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009244:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009248:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800924c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009250:	6912      	ldr	r2, [r2, #16]
 8009252:	f022 0204 	bic.w	r2, r2, #4
 8009256:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 8009258:	7afb      	ldrb	r3, [r7, #11]
}
 800925a:	4618      	mov	r0, r3
 800925c:	f107 0710 	add.w	r7, r7, #16
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}

08009264 <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b086      	sub	sp, #24
 8009268:	af00      	add	r7, sp, #0
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8009270:	f04f 0308 	mov.w	r3, #8
 8009274:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8009276:	f000 fb0b 	bl	8009890 <FLASH_WaitForLastOperation>
 800927a:	4603      	mov	r3, r0
 800927c:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d138      	bne.n	80092f6 <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8009284:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009288:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800928c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009290:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009294:	6912      	ldr	r2, [r2, #16]
 8009296:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800929a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800929c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092a4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80092a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80092ac:	6912      	ldr	r2, [r2, #16]
 80092ae:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80092b2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80092b4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092bc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80092c0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80092c4:	6912      	ldr	r2, [r2, #16]
 80092c6:	f042 0201 	orr.w	r2, r2, #1
 80092ca:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 80092cc:	68f9      	ldr	r1, [r7, #12]
 80092ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d2:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80092d6:	f000 fadb 	bl	8009890 <FLASH_WaitForLastOperation>
 80092da:	4603      	mov	r3, r0
 80092dc:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80092de:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092e6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80092ea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80092ee:	6912      	ldr	r2, [r2, #16]
 80092f0:	f022 0201 	bic.w	r2, r2, #1
 80092f4:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	f107 0718 	add.w	r7, r7, #24
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop

08009304 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 800930e:	f04f 0308 	mov.w	r3, #8
 8009312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8009314:	f000 fabc 	bl	8009890 <FLASH_WaitForLastOperation>
 8009318:	4603      	mov	r3, r0
 800931a:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800931c:	7bfb      	ldrb	r3, [r7, #15]
 800931e:	2b08      	cmp	r3, #8
 8009320:	d136      	bne.n	8009390 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8009322:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009326:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800932a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800932e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009332:	6912      	ldr	r2, [r2, #16]
 8009334:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8009338:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 800933a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800933e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009342:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009346:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800934a:	6912      	ldr	r2, [r2, #16]
 800934c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009350:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8009352:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009356:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800935a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800935e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009362:	6912      	ldr	r2, [r2, #16]
 8009364:	f042 0201 	orr.w	r2, r2, #1
 8009368:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8009370:	f000 fa8e 	bl	8009890 <FLASH_WaitForLastOperation>
 8009374:	4603      	mov	r3, r0
 8009376:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8009378:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800937c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009380:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009384:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009388:	6912      	ldr	r2, [r2, #16]
 800938a:	f022 0201 	bic.w	r2, r2, #1
 800938e:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8009390:	7bfb      	ldrb	r3, [r7, #15]
}
 8009392:	4618      	mov	r0, r3
 8009394:	f107 0710 	add.w	r7, r7, #16
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80093a8:	f04f 0308 	mov.w	r3, #8
 80093ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80093ae:	f000 fa6f 	bl	8009890 <FLASH_WaitForLastOperation>
 80093b2:	4603      	mov	r3, r0
 80093b4:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80093b6:	7bfb      	ldrb	r3, [r7, #15]
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d136      	bne.n	800942a <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80093bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093c4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80093c8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093cc:	6912      	ldr	r2, [r2, #16]
 80093ce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80093d2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80093d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093dc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80093e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093e4:	6912      	ldr	r2, [r2, #16]
 80093e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093ea:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80093ec:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80093f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093f4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80093f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80093fc:	6912      	ldr	r2, [r2, #16]
 80093fe:	f042 0201 	orr.w	r2, r2, #1
 8009402:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	887a      	ldrh	r2, [r7, #2]
 8009408:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 800940a:	f000 fa41 	bl	8009890 <FLASH_WaitForLastOperation>
 800940e:	4603      	mov	r3, r0
 8009410:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8009412:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009416:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800941a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800941e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009422:	6912      	ldr	r2, [r2, #16]
 8009424:	f022 0201 	bic.w	r2, r2, #1
 8009428:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800942a:	7bfb      	ldrb	r3, [r7, #15]
}
 800942c:	4618      	mov	r0, r3
 800942e:	f107 0710 	add.w	r7, r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop

08009438 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	460b      	mov	r3, r1
 8009442:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8009444:	f04f 0308 	mov.w	r3, #8
 8009448:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800944a:	f000 fa21 	bl	8009890 <FLASH_WaitForLastOperation>
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	2b08      	cmp	r3, #8
 8009456:	d134      	bne.n	80094c2 <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8009458:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800945c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009460:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009464:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009468:	6912      	ldr	r2, [r2, #16]
 800946a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800946e:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8009470:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009474:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009478:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800947c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009480:	6912      	ldr	r2, [r2, #16]
 8009482:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8009484:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800948c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009490:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009494:	6912      	ldr	r2, [r2, #16]
 8009496:	f042 0201 	orr.w	r2, r2, #1
 800949a:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80094a2:	f000 f9f5 	bl	8009890 <FLASH_WaitForLastOperation>
 80094a6:	4603      	mov	r3, r0
 80094a8:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80094aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094b2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80094b6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80094ba:	6912      	ldr	r2, [r2, #16]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 80094c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	f107 0710 	add.w	r7, r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop

080094d0 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 80094d0:	b480      	push	{r7}
 80094d2:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80094d4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	f003 0301 	and.w	r3, r3, #1
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d011      	beq.n	800950c <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80094e8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094f0:	f642 223b 	movw	r2, #10811	; 0x2a3b
 80094f4:	f6c0 0219 	movt	r2, #2073	; 0x819
 80094f8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80094fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80094fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009502:	f646 627f 	movw	r2, #28287	; 0x6e7f
 8009506:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 800950a:	609a      	str	r2, [r3, #8]
  }  
}
 800950c:	46bd      	mov	sp, r7
 800950e:	bc80      	pop	{r7}
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop

08009514 <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8009518:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800951c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009520:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009524:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009528:	6952      	ldr	r2, [r2, #20]
 800952a:	f042 0201 	orr.w	r2, r2, #1
 800952e:	615a      	str	r2, [r3, #20]
}
 8009530:	46bd      	mov	sp, r7
 8009532:	bc80      	pop	{r7}
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop

08009538 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8009544:	f04f 0308 	mov.w	r3, #8
 8009548:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 800954a:	f000 f9a1 	bl	8009890 <FLASH_WaitForLastOperation>
 800954e:	4603      	mov	r3, r0
 8009550:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8009552:	7bfb      	ldrb	r3, [r7, #15]
 8009554:	2b08      	cmp	r3, #8
 8009556:	d124      	bne.n	80095a2 <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 8009558:	78fb      	ldrb	r3, [r7, #3]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d012      	beq.n	8009584 <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 800955e:	f643 4316 	movw	r3, #15382	; 0x3c16
 8009562:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009566:	f643 4216 	movw	r2, #15382	; 0x3c16
 800956a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800956e:	8812      	ldrh	r2, [r2, #0]
 8009570:	b291      	uxth	r1, r2
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	b292      	uxth	r2, r2
 8009576:	ea6f 0202 	mvn.w	r2, r2
 800957a:	b292      	uxth	r2, r2
 800957c:	400a      	ands	r2, r1
 800957e:	b292      	uxth	r2, r2
 8009580:	801a      	strh	r2, [r3, #0]
 8009582:	e00e      	b.n	80095a2 <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8009584:	f643 4316 	movw	r3, #15382	; 0x3c16
 8009588:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800958c:	f643 4216 	movw	r2, #15382	; 0x3c16
 8009590:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009594:	8812      	ldrh	r2, [r2, #0]
 8009596:	b291      	uxth	r1, r2
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	b292      	uxth	r2, r2
 800959c:	430a      	orrs	r2, r1
 800959e:	b292      	uxth	r2, r2
 80095a0:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80095a2:	f107 0710 	add.w	r7, r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop

080095ac <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	4603      	mov	r3, r0
 80095b4:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 80095b6:	f04f 0308 	mov.w	r3, #8
 80095ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 80095bc:	f000 f968 	bl	8009890 <FLASH_WaitForLastOperation>
 80095c0:	4603      	mov	r3, r0
 80095c2:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
 80095c6:	2b08      	cmp	r3, #8
 80095c8:	d105      	bne.n	80095d6 <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 80095ca:	f643 4315 	movw	r3, #15381	; 0x3c15
 80095ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095d2:	79fa      	ldrb	r2, [r7, #7]
 80095d4:	701a      	strb	r2, [r3, #0]

  }
}
 80095d6:	f107 0710 	add.w	r7, r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop

080095e0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	4613      	mov	r3, r2
 80095e8:	4602      	mov	r2, r0
 80095ea:	71fa      	strb	r2, [r7, #7]
 80095ec:	460a      	mov	r2, r1
 80095ee:	71ba      	strb	r2, [r7, #6]
 80095f0:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 80095f2:	f04f 03ff 	mov.w	r3, #255	; 0xff
 80095f6:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 80095f8:	f04f 0308 	mov.w	r3, #8
 80095fc:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80095fe:	f000 f947 	bl	8009890 <FLASH_WaitForLastOperation>
 8009602:	4603      	mov	r3, r0
 8009604:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	2b08      	cmp	r3, #8
 800960a:	d117      	bne.n	800963c <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 800960c:	f643 4314 	movw	r3, #15380	; 0x3c14
 8009610:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 800961e:	f643 4314 	movw	r3, #15380	; 0x3c14
 8009622:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009626:	79b9      	ldrb	r1, [r7, #6]
 8009628:	7bfa      	ldrb	r2, [r7, #15]
 800962a:	430a      	orrs	r2, r1
 800962c:	b2d1      	uxtb	r1, r2
 800962e:	797a      	ldrb	r2, [r7, #5]
 8009630:	430a      	orrs	r2, r1
 8009632:	b2d1      	uxtb	r1, r2
 8009634:	79fa      	ldrb	r2, [r7, #7]
 8009636:	430a      	orrs	r2, r1
 8009638:	b2d2      	uxtb	r2, r2
 800963a:	701a      	strb	r2, [r3, #0]
  }  
}
 800963c:	f107 0710 	add.w	r7, r7, #16
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 800964e:	f643 4314 	movw	r3, #15380	; 0x3c14
 8009652:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009656:	f643 4214 	movw	r2, #15380	; 0x3c14
 800965a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800965e:	7812      	ldrb	r2, [r2, #0]
 8009660:	b2d2      	uxtb	r2, r2
 8009662:	f022 020c 	bic.w	r2, r2, #12
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 800966a:	f643 4314 	movw	r3, #15380	; 0x3c14
 800966e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009672:	f643 4214 	movw	r2, #15380	; 0x3c14
 8009676:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800967a:	7812      	ldrb	r2, [r2, #0]
 800967c:	b2d1      	uxtb	r1, r2
 800967e:	79fa      	ldrb	r2, [r7, #7]
 8009680:	430a      	orrs	r2, r1
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]

}
 8009686:	f107 070c 	add.w	r7, r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr

08009690 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8009696:	f04f 0308 	mov.w	r3, #8
 800969a:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 800969c:	f643 4314 	movw	r3, #15380	; 0x3c14
 80096a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096a4:	f643 4214 	movw	r2, #15380	; 0x3c14
 80096a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80096ac:	7812      	ldrb	r2, [r2, #0]
 80096ae:	b2d2      	uxtb	r2, r2
 80096b0:	f042 0202 	orr.w	r2, r2, #2
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80096b8:	f000 f8ea 	bl	8009890 <FLASH_WaitForLastOperation>
 80096bc:	4603      	mov	r3, r0
 80096be:	71fb      	strb	r3, [r7, #7]

  return status;
 80096c0:	79fb      	ldrb	r3, [r7, #7]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	f107 0708 	add.w	r7, r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 80096cc:	b480      	push	{r7}
 80096ce:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 80096d0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80096d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	ea4f 1353 	mov.w	r3, r3, lsr #5
 80096de:	b2db      	uxtb	r3, r3
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr

080096e8 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 80096ec:	f643 4316 	movw	r3, #15382	; 0x3c16
 80096f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bc80      	pop	{r7}
 80096fe:	4770      	bx	lr

08009700 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 8009706:	f04f 0300 	mov.w	r3, #0
 800970a:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 800970c:	f643 4315 	movw	r3, #15381	; 0x3c15
 8009710:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009714:	781b      	ldrb	r3, [r3, #0]
 8009716:	b2db      	uxtb	r3, r3
 8009718:	2baa      	cmp	r3, #170	; 0xaa
 800971a:	d003      	beq.n	8009724 <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 800971c:	f04f 0301 	mov.w	r3, #1
 8009720:	71fb      	strb	r3, [r7, #7]
 8009722:	e002      	b.n	800972a <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 8009724:	f04f 0300 	mov.w	r3, #0
 8009728:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 800972a:	79fb      	ldrb	r3, [r7, #7]
}
 800972c:	4618      	mov	r0, r3
 800972e:	f107 070c 	add.w	r7, r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	bc80      	pop	{r7}
 8009736:	4770      	bx	lr

08009738 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 800973c:	f643 4314 	movw	r3, #15380	; 0x3c14
 8009740:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f003 030c 	and.w	r3, r3, #12
 800974c:	b2db      	uxtb	r3, r3
}
 800974e:	4618      	mov	r0, r3
 8009750:	46bd      	mov	sp, r7
 8009752:	bc80      	pop	{r7}
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop

08009758 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	460b      	mov	r3, r1
 8009762:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00c      	beq.n	8009784 <FLASH_ITConfig+0x2c>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 800976a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800976e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009772:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009776:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800977a:	6911      	ldr	r1, [r2, #16]
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	430a      	orrs	r2, r1
 8009780:	611a      	str	r2, [r3, #16]
 8009782:	e00d      	b.n	80097a0 <FLASH_ITConfig+0x48>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8009784:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009788:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800978c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8009790:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009794:	6911      	ldr	r1, [r2, #16]
 8009796:	687a      	ldr	r2, [r7, #4]
 8009798:	ea6f 0202 	mvn.w	r2, r2
 800979c:	400a      	ands	r2, r1
 800979e:	611a      	str	r2, [r3, #16]
  }
}
 80097a0:	f107 070c 	add.w	r7, r7, #12
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bc80      	pop	{r7}
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop

080097ac <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80097b4:	f04f 0300 	mov.w	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 80097ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4013      	ands	r3, r2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <FLASH_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 80097cc:	f04f 0301 	mov.w	r3, #1
 80097d0:	73fb      	strb	r3, [r7, #15]
 80097d2:	e002      	b.n	80097da <FLASH_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	f107 0714 	add.w	r7, r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bc80      	pop	{r7}
 80097e6:	4770      	bx	lr

080097e8 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 80097f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80097f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	60da      	str	r2, [r3, #12]
}
 80097fc:	f107 070c 	add.w	r7, r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	bc80      	pop	{r7}
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop

08009808 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 800980e:	f04f 0308 	mov.w	r3, #8
 8009812:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 8009814:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009818:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 8009826:	f04f 0301 	mov.w	r3, #1
 800982a:	71fb      	strb	r3, [r7, #7]
 800982c:	e029      	b.n	8009882 <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800982e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009832:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	f003 0310 	and.w	r3, r3, #16
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8009840:	f04f 0305 	mov.w	r3, #5
 8009844:	71fb      	strb	r3, [r7, #7]
 8009846:	e01c      	b.n	8009882 <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8009848:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800984c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009850:	68db      	ldr	r3, [r3, #12]
 8009852:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8009856:	2b00      	cmp	r3, #0
 8009858:	d003      	beq.n	8009862 <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 800985a:	f04f 0306 	mov.w	r3, #6
 800985e:	71fb      	strb	r3, [r7, #7]
 8009860:	e00f      	b.n	8009882 <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8009862:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009866:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 8009874:	f04f 0307 	mov.w	r3, #7
 8009878:	71fb      	strb	r3, [r7, #7]
 800987a:	e002      	b.n	8009882 <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 800987c:	f04f 0308 	mov.w	r3, #8
 8009880:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 8009882:	79fb      	ldrb	r3, [r7, #7]
}
 8009884:	4618      	mov	r0, r3
 8009886:	f107 070c 	add.w	r7, r7, #12
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 8009896:	f04f 0308 	mov.w	r3, #8
 800989a:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 800989c:	f7ff ffb4 	bl	8009808 <FLASH_GetStatus>
 80098a0:	4603      	mov	r3, r0
 80098a2:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80098a4:	e003      	b.n	80098ae <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 80098a6:	f7ff ffaf 	bl	8009808 <FLASH_GetStatus>
 80098aa:	4603      	mov	r3, r0
 80098ac:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b01      	cmp	r3, #1
 80098b4:	d0f7      	beq.n	80098a6 <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80098b6:	79fb      	ldrb	r3, [r7, #7]
 80098b8:	b2db      	uxtb	r3, r3
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	f107 0708 	add.w	r7, r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d107      	bne.n	80098e2 <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 80098d2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	f243 01db 	movw	r1, #12507	; 0x30db
 80098dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80098e0:	e006      	b.n	80098f0 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 80098e2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	f243 01d2 	movw	r1, #12498	; 0x30d2
 80098ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 80098f0:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f103 0201 	add.w	r2, r3, #1
 80098fa:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80098fe:	4603      	mov	r3, r0
 8009900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 8009904:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009908:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8009916:	f107 070c 	add.w	r7, r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	bc80      	pop	{r7}
 800991e:	4770      	bx	lr

08009920 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8009920:	b490      	push	{r4, r7}
 8009922:	b082      	sub	sp, #8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8009928:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681a      	ldr	r2, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6859      	ldr	r1, [r3, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8009938:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800993e:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	691b      	ldr	r3, [r3, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8009944:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	695b      	ldr	r3, [r3, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 800994a:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	699b      	ldr	r3, [r3, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8009950:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	69db      	ldr	r3, [r3, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8009956:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6a1b      	ldr	r3, [r3, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800995c:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8009962:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8009968:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800996e:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8009974:	4319      	orrs	r1, r3
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8009976:	4603      	mov	r3, r0
 8009978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	689b      	ldr	r3, [r3, #8]
 8009980:	2b08      	cmp	r3, #8
 8009982:	d10f      	bne.n	80099a4 <FSMC_NORSRAMInit+0x84>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 8009984:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	4623      	mov	r3, r4
 8009996:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800999a:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 800999e:	4603      	mov	r3, r0
 80099a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80099a4:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f103 0201 	add.w	r2, r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b4:	6819      	ldr	r1, [r3, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	ea4f 1303 	mov.w	r3, r3, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80099c0:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	ea4f 2303 	mov.w	r3, r3, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80099cc:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80099d8:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	ea4f 5303 	mov.w	r3, r3, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80099e4:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ea:	695b      	ldr	r3, [r3, #20]
 80099ec:	ea4f 6303 	mov.w	r3, r3, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 80099f0:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099f6:	699b      	ldr	r3, [r3, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 80099f8:	4319      	orrs	r1, r3
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80099fa:	4603      	mov	r3, r0
 80099fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a08:	d127      	bne.n	8009a5a <FSMC_NORSRAMInit+0x13a>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8009a0a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009a0e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a1a:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a20:	6849      	ldr	r1, [r1, #4]
 8009a22:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 8009a26:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8009a28:	6879      	ldr	r1, [r7, #4]
 8009a2a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a2c:	6889      	ldr	r1, [r1, #8]
 8009a2e:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8009a32:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a38:	6909      	ldr	r1, [r1, #16]
 8009a3a:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8009a3e:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8009a40:	6879      	ldr	r1, [r7, #4]
 8009a42:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a44:	6949      	ldr	r1, [r1, #20]
 8009a46:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8009a4a:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8009a4c:	6879      	ldr	r1, [r7, #4]
 8009a4e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009a50:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8009a52:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8009a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a58:	e009      	b.n	8009a6e <FSMC_NORSRAMInit+0x14e>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8009a5a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009a5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	6812      	ldr	r2, [r2, #0]
 8009a66:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8009a6e:	f107 0708 	add.w	r7, r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc90      	pop	{r4, r7}
 8009a76:	4770      	bx	lr

08009a78 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f04f 0200 	mov.w	r2, #0
 8009a86:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f04f 0202 	mov.w	r2, #2
 8009a8e:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f04f 0200 	mov.w	r2, #0
 8009a9e:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f04f 0200 	mov.w	r2, #0
 8009aae:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f04f 0200 	mov.w	r2, #0
 8009ab6:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f04f 0200 	mov.w	r2, #0
 8009abe:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f04f 0200 	mov.w	r2, #0
 8009ac6:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ace:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009ad6:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f04f 0200 	mov.w	r2, #0
 8009ae6:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	f04f 020f 	mov.w	r2, #15
 8009af0:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af6:	f04f 020f 	mov.w	r2, #15
 8009afa:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b00:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009b04:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0a:	f04f 020f 	mov.w	r2, #15
 8009b0e:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b14:	f04f 020f 	mov.w	r2, #15
 8009b18:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f04f 020f 	mov.w	r2, #15
 8009b22:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b28:	f04f 0200 	mov.w	r2, #0
 8009b2c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b32:	f04f 020f 	mov.w	r2, #15
 8009b36:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b3c:	f04f 020f 	mov.w	r2, #15
 8009b40:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b46:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009b4a:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	f04f 020f 	mov.w	r2, #15
 8009b54:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5a:	f04f 020f 	mov.w	r2, #15
 8009b5e:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b64:	f04f 020f 	mov.w	r2, #15
 8009b68:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	619a      	str	r2, [r3, #24]
}
 8009b74:	f107 070c 	add.w	r7, r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bc80      	pop	{r7}
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop

08009b80 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b083      	sub	sp, #12
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009b8c:	78fb      	ldrb	r3, [r7, #3]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00d      	beq.n	8009bae <FSMC_NORSRAMCmd+0x2e>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 8009b92:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8009b96:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ba0:	f043 0101 	orr.w	r1, r3, #1
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009bac:	e00f      	b.n	8009bce <FSMC_NORSRAMCmd+0x4e>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 8009bae:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8009bb2:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009bbc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009bc0:	f2c0 030f 	movt	r3, #15
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	4602      	mov	r2, r0
 8009bca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 8009bce:	f107 070c 	add.w	r7, r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bc80      	pop	{r7}
 8009bd6:	4770      	bx	lr

08009bd8 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b10      	cmp	r3, #16
 8009be4:	d11c      	bne.n	8009c20 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8009be6:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009bea:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009bee:	f04f 0218 	mov.w	r2, #24
 8009bf2:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 8009bf4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009bf8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009bfc:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009c00:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8009c02:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009c06:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c0a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009c0e:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8009c10:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009c14:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c18:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009c1c:	60da      	str	r2, [r3, #12]
 8009c1e:	e01b      	b.n	8009c58 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8009c20:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009c24:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c28:	f04f 0218 	mov.w	r2, #24
 8009c2c:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8009c2e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009c32:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c36:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009c3a:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8009c3c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009c40:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c44:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009c48:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8009c4a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009c4e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c52:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009c56:	60da      	str	r2, [r3, #12]
  }  
}
 8009c58:	f107 070c 	add.w	r7, r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc80      	pop	{r7}
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop

08009c64 <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8009c6c:	f04f 0300 	mov.w	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
 8009c72:	f04f 0300 	mov.w	r3, #0
 8009c76:	613b      	str	r3, [r7, #16]
 8009c78:	f04f 0300 	mov.w	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8009c86:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8009c8c:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8009c92:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	695b      	ldr	r3, [r3, #20]
 8009c98:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8009c9c:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	699b      	ldr	r3, [r3, #24]
 8009ca2:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8009ca6:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8009ca8:	f043 0308 	orr.w	r3, r3, #8
 8009cac:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	69db      	ldr	r3, [r3, #28]
 8009cb2:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	69db      	ldr	r3, [r3, #28]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009cbe:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	689b      	ldr	r3, [r3, #8]
 8009cc6:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009cca:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6a1b      	ldr	r3, [r3, #32]
 8009cde:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	685b      	ldr	r3, [r3, #4]
 8009ce6:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009cea:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009cf6:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	68db      	ldr	r3, [r3, #12]
 8009cfe:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009d02:	4313      	orrs	r3, r2
 8009d04:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b10      	cmp	r3, #16
 8009d0c:	d112      	bne.n	8009d34 <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8009d0e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009d12:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009d16:	697a      	ldr	r2, [r7, #20]
 8009d18:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8009d1a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009d1e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009d22:	693a      	ldr	r2, [r7, #16]
 8009d24:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 8009d26:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009d2a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	60da      	str	r2, [r3, #12]
 8009d32:	e011      	b.n	8009d58 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8009d34:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009d38:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8009d40:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009d44:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8009d4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009d50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	60da      	str	r2, [r3, #12]
  }
}
 8009d58:	f107 071c 	add.w	r7, r7, #28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bc80      	pop	{r7}
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop

08009d64 <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f04f 0210 	mov.w	r2, #16
 8009d72:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f04f 0200 	mov.w	r2, #0
 8009d7a:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f04f 0200 	mov.w	r2, #0
 8009d82:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f04f 0200 	mov.w	r2, #0
 8009d92:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f04f 0200 	mov.w	r2, #0
 8009d9a:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f04f 0200 	mov.w	r2, #0
 8009da2:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009dac:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009db6:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	69db      	ldr	r3, [r3, #28]
 8009dbc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009dc0:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	69db      	ldr	r3, [r3, #28]
 8009dc6:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009dca:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a1b      	ldr	r3, [r3, #32]
 8009dd0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009dd4:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009dde:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a1b      	ldr	r3, [r3, #32]
 8009de4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009de8:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009df2:	60da      	str	r2, [r3, #12]
}
 8009df4:	f107 070c 	add.w	r7, r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bc80      	pop	{r7}
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop

08009e00 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d01c      	beq.n	8009e4c <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b10      	cmp	r3, #16
 8009e16:	d10c      	bne.n	8009e32 <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8009e18:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009e1c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009e20:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009e24:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009e28:	6812      	ldr	r2, [r2, #0]
 8009e2a:	f042 0204 	orr.w	r2, r2, #4
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	e02e      	b.n	8009e90 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8009e32:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009e36:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009e3a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009e3e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009e42:	6812      	ldr	r2, [r2, #0]
 8009e44:	f042 0204 	orr.w	r2, r2, #4
 8009e48:	601a      	str	r2, [r3, #0]
 8009e4a:	e021      	b.n	8009e90 <FSMC_NANDCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b10      	cmp	r3, #16
 8009e50:	d10f      	bne.n	8009e72 <FSMC_NANDCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8009e52:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009e56:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009e5a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009e5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009e62:	6819      	ldr	r1, [r3, #0]
 8009e64:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8009e68:	f2c0 030f 	movt	r3, #15
 8009e6c:	400b      	ands	r3, r1
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	e00e      	b.n	8009e90 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8009e72:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009e76:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009e7a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009e7e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009e82:	6819      	ldr	r1, [r3, #0]
 8009e84:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8009e88:	f2c0 030f 	movt	r3, #15
 8009e8c:	400b      	ands	r3, r1
 8009e8e:	6013      	str	r3, [r2, #0]
    }
  }
}
 8009e90:	f107 070c 	add.w	r7, r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bc80      	pop	{r7}
 8009e98:	4770      	bx	lr
 8009e9a:	bf00      	nop

08009e9c <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d01c      	beq.n	8009ee8 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b10      	cmp	r3, #16
 8009eb2:	d10c      	bne.n	8009ece <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8009eb4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009eb8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009ebc:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009ec0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009ec4:	6812      	ldr	r2, [r2, #0]
 8009ec6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	e02e      	b.n	8009f2c <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8009ece:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009ed2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009ed6:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009eda:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	e021      	b.n	8009f2c <FSMC_NANDECCCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2b10      	cmp	r3, #16
 8009eec:	d10f      	bne.n	8009f0e <FSMC_NANDECCCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8009eee:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009ef2:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009ef6:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009efa:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009efe:	6819      	ldr	r1, [r3, #0]
 8009f00:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8009f04:	f2c0 030f 	movt	r3, #15
 8009f08:	400b      	ands	r3, r1
 8009f0a:	6013      	str	r3, [r2, #0]
 8009f0c:	e00e      	b.n	8009f2c <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8009f0e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009f12:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009f16:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009f1a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009f1e:	6819      	ldr	r1, [r3, #0]
 8009f20:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8009f24:	f2c0 030f 	movt	r3, #15
 8009f28:	400b      	ands	r3, r1
 8009f2a:	6013      	str	r3, [r2, #0]
    }
  }
}
 8009f2c:	f107 070c 	add.w	r7, r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bc80      	pop	{r7}
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop

08009f38 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8009f40:	f04f 0300 	mov.w	r3, #0
 8009f44:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2b10      	cmp	r3, #16
 8009f4a:	d106      	bne.n	8009f5a <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8009f4c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009f50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	e005      	b.n	8009f66 <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8009f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009f5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009f62:	695b      	ldr	r3, [r3, #20]
 8009f64:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8009f66:	68fb      	ldr	r3, [r7, #12]
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f107 0714 	add.w	r7, r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8009f78:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009f7c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009f80:	f04f 0218 	mov.w	r2, #24
 8009f84:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8009f86:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009f8a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009f8e:	f04f 0200 	mov.w	r2, #0
 8009f92:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8009f94:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009f98:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009f9c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009fa0:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8009fa2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009fa6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009faa:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009fae:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8009fb0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009fb4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009fb8:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009fbc:	611a      	str	r2, [r3, #16]
}
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bc80      	pop	{r7}
 8009fc2:	4770      	bx	lr

08009fc4 <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8009fcc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009fd0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6852      	ldr	r2, [r2, #4]
 8009fdc:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8009fe0:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6892      	ldr	r2, [r2, #8]
 8009fe6:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8009fea:	430a      	orrs	r2, r1
 8009fec:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8009ff0:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009ff2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009ff6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	68d2      	ldr	r2, [r2, #12]
 8009ffe:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	68d2      	ldr	r2, [r2, #12]
 800a004:	6852      	ldr	r2, [r2, #4]
 800a006:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800a00a:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	68d2      	ldr	r2, [r2, #12]
 800a010:	6892      	ldr	r2, [r2, #8]
 800a012:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800a016:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68d2      	ldr	r2, [r2, #12]
 800a01c:	68d2      	ldr	r2, [r2, #12]
 800a01e:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800a022:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800a024:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800a026:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a02a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	6912      	ldr	r2, [r2, #16]
 800a032:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6912      	ldr	r2, [r2, #16]
 800a038:	6852      	ldr	r2, [r2, #4]
 800a03a:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800a03e:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	6912      	ldr	r2, [r2, #16]
 800a044:	6892      	ldr	r2, [r2, #8]
 800a046:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800a04a:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	6912      	ldr	r2, [r2, #16]
 800a050:	68d2      	ldr	r2, [r2, #12]
 800a052:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800a056:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800a058:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800a05a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a05e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	6952      	ldr	r2, [r2, #20]
 800a066:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800a068:	687a      	ldr	r2, [r7, #4]
 800a06a:	6952      	ldr	r2, [r2, #20]
 800a06c:	6852      	ldr	r2, [r2, #4]
 800a06e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800a072:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800a074:	687a      	ldr	r2, [r7, #4]
 800a076:	6952      	ldr	r2, [r2, #20]
 800a078:	6892      	ldr	r2, [r2, #8]
 800a07a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800a07e:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	6952      	ldr	r2, [r2, #20]
 800a084:	68d2      	ldr	r2, [r2, #12]
 800a086:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800a08a:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 800a08c:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 800a08e:	f107 070c 	add.w	r7, r7, #12
 800a092:	46bd      	mov	sp, r7
 800a094:	bc80      	pop	{r7}
 800a096:	4770      	bx	lr

0800a098 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f04f 0200 	mov.w	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f04f 0200 	mov.w	r2, #0
 800a0ae:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f04f 0200 	mov.w	r2, #0
 800a0b6:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0c0:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0ca:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0d4:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0de:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	691b      	ldr	r3, [r3, #16]
 800a0e4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0e8:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0f2:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a0fc:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	691b      	ldr	r3, [r3, #16]
 800a102:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a106:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a110:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a11a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	695b      	ldr	r3, [r3, #20]
 800a120:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a124:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	695b      	ldr	r3, [r3, #20]
 800a12a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800a12e:	60da      	str	r2, [r3, #12]
}
 800a130:	f107 070c 	add.w	r7, r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop

0800a13c <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a146:	79fb      	ldrb	r3, [r7, #7]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00c      	beq.n	800a166 <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 800a14c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a150:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a154:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800a158:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a15c:	6812      	ldr	r2, [r2, #0]
 800a15e:	f042 0204 	orr.w	r2, r2, #4
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	e00e      	b.n	800a184 <FSMC_PCCARDCmd+0x48>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 800a166:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800a16a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a16e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a172:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a176:	6819      	ldr	r1, [r3, #0]
 800a178:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 800a17c:	f2c0 030f 	movt	r3, #15
 800a180:	400b      	ands	r3, r1
 800a182:	6013      	str	r3, [r2, #0]
  }
}
 800a184:	f107 070c 	add.w	r7, r7, #12
 800a188:	46bd      	mov	sp, r7
 800a18a:	bc80      	pop	{r7}
 800a18c:	4770      	bx	lr
 800a18e:	bf00      	nop

0800a190 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 800a190:	b480      	push	{r7}
 800a192:	b085      	sub	sp, #20
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	4613      	mov	r3, r2
 800a19c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800a19e:	79fb      	ldrb	r3, [r7, #7]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d02d      	beq.n	800a200 <FSMC_ITConfig+0x70>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b10      	cmp	r3, #16
 800a1a8:	d10c      	bne.n	800a1c4 <FSMC_ITConfig+0x34>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 800a1aa:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a1ae:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a1b2:	f04f 0260 	mov.w	r2, #96	; 0x60
 800a1b6:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a1ba:	6851      	ldr	r1, [r2, #4]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	e050      	b.n	800a266 <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ca:	d10c      	bne.n	800a1e6 <FSMC_ITConfig+0x56>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 800a1cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a1d0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a1d4:	f04f 0280 	mov.w	r2, #128	; 0x80
 800a1d8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a1dc:	6851      	ldr	r1, [r2, #4]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
 800a1e4:	e03f      	b.n	800a266 <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 800a1e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a1ea:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a1ee:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800a1f2:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a1f6:	6851      	ldr	r1, [r2, #4]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	430a      	orrs	r2, r1
 800a1fc:	605a      	str	r2, [r3, #4]
 800a1fe:	e032      	b.n	800a266 <FSMC_ITConfig+0xd6>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	2b10      	cmp	r3, #16
 800a204:	d10e      	bne.n	800a224 <FSMC_ITConfig+0x94>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 800a206:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a20a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a20e:	f04f 0260 	mov.w	r2, #96	; 0x60
 800a212:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a216:	6851      	ldr	r1, [r2, #4]
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	ea6f 0202 	mvn.w	r2, r2
 800a21e:	400a      	ands	r2, r1
 800a220:	605a      	str	r2, [r3, #4]
 800a222:	e020      	b.n	800a266 <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22a:	d10e      	bne.n	800a24a <FSMC_ITConfig+0xba>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 800a22c:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a230:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a234:	f04f 0280 	mov.w	r2, #128	; 0x80
 800a238:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a23c:	6851      	ldr	r1, [r2, #4]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	ea6f 0202 	mvn.w	r2, r2
 800a244:	400a      	ands	r2, r1
 800a246:	605a      	str	r2, [r3, #4]
 800a248:	e00d      	b.n	800a266 <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 800a24a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a24e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a252:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800a256:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a25a:	6851      	ldr	r1, [r2, #4]
 800a25c:	68ba      	ldr	r2, [r7, #8]
 800a25e:	ea6f 0202 	mvn.w	r2, r2
 800a262:	400a      	ands	r2, r1
 800a264:	605a      	str	r2, [r3, #4]
    }
  }
}
 800a266:	f107 0714 	add.w	r7, r7, #20
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bc80      	pop	{r7}
 800a26e:	4770      	bx	lr

0800a270 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800a27a:	f04f 0300 	mov.w	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 800a280:	f04f 0300 	mov.w	r3, #0
 800a284:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2b10      	cmp	r3, #16
 800a28a:	d106      	bne.n	800a29a <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 800a28c:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a290:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	e010      	b.n	800a2bc <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d106      	bne.n	800a2b0 <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 800a2a2:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a2a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	60bb      	str	r3, [r7, #8]
 800a2ae:	e005      	b.n	800a2bc <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800a2b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a2b4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 800a2bc:	68ba      	ldr	r2, [r7, #8]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	4013      	ands	r3, r2
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 800a2c6:	f04f 0301 	mov.w	r3, #1
 800a2ca:	73fb      	strb	r3, [r7, #15]
 800a2cc:	e002      	b.n	800a2d4 <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 800a2ce:	f04f 0300 	mov.w	r3, #0
 800a2d2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800a2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f107 0714 	add.w	r7, r7, #20
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bc80      	pop	{r7}
 800a2e0:	4770      	bx	lr
 800a2e2:	bf00      	nop

0800a2e4 <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d10e      	bne.n	800a312 <FSMC_ClearFlag+0x2e>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800a2f4:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a2f8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a2fc:	f04f 0260 	mov.w	r2, #96	; 0x60
 800a300:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a304:	6851      	ldr	r1, [r2, #4]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	ea6f 0202 	mvn.w	r2, r2
 800a30c:	400a      	ands	r2, r1
 800a30e:	605a      	str	r2, [r3, #4]
 800a310:	e020      	b.n	800a354 <FSMC_ClearFlag+0x70>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a318:	d10e      	bne.n	800a338 <FSMC_ClearFlag+0x54>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 800a31a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a31e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a322:	f04f 0280 	mov.w	r2, #128	; 0x80
 800a326:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a32a:	6851      	ldr	r1, [r2, #4]
 800a32c:	683a      	ldr	r2, [r7, #0]
 800a32e:	ea6f 0202 	mvn.w	r2, r2
 800a332:	400a      	ands	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	e00d      	b.n	800a354 <FSMC_ClearFlag+0x70>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 800a338:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a33c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a340:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800a344:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a348:	6851      	ldr	r1, [r2, #4]
 800a34a:	683a      	ldr	r2, [r7, #0]
 800a34c:	ea6f 0202 	mvn.w	r2, r2
 800a350:	400a      	ands	r2, r1
 800a352:	605a      	str	r2, [r3, #4]
  }
}
 800a354:	f107 070c 	add.w	r7, r7, #12
 800a358:	46bd      	mov	sp, r7
 800a35a:	bc80      	pop	{r7}
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop

0800a360 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800a360:	b480      	push	{r7}
 800a362:	b087      	sub	sp, #28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800a36a:	f04f 0300 	mov.w	r3, #0
 800a36e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 800a370:	f04f 0300 	mov.w	r3, #0
 800a374:	613b      	str	r3, [r7, #16]
 800a376:	f04f 0300 	mov.w	r3, #0
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	f04f 0300 	mov.w	r3, #0
 800a380:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b10      	cmp	r3, #16
 800a386:	d106      	bne.n	800a396 <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 800a388:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a38c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	613b      	str	r3, [r7, #16]
 800a394:	e010      	b.n	800a3b8 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a39c:	d106      	bne.n	800a3ac <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 800a39e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a3a2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	613b      	str	r3, [r7, #16]
 800a3aa:	e005      	b.n	800a3b8 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 800a3ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a3b0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d006      	beq.n	800a3e0 <FSMC_GetITStatus+0x80>
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d003      	beq.n	800a3e0 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 800a3d8:	f04f 0301 	mov.w	r3, #1
 800a3dc:	75fb      	strb	r3, [r7, #23]
 800a3de:	e002      	b.n	800a3e6 <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 800a3e0:	f04f 0300 	mov.w	r3, #0
 800a3e4:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 800a3e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f107 071c 	add.w	r7, r7, #28
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bc80      	pop	{r7}
 800a3f2:	4770      	bx	lr

0800a3f4 <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2b10      	cmp	r3, #16
 800a402:	d110      	bne.n	800a426 <FSMC_ClearITPendingBit+0x32>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800a404:	f04f 0360 	mov.w	r3, #96	; 0x60
 800a408:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a40c:	f04f 0260 	mov.w	r2, #96	; 0x60
 800a410:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a414:	6851      	ldr	r1, [r2, #4]
 800a416:	683a      	ldr	r2, [r7, #0]
 800a418:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800a41c:	ea6f 0202 	mvn.w	r2, r2
 800a420:	400a      	ands	r2, r1
 800a422:	605a      	str	r2, [r3, #4]
 800a424:	e024      	b.n	800a470 <FSMC_ClearITPendingBit+0x7c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a42c:	d110      	bne.n	800a450 <FSMC_ClearITPendingBit+0x5c>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 800a42e:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a432:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a436:	f04f 0280 	mov.w	r2, #128	; 0x80
 800a43a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a43e:	6851      	ldr	r1, [r2, #4]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800a446:	ea6f 0202 	mvn.w	r2, r2
 800a44a:	400a      	ands	r2, r1
 800a44c:	605a      	str	r2, [r3, #4]
 800a44e:	e00f      	b.n	800a470 <FSMC_ClearITPendingBit+0x7c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 800a450:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800a454:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800a458:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800a45c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800a460:	6851      	ldr	r1, [r2, #4]
 800a462:	683a      	ldr	r2, [r7, #0]
 800a464:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800a468:	ea6f 0202 	mvn.w	r2, r2
 800a46c:	400a      	ands	r2, r1
 800a46e:	605a      	str	r2, [r3, #4]
  }
}
 800a470:	f107 070c 	add.w	r7, r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	bc80      	pop	{r7}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 800a484:	687a      	ldr	r2, [r7, #4]
 800a486:	f04f 0300 	mov.w	r3, #0
 800a48a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a48e:	429a      	cmp	r2, r3
 800a490:	d10c      	bne.n	800a4ac <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800a492:	f04f 0001 	mov.w	r0, #1
 800a496:	f04f 0101 	mov.w	r1, #1
 800a49a:	f002 fbc3 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 800a49e:	f04f 0001 	mov.w	r0, #1
 800a4a2:	f04f 0100 	mov.w	r1, #0
 800a4a6:	f002 fbbd 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a4aa:	e09e      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d10c      	bne.n	800a4d4 <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800a4ba:	f04f 0002 	mov.w	r0, #2
 800a4be:	f04f 0101 	mov.w	r1, #1
 800a4c2:	f002 fbaf 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 800a4c6:	f04f 0002 	mov.w	r0, #2
 800a4ca:	f04f 0100 	mov.w	r1, #0
 800a4ce:	f002 fba9 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a4d2:	e08a      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d10c      	bne.n	800a4fc <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800a4e2:	f04f 0004 	mov.w	r0, #4
 800a4e6:	f04f 0101 	mov.w	r1, #1
 800a4ea:	f002 fb9b 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 800a4ee:	f04f 0004 	mov.w	r0, #4
 800a4f2:	f04f 0100 	mov.w	r1, #0
 800a4f6:	f002 fb95 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a4fa:	e076      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a502:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a506:	429a      	cmp	r2, r3
 800a508:	d10c      	bne.n	800a524 <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 800a50a:	f04f 0008 	mov.w	r0, #8
 800a50e:	f04f 0101 	mov.w	r1, #1
 800a512:	f002 fb87 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800a516:	f04f 0008 	mov.w	r0, #8
 800a51a:	f04f 0100 	mov.w	r1, #0
 800a51e:	f002 fb81 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a522:	e062      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a52a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a52e:	429a      	cmp	r2, r3
 800a530:	d10c      	bne.n	800a54c <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800a532:	f04f 0010 	mov.w	r0, #16
 800a536:	f04f 0101 	mov.w	r1, #1
 800a53a:	f002 fb73 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 800a53e:	f04f 0010 	mov.w	r0, #16
 800a542:	f04f 0100 	mov.w	r1, #0
 800a546:	f002 fb6d 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a54a:	e04e      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a552:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a556:	429a      	cmp	r2, r3
 800a558:	d10c      	bne.n	800a574 <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 800a55a:	f04f 0020 	mov.w	r0, #32
 800a55e:	f04f 0101 	mov.w	r1, #1
 800a562:	f002 fb5f 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800a566:	f04f 0020 	mov.w	r0, #32
 800a56a:	f04f 0100 	mov.w	r1, #0
 800a56e:	f002 fb59 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a572:	e03a      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a57a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a57e:	429a      	cmp	r2, r3
 800a580:	d10c      	bne.n	800a59c <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 800a582:	f04f 0040 	mov.w	r0, #64	; 0x40
 800a586:	f04f 0101 	mov.w	r1, #1
 800a58a:	f002 fb4b 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 800a58e:	f04f 0040 	mov.w	r0, #64	; 0x40
 800a592:	f04f 0100 	mov.w	r1, #0
 800a596:	f002 fb45 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a59a:	e026      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d10c      	bne.n	800a5c4 <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 800a5aa:	f04f 0080 	mov.w	r0, #128	; 0x80
 800a5ae:	f04f 0101 	mov.w	r1, #1
 800a5b2:	f002 fb37 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 800a5b6:	f04f 0080 	mov.w	r0, #128	; 0x80
 800a5ba:	f04f 0100 	mov.w	r1, #0
 800a5be:	f002 fb31 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
 800a5c2:	e012      	b.n	800a5ea <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d10b      	bne.n	800a5ea <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 800a5d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a5d6:	f04f 0101 	mov.w	r1, #1
 800a5da:	f002 fb23 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 800a5de:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a5e2:	f04f 0100 	mov.w	r1, #0
 800a5e6:	f002 fb1d 	bl	800cc24 <RCC_AHB1PeriphResetCmd>
    }
  }
}
 800a5ea:	f107 0708 	add.w	r7, r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop

0800a5f4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b087      	sub	sp, #28
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800a5fe:	f04f 0300 	mov.w	r3, #0
 800a602:	617b      	str	r3, [r7, #20]
 800a604:	f04f 0300 	mov.w	r3, #0
 800a608:	613b      	str	r3, [r7, #16]
 800a60a:	f04f 0300 	mov.w	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	617b      	str	r3, [r7, #20]
 800a616:	e086      	b.n	800a726 <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	f04f 0201 	mov.w	r2, #1
 800a61e:	fa02 f303 	lsl.w	r3, r2, r3
 800a622:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	693b      	ldr	r3, [r7, #16]
 800a62a:	4013      	ands	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	429a      	cmp	r2, r3
 800a634:	d173      	bne.n	800a71e <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a640:	f04f 0103 	mov.w	r1, #3
 800a644:	fa01 f303 	lsl.w	r3, r1, r3
 800a648:	ea6f 0303 	mvn.w	r3, r3
 800a64c:	401a      	ands	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	791b      	ldrb	r3, [r3, #4]
 800a65a:	4619      	mov	r1, r3
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a662:	fa01 f303 	lsl.w	r3, r1, r3
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	791b      	ldrb	r3, [r3, #4]
 800a670:	2b01      	cmp	r3, #1
 800a672:	d003      	beq.n	800a67c <GPIO_Init+0x88>
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	791b      	ldrb	r3, [r3, #4]
 800a678:	2b02      	cmp	r3, #2
 800a67a:	d134      	bne.n	800a6e6 <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689a      	ldr	r2, [r3, #8]
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a686:	f04f 0103 	mov.w	r1, #3
 800a68a:	fa01 f303 	lsl.w	r3, r1, r3
 800a68e:	ea6f 0303 	mvn.w	r3, r3
 800a692:	401a      	ands	r2, r3
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	795b      	ldrb	r3, [r3, #5]
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ac:	431a      	orrs	r2, r3
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	685a      	ldr	r2, [r3, #4]
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	f04f 0101 	mov.w	r1, #1
 800a6be:	fa01 f303 	lsl.w	r3, r1, r3
 800a6c2:	ea6f 0303 	mvn.w	r3, r3
 800a6c6:	401a      	ands	r2, r3
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685a      	ldr	r2, [r3, #4]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	799b      	ldrb	r3, [r3, #6]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	fa01 f303 	lsl.w	r3, r1, r3
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	431a      	orrs	r2, r3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a6f2:	f04f 0103 	mov.w	r1, #3
 800a6f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fa:	ea6f 0303 	mvn.w	r3, r3
 800a6fe:	401a      	ands	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68da      	ldr	r2, [r3, #12]
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	79db      	ldrb	r3, [r3, #7]
 800a70c:	4619      	mov	r1, r3
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a714:	fa01 f303 	lsl.w	r3, r1, r3
 800a718:	431a      	orrs	r2, r3
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	f103 0301 	add.w	r3, r3, #1
 800a724:	617b      	str	r3, [r7, #20]
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b0f      	cmp	r3, #15
 800a72a:	f67f af75 	bls.w	800a618 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 800a72e:	f107 071c 	add.w	r7, r7, #28
 800a732:	46bd      	mov	sp, r7
 800a734:	bc80      	pop	{r7}
 800a736:	4770      	bx	lr

0800a738 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a746:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f04f 0200 	mov.w	r2, #0
 800a74e:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f04f 0200 	mov.w	r2, #0
 800a756:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	71da      	strb	r2, [r3, #7]
}
 800a768:	f107 070c 	add.w	r7, r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bc80      	pop	{r7}
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop

0800a774 <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a774:	b480      	push	{r7}
 800a776:	b085      	sub	sp, #20
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	460b      	mov	r3, r1
 800a77e:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 800a780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a784:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 800a786:	887a      	ldrh	r2, [r7, #2]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800a78e:	68fa      	ldr	r2, [r7, #12]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800a794:	887a      	ldrh	r2, [r7, #2]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800a79a:	68fa      	ldr	r2, [r7, #12]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	60fb      	str	r3, [r7, #12]
}
 800a7ac:	f107 0714 	add.w	r7, r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bc80      	pop	{r7}
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop

0800a7b8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800a7c4:	f04f 0300 	mov.w	r3, #0
 800a7c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	887b      	ldrh	r3, [r7, #2]
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d003      	beq.n	800a7de <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800a7d6:	f04f 0301 	mov.w	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
 800a7dc:	e002      	b.n	800a7e4 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800a7de:	f04f 0300 	mov.w	r3, #0
 800a7e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f107 0714 	add.w	r7, r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bc80      	pop	{r7}
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop

0800a7f4 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	b29b      	uxth	r3, r3
}
 800a802:	4618      	mov	r0, r3
 800a804:	f107 070c 	add.w	r7, r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	bc80      	pop	{r7}
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	460b      	mov	r3, r1
 800a81a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800a81c:	f04f 0300 	mov.w	r3, #0
 800a820:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	695a      	ldr	r2, [r3, #20]
 800a826:	887b      	ldrh	r3, [r7, #2]
 800a828:	4013      	ands	r3, r2
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d003      	beq.n	800a836 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800a82e:	f04f 0301 	mov.w	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	e002      	b.n	800a83c <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	f107 0714 	add.w	r7, r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	bc80      	pop	{r7}
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop

0800a84c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	695b      	ldr	r3, [r3, #20]
 800a858:	b29b      	uxth	r3, r3
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	f107 070c 	add.w	r7, r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	bc80      	pop	{r7}
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop

0800a868 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a868:	b480      	push	{r7}
 800a86a:	b083      	sub	sp, #12
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	460b      	mov	r3, r1
 800a872:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	887a      	ldrh	r2, [r7, #2]
 800a878:	831a      	strh	r2, [r3, #24]
}
 800a87a:	f107 070c 	add.w	r7, r7, #12
 800a87e:	46bd      	mov	sp, r7
 800a880:	bc80      	pop	{r7}
 800a882:	4770      	bx	lr

0800a884 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	887a      	ldrh	r2, [r7, #2]
 800a894:	835a      	strh	r2, [r3, #26]
}
 800a896:	f107 070c 	add.w	r7, r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bc80      	pop	{r7}
 800a89e:	4770      	bx	lr

0800a8a0 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	4613      	mov	r3, r2
 800a8aa:	460a      	mov	r2, r1
 800a8ac:	807a      	strh	r2, [r7, #2]
 800a8ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800a8b0:	787b      	ldrb	r3, [r7, #1]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	887a      	ldrh	r2, [r7, #2]
 800a8ba:	831a      	strh	r2, [r3, #24]
 800a8bc:	e002      	b.n	800a8c4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	887a      	ldrh	r2, [r7, #2]
 800a8c2:	835a      	strh	r2, [r3, #26]
  }
}
 800a8c4:	f107 070c 	add.w	r7, r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr
 800a8ce:	bf00      	nop

0800a8d0 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800a8dc:	887a      	ldrh	r2, [r7, #2]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	615a      	str	r2, [r3, #20]
}
 800a8e2:	f107 070c 	add.w	r7, r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bc80      	pop	{r7}
 800a8ea:	4770      	bx	lr

0800a8ec <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	695a      	ldr	r2, [r3, #20]
 800a8fc:	887b      	ldrh	r3, [r7, #2]
 800a8fe:	405a      	eors	r2, r3
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	615a      	str	r2, [r3, #20]
}
 800a904:	f107 070c 	add.w	r7, r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	bc80      	pop	{r7}
 800a90c:	4770      	bx	lr
 800a90e:	bf00      	nop

0800a910 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	4613      	mov	r3, r2
 800a91a:	460a      	mov	r2, r1
 800a91c:	807a      	strh	r2, [r7, #2]
 800a91e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800a920:	f04f 0300 	mov.w	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800a926:	f04f 0300 	mov.w	r3, #0
 800a92a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800a92c:	787a      	ldrb	r2, [r7, #1]
 800a92e:	887b      	ldrh	r3, [r7, #2]
 800a930:	f003 0307 	and.w	r3, r3, #7
 800a934:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a938:	fa02 f303 	lsl.w	r3, r2, r3
 800a93c:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800a93e:	887b      	ldrh	r3, [r7, #2]
 800a940:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a944:	b29b      	uxth	r3, r3
 800a946:	461a      	mov	r2, r3
 800a948:	887b      	ldrh	r3, [r7, #2]
 800a94a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a94e:	b29b      	uxth	r3, r3
 800a950:	4619      	mov	r1, r3
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f101 0108 	add.w	r1, r1, #8
 800a958:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a95c:	887b      	ldrh	r3, [r7, #2]
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a966:	f04f 000f 	mov.w	r0, #15
 800a96a:	fa00 f303 	lsl.w	r3, r0, r3
 800a96e:	ea6f 0303 	mvn.w	r3, r3
 800a972:	4019      	ands	r1, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f102 0208 	add.w	r2, r2, #8
 800a97a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800a97e:	887b      	ldrh	r3, [r7, #2]
 800a980:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a984:	b29b      	uxth	r3, r3
 800a986:	461a      	mov	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f102 0208 	add.w	r2, r2, #8
 800a98e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4313      	orrs	r3, r2
 800a996:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800a998:	887b      	ldrh	r3, [r7, #2]
 800a99a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f102 0208 	add.w	r2, r2, #8
 800a9a8:	68b9      	ldr	r1, [r7, #8]
 800a9aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800a9ae:	f107 0714 	add.w	r7, r7, #20
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bc80      	pop	{r7}
 800a9b6:	4770      	bx	lr

0800a9b8 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800a9bc:	f04f 0020 	mov.w	r0, #32
 800a9c0:	f04f 0101 	mov.w	r1, #1
 800a9c4:	f002 f958 	bl	800cc78 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800a9c8:	f04f 0020 	mov.w	r0, #32
 800a9cc:	f04f 0100 	mov.w	r1, #0
 800a9d0:	f002 f952 	bl	800cc78 <RCC_AHB2PeriphResetCmd>
}
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop

0800a9d8 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	b083      	sub	sp, #12
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800a9e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a9e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a9ec:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a9f0:	6812      	ldr	r2, [r2, #0]
 800a9f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a9f6:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800a9f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aa00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa04:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800aa08:	6811      	ldr	r1, [r2, #0]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 800aa0e:	687a      	ldr	r2, [r7, #4]
 800aa10:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800aa12:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800aa14:	687a      	ldr	r2, [r7, #4]
 800aa16:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 800aa18:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800aa1a:	430a      	orrs	r2, r1
 800aa1c:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	685b      	ldr	r3, [r3, #4]
 800aa22:	2b40      	cmp	r3, #64	; 0x40
 800aa24:	d118      	bne.n	800aa58 <HASH_Init+0x80>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800aa26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa2a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aa2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa32:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800aa36:	6812      	ldr	r2, [r2, #0]
 800aa38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa3c:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800aa3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa42:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aa46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa4a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800aa4e:	6811      	ldr	r1, [r2, #0]
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	68d2      	ldr	r2, [r2, #12]
 800aa54:	430a      	orrs	r2, r1
 800aa56:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800aa58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa5c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aa60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aa64:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	f042 0204 	orr.w	r2, r2, #4
 800aa6e:	601a      	str	r2, [r3, #0]
}
 800aa70:	f107 070c 	add.w	r7, r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bc80      	pop	{r7}
 800aa78:	4770      	bx	lr
 800aa7a:	bf00      	nop

0800aa7c <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f04f 0200 	mov.w	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f04f 0200 	mov.w	r2, #0
 800aa92:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f04f 0200 	mov.w	r2, #0
 800aa9a:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	f04f 0200 	mov.w	r2, #0
 800aaa2:	60da      	str	r2, [r3, #12]
}
 800aaa4:	f107 070c 	add.w	r7, r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bc80      	pop	{r7}
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop

0800aab0 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800aab0:	b480      	push	{r7}
 800aab2:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800aab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aab8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aabc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aac0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	f042 0204 	orr.w	r2, r2, #4
 800aaca:	601a      	str	r2, [r3, #0]
}
 800aacc:	46bd      	mov	sp, r7
 800aace:	bc80      	pop	{r7}
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop

0800aad4 <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	4603      	mov	r3, r0
 800aadc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800aade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aae2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aaea:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800aaee:	6892      	ldr	r2, [r2, #8]
 800aaf0:	f022 021f 	bic.w	r2, r2, #31
 800aaf4:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800aaf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aafa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aafe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ab02:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ab06:	6891      	ldr	r1, [r2, #8]
 800ab08:	88fa      	ldrh	r2, [r7, #6]
 800ab0a:	430a      	orrs	r2, r1
 800ab0c:	609a      	str	r2, [r3, #8]
}
 800ab0e:	f107 070c 	add.w	r7, r7, #12
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bc80      	pop	{r7}
 800ab16:	4770      	bx	lr

0800ab18 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800ab20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab24:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	605a      	str	r2, [r3, #4]
}
 800ab2c:	f107 070c 	add.w	r7, r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bc80      	pop	{r7}
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop

0800ab38 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800ab3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab40:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ab4a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ab4e:	b2db      	uxtb	r3, r3
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bc80      	pop	{r7}
 800ab56:	4770      	bx	lr

0800ab58 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800ab60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab64:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ab68:	68da      	ldr	r2, [r3, #12]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800ab6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab72:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ab76:	691a      	ldr	r2, [r3, #16]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800ab7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab80:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ab84:	695a      	ldr	r2, [r3, #20]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800ab8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab8e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ab92:	699a      	ldr	r2, [r3, #24]
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800ab98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab9c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800aba0:	69da      	ldr	r2, [r3, #28]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	611a      	str	r2, [r3, #16]
}
 800aba6:	f107 070c 	add.w	r7, r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	bc80      	pop	{r7}
 800abae:	4770      	bx	lr

0800abb0 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800abb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abb8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800abbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800abc0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800abc4:	6892      	ldr	r2, [r2, #8]
 800abc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abca:	609a      	str	r2, [r3, #8]
}
 800abcc:	46bd      	mov	sp, r7
 800abce:	bc80      	pop	{r7}
 800abd0:	4770      	bx	lr
 800abd2:	bf00      	nop

0800abd4 <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800abdc:	f04f 0300 	mov.w	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800abe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800abea:	6a1a      	ldr	r2, [r3, #32]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800abf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abf4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800abf8:	689a      	ldr	r2, [r3, #8]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800abfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac02:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 800ac0c:	f04f 0300 	mov.w	r3, #0
 800ac10:	73fb      	strb	r3, [r7, #15]
 800ac12:	e014      	b.n	800ac3e <HASH_SaveContext+0x6a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800ac14:	7bf8      	ldrb	r0, [r7, #15]
 800ac16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac1a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ac1e:	7bfa      	ldrb	r2, [r7, #15]
 800ac20:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 800ac24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac28:	6879      	ldr	r1, [r7, #4]
 800ac2a:	f100 0302 	add.w	r3, r0, #2
 800ac2e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ac32:	18cb      	adds	r3, r1, r3
 800ac34:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 800ac36:	7bfb      	ldrb	r3, [r7, #15]
 800ac38:	f103 0301 	add.w	r3, r3, #1
 800ac3c:	73fb      	strb	r3, [r7, #15]
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	2b32      	cmp	r3, #50	; 0x32
 800ac42:	d9e7      	bls.n	800ac14 <HASH_SaveContext+0x40>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800ac44:	f107 0714 	add.w	r7, r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bc80      	pop	{r7}
 800ac4c:	4770      	bx	lr
 800ac4e:	bf00      	nop

0800ac50 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800ac58:	f04f 0300 	mov.w	r3, #0
 800ac5c:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800ac5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac62:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	6812      	ldr	r2, [r2, #0]
 800ac6a:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800ac6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac70:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	6852      	ldr	r2, [r2, #4]
 800ac78:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800ac7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac7e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6892      	ldr	r2, [r2, #8]
 800ac86:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800ac88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ac90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ac94:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ac98:	6812      	ldr	r2, [r2, #0]
 800ac9a:	f042 0204 	orr.w	r2, r2, #4
 800ac9e:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 800aca0:	f04f 0300 	mov.w	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]
 800aca6:	e014      	b.n	800acd2 <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800aca8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800acb0:	7bf8      	ldrb	r0, [r7, #15]
 800acb2:	7bfa      	ldrb	r2, [r7, #15]
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	f102 0202 	add.w	r2, r2, #2
 800acba:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800acbe:	188a      	adds	r2, r1, r2
 800acc0:	6851      	ldr	r1, [r2, #4]
 800acc2:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 800acc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	f103 0301 	add.w	r3, r3, #1
 800acd0:	73fb      	strb	r3, [r7, #15]
 800acd2:	7bfb      	ldrb	r3, [r7, #15]
 800acd4:	2b32      	cmp	r3, #50	; 0x32
 800acd6:	d9e7      	bls.n	800aca8 <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800acd8:	f107 0714 	add.w	r7, r7, #20
 800acdc:	46bd      	mov	sp, r7
 800acde:	bc80      	pop	{r7}
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop

0800ace4 <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	4603      	mov	r3, r0
 800acec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00c      	beq.n	800ad0e <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800acf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800acfc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad00:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ad04:	6812      	ldr	r2, [r2, #0]
 800ad06:	f042 0208 	orr.w	r2, r2, #8
 800ad0a:	601a      	str	r2, [r3, #0]
 800ad0c:	e00b      	b.n	800ad26 <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800ad0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad12:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ad16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad1a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ad1e:	6812      	ldr	r2, [r2, #0]
 800ad20:	f022 0208 	bic.w	r2, r2, #8
 800ad24:	601a      	str	r2, [r3, #0]
  }
}
 800ad26:	f107 070c 	add.w	r7, r7, #12
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bc80      	pop	{r7}
 800ad2e:	4770      	bx	lr

0800ad30 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	71fa      	strb	r2, [r7, #7]
 800ad3c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ad3e:	79bb      	ldrb	r3, [r7, #6]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00c      	beq.n	800ad5e <HASH_ITConfig+0x2e>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800ad44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad48:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ad4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad50:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ad54:	6a11      	ldr	r1, [r2, #32]
 800ad56:	79fa      	ldrb	r2, [r7, #7]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	621a      	str	r2, [r3, #32]
 800ad5c:	e00e      	b.n	800ad7c <HASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 800ad5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad62:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ad66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ad6a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800ad6e:	6a11      	ldr	r1, [r2, #32]
 800ad70:	79fa      	ldrb	r2, [r7, #7]
 800ad72:	ea6f 0202 	mvn.w	r2, r2
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	400a      	ands	r2, r1
 800ad7a:	621a      	str	r2, [r3, #32]
  }
}
 800ad7c:	f107 070c 	add.w	r7, r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bc80      	pop	{r7}
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop

0800ad88 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800ad92:	f04f 0300 	mov.w	r3, #0
 800ad96:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800ad98:	f04f 0300 	mov.w	r3, #0
 800ad9c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 800ad9e:	88fb      	ldrh	r3, [r7, #6]
 800ada0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d006      	beq.n	800adb6 <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 800ada8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	60bb      	str	r3, [r7, #8]
 800adb4:	e005      	b.n	800adc2 <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800adb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adba:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800adbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc0:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 800adc2:	88fa      	ldrh	r2, [r7, #6]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	4013      	ands	r3, r2
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 800adcc:	f04f 0301 	mov.w	r3, #1
 800add0:	73fb      	strb	r3, [r7, #15]
 800add2:	e002      	b.n	800adda <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800add4:	f04f 0300 	mov.w	r3, #0
 800add8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800adda:	7bfb      	ldrb	r3, [r7, #15]
}
 800addc:	4618      	mov	r0, r3
 800adde:	f107 0714 	add.w	r7, r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bc80      	pop	{r7}
 800ade6:	4770      	bx	lr

0800ade8 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	4603      	mov	r3, r0
 800adf0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800adf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800adfa:	88fa      	ldrh	r2, [r7, #6]
 800adfc:	ea6f 0202 	mvn.w	r2, r2
 800ae00:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ae02:	f107 070c 	add.w	r7, r7, #12
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bc80      	pop	{r7}
 800ae0a:	4770      	bx	lr

0800ae0c <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b085      	sub	sp, #20
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	4603      	mov	r3, r0
 800ae14:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800ae16:	f04f 0300 	mov.w	r3, #0
 800ae1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800ae1c:	f04f 0300 	mov.w	r3, #0
 800ae20:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800ae22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae26:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800ae2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae32:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ae36:	6a1a      	ldr	r2, [r3, #32]
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	401a      	ands	r2, r3
 800ae3c:	79fb      	ldrb	r3, [r7, #7]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HASH_GetITStatus+0x40>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800ae44:	f04f 0301 	mov.w	r3, #1
 800ae48:	73fb      	strb	r3, [r7, #15]
 800ae4a:	e002      	b.n	800ae52 <HASH_GetITStatus+0x46>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800ae4c:	f04f 0300 	mov.w	r3, #0
 800ae50:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	f107 0714 	add.w	r7, r7, #20
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bc80      	pop	{r7}
 800ae5e:	4770      	bx	lr

0800ae60 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	4603      	mov	r3, r0
 800ae68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 800ae6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae6e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ae72:	79fa      	ldrb	r2, [r7, #7]
 800ae74:	ea6f 0202 	mvn.w	r2, r2
 800ae78:	b2d2      	uxtb	r2, r2
 800ae7a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ae7c:	f107 070c 	add.w	r7, r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bc80      	pop	{r7}
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop

0800ae88 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800ae88:	b590      	push	{r4, r7, lr}
 800ae8a:	b09d      	sub	sp, #116	; 0x74
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800ae9a:	f04f 0300 	mov.w	r3, #0
 800ae9e:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800aea0:	f04f 0300 	mov.w	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800aea6:	f04f 0300 	mov.w	r3, #0
 800aeaa:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800aeac:	f04f 0301 	mov.w	r3, #1
 800aeb0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	f003 0303 	and.w	r3, r3, #3
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800aece:	f7ff fd73 	bl	800a9b8 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800aed2:	f04f 0380 	mov.w	r3, #128	; 0x80
 800aed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800aed8:	f04f 0300 	mov.w	r3, #0
 800aedc:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800aede:	f04f 0320 	mov.w	r3, #32
 800aee2:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 800aee4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aee8:	4618      	mov	r0, r3
 800aeea:	f7ff fd75 	bl	800a9d8 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800aeee:	8afb      	ldrh	r3, [r7, #22]
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7ff fdee 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800aef8:	f04f 0300 	mov.w	r3, #0
 800aefc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aefe:	e00c      	b.n	800af1a <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800af00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4618      	mov	r0, r3
 800af06:	f7ff fe07 	bl	800ab18 <HASH_DataIn>
    inputaddr+=4;
 800af0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af0c:	f103 0304 	add.w	r3, r3, #4
 800af10:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800af12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af14:	f103 0304 	add.w	r3, r3, #4
 800af18:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	429a      	cmp	r2, r3
 800af20:	d3ee      	bcc.n	800af00 <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800af22:	f7ff fe45 	bl	800abb0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800af26:	f04f 0008 	mov.w	r0, #8
 800af2a:	f7ff ff2d 	bl	800ad88 <HASH_GetFlagStatus>
 800af2e:	4603      	mov	r3, r0
 800af30:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	f103 0301 	add.w	r3, r3, #1
 800af38:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af40:	d002      	beq.n	800af48 <HASH_MD5+0xc0>
 800af42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1ee      	bne.n	800af26 <HASH_MD5+0x9e>

  if (busystatus != RESET)
 800af48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d004      	beq.n	800af58 <HASH_MD5+0xd0>
  {
     status = ERROR;
 800af4e:	f04f 0300 	mov.w	r3, #0
 800af52:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800af56:	e030      	b.n	800afba <HASH_MD5+0x132>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800af58:	f107 0318 	add.w	r3, r7, #24
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7ff fdfb 	bl	800ab58 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800af62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af64:	69ba      	ldr	r2, [r7, #24]
 800af66:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800af68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af6a:	ba14      	rev	r4, r2
 800af6c:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800af6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af70:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800af72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af74:	f103 0304 	add.w	r3, r3, #4
 800af78:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800af7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af7c:	69fa      	ldr	r2, [r7, #28]
 800af7e:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800af80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af82:	ba14      	rev	r4, r2
 800af84:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800af86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af88:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800af8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af8c:	f103 0304 	add.w	r3, r3, #4
 800af90:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800af92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800af94:	6a3a      	ldr	r2, [r7, #32]
 800af96:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800af98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af9a:	ba14      	rev	r4, r2
 800af9c:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 800af9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800afa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afa4:	f103 0304 	add.w	r3, r3, #4
 800afa8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800afaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800afac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800afb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800afb2:	ba14      	rev	r4, r2
 800afb4:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800afb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800afb8:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800afba:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	f107 0774 	add.w	r7, r7, #116	; 0x74
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd90      	pop	{r4, r7, pc}

0800afc8 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800afc8:	b590      	push	{r4, r7, lr}
 800afca:	b09f      	sub	sp, #124	; 0x7c
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800afd6:	f04f 0300 	mov.w	r3, #0
 800afda:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800afdc:	f04f 0300 	mov.w	r3, #0
 800afe0:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800afe2:	f04f 0300 	mov.w	r3, #0
 800afe6:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800afe8:	f04f 0300 	mov.w	r3, #0
 800afec:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800afee:	f04f 0300 	mov.w	r3, #0
 800aff2:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800aff4:	f04f 0301 	mov.w	r3, #1
 800aff8:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800b004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b008:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	b29b      	uxth	r3, r3
 800b014:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b018:	b29b      	uxth	r3, r3
 800b01a:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	f003 0303 	and.w	r3, r3, #3
 800b024:	b29b      	uxth	r3, r3
 800b026:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800b02e:	f7ff fcc3 	bl	800a9b8 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800b032:	f04f 0380 	mov.w	r3, #128	; 0x80
 800b036:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800b038:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b03c:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800b03e:	f04f 0320 	mov.w	r3, #32
 800b042:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b40      	cmp	r3, #64	; 0x40
 800b048:	d903      	bls.n	800b052 <HMAC_MD5+0x8a>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800b04a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b050:	e002      	b.n	800b058 <HMAC_MD5+0x90>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800b052:	f04f 0300 	mov.w	r3, #0
 800b056:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800b058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b05c:	4618      	mov	r0, r3
 800b05e:	f7ff fcbb 	bl	800a9d8 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800b062:	8b3b      	ldrh	r3, [r7, #24]
 800b064:	b29b      	uxth	r3, r3
 800b066:	4618      	mov	r0, r3
 800b068:	f7ff fd34 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800b06c:	f04f 0300 	mov.w	r3, #0
 800b070:	677b      	str	r3, [r7, #116]	; 0x74
 800b072:	e00c      	b.n	800b08e <HMAC_MD5+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800b074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff fd4d 	bl	800ab18 <HASH_DataIn>
    keyaddr+=4;
 800b07e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b080:	f103 0304 	add.w	r3, r3, #4
 800b084:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800b086:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b088:	f103 0304 	add.w	r3, r3, #4
 800b08c:	677b      	str	r3, [r7, #116]	; 0x74
 800b08e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	429a      	cmp	r2, r3
 800b094:	d3ee      	bcc.n	800b074 <HMAC_MD5+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800b096:	f7ff fd8b 	bl	800abb0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b09a:	f04f 0008 	mov.w	r0, #8
 800b09e:	f7ff fe73 	bl	800ad88 <HASH_GetFlagStatus>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f103 0301 	add.w	r3, r3, #1
 800b0ac:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0b4:	d002      	beq.n	800b0bc <HMAC_MD5+0xf4>
 800b0b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1ee      	bne.n	800b09a <HMAC_MD5+0xd2>

  if (busystatus != RESET)
 800b0bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d004      	beq.n	800b0cc <HMAC_MD5+0x104>
  {
     status = ERROR;
 800b0c2:	f04f 0300 	mov.w	r3, #0
 800b0c6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800b0ca:	e0a2      	b.n	800b212 <HMAC_MD5+0x24a>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800b0cc:	8b7b      	ldrh	r3, [r7, #26]
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff fcff 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800b0d6:	f04f 0300 	mov.w	r3, #0
 800b0da:	677b      	str	r3, [r7, #116]	; 0x74
 800b0dc:	e00c      	b.n	800b0f8 <HMAC_MD5+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800b0de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7ff fd18 	bl	800ab18 <HASH_DataIn>
      inputaddr+=4;
 800b0e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b0ea:	f103 0304 	add.w	r3, r3, #4
 800b0ee:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800b0f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0f2:	f103 0304 	add.w	r3, r3, #4
 800b0f6:	677b      	str	r3, [r7, #116]	; 0x74
 800b0f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d3ee      	bcc.n	800b0de <HMAC_MD5+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800b100:	f7ff fd56 	bl	800abb0 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800b104:	f04f 0300 	mov.w	r3, #0
 800b108:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b10a:	f04f 0008 	mov.w	r0, #8
 800b10e:	f7ff fe3b 	bl	800ad88 <HASH_GetFlagStatus>
 800b112:	4603      	mov	r3, r0
 800b114:	667b      	str	r3, [r7, #100]	; 0x64
       counter++;
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	f103 0301 	add.w	r3, r3, #1
 800b11c:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b124:	d002      	beq.n	800b12c <HMAC_MD5+0x164>
 800b126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1ee      	bne.n	800b10a <HMAC_MD5+0x142>

    if (busystatus != RESET)
 800b12c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <HMAC_MD5+0x174>
    {
      status = ERROR;
 800b132:	f04f 0300 	mov.w	r3, #0
 800b136:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800b13a:	e06a      	b.n	800b212 <HMAC_MD5+0x24a>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800b13c:	8b3b      	ldrh	r3, [r7, #24]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff fcc7 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800b14a:	f04f 0300 	mov.w	r3, #0
 800b14e:	677b      	str	r3, [r7, #116]	; 0x74
 800b150:	e00c      	b.n	800b16c <HMAC_MD5+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800b152:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4618      	mov	r0, r3
 800b158:	f7ff fcde 	bl	800ab18 <HASH_DataIn>
        keyaddr+=4;
 800b15c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b15e:	f103 0304 	add.w	r3, r3, #4
 800b162:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800b164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b166:	f103 0304 	add.w	r3, r3, #4
 800b16a:	677b      	str	r3, [r7, #116]	; 0x74
 800b16c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	429a      	cmp	r2, r3
 800b172:	d3ee      	bcc.n	800b152 <HMAC_MD5+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800b174:	f7ff fd1c 	bl	800abb0 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800b178:	f04f 0300 	mov.w	r3, #0
 800b17c:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b17e:	f04f 0008 	mov.w	r0, #8
 800b182:	f7ff fe01 	bl	800ad88 <HASH_GetFlagStatus>
 800b186:	4603      	mov	r3, r0
 800b188:	667b      	str	r3, [r7, #100]	; 0x64
          counter++;
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f103 0301 	add.w	r3, r3, #1
 800b190:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b198:	d002      	beq.n	800b1a0 <HMAC_MD5+0x1d8>
 800b19a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1ee      	bne.n	800b17e <HMAC_MD5+0x1b6>

      if (busystatus != RESET)
 800b1a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d004      	beq.n	800b1b0 <HMAC_MD5+0x1e8>
      {
         status = ERROR;
 800b1a6:	f04f 0300 	mov.w	r3, #0
 800b1aa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800b1ae:	e030      	b.n	800b212 <HMAC_MD5+0x24a>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800b1b0:	f107 031c 	add.w	r3, r7, #28
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fccf 	bl	800ab58 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800b1ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1bc:	69fa      	ldr	r2, [r7, #28]
 800b1be:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b1c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b1c2:	ba14      	rev	r4, r2
 800b1c4:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800b1c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b1c8:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800b1ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1cc:	f103 0304 	add.w	r3, r3, #4
 800b1d0:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800b1d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1d4:	6a3a      	ldr	r2, [r7, #32]
 800b1d6:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b1d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b1da:	ba14      	rev	r4, r2
 800b1dc:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 800b1de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1e0:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800b1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1e4:	f103 0304 	add.w	r3, r3, #4
 800b1e8:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800b1ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ee:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b1f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1f2:	ba14      	rev	r4, r2
 800b1f4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800b1f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1f8:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800b1fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1fc:	f103 0304 	add.w	r3, r3, #4
 800b200:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800b202:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b206:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b208:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b20a:	ba14      	rev	r4, r2
 800b20c:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800b20e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b210:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800b212:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800b216:	4618      	mov	r0, r3
 800b218:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd90      	pop	{r4, r7, pc}

0800b220 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800b220:	b590      	push	{r4, r7, lr}
 800b222:	b09f      	sub	sp, #124	; 0x7c
 800b224:	af00      	add	r7, sp, #0
 800b226:	60f8      	str	r0, [r7, #12]
 800b228:	60b9      	str	r1, [r7, #8]
 800b22a:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800b22c:	f04f 0300 	mov.w	r3, #0
 800b230:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800b232:	f04f 0300 	mov.w	r3, #0
 800b236:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800b238:	f04f 0300 	mov.w	r3, #0
 800b23c:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800b23e:	f04f 0300 	mov.w	r3, #0
 800b242:	66bb      	str	r3, [r7, #104]	; 0x68
  ErrorStatus status = SUCCESS;
 800b244:	f04f 0301 	mov.w	r3, #1
 800b248:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t inputaddr  = (uint32_t)Input;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t outputaddr = (uint32_t)Output;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	667b      	str	r3, [r7, #100]	; 0x64

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	b29b      	uxth	r3, r3
 800b258:	f003 0303 	and.w	r3, r3, #3
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b262:	b29b      	uxth	r3, r3
 800b264:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800b266:	f7ff fba7 	bl	800a9b8 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800b26a:	f04f 0300 	mov.w	r3, #0
 800b26e:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800b276:	f04f 0320 	mov.w	r3, #32
 800b27a:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 800b27c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fba9 	bl	800a9d8 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800b286:	8afb      	ldrh	r3, [r7, #22]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fc22 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800b290:	f04f 0300 	mov.w	r3, #0
 800b294:	677b      	str	r3, [r7, #116]	; 0x74
 800b296:	e00c      	b.n	800b2b2 <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800b298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fc3b 	bl	800ab18 <HASH_DataIn>
    inputaddr+=4;
 800b2a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2a4:	f103 0304 	add.w	r3, r3, #4
 800b2a8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800b2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2ac:	f103 0304 	add.w	r3, r3, #4
 800b2b0:	677b      	str	r3, [r7, #116]	; 0x74
 800b2b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d3ee      	bcc.n	800b298 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800b2ba:	f7ff fc79 	bl	800abb0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b2be:	f04f 0008 	mov.w	r0, #8
 800b2c2:	f7ff fd61 	bl	800ad88 <HASH_GetFlagStatus>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	66bb      	str	r3, [r7, #104]	; 0x68
    counter++;
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f103 0301 	add.w	r3, r3, #1
 800b2d0:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d8:	d002      	beq.n	800b2e0 <HASH_SHA1+0xc0>
 800b2da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d1ee      	bne.n	800b2be <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 800b2e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d004      	beq.n	800b2f0 <HASH_SHA1+0xd0>
  {
     status = ERROR;
 800b2e6:	f04f 0300 	mov.w	r3, #0
 800b2ea:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800b2ee:	e03c      	b.n	800b36a <HASH_SHA1+0x14a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800b2f0:	f107 0318 	add.w	r3, r7, #24
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7ff fc2f 	bl	800ab58 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800b2fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2fc:	69ba      	ldr	r2, [r7, #24]
 800b2fe:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b300:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b302:	ba14      	rev	r4, r2
 800b304:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800b306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b308:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800b30a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b30c:	f103 0304 	add.w	r3, r3, #4
 800b310:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800b312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b314:	69fa      	ldr	r2, [r7, #28]
 800b316:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b31a:	ba14      	rev	r4, r2
 800b31c:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800b31e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b320:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800b322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b324:	f103 0304 	add.w	r3, r3, #4
 800b328:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800b32a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b32c:	6a3a      	ldr	r2, [r7, #32]
 800b32e:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b332:	ba14      	rev	r4, r2
 800b334:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800b336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b338:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800b33a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b33c:	f103 0304 	add.w	r3, r3, #4
 800b340:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800b342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b346:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b348:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b34a:	ba14      	rev	r4, r2
 800b34c:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 800b34e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b350:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800b352:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b354:	f103 0304 	add.w	r3, r3, #4
 800b358:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800b35a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b35c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b35e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b362:	ba14      	rev	r4, r2
 800b364:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800b366:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b368:	601a      	str	r2, [r3, #0]
  }
  return status;
 800b36a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800b36e:	4618      	mov	r0, r3
 800b370:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800b374:	46bd      	mov	sp, r7
 800b376:	bd90      	pop	{r4, r7, pc}

0800b378 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800b378:	b590      	push	{r4, r7, lr}
 800b37a:	b0a1      	sub	sp, #132	; 0x84
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
 800b384:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800b386:	f04f 0300 	mov.w	r3, #0
 800b38a:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800b38c:	f04f 0300 	mov.w	r3, #0
 800b390:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800b392:	f04f 0300 	mov.w	r3, #0
 800b396:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 800b398:	f04f 0300 	mov.w	r3, #0
 800b39c:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800b39e:	f04f 0300 	mov.w	r3, #0
 800b3a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 800b3a4:	f04f 0301 	mov.w	r3, #1
 800b3a8:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 800b3b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b3b8:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	f003 0303 	and.w	r3, r3, #3
 800b3c2:	b29b      	uxth	r3, r3
 800b3c4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	b29b      	uxth	r3, r3
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800b3de:	f7ff faeb 	bl	800a9b8 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800b3e2:	f04f 0300 	mov.w	r3, #0
 800b3e6:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800b3e8:	f04f 0340 	mov.w	r3, #64	; 0x40
 800b3ec:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800b3ee:	f04f 0320 	mov.w	r3, #32
 800b3f2:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b40      	cmp	r3, #64	; 0x40
 800b3f8:	d903      	bls.n	800b402 <HMAC_SHA1+0x8a>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800b3fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b400:	e002      	b.n	800b408 <HMAC_SHA1+0x90>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800b402:	f04f 0300 	mov.w	r3, #0
 800b406:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800b408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b40c:	4618      	mov	r0, r3
 800b40e:	f7ff fae3 	bl	800a9d8 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800b412:	8b3b      	ldrh	r3, [r7, #24]
 800b414:	b29b      	uxth	r3, r3
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff fb5c 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800b41c:	f04f 0300 	mov.w	r3, #0
 800b420:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b422:	e00c      	b.n	800b43e <HMAC_SHA1+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800b424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4618      	mov	r0, r3
 800b42a:	f7ff fb75 	bl	800ab18 <HASH_DataIn>
    keyaddr+=4;
 800b42e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b430:	f103 0304 	add.w	r3, r3, #4
 800b434:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800b436:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b438:	f103 0304 	add.w	r3, r3, #4
 800b43c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b43e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	429a      	cmp	r2, r3
 800b444:	d3ee      	bcc.n	800b424 <HMAC_SHA1+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800b446:	f7ff fbb3 	bl	800abb0 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b44a:	f04f 0008 	mov.w	r0, #8
 800b44e:	f7ff fc9b 	bl	800ad88 <HASH_GetFlagStatus>
 800b452:	4603      	mov	r3, r0
 800b454:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	f103 0301 	add.w	r3, r3, #1
 800b45c:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800b45e:	697b      	ldr	r3, [r7, #20]
 800b460:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b464:	d002      	beq.n	800b46c <HMAC_SHA1+0xf4>
 800b466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1ee      	bne.n	800b44a <HMAC_SHA1+0xd2>

  if (busystatus != RESET)
 800b46c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d004      	beq.n	800b47c <HMAC_SHA1+0x104>
  {
     status = ERROR;
 800b472:	f04f 0300 	mov.w	r3, #0
 800b476:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800b47a:	e0ae      	b.n	800b5da <HMAC_SHA1+0x262>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800b47c:	8b7b      	ldrh	r3, [r7, #26]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	4618      	mov	r0, r3
 800b482:	f7ff fb27 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b48c:	e00c      	b.n	800b4a8 <HMAC_SHA1+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800b48e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fb40 	bl	800ab18 <HASH_DataIn>
      inputaddr+=4;
 800b498:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b49a:	f103 0304 	add.w	r3, r3, #4
 800b49e:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800b4a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b4a2:	f103 0304 	add.w	r3, r3, #4
 800b4a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b4a8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d3ee      	bcc.n	800b48e <HMAC_SHA1+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800b4b0:	f7ff fb7e 	bl	800abb0 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800b4b4:	f04f 0300 	mov.w	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b4ba:	f04f 0008 	mov.w	r0, #8
 800b4be:	f7ff fc63 	bl	800ad88 <HASH_GetFlagStatus>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f103 0301 	add.w	r3, r3, #1
 800b4cc:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4d4:	d002      	beq.n	800b4dc <HMAC_SHA1+0x164>
 800b4d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1ee      	bne.n	800b4ba <HMAC_SHA1+0x142>

    if (busystatus != RESET)
 800b4dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d004      	beq.n	800b4ec <HMAC_SHA1+0x174>
    {
      status = ERROR;
 800b4e2:	f04f 0300 	mov.w	r3, #0
 800b4e6:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800b4ea:	e076      	b.n	800b5da <HMAC_SHA1+0x262>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800b4ec:	8b3b      	ldrh	r3, [r7, #24]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7ff faef 	bl	800aad4 <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 800b4fa:	f04f 0300 	mov.w	r3, #0
 800b4fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b500:	e00c      	b.n	800b51c <HMAC_SHA1+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800b502:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4618      	mov	r0, r3
 800b508:	f7ff fb06 	bl	800ab18 <HASH_DataIn>
        keyaddr+=4;
 800b50c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b50e:	f103 0304 	add.w	r3, r3, #4
 800b512:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800b514:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b516:	f103 0304 	add.w	r3, r3, #4
 800b51a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b51c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	429a      	cmp	r2, r3
 800b522:	d3ee      	bcc.n	800b502 <HMAC_SHA1+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800b524:	f7ff fb44 	bl	800abb0 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800b528:	f04f 0300 	mov.w	r3, #0
 800b52c:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800b52e:	f04f 0008 	mov.w	r0, #8
 800b532:	f7ff fc29 	bl	800ad88 <HASH_GetFlagStatus>
 800b536:	4603      	mov	r3, r0
 800b538:	66fb      	str	r3, [r7, #108]	; 0x6c
        counter++;
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	f103 0301 	add.w	r3, r3, #1
 800b540:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b548:	d002      	beq.n	800b550 <HMAC_SHA1+0x1d8>
 800b54a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d1ee      	bne.n	800b52e <HMAC_SHA1+0x1b6>

      if (busystatus != RESET)
 800b550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d004      	beq.n	800b560 <HMAC_SHA1+0x1e8>
      {
        status = ERROR;
 800b556:	f04f 0300 	mov.w	r3, #0
 800b55a:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800b55e:	e03c      	b.n	800b5da <HMAC_SHA1+0x262>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800b560:	f107 031c 	add.w	r3, r7, #28
 800b564:	4618      	mov	r0, r3
 800b566:	f7ff faf7 	bl	800ab58 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800b56a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b56c:	69fa      	ldr	r2, [r7, #28]
 800b56e:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b570:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b572:	ba14      	rev	r4, r2
 800b574:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800b576:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b578:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800b57a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b57c:	f103 0304 	add.w	r3, r3, #4
 800b580:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800b582:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b584:	6a3a      	ldr	r2, [r7, #32]
 800b586:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b588:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b58a:	ba14      	rev	r4, r2
 800b58c:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800b58e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b590:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800b592:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b594:	f103 0304 	add.w	r3, r3, #4
 800b598:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800b59a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b59c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b59e:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b5a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5a2:	ba14      	rev	r4, r2
 800b5a4:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 800b5a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5a8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800b5aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5ac:	f103 0304 	add.w	r3, r3, #4
 800b5b0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800b5b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b6:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b5b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5ba:	ba14      	rev	r4, r2
 800b5bc:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800b5be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b5c0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800b5c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5c4:	f103 0304 	add.w	r3, r3, #4
 800b5c8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800b5ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ce:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800b5d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d2:	ba14      	rev	r4, r2
 800b5d4:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800b5d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b5d8:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800b5da:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f107 0784 	add.w	r7, r7, #132	; 0x84
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd90      	pop	{r4, r7, pc}

0800b5e8 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800b5f0:	687a      	ldr	r2, [r7, #4]
 800b5f2:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800b5f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d10c      	bne.n	800b618 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800b5fe:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b602:	f04f 0101 	mov.w	r1, #1
 800b606:	f001 fb8b 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800b60a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800b60e:	f04f 0100 	mov.w	r1, #0
 800b612:	f001 fb85 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800b616:	e026      	b.n	800b666 <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800b61e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b622:	429a      	cmp	r2, r3
 800b624:	d10c      	bne.n	800b640 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800b626:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b62a:	f04f 0101 	mov.w	r1, #1
 800b62e:	f001 fb77 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800b632:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800b636:	f04f 0100 	mov.w	r1, #0
 800b63a:	f001 fb71 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800b63e:	e012      	b.n	800b666 <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 800b640:	687a      	ldr	r2, [r7, #4]
 800b642:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800b646:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d10b      	bne.n	800b666 <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800b64e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800b652:	f04f 0101 	mov.w	r1, #1
 800b656:	f001 fb63 	bl	800cd20 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800b65a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800b65e:	f04f 0100 	mov.w	r1, #0
 800b662:	f001 fb5d 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800b666:	f107 0708 	add.w	r7, r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop

0800b670 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08a      	sub	sp, #40	; 0x28
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800b67a:	f04f 0300 	mov.w	r3, #0
 800b67e:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b680:	f04f 0300 	mov.w	r3, #0
 800b684:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800b686:	f04f 0304 	mov.w	r3, #4
 800b68a:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800b68c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800b690:	f2c0 037a 	movt	r3, #122	; 0x7a
 800b694:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	889b      	ldrh	r3, [r3, #4]
 800b69a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800b69c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b69e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b6a2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800b6a4:	f107 030c 	add.w	r3, r7, #12
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 f899 	bl	800c7e0 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	f64d 6383 	movw	r3, #56963	; 0xde83
 800b6b8:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800b6bc:	fba3 1302 	umull	r1, r3, r3, r2
 800b6c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800b6c4:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800b6c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b6c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b6d2:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	881b      	ldrh	r3, [r3, #0]
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	f023 0301 	bic.w	r3, r3, #1
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800b6e4:	f04f 0300 	mov.w	r3, #0
 800b6e8:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800b6f2:	f2c0 0301 	movt	r3, #1
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d818      	bhi.n	800b72c <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	fbb2 f3f3 	udiv	r3, r2, r3
 800b708:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800b70a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b70c:	2b03      	cmp	r3, #3
 800b70e:	d802      	bhi.n	800b716 <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800b710:	f04f 0304 	mov.w	r3, #4
 800b714:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800b716:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b71a:	4313      	orrs	r3, r2
 800b71c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800b71e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b720:	f103 0301 	add.w	r3, r3, #1
 800b724:	b29a      	uxth	r2, r3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	841a      	strh	r2, [r3, #32]
 800b72a:	e04b      	b.n	800b7c4 <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	88da      	ldrh	r2, [r3, #6]
 800b730:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800b734:	429a      	cmp	r2, r3
 800b736:	d10a      	bne.n	800b74e <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	4613      	mov	r3, r2
 800b73e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b742:	189b      	adds	r3, r3, r2
 800b744:	69fa      	ldr	r2, [r7, #28]
 800b746:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b74c:	e010      	b.n	800b770 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	4613      	mov	r3, r2
 800b754:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800b758:	189b      	adds	r3, r3, r2
 800b75a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b75e:	189b      	adds	r3, r3, r2
 800b760:	69fa      	ldr	r2, [r7, #28]
 800b762:	fbb2 f3f3 	udiv	r3, r2, r3
 800b766:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800b768:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b76a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b76e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800b770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b772:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800b776:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d103      	bne.n	800b786 <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800b77e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b780:	f043 0301 	orr.w	r3, r3, #1
 800b784:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800b786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b78a:	4313      	orrs	r3, r2
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b796:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800b798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b79a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800b79e:	fb02 f203 	mul.w	r2, r2, r3
 800b7a2:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800b7a6:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800b7aa:	fb83 1302 	smull	r1, r3, r3, r2
 800b7ae:	ea4f 11a3 	mov.w	r1, r3, asr #6
 800b7b2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800b7b6:	1acb      	subs	r3, r1, r3
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	f103 0301 	add.w	r3, r3, #1
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b7c8:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	881b      	ldrh	r3, [r3, #0]
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	f043 0301 	orr.w	r3, r3, #1
 800b7d4:	b29a      	uxth	r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	881b      	ldrh	r3, [r3, #0]
 800b7de:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800b7e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7e6:	f023 030a 	bic.w	r3, r3, #10
 800b7ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	889a      	ldrh	r2, [r3, #4]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	895b      	ldrh	r3, [r3, #10]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b802:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	899a      	ldrh	r2, [r3, #12]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	891b      	ldrh	r3, [r3, #8]
 800b80c:	4313      	orrs	r3, r2
 800b80e:	b29a      	uxth	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	811a      	strh	r2, [r3, #8]
}
 800b814:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f241 3288 	movw	r2, #5000	; 0x1388
 800b82a:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f04f 0200 	mov.w	r2, #0
 800b832:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800b83a:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f04f 0200 	mov.w	r2, #0
 800b842:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	f04f 0200 	mov.w	r2, #0
 800b84a:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b852:	819a      	strh	r2, [r3, #12]
}
 800b854:	f107 070c 	add.w	r7, r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	bc80      	pop	{r7}
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop

0800b860 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b86c:	78fb      	ldrb	r3, [r7, #3]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d008      	beq.n	800b884 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	881b      	ldrh	r3, [r3, #0]
 800b876:	b29b      	uxth	r3, r3
 800b878:	f043 0301 	orr.w	r3, r3, #1
 800b87c:	b29a      	uxth	r2, r3
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	801a      	strh	r2, [r3, #0]
 800b882:	e007      	b.n	800b894 <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	f023 0301 	bic.w	r3, r3, #1
 800b88e:	b29a      	uxth	r2, r3
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	801a      	strh	r2, [r3, #0]
  }
}
 800b894:	f107 070c 	add.w	r7, r7, #12
 800b898:	46bd      	mov	sp, r7
 800b89a:	bc80      	pop	{r7}
 800b89c:	4770      	bx	lr
 800b89e:	bf00      	nop

0800b8a0 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b083      	sub	sp, #12
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	460b      	mov	r3, r1
 800b8aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b8ac:	78fb      	ldrb	r3, [r7, #3]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d008      	beq.n	800b8c4 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	801a      	strh	r2, [r3, #0]
 800b8c2:	e007      	b.n	800b8d4 <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	881b      	ldrh	r3, [r3, #0]
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ce:	b29a      	uxth	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	801a      	strh	r2, [r3, #0]
  }
}
 800b8d4:	f107 070c 	add.w	r7, r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bc80      	pop	{r7}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b8ec:	78fb      	ldrb	r3, [r7, #3]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d008      	beq.n	800b904 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	881b      	ldrh	r3, [r3, #0]
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b8fc:	b29a      	uxth	r2, r3
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	801a      	strh	r2, [r3, #0]
 800b902:	e007      	b.n	800b914 <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	881b      	ldrh	r3, [r3, #0]
 800b908:	b29b      	uxth	r3, r3
 800b90a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b90e:	b29a      	uxth	r2, r3
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	801a      	strh	r2, [r3, #0]
  }
}
 800b914:	f107 070c 	add.w	r7, r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	bc80      	pop	{r7}
 800b91c:	4770      	bx	lr
 800b91e:	bf00      	nop

0800b920 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	4613      	mov	r3, r2
 800b92a:	460a      	mov	r2, r1
 800b92c:	70fa      	strb	r2, [r7, #3]
 800b92e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800b930:	78bb      	ldrb	r3, [r7, #2]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d004      	beq.n	800b940 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800b936:	78fb      	ldrb	r3, [r7, #3]
 800b938:	f043 0301 	orr.w	r3, r3, #1
 800b93c:	70fb      	strb	r3, [r7, #3]
 800b93e:	e003      	b.n	800b948 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800b940:	78fb      	ldrb	r3, [r7, #3]
 800b942:	f023 0301 	bic.w	r3, r3, #1
 800b946:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	821a      	strh	r2, [r3, #16]
}
 800b950:	f107 070c 	add.w	r7, r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	bc80      	pop	{r7}
 800b958:	4770      	bx	lr
 800b95a:	bf00      	nop

0800b95c <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b083      	sub	sp, #12
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b968:	78fb      	ldrb	r3, [r7, #3]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d008      	beq.n	800b980 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	881b      	ldrh	r3, [r3, #0]
 800b972:	b29b      	uxth	r3, r3
 800b974:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b978:	b29a      	uxth	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	801a      	strh	r2, [r3, #0]
 800b97e:	e007      	b.n	800b990 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	b29b      	uxth	r3, r3
 800b986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b98a:	b29a      	uxth	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	801a      	strh	r2, [r3, #0]
  }
}
 800b990:	f107 070c 	add.w	r7, r7, #12
 800b994:	46bd      	mov	sp, r7
 800b996:	bc80      	pop	{r7}
 800b998:	4770      	bx	lr
 800b99a:	bf00      	nop

0800b99c <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800b99c:	b480      	push	{r7}
 800b99e:	b085      	sub	sp, #20
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800b9a8:	f04f 0300 	mov.w	r3, #0
 800b9ac:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	899b      	ldrh	r3, [r3, #12]
 800b9b2:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800b9b4:	89fb      	ldrh	r3, [r7, #14]
 800b9b6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b9ba:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800b9bc:	78fb      	ldrb	r3, [r7, #3]
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b9c4:	b29a      	uxth	r2, r3
 800b9c6:	89fb      	ldrh	r3, [r7, #14]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	89fa      	ldrh	r2, [r7, #14]
 800b9d2:	819a      	strh	r2, [r3, #12]
}
 800b9d4:	f107 0714 	add.w	r7, r7, #20
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bc80      	pop	{r7}
 800b9dc:	4770      	bx	lr
 800b9de:	bf00      	nop

0800b9e0 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b9ec:	78fb      	ldrb	r3, [r7, #3]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d008      	beq.n	800ba04 <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	899b      	ldrh	r3, [r3, #12]
 800b9f6:	b29b      	uxth	r3, r3
 800b9f8:	f043 0301 	orr.w	r3, r3, #1
 800b9fc:	b29a      	uxth	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	819a      	strh	r2, [r3, #12]
 800ba02:	e007      	b.n	800ba14 <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	899b      	ldrh	r3, [r3, #12]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	f023 0301 	bic.w	r3, r3, #1
 800ba0e:	b29a      	uxth	r2, r3
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	819a      	strh	r2, [r3, #12]
  }
}
 800ba14:	f107 070c 	add.w	r7, r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	bc80      	pop	{r7}
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop

0800ba20 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d008      	beq.n	800ba44 <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	881b      	ldrh	r3, [r3, #0]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba3c:	b29a      	uxth	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	801a      	strh	r2, [r3, #0]
 800ba42:	e007      	b.n	800ba54 <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	881b      	ldrh	r3, [r3, #0]
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	801a      	strh	r2, [r3, #0]
  }
}
 800ba54:	f107 070c 	add.w	r7, r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop

0800ba60 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b083      	sub	sp, #12
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ba6c:	78fb      	ldrb	r3, [r7, #3]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00a      	beq.n	800ba88 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	801a      	strh	r2, [r3, #0]
 800ba86:	e009      	b.n	800ba9c <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800ba92:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	801a      	strh	r2, [r3, #0]
  }
}
 800ba9c:	f107 070c 	add.w	r7, r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	bc80      	pop	{r7}
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop

0800baa8 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
 800bab0:	460b      	mov	r3, r1
 800bab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d108      	bne.n	800bacc <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	801a      	strh	r2, [r3, #0]
 800baca:	e007      	b.n	800badc <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bad6:	b29a      	uxth	r2, r3
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	801a      	strh	r2, [r3, #0]
  }
}
 800badc:	f107 070c 	add.w	r7, r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bc80      	pop	{r7}
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop

0800bae8 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800bae8:	b480      	push	{r7}
 800baea:	b083      	sub	sp, #12
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
 800baf0:	460b      	mov	r3, r1
 800baf2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800baf4:	887b      	ldrh	r3, [r7, #2]
 800baf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bafa:	d008      	beq.n	800bb0e <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	8b9b      	ldrh	r3, [r3, #28]
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb06:	b29a      	uxth	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	839a      	strh	r2, [r3, #28]
 800bb0c:	e007      	b.n	800bb1e <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	8b9b      	ldrh	r3, [r3, #28]
 800bb12:	b29b      	uxth	r3, r3
 800bb14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb18:	b29a      	uxth	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	839a      	strh	r2, [r3, #28]
  }
}
 800bb1e:	f107 070c 	add.w	r7, r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bc80      	pop	{r7}
 800bb26:	4770      	bx	lr

0800bb28 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	460b      	mov	r3, r1
 800bb32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800bb34:	887b      	ldrh	r3, [r7, #2]
 800bb36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb3a:	d108      	bne.n	800bb4e <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	881b      	ldrh	r3, [r3, #0]
 800bb40:	b29b      	uxth	r3, r3
 800bb42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bb46:	b29a      	uxth	r2, r3
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	801a      	strh	r2, [r3, #0]
 800bb4c:	e007      	b.n	800bb5e <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	881b      	ldrh	r3, [r3, #0]
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	801a      	strh	r2, [r3, #0]
  }
}
 800bb5e:	f107 070c 	add.w	r7, r7, #12
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bc80      	pop	{r7}
 800bb66:	4770      	bx	lr

0800bb68 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
 800bb70:	460b      	mov	r3, r1
 800bb72:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800bb74:	887b      	ldrh	r3, [r7, #2]
 800bb76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb7a:	d108      	bne.n	800bb8e <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bb86:	b29a      	uxth	r2, r3
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	801a      	strh	r2, [r3, #0]
 800bb8c:	e007      	b.n	800bb9e <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb98:	b29a      	uxth	r2, r3
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	801a      	strh	r2, [r3, #0]
  }
}
 800bb9e:	f107 070c 	add.w	r7, r7, #12
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bc80      	pop	{r7}
 800bba6:	4770      	bx	lr

0800bba8 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
 800bbb0:	460b      	mov	r3, r1
 800bbb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d008      	beq.n	800bbcc <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	881b      	ldrh	r3, [r3, #0]
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	f043 0310 	orr.w	r3, r3, #16
 800bbc4:	b29a      	uxth	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	801a      	strh	r2, [r3, #0]
 800bbca:	e007      	b.n	800bbdc <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	881b      	ldrh	r3, [r3, #0]
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	f023 0310 	bic.w	r3, r3, #16
 800bbd6:	b29a      	uxth	r2, r3
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	801a      	strh	r2, [r3, #0]
  }
}
 800bbdc:	f107 070c 	add.w	r7, r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bc80      	pop	{r7}
 800bbe4:	4770      	bx	lr
 800bbe6:	bf00      	nop

0800bbe8 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	821a      	strh	r2, [r3, #16]
}
 800bbfc:	f107 070c 	add.w	r7, r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bc80      	pop	{r7}
 800bc04:	4770      	bx	lr
 800bc06:	bf00      	nop

0800bc08 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	8a1b      	ldrh	r3, [r3, #16]
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	b2db      	uxtb	r3, r3
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	f107 070c 	add.w	r7, r7, #12
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bc80      	pop	{r7}
 800bc22:	4770      	bx	lr

0800bc24 <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bc30:	78fb      	ldrb	r3, [r7, #3]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d008      	beq.n	800bc48 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	881b      	ldrh	r3, [r3, #0]
 800bc3a:	b29b      	uxth	r3, r3
 800bc3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc40:	b29a      	uxth	r2, r3
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	801a      	strh	r2, [r3, #0]
 800bc46:	e007      	b.n	800bc58 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	881b      	ldrh	r3, [r3, #0]
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc52:	b29a      	uxth	r2, r3
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	801a      	strh	r2, [r3, #0]
  }
}
 800bc58:	f107 070c 	add.w	r7, r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bc80      	pop	{r7}
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop

0800bc64 <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800bc70:	887b      	ldrh	r3, [r7, #2]
 800bc72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc76:	d108      	bne.n	800bc8a <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	881b      	ldrh	r3, [r3, #0]
 800bc7c:	b29b      	uxth	r3, r3
 800bc7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bc82:	b29a      	uxth	r2, r3
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	801a      	strh	r2, [r3, #0]
 800bc88:	e007      	b.n	800bc9a <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc94:	b29a      	uxth	r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	801a      	strh	r2, [r3, #0]
  }
}
 800bc9a:	f107 070c 	add.w	r7, r7, #12
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bc80      	pop	{r7}
 800bca2:	4770      	bx	lr

0800bca4 <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	460b      	mov	r3, r1
 800bcae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bcb0:	78fb      	ldrb	r3, [r7, #3]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d008      	beq.n	800bcc8 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	881b      	ldrh	r3, [r3, #0]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	f043 0320 	orr.w	r3, r3, #32
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	801a      	strh	r2, [r3, #0]
 800bcc6:	e007      	b.n	800bcd8 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	881b      	ldrh	r3, [r3, #0]
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	f023 0320 	bic.w	r3, r3, #32
 800bcd2:	b29a      	uxth	r2, r3
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	801a      	strh	r2, [r3, #0]
  }
}
 800bcd8:	f107 070c 	add.w	r7, r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bc80      	pop	{r7}
 800bce0:	4770      	bx	lr
 800bce2:	bf00      	nop

0800bce4 <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800bce4:	b480      	push	{r7}
 800bce6:	b083      	sub	sp, #12
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	8b1b      	ldrh	r3, [r3, #24]
 800bcf0:	b29b      	uxth	r3, r3
 800bcf2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	b2db      	uxtb	r3, r3
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f107 070c 	add.w	r7, r7, #12
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bc80      	pop	{r7}
 800bd04:	4770      	bx	lr
 800bd06:	bf00      	nop

0800bd08 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b083      	sub	sp, #12
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	460b      	mov	r3, r1
 800bd12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bd14:	78fb      	ldrb	r3, [r7, #3]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d008      	beq.n	800bd2c <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	889b      	ldrh	r3, [r3, #4]
 800bd1e:	b29b      	uxth	r3, r3
 800bd20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	809a      	strh	r2, [r3, #4]
 800bd2a:	e007      	b.n	800bd3c <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	889b      	ldrh	r3, [r3, #4]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bd36:	b29a      	uxth	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	809a      	strh	r2, [r3, #4]
  }
}
 800bd3c:	f107 070c 	add.w	r7, r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bc80      	pop	{r7}
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop

0800bd48 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800bd54:	78fb      	ldrb	r3, [r7, #3]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	889b      	ldrh	r3, [r3, #4]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bd64:	b29a      	uxth	r2, r3
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	809a      	strh	r2, [r3, #4]
 800bd6a:	e007      	b.n	800bd7c <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	889b      	ldrh	r3, [r3, #4]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd76:	b29a      	uxth	r2, r3
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	809a      	strh	r2, [r3, #4]
  }
}
 800bd7c:	f107 070c 	add.w	r7, r7, #12
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bc80      	pop	{r7}
 800bd84:	4770      	bx	lr
 800bd86:	bf00      	nop

0800bd88 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800bd9e:	78fa      	ldrb	r2, [r7, #3]
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	18d3      	adds	r3, r2, r3
 800bda4:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	881b      	ldrh	r3, [r3, #0]
 800bdaa:	b29b      	uxth	r3, r3
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	f107 0714 	add.w	r7, r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bc80      	pop	{r7}
 800bdb6:	4770      	bx	lr

0800bdb8 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
 800bdc0:	4613      	mov	r3, r2
 800bdc2:	460a      	mov	r2, r1
 800bdc4:	807a      	strh	r2, [r7, #2]
 800bdc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800bdc8:	787b      	ldrb	r3, [r7, #1]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d008      	beq.n	800bde0 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	889b      	ldrh	r3, [r3, #4]
 800bdd2:	b29a      	uxth	r2, r3
 800bdd4:	887b      	ldrh	r3, [r7, #2]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	b29a      	uxth	r2, r3
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	809a      	strh	r2, [r3, #4]
 800bdde:	e00a      	b.n	800bdf6 <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	889b      	ldrh	r3, [r3, #4]
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	887b      	ldrh	r3, [r7, #2]
 800bde8:	ea6f 0303 	mvn.w	r3, r3
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	4013      	ands	r3, r2
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	809a      	strh	r2, [r3, #4]
  }
}
 800bdf6:	f107 070c 	add.w	r7, r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bc80      	pop	{r7}
 800bdfe:	4770      	bx	lr

0800be00 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800be00:	b480      	push	{r7}
 800be02:	b087      	sub	sp, #28
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800be0a:	f04f 0300 	mov.w	r3, #0
 800be0e:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800be10:	f04f 0300 	mov.w	r3, #0
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	f04f 0300 	mov.w	r3, #0
 800be1a:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800be1c:	f04f 0300 	mov.w	r3, #0
 800be20:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	8a9b      	ldrh	r3, [r3, #20]
 800be26:	b29b      	uxth	r3, r3
 800be28:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	8b1b      	ldrh	r3, [r3, #24]
 800be2e:	b29b      	uxth	r3, r3
 800be30:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800be38:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	4313      	orrs	r3, r2
 800be40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800be44:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	401a      	ands	r2, r3
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d103      	bne.n	800be5a <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800be52:	f04f 0301 	mov.w	r3, #1
 800be56:	75fb      	strb	r3, [r7, #23]
 800be58:	e002      	b.n	800be60 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800be5a:	f04f 0300 	mov.w	r3, #0
 800be5e:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800be60:	7dfb      	ldrb	r3, [r7, #23]
}
 800be62:	4618      	mov	r0, r3
 800be64:	f107 071c 	add.w	r7, r7, #28
 800be68:	46bd      	mov	sp, r7
 800be6a:	bc80      	pop	{r7}
 800be6c:	4770      	bx	lr
 800be6e:	bf00      	nop

0800be70 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800be78:	f04f 0300 	mov.w	r3, #0
 800be7c:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800be7e:	f04f 0300 	mov.w	r3, #0
 800be82:	613b      	str	r3, [r7, #16]
 800be84:	f04f 0300 	mov.w	r3, #0
 800be88:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	8a9b      	ldrh	r3, [r3, #20]
 800be8e:	b29b      	uxth	r3, r3
 800be90:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	8b1b      	ldrh	r3, [r3, #24]
 800be96:	b29b      	uxth	r3, r3
 800be98:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800bea0:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800beac:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800beae:	697b      	ldr	r3, [r7, #20]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	f107 071c 	add.w	r7, r7, #28
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bc80      	pop	{r7}
 800beba:	4770      	bx	lr

0800bebc <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b087      	sub	sp, #28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800bec6:	f04f 0300 	mov.w	r3, #0
 800beca:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800becc:	f04f 0300 	mov.w	r3, #0
 800bed0:	613b      	str	r3, [r7, #16]
 800bed2:	f04f 0300 	mov.w	r3, #0
 800bed6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800bee2:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800beea:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800beec:	693b      	ldr	r3, [r7, #16]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d004      	beq.n	800befc <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	f103 0314 	add.w	r3, r3, #20
 800bef8:	60fb      	str	r3, [r7, #12]
 800befa:	e007      	b.n	800bf0c <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bf02:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f103 0318 	add.w	r3, r3, #24
 800bf0a:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	4013      	ands	r3, r2
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d003      	beq.n	800bf20 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800bf18:	f04f 0301 	mov.w	r3, #1
 800bf1c:	75fb      	strb	r3, [r7, #23]
 800bf1e:	e002      	b.n	800bf26 <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	f107 071c 	add.w	r7, r7, #28
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bc80      	pop	{r7}
 800bf32:	4770      	bx	lr

0800bf34 <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800bf3e:	f04f 0300 	mov.w	r3, #0
 800bf42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf4a:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	b29b      	uxth	r3, r3
 800bf50:	ea6f 0303 	mvn.w	r3, r3
 800bf54:	b29a      	uxth	r2, r3
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	829a      	strh	r2, [r3, #20]
}
 800bf5a:	f107 0714 	add.w	r7, r7, #20
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bc80      	pop	{r7}
 800bf62:	4770      	bx	lr

0800bf64 <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800bf6e:	f04f 0300 	mov.w	r3, #0
 800bf72:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800bf74:	f04f 0300 	mov.w	r3, #0
 800bf78:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf80:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	889b      	ldrh	r3, [r3, #4]
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	4013      	ands	r3, r2
 800bf8c:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf94:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	8a9b      	ldrh	r3, [r3, #20]
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d006      	beq.n	800bfb4 <I2C_GetITStatus+0x50>
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d003      	beq.n	800bfb4 <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800bfac:	f04f 0301 	mov.w	r3, #1
 800bfb0:	73fb      	strb	r3, [r7, #15]
 800bfb2:	e002      	b.n	800bfba <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800bfb4:	f04f 0300 	mov.w	r3, #0
 800bfb8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800bfba:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f107 0714 	add.w	r7, r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bc80      	pop	{r7}
 800bfc6:	4770      	bx	lr

0800bfc8 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800bfd2:	f04f 0300 	mov.w	r3, #0
 800bfd6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	ea6f 0303 	mvn.w	r3, r3
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	829a      	strh	r2, [r3, #20]
}
 800bfee:	f107 0714 	add.w	r7, r7, #20
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bc80      	pop	{r7}
 800bff6:	4770      	bx	lr

0800bff8 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800c002:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c006:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c00a:	88fa      	ldrh	r2, [r7, #6]
 800c00c:	601a      	str	r2, [r3, #0]
}
 800c00e:	f107 070c 	add.w	r7, r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	bc80      	pop	{r7}
 800c016:	4770      	bx	lr

0800c018 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800c022:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c026:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c02a:	79fa      	ldrb	r2, [r7, #7]
 800c02c:	605a      	str	r2, [r3, #4]
}
 800c02e:	f107 070c 	add.w	r7, r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	bc80      	pop	{r7}
 800c036:	4770      	bx	lr

0800c038 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800c042:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c046:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c04a:	88fa      	ldrh	r2, [r7, #6]
 800c04c:	609a      	str	r2, [r3, #8]
}
 800c04e:	f107 070c 	add.w	r7, r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	bc80      	pop	{r7}
 800c056:	4770      	bx	lr

0800c058 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800c058:	b480      	push	{r7}
 800c05a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800c05c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c060:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c064:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c068:	601a      	str	r2, [r3, #0]
}
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bc80      	pop	{r7}
 800c06e:	4770      	bx	lr

0800c070 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800c070:	b480      	push	{r7}
 800c072:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800c074:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c078:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c07c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c080:	601a      	str	r2, [r3, #0]
}
 800c082:	46bd      	mov	sp, r7
 800c084:	bc80      	pop	{r7}
 800c086:	4770      	bx	lr

0800c088 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800c088:	b480      	push	{r7}
 800c08a:	b085      	sub	sp, #20
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	4603      	mov	r3, r0
 800c090:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800c092:	f04f 0300 	mov.w	r3, #0
 800c096:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800c098:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c09c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c0a0:	68da      	ldr	r2, [r3, #12]
 800c0a2:	88fb      	ldrh	r3, [r7, #6]
 800c0a4:	4013      	ands	r3, r2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <IWDG_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800c0aa:	f04f 0301 	mov.w	r3, #1
 800c0ae:	73fb      	strb	r3, [r7, #15]
 800c0b0:	e002      	b.n	800c0b8 <IWDG_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800c0b2:	f04f 0300 	mov.w	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f107 0714 	add.w	r7, r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bc80      	pop	{r7}
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop

0800c0c8 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800c0c8:	b580      	push	{r7, lr}
 800c0ca:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800c0cc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c0d0:	f04f 0101 	mov.w	r1, #1
 800c0d4:	f000 fe24 	bl	800cd20 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800c0d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800c0dc:	f04f 0100 	mov.w	r1, #0
 800c0e0:	f000 fe1e 	bl	800cd20 <RCC_APB1PeriphResetCmd>
}
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop

0800c0e8 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800c0f2:	f04f 0320 	mov.w	r3, #32
 800c0f6:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800c0fa:	79fa      	ldrb	r2, [r7, #7]
 800c0fc:	601a      	str	r2, [r3, #0]
}
 800c0fe:	f107 070c 	add.w	r7, r7, #12
 800c102:	46bd      	mov	sp, r7
 800c104:	bc80      	pop	{r7}
 800c106:	4770      	bx	lr

0800c108 <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c110:	f04f 0300 	mov.w	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800c116:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c11a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800c128:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4313      	orrs	r3, r2
 800c130:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800c132:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c136:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c13a:	68fa      	ldr	r2, [r7, #12]
 800c13c:	601a      	str	r2, [r3, #0]
}
 800c13e:	f107 0714 	add.w	r7, r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	bc80      	pop	{r7}
 800c146:	4770      	bx	lr

0800c148 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800c148:	b480      	push	{r7}
 800c14a:	b083      	sub	sp, #12
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800c152:	f04f 0310 	mov.w	r3, #16
 800c156:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800c15a:	79fa      	ldrb	r2, [r7, #7]
 800c15c:	601a      	str	r2, [r3, #0]
}
 800c15e:	f107 070c 	add.w	r7, r7, #12
 800c162:	46bd      	mov	sp, r7
 800c164:	bc80      	pop	{r7}
 800c166:	4770      	bx	lr

0800c168 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	4603      	mov	r3, r0
 800c170:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800c172:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800c176:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800c17a:	79fa      	ldrb	r2, [r7, #7]
 800c17c:	601a      	str	r2, [r3, #0]
}
 800c17e:	f107 070c 	add.w	r7, r7, #12
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr

0800c188 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	4603      	mov	r3, r0
 800c190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800c192:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 800c196:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800c19a:	79fa      	ldrb	r2, [r7, #7]
 800c19c:	601a      	str	r2, [r3, #0]
}
 800c19e:	f107 070c 	add.w	r7, r7, #12
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	bc80      	pop	{r7}
 800c1a6:	4770      	bx	lr

0800c1a8 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d10c      	bne.n	800c1d0 <PWR_MainRegulatorModeConfig+0x28>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 800c1b6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c1ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c1be:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800c1c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c1c6:	6812      	ldr	r2, [r2, #0]
 800c1c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1cc:	601a      	str	r2, [r3, #0]
 800c1ce:	e00b      	b.n	800c1e8 <PWR_MainRegulatorModeConfig+0x40>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 800c1d0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c1d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c1d8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800c1dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c1e0:	6812      	ldr	r2, [r2, #0]
 800c1e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c1e6:	601a      	str	r2, [r3, #0]
  }
}
 800c1e8:	f107 070c 	add.w	r7, r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bc80      	pop	{r7}
 800c1f0:	4770      	bx	lr
 800c1f2:	bf00      	nop

0800c1f4 <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800c1fe:	f04f 0324 	mov.w	r3, #36	; 0x24
 800c202:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800c206:	79fa      	ldrb	r2, [r7, #7]
 800c208:	601a      	str	r2, [r3, #0]
}
 800c20a:	f107 070c 	add.w	r7, r7, #12
 800c20e:	46bd      	mov	sp, r7
 800c210:	bc80      	pop	{r7}
 800c212:	4770      	bx	lr

0800c214 <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800c214:	b480      	push	{r7}
 800c216:	b085      	sub	sp, #20
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800c220:	f04f 0300 	mov.w	r3, #0
 800c224:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800c226:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c22a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	f023 0303 	bic.w	r3, r3, #3
 800c238:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800c242:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c246:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c24a:	68fa      	ldr	r2, [r7, #12]
 800c24c:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800c24e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800c252:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800c256:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800c25a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800c25e:	6912      	ldr	r2, [r2, #16]
 800c260:	f042 0204 	orr.w	r2, r2, #4
 800c264:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800c266:	78fb      	ldrb	r3, [r7, #3]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <PWR_EnterSTOPMode+0x5c>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800c26c:	bf30      	wfi
 800c26e:	e000      	b.n	800c272 <PWR_EnterSTOPMode+0x5e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800c270:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800c272:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800c276:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800c27a:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800c27e:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800c282:	6912      	ldr	r2, [r2, #16]
 800c284:	f022 0204 	bic.w	r2, r2, #4
 800c288:	611a      	str	r2, [r3, #16]
}
 800c28a:	f107 0714 	add.w	r7, r7, #20
 800c28e:	46bd      	mov	sp, r7
 800c290:	bc80      	pop	{r7}
 800c292:	4770      	bx	lr

0800c294 <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800c298:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c29c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c2a0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800c2a4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c2a8:	6812      	ldr	r2, [r2, #0]
 800c2aa:	f042 0204 	orr.w	r2, r2, #4
 800c2ae:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800c2b0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c2b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c2b8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800c2bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c2c0:	6812      	ldr	r2, [r2, #0]
 800c2c2:	f042 0202 	orr.w	r2, r2, #2
 800c2c6:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800c2c8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800c2cc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800c2d0:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800c2d4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800c2d8:	6912      	ldr	r2, [r2, #16]
 800c2da:	f042 0204 	orr.w	r2, r2, #4
 800c2de:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800c2e0:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bc80      	pop	{r7}
 800c2e6:	4770      	bx	lr

0800c2e8 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800c2f0:	f04f 0300 	mov.w	r3, #0
 800c2f4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800c2f6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c2fa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c2fe:	685a      	ldr	r2, [r3, #4]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4013      	ands	r3, r2
 800c304:	2b00      	cmp	r3, #0
 800c306:	d003      	beq.n	800c310 <PWR_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800c308:	f04f 0301 	mov.w	r3, #1
 800c30c:	73fb      	strb	r3, [r7, #15]
 800c30e:	e002      	b.n	800c316 <PWR_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800c310:	f04f 0300 	mov.w	r3, #0
 800c314:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800c316:	7bfb      	ldrb	r3, [r7, #15]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	f107 0714 	add.w	r7, r7, #20
 800c31e:	46bd      	mov	sp, r7
 800c320:	bc80      	pop	{r7}
 800c322:	4770      	bx	lr

0800c324 <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800c32c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800c330:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c334:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800c338:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800c33c:	6811      	ldr	r1, [r2, #0]
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800c344:	430a      	orrs	r2, r1
 800c346:	601a      	str	r2, [r3, #0]
}
 800c348:	f107 070c 	add.w	r7, r7, #12
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bc80      	pop	{r7}
 800c350:	4770      	bx	lr
 800c352:	bf00      	nop

0800c354 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800c354:	b480      	push	{r7}
 800c356:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c358:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c35c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c360:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c364:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c368:	6812      	ldr	r2, [r2, #0]
 800c36a:	f042 0201 	orr.w	r2, r2, #1
 800c36e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c370:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c378:	f04f 0200 	mov.w	r2, #0
 800c37c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c37e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c382:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c386:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c38a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c38e:	6812      	ldr	r2, [r2, #0]
 800c390:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800c394:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c398:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c39a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c39e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3a2:	f243 0210 	movw	r2, #12304	; 0x3010
 800c3a6:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800c3aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c3ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3b4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c3b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c3bc:	6812      	ldr	r2, [r2, #0]
 800c3be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c3c2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c3c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3cc:	f04f 0200 	mov.w	r2, #0
 800c3d0:	60da      	str	r2, [r3, #12]
}
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bc80      	pop	{r7}
 800c3d6:	4770      	bx	lr

0800c3d8 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800c3d8:	b480      	push	{r7}
 800c3da:	b083      	sub	sp, #12
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	4603      	mov	r3, r0
 800c3e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800c3e2:	f643 0302 	movw	r3, #14338	; 0x3802
 800c3e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3ea:	f04f 0200 	mov.w	r2, #0
 800c3ee:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800c3f0:	f643 0302 	movw	r3, #14338	; 0x3802
 800c3f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3f8:	79fa      	ldrb	r2, [r7, #7]
 800c3fa:	701a      	strb	r2, [r3, #0]
}
 800c3fc:	f107 070c 	add.w	r7, r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	bc80      	pop	{r7}
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop

0800c408 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800c40e:	f04f 0300 	mov.w	r3, #0
 800c412:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800c414:	f04f 0300 	mov.w	r3, #0
 800c418:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800c41a:	f04f 0300 	mov.w	r3, #0
 800c41e:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800c420:	f04f 0031 	mov.w	r0, #49	; 0x31
 800c424:	f000 fdd2 	bl	800cfcc <RCC_GetFlagStatus>
 800c428:	4603      	mov	r3, r0
 800c42a:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	f103 0301 	add.w	r3, r3, #1
 800c432:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800c43a:	d002      	beq.n	800c442 <RCC_WaitForHSEStartUp+0x3a>
 800c43c:	79bb      	ldrb	r3, [r7, #6]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0ee      	beq.n	800c420 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800c442:	f04f 0031 	mov.w	r0, #49	; 0x31
 800c446:	f000 fdc1 	bl	800cfcc <RCC_GetFlagStatus>
 800c44a:	4603      	mov	r3, r0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d003      	beq.n	800c458 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 800c450:	f04f 0301 	mov.w	r3, #1
 800c454:	71fb      	strb	r3, [r7, #7]
 800c456:	e002      	b.n	800c45e <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 800c458:	f04f 0300 	mov.w	r3, #0
 800c45c:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800c45e:	79fb      	ldrb	r3, [r7, #7]
}
 800c460:	4618      	mov	r0, r3
 800c462:	f107 0708 	add.w	r7, r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop

0800c46c <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b085      	sub	sp, #20
 800c470:	af00      	add	r7, sp, #0
 800c472:	4603      	mov	r3, r0
 800c474:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800c476:	f04f 0300 	mov.w	r3, #0
 800c47a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800c47c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c480:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	4313      	orrs	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800c49c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c4a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c4a4:	68fa      	ldr	r2, [r7, #12]
 800c4a6:	601a      	str	r2, [r3, #0]
}
 800c4a8:	f107 0714 	add.w	r7, r7, #20
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bc80      	pop	{r7}
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop

0800c4b4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800c4be:	f04f 0300 	mov.w	r3, #0
 800c4c2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c4c6:	79fa      	ldrb	r2, [r7, #7]
 800c4c8:	601a      	str	r2, [r3, #0]
}
 800c4ca:	f107 070c 	add.w	r7, r7, #12
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bc80      	pop	{r7}
 800c4d2:	4770      	bx	lr

0800c4d4 <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b083      	sub	sp, #12
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800c4de:	f643 0370 	movw	r3, #14448	; 0x3870
 800c4e2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c4e6:	f04f 0200 	mov.w	r2, #0
 800c4ea:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800c4ec:	f643 0370 	movw	r3, #14448	; 0x3870
 800c4f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c4f4:	f04f 0200 	mov.w	r2, #0
 800c4f8:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d002      	beq.n	800c506 <RCC_LSEConfig+0x32>
 800c500:	2b04      	cmp	r3, #4
 800c502:	d008      	beq.n	800c516 <RCC_LSEConfig+0x42>
 800c504:	e00f      	b.n	800c526 <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800c506:	f643 0370 	movw	r3, #14448	; 0x3870
 800c50a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c50e:	f04f 0201 	mov.w	r2, #1
 800c512:	701a      	strb	r2, [r3, #0]
      break;
 800c514:	e008      	b.n	800c528 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800c516:	f643 0370 	movw	r3, #14448	; 0x3870
 800c51a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c51e:	f04f 0205 	mov.w	r2, #5
 800c522:	701a      	strb	r2, [r3, #0]
      break;
 800c524:	e000      	b.n	800c528 <RCC_LSEConfig+0x54>
    default:
      break;
 800c526:	bf00      	nop
  }
}
 800c528:	f107 070c 	add.w	r7, r7, #12
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bc80      	pop	{r7}
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop

0800c534 <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800c53e:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800c542:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c546:	79fa      	ldrb	r2, [r7, #7]
 800c548:	601a      	str	r2, [r3, #0]
}
 800c54a:	f107 070c 	add.w	r7, r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	bc80      	pop	{r7}
 800c552:	4770      	bx	lr

0800c554 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	60f8      	str	r0, [r7, #12]
 800c55c:	60b9      	str	r1, [r7, #8]
 800c55e:	607a      	str	r2, [r7, #4]
 800c560:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800c562:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c566:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800c570:	68ba      	ldr	r2, [r7, #8]
 800c572:	4311      	orrs	r1, r2
 800c574:	683a      	ldr	r2, [r7, #0]
 800c576:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c57a:	f102 32ff 	add.w	r2, r2, #4294967295
 800c57e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800c582:	4311      	orrs	r1, r2
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800c588:	69ba      	ldr	r2, [r7, #24]
 800c58a:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800c58e:	430a      	orrs	r2, r1
 800c590:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800c592:	f107 0714 	add.w	r7, r7, #20
 800c596:	46bd      	mov	sp, r7
 800c598:	bc80      	pop	{r7}
 800c59a:	4770      	bx	lr

0800c59c <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800c5a6:	f04f 0360 	mov.w	r3, #96	; 0x60
 800c5aa:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c5ae:	79fa      	ldrb	r2, [r7, #7]
 800c5b0:	601a      	str	r2, [r3, #0]
}
 800c5b2:	f107 070c 	add.w	r7, r7, #12
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bc80      	pop	{r7}
 800c5ba:	4770      	bx	lr

0800c5bc <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800c5c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	ea4f 7202 	mov.w	r2, r2, lsl #28
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800c5e0:	f107 070c 	add.w	r7, r7, #12
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bc80      	pop	{r7}
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop

0800c5ec <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800c5ec:	b480      	push	{r7}
 800c5ee:	b083      	sub	sp, #12
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800c5f6:	f04f 0368 	mov.w	r3, #104	; 0x68
 800c5fa:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c5fe:	79fa      	ldrb	r2, [r7, #7]
 800c600:	601a      	str	r2, [r3, #0]
}
 800c602:	f107 070c 	add.w	r7, r7, #12
 800c606:	46bd      	mov	sp, r7
 800c608:	bc80      	pop	{r7}
 800c60a:	4770      	bx	lr

0800c60c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b083      	sub	sp, #12
 800c610:	af00      	add	r7, sp, #0
 800c612:	4603      	mov	r3, r0
 800c614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800c616:	f04f 034c 	mov.w	r3, #76	; 0x4c
 800c61a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c61e:	79fa      	ldrb	r2, [r7, #7]
 800c620:	601a      	str	r2, [r3, #0]
}
 800c622:	f107 070c 	add.w	r7, r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	bc80      	pop	{r7}
 800c62a:	4770      	bx	lr

0800c62c <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c636:	f04f 0300 	mov.w	r3, #0
 800c63a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800c63c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c640:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800c64e:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800c650:	687a      	ldr	r2, [r7, #4]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	4313      	orrs	r3, r2
 800c656:	68fa      	ldr	r2, [r7, #12]
 800c658:	4313      	orrs	r3, r2
 800c65a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800c65c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c660:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	609a      	str	r2, [r3, #8]
}
 800c668:	f107 0714 	add.w	r7, r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bc80      	pop	{r7}
 800c670:	4770      	bx	lr
 800c672:	bf00      	nop

0800c674 <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c67e:	f04f 0300 	mov.w	r3, #0
 800c682:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800c684:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c688:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c68c:	689b      	ldr	r3, [r3, #8]
 800c68e:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800c696:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800c698:	687a      	ldr	r2, [r7, #4]
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	68fa      	ldr	r2, [r7, #12]
 800c6a0:	4313      	orrs	r3, r2
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800c6a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c6a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	609a      	str	r2, [r3, #8]
}
 800c6b0:	f107 0714 	add.w	r7, r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bc80      	pop	{r7}
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop

0800c6bc <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b085      	sub	sp, #20
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c6c4:	f04f 0300 	mov.w	r3, #0
 800c6c8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800c6ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c6ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c6d2:	689b      	ldr	r3, [r3, #8]
 800c6d4:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f023 0303 	bic.w	r3, r3, #3
 800c6dc:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800c6de:	68fa      	ldr	r2, [r7, #12]
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800c6e6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c6ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	609a      	str	r2, [r3, #8]
}
 800c6f2:	f107 0714 	add.w	r7, r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bc80      	pop	{r7}
 800c6fa:	4770      	bx	lr

0800c6fc <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800c700:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c704:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c708:	689b      	ldr	r3, [r3, #8]
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	f003 030c 	and.w	r3, r3, #12
 800c710:	b2db      	uxtb	r3, r3
}
 800c712:	4618      	mov	r0, r3
 800c714:	46bd      	mov	sp, r7
 800c716:	bc80      	pop	{r7}
 800c718:	4770      	bx	lr
 800c71a:	bf00      	nop

0800c71c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b085      	sub	sp, #20
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c724:	f04f 0300 	mov.w	r3, #0
 800c728:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800c72a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c72e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c732:	689b      	ldr	r3, [r3, #8]
 800c734:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c73c:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800c746:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c74a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c74e:	68fa      	ldr	r2, [r7, #12]
 800c750:	609a      	str	r2, [r3, #8]
}
 800c752:	f107 0714 	add.w	r7, r7, #20
 800c756:	46bd      	mov	sp, r7
 800c758:	bc80      	pop	{r7}
 800c75a:	4770      	bx	lr

0800c75c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c764:	f04f 0300 	mov.w	r3, #0
 800c768:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800c76a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c76e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c772:	689b      	ldr	r3, [r3, #8]
 800c774:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800c77c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800c77e:	68fa      	ldr	r2, [r7, #12]
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4313      	orrs	r3, r2
 800c784:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800c786:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c78a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c78e:	68fa      	ldr	r2, [r7, #12]
 800c790:	609a      	str	r2, [r3, #8]
}
 800c792:	f107 0714 	add.w	r7, r7, #20
 800c796:	46bd      	mov	sp, r7
 800c798:	bc80      	pop	{r7}
 800c79a:	4770      	bx	lr

0800c79c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c7a4:	f04f 0300 	mov.w	r3, #0
 800c7a8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800c7aa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c7ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c7bc:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800c7ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c7ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c7d2:	68fa      	ldr	r2, [r7, #12]
 800c7d4:	609a      	str	r2, [r3, #8]
}
 800c7d6:	f107 0714 	add.w	r7, r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bc80      	pop	{r7}
 800c7de:	4770      	bx	lr

0800c7e0 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b089      	sub	sp, #36	; 0x24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800c7e8:	f04f 0300 	mov.w	r3, #0
 800c7ec:	61bb      	str	r3, [r7, #24]
 800c7ee:	f04f 0300 	mov.w	r3, #0
 800c7f2:	617b      	str	r3, [r7, #20]
 800c7f4:	f04f 0300 	mov.w	r3, #0
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	f04f 0302 	mov.w	r3, #2
 800c7fe:	613b      	str	r3, [r7, #16]
 800c800:	f04f 0300 	mov.w	r3, #0
 800c804:	60fb      	str	r3, [r7, #12]
 800c806:	f04f 0302 	mov.w	r3, #2
 800c80a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800c80c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c810:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f003 030c 	and.w	r3, r3, #12
 800c81a:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	2b04      	cmp	r3, #4
 800c820:	d00a      	beq.n	800c838 <RCC_GetClocksFreq+0x58>
 800c822:	2b08      	cmp	r3, #8
 800c824:	d00f      	beq.n	800c846 <RCC_GetClocksFreq+0x66>
 800c826:	2b00      	cmp	r3, #0
 800c828:	d160      	bne.n	800c8ec <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c830:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800c834:	6013      	str	r3, [r2, #0]
      break;
 800c836:	e060      	b.n	800c8fa <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800c83e:	f2c0 037a 	movt	r3, #122	; 0x7a
 800c842:	6013      	str	r3, [r2, #0]
      break;
 800c844:	e059      	b.n	800c8fa <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800c846:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c84a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c854:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800c858:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c85a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c85e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c868:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d014      	beq.n	800c89a <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800c870:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800c874:	f2c0 037a 	movt	r3, #122	; 0x7a
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c87e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c882:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c886:	6859      	ldr	r1, [r3, #4]
 800c888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c88c:	400b      	ands	r3, r1
 800c88e:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c892:	fb03 f302 	mul.w	r3, r3, r2
 800c896:	61fb      	str	r3, [r7, #28]
 800c898:	e013      	b.n	800c8c2 <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800c89a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c89e:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800c8a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c8ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c8b0:	6859      	ldr	r1, [r3, #4]
 800c8b2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c8b6:	400b      	ands	r3, r1
 800c8b8:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c8bc:	fb03 f302 	mul.w	r3, r3, r2
 800c8c0:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800c8c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c8c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8d0:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c8d4:	f103 0301 	add.w	r3, r3, #1
 800c8d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c8dc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800c8de:	69fa      	ldr	r2, [r7, #28]
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	fbb2 f2f3 	udiv	r2, r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	601a      	str	r2, [r3, #0]
      break;
 800c8ea:	e006      	b.n	800c8fa <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c8f2:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800c8f6:	6013      	str	r3, [r2, #0]
      break;
 800c8f8:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800c8fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c8fe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c908:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c910:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800c912:	f240 234c 	movw	r3, #588	; 0x24c
 800c916:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c91a:	69ba      	ldr	r2, [r7, #24]
 800c91c:	189b      	adds	r3, r3, r2
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	b2db      	uxtb	r3, r3
 800c922:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681a      	ldr	r2, [r3, #0]
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	fa22 f203 	lsr.w	r2, r2, r3
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800c932:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c936:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800c940:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800c948:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800c94a:	f240 234c 	movw	r3, #588	; 0x24c
 800c94e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c952:	69ba      	ldr	r2, [r7, #24]
 800c954:	189b      	adds	r3, r3, r2
 800c956:	781b      	ldrb	r3, [r3, #0]
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	fa22 f203 	lsr.w	r2, r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800c96a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c96e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c978:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800c980:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800c982:	f240 234c 	movw	r3, #588	; 0x24c
 800c986:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c98a:	69ba      	ldr	r2, [r7, #24]
 800c98c:	189b      	adds	r3, r3, r2
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	b2db      	uxtb	r3, r3
 800c992:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	685a      	ldr	r2, [r3, #4]
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	fa22 f203 	lsr.w	r2, r2, r3
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	60da      	str	r2, [r3, #12]
}
 800c9a2:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bc80      	pop	{r7}
 800c9aa:	4770      	bx	lr

0800c9ac <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c9b4:	f04f 0300 	mov.w	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c9c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9c4:	d117      	bne.n	800c9f6 <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800c9c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c9ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c9ce:	689b      	ldr	r3, [r3, #8]
 800c9d0:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c9d8:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c9e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c9e4:	68fa      	ldr	r2, [r7, #12]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800c9ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c9ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800c9f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c9fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c9fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ca02:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ca06:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800ca0e:	ea4f 5212 	mov.w	r2, r2, lsr #20
 800ca12:	430a      	orrs	r2, r1
 800ca14:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ca16:	f107 0714 	add.w	r7, r7, #20
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bc80      	pop	{r7}
 800ca1e:	4770      	bx	lr

0800ca20 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b083      	sub	sp, #12
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800ca2a:	f640 633c 	movw	r3, #3644	; 0xe3c
 800ca2e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800ca32:	79fa      	ldrb	r2, [r7, #7]
 800ca34:	601a      	str	r2, [r3, #0]
}
 800ca36:	f107 070c 	add.w	r7, r7, #12
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bc80      	pop	{r7}
 800ca3e:	4770      	bx	lr

0800ca40 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	4603      	mov	r3, r0
 800ca48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800ca4a:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800ca4e:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800ca52:	79fa      	ldrb	r2, [r7, #7]
 800ca54:	601a      	str	r2, [r3, #0]
}
 800ca56:	f107 070c 	add.w	r7, r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bc80      	pop	{r7}
 800ca5e:	4770      	bx	lr

0800ca60 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800ca68:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800ca6c:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	601a      	str	r2, [r3, #0]
}
 800ca74:	f107 070c 	add.w	r7, r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bc80      	pop	{r7}
 800ca7c:	4770      	bx	lr
 800ca7e:	bf00      	nop

0800ca80 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ca8c:	78fb      	ldrb	r3, [r7, #3]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d00c      	beq.n	800caac <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800ca92:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ca96:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ca9a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ca9e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800caa2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	631a      	str	r2, [r3, #48]	; 0x30
 800caaa:	e00d      	b.n	800cac8 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800caac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cab0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cab4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cab8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cabc:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	ea6f 0202 	mvn.w	r2, r2
 800cac4:	400a      	ands	r2, r1
 800cac6:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800cac8:	f107 070c 	add.w	r7, r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	bc80      	pop	{r7}
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop

0800cad4 <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	460b      	mov	r3, r1
 800cade:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00c      	beq.n	800cb00 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800cae6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800caea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800caee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800caf2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800caf6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	430a      	orrs	r2, r1
 800cafc:	635a      	str	r2, [r3, #52]	; 0x34
 800cafe:	e00d      	b.n	800cb1c <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800cb00:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb04:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb08:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cb0c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb10:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800cb12:	687a      	ldr	r2, [r7, #4]
 800cb14:	ea6f 0202 	mvn.w	r2, r2
 800cb18:	400a      	ands	r2, r1
 800cb1a:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800cb1c:	f107 070c 	add.w	r7, r7, #12
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bc80      	pop	{r7}
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop

0800cb28 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b083      	sub	sp, #12
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	460b      	mov	r3, r1
 800cb32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cb34:	78fb      	ldrb	r3, [r7, #3]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00c      	beq.n	800cb54 <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800cb3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb42:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cb46:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb4a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	430a      	orrs	r2, r1
 800cb50:	639a      	str	r2, [r3, #56]	; 0x38
 800cb52:	e00d      	b.n	800cb70 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800cb54:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb5c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cb60:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb64:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	ea6f 0202 	mvn.w	r2, r2
 800cb6c:	400a      	ands	r2, r1
 800cb6e:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800cb70:	f107 070c 	add.w	r7, r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bc80      	pop	{r7}
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop

0800cb7c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	460b      	mov	r3, r1
 800cb86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cb88:	78fb      	ldrb	r3, [r7, #3]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00c      	beq.n	800cba8 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800cb8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cb96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cb9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cb9e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	430a      	orrs	r2, r1
 800cba4:	641a      	str	r2, [r3, #64]	; 0x40
 800cba6:	e00d      	b.n	800cbc4 <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800cba8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cbac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbb0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cbb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbb8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	ea6f 0202 	mvn.w	r2, r2
 800cbc0:	400a      	ands	r2, r1
 800cbc2:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800cbc4:	f107 070c 	add.w	r7, r7, #12
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bc80      	pop	{r7}
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop

0800cbd0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b083      	sub	sp, #12
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
 800cbd8:	460b      	mov	r3, r1
 800cbda:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cbdc:	78fb      	ldrb	r3, [r7, #3]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d00c      	beq.n	800cbfc <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800cbe2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cbe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cbea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cbee:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cbf2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	645a      	str	r2, [r3, #68]	; 0x44
 800cbfa:	e00d      	b.n	800cc18 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800cbfc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc04:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cc08:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cc0c:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	ea6f 0202 	mvn.w	r2, r2
 800cc14:	400a      	ands	r2, r1
 800cc16:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800cc18:	f107 070c 	add.w	r7, r7, #12
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bc80      	pop	{r7}
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop

0800cc24 <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b083      	sub	sp, #12
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d00c      	beq.n	800cc50 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800cc36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc3a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc3e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cc42:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cc46:	6911      	ldr	r1, [r2, #16]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	430a      	orrs	r2, r1
 800cc4c:	611a      	str	r2, [r3, #16]
 800cc4e:	e00d      	b.n	800cc6c <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800cc50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc58:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cc5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cc60:	6911      	ldr	r1, [r2, #16]
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	ea6f 0202 	mvn.w	r2, r2
 800cc68:	400a      	ands	r2, r1
 800cc6a:	611a      	str	r2, [r3, #16]
  }
}
 800cc6c:	f107 070c 	add.w	r7, r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bc80      	pop	{r7}
 800cc74:	4770      	bx	lr
 800cc76:	bf00      	nop

0800cc78 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d00c      	beq.n	800cca4 <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800cc8a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc8e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cc92:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cc96:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cc9a:	6951      	ldr	r1, [r2, #20]
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	615a      	str	r2, [r3, #20]
 800cca2:	e00d      	b.n	800ccc0 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800cca4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cca8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ccac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ccb0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ccb4:	6951      	ldr	r1, [r2, #20]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	ea6f 0202 	mvn.w	r2, r2
 800ccbc:	400a      	ands	r2, r1
 800ccbe:	615a      	str	r2, [r3, #20]
  }
}
 800ccc0:	f107 070c 	add.w	r7, r7, #12
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bc80      	pop	{r7}
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop

0800cccc <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b083      	sub	sp, #12
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	460b      	mov	r3, r1
 800ccd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800ccd8:	78fb      	ldrb	r3, [r7, #3]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d00c      	beq.n	800ccf8 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800ccde:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cce2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cce6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ccea:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ccee:	6991      	ldr	r1, [r2, #24]
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	619a      	str	r2, [r3, #24]
 800ccf6:	e00d      	b.n	800cd14 <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800ccf8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ccfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cd00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cd04:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cd08:	6991      	ldr	r1, [r2, #24]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	ea6f 0202 	mvn.w	r2, r2
 800cd10:	400a      	ands	r2, r1
 800cd12:	619a      	str	r2, [r3, #24]
  }
}
 800cd14:	f107 070c 	add.w	r7, r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bc80      	pop	{r7}
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop

0800cd20 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cd2c:	78fb      	ldrb	r3, [r7, #3]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00c      	beq.n	800cd4c <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800cd32:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cd36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cd3a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cd3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cd42:	6a11      	ldr	r1, [r2, #32]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	430a      	orrs	r2, r1
 800cd48:	621a      	str	r2, [r3, #32]
 800cd4a:	e00d      	b.n	800cd68 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800cd4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cd50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cd54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cd58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cd5c:	6a11      	ldr	r1, [r2, #32]
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	ea6f 0202 	mvn.w	r2, r2
 800cd64:	400a      	ands	r2, r1
 800cd66:	621a      	str	r2, [r3, #32]
  }
}
 800cd68:	f107 070c 	add.w	r7, r7, #12
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bc80      	pop	{r7}
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop

0800cd74 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cd80:	78fb      	ldrb	r3, [r7, #3]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d00c      	beq.n	800cda0 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800cd86:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cd8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cd8e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cd92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cd96:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	430a      	orrs	r2, r1
 800cd9c:	625a      	str	r2, [r3, #36]	; 0x24
 800cd9e:	e00d      	b.n	800cdbc <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800cda0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cda4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cda8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cdac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cdb0:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	ea6f 0202 	mvn.w	r2, r2
 800cdb8:	400a      	ands	r2, r1
 800cdba:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cdbc:	f107 070c 	add.w	r7, r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bc80      	pop	{r7}
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop

0800cdc8 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
 800cdd0:	460b      	mov	r3, r1
 800cdd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cdd4:	78fb      	ldrb	r3, [r7, #3]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800cdda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cdde:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cde2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cde6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cdea:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	430a      	orrs	r2, r1
 800cdf0:	651a      	str	r2, [r3, #80]	; 0x50
 800cdf2:	e00d      	b.n	800ce10 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800cdf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cdf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cdfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ce00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ce04:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	ea6f 0202 	mvn.w	r2, r2
 800ce0c:	400a      	ands	r2, r1
 800ce0e:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800ce10:	f107 070c 	add.w	r7, r7, #12
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bc80      	pop	{r7}
 800ce18:	4770      	bx	lr
 800ce1a:	bf00      	nop

0800ce1c <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b083      	sub	sp, #12
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	460b      	mov	r3, r1
 800ce26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ce28:	78fb      	ldrb	r3, [r7, #3]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00c      	beq.n	800ce48 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800ce2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ce32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ce36:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ce3a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ce3e:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	430a      	orrs	r2, r1
 800ce44:	655a      	str	r2, [r3, #84]	; 0x54
 800ce46:	e00d      	b.n	800ce64 <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800ce48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ce4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ce50:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ce54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ce58:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	ea6f 0202 	mvn.w	r2, r2
 800ce60:	400a      	ands	r2, r1
 800ce62:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800ce64:	f107 070c 	add.w	r7, r7, #12
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bc80      	pop	{r7}
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop

0800ce70 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800ce70:	b480      	push	{r7}
 800ce72:	b083      	sub	sp, #12
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ce7c:	78fb      	ldrb	r3, [r7, #3]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00c      	beq.n	800ce9c <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800ce82:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ce86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ce8a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800ce8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ce92:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	430a      	orrs	r2, r1
 800ce98:	659a      	str	r2, [r3, #88]	; 0x58
 800ce9a:	e00d      	b.n	800ceb8 <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800ce9c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cea0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cea4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cea8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800ceac:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	ea6f 0202 	mvn.w	r2, r2
 800ceb4:	400a      	ands	r2, r1
 800ceb6:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800ceb8:	f107 070c 	add.w	r7, r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bc80      	pop	{r7}
 800cec0:	4770      	bx	lr
 800cec2:	bf00      	nop

0800cec4 <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	460b      	mov	r3, r1
 800cece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800ced0:	78fb      	ldrb	r3, [r7, #3]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d00c      	beq.n	800cef0 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800ced6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ceda:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cede:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cee2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cee6:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	430a      	orrs	r2, r1
 800ceec:	661a      	str	r2, [r3, #96]	; 0x60
 800ceee:	e00d      	b.n	800cf0c <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800cef0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cef4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cef8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cefc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cf00:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800cf02:	687a      	ldr	r2, [r7, #4]
 800cf04:	ea6f 0202 	mvn.w	r2, r2
 800cf08:	400a      	ands	r2, r1
 800cf0a:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800cf0c:	f107 070c 	add.w	r7, r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bc80      	pop	{r7}
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop

0800cf18 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
 800cf20:	460b      	mov	r3, r1
 800cf22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cf24:	78fb      	ldrb	r3, [r7, #3]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00c      	beq.n	800cf44 <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800cf2a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cf2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cf32:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cf36:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cf3a:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	430a      	orrs	r2, r1
 800cf40:	665a      	str	r2, [r3, #100]	; 0x64
 800cf42:	e00d      	b.n	800cf60 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800cf44:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cf48:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cf4c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cf50:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cf54:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	ea6f 0202 	mvn.w	r2, r2
 800cf5c:	400a      	ands	r2, r1
 800cf5e:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800cf60:	f107 070c 	add.w	r7, r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bc80      	pop	{r7}
 800cf68:	4770      	bx	lr
 800cf6a:	bf00      	nop

0800cf6c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4602      	mov	r2, r0
 800cf74:	460b      	mov	r3, r1
 800cf76:	71fa      	strb	r2, [r7, #7]
 800cf78:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800cf7a:	79bb      	ldrb	r3, [r7, #6]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d00e      	beq.n	800cf9e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800cf80:	f643 030d 	movw	r3, #14349	; 0x380d
 800cf84:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cf88:	f643 020d 	movw	r2, #14349	; 0x380d
 800cf8c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cf90:	7812      	ldrb	r2, [r2, #0]
 800cf92:	b2d1      	uxtb	r1, r2
 800cf94:	79fa      	ldrb	r2, [r7, #7]
 800cf96:	430a      	orrs	r2, r1
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	e010      	b.n	800cfc0 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800cf9e:	f643 030d 	movw	r3, #14349	; 0x380d
 800cfa2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800cfa6:	f643 020d 	movw	r2, #14349	; 0x380d
 800cfaa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800cfae:	7812      	ldrb	r2, [r2, #0]
 800cfb0:	b2d1      	uxtb	r1, r2
 800cfb2:	79fa      	ldrb	r2, [r7, #7]
 800cfb4:	ea6f 0202 	mvn.w	r2, r2
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	400a      	ands	r2, r1
 800cfbc:	b2d2      	uxtb	r2, r2
 800cfbe:	701a      	strb	r2, [r3, #0]
  }
}
 800cfc0:	f107 070c 	add.w	r7, r7, #12
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bc80      	pop	{r7}
 800cfc8:	4770      	bx	lr
 800cfca:	bf00      	nop

0800cfcc <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b087      	sub	sp, #28
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800cfd6:	f04f 0300 	mov.w	r3, #0
 800cfda:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800cfdc:	f04f 0300 	mov.w	r3, #0
 800cfe0:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800cfe2:	f04f 0300 	mov.w	r3, #0
 800cfe6:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
 800cfea:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800cfee:	b2db      	uxtb	r3, r3
 800cff0:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2b01      	cmp	r3, #1
 800cff6:	d106      	bne.n	800d006 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800cff8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cffc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	617b      	str	r3, [r7, #20]
 800d004:	e00f      	b.n	800d026 <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	2b02      	cmp	r3, #2
 800d00a:	d106      	bne.n	800d01a <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800d00c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d010:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800d014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d016:	617b      	str	r3, [r7, #20]
 800d018:	e005      	b.n	800d026 <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800d01a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d01e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800d022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d024:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800d026:	79fb      	ldrb	r3, [r7, #7]
 800d028:	f003 031f 	and.w	r3, r3, #31
 800d02c:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	fa22 f303 	lsr.w	r3, r2, r3
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	b2db      	uxtb	r3, r3
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d003      	beq.n	800d048 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 800d040:	f04f 0301 	mov.w	r3, #1
 800d044:	74fb      	strb	r3, [r7, #19]
 800d046:	e002      	b.n	800d04e <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 800d048:	f04f 0300 	mov.w	r3, #0
 800d04c:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800d04e:	7cfb      	ldrb	r3, [r7, #19]
}
 800d050:	4618      	mov	r0, r3
 800d052:	f107 071c 	add.w	r7, r7, #28
 800d056:	46bd      	mov	sp, r7
 800d058:	bc80      	pop	{r7}
 800d05a:	4770      	bx	lr

0800d05c <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800d060:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d064:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800d068:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800d06c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800d070:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800d072:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800d076:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d078:	46bd      	mov	sp, r7
 800d07a:	bc80      	pop	{r7}
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop

0800d080 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800d080:	b480      	push	{r7}
 800d082:	b085      	sub	sp, #20
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800d08a:	f04f 0300 	mov.w	r3, #0
 800d08e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800d090:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d094:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800d098:	68da      	ldr	r2, [r3, #12]
 800d09a:	79fb      	ldrb	r3, [r7, #7]
 800d09c:	4013      	ands	r3, r2
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d003      	beq.n	800d0aa <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800d0a2:	f04f 0301 	mov.w	r3, #1
 800d0a6:	73fb      	strb	r3, [r7, #15]
 800d0a8:	e002      	b.n	800d0b0 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800d0aa:	f04f 0300 	mov.w	r3, #0
 800d0ae:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f107 0714 	add.w	r7, r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bc80      	pop	{r7}
 800d0bc:	4770      	bx	lr
 800d0be:	bf00      	nop

0800d0c0 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800d0ca:	f643 030e 	movw	r3, #14350	; 0x380e
 800d0ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800d0d2:	79fa      	ldrb	r2, [r7, #7]
 800d0d4:	701a      	strb	r2, [r3, #0]
}
 800d0d6:	f107 070c 	add.w	r7, r7, #12
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bc80      	pop	{r7}
 800d0de:	4770      	bx	lr

0800d0e0 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800d0e4:	f04f 0040 	mov.w	r0, #64	; 0x40
 800d0e8:	f04f 0101 	mov.w	r1, #1
 800d0ec:	f7ff fdc4 	bl	800cc78 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800d0f0:	f04f 0040 	mov.w	r0, #64	; 0x40
 800d0f4:	f04f 0100 	mov.w	r1, #0
 800d0f8:	f7ff fdbe 	bl	800cc78 <RCC_AHB2PeriphResetCmd>
}
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop

0800d100 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800d100:	b480      	push	{r7}
 800d102:	b083      	sub	sp, #12
 800d104:	af00      	add	r7, sp, #0
 800d106:	4603      	mov	r3, r0
 800d108:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d00c      	beq.n	800d12a <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800d110:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d114:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d11c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800d120:	6812      	ldr	r2, [r2, #0]
 800d122:	f042 0204 	orr.w	r2, r2, #4
 800d126:	601a      	str	r2, [r3, #0]
 800d128:	e00b      	b.n	800d142 <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800d12a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d12e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d132:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d136:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800d13a:	6812      	ldr	r2, [r2, #0]
 800d13c:	f022 0204 	bic.w	r2, r2, #4
 800d140:	601a      	str	r2, [r3, #0]
  }
}
 800d142:	f107 070c 	add.w	r7, r7, #12
 800d146:	46bd      	mov	sp, r7
 800d148:	bc80      	pop	{r7}
 800d14a:	4770      	bx	lr

0800d14c <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800d14c:	b480      	push	{r7}
 800d14e:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800d150:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d154:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d158:	689b      	ldr	r3, [r3, #8]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bc80      	pop	{r7}
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop

0800d164 <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	4603      	mov	r3, r0
 800d16c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d16e:	79fb      	ldrb	r3, [r7, #7]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00c      	beq.n	800d18e <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800d174:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d178:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d17c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d180:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800d184:	6812      	ldr	r2, [r2, #0]
 800d186:	f042 0208 	orr.w	r2, r2, #8
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	e00b      	b.n	800d1a6 <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 800d18e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d192:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d196:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d19a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800d19e:	6812      	ldr	r2, [r2, #0]
 800d1a0:	f022 0208 	bic.w	r2, r2, #8
 800d1a4:	601a      	str	r2, [r3, #0]
  }
}
 800d1a6:	f107 070c 	add.w	r7, r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bc80      	pop	{r7}
 800d1ae:	4770      	bx	lr

0800d1b0 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b085      	sub	sp, #20
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800d1ba:	f04f 0300 	mov.w	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800d1c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1c4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d1c8:	685a      	ldr	r2, [r3, #4]
 800d1ca:	79fb      	ldrb	r3, [r7, #7]
 800d1cc:	4013      	ands	r3, r2
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d003      	beq.n	800d1da <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800d1d2:	f04f 0301 	mov.w	r3, #1
 800d1d6:	73fb      	strb	r3, [r7, #15]
 800d1d8:	e002      	b.n	800d1e0 <RNG_GetFlagStatus+0x30>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800d1da:	f04f 0300 	mov.w	r3, #0
 800d1de:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	f107 0714 	add.w	r7, r7, #20
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	bc80      	pop	{r7}
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop

0800d1f0 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800d1fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d1fe:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d202:	79fa      	ldrb	r2, [r7, #7]
 800d204:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800d208:	ea6f 0202 	mvn.w	r2, r2
 800d20c:	605a      	str	r2, [r3, #4]
}
 800d20e:	f107 070c 	add.w	r7, r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	bc80      	pop	{r7}
 800d216:	4770      	bx	lr

0800d218 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800d222:	f04f 0300 	mov.w	r3, #0
 800d226:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800d228:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d22c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d230:	685a      	ldr	r2, [r3, #4]
 800d232:	79fb      	ldrb	r3, [r7, #7]
 800d234:	4013      	ands	r3, r2
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800d23a:	f04f 0301 	mov.w	r3, #1
 800d23e:	73fb      	strb	r3, [r7, #15]
 800d240:	e002      	b.n	800d248 <RNG_GetITStatus+0x30>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800d242:	f04f 0300 	mov.w	r3, #0
 800d246:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800d248:	7bfb      	ldrb	r3, [r7, #15]
}
 800d24a:	4618      	mov	r0, r3
 800d24c:	f107 0714 	add.w	r7, r7, #20
 800d250:	46bd      	mov	sp, r7
 800d252:	bc80      	pop	{r7}
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop

0800d258 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	4603      	mov	r3, r0
 800d260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800d262:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d266:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800d26a:	79fa      	ldrb	r2, [r7, #7]
 800d26c:	ea6f 0202 	mvn.w	r2, r2
 800d270:	b2d2      	uxtb	r2, r2
 800d272:	605a      	str	r2, [r3, #4]
}
 800d274:	f107 070c 	add.w	r7, r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	bc80      	pop	{r7}
 800d27c:	4770      	bx	lr
 800d27e:	bf00      	nop

0800d280 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800d286:	f04f 0300 	mov.w	r3, #0
 800d28a:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800d28c:	f04f 0300 	mov.w	r3, #0
 800d290:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800d292:	f04f 0300 	mov.w	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d298:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d29c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2a0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d2a4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d2a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2ae:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d2b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d2b4:	f000 f934 	bl	800d520 <RTC_EnterInitMode>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d103      	bne.n	800d2c6 <RTC_DeInit+0x46>
  {
    status = ERROR;
 800d2be:	f04f 0300 	mov.w	r3, #0
 800d2c2:	73fb      	strb	r3, [r7, #15]
 800d2c4:	e084      	b.n	800d3d0 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800d2c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2ce:	f04f 0200 	mov.w	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800d2d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2dc:	f242 1201 	movw	r2, #8449	; 0x2101
 800d2e0:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800d2e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d2ea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d2ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d2f2:	6892      	ldr	r2, [r2, #8]
 800d2f4:	f002 0207 	and.w	r2, r2, #7
 800d2f8:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800d2fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d2fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	f003 0304 	and.w	r3, r3, #4
 800d308:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f103 0301 	add.w	r3, r3, #1
 800d310:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d318:	d002      	beq.n	800d320 <RTC_DeInit+0xa0>
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d0ec      	beq.n	800d2fa <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800d320:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d324:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d328:	68db      	ldr	r3, [r3, #12]
 800d32a:	f003 0304 	and.w	r3, r3, #4
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d103      	bne.n	800d33a <RTC_DeInit+0xba>
    {
      status = ERROR;
 800d332:	f04f 0300 	mov.w	r3, #0
 800d336:	73fb      	strb	r3, [r7, #15]
 800d338:	e04a      	b.n	800d3d0 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800d33a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d33e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d342:	689b      	ldr	r3, [r3, #8]
 800d344:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d348:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d34c:	f04f 0200 	mov.w	r2, #0
 800d350:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800d352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d356:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d35a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d35e:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800d360:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d364:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d368:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d36c:	f2c0 027f 	movt	r2, #127	; 0x7f
 800d370:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800d372:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d376:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d37a:	f04f 0200 	mov.w	r2, #0
 800d37e:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800d380:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d384:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d388:	f04f 0200 	mov.w	r2, #0
 800d38c:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800d38e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d392:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d396:	f04f 0200 	mov.w	r2, #0
 800d39a:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800d39c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3a4:	f04f 0200 	mov.w	r2, #0
 800d3a8:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800d3aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3b2:	f04f 0200 	mov.w	r2, #0
 800d3b6:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800d3b8:	f000 f90e 	bl	800d5d8 <RTC_WaitForSynchro>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d103      	bne.n	800d3ca <RTC_DeInit+0x14a>
      {
        status = ERROR;
 800d3c2:	f04f 0300 	mov.w	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]
 800d3c8:	e002      	b.n	800d3d0 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 800d3ca:	f04f 0301 	mov.w	r3, #1
 800d3ce:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800d3d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3d8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d3dc:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f107 0710 	add.w	r7, r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}
 800d3ea:	bf00      	nop

0800d3ec <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800d3f4:	f04f 0300 	mov.w	r3, #0
 800d3f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d3fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d402:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d406:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d408:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d40c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d410:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d414:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d416:	f000 f883 	bl	800d520 <RTC_EnterInitMode>
 800d41a:	4603      	mov	r3, r0
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d103      	bne.n	800d428 <RTC_Init+0x3c>
  {
    status = ERROR;
 800d420:	f04f 0300 	mov.w	r3, #0
 800d424:	73fb      	strb	r3, [r7, #15]
 800d426:	e033      	b.n	800d490 <RTC_Init+0xa4>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800d428:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d42c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d430:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d434:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d438:	6892      	ldr	r2, [r2, #8]
 800d43a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d43e:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800d440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d448:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d44c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d450:	6891      	ldr	r1, [r2, #8]
 800d452:	687a      	ldr	r2, [r7, #4]
 800d454:	6812      	ldr	r2, [r2, #0]
 800d456:	430a      	orrs	r2, r1
 800d458:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800d45a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d45e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	6892      	ldr	r2, [r2, #8]
 800d466:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800d468:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d46c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d470:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d474:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d478:	6911      	ldr	r1, [r2, #16]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6852      	ldr	r2, [r2, #4]
 800d47e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800d482:	430a      	orrs	r2, r1
 800d484:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800d486:	f000 f895 	bl	800d5b4 <RTC_ExitInitMode>

    status = SUCCESS;    
 800d48a:	f04f 0301 	mov.w	r3, #1
 800d48e:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d490:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d494:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d498:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d49c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f107 0710 	add.w	r7, r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop

0800d4ac <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f04f 0200 	mov.w	r2, #0
 800d4ba:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800d4c2:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d4ca:	609a      	str	r2, [r3, #8]
}
 800d4cc:	f107 070c 	add.w	r7, r7, #12
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bc80      	pop	{r7}
 800d4d4:	4770      	bx	lr
 800d4d6:	bf00      	nop

0800d4d8 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d007      	beq.n	800d4f8 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800d4e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d4ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d4f0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d4f4:	625a      	str	r2, [r3, #36]	; 0x24
 800d4f6:	e00d      	b.n	800d514 <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800d4f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d4fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d500:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d504:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800d506:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d50a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d50e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d512:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d514:	f107 070c 	add.w	r7, r7, #12
 800d518:	46bd      	mov	sp, r7
 800d51a:	bc80      	pop	{r7}
 800d51c:	4770      	bx	lr
 800d51e:	bf00      	nop

0800d520 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800d520:	b480      	push	{r7}
 800d522:	b085      	sub	sp, #20
 800d524:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800d526:	f04f 0300 	mov.w	r3, #0
 800d52a:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800d52c:	f04f 0300 	mov.w	r3, #0
 800d530:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800d532:	f04f 0300 	mov.w	r3, #0
 800d536:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d538:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d53c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d540:	68db      	ldr	r3, [r3, #12]
 800d542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d546:	2b00      	cmp	r3, #0
 800d548:	d12a      	bne.n	800d5a0 <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800d54a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d54e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d552:	f04f 32ff 	mov.w	r2, #4294967295
 800d556:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800d558:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d55c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d560:	68db      	ldr	r3, [r3, #12]
 800d562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d566:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f103 0301 	add.w	r3, r3, #1
 800d56e:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d576:	d002      	beq.n	800d57e <RTC_EnterInitMode+0x5e>
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0ec      	beq.n	800d558 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800d57e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d582:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d586:	68db      	ldr	r3, [r3, #12]
 800d588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d003      	beq.n	800d598 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 800d590:	f04f 0301 	mov.w	r3, #1
 800d594:	73fb      	strb	r3, [r7, #15]
 800d596:	e006      	b.n	800d5a6 <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 800d598:	f04f 0300 	mov.w	r3, #0
 800d59c:	73fb      	strb	r3, [r7, #15]
 800d59e:	e002      	b.n	800d5a6 <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 800d5a0:	f04f 0301 	mov.w	r3, #1
 800d5a4:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800d5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f107 0714 	add.w	r7, r7, #20
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bc80      	pop	{r7}
 800d5b2:	4770      	bx	lr

0800d5b4 <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800d5b4:	b480      	push	{r7}
 800d5b6:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800d5b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5c0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d5c4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d5c8:	68d2      	ldr	r2, [r2, #12]
 800d5ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d5ce:	60da      	str	r2, [r3, #12]
}
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	bc80      	pop	{r7}
 800d5d4:	4770      	bx	lr
 800d5d6:	bf00      	nop

0800d5d8 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	b085      	sub	sp, #20
 800d5dc:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800d5de:	f04f 0300 	mov.w	r3, #0
 800d5e2:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800d5e4:	f04f 0300 	mov.w	r3, #0
 800d5e8:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800d5ea:	f04f 0300 	mov.w	r3, #0
 800d5ee:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d5f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5f8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d5fc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d5fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d602:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d606:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d60a:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800d60c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d610:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d614:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d618:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d61c:	68d2      	ldr	r2, [r2, #12]
 800d61e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d622:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800d624:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d628:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	f003 0320 	and.w	r3, r3, #32
 800d632:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f103 0301 	add.w	r3, r3, #1
 800d63a:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d642:	d002      	beq.n	800d64a <RTC_WaitForSynchro+0x72>
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d0ec      	beq.n	800d624 <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800d64a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d64e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	f003 0320 	and.w	r3, r3, #32
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d003      	beq.n	800d664 <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 800d65c:	f04f 0301 	mov.w	r3, #1
 800d660:	73fb      	strb	r3, [r7, #15]
 800d662:	e002      	b.n	800d66a <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 800d664:	f04f 0300 	mov.w	r3, #0
 800d668:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d66a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d66e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d672:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d676:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800d678:	7bfb      	ldrb	r3, [r7, #15]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	f107 0714 	add.w	r7, r7, #20
 800d680:	46bd      	mov	sp, r7
 800d682:	bc80      	pop	{r7}
 800d684:	4770      	bx	lr
 800d686:	bf00      	nop

0800d688 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	4603      	mov	r3, r0
 800d690:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800d692:	f04f 0300 	mov.w	r3, #0
 800d696:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d698:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d69c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6a0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d6a4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d6a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d6aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6ae:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d6b2:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d6b4:	f7ff ff34 	bl	800d520 <RTC_EnterInitMode>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d103      	bne.n	800d6c6 <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 800d6be:	f04f 0300 	mov.w	r3, #0
 800d6c2:	73fb      	strb	r3, [r7, #15]
 800d6c4:	e020      	b.n	800d708 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d00c      	beq.n	800d6e6 <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800d6cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d6d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d6d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d6dc:	6892      	ldr	r2, [r2, #8]
 800d6de:	f042 0210 	orr.w	r2, r2, #16
 800d6e2:	609a      	str	r2, [r3, #8]
 800d6e4:	e00b      	b.n	800d6fe <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800d6e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d6ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d6ee:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d6f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d6f6:	6892      	ldr	r2, [r2, #8]
 800d6f8:	f022 0210 	bic.w	r2, r2, #16
 800d6fc:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800d6fe:	f7ff ff59 	bl	800d5b4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800d702:	f04f 0301 	mov.w	r3, #1
 800d706:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800d708:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d70c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d710:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d714:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800d716:	7bfb      	ldrb	r3, [r7, #15]
}
 800d718:	4618      	mov	r0, r3
 800d71a:	f107 0710 	add.w	r7, r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop

0800d724 <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 800d724:	b480      	push	{r7}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
 800d72a:	4603      	mov	r3, r0
 800d72c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d72e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d732:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d736:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d73a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d73c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d740:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d744:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d748:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800d74a:	79fb      	ldrb	r3, [r7, #7]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00c      	beq.n	800d76a <RTC_BypassShadowCmd+0x46>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800d750:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d754:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d758:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d75c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d760:	6892      	ldr	r2, [r2, #8]
 800d762:	f042 0220 	orr.w	r2, r2, #32
 800d766:	609a      	str	r2, [r3, #8]
 800d768:	e00b      	b.n	800d782 <RTC_BypassShadowCmd+0x5e>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 800d76a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d76e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d772:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d776:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d77a:	6892      	ldr	r2, [r2, #8]
 800d77c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800d780:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800d782:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d786:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d78a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d78e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d790:	f107 070c 	add.w	r7, r7, #12
 800d794:	46bd      	mov	sp, r7
 800d796:	bc80      	pop	{r7}
 800d798:	4770      	bx	lr
 800d79a:	bf00      	nop

0800d79c <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800d79c:	b590      	push	{r4, r7, lr}
 800d79e:	b085      	sub	sp, #20
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d7a6:	f04f 0300 	mov.w	r3, #0
 800d7aa:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800d7ac:	f04f 0300 	mov.w	r3, #0
 800d7b0:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10d      	bne.n	800d7d4 <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d7b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d7bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d119      	bne.n	800d7fe <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	f04f 0200 	mov.w	r2, #0
 800d7d0:	70da      	strb	r2, [r3, #3]
 800d7d2:	e014      	b.n	800d7fe <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d7d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d7d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d007      	beq.n	800d7f6 <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f001 fb1a 	bl	800ee24 <RTC_Bcd2ToByte>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	e003      	b.n	800d7fe <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	f04f 0200 	mov.w	r2, #0
 800d7fc:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d012      	beq.n	800d82a <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	785b      	ldrb	r3, [r3, #1]
 800d810:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d814:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d81a:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	78db      	ldrb	r3, [r3, #3]
 800d820:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d824:	4313      	orrs	r3, r2
 800d826:	60fb      	str	r3, [r7, #12]
 800d828:	e01e      	b.n	800d868 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	781b      	ldrb	r3, [r3, #0]
 800d82e:	4618      	mov	r0, r3
 800d830:	f001 fad6 	bl	800ede0 <RTC_ByteToBcd2>
 800d834:	4603      	mov	r3, r0
 800d836:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	785b      	ldrb	r3, [r3, #1]
 800d83e:	4618      	mov	r0, r3
 800d840:	f001 face 	bl	800ede0 <RTC_ByteToBcd2>
 800d844:	4603      	mov	r3, r0
 800d846:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d84a:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	789b      	ldrb	r3, [r3, #2]
 800d850:	4618      	mov	r0, r3
 800d852:	f001 fac5 	bl	800ede0 <RTC_ByteToBcd2>
 800d856:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d858:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	78db      	ldrb	r3, [r3, #3]
 800d860:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d864:	4313      	orrs	r3, r2
 800d866:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d868:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d86c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d870:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d874:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d87a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d87e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d882:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d884:	f7ff fe4c 	bl	800d520 <RTC_EnterInitMode>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d103      	bne.n	800d896 <RTC_SetTime+0xfa>
  {
    status = ERROR;
 800d88e:	f04f 0300 	mov.w	r3, #0
 800d892:	72fb      	strb	r3, [r7, #11]
 800d894:	e018      	b.n	800d8c8 <RTC_SetTime+0x12c>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d896:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d89a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d89e:	68f9      	ldr	r1, [r7, #12]
 800d8a0:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800d8a4:	f2c0 037f 	movt	r3, #127	; 0x7f
 800d8a8:	400b      	ands	r3, r1
 800d8aa:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800d8ac:	f7ff fe82 	bl	800d5b4 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800d8b0:	f7ff fe92 	bl	800d5d8 <RTC_WaitForSynchro>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d103      	bne.n	800d8c2 <RTC_SetTime+0x126>
    {
      status = ERROR;
 800d8ba:	f04f 0300 	mov.w	r3, #0
 800d8be:	72fb      	strb	r3, [r7, #11]
 800d8c0:	e002      	b.n	800d8c8 <RTC_SetTime+0x12c>
    }
    else
    {
      status = SUCCESS;
 800d8c2:	f04f 0301 	mov.w	r3, #1
 800d8c6:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d8c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8d0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d8d4:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800d8d6:	7afb      	ldrb	r3, [r7, #11]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f107 0714 	add.w	r7, r7, #20
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd90      	pop	{r4, r7, pc}
 800d8e2:	bf00      	nop

0800d8e4 <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b083      	sub	sp, #12
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f04f 0200 	mov.w	r2, #0
 800d8f2:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	f04f 0200 	mov.w	r2, #0
 800d8fa:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f04f 0200 	mov.w	r2, #0
 800d902:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f04f 0200 	mov.w	r2, #0
 800d90a:	709a      	strb	r2, [r3, #2]
}
 800d90c:	f107 070c 	add.w	r7, r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	bc80      	pop	{r7}
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop

0800d918 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d922:	f04f 0300 	mov.w	r3, #0
 800d926:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800d928:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d92c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d930:	681a      	ldr	r2, [r3, #0]
 800d932:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800d936:	f2c0 037f 	movt	r3, #127	; 0x7f
 800d93a:	4013      	ands	r3, r2
 800d93c:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d944:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d948:	b2da      	uxtb	r2, r3
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d954:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d958:	b2da      	uxtb	r2, r3
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	b2db      	uxtb	r3, r3
 800d962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d966:	b2da      	uxtb	r2, r3
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d972:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d976:	b2da      	uxtb	r2, r3
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d11a      	bne.n	800d9b8 <RTC_GetTime+0xa0>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	4618      	mov	r0, r3
 800d988:	f001 fa4c 	bl	800ee24 <RTC_Bcd2ToByte>
 800d98c:	4603      	mov	r3, r0
 800d98e:	461a      	mov	r2, r3
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	785b      	ldrb	r3, [r3, #1]
 800d998:	4618      	mov	r0, r3
 800d99a:	f001 fa43 	bl	800ee24 <RTC_Bcd2ToByte>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	789b      	ldrb	r3, [r3, #2]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f001 fa3a 	bl	800ee24 <RTC_Bcd2ToByte>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	709a      	strb	r2, [r3, #2]
  }
}
 800d9b8:	f107 0710 	add.w	r7, r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b083      	sub	sp, #12
 800d9c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 800d9c6:	f04f 0300 	mov.w	r3, #0
 800d9ca:	607b      	str	r3, [r7, #4]
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800d9cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d6:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 800d9d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9e0:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 800d9e2:	687b      	ldr	r3, [r7, #4]
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f107 070c 	add.w	r7, r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bc80      	pop	{r7}
 800d9ee:	4770      	bx	lr

0800d9f0 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800d9f0:	b590      	push	{r4, r7, lr}
 800d9f2:	b085      	sub	sp, #20
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d9fa:	f04f 0300 	mov.w	r3, #0
 800d9fe:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800da00:	f04f 0300 	mov.w	r3, #0
 800da04:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d10f      	bne.n	800da2c <RTC_SetDate+0x3c>
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	785b      	ldrb	r3, [r3, #1]
 800da10:	f003 0310 	and.w	r3, r3, #16
 800da14:	2b00      	cmp	r3, #0
 800da16:	d009      	beq.n	800da2c <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	785b      	ldrb	r3, [r3, #1]
 800da1c:	f023 0310 	bic.w	r3, r3, #16
 800da20:	b2db      	uxtb	r3, r3
 800da22:	f103 030a 	add.w	r3, r3, #10
 800da26:	b2da      	uxtb	r2, r3
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d00d      	beq.n	800da4e <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	785b      	ldrb	r3, [r3, #1]
 800da36:	4618      	mov	r0, r3
 800da38:	f001 f9f4 	bl	800ee24 <RTC_Bcd2ToByte>
 800da3c:	4603      	mov	r3, r0
 800da3e:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	789b      	ldrb	r3, [r3, #2]
 800da44:	4618      	mov	r0, r3
 800da46:	f001 f9ed 	bl	800ee24 <RTC_Bcd2ToByte>
 800da4a:	4603      	mov	r3, r0
 800da4c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2b00      	cmp	r3, #0
 800da52:	d012      	beq.n	800da7a <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	78db      	ldrb	r3, [r3, #3]
 800da58:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800da64:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800da6a:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800da74:	4313      	orrs	r3, r2
 800da76:	60fb      	str	r3, [r7, #12]
 800da78:	e01e      	b.n	800dab8 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	78db      	ldrb	r3, [r3, #3]
 800da7e:	4618      	mov	r0, r3
 800da80:	f001 f9ae 	bl	800ede0 <RTC_ByteToBcd2>
 800da84:	4603      	mov	r3, r0
 800da86:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	785b      	ldrb	r3, [r3, #1]
 800da8e:	4618      	mov	r0, r3
 800da90:	f001 f9a6 	bl	800ede0 <RTC_ByteToBcd2>
 800da94:	4603      	mov	r3, r0
 800da96:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800da9a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	789b      	ldrb	r3, [r3, #2]
 800daa0:	4618      	mov	r0, r3
 800daa2:	f001 f99d 	bl	800ede0 <RTC_ByteToBcd2>
 800daa6:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800daa8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800dab4:	4313      	orrs	r3, r2
 800dab6:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dabc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dac0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dac4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dac6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800daca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dace:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dad2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800dad4:	f7ff fd24 	bl	800d520 <RTC_EnterInitMode>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d103      	bne.n	800dae6 <RTC_SetDate+0xf6>
  {
    status = ERROR;
 800dade:	f04f 0300 	mov.w	r3, #0
 800dae2:	72fb      	strb	r3, [r7, #11]
 800dae4:	e017      	b.n	800db16 <RTC_SetDate+0x126>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800dae6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800daea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800daf4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800daf8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800dafa:	f7ff fd5b 	bl	800d5b4 <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800dafe:	f7ff fd6b 	bl	800d5d8 <RTC_WaitForSynchro>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d103      	bne.n	800db10 <RTC_SetDate+0x120>
    {
      status = ERROR;
 800db08:	f04f 0300 	mov.w	r3, #0
 800db0c:	72fb      	strb	r3, [r7, #11]
 800db0e:	e002      	b.n	800db16 <RTC_SetDate+0x126>
    }
    else
    {
      status = SUCCESS;
 800db10:	f04f 0301 	mov.w	r3, #1
 800db14:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800db16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db1e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800db22:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800db24:	7afb      	ldrb	r3, [r7, #11]
}
 800db26:	4618      	mov	r0, r3
 800db28:	f107 0714 	add.w	r7, r7, #20
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd90      	pop	{r4, r7, pc}

0800db30 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f04f 0201 	mov.w	r2, #1
 800db3e:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f04f 0201 	mov.w	r2, #1
 800db46:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f04f 0201 	mov.w	r2, #1
 800db4e:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f04f 0200 	mov.w	r2, #0
 800db56:	70da      	strb	r2, [r3, #3]
}
 800db58:	f107 070c 	add.w	r7, r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bc80      	pop	{r7}
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop

0800db64 <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b084      	sub	sp, #16
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800db6e:	f04f 0300 	mov.w	r3, #0
 800db72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800db74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800db82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800db86:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db8e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800db9e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	b2db      	uxtb	r3, r3
 800dbac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800dbbc:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800dbc0:	b2da      	uxtb	r2, r3
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d11a      	bne.n	800dc02 <RTC_GetDate+0x9e>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	78db      	ldrb	r3, [r3, #3]
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f001 f927 	bl	800ee24 <RTC_Bcd2ToByte>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461a      	mov	r2, r3
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f001 f91e 	bl	800ee24 <RTC_Bcd2ToByte>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	461a      	mov	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	789b      	ldrb	r3, [r3, #2]
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f001 f915 	bl	800ee24 <RTC_Bcd2ToByte>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	461a      	mov	r2, r3
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	709a      	strb	r2, [r3, #2]
  }
}
 800dc02:	f107 0710 	add.w	r7, r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop

0800dc0c <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800dc0c:	b590      	push	{r4, r7, lr}
 800dc0e:	b087      	sub	sp, #28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dc18:	f04f 0300 	mov.w	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10d      	bne.n	800dc40 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dc24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc2c:	689b      	ldr	r3, [r3, #8]
 800dc2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d12c      	bne.n	800dc90 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	f04f 0200 	mov.w	r2, #0
 800dc3c:	70da      	strb	r2, [r3, #3]
 800dc3e:	e027      	b.n	800dc90 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800dc40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc48:	689b      	ldr	r3, [r3, #8]
 800dc4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d007      	beq.n	800dc62 <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	781b      	ldrb	r3, [r3, #0]
 800dc56:	4618      	mov	r0, r3
 800dc58:	f001 f8e4 	bl	800ee24 <RTC_Bcd2ToByte>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	617b      	str	r3, [r7, #20]
 800dc60:	e003      	b.n	800dc6a <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	689b      	ldr	r3, [r3, #8]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d107      	bne.n	800dc82 <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	7b1b      	ldrb	r3, [r3, #12]
 800dc76:	4618      	mov	r0, r3
 800dc78:	f001 f8d4 	bl	800ee24 <RTC_Bcd2ToByte>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	617b      	str	r3, [r7, #20]
 800dc80:	e006      	b.n	800dc90 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	7b1b      	ldrb	r3, [r3, #12]
 800dc86:	4618      	mov	r0, r3
 800dc88:	f001 f8cc 	bl	800ee24 <RTC_Bcd2ToByte>
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d01d      	beq.n	800dcd2 <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	785b      	ldrb	r3, [r3, #1]
 800dca2:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800dca6:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800dcac:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	78db      	ldrb	r3, [r3, #3]
 800dcb2:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800dcb6:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	7b1b      	ldrb	r3, [r3, #12]
 800dcbc:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800dcc0:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800dcc6:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800dccc:	4313      	orrs	r3, r2
 800dcce:	617b      	str	r3, [r7, #20]
 800dcd0:	e02f      	b.n	800dd32 <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f001 f882 	bl	800ede0 <RTC_ByteToBcd2>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	785b      	ldrb	r3, [r3, #1]
 800dce6:	4618      	mov	r0, r3
 800dce8:	f001 f87a 	bl	800ede0 <RTC_ByteToBcd2>
 800dcec:	4603      	mov	r3, r0
 800dcee:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800dcf2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	789b      	ldrb	r3, [r3, #2]
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	f001 f871 	bl	800ede0 <RTC_ByteToBcd2>
 800dcfe:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800dd00:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	78db      	ldrb	r3, [r3, #3]
 800dd08:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800dd0c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	7b1b      	ldrb	r3, [r3, #12]
 800dd14:	4618      	mov	r0, r3
 800dd16:	f001 f863 	bl	800ede0 <RTC_ByteToBcd2>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800dd20:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800dd28:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dd32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd3a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dd3e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dd40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd48:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dd4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd54:	d106      	bne.n	800dd64 <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800dd56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd5e:	697a      	ldr	r2, [r7, #20]
 800dd60:	61da      	str	r2, [r3, #28]
 800dd62:	e005      	b.n	800dd70 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800dd64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd6c:	697a      	ldr	r2, [r7, #20]
 800dd6e:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800dd70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd78:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dd7c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dd7e:	f107 071c 	add.w	r7, r7, #28
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd90      	pop	{r4, r7, pc}
 800dd86:	bf00      	nop

0800dd88 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800dd88:	b480      	push	{r7}
 800dd8a:	b083      	sub	sp, #12
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f04f 0200 	mov.w	r2, #0
 800dd96:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f04f 0200 	mov.w	r2, #0
 800dd9e:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f04f 0200 	mov.w	r2, #0
 800dda6:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f04f 0200 	mov.w	r2, #0
 800ddae:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f04f 0200 	mov.w	r2, #0
 800ddb6:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f04f 0201 	mov.w	r2, #1
 800ddbe:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f04f 0200 	mov.w	r2, #0
 800ddc6:	605a      	str	r2, [r3, #4]
}
 800ddc8:	f107 070c 	add.w	r7, r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bc80      	pop	{r7}
 800ddd0:	4770      	bx	lr
 800ddd2:	bf00      	nop

0800ddd4 <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b086      	sub	sp, #24
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	60f8      	str	r0, [r7, #12]
 800dddc:	60b9      	str	r1, [r7, #8]
 800ddde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dde0:	f04f 0300 	mov.w	r3, #0
 800dde4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddec:	d106      	bne.n	800ddfc <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800ddee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ddf2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	617b      	str	r3, [r7, #20]
 800ddfa:	e005      	b.n	800de08 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800ddfc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de04:	6a1b      	ldr	r3, [r3, #32]
 800de06:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800de0e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800de12:	b2da      	uxtb	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800de18:	697b      	ldr	r3, [r7, #20]
 800de1a:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800de1e:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800de22:	b2da      	uxtb	r2, r3
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800de28:	697b      	ldr	r3, [r7, #20]
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de30:	b2da      	uxtb	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de3c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800de40:	b2da      	uxtb	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800de4c:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800de50:	b2da      	uxtb	r2, r3
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800de60:	697b      	ldr	r3, [r7, #20]
 800de62:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d123      	bne.n	800deb8 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	781b      	ldrb	r3, [r3, #0]
 800de74:	4618      	mov	r0, r3
 800de76:	f000 ffd5 	bl	800ee24 <RTC_Bcd2ToByte>
 800de7a:	4603      	mov	r3, r0
 800de7c:	461a      	mov	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	785b      	ldrb	r3, [r3, #1]
 800de86:	4618      	mov	r0, r3
 800de88:	f000 ffcc 	bl	800ee24 <RTC_Bcd2ToByte>
 800de8c:	4603      	mov	r3, r0
 800de8e:	461a      	mov	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	789b      	ldrb	r3, [r3, #2]
 800de98:	4618      	mov	r0, r3
 800de9a:	f000 ffc3 	bl	800ee24 <RTC_Bcd2ToByte>
 800de9e:	4603      	mov	r3, r0
 800dea0:	461a      	mov	r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	7b1b      	ldrb	r3, [r3, #12]
 800deaa:	4618      	mov	r0, r3
 800deac:	f000 ffba 	bl	800ee24 <RTC_Bcd2ToByte>
 800deb0:	4603      	mov	r3, r0
 800deb2:	461a      	mov	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	731a      	strb	r2, [r3, #12]
  }  
}
 800deb8:	f107 0718 	add.w	r7, r7, #24
 800debc:	46bd      	mov	sp, r7
 800debe:	bd80      	pop	{r7, pc}

0800dec0 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800dec0:	b480      	push	{r7}
 800dec2:	b087      	sub	sp, #28
 800dec4:	af00      	add	r7, sp, #0
 800dec6:	6078      	str	r0, [r7, #4]
 800dec8:	460b      	mov	r3, r1
 800deca:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800decc:	f04f 0300 	mov.w	r3, #0
 800ded0:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800ded2:	f04f 0300 	mov.w	r3, #0
 800ded6:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800ded8:	f04f 0300 	mov.w	r3, #0
 800dedc:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dede:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dee2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dee6:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800deea:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800deec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800def0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800def4:	f04f 0253 	mov.w	r2, #83	; 0x53
 800def8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800defa:	78fb      	ldrb	r3, [r7, #3]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00f      	beq.n	800df20 <RTC_AlarmCmd+0x60>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800df00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df08:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800df0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800df10:	6891      	ldr	r1, [r2, #8]
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	430a      	orrs	r2, r1
 800df16:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800df18:	f04f 0301 	mov.w	r3, #1
 800df1c:	75fb      	strb	r3, [r7, #23]
 800df1e:	e034      	b.n	800df8a <RTC_AlarmCmd+0xca>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800df20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df28:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800df2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800df30:	6891      	ldr	r1, [r2, #8]
 800df32:	687a      	ldr	r2, [r7, #4]
 800df34:	ea6f 0202 	mvn.w	r2, r2
 800df38:	400a      	ands	r2, r1
 800df3a:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800df3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df44:	68da      	ldr	r2, [r3, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800df4c:	4013      	ands	r3, r2
 800df4e:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	f103 0301 	add.w	r3, r3, #1
 800df56:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df5e:	d002      	beq.n	800df66 <RTC_AlarmCmd+0xa6>
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d0ea      	beq.n	800df3c <RTC_AlarmCmd+0x7c>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800df66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df6e:	68da      	ldr	r2, [r3, #12]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800df76:	4013      	ands	r3, r2
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d103      	bne.n	800df84 <RTC_AlarmCmd+0xc4>
    {
      status = ERROR;
 800df7c:	f04f 0300 	mov.w	r3, #0
 800df80:	75fb      	strb	r3, [r7, #23]
 800df82:	e002      	b.n	800df8a <RTC_AlarmCmd+0xca>
    } 
    else
    {
      status = SUCCESS;
 800df84:	f04f 0301 	mov.w	r3, #1
 800df88:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800df8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800df8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800df92:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800df96:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800df98:	7dfb      	ldrb	r3, [r7, #23]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	f107 071c 	add.w	r7, r7, #28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bc80      	pop	{r7}
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop

0800dfa8 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b087      	sub	sp, #28
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	60f8      	str	r0, [r7, #12]
 800dfb0:	60b9      	str	r1, [r7, #8]
 800dfb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800dfb4:	f04f 0300 	mov.w	r3, #0
 800dfb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dfba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dfbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dfc2:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dfc6:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dfc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dfcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dfd0:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dfd4:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800dfd6:	68ba      	ldr	r2, [r7, #8]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dfe4:	d106      	bne.n	800dff4 <RTC_AlarmSubSecondConfig+0x4c>
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 800dfe6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dfea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dfee:	697a      	ldr	r2, [r7, #20]
 800dff0:	645a      	str	r2, [r3, #68]	; 0x44
 800dff2:	e005      	b.n	800e000 <RTC_AlarmSubSecondConfig+0x58>
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 800dff4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dff8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800e000:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e008:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e00c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800e00e:	f107 071c 	add.w	r7, r7, #28
 800e012:	46bd      	mov	sp, r7
 800e014:	bc80      	pop	{r7}
 800e016:	4770      	bx	lr

0800e018 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e020:	f04f 0300 	mov.w	r3, #0
 800e024:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e02c:	d10a      	bne.n	800e044 <RTC_GetAlarmSubSecond+0x2c>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800e02e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e032:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e038:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e03c:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e040:	60fb      	str	r3, [r7, #12]
 800e042:	e009      	b.n	800e058 <RTC_GetAlarmSubSecond+0x40>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800e044:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e048:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e04c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e04e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e052:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e056:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800e058:	68fb      	ldr	r3, [r7, #12]
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	f107 0714 	add.w	r7, r7, #20
 800e060:	46bd      	mov	sp, r7
 800e062:	bc80      	pop	{r7}
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop

0800e068 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800e068:	b480      	push	{r7}
 800e06a:	b083      	sub	sp, #12
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e070:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e074:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e078:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e07c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e07e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e086:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e08a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800e08c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e090:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e094:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e098:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e09c:	6892      	ldr	r2, [r2, #8]
 800e09e:	f022 0207 	bic.w	r2, r2, #7
 800e0a2:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800e0a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e0b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e0b4:	6891      	ldr	r1, [r2, #8]
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	430a      	orrs	r2, r1
 800e0ba:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e0bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0c4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e0c8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e0ca:	f107 070c 	add.w	r7, r7, #12
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bc80      	pop	{r7}
 800e0d2:	4770      	bx	lr

0800e0d4 <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b083      	sub	sp, #12
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e0dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0e4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e0e8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e0ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0f2:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e0f6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800e0f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e100:	687a      	ldr	r2, [r7, #4]
 800e102:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e104:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e108:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e10c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e110:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e112:	f107 070c 	add.w	r7, r7, #12
 800e116:	46bd      	mov	sp, r7
 800e118:	bc80      	pop	{r7}
 800e11a:	4770      	bx	lr

0800e11c <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800e11c:	b480      	push	{r7}
 800e11e:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800e120:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e124:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e128:	695b      	ldr	r3, [r3, #20]
 800e12a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800e12e:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800e132:	4618      	mov	r0, r3
 800e134:	46bd      	mov	sp, r7
 800e136:	bc80      	pop	{r7}
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop

0800e13c <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b087      	sub	sp, #28
 800e140:	af00      	add	r7, sp, #0
 800e142:	4603      	mov	r3, r0
 800e144:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800e146:	f04f 0300 	mov.w	r3, #0
 800e14a:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800e14c:	f04f 0300 	mov.w	r3, #0
 800e150:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800e152:	f04f 0300 	mov.w	r3, #0
 800e156:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e158:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e15c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e160:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e164:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e166:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e16a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e16e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e172:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d00f      	beq.n	800e19a <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800e17a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e17e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e182:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e186:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e18a:	6892      	ldr	r2, [r2, #8]
 800e18c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e190:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800e192:	f04f 0301 	mov.w	r3, #1
 800e196:	75fb      	strb	r3, [r7, #23]
 800e198:	e02e      	b.n	800e1f8 <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800e19a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1a2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e1a6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e1aa:	6892      	ldr	r2, [r2, #8]
 800e1ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e1b0:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800e1b2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e1b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1ba:	68db      	ldr	r3, [r3, #12]
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f103 0301 	add.w	r3, r3, #1
 800e1c8:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1d0:	d002      	beq.n	800e1d8 <RTC_WakeUpCmd+0x9c>
 800e1d2:	693b      	ldr	r3, [r7, #16]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d0ec      	beq.n	800e1b2 <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800e1d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e1dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1e0:	68db      	ldr	r3, [r3, #12]
 800e1e2:	f003 0304 	and.w	r3, r3, #4
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d103      	bne.n	800e1f2 <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800e1ea:	f04f 0300 	mov.w	r3, #0
 800e1ee:	75fb      	strb	r3, [r7, #23]
 800e1f0:	e002      	b.n	800e1f8 <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800e1f2:	f04f 0301 	mov.w	r3, #1
 800e1f6:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e1f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e1fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e200:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e204:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800e206:	7dfb      	ldrb	r3, [r7, #23]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	f107 071c 	add.w	r7, r7, #28
 800e20e:	46bd      	mov	sp, r7
 800e210:	bc80      	pop	{r7}
 800e212:	4770      	bx	lr

0800e214 <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e21e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e222:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e226:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e22a:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e22c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e230:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e234:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e238:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800e23a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e23e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e242:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e246:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e24a:	6892      	ldr	r2, [r2, #8]
 800e24c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e250:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800e252:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e256:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e25a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e25e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e262:	6891      	ldr	r1, [r2, #8]
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	683a      	ldr	r2, [r7, #0]
 800e268:	4302      	orrs	r2, r0
 800e26a:	430a      	orrs	r2, r1
 800e26c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e26e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e272:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e276:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e27a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e27c:	f107 070c 	add.w	r7, r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	bc80      	pop	{r7}
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop

0800e288 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800e288:	b480      	push	{r7}
 800e28a:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800e28c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e290:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e294:	689b      	ldr	r3, [r3, #8]
 800e296:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bc80      	pop	{r7}
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b083      	sub	sp, #12
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e2ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2b6:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e2ba:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e2bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2c4:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e2c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800e2ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e2d6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e2da:	6892      	ldr	r2, [r2, #8]
 800e2dc:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800e2e0:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800e2e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2ea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e2ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e2f2:	6891      	ldr	r1, [r2, #8]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	683a      	ldr	r2, [r7, #0]
 800e2f8:	4302      	orrs	r2, r0
 800e2fa:	430a      	orrs	r2, r1
 800e2fc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e2fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e302:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e306:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e30a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e30c:	f107 070c 	add.w	r7, r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	bc80      	pop	{r7}
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop

0800e318 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b084      	sub	sp, #16
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
 800e320:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e322:	f04f 0300 	mov.w	r3, #0
 800e326:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e328:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e32c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e330:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e334:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e336:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e33a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e33e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e342:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800e344:	f7ff f8ec 	bl	800d520 <RTC_EnterInitMode>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d103      	bne.n	800e356 <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800e34e:	f04f 0300 	mov.w	r3, #0
 800e352:	73fb      	strb	r3, [r7, #15]
 800e354:	e00c      	b.n	800e370 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800e356:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e35a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e35e:	6879      	ldr	r1, [r7, #4]
 800e360:	683a      	ldr	r2, [r7, #0]
 800e362:	430a      	orrs	r2, r1
 800e364:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800e366:	f7ff f925 	bl	800d5b4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800e36a:	f04f 0301 	mov.w	r3, #1
 800e36e:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e370:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e374:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e378:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e37c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800e37e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e380:	4618      	mov	r0, r3
 800e382:	f107 0710 	add.w	r7, r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}
 800e38a:	bf00      	nop

0800e38c <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	4603      	mov	r3, r0
 800e394:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800e396:	f04f 0300 	mov.w	r3, #0
 800e39a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e39c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3a4:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e3a8:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e3aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3b2:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e3b6:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800e3b8:	f7ff f8b2 	bl	800d520 <RTC_EnterInitMode>
 800e3bc:	4603      	mov	r3, r0
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d103      	bne.n	800e3ca <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800e3c2:	f04f 0300 	mov.w	r3, #0
 800e3c6:	73fb      	strb	r3, [r7, #15]
 800e3c8:	e020      	b.n	800e40c <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800e3ca:	79fb      	ldrb	r3, [r7, #7]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00c      	beq.n	800e3ea <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800e3d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e3dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e3e0:	6892      	ldr	r2, [r2, #8]
 800e3e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e3e6:	609a      	str	r2, [r3, #8]
 800e3e8:	e00b      	b.n	800e402 <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800e3ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3f2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e3f6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e3fa:	6892      	ldr	r2, [r2, #8]
 800e3fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e400:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800e402:	f7ff f8d7 	bl	800d5b4 <RTC_ExitInitMode>
    
    status = SUCCESS;
 800e406:	f04f 0301 	mov.w	r3, #1
 800e40a:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e40c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e410:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e414:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e418:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800e41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	f107 0710 	add.w	r7, r7, #16
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop

0800e428 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e432:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e436:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e43a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e43e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e448:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e44c:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800e44e:	79fb      	ldrb	r3, [r7, #7]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00c      	beq.n	800e46e <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800e454:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e458:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e45c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e460:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e464:	6892      	ldr	r2, [r2, #8]
 800e466:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800e46a:	609a      	str	r2, [r3, #8]
 800e46c:	e00b      	b.n	800e486 <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800e46e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e472:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e476:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e47a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e47e:	6892      	ldr	r2, [r2, #8]
 800e480:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800e484:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e486:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e48a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e48e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e492:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e494:	f107 070c 	add.w	r7, r7, #12
 800e498:	46bd      	mov	sp, r7
 800e49a:	bc80      	pop	{r7}
 800e49c:	4770      	bx	lr
 800e49e:	bf00      	nop

0800e4a0 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800e4a0:	b480      	push	{r7}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e4a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4b0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e4b4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e4b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4be:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e4c2:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800e4c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4cc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e4d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e4d4:	6892      	ldr	r2, [r2, #8]
 800e4d6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800e4da:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800e4dc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4e4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e4e8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e4ec:	6891      	ldr	r1, [r2, #8]
 800e4ee:	687a      	ldr	r2, [r7, #4]
 800e4f0:	430a      	orrs	r2, r1
 800e4f2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800e4f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4fc:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e500:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e502:	f107 070c 	add.w	r7, r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	bc80      	pop	{r7}
 800e50a:	4770      	bx	lr

0800e50c <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800e50c:	b480      	push	{r7}
 800e50e:	b087      	sub	sp, #28
 800e510:	af00      	add	r7, sp, #0
 800e512:	60f8      	str	r0, [r7, #12]
 800e514:	60b9      	str	r1, [r7, #8]
 800e516:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800e518:	f04f 0300 	mov.w	r3, #0
 800e51c:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800e51e:	f04f 0300 	mov.w	r3, #0
 800e522:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e524:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e528:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e52c:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e530:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e532:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e536:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e53a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e53e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800e540:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e544:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d011      	beq.n	800e576 <RTC_SmoothCalibConfig+0x6a>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800e552:	e003      	b.n	800e55c <RTC_SmoothCalibConfig+0x50>
    {
      recalpfcount++;
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	f103 0301 	add.w	r3, r3, #1
 800e55a:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800e55c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e560:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d003      	beq.n	800e576 <RTC_SmoothCalibConfig+0x6a>
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800e574:	d1ee      	bne.n	800e554 <RTC_SmoothCalibConfig+0x48>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800e576:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e57a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e584:	2b00      	cmp	r3, #0
 800e586:	d10d      	bne.n	800e5a4 <RTC_SmoothCalibConfig+0x98>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800e588:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e58c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e590:	68f9      	ldr	r1, [r7, #12]
 800e592:	68ba      	ldr	r2, [r7, #8]
 800e594:	4311      	orrs	r1, r2
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	430a      	orrs	r2, r1
 800e59a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 800e59c:	f04f 0301 	mov.w	r3, #1
 800e5a0:	75fb      	strb	r3, [r7, #23]
 800e5a2:	e002      	b.n	800e5aa <RTC_SmoothCalibConfig+0x9e>
  }
  else
  {
    status = ERROR;
 800e5a4:	f04f 0300 	mov.w	r3, #0
 800e5a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800e5aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e5ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e5b2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e5b6:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800e5b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f107 071c 	add.w	r7, r7, #28
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bc80      	pop	{r7}
 800e5c4:	4770      	bx	lr
 800e5c6:	bf00      	nop

0800e5c8 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800e5c8:	b480      	push	{r7}
 800e5ca:	b085      	sub	sp, #20
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800e5d4:	f04f 0300 	mov.w	r3, #0
 800e5d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800e5da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e5de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e5e2:	689b      	ldr	r3, [r3, #8]
 800e5e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e5e8:	f023 0308 	bic.w	r3, r3, #8
 800e5ec:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800e5ee:	78fb      	ldrb	r3, [r7, #3]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d006      	beq.n	800e602 <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800e5f4:	687a      	ldr	r2, [r7, #4]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e5fe:	60fb      	str	r3, [r7, #12]
 800e600:	e003      	b.n	800e60a <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800e602:	68fa      	ldr	r2, [r7, #12]
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4313      	orrs	r3, r2
 800e608:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e60a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e60e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e612:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e616:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e618:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e61c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e620:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800e626:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e62a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e62e:	68fa      	ldr	r2, [r7, #12]
 800e630:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e632:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e636:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e63a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e63e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e640:	f107 0714 	add.w	r7, r7, #20
 800e644:	46bd      	mov	sp, r7
 800e646:	bc80      	pop	{r7}
 800e648:	4770      	bx	lr
 800e64a:	bf00      	nop

0800e64c <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b086      	sub	sp, #24
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800e658:	f04f 0300 	mov.w	r3, #0
 800e65c:	617b      	str	r3, [r7, #20]
 800e65e:	f04f 0300 	mov.w	r3, #0
 800e662:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800e664:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e668:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e66c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e66e:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800e672:	f2c0 037f 	movt	r3, #127	; 0x7f
 800e676:	4013      	ands	r3, r2
 800e678:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800e67a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e67e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e684:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e688:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e68c:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800e694:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800e6a4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800e6a8:	b2da      	uxtb	r2, r3
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	b2db      	uxtb	r3, r3
 800e6b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	68bb      	ldr	r3, [r7, #8]
 800e6ba:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e6c2:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f04f 0200 	mov.w	r2, #0
 800e6d2:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800e6da:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800e6de:	b2da      	uxtb	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e6f8:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800e6fc:	b2da      	uxtb	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d135      	bne.n	800e774 <RTC_GetTimeStamp+0x128>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800e708:	68bb      	ldr	r3, [r7, #8]
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	4618      	mov	r0, r3
 800e70e:	f000 fb89 	bl	800ee24 <RTC_Bcd2ToByte>
 800e712:	4603      	mov	r3, r0
 800e714:	461a      	mov	r2, r3
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	785b      	ldrb	r3, [r3, #1]
 800e71e:	4618      	mov	r0, r3
 800e720:	f000 fb80 	bl	800ee24 <RTC_Bcd2ToByte>
 800e724:	4603      	mov	r3, r0
 800e726:	461a      	mov	r2, r3
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	789b      	ldrb	r3, [r3, #2]
 800e730:	4618      	mov	r0, r3
 800e732:	f000 fb77 	bl	800ee24 <RTC_Bcd2ToByte>
 800e736:	4603      	mov	r3, r0
 800e738:	461a      	mov	r2, r3
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	785b      	ldrb	r3, [r3, #1]
 800e742:	4618      	mov	r0, r3
 800e744:	f000 fb6e 	bl	800ee24 <RTC_Bcd2ToByte>
 800e748:	4603      	mov	r3, r0
 800e74a:	461a      	mov	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	789b      	ldrb	r3, [r3, #2]
 800e754:	4618      	mov	r0, r3
 800e756:	f000 fb65 	bl	800ee24 <RTC_Bcd2ToByte>
 800e75a:	4603      	mov	r3, r0
 800e75c:	461a      	mov	r2, r3
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	4618      	mov	r0, r3
 800e768:	f000 fb5c 	bl	800ee24 <RTC_Bcd2ToByte>
 800e76c:	4603      	mov	r3, r0
 800e76e:	461a      	mov	r2, r3
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	701a      	strb	r2, [r3, #0]
  }
}
 800e774:	f107 0718 	add.w	r7, r7, #24
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800e780:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e784:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bc80      	pop	{r7}
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop

0800e794 <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
 800e79c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d110      	bne.n	800e7c6 <RTC_TamperTriggerConfig+0x32>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800e7a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e7a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e7ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e7b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e7b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e7bc:	ea6f 0202 	mvn.w	r2, r2
 800e7c0:	400a      	ands	r2, r1
 800e7c2:	641a      	str	r2, [r3, #64]	; 0x40
 800e7c4:	e00d      	b.n	800e7e2 <RTC_TamperTriggerConfig+0x4e>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800e7c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e7ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e7ce:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e7d2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e7d6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e7de:	430a      	orrs	r2, r1
 800e7e0:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800e7e2:	f107 070c 	add.w	r7, r7, #12
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bc80      	pop	{r7}
 800e7ea:	4770      	bx	lr

0800e7ec <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e7f8:	78fb      	ldrb	r3, [r7, #3]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00c      	beq.n	800e818 <RTC_TamperCmd+0x2c>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800e7fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e802:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e806:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e80a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e80e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	430a      	orrs	r2, r1
 800e814:	641a      	str	r2, [r3, #64]	; 0x40
 800e816:	e00d      	b.n	800e834 <RTC_TamperCmd+0x48>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800e818:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e81c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e820:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e824:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e828:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	ea6f 0202 	mvn.w	r2, r2
 800e830:	400a      	ands	r2, r1
 800e832:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800e834:	f107 070c 	add.w	r7, r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	bc80      	pop	{r7}
 800e83c:	4770      	bx	lr
 800e83e:	bf00      	nop

0800e840 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800e848:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e84c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e850:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e854:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e858:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e85a:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800e85e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800e860:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e864:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e868:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e86c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e870:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	430a      	orrs	r2, r1
 800e876:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e878:	f107 070c 	add.w	r7, r7, #12
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bc80      	pop	{r7}
 800e880:	4770      	bx	lr
 800e882:	bf00      	nop

0800e884 <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800e884:	b480      	push	{r7}
 800e886:	b083      	sub	sp, #12
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800e88c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e890:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e894:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e898:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e89c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e89e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e8a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800e8a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e8a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e8ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e8b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e8b4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	430a      	orrs	r2, r1
 800e8ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e8bc:	f107 070c 	add.w	r7, r7, #12
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	bc80      	pop	{r7}
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop

0800e8c8 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
 800e8ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800e8d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e8d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e8d8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e8dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e8e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e8e2:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e8e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800e8e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e8ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e8f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e8f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e8f8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	430a      	orrs	r2, r1
 800e8fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e900:	f107 070c 	add.w	r7, r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	bc80      	pop	{r7}
 800e908:	4770      	bx	lr
 800e90a:	bf00      	nop

0800e90c <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800e90c:	b480      	push	{r7}
 800e90e:	b083      	sub	sp, #12
 800e910:	af00      	add	r7, sp, #0
 800e912:	4603      	mov	r3, r0
 800e914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800e916:	79fb      	ldrb	r3, [r7, #7]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d00c      	beq.n	800e936 <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800e91c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e920:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e924:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e928:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e92c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e92e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e932:	641a      	str	r2, [r3, #64]	; 0x40
 800e934:	e00b      	b.n	800e94e <RTC_TimeStampOnTamperDetectionCmd+0x42>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800e936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e93a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e93e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e942:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e946:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e94c:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800e94e:	f107 070c 	add.w	r7, r7, #12
 800e952:	46bd      	mov	sp, r7
 800e954:	bc80      	pop	{r7}
 800e956:	4770      	bx	lr

0800e958 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	4603      	mov	r3, r0
 800e960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800e962:	79fb      	ldrb	r3, [r7, #7]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00c      	beq.n	800e982 <RTC_TamperPullUpCmd+0x2a>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800e968:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e96c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e970:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e974:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e978:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e97a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e97e:	641a      	str	r2, [r3, #64]	; 0x40
 800e980:	e00b      	b.n	800e99a <RTC_TamperPullUpCmd+0x42>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800e982:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e986:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e98a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e98e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e992:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e994:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e998:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 800e99a:	f107 070c 	add.w	r7, r7, #12
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bc80      	pop	{r7}
 800e9a2:	4770      	bx	lr

0800e9a4 <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800e9ae:	f04f 0300 	mov.w	r3, #0
 800e9b2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800e9b4:	f642 0350 	movw	r3, #10320	; 0x2850
 800e9b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e9bc:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	18d3      	adds	r3, r2, r3
 800e9c8:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	683a      	ldr	r2, [r7, #0]
 800e9ce:	601a      	str	r2, [r3, #0]
}
 800e9d0:	f107 0714 	add.w	r7, r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bc80      	pop	{r7}
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop

0800e9dc <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800e9e4:	f04f 0300 	mov.w	r3, #0
 800e9e8:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800e9ea:	f642 0350 	movw	r3, #10320	; 0x2850
 800e9ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e9f2:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	18d3      	adds	r3, r2, r3
 800e9fe:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	681b      	ldr	r3, [r3, #0]
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	f107 0714 	add.w	r7, r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bc80      	pop	{r7}
 800ea0e:	4770      	bx	lr

0800ea10 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800ea18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ea1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea20:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ea24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ea28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ea2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ea2e:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800ea30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ea34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea38:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ea3c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ea40:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	430a      	orrs	r2, r1
 800ea46:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ea48:	f107 070c 	add.w	r7, r7, #12
 800ea4c:	46bd      	mov	sp, r7
 800ea4e:	bc80      	pop	{r7}
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop

0800ea54 <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b083      	sub	sp, #12
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800ea5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ea60:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea64:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ea68:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ea6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ea6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ea72:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800ea74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ea78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea7c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ea80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ea84:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ea86:	687a      	ldr	r2, [r7, #4]
 800ea88:	430a      	orrs	r2, r1
 800ea8a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ea8c:	f107 070c 	add.w	r7, r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bc80      	pop	{r7}
 800ea94:	4770      	bx	lr
 800ea96:	bf00      	nop

0800ea98 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800eaa0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eaa4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eaa8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800eaac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800eab0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800eab2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eab6:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800eab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eabc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eac0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800eac4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800eac8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800eaca:	687a      	ldr	r2, [r7, #4]
 800eacc:	430a      	orrs	r2, r1
 800eace:	641a      	str	r2, [r3, #64]	; 0x40
}
 800ead0:	f107 070c 	add.w	r7, r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bc80      	pop	{r7}
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop

0800eadc <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800eae6:	f04f 0300 	mov.w	r3, #0
 800eaea:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800eaec:	f04f 0300 	mov.w	r3, #0
 800eaf0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800eaf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eaf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eafa:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800eafe:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800eb00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eb04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb08:	f04f 0253 	mov.w	r2, #83	; 0x53
 800eb0c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800eb0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eb12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb16:	68db      	ldr	r3, [r3, #12]
 800eb18:	f003 0308 	and.w	r3, r3, #8
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d011      	beq.n	800eb44 <RTC_SynchroShiftConfig+0x68>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800eb20:	e003      	b.n	800eb2a <RTC_SynchroShiftConfig+0x4e>
    {
      shpfcount++;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	f103 0301 	add.w	r3, r3, #1
 800eb28:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800eb2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eb2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	f003 0308 	and.w	r3, r3, #8
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d003      	beq.n	800eb44 <RTC_SynchroShiftConfig+0x68>
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb42:	d1ee      	bne.n	800eb22 <RTC_SynchroShiftConfig+0x46>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800eb44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eb48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	f003 0308 	and.w	r3, r3, #8
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d121      	bne.n	800eb9a <RTC_SynchroShiftConfig+0xbe>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800eb56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eb5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb5e:	689b      	ldr	r3, [r3, #8]
 800eb60:	f003 0310 	and.w	r3, r3, #16
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d114      	bne.n	800eb92 <RTC_SynchroShiftConfig+0xb6>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800eb68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eb6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eb70:	6839      	ldr	r1, [r7, #0]
 800eb72:	687a      	ldr	r2, [r7, #4]
 800eb74:	430a      	orrs	r2, r1
 800eb76:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800eb78:	f7fe fd2e 	bl	800d5d8 <RTC_WaitForSynchro>
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d103      	bne.n	800eb8a <RTC_SynchroShiftConfig+0xae>
      {
        status = ERROR;
 800eb82:	f04f 0300 	mov.w	r3, #0
 800eb86:	73fb      	strb	r3, [r7, #15]
 800eb88:	e00a      	b.n	800eba0 <RTC_SynchroShiftConfig+0xc4>
      }
      else
      {
        status = SUCCESS;
 800eb8a:	f04f 0301 	mov.w	r3, #1
 800eb8e:	73fb      	strb	r3, [r7, #15]
 800eb90:	e006      	b.n	800eba0 <RTC_SynchroShiftConfig+0xc4>
      }
    }
    else
    {
      status = ERROR;
 800eb92:	f04f 0300 	mov.w	r3, #0
 800eb96:	73fb      	strb	r3, [r7, #15]
 800eb98:	e002      	b.n	800eba0 <RTC_SynchroShiftConfig+0xc4>
    }
  }
  else
  {
    status = ERROR;
 800eb9a:	f04f 0300 	mov.w	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800eba0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800eba4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800eba8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ebac:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f107 0710 	add.w	r7, r7, #16
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	bd80      	pop	{r7, pc}
 800ebba:	bf00      	nop

0800ebbc <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b083      	sub	sp, #12
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	460b      	mov	r3, r1
 800ebc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ebc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ebcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebd0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ebd4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ebd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ebda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebde:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ebe2:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800ebe4:	78fb      	ldrb	r3, [r7, #3]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d01c      	beq.n	800ec24 <RTC_ITConfig+0x68>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800ebea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ebee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ebf2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ebf6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ebfa:	6891      	ldr	r1, [r2, #8]
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	f022 0204 	bic.w	r2, r2, #4
 800ec02:	430a      	orrs	r2, r1
 800ec04:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800ec06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ec0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ec12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ec16:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	f002 0204 	and.w	r2, r2, #4
 800ec1e:	430a      	orrs	r2, r1
 800ec20:	641a      	str	r2, [r3, #64]	; 0x40
 800ec22:	e01f      	b.n	800ec64 <RTC_ITConfig+0xa8>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800ec24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ec28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec2c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ec30:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ec34:	6891      	ldr	r1, [r2, #8]
 800ec36:	687a      	ldr	r2, [r7, #4]
 800ec38:	f022 0204 	bic.w	r2, r2, #4
 800ec3c:	ea6f 0202 	mvn.w	r2, r2
 800ec40:	400a      	ands	r2, r1
 800ec42:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800ec44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ec48:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec4c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ec50:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ec54:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	f002 0204 	and.w	r2, r2, #4
 800ec5c:	ea6f 0202 	mvn.w	r2, r2
 800ec60:	400a      	ands	r2, r1
 800ec62:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ec64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ec68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec6c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ec70:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ec72:	f107 070c 	add.w	r7, r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bc80      	pop	{r7}
 800ec7a:	4770      	bx	lr

0800ec7c <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b085      	sub	sp, #20
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800ec84:	f04f 0300 	mov.w	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800ec8a:	f04f 0300 	mov.w	r3, #0
 800ec8e:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800ec90:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ec94:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec98:	68da      	ldr	r2, [r3, #12]
 800ec9a:	f643 7377 	movw	r3, #16247	; 0x3f77
 800ec9e:	4013      	ands	r3, r2
 800eca0:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	4013      	ands	r3, r2
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d003      	beq.n	800ecb4 <RTC_GetFlagStatus+0x38>
  {
    bitstatus = SET;
 800ecac:	f04f 0301 	mov.w	r3, #1
 800ecb0:	73fb      	strb	r3, [r7, #15]
 800ecb2:	e002      	b.n	800ecba <RTC_GetFlagStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800ecb4:	f04f 0300 	mov.w	r3, #0
 800ecb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ecba:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	f107 0714 	add.w	r7, r7, #20
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bc80      	pop	{r7}
 800ecc6:	4770      	bx	lr

0800ecc8 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800ecd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ecd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ecd8:	687a      	ldr	r2, [r7, #4]
 800ecda:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800ecde:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800ece2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ece6:	ea6f 0102 	mvn.w	r1, r2
 800ecea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ecee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ecf2:	68d2      	ldr	r2, [r2, #12]
 800ecf4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ecf8:	430a      	orrs	r2, r1
 800ecfa:	60da      	str	r2, [r3, #12]
}
 800ecfc:	f107 070c 	add.w	r7, r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bc80      	pop	{r7}
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop

0800ed08 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b087      	sub	sp, #28
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800ed10:	f04f 0300 	mov.w	r3, #0
 800ed14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800ed16:	f04f 0300 	mov.w	r3, #0
 800ed1a:	613b      	str	r3, [r7, #16]
 800ed1c:	f04f 0300 	mov.w	r3, #0
 800ed20:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800ed22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ed26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ed2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed2c:	f003 0304 	and.w	r3, r3, #4
 800ed30:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800ed32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ed36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ed3a:	689a      	ldr	r2, [r3, #8]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	401a      	ands	r2, r3
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	400b      	ands	r3, r1
 800ed4a:	4313      	orrs	r3, r2
 800ed4c:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800ed4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ed52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ed56:	68da      	ldr	r2, [r3, #12]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ed5e:	4013      	ands	r3, r2
 800ed60:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00a      	beq.n	800ed7e <RTC_GetITStatus+0x76>
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800ed6e:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d003      	beq.n	800ed7e <RTC_GetITStatus+0x76>
  {
    bitstatus = SET;
 800ed76:	f04f 0301 	mov.w	r3, #1
 800ed7a:	75fb      	strb	r3, [r7, #23]
 800ed7c:	e002      	b.n	800ed84 <RTC_GetITStatus+0x7c>
  }
  else
  {
    bitstatus = RESET;
 800ed7e:	f04f 0300 	mov.w	r3, #0
 800ed82:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	f107 071c 	add.w	r7, r7, #28
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bc80      	pop	{r7}
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop

0800ed94 <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ed9c:	f04f 0300 	mov.w	r3, #0
 800eda0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800eda8:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800edaa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800edae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800edb2:	68fa      	ldr	r2, [r7, #12]
 800edb4:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800edb8:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800edbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800edc0:	ea6f 0102 	mvn.w	r1, r2
 800edc4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800edc8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800edcc:	68d2      	ldr	r2, [r2, #12]
 800edce:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800edd2:	430a      	orrs	r2, r1
 800edd4:	60da      	str	r2, [r3, #12]
}
 800edd6:	f107 0714 	add.w	r7, r7, #20
 800edda:	46bd      	mov	sp, r7
 800eddc:	bc80      	pop	{r7}
 800edde:	4770      	bx	lr

0800ede0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800ede0:	b480      	push	{r7}
 800ede2:	b085      	sub	sp, #20
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800edea:	f04f 0300 	mov.w	r3, #0
 800edee:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800edf0:	e007      	b.n	800ee02 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800edf2:	7bfb      	ldrb	r3, [r7, #15]
 800edf4:	f103 0301 	add.w	r3, r3, #1
 800edf8:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800edfa:	79fb      	ldrb	r3, [r7, #7]
 800edfc:	f1a3 030a 	sub.w	r3, r3, #10
 800ee00:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	2b09      	cmp	r3, #9
 800ee06:	d8f4      	bhi.n	800edf2 <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
 800ee0a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ee0e:	b2da      	uxtb	r2, r3
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	4313      	orrs	r3, r2
 800ee14:	b2db      	uxtb	r3, r3
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	f107 0714 	add.w	r7, r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bc80      	pop	{r7}
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop

0800ee24 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b085      	sub	sp, #20
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800ee2e:	f04f 0300 	mov.w	r3, #0
 800ee32:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ee34:	79fb      	ldrb	r3, [r7, #7]
 800ee36:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	461a      	mov	r2, r3
 800ee3e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800ee42:	18d3      	adds	r3, r2, r3
 800ee44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee48:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800ee4a:	79fb      	ldrb	r3, [r7, #7]
 800ee4c:	f003 030f 	and.w	r3, r3, #15
 800ee50:	b2da      	uxtb	r2, r3
 800ee52:	7bfb      	ldrb	r3, [r7, #15]
 800ee54:	18d3      	adds	r3, r2, r3
 800ee56:	b2db      	uxtb	r3, r3
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f107 0714 	add.w	r7, r7, #20
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bc80      	pop	{r7}
 800ee62:	4770      	bx	lr

0800ee64 <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800ee68:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ee6c:	f04f 0101 	mov.w	r1, #1
 800ee70:	f7fd ff80 	bl	800cd74 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800ee74:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ee78:	f04f 0100 	mov.w	r1, #0
 800ee7c:	f7fd ff7a 	bl	800cd74 <RCC_APB2PeriphResetCmd>
}
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop

0800ee84 <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b085      	sub	sp, #20
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ee8c:	f04f 0300 	mov.w	r3, #0
 800ee90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800ee92:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ee96:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800eea4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eea8:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	7d1b      	ldrb	r3, [r3, #20]
 800eeae:	461a      	mov	r2, r3
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800eeba:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800eec6:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	4313      	orrs	r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800eed4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eed8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eedc:	68fa      	ldr	r2, [r7, #12]
 800eede:	605a      	str	r2, [r3, #4]
}
 800eee0:	f107 0714 	add.w	r7, r7, #20
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bc80      	pop	{r7}
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop

0800eeec <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800eeec:	b480      	push	{r7}
 800eeee:	b083      	sub	sp, #12
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f04f 0200 	mov.w	r2, #0
 800eefa:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	f04f 0200 	mov.w	r2, #0
 800ef02:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f04f 0200 	mov.w	r2, #0
 800ef0a:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f04f 0200 	mov.w	r2, #0
 800ef12:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f04f 0200 	mov.w	r2, #0
 800ef1a:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f04f 0200 	mov.w	r2, #0
 800ef22:	611a      	str	r2, [r3, #16]
}
 800ef24:	f107 070c 	add.w	r7, r7, #12
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bc80      	pop	{r7}
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop

0800ef30 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b083      	sub	sp, #12
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	4603      	mov	r3, r0
 800ef38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800ef3a:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800ef3e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ef42:	79fa      	ldrb	r2, [r7, #7]
 800ef44:	601a      	str	r2, [r3, #0]
}
 800ef46:	f107 070c 	add.w	r7, r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	bc80      	pop	{r7}
 800ef4e:	4770      	bx	lr

0800ef50 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b083      	sub	sp, #12
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800ef58:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ef5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ef60:	687a      	ldr	r2, [r7, #4]
 800ef62:	601a      	str	r2, [r3, #0]
}
 800ef64:	f107 070c 	add.w	r7, r7, #12
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bc80      	pop	{r7}
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop

0800ef70 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800ef70:	b480      	push	{r7}
 800ef72:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800ef74:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ef78:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f003 0303 	and.w	r3, r3, #3
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bc80      	pop	{r7}
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop

0800ef8c <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ef94:	f04f 0300 	mov.w	r3, #0
 800ef98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800ef9a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ef9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800efa2:	687a      	ldr	r2, [r7, #4]
 800efa4:	6812      	ldr	r2, [r2, #0]
 800efa6:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800efa8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800efac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800efba:	f023 030f 	bic.w	r3, r3, #15
 800efbe:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	685a      	ldr	r2, [r3, #4]
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	431a      	orrs	r2, r3
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	691b      	ldr	r3, [r3, #16]
 800efd4:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800efd6:	68fa      	ldr	r2, [r7, #12]
 800efd8:	4313      	orrs	r3, r2
 800efda:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800efdc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800efe0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800efe4:	68fa      	ldr	r2, [r7, #12]
 800efe6:	60da      	str	r2, [r3, #12]
}
 800efe8:	f107 0714 	add.w	r7, r7, #20
 800efec:	46bd      	mov	sp, r7
 800efee:	bc80      	pop	{r7}
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop

0800eff4 <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800eff4:	b480      	push	{r7}
 800eff6:	b083      	sub	sp, #12
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f04f 0200 	mov.w	r2, #0
 800f002:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f04f 0200 	mov.w	r2, #0
 800f00a:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f04f 0200 	mov.w	r2, #0
 800f012:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f04f 0200 	mov.w	r2, #0
 800f01a:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f04f 0200 	mov.w	r2, #0
 800f022:	611a      	str	r2, [r3, #16]
}
 800f024:	f107 070c 	add.w	r7, r7, #12
 800f028:	46bd      	mov	sp, r7
 800f02a:	bc80      	pop	{r7}
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800f030:	b480      	push	{r7}
 800f032:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800f034:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f038:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	b2db      	uxtb	r3, r3
}
 800f040:	4618      	mov	r0, r3
 800f042:	46bd      	mov	sp, r7
 800f044:	bc80      	pop	{r7}
 800f046:	4770      	bx	lr

0800f048 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800f048:	b480      	push	{r7}
 800f04a:	b085      	sub	sp, #20
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800f050:	f04f 0300 	mov.w	r3, #0
 800f054:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	f642 4314 	movw	r3, #11284	; 0x2c14
 800f05c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f060:	18d3      	adds	r3, r2, r3
 800f062:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	681b      	ldr	r3, [r3, #0]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	f107 0714 	add.w	r7, r7, #20
 800f06e:	46bd      	mov	sp, r7
 800f070:	bc80      	pop	{r7}
 800f072:	4770      	bx	lr

0800f074 <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f07c:	f04f 0300 	mov.w	r3, #0
 800f080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800f082:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f086:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f08a:	687a      	ldr	r2, [r7, #4]
 800f08c:	6812      	ldr	r2, [r2, #0]
 800f08e:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800f090:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f094:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	6852      	ldr	r2, [r2, #4]
 800f09c:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800f09e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f0a2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0a8:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800f0b0:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	689a      	ldr	r2, [r3, #8]
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	691b      	ldr	r3, [r3, #16]
 800f0c0:	431a      	orrs	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	695b      	ldr	r3, [r3, #20]
 800f0c6:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800f0c8:	68fa      	ldr	r2, [r7, #12]
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800f0ce:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f0d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f0d6:	68fa      	ldr	r2, [r7, #12]
 800f0d8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800f0da:	f107 0714 	add.w	r7, r7, #20
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bc80      	pop	{r7}
 800f0e2:	4770      	bx	lr

0800f0e4 <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b083      	sub	sp, #12
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f04f 32ff 	mov.w	r2, #4294967295
 800f0f2:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f04f 0200 	mov.w	r2, #0
 800f0fa:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f04f 0200 	mov.w	r2, #0
 800f102:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f04f 0200 	mov.w	r2, #0
 800f10a:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f04f 0200 	mov.w	r2, #0
 800f112:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f04f 0200 	mov.w	r2, #0
 800f11a:	615a      	str	r2, [r3, #20]
}
 800f11c:	f107 070c 	add.w	r7, r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	bc80      	pop	{r7}
 800f124:	4770      	bx	lr
 800f126:	bf00      	nop

0800f128 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800f128:	b480      	push	{r7}
 800f12a:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800f12c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f130:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800f136:	4618      	mov	r0, r3
 800f138:	46bd      	mov	sp, r7
 800f13a:	bc80      	pop	{r7}
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop

0800f140 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800f140:	b480      	push	{r7}
 800f142:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800f144:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f148:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f14c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f150:	4618      	mov	r0, r3
 800f152:	46bd      	mov	sp, r7
 800f154:	bc80      	pop	{r7}
 800f156:	4770      	bx	lr

0800f158 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800f160:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f164:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800f16e:	f107 070c 	add.w	r7, r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	bc80      	pop	{r7}
 800f176:	4770      	bx	lr

0800f178 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800f178:	b480      	push	{r7}
 800f17a:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800f17c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f180:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800f186:	4618      	mov	r0, r3
 800f188:	46bd      	mov	sp, r7
 800f18a:	bc80      	pop	{r7}
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop

0800f190 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800f19a:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800f19e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f1a2:	79fa      	ldrb	r2, [r7, #7]
 800f1a4:	601a      	str	r2, [r3, #0]
}
 800f1a6:	f107 070c 	add.w	r7, r7, #12
 800f1aa:	46bd      	mov	sp, r7
 800f1ac:	bc80      	pop	{r7}
 800f1ae:	4770      	bx	lr

0800f1b0 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800f1ba:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800f1be:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f1c2:	79fa      	ldrb	r2, [r7, #7]
 800f1c4:	601a      	str	r2, [r3, #0]
}
 800f1c6:	f107 070c 	add.w	r7, r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bc80      	pop	{r7}
 800f1ce:	4770      	bx	lr

0800f1d0 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800f1d8:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800f1dc:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	601a      	str	r2, [r3, #0]
}
 800f1e4:	f107 070c 	add.w	r7, r7, #12
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bc80      	pop	{r7}
 800f1ec:	4770      	bx	lr
 800f1ee:	bf00      	nop

0800f1f0 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800f1f0:	b480      	push	{r7}
 800f1f2:	b083      	sub	sp, #12
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800f1fa:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800f1fe:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f202:	79fa      	ldrb	r2, [r7, #7]
 800f204:	601a      	str	r2, [r3, #0]
}
 800f206:	f107 070c 	add.w	r7, r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bc80      	pop	{r7}
 800f20e:	4770      	bx	lr

0800f210 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	4603      	mov	r3, r0
 800f218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800f21a:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800f21e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f222:	79fa      	ldrb	r2, [r7, #7]
 800f224:	601a      	str	r2, [r3, #0]
}
 800f226:	f107 070c 	add.w	r7, r7, #12
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bc80      	pop	{r7}
 800f22e:	4770      	bx	lr

0800f230 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800f230:	b480      	push	{r7}
 800f232:	b083      	sub	sp, #12
 800f234:	af00      	add	r7, sp, #0
 800f236:	4603      	mov	r3, r0
 800f238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800f23a:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800f23e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f242:	79fa      	ldrb	r2, [r7, #7]
 800f244:	601a      	str	r2, [r3, #0]
}
 800f246:	f107 070c 	add.w	r7, r7, #12
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bc80      	pop	{r7}
 800f24e:	4770      	bx	lr

0800f250 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	4603      	mov	r3, r0
 800f258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800f25a:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800f25e:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f262:	79fa      	ldrb	r2, [r7, #7]
 800f264:	f002 0201 	and.w	r2, r2, #1
 800f268:	2a00      	cmp	r2, #0
 800f26a:	bf14      	ite	ne
 800f26c:	2200      	movne	r2, #0
 800f26e:	2201      	moveq	r2, #1
 800f270:	601a      	str	r2, [r3, #0]
}
 800f272:	f107 070c 	add.w	r7, r7, #12
 800f276:	46bd      	mov	sp, r7
 800f278:	bc80      	pop	{r7}
 800f27a:	4770      	bx	lr

0800f27c <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	4603      	mov	r3, r0
 800f284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800f286:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800f28a:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f28e:	79fa      	ldrb	r2, [r7, #7]
 800f290:	601a      	str	r2, [r3, #0]
}
 800f292:	f107 070c 	add.w	r7, r7, #12
 800f296:	46bd      	mov	sp, r7
 800f298:	bc80      	pop	{r7}
 800f29a:	4770      	bx	lr

0800f29c <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b083      	sub	sp, #12
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800f2a6:	f248 538c 	movw	r3, #34188	; 0x858c
 800f2aa:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800f2ae:	79fa      	ldrb	r2, [r7, #7]
 800f2b0:	601a      	str	r2, [r3, #0]
}
 800f2b2:	f107 070c 	add.w	r7, r7, #12
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bc80      	pop	{r7}
 800f2ba:	4770      	bx	lr

0800f2bc <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f2c8:	78fb      	ldrb	r3, [r7, #3]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00c      	beq.n	800f2e8 <SDIO_ITConfig+0x2c>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800f2ce:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f2d2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f2d6:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800f2da:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f2de:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	430a      	orrs	r2, r1
 800f2e4:	63da      	str	r2, [r3, #60]	; 0x3c
 800f2e6:	e00d      	b.n	800f304 <SDIO_ITConfig+0x48>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800f2e8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f2ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f2f0:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800f2f4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f2f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	ea6f 0202 	mvn.w	r2, r2
 800f300:	400a      	ands	r2, r1
 800f302:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800f304:	f107 070c 	add.w	r7, r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	bc80      	pop	{r7}
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop

0800f310 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800f310:	b480      	push	{r7}
 800f312:	b085      	sub	sp, #20
 800f314:	af00      	add	r7, sp, #0
 800f316:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800f318:	f04f 0300 	mov.w	r3, #0
 800f31c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800f31e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f322:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	4013      	ands	r3, r2
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d003      	beq.n	800f338 <SDIO_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800f330:	f04f 0301 	mov.w	r3, #1
 800f334:	73fb      	strb	r3, [r7, #15]
 800f336:	e002      	b.n	800f33e <SDIO_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800f338:	f04f 0300 	mov.w	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f33e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f340:	4618      	mov	r0, r3
 800f342:	f107 0714 	add.w	r7, r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	bc80      	pop	{r7}
 800f34a:	4770      	bx	lr

0800f34c <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800f34c:	b480      	push	{r7}
 800f34e:	b083      	sub	sp, #12
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800f354:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f358:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f360:	f107 070c 	add.w	r7, r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	bc80      	pop	{r7}
 800f368:	4770      	bx	lr
 800f36a:	bf00      	nop

0800f36c <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800f36c:	b480      	push	{r7}
 800f36e:	b085      	sub	sp, #20
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800f374:	f04f 0300 	mov.w	r3, #0
 800f378:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800f37a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f37e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4013      	ands	r3, r2
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d003      	beq.n	800f394 <SDIO_GetITStatus+0x28>
  {
    bitstatus = SET;
 800f38c:	f04f 0301 	mov.w	r3, #1
 800f390:	73fb      	strb	r3, [r7, #15]
 800f392:	e002      	b.n	800f39a <SDIO_GetITStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800f394:	f04f 0300 	mov.w	r3, #0
 800f398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f39a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f39c:	4618      	mov	r0, r3
 800f39e:	f107 0714 	add.w	r7, r7, #20
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	bc80      	pop	{r7}
 800f3a6:	4770      	bx	lr

0800f3a8 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800f3a8:	b480      	push	{r7}
 800f3aa:	b083      	sub	sp, #12
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800f3b0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f3b4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 800f3bc:	f107 070c 	add.w	r7, r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bc80      	pop	{r7}
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800f3d0:	687a      	ldr	r2, [r7, #4]
 800f3d2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800f3d6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d10c      	bne.n	800f3f8 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800f3de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f3e2:	f04f 0101 	mov.w	r1, #1
 800f3e6:	f7fd fcc5 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800f3ea:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f3ee:	f04f 0100 	mov.w	r1, #0
 800f3f2:	f7fd fcbf 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 800f3f6:	e026      	b.n	800f446 <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800f3f8:	687a      	ldr	r2, [r7, #4]
 800f3fa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f3fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f402:	429a      	cmp	r2, r3
 800f404:	d10c      	bne.n	800f420 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800f406:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f40a:	f04f 0101 	mov.w	r1, #1
 800f40e:	f7fd fc87 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800f412:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f416:	f04f 0100 	mov.w	r1, #0
 800f41a:	f7fd fc81 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800f41e:	e012      	b.n	800f446 <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800f420:	687a      	ldr	r2, [r7, #4]
 800f422:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f426:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d10b      	bne.n	800f446 <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800f42e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f432:	f04f 0101 	mov.w	r1, #1
 800f436:	f7fd fc73 	bl	800cd20 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800f43a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800f43e:	f04f 0100 	mov.w	r1, #0
 800f442:	f7fd fc6d 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800f446:	f107 0708 	add.w	r7, r7, #8
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop

0800f450 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800f45a:	f04f 0300 	mov.w	r3, #0
 800f45e:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	881b      	ldrh	r3, [r3, #0]
 800f464:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800f466:	89fb      	ldrh	r3, [r7, #14]
 800f468:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800f46c:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	881a      	ldrh	r2, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	885b      	ldrh	r3, [r3, #2]
 800f476:	4313      	orrs	r3, r2
 800f478:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f47e:	4313      	orrs	r3, r2
 800f480:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f486:	4313      	orrs	r3, r2
 800f488:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f48e:	4313      	orrs	r3, r2
 800f490:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f496:	4313      	orrs	r3, r2
 800f498:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f49e:	4313      	orrs	r3, r2
 800f4a0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	89fb      	ldrh	r3, [r7, #14]
 800f4ac:	4313      	orrs	r3, r2
 800f4ae:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	89fa      	ldrh	r2, [r7, #14]
 800f4b4:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8b9b      	ldrh	r3, [r3, #28]
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f4c0:	b29a      	uxth	r2, r3
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	8a1a      	ldrh	r2, [r3, #16]
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	821a      	strh	r2, [r3, #16]
}
 800f4ce:	f107 0714 	add.w	r7, r7, #20
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	bc80      	pop	{r7}
 800f4d6:	4770      	bx	lr

0800f4d8 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b08b      	sub	sp, #44	; 0x2c
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800f4e2:	f04f 0300 	mov.w	r3, #0
 800f4e6:	837b      	strh	r3, [r7, #26]
 800f4e8:	f04f 0302 	mov.w	r3, #2
 800f4ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f4ee:	f04f 0300 	mov.w	r3, #0
 800f4f2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f4f4:	f04f 0301 	mov.w	r3, #1
 800f4f8:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800f4fa:	f04f 0300 	mov.w	r3, #0
 800f4fe:	61fb      	str	r3, [r7, #28]
 800f500:	f04f 0300 	mov.w	r3, #0
 800f504:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800f506:	f04f 0300 	mov.w	r3, #0
 800f50a:	613b      	str	r3, [r7, #16]
 800f50c:	f04f 0300 	mov.w	r3, #0
 800f510:	60fb      	str	r3, [r7, #12]
 800f512:	f04f 0300 	mov.w	r3, #0
 800f516:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	8b9b      	ldrh	r3, [r3, #28]
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800f522:	f023 031f 	bic.w	r3, r3, #31
 800f526:	b29a      	uxth	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f04f 0202 	mov.w	r2, #2
 800f532:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	8b9b      	ldrh	r3, [r3, #28]
 800f538:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	689b      	ldr	r3, [r3, #8]
 800f53e:	2b02      	cmp	r3, #2
 800f540:	d106      	bne.n	800f550 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800f542:	f04f 0300 	mov.w	r3, #0
 800f546:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800f548:	f04f 0302 	mov.w	r3, #2
 800f54c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800f54e:	e09a      	b.n	800f686 <I2S_Init+0x1ae>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	889b      	ldrh	r3, [r3, #4]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d103      	bne.n	800f560 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800f558:	f04f 0301 	mov.w	r3, #1
 800f55c:	847b      	strh	r3, [r7, #34]	; 0x22
 800f55e:	e002      	b.n	800f566 <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800f560:	f04f 0302 	mov.w	r3, #2
 800f564:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800f566:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f56a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f574:	2b00      	cmp	r3, #0
 800f576:	d00b      	beq.n	800f590 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800f578:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f57c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f580:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800f584:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800f588:	6892      	ldr	r2, [r2, #8]
 800f58a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800f58e:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800f590:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f594:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f598:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800f59c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800f5a0:	4013      	ands	r3, r2
 800f5a2:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800f5a6:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800f5aa:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800f5ae:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800f5b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f5b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f5b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5bc:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800f5c0:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800f5c4:	f003 0307 	and.w	r3, r3, #7
 800f5c8:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800f5ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f5ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800f5d2:	685b      	ldr	r3, [r3, #4]
 800f5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5d8:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800f5da:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800f5de:	f2c0 037a 	movt	r3, #122	; 0x7a
 800f5e2:	693a      	ldr	r2, [r7, #16]
 800f5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5e8:	68fa      	ldr	r2, [r7, #12]
 800f5ea:	fb02 f203 	mul.w	r2, r2, r3
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5f4:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	88db      	ldrh	r3, [r3, #6]
 800f5fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5fe:	d113      	bne.n	800f628 <I2S_Init+0x150>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800f606:	4613      	mov	r3, r2
 800f608:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f60c:	189b      	adds	r3, r3, r2
 800f60e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f612:	461a      	mov	r2, r3
 800f614:	683b      	ldr	r3, [r7, #0]
 800f616:	689b      	ldr	r3, [r3, #8]
 800f618:	fbb2 f3f3 	udiv	r3, r2, r3
 800f61c:	b29b      	uxth	r3, r3
 800f61e:	f103 0305 	add.w	r3, r3, #5
 800f622:	b29b      	uxth	r3, r3
 800f624:	61fb      	str	r3, [r7, #28]
 800f626:	e015      	b.n	800f654 <I2S_Init+0x17c>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800f628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f62a:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800f62e:	697a      	ldr	r2, [r7, #20]
 800f630:	fbb2 f2f3 	udiv	r2, r2, r3
 800f634:	4613      	mov	r3, r2
 800f636:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f63a:	189b      	adds	r3, r3, r2
 800f63c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f640:	461a      	mov	r2, r3
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	fbb2 f3f3 	udiv	r3, r2, r3
 800f64a:	b29b      	uxth	r3, r3
 800f64c:	f103 0305 	add.w	r3, r3, #5
 800f650:	b29b      	uxth	r3, r3
 800f652:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800f654:	69fa      	ldr	r2, [r7, #28]
 800f656:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800f65a:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800f65e:	fba3 1302 	umull	r1, r3, r3, r2
 800f662:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800f666:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800f668:	69fb      	ldr	r3, [r7, #28]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	f003 0301 	and.w	r3, r3, #1
 800f670:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800f672:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f674:	69fa      	ldr	r2, [r7, #28]
 800f676:	1ad3      	subs	r3, r2, r3
 800f678:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800f67c:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800f67e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f680:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f684:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800f686:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d902      	bls.n	800f692 <I2S_Init+0x1ba>
 800f68c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f68e:	2bff      	cmp	r3, #255	; 0xff
 800f690:	d905      	bls.n	800f69e <I2S_Init+0x1c6>
  {
    /* Set the default values */
    i2sdiv = 2;
 800f692:	f04f 0302 	mov.w	r3, #2
 800f696:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800f698:	f04f 0300 	mov.w	r3, #0
 800f69c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800f69e:	683b      	ldr	r3, [r7, #0]
 800f6a0:	88da      	ldrh	r2, [r3, #6]
 800f6a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f6a4:	4313      	orrs	r3, r2
 800f6a6:	b29a      	uxth	r2, r3
 800f6a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f6aa:	4313      	orrs	r3, r2
 800f6ac:	b29a      	uxth	r2, r3
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	8859      	ldrh	r1, [r3, #2]
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f6c2:	4303      	orrs	r3, r0
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	430b      	orrs	r3, r1
 800f6c8:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800f6ca:	4313      	orrs	r3, r2
 800f6cc:	b29a      	uxth	r2, r3
 800f6ce:	8b7b      	ldrh	r3, [r7, #26]
 800f6d0:	4313      	orrs	r3, r2
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f6d8:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	8b7a      	ldrh	r2, [r7, #26]
 800f6de:	839a      	strh	r2, [r3, #28]
}
 800f6e0:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800f6e4:	46bd      	mov	sp, r7
 800f6e6:	bc80      	pop	{r7}
 800f6e8:	4770      	bx	lr
 800f6ea:	bf00      	nop

0800f6ec <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f04f 0200 	mov.w	r2, #0
 800f6fa:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f04f 0200 	mov.w	r2, #0
 800f702:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f04f 0200 	mov.w	r2, #0
 800f70a:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f04f 0200 	mov.w	r2, #0
 800f712:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f04f 0200 	mov.w	r2, #0
 800f71a:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f04f 0200 	mov.w	r2, #0
 800f722:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f04f 0200 	mov.w	r2, #0
 800f72a:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f04f 0200 	mov.w	r2, #0
 800f732:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f04f 0207 	mov.w	r2, #7
 800f73a:	821a      	strh	r2, [r3, #16]
}
 800f73c:	f107 070c 	add.w	r7, r7, #12
 800f740:	46bd      	mov	sp, r7
 800f742:	bc80      	pop	{r7}
 800f744:	4770      	bx	lr
 800f746:	bf00      	nop

0800f748 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f04f 0200 	mov.w	r2, #0
 800f756:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	f04f 0200 	mov.w	r2, #0
 800f75e:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	f04f 0200 	mov.w	r2, #0
 800f766:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f04f 0200 	mov.w	r2, #0
 800f76e:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f04f 0202 	mov.w	r2, #2
 800f776:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f04f 0200 	mov.w	r2, #0
 800f77e:	819a      	strh	r2, [r3, #12]
}
 800f780:	f107 070c 	add.w	r7, r7, #12
 800f784:	46bd      	mov	sp, r7
 800f786:	bc80      	pop	{r7}
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop

0800f78c <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b083      	sub	sp, #12
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
 800f794:	460b      	mov	r3, r1
 800f796:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f798:	78fb      	ldrb	r3, [r7, #3]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d008      	beq.n	800f7b0 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	881b      	ldrh	r3, [r3, #0]
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7a8:	b29a      	uxth	r2, r3
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	801a      	strh	r2, [r3, #0]
 800f7ae:	e007      	b.n	800f7c0 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	881b      	ldrh	r3, [r3, #0]
 800f7b4:	b29b      	uxth	r3, r3
 800f7b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	801a      	strh	r2, [r3, #0]
  }
}
 800f7c0:	f107 070c 	add.w	r7, r7, #12
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	bc80      	pop	{r7}
 800f7c8:	4770      	bx	lr
 800f7ca:	bf00      	nop

0800f7cc <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f7cc:	b480      	push	{r7}
 800f7ce:	b083      	sub	sp, #12
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f7d8:	78fb      	ldrb	r3, [r7, #3]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d008      	beq.n	800f7f0 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	8b9b      	ldrh	r3, [r3, #28]
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	839a      	strh	r2, [r3, #28]
 800f7ee:	e007      	b.n	800f800 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	8b9b      	ldrh	r3, [r3, #28]
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	839a      	strh	r2, [r3, #28]
  }
}
 800f800:	f107 070c 	add.w	r7, r7, #12
 800f804:	46bd      	mov	sp, r7
 800f806:	bc80      	pop	{r7}
 800f808:	4770      	bx	lr
 800f80a:	bf00      	nop

0800f80c <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800f80c:	b480      	push	{r7}
 800f80e:	b083      	sub	sp, #12
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
 800f814:	460b      	mov	r3, r1
 800f816:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	881b      	ldrh	r3, [r3, #0]
 800f81c:	b29b      	uxth	r3, r3
 800f81e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f822:	b29a      	uxth	r2, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	881b      	ldrh	r3, [r3, #0]
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	887b      	ldrh	r3, [r7, #2]
 800f830:	4313      	orrs	r3, r2
 800f832:	b29a      	uxth	r2, r3
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	801a      	strh	r2, [r3, #0]
}
 800f838:	f107 070c 	add.w	r7, r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bc80      	pop	{r7}
 800f840:	4770      	bx	lr
 800f842:	bf00      	nop

0800f844 <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	460b      	mov	r3, r1
 800f84e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800f850:	887b      	ldrh	r3, [r7, #2]
 800f852:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f856:	d108      	bne.n	800f86a <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	881b      	ldrh	r3, [r3, #0]
 800f85c:	b29b      	uxth	r3, r3
 800f85e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f862:	b29a      	uxth	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	801a      	strh	r2, [r3, #0]
 800f868:	e007      	b.n	800f87a <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	881b      	ldrh	r3, [r3, #0]
 800f86e:	b29b      	uxth	r3, r3
 800f870:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f874:	b29a      	uxth	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	801a      	strh	r2, [r3, #0]
  }
}
 800f87a:	f107 070c 	add.w	r7, r7, #12
 800f87e:	46bd      	mov	sp, r7
 800f880:	bc80      	pop	{r7}
 800f882:	4770      	bx	lr

0800f884 <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800f884:	b480      	push	{r7}
 800f886:	b083      	sub	sp, #12
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	460b      	mov	r3, r1
 800f88e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800f890:	887a      	ldrh	r2, [r7, #2]
 800f892:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f896:	429a      	cmp	r2, r3
 800f898:	d008      	beq.n	800f8ac <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	881b      	ldrh	r3, [r3, #0]
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f8a4:	b29a      	uxth	r2, r3
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	801a      	strh	r2, [r3, #0]
 800f8aa:	e007      	b.n	800f8bc <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	b29b      	uxth	r3, r3
 800f8b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	801a      	strh	r2, [r3, #0]
  }
}
 800f8bc:	f107 070c 	add.w	r7, r7, #12
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bc80      	pop	{r7}
 800f8c4:	4770      	bx	lr
 800f8c6:	bf00      	nop

0800f8c8 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f8d4:	78fb      	ldrb	r3, [r7, #3]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d008      	beq.n	800f8ec <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	889b      	ldrh	r3, [r3, #4]
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	f043 0304 	orr.w	r3, r3, #4
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	809a      	strh	r2, [r3, #4]
 800f8ea:	e007      	b.n	800f8fc <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	889b      	ldrh	r3, [r3, #4]
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	f023 0304 	bic.w	r3, r3, #4
 800f8f6:	b29a      	uxth	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	809a      	strh	r2, [r3, #4]
  }
}
 800f8fc:	f107 070c 	add.w	r7, r7, #12
 800f900:	46bd      	mov	sp, r7
 800f902:	bc80      	pop	{r7}
 800f904:	4770      	bx	lr
 800f906:	bf00      	nop

0800f908 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f908:	b480      	push	{r7}
 800f90a:	b083      	sub	sp, #12
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	460b      	mov	r3, r1
 800f912:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f914:	78fb      	ldrb	r3, [r7, #3]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d008      	beq.n	800f92c <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	889b      	ldrh	r3, [r3, #4]
 800f91e:	b29b      	uxth	r3, r3
 800f920:	f043 0310 	orr.w	r3, r3, #16
 800f924:	b29a      	uxth	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	809a      	strh	r2, [r3, #4]
 800f92a:	e007      	b.n	800f93c <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	889b      	ldrh	r3, [r3, #4]
 800f930:	b29b      	uxth	r3, r3
 800f932:	f023 0310 	bic.w	r3, r3, #16
 800f936:	b29a      	uxth	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	809a      	strh	r2, [r3, #4]
  }
}
 800f93c:	f107 070c 	add.w	r7, r7, #12
 800f940:	46bd      	mov	sp, r7
 800f942:	bc80      	pop	{r7}
 800f944:	4770      	bx	lr
 800f946:	bf00      	nop

0800f948 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800f948:	b480      	push	{r7}
 800f94a:	b085      	sub	sp, #20
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
 800f950:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800f952:	f04f 0300 	mov.w	r3, #0
 800f956:	81bb      	strh	r3, [r7, #12]
 800f958:	f04f 0300 	mov.w	r3, #0
 800f95c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	8b9b      	ldrh	r3, [r3, #28]
 800f962:	b29b      	uxth	r3, r3
 800f964:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800f968:	f023 031f 	bic.w	r3, r3, #31
 800f96c:	b29a      	uxth	r2, r3
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f04f 0202 	mov.w	r2, #2
 800f978:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	8b9b      	ldrh	r3, [r3, #28]
 800f97e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	881b      	ldrh	r3, [r3, #0]
 800f984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f988:	d003      	beq.n	800f992 <I2S_FullDuplexConfig+0x4a>
 800f98a:	683b      	ldr	r3, [r7, #0]
 800f98c:	881b      	ldrh	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d103      	bne.n	800f99a <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 800f992:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f996:	81fb      	strh	r3, [r7, #14]
 800f998:	e00c      	b.n	800f9b4 <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	881b      	ldrh	r3, [r3, #0]
 800f99e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f9a2:	d004      	beq.n	800f9ae <I2S_FullDuplexConfig+0x66>
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f9ac:	d102      	bne.n	800f9b4 <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 800f9ae:	f04f 0300 	mov.w	r3, #0
 800f9b2:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f9b4:	683b      	ldr	r3, [r7, #0]
 800f9b6:	885a      	ldrh	r2, [r3, #2]
 800f9b8:	683b      	ldr	r3, [r7, #0]
 800f9ba:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f9c0:	430b      	orrs	r3, r1
 800f9c2:	b29b      	uxth	r3, r3
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800f9c8:	89fb      	ldrh	r3, [r7, #14]
 800f9ca:	4313      	orrs	r3, r2
 800f9cc:	b29a      	uxth	r2, r3
 800f9ce:	89bb      	ldrh	r3, [r7, #12]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f9d8:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	89ba      	ldrh	r2, [r7, #12]
 800f9de:	839a      	strh	r2, [r3, #28]
}
 800f9e0:	f107 0714 	add.w	r7, r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bc80      	pop	{r7}
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop

0800f9ec <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b083      	sub	sp, #12
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	899b      	ldrh	r3, [r3, #12]
 800f9f8:	b29b      	uxth	r3, r3
}
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f107 070c 	add.w	r7, r7, #12
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bc80      	pop	{r7}
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop

0800fa08 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
 800fa10:	460b      	mov	r3, r1
 800fa12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	887a      	ldrh	r2, [r7, #2]
 800fa18:	819a      	strh	r2, [r3, #12]
}
 800fa1a:	f107 070c 	add.w	r7, r7, #12
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	bc80      	pop	{r7}
 800fa22:	4770      	bx	lr

0800fa24 <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b083      	sub	sp, #12
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800fa30:	78fb      	ldrb	r3, [r7, #3]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d008      	beq.n	800fa48 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	881b      	ldrh	r3, [r3, #0]
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa40:	b29a      	uxth	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	801a      	strh	r2, [r3, #0]
 800fa46:	e007      	b.n	800fa58 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fa52:	b29a      	uxth	r2, r3
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	801a      	strh	r2, [r3, #0]
  }
}
 800fa58:	f107 070c 	add.w	r7, r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bc80      	pop	{r7}
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop

0800fa64 <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fa76:	b29a      	uxth	r2, r3
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	801a      	strh	r2, [r3, #0]
}
 800fa7c:	f107 070c 	add.w	r7, r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bc80      	pop	{r7}
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop

0800fa88 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	460b      	mov	r3, r1
 800fa92:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800fa94:	f04f 0300 	mov.w	r3, #0
 800fa98:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800fa9a:	78fb      	ldrb	r3, [r7, #3]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d003      	beq.n	800faa8 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	8b1b      	ldrh	r3, [r3, #24]
 800faa4:	81fb      	strh	r3, [r7, #14]
 800faa6:	e002      	b.n	800faae <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	8a9b      	ldrh	r3, [r3, #20]
 800faac:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800faae:	89fb      	ldrh	r3, [r7, #14]
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	f107 0714 	add.w	r7, r7, #20
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bc80      	pop	{r7}
 800faba:	4770      	bx	lr

0800fabc <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	8a1b      	ldrh	r3, [r3, #16]
 800fac8:	b29b      	uxth	r3, r3
}
 800faca:	4618      	mov	r0, r3
 800facc:	f107 070c 	add.w	r7, r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bc80      	pop	{r7}
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop

0800fad8 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	4613      	mov	r3, r2
 800fae2:	460a      	mov	r2, r1
 800fae4:	807a      	strh	r2, [r7, #2]
 800fae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800fae8:	787b      	ldrb	r3, [r7, #1]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d008      	beq.n	800fb00 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	889b      	ldrh	r3, [r3, #4]
 800faf2:	b29a      	uxth	r2, r3
 800faf4:	887b      	ldrh	r3, [r7, #2]
 800faf6:	4313      	orrs	r3, r2
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	809a      	strh	r2, [r3, #4]
 800fafe:	e00a      	b.n	800fb16 <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	889b      	ldrh	r3, [r3, #4]
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	887b      	ldrh	r3, [r7, #2]
 800fb08:	ea6f 0303 	mvn.w	r3, r3
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	4013      	ands	r3, r2
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	809a      	strh	r2, [r3, #4]
  }
}
 800fb16:	f107 070c 	add.w	r7, r7, #12
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bc80      	pop	{r7}
 800fb1e:	4770      	bx	lr

0800fb20 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800fb20:	b480      	push	{r7}
 800fb22:	b085      	sub	sp, #20
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	6078      	str	r0, [r7, #4]
 800fb28:	4613      	mov	r3, r2
 800fb2a:	460a      	mov	r2, r1
 800fb2c:	70fa      	strb	r2, [r7, #3]
 800fb2e:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800fb30:	f04f 0300 	mov.w	r3, #0
 800fb34:	81fb      	strh	r3, [r7, #14]
 800fb36:	f04f 0300 	mov.w	r3, #0
 800fb3a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800fb3c:	78fb      	ldrb	r3, [r7, #3]
 800fb3e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800fb46:	89fb      	ldrh	r3, [r7, #14]
 800fb48:	f04f 0201 	mov.w	r2, #1
 800fb4c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb50:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800fb52:	78bb      	ldrb	r3, [r7, #2]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d008      	beq.n	800fb6a <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	889b      	ldrh	r3, [r3, #4]
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	89bb      	ldrh	r3, [r7, #12]
 800fb60:	4313      	orrs	r3, r2
 800fb62:	b29a      	uxth	r2, r3
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	809a      	strh	r2, [r3, #4]
 800fb68:	e00a      	b.n	800fb80 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	889b      	ldrh	r3, [r3, #4]
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	89bb      	ldrh	r3, [r7, #12]
 800fb72:	ea6f 0303 	mvn.w	r3, r3
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	4013      	ands	r3, r2
 800fb7a:	b29a      	uxth	r2, r3
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	809a      	strh	r2, [r3, #4]
  }
}
 800fb80:	f107 0714 	add.w	r7, r7, #20
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bc80      	pop	{r7}
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop

0800fb8c <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b085      	sub	sp, #20
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	460b      	mov	r3, r1
 800fb96:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800fb98:	f04f 0300 	mov.w	r3, #0
 800fb9c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	891b      	ldrh	r3, [r3, #8]
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	887b      	ldrh	r3, [r7, #2]
 800fba6:	4013      	ands	r3, r2
 800fba8:	b29b      	uxth	r3, r3
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800fbae:	f04f 0301 	mov.w	r3, #1
 800fbb2:	73fb      	strb	r3, [r7, #15]
 800fbb4:	e002      	b.n	800fbbc <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800fbb6:	f04f 0300 	mov.w	r3, #0
 800fbba:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800fbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	f107 0714 	add.w	r7, r7, #20
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	bc80      	pop	{r7}
 800fbc8:	4770      	bx	lr
 800fbca:	bf00      	nop

0800fbcc <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800fbd8:	887b      	ldrh	r3, [r7, #2]
 800fbda:	ea6f 0303 	mvn.w	r3, r3
 800fbde:	b29a      	uxth	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	811a      	strh	r2, [r3, #8]
}
 800fbe4:	f107 070c 	add.w	r7, r7, #12
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bc80      	pop	{r7}
 800fbec:	4770      	bx	lr
 800fbee:	bf00      	nop

0800fbf0 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800fbf0:	b480      	push	{r7}
 800fbf2:	b085      	sub	sp, #20
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800fbfc:	f04f 0300 	mov.w	r3, #0
 800fc00:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800fc02:	f04f 0300 	mov.w	r3, #0
 800fc06:	81bb      	strh	r3, [r7, #12]
 800fc08:	f04f 0300 	mov.w	r3, #0
 800fc0c:	817b      	strh	r3, [r7, #10]
 800fc0e:	f04f 0300 	mov.w	r3, #0
 800fc12:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800fc14:	78fb      	ldrb	r3, [r7, #3]
 800fc16:	f003 030f 	and.w	r3, r3, #15
 800fc1a:	f04f 0201 	mov.w	r2, #1
 800fc1e:	fa02 f303 	lsl.w	r3, r2, r3
 800fc22:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800fc24:	78fb      	ldrb	r3, [r7, #3]
 800fc26:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800fc2a:	b2db      	uxtb	r3, r3
 800fc2c:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800fc2e:	897b      	ldrh	r3, [r7, #10]
 800fc30:	f04f 0201 	mov.w	r2, #1
 800fc34:	fa02 f303 	lsl.w	r3, r2, r3
 800fc38:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	889b      	ldrh	r3, [r3, #4]
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	897b      	ldrh	r3, [r7, #10]
 800fc42:	4013      	ands	r3, r2
 800fc44:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	891b      	ldrh	r3, [r3, #8]
 800fc4a:	b29a      	uxth	r2, r3
 800fc4c:	89bb      	ldrh	r3, [r7, #12]
 800fc4e:	4013      	ands	r3, r2
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d006      	beq.n	800fc64 <SPI_I2S_GetITStatus+0x74>
 800fc56:	893b      	ldrh	r3, [r7, #8]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d003      	beq.n	800fc64 <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800fc5c:	f04f 0301 	mov.w	r3, #1
 800fc60:	73fb      	strb	r3, [r7, #15]
 800fc62:	e002      	b.n	800fc6a <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800fc64:	f04f 0300 	mov.w	r3, #0
 800fc68:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800fc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f107 0714 	add.w	r7, r7, #20
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bc80      	pop	{r7}
 800fc76:	4770      	bx	lr

0800fc78 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800fc78:	b480      	push	{r7}
 800fc7a:	b085      	sub	sp, #20
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	460b      	mov	r3, r1
 800fc82:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800fc84:	f04f 0300 	mov.w	r3, #0
 800fc88:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800fc8a:	78fb      	ldrb	r3, [r7, #3]
 800fc8c:	f003 030f 	and.w	r3, r3, #15
 800fc90:	f04f 0201 	mov.w	r2, #1
 800fc94:	fa02 f303 	lsl.w	r3, r2, r3
 800fc98:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800fc9a:	89fb      	ldrh	r3, [r7, #14]
 800fc9c:	ea6f 0303 	mvn.w	r3, r3
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	811a      	strh	r2, [r3, #8]
}
 800fca6:	f107 0714 	add.w	r7, r7, #20
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bc80      	pop	{r7}
 800fcae:	4770      	bx	lr

0800fcb0 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800fcb4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800fcb8:	f04f 0101 	mov.w	r1, #1
 800fcbc:	f7fd f85a 	bl	800cd74 <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800fcc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800fcc4:	f04f 0100 	mov.w	r1, #0
 800fcc8:	f7fd f854 	bl	800cd74 <RCC_APB2PeriphResetCmd>
}
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop

0800fcd0 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b083      	sub	sp, #12
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800fcda:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800fcde:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fce2:	79fa      	ldrb	r2, [r7, #7]
 800fce4:	601a      	str	r2, [r3, #0]
}
 800fce6:	f107 070c 	add.w	r7, r7, #12
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bc80      	pop	{r7}
 800fcee:	4770      	bx	lr

0800fcf0 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800fcf0:	b490      	push	{r4, r7}
 800fcf2:	b084      	sub	sp, #16
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	4602      	mov	r2, r0
 800fcf8:	460b      	mov	r3, r1
 800fcfa:	71fa      	strb	r2, [r7, #7]
 800fcfc:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800fcfe:	f04f 0300 	mov.w	r3, #0
 800fd02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800fd04:	79bb      	ldrb	r3, [r7, #6]
 800fd06:	f003 0303 	and.w	r3, r3, #3
 800fd0a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fd0e:	f04f 020f 	mov.w	r2, #15
 800fd12:	fa02 f303 	lsl.w	r3, r2, r3
 800fd16:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800fd18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800fd1c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fd20:	79ba      	ldrb	r2, [r7, #6]
 800fd22:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800fd26:	b2d2      	uxtb	r2, r2
 800fd28:	4610      	mov	r0, r2
 800fd2a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800fd2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800fd32:	79b9      	ldrb	r1, [r7, #6]
 800fd34:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800fd38:	b2c9      	uxtb	r1, r1
 800fd3a:	f101 0102 	add.w	r1, r1, #2
 800fd3e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800fd42:	68fa      	ldr	r2, [r7, #12]
 800fd44:	ea6f 0202 	mvn.w	r2, r2
 800fd48:	4011      	ands	r1, r2
 800fd4a:	f100 0202 	add.w	r2, r0, #2
 800fd4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800fd52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800fd56:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fd5a:	79ba      	ldrb	r2, [r7, #6]
 800fd5c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800fd60:	b2d2      	uxtb	r2, r2
 800fd62:	4610      	mov	r0, r2
 800fd64:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800fd68:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800fd6c:	79b9      	ldrb	r1, [r7, #6]
 800fd6e:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800fd72:	b2c9      	uxtb	r1, r1
 800fd74:	f101 0102 	add.w	r1, r1, #2
 800fd78:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800fd7c:	79fc      	ldrb	r4, [r7, #7]
 800fd7e:	79ba      	ldrb	r2, [r7, #6]
 800fd80:	f002 0203 	and.w	r2, r2, #3
 800fd84:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800fd88:	fa04 f202 	lsl.w	r2, r4, r2
 800fd8c:	4311      	orrs	r1, r2
 800fd8e:	f100 0202 	add.w	r2, r0, #2
 800fd92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800fd96:	f107 0710 	add.w	r7, r7, #16
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bc90      	pop	{r4, r7}
 800fd9e:	4770      	bx	lr

0800fda0 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800fda8:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800fdac:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800fdb0:	687a      	ldr	r2, [r7, #4]
 800fdb2:	601a      	str	r2, [r3, #0]
}
 800fdb4:	f107 070c 	add.w	r7, r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bc80      	pop	{r7}
 800fdbc:	4770      	bx	lr
 800fdbe:	bf00      	nop

0800fdc0 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800fdc0:	b480      	push	{r7}
 800fdc2:	b083      	sub	sp, #12
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800fdca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fdce:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800fdd2:	79fa      	ldrb	r2, [r7, #7]
 800fdd4:	601a      	str	r2, [r3, #0]
}
 800fdd6:	f107 070c 	add.w	r7, r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bc80      	pop	{r7}
 800fdde:	4770      	bx	lr

0800fde0 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800fde0:	b480      	push	{r7}
 800fde2:	b083      	sub	sp, #12
 800fde4:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800fde6:	f04f 0300 	mov.w	r3, #0
 800fdea:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800fdec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800fdf0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fdf4:	6a1b      	ldr	r3, [r3, #32]
 800fdf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d003      	beq.n	800fe06 <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800fdfe:	f04f 0301 	mov.w	r3, #1
 800fe02:	71fb      	strb	r3, [r7, #7]
 800fe04:	e002      	b.n	800fe0c <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800fe06:	f04f 0300 	mov.w	r3, #0
 800fe0a:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800fe0c:	79fb      	ldrb	r3, [r7, #7]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	f107 070c 	add.w	r7, r7, #12
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bc80      	pop	{r7}
 800fe18:	4770      	bx	lr
 800fe1a:	bf00      	nop

0800fe1c <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800fe24:	687a      	ldr	r2, [r7, #4]
 800fe26:	f04f 0300 	mov.w	r3, #0
 800fe2a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d10c      	bne.n	800fe4c <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800fe32:	f04f 0001 	mov.w	r0, #1
 800fe36:	f04f 0101 	mov.w	r1, #1
 800fe3a:	f7fc ff9b 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800fe3e:	f04f 0001 	mov.w	r0, #1
 800fe42:	f04f 0100 	mov.w	r1, #0
 800fe46:	f7fc ff95 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 800fe4a:	e0ff      	b.n	801004c <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fe52:	d10c      	bne.n	800fe6e <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800fe54:	f04f 0001 	mov.w	r0, #1
 800fe58:	f04f 0101 	mov.w	r1, #1
 800fe5c:	f7fc ff60 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800fe60:	f04f 0001 	mov.w	r0, #1
 800fe64:	f04f 0100 	mov.w	r1, #0
 800fe68:	f7fc ff5a 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800fe6c:	e0ee      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800fe6e:	687a      	ldr	r2, [r7, #4]
 800fe70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fe78:	429a      	cmp	r2, r3
 800fe7a:	d10c      	bne.n	800fe96 <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800fe7c:	f04f 0002 	mov.w	r0, #2
 800fe80:	f04f 0101 	mov.w	r1, #1
 800fe84:	f7fc ff4c 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800fe88:	f04f 0002 	mov.w	r0, #2
 800fe8c:	f04f 0100 	mov.w	r1, #0
 800fe90:	f7fc ff46 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800fe94:	e0da      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fe9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d10c      	bne.n	800febe <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800fea4:	f04f 0004 	mov.w	r0, #4
 800fea8:	f04f 0101 	mov.w	r1, #1
 800feac:	f7fc ff38 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800feb0:	f04f 0004 	mov.w	r0, #4
 800feb4:	f04f 0100 	mov.w	r1, #0
 800feb8:	f7fc ff32 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800febc:	e0c6      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800febe:	687a      	ldr	r2, [r7, #4]
 800fec0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800fec4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fec8:	429a      	cmp	r2, r3
 800feca:	d10c      	bne.n	800fee6 <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800fecc:	f04f 0008 	mov.w	r0, #8
 800fed0:	f04f 0101 	mov.w	r1, #1
 800fed4:	f7fc ff24 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800fed8:	f04f 0008 	mov.w	r0, #8
 800fedc:	f04f 0100 	mov.w	r1, #0
 800fee0:	f7fc ff1e 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800fee4:	e0b2      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800fee6:	687a      	ldr	r2, [r7, #4]
 800fee8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800feec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d10c      	bne.n	800ff0e <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800fef4:	f04f 0010 	mov.w	r0, #16
 800fef8:	f04f 0101 	mov.w	r1, #1
 800fefc:	f7fc ff10 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800ff00:	f04f 0010 	mov.w	r0, #16
 800ff04:	f04f 0100 	mov.w	r1, #0
 800ff08:	f7fc ff0a 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800ff0c:	e09e      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ff14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d10c      	bne.n	800ff36 <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800ff1c:	f04f 0020 	mov.w	r0, #32
 800ff20:	f04f 0101 	mov.w	r1, #1
 800ff24:	f7fc fefc 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800ff28:	f04f 0020 	mov.w	r0, #32
 800ff2c:	f04f 0100 	mov.w	r1, #0
 800ff30:	f7fc fef6 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800ff34:	e08a      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ff40:	429a      	cmp	r2, r3
 800ff42:	d10c      	bne.n	800ff5e <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800ff44:	f04f 0002 	mov.w	r0, #2
 800ff48:	f04f 0101 	mov.w	r1, #1
 800ff4c:	f7fc ff12 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800ff50:	f04f 0002 	mov.w	r0, #2
 800ff54:	f04f 0100 	mov.w	r1, #0
 800ff58:	f7fc ff0c 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 800ff5c:	e076      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800ff5e:	687a      	ldr	r2, [r7, #4]
 800ff60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ff64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d10c      	bne.n	800ff86 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800ff6c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ff70:	f04f 0101 	mov.w	r1, #1
 800ff74:	f7fc fefe 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800ff78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ff7c:	f04f 0100 	mov.w	r1, #0
 800ff80:	f7fc fef8 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 800ff84:	e062      	b.n	801004c <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800ff8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ff90:	429a      	cmp	r2, r3
 800ff92:	d10c      	bne.n	800ffae <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800ff94:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ff98:	f04f 0101 	mov.w	r1, #1
 800ff9c:	f7fc feea 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800ffa0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ffa4:	f04f 0100 	mov.w	r1, #0
 800ffa8:	f7fc fee4 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 800ffac:	e04e      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800ffae:	687a      	ldr	r2, [r7, #4]
 800ffb0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800ffb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d10c      	bne.n	800ffd6 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800ffbc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ffc0:	f04f 0101 	mov.w	r1, #1
 800ffc4:	f7fc fed6 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800ffc8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ffcc:	f04f 0100 	mov.w	r1, #0
 800ffd0:	f7fc fed0 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 800ffd4:	e03a      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ffdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ffe0:	429a      	cmp	r2, r3
 800ffe2:	d10c      	bne.n	800fffe <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800ffe4:	f04f 0040 	mov.w	r0, #64	; 0x40
 800ffe8:	f04f 0101 	mov.w	r1, #1
 800ffec:	f7fc fe98 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800fff0:	f04f 0040 	mov.w	r0, #64	; 0x40
 800fff4:	f04f 0100 	mov.w	r1, #0
 800fff8:	f7fc fe92 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 800fffc:	e026      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8010004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010008:	429a      	cmp	r2, r3
 801000a:	d10c      	bne.n	8010026 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 801000c:	f04f 0080 	mov.w	r0, #128	; 0x80
 8010010:	f04f 0101 	mov.w	r1, #1
 8010014:	f7fc fe84 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 8010018:	f04f 0080 	mov.w	r0, #128	; 0x80
 801001c:	f04f 0100 	mov.w	r1, #0
 8010020:	f7fc fe7e 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 8010024:	e012      	b.n	801004c <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801002c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010030:	429a      	cmp	r2, r3
 8010032:	d10b      	bne.n	801004c <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8010034:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010038:	f04f 0101 	mov.w	r1, #1
 801003c:	f7fc fe70 	bl	800cd20 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 8010040:	f44f 7080 	mov.w	r0, #256	; 0x100
 8010044:	f04f 0100 	mov.w	r1, #0
 8010048:	f7fc fe6a 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 801004c:	f107 0708 	add.w	r7, r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8010054:	b480      	push	{r7}
 8010056:	b085      	sub	sp, #20
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 801005e:	f04f 0300 	mov.w	r3, #0
 8010062:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	881b      	ldrh	r3, [r3, #0]
 8010068:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 801006a:	687a      	ldr	r2, [r7, #4]
 801006c:	f04f 0300 	mov.w	r3, #0
 8010070:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010074:	429a      	cmp	r2, r3
 8010076:	d01f      	beq.n	80100b8 <TIM_TimeBaseInit+0x64>
 8010078:	687a      	ldr	r2, [r7, #4]
 801007a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801007e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010082:	429a      	cmp	r2, r3
 8010084:	d018      	beq.n	80100b8 <TIM_TimeBaseInit+0x64>
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801008c:	d014      	beq.n	80100b8 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 801008e:	687a      	ldr	r2, [r7, #4]
 8010090:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010094:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8010098:	429a      	cmp	r2, r3
 801009a:	d00d      	beq.n	80100b8 <TIM_TimeBaseInit+0x64>
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d006      	beq.n	80100b8 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80100b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100b4:	429a      	cmp	r2, r3
 80100b6:	d108      	bne.n	80100ca <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80100b8:	89fb      	ldrh	r3, [r7, #14]
 80100ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80100be:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80100c0:	683b      	ldr	r3, [r7, #0]
 80100c2:	885a      	ldrh	r2, [r3, #2]
 80100c4:	89fb      	ldrh	r3, [r7, #14]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d00f      	beq.n	80100f8 <TIM_TimeBaseInit+0xa4>
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80100de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d008      	beq.n	80100f8 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80100e6:	89fb      	ldrh	r3, [r7, #14]
 80100e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80100ec:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	891a      	ldrh	r2, [r3, #8]
 80100f2:	89fb      	ldrh	r3, [r7, #14]
 80100f4:	4313      	orrs	r3, r2
 80100f6:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	89fa      	ldrh	r2, [r7, #14]
 80100fc:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	685a      	ldr	r2, [r3, #4]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	881a      	ldrh	r2, [r3, #0]
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 801010e:	687a      	ldr	r2, [r7, #4]
 8010110:	f04f 0300 	mov.w	r3, #0
 8010114:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010118:	429a      	cmp	r2, r3
 801011a:	d006      	beq.n	801012a <TIM_TimeBaseInit+0xd6>
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010122:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010126:	429a      	cmp	r2, r3
 8010128:	d104      	bne.n	8010134 <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	7a9b      	ldrb	r3, [r3, #10]
 801012e:	461a      	mov	r2, r3
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f04f 0201 	mov.w	r2, #1
 801013a:	829a      	strh	r2, [r3, #20]
}
 801013c:	f107 0714 	add.w	r7, r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	bc80      	pop	{r7}
 8010144:	4770      	bx	lr
 8010146:	bf00      	nop

08010148 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8010148:	b480      	push	{r7}
 801014a:	b083      	sub	sp, #12
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f04f 32ff 	mov.w	r2, #4294967295
 8010156:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f04f 0200 	mov.w	r2, #0
 801015e:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f04f 0200 	mov.w	r2, #0
 8010166:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	f04f 0200 	mov.w	r2, #0
 801016e:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f04f 0200 	mov.w	r2, #0
 8010176:	729a      	strb	r2, [r3, #10]
}
 8010178:	f107 070c 	add.w	r7, r7, #12
 801017c:	46bd      	mov	sp, r7
 801017e:	bc80      	pop	{r7}
 8010180:	4770      	bx	lr
 8010182:	bf00      	nop

08010184 <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 8010184:	b480      	push	{r7}
 8010186:	b083      	sub	sp, #12
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	4613      	mov	r3, r2
 801018e:	460a      	mov	r2, r1
 8010190:	807a      	strh	r2, [r7, #2]
 8010192:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	887a      	ldrh	r2, [r7, #2]
 8010198:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	883a      	ldrh	r2, [r7, #0]
 801019e:	829a      	strh	r2, [r3, #20]
}
 80101a0:	f107 070c 	add.w	r7, r7, #12
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bc80      	pop	{r7}
 80101a8:	4770      	bx	lr
 80101aa:	bf00      	nop

080101ac <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b085      	sub	sp, #20
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
 80101b4:	460b      	mov	r3, r1
 80101b6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 80101b8:	f04f 0300 	mov.w	r3, #0
 80101bc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 80101c4:	89fb      	ldrh	r3, [r7, #14]
 80101c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101ca:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 80101cc:	89fa      	ldrh	r2, [r7, #14]
 80101ce:	887b      	ldrh	r3, [r7, #2]
 80101d0:	4313      	orrs	r3, r2
 80101d2:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	89fa      	ldrh	r2, [r7, #14]
 80101d8:	801a      	strh	r2, [r3, #0]
}
 80101da:	f107 0714 	add.w	r7, r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	bc80      	pop	{r7}
 80101e2:	4770      	bx	lr

080101e4 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	683a      	ldr	r2, [r7, #0]
 80101f2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80101f4:	f107 070c 	add.w	r7, r7, #12
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bc80      	pop	{r7}
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop

08010200 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 8010200:	b480      	push	{r7}
 8010202:	b083      	sub	sp, #12
 8010204:	af00      	add	r7, sp, #0
 8010206:	6078      	str	r0, [r7, #4]
 8010208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	683a      	ldr	r2, [r7, #0]
 801020e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8010210:	f107 070c 	add.w	r7, r7, #12
 8010214:	46bd      	mov	sp, r7
 8010216:	bc80      	pop	{r7}
 8010218:	4770      	bx	lr
 801021a:	bf00      	nop

0801021c <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 801021c:	b480      	push	{r7}
 801021e:	b083      	sub	sp, #12
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8010228:	4618      	mov	r0, r3
 801022a:	f107 070c 	add.w	r7, r7, #12
 801022e:	46bd      	mov	sp, r7
 8010230:	bc80      	pop	{r7}
 8010232:	4770      	bx	lr

08010234 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010240:	b29b      	uxth	r3, r3
}
 8010242:	4618      	mov	r0, r3
 8010244:	f107 070c 	add.w	r7, r7, #12
 8010248:	46bd      	mov	sp, r7
 801024a:	bc80      	pop	{r7}
 801024c:	4770      	bx	lr
 801024e:	bf00      	nop

08010250 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8010250:	b480      	push	{r7}
 8010252:	b083      	sub	sp, #12
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
 8010258:	460b      	mov	r3, r1
 801025a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 801025c:	78fb      	ldrb	r3, [r7, #3]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d008      	beq.n	8010274 <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	b29b      	uxth	r3, r3
 8010268:	f043 0302 	orr.w	r3, r3, #2
 801026c:	b29a      	uxth	r2, r3
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	801a      	strh	r2, [r3, #0]
 8010272:	e007      	b.n	8010284 <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	b29b      	uxth	r3, r3
 801027a:	f023 0302 	bic.w	r3, r3, #2
 801027e:	b29a      	uxth	r2, r3
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	801a      	strh	r2, [r3, #0]
  }
}
 8010284:	f107 070c 	add.w	r7, r7, #12
 8010288:	46bd      	mov	sp, r7
 801028a:	bc80      	pop	{r7}
 801028c:	4770      	bx	lr
 801028e:	bf00      	nop

08010290 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
 8010296:	6078      	str	r0, [r7, #4]
 8010298:	460b      	mov	r3, r1
 801029a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 801029c:	887b      	ldrh	r3, [r7, #2]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d008      	beq.n	80102b4 <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	f043 0304 	orr.w	r3, r3, #4
 80102ac:	b29a      	uxth	r2, r3
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	801a      	strh	r2, [r3, #0]
 80102b2:	e007      	b.n	80102c4 <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	881b      	ldrh	r3, [r3, #0]
 80102b8:	b29b      	uxth	r3, r3
 80102ba:	f023 0304 	bic.w	r3, r3, #4
 80102be:	b29a      	uxth	r2, r3
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	801a      	strh	r2, [r3, #0]
  }
}
 80102c4:	f107 070c 	add.w	r7, r7, #12
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bc80      	pop	{r7}
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop

080102d0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
 80102d8:	460b      	mov	r3, r1
 80102da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80102dc:	78fb      	ldrb	r3, [r7, #3]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d008      	beq.n	80102f4 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	881b      	ldrh	r3, [r3, #0]
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	801a      	strh	r2, [r3, #0]
 80102f2:	e007      	b.n	8010304 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	881b      	ldrh	r3, [r3, #0]
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102fe:	b29a      	uxth	r2, r3
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	801a      	strh	r2, [r3, #0]
  }
}
 8010304:	f107 070c 	add.w	r7, r7, #12
 8010308:	46bd      	mov	sp, r7
 801030a:	bc80      	pop	{r7}
 801030c:	4770      	bx	lr
 801030e:	bf00      	nop

08010310 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 8010310:	b480      	push	{r7}
 8010312:	b083      	sub	sp, #12
 8010314:	af00      	add	r7, sp, #0
 8010316:	6078      	str	r0, [r7, #4]
 8010318:	460b      	mov	r3, r1
 801031a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	b29b      	uxth	r3, r3
 8010322:	f023 0308 	bic.w	r3, r3, #8
 8010326:	b29a      	uxth	r2, r3
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	881b      	ldrh	r3, [r3, #0]
 8010330:	b29a      	uxth	r2, r3
 8010332:	887b      	ldrh	r3, [r7, #2]
 8010334:	4313      	orrs	r3, r2
 8010336:	b29a      	uxth	r2, r3
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	801a      	strh	r2, [r3, #0]
}
 801033c:	f107 070c 	add.w	r7, r7, #12
 8010340:	46bd      	mov	sp, r7
 8010342:	bc80      	pop	{r7}
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop

08010348 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 8010348:	b480      	push	{r7}
 801034a:	b083      	sub	sp, #12
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	b29b      	uxth	r3, r3
 801035a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801035e:	b29a      	uxth	r2, r3
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	881b      	ldrh	r3, [r3, #0]
 8010368:	b29a      	uxth	r2, r3
 801036a:	887b      	ldrh	r3, [r7, #2]
 801036c:	4313      	orrs	r3, r2
 801036e:	b29a      	uxth	r2, r3
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	801a      	strh	r2, [r3, #0]
}
 8010374:	f107 070c 	add.w	r7, r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	bc80      	pop	{r7}
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop

08010380 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8010380:	b480      	push	{r7}
 8010382:	b083      	sub	sp, #12
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	460b      	mov	r3, r1
 801038a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801038c:	78fb      	ldrb	r3, [r7, #3]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d008      	beq.n	80103a4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	b29b      	uxth	r3, r3
 8010398:	f043 0301 	orr.w	r3, r3, #1
 801039c:	b29a      	uxth	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	801a      	strh	r2, [r3, #0]
 80103a2:	e007      	b.n	80103b4 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	881b      	ldrh	r3, [r3, #0]
 80103a8:	b29b      	uxth	r3, r3
 80103aa:	f023 0301 	bic.w	r3, r3, #1
 80103ae:	b29a      	uxth	r2, r3
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	801a      	strh	r2, [r3, #0]
  }
}
 80103b4:	f107 070c 	add.w	r7, r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bc80      	pop	{r7}
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop

080103c0 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80103c0:	b480      	push	{r7}
 80103c2:	b085      	sub	sp, #20
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80103ca:	f04f 0300 	mov.w	r3, #0
 80103ce:	817b      	strh	r3, [r7, #10]
 80103d0:	f04f 0300 	mov.w	r3, #0
 80103d4:	81fb      	strh	r3, [r7, #14]
 80103d6:	f04f 0300 	mov.w	r3, #0
 80103da:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	8c1b      	ldrh	r3, [r3, #32]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	f023 0301 	bic.w	r3, r3, #1
 80103e6:	b29a      	uxth	r2, r3
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	8c1b      	ldrh	r3, [r3, #32]
 80103f0:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	889b      	ldrh	r3, [r3, #4]
 80103f6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	8b1b      	ldrh	r3, [r3, #24]
 80103fc:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 80103fe:	897b      	ldrh	r3, [r7, #10]
 8010400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010404:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 8010406:	897b      	ldrh	r3, [r7, #10]
 8010408:	f023 0303 	bic.w	r3, r3, #3
 801040c:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	881a      	ldrh	r2, [r3, #0]
 8010412:	897b      	ldrh	r3, [r7, #10]
 8010414:	4313      	orrs	r3, r2
 8010416:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 8010418:	89fb      	ldrh	r3, [r7, #14]
 801041a:	f023 0302 	bic.w	r3, r3, #2
 801041e:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	899a      	ldrh	r2, [r3, #12]
 8010424:	89fb      	ldrh	r3, [r7, #14]
 8010426:	4313      	orrs	r3, r2
 8010428:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 801042a:	683b      	ldr	r3, [r7, #0]
 801042c:	885a      	ldrh	r2, [r3, #2]
 801042e:	89fb      	ldrh	r3, [r7, #14]
 8010430:	4313      	orrs	r3, r2
 8010432:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8010434:	687a      	ldr	r2, [r7, #4]
 8010436:	f04f 0300 	mov.w	r3, #0
 801043a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801043e:	429a      	cmp	r2, r3
 8010440:	d006      	beq.n	8010450 <TIM_OC1Init+0x90>
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010448:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801044c:	429a      	cmp	r2, r3
 801044e:	d123      	bne.n	8010498 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8010450:	89fb      	ldrh	r3, [r7, #14]
 8010452:	f023 0308 	bic.w	r3, r3, #8
 8010456:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	89da      	ldrh	r2, [r3, #14]
 801045c:	89fb      	ldrh	r3, [r7, #14]
 801045e:	4313      	orrs	r3, r2
 8010460:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 8010462:	89fb      	ldrh	r3, [r7, #14]
 8010464:	f023 0304 	bic.w	r3, r3, #4
 8010468:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	889a      	ldrh	r2, [r3, #4]
 801046e:	89fb      	ldrh	r3, [r7, #14]
 8010470:	4313      	orrs	r3, r2
 8010472:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 8010474:	89bb      	ldrh	r3, [r7, #12]
 8010476:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801047a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 801047c:	89bb      	ldrh	r3, [r7, #12]
 801047e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010482:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	8a1a      	ldrh	r2, [r3, #16]
 8010488:	89bb      	ldrh	r3, [r7, #12]
 801048a:	4313      	orrs	r3, r2
 801048c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 801048e:	683b      	ldr	r3, [r7, #0]
 8010490:	8a5a      	ldrh	r2, [r3, #18]
 8010492:	89bb      	ldrh	r3, [r7, #12]
 8010494:	4313      	orrs	r3, r2
 8010496:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	89ba      	ldrh	r2, [r7, #12]
 801049c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	897a      	ldrh	r2, [r7, #10]
 80104a2:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 80104a4:	683b      	ldr	r3, [r7, #0]
 80104a6:	689a      	ldr	r2, [r3, #8]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	89fa      	ldrh	r2, [r7, #14]
 80104b0:	841a      	strh	r2, [r3, #32]
}
 80104b2:	f107 0714 	add.w	r7, r7, #20
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bc80      	pop	{r7}
 80104ba:	4770      	bx	lr

080104bc <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80104bc:	b480      	push	{r7}
 80104be:	b085      	sub	sp, #20
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	6078      	str	r0, [r7, #4]
 80104c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80104c6:	f04f 0300 	mov.w	r3, #0
 80104ca:	817b      	strh	r3, [r7, #10]
 80104cc:	f04f 0300 	mov.w	r3, #0
 80104d0:	81fb      	strh	r3, [r7, #14]
 80104d2:	f04f 0300 	mov.w	r3, #0
 80104d6:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	8c1b      	ldrh	r3, [r3, #32]
 80104dc:	b29b      	uxth	r3, r3
 80104de:	f023 0310 	bic.w	r3, r3, #16
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	8c1b      	ldrh	r3, [r3, #32]
 80104ec:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	889b      	ldrh	r3, [r3, #4]
 80104f2:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	8b1b      	ldrh	r3, [r3, #24]
 80104f8:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 80104fa:	897b      	ldrh	r3, [r7, #10]
 80104fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010500:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 8010502:	897b      	ldrh	r3, [r7, #10]
 8010504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010508:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 801050a:	683b      	ldr	r3, [r7, #0]
 801050c:	881b      	ldrh	r3, [r3, #0]
 801050e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010512:	b29a      	uxth	r2, r3
 8010514:	897b      	ldrh	r3, [r7, #10]
 8010516:	4313      	orrs	r3, r2
 8010518:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 801051a:	89fb      	ldrh	r3, [r7, #14]
 801051c:	f023 0320 	bic.w	r3, r3, #32
 8010520:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	899b      	ldrh	r3, [r3, #12]
 8010526:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801052a:	b29a      	uxth	r2, r3
 801052c:	89fb      	ldrh	r3, [r7, #14]
 801052e:	4313      	orrs	r3, r2
 8010530:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8010532:	683b      	ldr	r3, [r7, #0]
 8010534:	885b      	ldrh	r3, [r3, #2]
 8010536:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801053a:	b29a      	uxth	r2, r3
 801053c:	89fb      	ldrh	r3, [r7, #14]
 801053e:	4313      	orrs	r3, r2
 8010540:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	f04f 0300 	mov.w	r3, #0
 8010548:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801054c:	429a      	cmp	r2, r3
 801054e:	d006      	beq.n	801055e <TIM_OC2Init+0xa2>
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010556:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801055a:	429a      	cmp	r2, r3
 801055c:	d12f      	bne.n	80105be <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 801055e:	89fb      	ldrh	r3, [r7, #14]
 8010560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010564:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	89db      	ldrh	r3, [r3, #14]
 801056a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801056e:	b29a      	uxth	r2, r3
 8010570:	89fb      	ldrh	r3, [r7, #14]
 8010572:	4313      	orrs	r3, r2
 8010574:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 8010576:	89fb      	ldrh	r3, [r7, #14]
 8010578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801057c:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	889b      	ldrh	r3, [r3, #4]
 8010582:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010586:	b29a      	uxth	r2, r3
 8010588:	89fb      	ldrh	r3, [r7, #14]
 801058a:	4313      	orrs	r3, r2
 801058c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 801058e:	89bb      	ldrh	r3, [r7, #12]
 8010590:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010594:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 8010596:	89bb      	ldrh	r3, [r7, #12]
 8010598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801059c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 801059e:	683b      	ldr	r3, [r7, #0]
 80105a0:	8a1b      	ldrh	r3, [r3, #16]
 80105a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	89bb      	ldrh	r3, [r7, #12]
 80105aa:	4313      	orrs	r3, r2
 80105ac:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 80105ae:	683b      	ldr	r3, [r7, #0]
 80105b0:	8a5b      	ldrh	r3, [r3, #18]
 80105b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	89bb      	ldrh	r3, [r7, #12]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	89ba      	ldrh	r2, [r7, #12]
 80105c2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	897a      	ldrh	r2, [r7, #10]
 80105c8:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	689a      	ldr	r2, [r3, #8]
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	89fa      	ldrh	r2, [r7, #14]
 80105d6:	841a      	strh	r2, [r3, #32]
}
 80105d8:	f107 0714 	add.w	r7, r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	bc80      	pop	{r7}
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop

080105e4 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80105ee:	f04f 0300 	mov.w	r3, #0
 80105f2:	817b      	strh	r3, [r7, #10]
 80105f4:	f04f 0300 	mov.w	r3, #0
 80105f8:	81fb      	strh	r3, [r7, #14]
 80105fa:	f04f 0300 	mov.w	r3, #0
 80105fe:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	8c1b      	ldrh	r3, [r3, #32]
 8010604:	b29b      	uxth	r3, r3
 8010606:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801060a:	b29a      	uxth	r2, r3
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	8c1b      	ldrh	r3, [r3, #32]
 8010614:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	889b      	ldrh	r3, [r3, #4]
 801061a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	8b9b      	ldrh	r3, [r3, #28]
 8010620:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8010622:	897b      	ldrh	r3, [r7, #10]
 8010624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010628:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 801062a:	897b      	ldrh	r3, [r7, #10]
 801062c:	f023 0303 	bic.w	r3, r3, #3
 8010630:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8010632:	683b      	ldr	r3, [r7, #0]
 8010634:	881a      	ldrh	r2, [r3, #0]
 8010636:	897b      	ldrh	r3, [r7, #10]
 8010638:	4313      	orrs	r3, r2
 801063a:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 801063c:	89fb      	ldrh	r3, [r7, #14]
 801063e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010642:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	899b      	ldrh	r3, [r3, #12]
 8010648:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801064c:	b29a      	uxth	r2, r3
 801064e:	89fb      	ldrh	r3, [r7, #14]
 8010650:	4313      	orrs	r3, r2
 8010652:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	885b      	ldrh	r3, [r3, #2]
 8010658:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801065c:	b29a      	uxth	r2, r3
 801065e:	89fb      	ldrh	r3, [r7, #14]
 8010660:	4313      	orrs	r3, r2
 8010662:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8010664:	687a      	ldr	r2, [r7, #4]
 8010666:	f04f 0300 	mov.w	r3, #0
 801066a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801066e:	429a      	cmp	r2, r3
 8010670:	d006      	beq.n	8010680 <TIM_OC3Init+0x9c>
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010678:	f2c4 0301 	movt	r3, #16385	; 0x4001
 801067c:	429a      	cmp	r2, r3
 801067e:	d12f      	bne.n	80106e0 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8010680:	89fb      	ldrh	r3, [r7, #14]
 8010682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010686:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	89db      	ldrh	r3, [r3, #14]
 801068c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010690:	b29a      	uxth	r2, r3
 8010692:	89fb      	ldrh	r3, [r7, #14]
 8010694:	4313      	orrs	r3, r2
 8010696:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8010698:	89fb      	ldrh	r3, [r7, #14]
 801069a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801069e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80106a0:	683b      	ldr	r3, [r7, #0]
 80106a2:	889b      	ldrh	r3, [r3, #4]
 80106a4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80106a8:	b29a      	uxth	r2, r3
 80106aa:	89fb      	ldrh	r3, [r7, #14]
 80106ac:	4313      	orrs	r3, r2
 80106ae:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80106b0:	89bb      	ldrh	r3, [r7, #12]
 80106b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106b6:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80106b8:	89bb      	ldrh	r3, [r7, #12]
 80106ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106be:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80106c0:	683b      	ldr	r3, [r7, #0]
 80106c2:	8a1b      	ldrh	r3, [r3, #16]
 80106c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	89bb      	ldrh	r3, [r7, #12]
 80106cc:	4313      	orrs	r3, r2
 80106ce:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	8a5b      	ldrh	r3, [r3, #18]
 80106d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80106d8:	b29a      	uxth	r2, r3
 80106da:	89bb      	ldrh	r3, [r7, #12]
 80106dc:	4313      	orrs	r3, r2
 80106de:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	89ba      	ldrh	r2, [r7, #12]
 80106e4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	897a      	ldrh	r2, [r7, #10]
 80106ea:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	689a      	ldr	r2, [r3, #8]
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	89fa      	ldrh	r2, [r7, #14]
 80106f8:	841a      	strh	r2, [r3, #32]
}
 80106fa:	f107 0714 	add.w	r7, r7, #20
 80106fe:	46bd      	mov	sp, r7
 8010700:	bc80      	pop	{r7}
 8010702:	4770      	bx	lr

08010704 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8010704:	b480      	push	{r7}
 8010706:	b085      	sub	sp, #20
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
 801070c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 801070e:	f04f 0300 	mov.w	r3, #0
 8010712:	81bb      	strh	r3, [r7, #12]
 8010714:	f04f 0300 	mov.w	r3, #0
 8010718:	817b      	strh	r3, [r7, #10]
 801071a:	f04f 0300 	mov.w	r3, #0
 801071e:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	8c1b      	ldrh	r3, [r3, #32]
 8010724:	b29b      	uxth	r3, r3
 8010726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801072a:	b29a      	uxth	r2, r3
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	8c1b      	ldrh	r3, [r3, #32]
 8010734:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	889b      	ldrh	r3, [r3, #4]
 801073a:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	8b9b      	ldrh	r3, [r3, #28]
 8010740:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8010742:	89bb      	ldrh	r3, [r7, #12]
 8010744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010748:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 801074a:	89bb      	ldrh	r3, [r7, #12]
 801074c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010750:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	881b      	ldrh	r3, [r3, #0]
 8010756:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801075a:	b29a      	uxth	r2, r3
 801075c:	89bb      	ldrh	r3, [r7, #12]
 801075e:	4313      	orrs	r3, r2
 8010760:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8010762:	897b      	ldrh	r3, [r7, #10]
 8010764:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010768:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	899b      	ldrh	r3, [r3, #12]
 801076e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010772:	b29a      	uxth	r2, r3
 8010774:	897b      	ldrh	r3, [r7, #10]
 8010776:	4313      	orrs	r3, r2
 8010778:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	885b      	ldrh	r3, [r3, #2]
 801077e:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010782:	b29a      	uxth	r2, r3
 8010784:	897b      	ldrh	r3, [r7, #10]
 8010786:	4313      	orrs	r3, r2
 8010788:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	f04f 0300 	mov.w	r3, #0
 8010790:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8010794:	429a      	cmp	r2, r3
 8010796:	d006      	beq.n	80107a6 <TIM_OC4Init+0xa2>
 8010798:	687a      	ldr	r2, [r7, #4]
 801079a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801079e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d10b      	bne.n	80107be <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80107a6:	89fb      	ldrh	r3, [r7, #14]
 80107a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80107ac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	8a1b      	ldrh	r3, [r3, #16]
 80107b2:	ea4f 1383 	mov.w	r3, r3, lsl #6
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	89fb      	ldrh	r3, [r7, #14]
 80107ba:	4313      	orrs	r3, r2
 80107bc:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	89fa      	ldrh	r2, [r7, #14]
 80107c2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	89ba      	ldrh	r2, [r7, #12]
 80107c8:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	689a      	ldr	r2, [r3, #8]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	897a      	ldrh	r2, [r7, #10]
 80107d6:	841a      	strh	r2, [r3, #32]
}
 80107d8:	f107 0714 	add.w	r7, r7, #20
 80107dc:	46bd      	mov	sp, r7
 80107de:	bc80      	pop	{r7}
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop

080107e4 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f04f 0200 	mov.w	r2, #0
 80107f2:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	f04f 0200 	mov.w	r2, #0
 80107fa:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f04f 0200 	mov.w	r2, #0
 8010802:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f04f 0200 	mov.w	r2, #0
 801080a:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f04f 0200 	mov.w	r2, #0
 8010812:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	f04f 0200 	mov.w	r2, #0
 801081a:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f04f 0200 	mov.w	r2, #0
 8010822:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	f04f 0200 	mov.w	r2, #0
 801082a:	825a      	strh	r2, [r3, #18]
}
 801082c:	f107 070c 	add.w	r7, r7, #12
 8010830:	46bd      	mov	sp, r7
 8010832:	bc80      	pop	{r7}
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop

08010838 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8010838:	b480      	push	{r7}
 801083a:	b085      	sub	sp, #20
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
 8010840:	4613      	mov	r3, r2
 8010842:	460a      	mov	r2, r1
 8010844:	807a      	strh	r2, [r7, #2]
 8010846:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8010848:	f04f 0300 	mov.w	r3, #0
 801084c:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 801084e:	f04f 0300 	mov.w	r3, #0
 8010852:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	f103 0318 	add.w	r3, r3, #24
 801085e:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8010860:	887b      	ldrh	r3, [r7, #2]
 8010862:	f04f 0201 	mov.w	r2, #1
 8010866:	fa02 f303 	lsl.w	r3, r2, r3
 801086a:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	8c1b      	ldrh	r3, [r3, #32]
 8010870:	b29a      	uxth	r2, r3
 8010872:	897b      	ldrh	r3, [r7, #10]
 8010874:	ea6f 0303 	mvn.w	r3, r3
 8010878:	b29b      	uxth	r3, r3
 801087a:	4013      	ands	r3, r2
 801087c:	b29a      	uxth	r2, r3
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8010882:	887b      	ldrh	r3, [r7, #2]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d002      	beq.n	801088e <TIM_SelectOCxM+0x56>
 8010888:	887b      	ldrh	r3, [r7, #2]
 801088a:	2b08      	cmp	r3, #8
 801088c:	d114      	bne.n	80108b8 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 801088e:	887b      	ldrh	r3, [r7, #2]
 8010890:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8010894:	b29b      	uxth	r3, r3
 8010896:	68fa      	ldr	r2, [r7, #12]
 8010898:	18d3      	adds	r3, r2, r3
 801089a:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 801089c:	68fa      	ldr	r2, [r7, #12]
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	6819      	ldr	r1, [r3, #0]
 80108a2:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80108a6:	400b      	ands	r3, r1
 80108a8:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	6811      	ldr	r1, [r2, #0]
 80108b0:	883a      	ldrh	r2, [r7, #0]
 80108b2:	430a      	orrs	r2, r1
 80108b4:	601a      	str	r2, [r3, #0]
 80108b6:	e019      	b.n	80108ec <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 80108b8:	887b      	ldrh	r3, [r7, #2]
 80108ba:	f1a3 0304 	sub.w	r3, r3, #4
 80108be:	b29b      	uxth	r3, r3
 80108c0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80108c4:	b29b      	uxth	r3, r3
 80108c6:	68fa      	ldr	r2, [r7, #12]
 80108c8:	18d3      	adds	r3, r2, r3
 80108ca:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 80108cc:	68fa      	ldr	r2, [r7, #12]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6819      	ldr	r1, [r3, #0]
 80108d2:	f648 73ff 	movw	r3, #36863	; 0x8fff
 80108d6:	400b      	ands	r3, r1
 80108d8:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	6811      	ldr	r1, [r2, #0]
 80108e0:	883a      	ldrh	r2, [r7, #0]
 80108e2:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80108e6:	b292      	uxth	r2, r2
 80108e8:	430a      	orrs	r2, r1
 80108ea:	601a      	str	r2, [r3, #0]
  }
}
 80108ec:	f107 0714 	add.w	r7, r7, #20
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bc80      	pop	{r7}
 80108f4:	4770      	bx	lr
 80108f6:	bf00      	nop

080108f8 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	683a      	ldr	r2, [r7, #0]
 8010906:	635a      	str	r2, [r3, #52]	; 0x34
}
 8010908:	f107 070c 	add.w	r7, r7, #12
 801090c:	46bd      	mov	sp, r7
 801090e:	bc80      	pop	{r7}
 8010910:	4770      	bx	lr
 8010912:	bf00      	nop

08010914 <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	639a      	str	r2, [r3, #56]	; 0x38
}
 8010924:	f107 070c 	add.w	r7, r7, #12
 8010928:	46bd      	mov	sp, r7
 801092a:	bc80      	pop	{r7}
 801092c:	4770      	bx	lr
 801092e:	bf00      	nop

08010930 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8010930:	b480      	push	{r7}
 8010932:	b083      	sub	sp, #12
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	683a      	ldr	r2, [r7, #0]
 801093e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010940:	f107 070c 	add.w	r7, r7, #12
 8010944:	46bd      	mov	sp, r7
 8010946:	bc80      	pop	{r7}
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop

0801094c <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 801094c:	b480      	push	{r7}
 801094e:	b083      	sub	sp, #12
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
 8010954:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	683a      	ldr	r2, [r7, #0]
 801095a:	641a      	str	r2, [r3, #64]	; 0x40
}
 801095c:	f107 070c 	add.w	r7, r7, #12
 8010960:	46bd      	mov	sp, r7
 8010962:	bc80      	pop	{r7}
 8010964:	4770      	bx	lr
 8010966:	bf00      	nop

08010968 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8010968:	b480      	push	{r7}
 801096a:	b085      	sub	sp, #20
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
 8010970:	460b      	mov	r3, r1
 8010972:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010974:	f04f 0300 	mov.w	r3, #0
 8010978:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	8b1b      	ldrh	r3, [r3, #24]
 801097e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 8010980:	89fb      	ldrh	r3, [r7, #14]
 8010982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010986:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8010988:	89fa      	ldrh	r2, [r7, #14]
 801098a:	887b      	ldrh	r3, [r7, #2]
 801098c:	4313      	orrs	r3, r2
 801098e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	89fa      	ldrh	r2, [r7, #14]
 8010994:	831a      	strh	r2, [r3, #24]
}
 8010996:	f107 0714 	add.w	r7, r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	bc80      	pop	{r7}
 801099e:	4770      	bx	lr

080109a0 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b085      	sub	sp, #20
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
 80109a8:	460b      	mov	r3, r1
 80109aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80109ac:	f04f 0300 	mov.w	r3, #0
 80109b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	8b1b      	ldrh	r3, [r3, #24]
 80109b6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 80109b8:	89fb      	ldrh	r3, [r7, #14]
 80109ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109be:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 80109c0:	887b      	ldrh	r3, [r7, #2]
 80109c2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	89fb      	ldrh	r3, [r7, #14]
 80109ca:	4313      	orrs	r3, r2
 80109cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	89fa      	ldrh	r2, [r7, #14]
 80109d2:	831a      	strh	r2, [r3, #24]
}
 80109d4:	f107 0714 	add.w	r7, r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	bc80      	pop	{r7}
 80109dc:	4770      	bx	lr
 80109de:	bf00      	nop

080109e0 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	460b      	mov	r3, r1
 80109ea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80109ec:	f04f 0300 	mov.w	r3, #0
 80109f0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	8b9b      	ldrh	r3, [r3, #28]
 80109f6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 80109f8:	89fb      	ldrh	r3, [r7, #14]
 80109fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80109fe:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8010a00:	89fa      	ldrh	r2, [r7, #14]
 8010a02:	887b      	ldrh	r3, [r7, #2]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	89fa      	ldrh	r2, [r7, #14]
 8010a0c:	839a      	strh	r2, [r3, #28]
}
 8010a0e:	f107 0714 	add.w	r7, r7, #20
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bc80      	pop	{r7}
 8010a16:	4770      	bx	lr

08010a18 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8010a18:	b480      	push	{r7}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
 8010a20:	460b      	mov	r3, r1
 8010a22:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010a24:	f04f 0300 	mov.w	r3, #0
 8010a28:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	8b9b      	ldrh	r3, [r3, #28]
 8010a2e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8010a30:	89fb      	ldrh	r3, [r7, #14]
 8010a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010a36:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8010a38:	887b      	ldrh	r3, [r7, #2]
 8010a3a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010a3e:	b29a      	uxth	r2, r3
 8010a40:	89fb      	ldrh	r3, [r7, #14]
 8010a42:	4313      	orrs	r3, r2
 8010a44:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	89fa      	ldrh	r2, [r7, #14]
 8010a4a:	839a      	strh	r2, [r3, #28]
}
 8010a4c:	f107 0714 	add.w	r7, r7, #20
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bc80      	pop	{r7}
 8010a54:	4770      	bx	lr
 8010a56:	bf00      	nop

08010a58 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8010a58:	b480      	push	{r7}
 8010a5a:	b085      	sub	sp, #20
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
 8010a60:	460b      	mov	r3, r1
 8010a62:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010a64:	f04f 0300 	mov.w	r3, #0
 8010a68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	8b1b      	ldrh	r3, [r3, #24]
 8010a6e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 8010a70:	89fb      	ldrh	r3, [r7, #14]
 8010a72:	f023 0308 	bic.w	r3, r3, #8
 8010a76:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8010a78:	89fa      	ldrh	r2, [r7, #14]
 8010a7a:	887b      	ldrh	r3, [r7, #2]
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	89fa      	ldrh	r2, [r7, #14]
 8010a84:	831a      	strh	r2, [r3, #24]
}
 8010a86:	f107 0714 	add.w	r7, r7, #20
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bc80      	pop	{r7}
 8010a8e:	4770      	bx	lr

08010a90 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8010a90:	b480      	push	{r7}
 8010a92:	b085      	sub	sp, #20
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
 8010a98:	460b      	mov	r3, r1
 8010a9a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010a9c:	f04f 0300 	mov.w	r3, #0
 8010aa0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	8b1b      	ldrh	r3, [r3, #24]
 8010aa6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 8010aa8:	89fb      	ldrh	r3, [r7, #14]
 8010aaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010aae:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8010ab0:	887b      	ldrh	r3, [r7, #2]
 8010ab2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	89fb      	ldrh	r3, [r7, #14]
 8010aba:	4313      	orrs	r3, r2
 8010abc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	89fa      	ldrh	r2, [r7, #14]
 8010ac2:	831a      	strh	r2, [r3, #24]
}
 8010ac4:	f107 0714 	add.w	r7, r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bc80      	pop	{r7}
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop

08010ad0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	460b      	mov	r3, r1
 8010ada:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010adc:	f04f 0300 	mov.w	r3, #0
 8010ae0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	8b9b      	ldrh	r3, [r3, #28]
 8010ae6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8010ae8:	89fb      	ldrh	r3, [r7, #14]
 8010aea:	f023 0308 	bic.w	r3, r3, #8
 8010aee:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8010af0:	89fa      	ldrh	r2, [r7, #14]
 8010af2:	887b      	ldrh	r3, [r7, #2]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	89fa      	ldrh	r2, [r7, #14]
 8010afc:	839a      	strh	r2, [r3, #28]
}
 8010afe:	f107 0714 	add.w	r7, r7, #20
 8010b02:	46bd      	mov	sp, r7
 8010b04:	bc80      	pop	{r7}
 8010b06:	4770      	bx	lr

08010b08 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b085      	sub	sp, #20
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
 8010b10:	460b      	mov	r3, r1
 8010b12:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010b14:	f04f 0300 	mov.w	r3, #0
 8010b18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	8b9b      	ldrh	r3, [r3, #28]
 8010b1e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8010b20:	89fb      	ldrh	r3, [r7, #14]
 8010b22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010b26:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8010b28:	887b      	ldrh	r3, [r7, #2]
 8010b2a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010b2e:	b29a      	uxth	r2, r3
 8010b30:	89fb      	ldrh	r3, [r7, #14]
 8010b32:	4313      	orrs	r3, r2
 8010b34:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	89fa      	ldrh	r2, [r7, #14]
 8010b3a:	839a      	strh	r2, [r3, #28]
}
 8010b3c:	f107 0714 	add.w	r7, r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bc80      	pop	{r7}
 8010b44:	4770      	bx	lr
 8010b46:	bf00      	nop

08010b48 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b085      	sub	sp, #20
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
 8010b50:	460b      	mov	r3, r1
 8010b52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010b54:	f04f 0300 	mov.w	r3, #0
 8010b58:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	8b1b      	ldrh	r3, [r3, #24]
 8010b5e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 8010b60:	89fb      	ldrh	r3, [r7, #14]
 8010b62:	f023 0304 	bic.w	r3, r3, #4
 8010b66:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8010b68:	89fa      	ldrh	r2, [r7, #14]
 8010b6a:	887b      	ldrh	r3, [r7, #2]
 8010b6c:	4313      	orrs	r3, r2
 8010b6e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	89fa      	ldrh	r2, [r7, #14]
 8010b74:	831a      	strh	r2, [r3, #24]
}
 8010b76:	f107 0714 	add.w	r7, r7, #20
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bc80      	pop	{r7}
 8010b7e:	4770      	bx	lr

08010b80 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010b80:	b480      	push	{r7}
 8010b82:	b085      	sub	sp, #20
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010b8c:	f04f 0300 	mov.w	r3, #0
 8010b90:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	8b1b      	ldrh	r3, [r3, #24]
 8010b96:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 8010b98:	89fb      	ldrh	r3, [r7, #14]
 8010b9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010b9e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8010ba0:	887b      	ldrh	r3, [r7, #2]
 8010ba2:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010ba6:	b29a      	uxth	r2, r3
 8010ba8:	89fb      	ldrh	r3, [r7, #14]
 8010baa:	4313      	orrs	r3, r2
 8010bac:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	89fa      	ldrh	r2, [r7, #14]
 8010bb2:	831a      	strh	r2, [r3, #24]
}
 8010bb4:	f107 0714 	add.w	r7, r7, #20
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bc80      	pop	{r7}
 8010bbc:	4770      	bx	lr
 8010bbe:	bf00      	nop

08010bc0 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010bcc:	f04f 0300 	mov.w	r3, #0
 8010bd0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	8b9b      	ldrh	r3, [r3, #28]
 8010bd6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8010bd8:	89fb      	ldrh	r3, [r7, #14]
 8010bda:	f023 0304 	bic.w	r3, r3, #4
 8010bde:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8010be0:	89fa      	ldrh	r2, [r7, #14]
 8010be2:	887b      	ldrh	r3, [r7, #2]
 8010be4:	4313      	orrs	r3, r2
 8010be6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	89fa      	ldrh	r2, [r7, #14]
 8010bec:	839a      	strh	r2, [r3, #28]
}
 8010bee:	f107 0714 	add.w	r7, r7, #20
 8010bf2:	46bd      	mov	sp, r7
 8010bf4:	bc80      	pop	{r7}
 8010bf6:	4770      	bx	lr

08010bf8 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
 8010c00:	460b      	mov	r3, r1
 8010c02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010c04:	f04f 0300 	mov.w	r3, #0
 8010c08:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	8b9b      	ldrh	r3, [r3, #28]
 8010c0e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8010c10:	89fb      	ldrh	r3, [r7, #14]
 8010c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010c16:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8010c18:	887b      	ldrh	r3, [r7, #2]
 8010c1a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010c1e:	b29a      	uxth	r2, r3
 8010c20:	89fb      	ldrh	r3, [r7, #14]
 8010c22:	4313      	orrs	r3, r2
 8010c24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	89fa      	ldrh	r2, [r7, #14]
 8010c2a:	839a      	strh	r2, [r3, #28]
}
 8010c2c:	f107 0714 	add.w	r7, r7, #20
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bc80      	pop	{r7}
 8010c34:	4770      	bx	lr
 8010c36:	bf00      	nop

08010c38 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8010c38:	b480      	push	{r7}
 8010c3a:	b085      	sub	sp, #20
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
 8010c40:	460b      	mov	r3, r1
 8010c42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010c44:	f04f 0300 	mov.w	r3, #0
 8010c48:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8b1b      	ldrh	r3, [r3, #24]
 8010c4e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8010c50:	89fb      	ldrh	r3, [r7, #14]
 8010c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010c56:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8010c58:	89fa      	ldrh	r2, [r7, #14]
 8010c5a:	887b      	ldrh	r3, [r7, #2]
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	89fa      	ldrh	r2, [r7, #14]
 8010c64:	831a      	strh	r2, [r3, #24]
}
 8010c66:	f107 0714 	add.w	r7, r7, #20
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bc80      	pop	{r7}
 8010c6e:	4770      	bx	lr

08010c70 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 8010c7c:	f04f 0300 	mov.w	r3, #0
 8010c80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	8b1b      	ldrh	r3, [r3, #24]
 8010c86:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 8010c88:	89fb      	ldrh	r3, [r7, #14]
 8010c8a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8010c8e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8010c92:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8010c94:	887b      	ldrh	r3, [r7, #2]
 8010c96:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010c9a:	b29a      	uxth	r2, r3
 8010c9c:	89fb      	ldrh	r3, [r7, #14]
 8010c9e:	4313      	orrs	r3, r2
 8010ca0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	89fa      	ldrh	r2, [r7, #14]
 8010ca6:	831a      	strh	r2, [r3, #24]
}
 8010ca8:	f107 0714 	add.w	r7, r7, #20
 8010cac:	46bd      	mov	sp, r7
 8010cae:	bc80      	pop	{r7}
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop

08010cb4 <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b085      	sub	sp, #20
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
 8010cbc:	460b      	mov	r3, r1
 8010cbe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010cc0:	f04f 0300 	mov.w	r3, #0
 8010cc4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	8b9b      	ldrh	r3, [r3, #28]
 8010cca:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8010ccc:	89fb      	ldrh	r3, [r7, #14]
 8010cce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cd2:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8010cd4:	89fa      	ldrh	r2, [r7, #14]
 8010cd6:	887b      	ldrh	r3, [r7, #2]
 8010cd8:	4313      	orrs	r3, r2
 8010cda:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	89fa      	ldrh	r2, [r7, #14]
 8010ce0:	839a      	strh	r2, [r3, #28]
}
 8010ce2:	f107 0714 	add.w	r7, r7, #20
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bc80      	pop	{r7}
 8010cea:	4770      	bx	lr

08010cec <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8010cec:	b480      	push	{r7}
 8010cee:	b085      	sub	sp, #20
 8010cf0:	af00      	add	r7, sp, #0
 8010cf2:	6078      	str	r0, [r7, #4]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010cf8:	f04f 0300 	mov.w	r3, #0
 8010cfc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	8b9b      	ldrh	r3, [r3, #28]
 8010d02:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 8010d04:	89fb      	ldrh	r3, [r7, #14]
 8010d06:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8010d0a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8010d0e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8010d10:	887b      	ldrh	r3, [r7, #2]
 8010d12:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010d16:	b29a      	uxth	r2, r3
 8010d18:	89fb      	ldrh	r3, [r7, #14]
 8010d1a:	4313      	orrs	r3, r2
 8010d1c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	89fa      	ldrh	r2, [r7, #14]
 8010d22:	839a      	strh	r2, [r3, #28]
}
 8010d24:	f107 0714 	add.w	r7, r7, #20
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bc80      	pop	{r7}
 8010d2c:	4770      	bx	lr
 8010d2e:	bf00      	nop

08010d30 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b085      	sub	sp, #20
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	460b      	mov	r3, r1
 8010d3a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010d3c:	f04f 0300 	mov.w	r3, #0
 8010d40:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8c1b      	ldrh	r3, [r3, #32]
 8010d46:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8010d48:	89fb      	ldrh	r3, [r7, #14]
 8010d4a:	f023 0302 	bic.w	r3, r3, #2
 8010d4e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8010d50:	89fa      	ldrh	r2, [r7, #14]
 8010d52:	887b      	ldrh	r3, [r7, #2]
 8010d54:	4313      	orrs	r3, r2
 8010d56:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	89fa      	ldrh	r2, [r7, #14]
 8010d5c:	841a      	strh	r2, [r3, #32]
}
 8010d5e:	f107 0714 	add.w	r7, r7, #20
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bc80      	pop	{r7}
 8010d66:	4770      	bx	lr

08010d68 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8010d68:	b480      	push	{r7}
 8010d6a:	b085      	sub	sp, #20
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
 8010d70:	460b      	mov	r3, r1
 8010d72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010d74:	f04f 0300 	mov.w	r3, #0
 8010d78:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	8c1b      	ldrh	r3, [r3, #32]
 8010d7e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 8010d80:	89fb      	ldrh	r3, [r7, #14]
 8010d82:	f023 0308 	bic.w	r3, r3, #8
 8010d86:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 8010d88:	89fa      	ldrh	r2, [r7, #14]
 8010d8a:	887b      	ldrh	r3, [r7, #2]
 8010d8c:	4313      	orrs	r3, r2
 8010d8e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	89fa      	ldrh	r2, [r7, #14]
 8010d94:	841a      	strh	r2, [r3, #32]
}
 8010d96:	f107 0714 	add.w	r7, r7, #20
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bc80      	pop	{r7}
 8010d9e:	4770      	bx	lr

08010da0 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b085      	sub	sp, #20
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	460b      	mov	r3, r1
 8010daa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010dac:	f04f 0300 	mov.w	r3, #0
 8010db0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	8c1b      	ldrh	r3, [r3, #32]
 8010db6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8010db8:	89fb      	ldrh	r3, [r7, #14]
 8010dba:	f023 0320 	bic.w	r3, r3, #32
 8010dbe:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8010dc0:	887b      	ldrh	r3, [r7, #2]
 8010dc2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010dc6:	b29a      	uxth	r2, r3
 8010dc8:	89fb      	ldrh	r3, [r7, #14]
 8010dca:	4313      	orrs	r3, r2
 8010dcc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	89fa      	ldrh	r2, [r7, #14]
 8010dd2:	841a      	strh	r2, [r3, #32]
}
 8010dd4:	f107 0714 	add.w	r7, r7, #20
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bc80      	pop	{r7}
 8010ddc:	4770      	bx	lr
 8010dde:	bf00      	nop

08010de0 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8010de0:	b480      	push	{r7}
 8010de2:	b085      	sub	sp, #20
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
 8010de8:	460b      	mov	r3, r1
 8010dea:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010dec:	f04f 0300 	mov.w	r3, #0
 8010df0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	8c1b      	ldrh	r3, [r3, #32]
 8010df6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8010df8:	89fb      	ldrh	r3, [r7, #14]
 8010dfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dfe:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8010e00:	887b      	ldrh	r3, [r7, #2]
 8010e02:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	89fb      	ldrh	r3, [r7, #14]
 8010e0a:	4313      	orrs	r3, r2
 8010e0c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	89fa      	ldrh	r2, [r7, #14]
 8010e12:	841a      	strh	r2, [r3, #32]
}
 8010e14:	f107 0714 	add.w	r7, r7, #20
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bc80      	pop	{r7}
 8010e1c:	4770      	bx	lr
 8010e1e:	bf00      	nop

08010e20 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
 8010e28:	460b      	mov	r3, r1
 8010e2a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010e2c:	f04f 0300 	mov.w	r3, #0
 8010e30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	8c1b      	ldrh	r3, [r3, #32]
 8010e36:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8010e38:	89fb      	ldrh	r3, [r7, #14]
 8010e3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e3e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8010e40:	887b      	ldrh	r3, [r7, #2]
 8010e42:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010e46:	b29a      	uxth	r2, r3
 8010e48:	89fb      	ldrh	r3, [r7, #14]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	89fa      	ldrh	r2, [r7, #14]
 8010e52:	841a      	strh	r2, [r3, #32]
}
 8010e54:	f107 0714 	add.w	r7, r7, #20
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	bc80      	pop	{r7}
 8010e5c:	4770      	bx	lr
 8010e5e:	bf00      	nop

08010e60 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8010e60:	b480      	push	{r7}
 8010e62:	b085      	sub	sp, #20
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
 8010e68:	460b      	mov	r3, r1
 8010e6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010e6c:	f04f 0300 	mov.w	r3, #0
 8010e70:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	8c1b      	ldrh	r3, [r3, #32]
 8010e76:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8010e78:	89fb      	ldrh	r3, [r7, #14]
 8010e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e7e:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8010e80:	887b      	ldrh	r3, [r7, #2]
 8010e82:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010e86:	b29a      	uxth	r2, r3
 8010e88:	89fb      	ldrh	r3, [r7, #14]
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	89fa      	ldrh	r2, [r7, #14]
 8010e92:	841a      	strh	r2, [r3, #32]
}
 8010e94:	f107 0714 	add.w	r7, r7, #20
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	bc80      	pop	{r7}
 8010e9c:	4770      	bx	lr
 8010e9e:	bf00      	nop

08010ea0 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	b085      	sub	sp, #20
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010eac:	f04f 0300 	mov.w	r3, #0
 8010eb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	8c1b      	ldrh	r3, [r3, #32]
 8010eb6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8010eb8:	89fb      	ldrh	r3, [r7, #14]
 8010eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ebe:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8010ec0:	887b      	ldrh	r3, [r7, #2]
 8010ec2:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010ec6:	b29a      	uxth	r2, r3
 8010ec8:	89fb      	ldrh	r3, [r7, #14]
 8010eca:	4313      	orrs	r3, r2
 8010ecc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	89fa      	ldrh	r2, [r7, #14]
 8010ed2:	841a      	strh	r2, [r3, #32]
}
 8010ed4:	f107 0714 	add.w	r7, r7, #20
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	bc80      	pop	{r7}
 8010edc:	4770      	bx	lr
 8010ede:	bf00      	nop

08010ee0 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b085      	sub	sp, #20
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	4613      	mov	r3, r2
 8010eea:	460a      	mov	r2, r1
 8010eec:	807a      	strh	r2, [r7, #2]
 8010eee:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8010ef0:	f04f 0300 	mov.w	r3, #0
 8010ef4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8010ef6:	887b      	ldrh	r3, [r7, #2]
 8010ef8:	f04f 0201 	mov.w	r2, #1
 8010efc:	fa02 f303 	lsl.w	r3, r2, r3
 8010f00:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8c1b      	ldrh	r3, [r3, #32]
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	89fb      	ldrh	r3, [r7, #14]
 8010f0a:	ea6f 0303 	mvn.w	r3, r3
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	4013      	ands	r3, r2
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	8c1b      	ldrh	r3, [r3, #32]
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	8839      	ldrh	r1, [r7, #0]
 8010f20:	887b      	ldrh	r3, [r7, #2]
 8010f22:	fa01 f303 	lsl.w	r3, r1, r3
 8010f26:	b29b      	uxth	r3, r3
 8010f28:	4313      	orrs	r3, r2
 8010f2a:	b29a      	uxth	r2, r3
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	841a      	strh	r2, [r3, #32]
}
 8010f30:	f107 0714 	add.w	r7, r7, #20
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bc80      	pop	{r7}
 8010f38:	4770      	bx	lr
 8010f3a:	bf00      	nop

08010f3c <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b085      	sub	sp, #20
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	4613      	mov	r3, r2
 8010f46:	460a      	mov	r2, r1
 8010f48:	807a      	strh	r2, [r7, #2]
 8010f4a:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8010f4c:	f04f 0300 	mov.w	r3, #0
 8010f50:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8010f52:	887b      	ldrh	r3, [r7, #2]
 8010f54:	f04f 0204 	mov.w	r2, #4
 8010f58:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5c:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8c1b      	ldrh	r3, [r3, #32]
 8010f62:	b29a      	uxth	r2, r3
 8010f64:	89fb      	ldrh	r3, [r7, #14]
 8010f66:	ea6f 0303 	mvn.w	r3, r3
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	4013      	ands	r3, r2
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	8c1b      	ldrh	r3, [r3, #32]
 8010f78:	b29a      	uxth	r2, r3
 8010f7a:	8839      	ldrh	r1, [r7, #0]
 8010f7c:	887b      	ldrh	r3, [r7, #2]
 8010f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	4313      	orrs	r3, r2
 8010f86:	b29a      	uxth	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	841a      	strh	r2, [r3, #32]
}
 8010f8c:	f107 0714 	add.w	r7, r7, #20
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bc80      	pop	{r7}
 8010f94:	4770      	bx	lr
 8010f96:	bf00      	nop

08010f98 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b082      	sub	sp, #8
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	881b      	ldrh	r3, [r3, #0]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d10f      	bne.n	8010fca <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010fae:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010fb0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8010fb2:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010fb4:	891b      	ldrh	r3, [r3, #8]
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fcc4 	bl	8011944 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	88db      	ldrh	r3, [r3, #6]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	f000 f8ec 	bl	80111a0 <TIM_SetIC1Prescaler>
 8010fc8:	e036      	b.n	8011038 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	881b      	ldrh	r3, [r3, #0]
 8010fce:	2b04      	cmp	r3, #4
 8010fd0:	d10f      	bne.n	8010ff2 <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010fd6:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010fd8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8010fda:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010fdc:	891b      	ldrh	r3, [r3, #8]
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 fcf0 	bl	80119c4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010fe4:	683b      	ldr	r3, [r7, #0]
 8010fe6:	88db      	ldrh	r3, [r3, #6]
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	4619      	mov	r1, r3
 8010fec:	f000 f8f4 	bl	80111d8 <TIM_SetIC2Prescaler>
 8010ff0:	e022      	b.n	8011038 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	881b      	ldrh	r3, [r3, #0]
 8010ff6:	2b08      	cmp	r3, #8
 8010ff8:	d10f      	bne.n	801101a <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010ffe:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8011000:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8011002:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8011004:	891b      	ldrh	r3, [r3, #8]
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fd2a 	bl	8011a60 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	88db      	ldrh	r3, [r3, #6]
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	4619      	mov	r1, r3
 8011014:	f000 f8fe 	bl	8011214 <TIM_SetIC3Prescaler>
 8011018:	e00e      	b.n	8011038 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801101e:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8011020:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8011022:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8011024:	891b      	ldrh	r3, [r3, #8]
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 fd60 	bl	8011aec <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801102c:	683b      	ldr	r3, [r7, #0]
 801102e:	88db      	ldrh	r3, [r3, #6]
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	4619      	mov	r1, r3
 8011034:	f000 f90a 	bl	801124c <TIM_SetIC4Prescaler>
  }
}
 8011038:	f107 0708 	add.w	r7, r7, #8
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8011040:	b480      	push	{r7}
 8011042:	b083      	sub	sp, #12
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f04f 0200 	mov.w	r2, #0
 801104e:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f04f 0200 	mov.w	r2, #0
 8011056:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f04f 0201 	mov.w	r2, #1
 801105e:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f04f 0200 	mov.w	r2, #0
 8011066:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f04f 0200 	mov.w	r2, #0
 801106e:	811a      	strh	r2, [r3, #8]
}
 8011070:	f107 070c 	add.w	r7, r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	bc80      	pop	{r7}
 8011078:	4770      	bx	lr
 801107a:	bf00      	nop

0801107c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	b084      	sub	sp, #16
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8011086:	f04f 0300 	mov.w	r3, #0
 801108a:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 801108c:	f04f 0301 	mov.w	r3, #1
 8011090:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	885b      	ldrh	r3, [r3, #2]
 8011096:	2b00      	cmp	r3, #0
 8011098:	d103      	bne.n	80110a2 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 801109a:	f04f 0302 	mov.w	r3, #2
 801109e:	81fb      	strh	r3, [r7, #14]
 80110a0:	e002      	b.n	80110a8 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80110a2:	f04f 0300 	mov.w	r3, #0
 80110a6:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	889b      	ldrh	r3, [r3, #4]
 80110ac:	2b01      	cmp	r3, #1
 80110ae:	d103      	bne.n	80110b8 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80110b0:	f04f 0302 	mov.w	r3, #2
 80110b4:	81bb      	strh	r3, [r7, #12]
 80110b6:	e002      	b.n	80110be <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 80110b8:	f04f 0301 	mov.w	r3, #1
 80110bc:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	881b      	ldrh	r3, [r3, #0]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d11c      	bne.n	8011100 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	8859      	ldrh	r1, [r3, #2]
 80110ca:	683b      	ldr	r3, [r7, #0]
 80110cc:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 80110ce:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 80110d0:	891b      	ldrh	r3, [r3, #8]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 fc36 	bl	8011944 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	88db      	ldrh	r3, [r3, #6]
 80110dc:	6878      	ldr	r0, [r7, #4]
 80110de:	4619      	mov	r1, r3
 80110e0:	f000 f85e 	bl	80111a0 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 80110e4:	683b      	ldr	r3, [r7, #0]
 80110e6:	891b      	ldrh	r3, [r3, #8]
 80110e8:	89f9      	ldrh	r1, [r7, #14]
 80110ea:	89ba      	ldrh	r2, [r7, #12]
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f000 fc69 	bl	80119c4 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	88db      	ldrh	r3, [r3, #6]
 80110f6:	6878      	ldr	r0, [r7, #4]
 80110f8:	4619      	mov	r1, r3
 80110fa:	f000 f86d 	bl	80111d8 <TIM_SetIC2Prescaler>
 80110fe:	e01b      	b.n	8011138 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	8859      	ldrh	r1, [r3, #2]
 8011104:	683b      	ldr	r3, [r7, #0]
 8011106:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8011108:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801110a:	891b      	ldrh	r3, [r3, #8]
 801110c:	6878      	ldr	r0, [r7, #4]
 801110e:	f000 fc59 	bl	80119c4 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	88db      	ldrh	r3, [r3, #6]
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	4619      	mov	r1, r3
 801111a:	f000 f85d 	bl	80111d8 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	891b      	ldrh	r3, [r3, #8]
 8011122:	89f9      	ldrh	r1, [r7, #14]
 8011124:	89ba      	ldrh	r2, [r7, #12]
 8011126:	6878      	ldr	r0, [r7, #4]
 8011128:	f000 fc0c 	bl	8011944 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	88db      	ldrh	r3, [r3, #6]
 8011130:	6878      	ldr	r0, [r7, #4]
 8011132:	4619      	mov	r1, r3
 8011134:	f000 f834 	bl	80111a0 <TIM_SetIC1Prescaler>
  }
}
 8011138:	f107 0710 	add.w	r7, r7, #16
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 801114c:	4618      	mov	r0, r3
 801114e:	f107 070c 	add.w	r7, r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	bc80      	pop	{r7}
 8011156:	4770      	bx	lr

08011158 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8011164:	4618      	mov	r0, r3
 8011166:	f107 070c 	add.w	r7, r7, #12
 801116a:	46bd      	mov	sp, r7
 801116c:	bc80      	pop	{r7}
 801116e:	4770      	bx	lr

08011170 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8011170:	b480      	push	{r7}
 8011172:	b083      	sub	sp, #12
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 801117c:	4618      	mov	r0, r3
 801117e:	f107 070c 	add.w	r7, r7, #12
 8011182:	46bd      	mov	sp, r7
 8011184:	bc80      	pop	{r7}
 8011186:	4770      	bx	lr

08011188 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 8011188:	b480      	push	{r7}
 801118a:	b083      	sub	sp, #12
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8011194:	4618      	mov	r0, r3
 8011196:	f107 070c 	add.w	r7, r7, #12
 801119a:	46bd      	mov	sp, r7
 801119c:	bc80      	pop	{r7}
 801119e:	4770      	bx	lr

080111a0 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	460b      	mov	r3, r1
 80111aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	8b1b      	ldrh	r3, [r3, #24]
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	f023 030c 	bic.w	r3, r3, #12
 80111b6:	b29a      	uxth	r2, r3
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	8b1b      	ldrh	r3, [r3, #24]
 80111c0:	b29a      	uxth	r2, r3
 80111c2:	887b      	ldrh	r3, [r7, #2]
 80111c4:	4313      	orrs	r3, r2
 80111c6:	b29a      	uxth	r2, r3
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	831a      	strh	r2, [r3, #24]
}
 80111cc:	f107 070c 	add.w	r7, r7, #12
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bc80      	pop	{r7}
 80111d4:	4770      	bx	lr
 80111d6:	bf00      	nop

080111d8 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	460b      	mov	r3, r1
 80111e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	8b1b      	ldrh	r3, [r3, #24]
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80111ee:	b29a      	uxth	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	8b1b      	ldrh	r3, [r3, #24]
 80111f8:	b29a      	uxth	r2, r3
 80111fa:	887b      	ldrh	r3, [r7, #2]
 80111fc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011200:	b29b      	uxth	r3, r3
 8011202:	4313      	orrs	r3, r2
 8011204:	b29a      	uxth	r2, r3
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	831a      	strh	r2, [r3, #24]
}
 801120a:	f107 070c 	add.w	r7, r7, #12
 801120e:	46bd      	mov	sp, r7
 8011210:	bc80      	pop	{r7}
 8011212:	4770      	bx	lr

08011214 <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8011214:	b480      	push	{r7}
 8011216:	b083      	sub	sp, #12
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	460b      	mov	r3, r1
 801121e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	8b9b      	ldrh	r3, [r3, #28]
 8011224:	b29b      	uxth	r3, r3
 8011226:	f023 030c 	bic.w	r3, r3, #12
 801122a:	b29a      	uxth	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	8b9b      	ldrh	r3, [r3, #28]
 8011234:	b29a      	uxth	r2, r3
 8011236:	887b      	ldrh	r3, [r7, #2]
 8011238:	4313      	orrs	r3, r2
 801123a:	b29a      	uxth	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	839a      	strh	r2, [r3, #28]
}
 8011240:	f107 070c 	add.w	r7, r7, #12
 8011244:	46bd      	mov	sp, r7
 8011246:	bc80      	pop	{r7}
 8011248:	4770      	bx	lr
 801124a:	bf00      	nop

0801124c <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 801124c:	b480      	push	{r7}
 801124e:	b083      	sub	sp, #12
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	460b      	mov	r3, r1
 8011256:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	8b9b      	ldrh	r3, [r3, #28]
 801125c:	b29b      	uxth	r3, r3
 801125e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011262:	b29a      	uxth	r2, r3
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	8b9b      	ldrh	r3, [r3, #28]
 801126c:	b29a      	uxth	r2, r3
 801126e:	887b      	ldrh	r3, [r7, #2]
 8011270:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011274:	b29b      	uxth	r3, r3
 8011276:	4313      	orrs	r3, r2
 8011278:	b29a      	uxth	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	839a      	strh	r2, [r3, #28]
}
 801127e:	f107 070c 	add.w	r7, r7, #12
 8011282:	46bd      	mov	sp, r7
 8011284:	bc80      	pop	{r7}
 8011286:	4770      	bx	lr

08011288 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	881a      	ldrh	r2, [r3, #0]
 8011296:	683b      	ldr	r3, [r7, #0]
 8011298:	885b      	ldrh	r3, [r3, #2]
 801129a:	4313      	orrs	r3, r2
 801129c:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 801129e:	683b      	ldr	r3, [r7, #0]
 80112a0:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80112a2:	4313      	orrs	r3, r2
 80112a4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80112aa:	4313      	orrs	r3, r2
 80112ac:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80112b2:	4313      	orrs	r3, r2
 80112b4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80112ba:	4313      	orrs	r3, r2
 80112bc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 80112be:	683b      	ldr	r3, [r7, #0]
 80112c0:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 80112c2:	4313      	orrs	r3, r2
 80112c4:	b29a      	uxth	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 80112cc:	f107 070c 	add.w	r7, r7, #12
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bc80      	pop	{r7}
 80112d4:	4770      	bx	lr
 80112d6:	bf00      	nop

080112d8 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 80112d8:	b480      	push	{r7}
 80112da:	b083      	sub	sp, #12
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f04f 0200 	mov.w	r2, #0
 80112e6:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f04f 0200 	mov.w	r2, #0
 80112ee:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	f04f 0200 	mov.w	r2, #0
 80112f6:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f04f 0200 	mov.w	r2, #0
 80112fe:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f04f 0200 	mov.w	r2, #0
 8011306:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f04f 0200 	mov.w	r2, #0
 801130e:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f04f 0200 	mov.w	r2, #0
 8011316:	819a      	strh	r2, [r3, #12]
}
 8011318:	f107 070c 	add.w	r7, r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	bc80      	pop	{r7}
 8011320:	4770      	bx	lr
 8011322:	bf00      	nop

08011324 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8011324:	b480      	push	{r7}
 8011326:	b083      	sub	sp, #12
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	460b      	mov	r3, r1
 801132e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011330:	78fb      	ldrb	r3, [r7, #3]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00c      	beq.n	8011350 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 801133c:	b29b      	uxth	r3, r3
 801133e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011346:	b29a      	uxth	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 801134e:	e00b      	b.n	8011368 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011356:	b29b      	uxth	r3, r3
 8011358:	ea4f 4343 	mov.w	r3, r3, lsl #17
 801135c:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8011360:	b29a      	uxth	r2, r3
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8011368:	f107 070c 	add.w	r7, r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	bc80      	pop	{r7}
 8011370:	4770      	bx	lr
 8011372:	bf00      	nop

08011374 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	460b      	mov	r3, r1
 801137e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011380:	78fb      	ldrb	r3, [r7, #3]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d008      	beq.n	8011398 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	889b      	ldrh	r3, [r3, #4]
 801138a:	b29b      	uxth	r3, r3
 801138c:	f043 0304 	orr.w	r3, r3, #4
 8011390:	b29a      	uxth	r2, r3
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	809a      	strh	r2, [r3, #4]
 8011396:	e007      	b.n	80113a8 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	889b      	ldrh	r3, [r3, #4]
 801139c:	b29b      	uxth	r3, r3
 801139e:	f023 0304 	bic.w	r3, r3, #4
 80113a2:	b29a      	uxth	r2, r3
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	809a      	strh	r2, [r3, #4]
  }
}
 80113a8:	f107 070c 	add.w	r7, r7, #12
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bc80      	pop	{r7}
 80113b0:	4770      	bx	lr
 80113b2:	bf00      	nop

080113b4 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 80113b4:	b480      	push	{r7}
 80113b6:	b083      	sub	sp, #12
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
 80113bc:	460b      	mov	r3, r1
 80113be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80113c0:	78fb      	ldrb	r3, [r7, #3]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d008      	beq.n	80113d8 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	889b      	ldrh	r3, [r3, #4]
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	f043 0301 	orr.w	r3, r3, #1
 80113d0:	b29a      	uxth	r2, r3
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	809a      	strh	r2, [r3, #4]
 80113d6:	e007      	b.n	80113e8 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	889b      	ldrh	r3, [r3, #4]
 80113dc:	b29b      	uxth	r3, r3
 80113de:	f023 0301 	bic.w	r3, r3, #1
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	809a      	strh	r2, [r3, #4]
  }
}
 80113e8:	f107 070c 	add.w	r7, r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bc80      	pop	{r7}
 80113f0:	4770      	bx	lr
 80113f2:	bf00      	nop

080113f4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80113f4:	b480      	push	{r7}
 80113f6:	b083      	sub	sp, #12
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	4613      	mov	r3, r2
 80113fe:	460a      	mov	r2, r1
 8011400:	807a      	strh	r2, [r7, #2]
 8011402:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011404:	787b      	ldrb	r3, [r7, #1]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d008      	beq.n	801141c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	899b      	ldrh	r3, [r3, #12]
 801140e:	b29a      	uxth	r2, r3
 8011410:	887b      	ldrh	r3, [r7, #2]
 8011412:	4313      	orrs	r3, r2
 8011414:	b29a      	uxth	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	819a      	strh	r2, [r3, #12]
 801141a:	e00a      	b.n	8011432 <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	899b      	ldrh	r3, [r3, #12]
 8011420:	b29a      	uxth	r2, r3
 8011422:	887b      	ldrh	r3, [r7, #2]
 8011424:	ea6f 0303 	mvn.w	r3, r3
 8011428:	b29b      	uxth	r3, r3
 801142a:	4013      	ands	r3, r2
 801142c:	b29a      	uxth	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	819a      	strh	r2, [r3, #12]
  }
}
 8011432:	f107 070c 	add.w	r7, r7, #12
 8011436:	46bd      	mov	sp, r7
 8011438:	bc80      	pop	{r7}
 801143a:	4770      	bx	lr

0801143c <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 801143c:	b480      	push	{r7}
 801143e:	b083      	sub	sp, #12
 8011440:	af00      	add	r7, sp, #0
 8011442:	6078      	str	r0, [r7, #4]
 8011444:	460b      	mov	r3, r1
 8011446:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	887a      	ldrh	r2, [r7, #2]
 801144c:	829a      	strh	r2, [r3, #20]
}
 801144e:	f107 070c 	add.w	r7, r7, #12
 8011452:	46bd      	mov	sp, r7
 8011454:	bc80      	pop	{r7}
 8011456:	4770      	bx	lr

08011458 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8011458:	b480      	push	{r7}
 801145a:	b085      	sub	sp, #20
 801145c:	af00      	add	r7, sp, #0
 801145e:	6078      	str	r0, [r7, #4]
 8011460:	460b      	mov	r3, r1
 8011462:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8011464:	f04f 0300 	mov.w	r3, #0
 8011468:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	8a1b      	ldrh	r3, [r3, #16]
 801146e:	b29a      	uxth	r2, r3
 8011470:	887b      	ldrh	r3, [r7, #2]
 8011472:	4013      	ands	r3, r2
 8011474:	b29b      	uxth	r3, r3
 8011476:	2b00      	cmp	r3, #0
 8011478:	d003      	beq.n	8011482 <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 801147a:	f04f 0301 	mov.w	r3, #1
 801147e:	73fb      	strb	r3, [r7, #15]
 8011480:	e002      	b.n	8011488 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8011482:	f04f 0300 	mov.w	r3, #0
 8011486:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011488:	7bfb      	ldrb	r3, [r7, #15]
}
 801148a:	4618      	mov	r0, r3
 801148c:	f107 0714 	add.w	r7, r7, #20
 8011490:	46bd      	mov	sp, r7
 8011492:	bc80      	pop	{r7}
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop

08011498 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	460b      	mov	r3, r1
 80114a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80114a4:	887b      	ldrh	r3, [r7, #2]
 80114a6:	ea6f 0303 	mvn.w	r3, r3
 80114aa:	b29a      	uxth	r2, r3
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	821a      	strh	r2, [r3, #16]
}
 80114b0:	f107 070c 	add.w	r7, r7, #12
 80114b4:	46bd      	mov	sp, r7
 80114b6:	bc80      	pop	{r7}
 80114b8:	4770      	bx	lr
 80114ba:	bf00      	nop

080114bc <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80114bc:	b480      	push	{r7}
 80114be:	b085      	sub	sp, #20
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	460b      	mov	r3, r1
 80114c6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80114c8:	f04f 0300 	mov.w	r3, #0
 80114cc:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80114ce:	f04f 0300 	mov.w	r3, #0
 80114d2:	81bb      	strh	r3, [r7, #12]
 80114d4:	f04f 0300 	mov.w	r3, #0
 80114d8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	8a1b      	ldrh	r3, [r3, #16]
 80114de:	b29a      	uxth	r2, r3
 80114e0:	887b      	ldrh	r3, [r7, #2]
 80114e2:	4013      	ands	r3, r2
 80114e4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	899b      	ldrh	r3, [r3, #12]
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	887b      	ldrh	r3, [r7, #2]
 80114ee:	4013      	ands	r3, r2
 80114f0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80114f2:	89bb      	ldrh	r3, [r7, #12]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d006      	beq.n	8011506 <TIM_GetITStatus+0x4a>
 80114f8:	897b      	ldrh	r3, [r7, #10]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d003      	beq.n	8011506 <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 80114fe:	f04f 0301 	mov.w	r3, #1
 8011502:	73fb      	strb	r3, [r7, #15]
 8011504:	e002      	b.n	801150c <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8011506:	f04f 0300 	mov.w	r3, #0
 801150a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801150c:	7bfb      	ldrb	r3, [r7, #15]
}
 801150e:	4618      	mov	r0, r3
 8011510:	f107 0714 	add.w	r7, r7, #20
 8011514:	46bd      	mov	sp, r7
 8011516:	bc80      	pop	{r7}
 8011518:	4770      	bx	lr
 801151a:	bf00      	nop

0801151c <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 801151c:	b480      	push	{r7}
 801151e:	b083      	sub	sp, #12
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	460b      	mov	r3, r1
 8011526:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8011528:	887b      	ldrh	r3, [r7, #2]
 801152a:	ea6f 0303 	mvn.w	r3, r3
 801152e:	b29a      	uxth	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	821a      	strh	r2, [r3, #16]
}
 8011534:	f107 070c 	add.w	r7, r7, #12
 8011538:	46bd      	mov	sp, r7
 801153a:	bc80      	pop	{r7}
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop

08011540 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8011540:	b480      	push	{r7}
 8011542:	b083      	sub	sp, #12
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	4613      	mov	r3, r2
 801154a:	460a      	mov	r2, r1
 801154c:	807a      	strh	r2, [r7, #2]
 801154e:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8011550:	887a      	ldrh	r2, [r7, #2]
 8011552:	883b      	ldrh	r3, [r7, #0]
 8011554:	4313      	orrs	r3, r2
 8011556:	b29a      	uxth	r2, r3
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 801155e:	f107 070c 	add.w	r7, r7, #12
 8011562:	46bd      	mov	sp, r7
 8011564:	bc80      	pop	{r7}
 8011566:	4770      	bx	lr

08011568 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8011568:	b480      	push	{r7}
 801156a:	b083      	sub	sp, #12
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
 8011570:	4613      	mov	r3, r2
 8011572:	460a      	mov	r2, r1
 8011574:	807a      	strh	r2, [r7, #2]
 8011576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011578:	787b      	ldrb	r3, [r7, #1]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d008      	beq.n	8011590 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	899b      	ldrh	r3, [r3, #12]
 8011582:	b29a      	uxth	r2, r3
 8011584:	887b      	ldrh	r3, [r7, #2]
 8011586:	4313      	orrs	r3, r2
 8011588:	b29a      	uxth	r2, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	819a      	strh	r2, [r3, #12]
 801158e:	e00a      	b.n	80115a6 <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	899b      	ldrh	r3, [r3, #12]
 8011594:	b29a      	uxth	r2, r3
 8011596:	887b      	ldrh	r3, [r7, #2]
 8011598:	ea6f 0303 	mvn.w	r3, r3
 801159c:	b29b      	uxth	r3, r3
 801159e:	4013      	ands	r3, r2
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	819a      	strh	r2, [r3, #12]
  }
}
 80115a6:	f107 070c 	add.w	r7, r7, #12
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bc80      	pop	{r7}
 80115ae:	4770      	bx	lr

080115b0 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
 80115b8:	460b      	mov	r3, r1
 80115ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80115bc:	78fb      	ldrb	r3, [r7, #3]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d008      	beq.n	80115d4 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	889b      	ldrh	r3, [r3, #4]
 80115c6:	b29b      	uxth	r3, r3
 80115c8:	f043 0308 	orr.w	r3, r3, #8
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	809a      	strh	r2, [r3, #4]
 80115d2:	e007      	b.n	80115e4 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	889b      	ldrh	r3, [r3, #4]
 80115d8:	b29b      	uxth	r3, r3
 80115da:	f023 0308 	bic.w	r3, r3, #8
 80115de:	b29a      	uxth	r2, r3
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	809a      	strh	r2, [r3, #4]
  }
}
 80115e4:	f107 070c 	add.w	r7, r7, #12
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bc80      	pop	{r7}
 80115ec:	4770      	bx	lr
 80115ee:	bf00      	nop

080115f0 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 80115f0:	b480      	push	{r7}
 80115f2:	b083      	sub	sp, #12
 80115f4:	af00      	add	r7, sp, #0
 80115f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	891b      	ldrh	r3, [r3, #8]
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	f023 0307 	bic.w	r3, r3, #7
 8011602:	b29a      	uxth	r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	811a      	strh	r2, [r3, #8]
}
 8011608:	f107 070c 	add.w	r7, r7, #12
 801160c:	46bd      	mov	sp, r7
 801160e:	bc80      	pop	{r7}
 8011610:	4770      	bx	lr
 8011612:	bf00      	nop

08011614 <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b082      	sub	sp, #8
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	460b      	mov	r3, r1
 801161e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8011620:	887b      	ldrh	r3, [r7, #2]
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	4619      	mov	r1, r3
 8011626:	f000 f87d 	bl	8011724 <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	891b      	ldrh	r3, [r3, #8]
 801162e:	b29b      	uxth	r3, r3
 8011630:	f043 0307 	orr.w	r3, r3, #7
 8011634:	b29a      	uxth	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	811a      	strh	r2, [r3, #8]
}
 801163a:	f107 0708 	add.w	r7, r7, #8
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop

08011644 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	60f8      	str	r0, [r7, #12]
 801164c:	8179      	strh	r1, [r7, #10]
 801164e:	813a      	strh	r2, [r7, #8]
 8011650:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8011652:	897b      	ldrh	r3, [r7, #10]
 8011654:	2b60      	cmp	r3, #96	; 0x60
 8011656:	d108      	bne.n	801166a <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8011658:	893a      	ldrh	r2, [r7, #8]
 801165a:	88fb      	ldrh	r3, [r7, #6]
 801165c:	68f8      	ldr	r0, [r7, #12]
 801165e:	4611      	mov	r1, r2
 8011660:	f04f 0201 	mov.w	r2, #1
 8011664:	f000 f9ae 	bl	80119c4 <TI2_Config>
 8011668:	e007      	b.n	801167a <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 801166a:	893a      	ldrh	r2, [r7, #8]
 801166c:	88fb      	ldrh	r3, [r7, #6]
 801166e:	68f8      	ldr	r0, [r7, #12]
 8011670:	4611      	mov	r1, r2
 8011672:	f04f 0201 	mov.w	r2, #1
 8011676:	f000 f965 	bl	8011944 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 801167a:	897b      	ldrh	r3, [r7, #10]
 801167c:	68f8      	ldr	r0, [r7, #12]
 801167e:	4619      	mov	r1, r3
 8011680:	f000 f850 	bl	8011724 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	891b      	ldrh	r3, [r3, #8]
 8011688:	b29b      	uxth	r3, r3
 801168a:	f043 0307 	orr.w	r3, r3, #7
 801168e:	b29a      	uxth	r2, r3
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	811a      	strh	r2, [r3, #8]
}
 8011694:	f107 0710 	add.w	r7, r7, #16
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801169c:	b580      	push	{r7, lr}
 801169e:	b086      	sub	sp, #24
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	8179      	strh	r1, [r7, #10]
 80116a6:	813a      	strh	r2, [r7, #8]
 80116a8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80116aa:	f04f 0300 	mov.w	r3, #0
 80116ae:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80116b0:	8979      	ldrh	r1, [r7, #10]
 80116b2:	893a      	ldrh	r2, [r7, #8]
 80116b4:	88fb      	ldrh	r3, [r7, #6]
 80116b6:	68f8      	ldr	r0, [r7, #12]
 80116b8:	f000 f8a4 	bl	8011804 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	891b      	ldrh	r3, [r3, #8]
 80116c0:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80116c2:	8afb      	ldrh	r3, [r7, #22]
 80116c4:	f023 0307 	bic.w	r3, r3, #7
 80116c8:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 80116ca:	8afb      	ldrh	r3, [r7, #22]
 80116cc:	f043 0307 	orr.w	r3, r3, #7
 80116d0:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 80116d2:	8afb      	ldrh	r3, [r7, #22]
 80116d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116d8:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 80116da:	8afb      	ldrh	r3, [r7, #22]
 80116dc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80116e0:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	8afa      	ldrh	r2, [r7, #22]
 80116e6:	811a      	strh	r2, [r3, #8]
}
 80116e8:	f107 0718 	add.w	r7, r7, #24
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}

080116f0 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b084      	sub	sp, #16
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	8179      	strh	r1, [r7, #10]
 80116fa:	813a      	strh	r2, [r7, #8]
 80116fc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 80116fe:	8979      	ldrh	r1, [r7, #10]
 8011700:	893a      	ldrh	r2, [r7, #8]
 8011702:	88fb      	ldrh	r3, [r7, #6]
 8011704:	68f8      	ldr	r0, [r7, #12]
 8011706:	f000 f87d 	bl	8011804 <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	891b      	ldrh	r3, [r3, #8]
 801170e:	b29b      	uxth	r3, r3
 8011710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011714:	b29a      	uxth	r2, r3
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	811a      	strh	r2, [r3, #8]
}
 801171a:	f107 0710 	add.w	r7, r7, #16
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
 8011722:	bf00      	nop

08011724 <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
 801172c:	460b      	mov	r3, r1
 801172e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8011730:	f04f 0300 	mov.w	r3, #0
 8011734:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	891b      	ldrh	r3, [r3, #8]
 801173a:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 801173c:	89fb      	ldrh	r3, [r7, #14]
 801173e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011742:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8011744:	89fa      	ldrh	r2, [r7, #14]
 8011746:	887b      	ldrh	r3, [r7, #2]
 8011748:	4313      	orrs	r3, r2
 801174a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	89fa      	ldrh	r2, [r7, #14]
 8011750:	811a      	strh	r2, [r3, #8]
}
 8011752:	f107 0714 	add.w	r7, r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	bc80      	pop	{r7}
 801175a:	4770      	bx	lr

0801175c <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	460b      	mov	r3, r1
 8011766:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	889b      	ldrh	r3, [r3, #4]
 801176c:	b29b      	uxth	r3, r3
 801176e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011772:	b29a      	uxth	r2, r3
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	889b      	ldrh	r3, [r3, #4]
 801177c:	b29a      	uxth	r2, r3
 801177e:	887b      	ldrh	r3, [r7, #2]
 8011780:	4313      	orrs	r3, r2
 8011782:	b29a      	uxth	r2, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	809a      	strh	r2, [r3, #4]
}
 8011788:	f107 070c 	add.w	r7, r7, #12
 801178c:	46bd      	mov	sp, r7
 801178e:	bc80      	pop	{r7}
 8011790:	4770      	bx	lr
 8011792:	bf00      	nop

08011794 <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8011794:	b480      	push	{r7}
 8011796:	b083      	sub	sp, #12
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	460b      	mov	r3, r1
 801179e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	891b      	ldrh	r3, [r3, #8]
 80117a4:	b29b      	uxth	r3, r3
 80117a6:	f023 0307 	bic.w	r3, r3, #7
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	891b      	ldrh	r3, [r3, #8]
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	887b      	ldrh	r3, [r7, #2]
 80117b8:	4313      	orrs	r3, r2
 80117ba:	b29a      	uxth	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	811a      	strh	r2, [r3, #8]
}
 80117c0:	f107 070c 	add.w	r7, r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bc80      	pop	{r7}
 80117c8:	4770      	bx	lr
 80117ca:	bf00      	nop

080117cc <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 80117cc:	b480      	push	{r7}
 80117ce:	b083      	sub	sp, #12
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	460b      	mov	r3, r1
 80117d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	891b      	ldrh	r3, [r3, #8]
 80117dc:	b29b      	uxth	r3, r3
 80117de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80117e2:	b29a      	uxth	r2, r3
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	891b      	ldrh	r3, [r3, #8]
 80117ec:	b29a      	uxth	r2, r3
 80117ee:	887b      	ldrh	r3, [r7, #2]
 80117f0:	4313      	orrs	r3, r2
 80117f2:	b29a      	uxth	r2, r3
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	811a      	strh	r2, [r3, #8]
}
 80117f8:	f107 070c 	add.w	r7, r7, #12
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bc80      	pop	{r7}
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop

08011804 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8011804:	b480      	push	{r7}
 8011806:	b087      	sub	sp, #28
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	8179      	strh	r1, [r7, #10]
 801180e:	813a      	strh	r2, [r7, #8]
 8011810:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8011812:	f04f 0300 	mov.w	r3, #0
 8011816:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	891b      	ldrh	r3, [r3, #8]
 801181c:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 801181e:	8afb      	ldrh	r3, [r7, #22]
 8011820:	b2db      	uxtb	r3, r3
 8011822:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8011824:	88fb      	ldrh	r3, [r7, #6]
 8011826:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801182a:	b29a      	uxth	r2, r3
 801182c:	893b      	ldrh	r3, [r7, #8]
 801182e:	4313      	orrs	r3, r2
 8011830:	b29a      	uxth	r2, r3
 8011832:	897b      	ldrh	r3, [r7, #10]
 8011834:	4313      	orrs	r3, r2
 8011836:	b29a      	uxth	r2, r3
 8011838:	8afb      	ldrh	r3, [r7, #22]
 801183a:	4313      	orrs	r3, r2
 801183c:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	8afa      	ldrh	r2, [r7, #22]
 8011842:	811a      	strh	r2, [r3, #8]
}
 8011844:	f107 071c 	add.w	r7, r7, #28
 8011848:	46bd      	mov	sp, r7
 801184a:	bc80      	pop	{r7}
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop

08011850 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8011850:	b480      	push	{r7}
 8011852:	b087      	sub	sp, #28
 8011854:	af00      	add	r7, sp, #0
 8011856:	60f8      	str	r0, [r7, #12]
 8011858:	8179      	strh	r1, [r7, #10]
 801185a:	813a      	strh	r2, [r7, #8]
 801185c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801185e:	f04f 0300 	mov.w	r3, #0
 8011862:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 8011864:	f04f 0300 	mov.w	r3, #0
 8011868:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 801186a:	f04f 0300 	mov.w	r3, #0
 801186e:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	891b      	ldrh	r3, [r3, #8]
 8011874:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	8b1b      	ldrh	r3, [r3, #24]
 801187a:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	8c1b      	ldrh	r3, [r3, #32]
 8011880:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8011882:	8afb      	ldrh	r3, [r7, #22]
 8011884:	f023 0307 	bic.w	r3, r3, #7
 8011888:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 801188a:	8afa      	ldrh	r2, [r7, #22]
 801188c:	897b      	ldrh	r3, [r7, #10]
 801188e:	4313      	orrs	r3, r2
 8011890:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 8011892:	8abb      	ldrh	r3, [r7, #20]
 8011894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011898:	f023 0303 	bic.w	r3, r3, #3
 801189c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 801189e:	8abb      	ldrh	r3, [r7, #20]
 80118a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80118a4:	f043 0301 	orr.w	r3, r3, #1
 80118a8:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80118aa:	8a7b      	ldrh	r3, [r7, #18]
 80118ac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80118b0:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80118b2:	88fb      	ldrh	r3, [r7, #6]
 80118b4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	893b      	ldrh	r3, [r7, #8]
 80118bc:	4313      	orrs	r3, r2
 80118be:	b29a      	uxth	r2, r3
 80118c0:	8a7b      	ldrh	r3, [r7, #18]
 80118c2:	4313      	orrs	r3, r2
 80118c4:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	8afa      	ldrh	r2, [r7, #22]
 80118ca:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80118cc:	68fb      	ldr	r3, [r7, #12]
 80118ce:	8aba      	ldrh	r2, [r7, #20]
 80118d0:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	8a7a      	ldrh	r2, [r7, #18]
 80118d6:	841a      	strh	r2, [r3, #32]
}
 80118d8:	f107 071c 	add.w	r7, r7, #28
 80118dc:	46bd      	mov	sp, r7
 80118de:	bc80      	pop	{r7}
 80118e0:	4770      	bx	lr
 80118e2:	bf00      	nop

080118e4 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b083      	sub	sp, #12
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	6078      	str	r0, [r7, #4]
 80118ec:	460b      	mov	r3, r1
 80118ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80118f0:	78fb      	ldrb	r3, [r7, #3]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d008      	beq.n	8011908 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	889b      	ldrh	r3, [r3, #4]
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011900:	b29a      	uxth	r2, r3
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	809a      	strh	r2, [r3, #4]
 8011906:	e007      	b.n	8011918 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	889b      	ldrh	r3, [r3, #4]
 801190c:	b29b      	uxth	r3, r3
 801190e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011912:	b29a      	uxth	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	809a      	strh	r2, [r3, #4]
  }
}
 8011918:	f107 070c 	add.w	r7, r7, #12
 801191c:	46bd      	mov	sp, r7
 801191e:	bc80      	pop	{r7}
 8011920:	4770      	bx	lr
 8011922:	bf00      	nop

08011924 <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 8011924:	b480      	push	{r7}
 8011926:	b083      	sub	sp, #12
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	460b      	mov	r3, r1
 801192e:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	887a      	ldrh	r2, [r7, #2]
 8011934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8011938:	f107 070c 	add.w	r7, r7, #12
 801193c:	46bd      	mov	sp, r7
 801193e:	bc80      	pop	{r7}
 8011940:	4770      	bx	lr
 8011942:	bf00      	nop

08011944 <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8011944:	b480      	push	{r7}
 8011946:	b087      	sub	sp, #28
 8011948:	af00      	add	r7, sp, #0
 801194a:	60f8      	str	r0, [r7, #12]
 801194c:	8179      	strh	r1, [r7, #10]
 801194e:	813a      	strh	r2, [r7, #8]
 8011950:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8011952:	f04f 0300 	mov.w	r3, #0
 8011956:	82fb      	strh	r3, [r7, #22]
 8011958:	f04f 0300 	mov.w	r3, #0
 801195c:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	8c1b      	ldrh	r3, [r3, #32]
 8011962:	b29b      	uxth	r3, r3
 8011964:	f023 0301 	bic.w	r3, r3, #1
 8011968:	b29a      	uxth	r2, r3
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	8b1b      	ldrh	r3, [r3, #24]
 8011972:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	8c1b      	ldrh	r3, [r3, #32]
 8011978:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 801197a:	8afb      	ldrh	r3, [r7, #22]
 801197c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8011980:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8011982:	88fb      	ldrh	r3, [r7, #6]
 8011984:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011988:	b29a      	uxth	r2, r3
 801198a:	893b      	ldrh	r3, [r7, #8]
 801198c:	4313      	orrs	r3, r2
 801198e:	b29a      	uxth	r2, r3
 8011990:	8afb      	ldrh	r3, [r7, #22]
 8011992:	4313      	orrs	r3, r2
 8011994:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8011996:	8abb      	ldrh	r3, [r7, #20]
 8011998:	f023 030a 	bic.w	r3, r3, #10
 801199c:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 801199e:	897a      	ldrh	r2, [r7, #10]
 80119a0:	8abb      	ldrh	r3, [r7, #20]
 80119a2:	4313      	orrs	r3, r2
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	f043 0301 	orr.w	r3, r3, #1
 80119aa:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	8afa      	ldrh	r2, [r7, #22]
 80119b0:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	8aba      	ldrh	r2, [r7, #20]
 80119b6:	841a      	strh	r2, [r3, #32]
}
 80119b8:	f107 071c 	add.w	r7, r7, #28
 80119bc:	46bd      	mov	sp, r7
 80119be:	bc80      	pop	{r7}
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop

080119c4 <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b087      	sub	sp, #28
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	60f8      	str	r0, [r7, #12]
 80119cc:	8179      	strh	r1, [r7, #10]
 80119ce:	813a      	strh	r2, [r7, #8]
 80119d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80119d2:	f04f 0300 	mov.w	r3, #0
 80119d6:	82fb      	strh	r3, [r7, #22]
 80119d8:	f04f 0300 	mov.w	r3, #0
 80119dc:	82bb      	strh	r3, [r7, #20]
 80119de:	f04f 0300 	mov.w	r3, #0
 80119e2:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	8c1b      	ldrh	r3, [r3, #32]
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	f023 0310 	bic.w	r3, r3, #16
 80119ee:	b29a      	uxth	r2, r3
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	8b1b      	ldrh	r3, [r3, #24]
 80119f8:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	8c1b      	ldrh	r3, [r3, #32]
 80119fe:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8011a00:	897b      	ldrh	r3, [r7, #10]
 8011a02:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011a06:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8011a08:	8afb      	ldrh	r3, [r7, #22]
 8011a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011a0e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8011a12:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8011a16:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8011a18:	88fb      	ldrh	r3, [r7, #6]
 8011a1a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011a1e:	b29a      	uxth	r2, r3
 8011a20:	8afb      	ldrh	r3, [r7, #22]
 8011a22:	4313      	orrs	r3, r2
 8011a24:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8011a26:	893b      	ldrh	r3, [r7, #8]
 8011a28:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011a2c:	b29a      	uxth	r2, r3
 8011a2e:	8afb      	ldrh	r3, [r7, #22]
 8011a30:	4313      	orrs	r3, r2
 8011a32:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8011a34:	8abb      	ldrh	r3, [r7, #20]
 8011a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011a3a:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8011a3c:	8a7a      	ldrh	r2, [r7, #18]
 8011a3e:	8abb      	ldrh	r3, [r7, #20]
 8011a40:	4313      	orrs	r3, r2
 8011a42:	b29b      	uxth	r3, r3
 8011a44:	f043 0310 	orr.w	r3, r3, #16
 8011a48:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	8afa      	ldrh	r2, [r7, #22]
 8011a4e:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	8aba      	ldrh	r2, [r7, #20]
 8011a54:	841a      	strh	r2, [r3, #32]
}
 8011a56:	f107 071c 	add.w	r7, r7, #28
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bc80      	pop	{r7}
 8011a5e:	4770      	bx	lr

08011a60 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8011a60:	b480      	push	{r7}
 8011a62:	b087      	sub	sp, #28
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	60f8      	str	r0, [r7, #12]
 8011a68:	8179      	strh	r1, [r7, #10]
 8011a6a:	813a      	strh	r2, [r7, #8]
 8011a6c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8011a6e:	f04f 0300 	mov.w	r3, #0
 8011a72:	82fb      	strh	r3, [r7, #22]
 8011a74:	f04f 0300 	mov.w	r3, #0
 8011a78:	82bb      	strh	r3, [r7, #20]
 8011a7a:	f04f 0300 	mov.w	r3, #0
 8011a7e:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	8c1b      	ldrh	r3, [r3, #32]
 8011a84:	b29b      	uxth	r3, r3
 8011a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011a8a:	b29a      	uxth	r2, r3
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	8b9b      	ldrh	r3, [r3, #28]
 8011a94:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	8c1b      	ldrh	r3, [r3, #32]
 8011a9a:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8011a9c:	897b      	ldrh	r3, [r7, #10]
 8011a9e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011aa2:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 8011aa4:	8afb      	ldrh	r3, [r7, #22]
 8011aa6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8011aaa:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8011aac:	88fb      	ldrh	r3, [r7, #6]
 8011aae:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	893b      	ldrh	r3, [r7, #8]
 8011ab6:	4313      	orrs	r3, r2
 8011ab8:	b29a      	uxth	r2, r3
 8011aba:	8afb      	ldrh	r3, [r7, #22]
 8011abc:	4313      	orrs	r3, r2
 8011abe:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011ac0:	8abb      	ldrh	r3, [r7, #20]
 8011ac2:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8011ac6:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8011ac8:	8a7a      	ldrh	r2, [r7, #18]
 8011aca:	8abb      	ldrh	r3, [r7, #20]
 8011acc:	4313      	orrs	r3, r2
 8011ace:	b29b      	uxth	r3, r3
 8011ad0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011ad4:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	8afa      	ldrh	r2, [r7, #22]
 8011ada:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	8aba      	ldrh	r2, [r7, #20]
 8011ae0:	841a      	strh	r2, [r3, #32]
}
 8011ae2:	f107 071c 	add.w	r7, r7, #28
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bc80      	pop	{r7}
 8011aea:	4770      	bx	lr

08011aec <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8011aec:	b480      	push	{r7}
 8011aee:	b087      	sub	sp, #28
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	60f8      	str	r0, [r7, #12]
 8011af4:	8179      	strh	r1, [r7, #10]
 8011af6:	813a      	strh	r2, [r7, #8]
 8011af8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8011afa:	f04f 0300 	mov.w	r3, #0
 8011afe:	82fb      	strh	r3, [r7, #22]
 8011b00:	f04f 0300 	mov.w	r3, #0
 8011b04:	82bb      	strh	r3, [r7, #20]
 8011b06:	f04f 0300 	mov.w	r3, #0
 8011b0a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	8c1b      	ldrh	r3, [r3, #32]
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011b16:	b29a      	uxth	r2, r3
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	8b9b      	ldrh	r3, [r3, #28]
 8011b20:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	8c1b      	ldrh	r3, [r3, #32]
 8011b26:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8011b28:	897b      	ldrh	r3, [r7, #10]
 8011b2a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011b2e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8011b30:	8afb      	ldrh	r3, [r7, #22]
 8011b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011b36:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8011b3a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8011b3e:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8011b40:	893b      	ldrh	r3, [r7, #8]
 8011b42:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011b46:	b29a      	uxth	r2, r3
 8011b48:	8afb      	ldrh	r3, [r7, #22]
 8011b4a:	4313      	orrs	r3, r2
 8011b4c:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8011b4e:	88fb      	ldrh	r3, [r7, #6]
 8011b50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011b54:	b29a      	uxth	r2, r3
 8011b56:	8afb      	ldrh	r3, [r7, #22]
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8011b5c:	8abb      	ldrh	r3, [r7, #20]
 8011b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011b62:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8011b66:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8011b6a:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8011b6c:	8a7a      	ldrh	r2, [r7, #18]
 8011b6e:	8abb      	ldrh	r3, [r7, #20]
 8011b70:	4313      	orrs	r3, r2
 8011b72:	b29b      	uxth	r3, r3
 8011b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011b78:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	8afa      	ldrh	r2, [r7, #22]
 8011b7e:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	8aba      	ldrh	r2, [r7, #20]
 8011b84:	841a      	strh	r2, [r3, #32]
}
 8011b86:	f107 071c 	add.w	r7, r7, #28
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	bc80      	pop	{r7}
 8011b8e:	4770      	bx	lr

08011b90 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b082      	sub	sp, #8
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011ba2:	429a      	cmp	r2, r3
 8011ba4:	d10c      	bne.n	8011bc0 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 8011ba6:	f04f 0010 	mov.w	r0, #16
 8011baa:	f04f 0101 	mov.w	r1, #1
 8011bae:	f7fb f8e1 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 8011bb2:	f04f 0010 	mov.w	r0, #16
 8011bb6:	f04f 0100 	mov.w	r1, #0
 8011bba:	f7fb f8db 	bl	800cd74 <RCC_APB2PeriphResetCmd>
 8011bbe:	e062      	b.n	8011c86 <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8011bc6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	d10c      	bne.n	8011be8 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8011bce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011bd2:	f04f 0101 	mov.w	r1, #1
 8011bd6:	f7fb f8a3 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8011bda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011bde:	f04f 0100 	mov.w	r1, #0
 8011be2:	f7fb f89d 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 8011be6:	e04e      	b.n	8011c86 <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8011bee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d10c      	bne.n	8011c10 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 8011bf6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011bfa:	f04f 0101 	mov.w	r1, #1
 8011bfe:	f7fb f88f 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 8011c02:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011c06:	f04f 0100 	mov.w	r1, #0
 8011c0a:	f7fb f889 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 8011c0e:	e03a      	b.n	8011c86 <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 8011c16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d10c      	bne.n	8011c38 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8011c1e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011c22:	f04f 0101 	mov.w	r1, #1
 8011c26:	f7fb f87b 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8011c2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011c2e:	f04f 0100 	mov.w	r1, #0
 8011c32:	f7fb f875 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 8011c36:	e026      	b.n	8011c86 <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 8011c38:	687a      	ldr	r2, [r7, #4]
 8011c3a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8011c3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d10c      	bne.n	8011c60 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 8011c46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011c4a:	f04f 0101 	mov.w	r1, #1
 8011c4e:	f7fb f867 	bl	800cd20 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 8011c52:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011c56:	f04f 0100 	mov.w	r1, #0
 8011c5a:	f7fb f861 	bl	800cd20 <RCC_APB1PeriphResetCmd>
 8011c5e:	e012      	b.n	8011c86 <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011c66:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011c6a:	429a      	cmp	r2, r3
 8011c6c:	d10b      	bne.n	8011c86 <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 8011c6e:	f04f 0020 	mov.w	r0, #32
 8011c72:	f04f 0101 	mov.w	r1, #1
 8011c76:	f7fb f87d 	bl	800cd74 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 8011c7a:	f04f 0020 	mov.w	r0, #32
 8011c7e:	f04f 0100 	mov.w	r1, #0
 8011c82:	f7fb f877 	bl	800cd74 <RCC_APB2PeriphResetCmd>
    }
  }
}
 8011c86:	f107 0708 	add.w	r7, r7, #8
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd80      	pop	{r7, pc}
 8011c8e:	bf00      	nop

08011c90 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b08a      	sub	sp, #40	; 0x28
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8011c9a:	f04f 0300 	mov.w	r3, #0
 8011c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8011ca0:	f04f 0300 	mov.w	r3, #0
 8011ca4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8011ca6:	f04f 0300 	mov.w	r3, #0
 8011caa:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8011cac:	f04f 0300 	mov.w	r3, #0
 8011cb0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	8a1b      	ldrh	r3, [r3, #16]
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011cc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	88db      	ldrh	r3, [r3, #6]
 8011cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8011ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cce:	b29a      	uxth	r2, r3
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	899b      	ldrh	r3, [r3, #12]
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8011cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8011ce2:	f023 030c 	bic.w	r3, r3, #12
 8011ce6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	889a      	ldrh	r2, [r3, #4]
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	891b      	ldrh	r3, [r3, #8]
 8011cf0:	4313      	orrs	r3, r2
 8011cf2:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8011cf8:	4313      	orrs	r3, r2
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8011d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d04:	b29a      	uxth	r2, r3
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8a9b      	ldrh	r3, [r3, #20]
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8011d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011d18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	899b      	ldrh	r3, [r3, #12]
 8011d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d20:	4313      	orrs	r3, r2
 8011d22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	b29a      	uxth	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8011d2c:	f107 0308 	add.w	r3, r7, #8
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fa fd55 	bl	800c7e0 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8011d36:	687a      	ldr	r2, [r7, #4]
 8011d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d006      	beq.n	8011d52 <USART_Init+0xc2>
 8011d44:	687a      	ldr	r2, [r7, #4]
 8011d46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011d4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d102      	bne.n	8011d58 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8011d52:	697b      	ldr	r3, [r7, #20]
 8011d54:	623b      	str	r3, [r7, #32]
 8011d56:	e001      	b.n	8011d5c <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8011d58:	693b      	ldr	r3, [r7, #16]
 8011d5a:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	899b      	ldrh	r3, [r3, #12]
 8011d60:	b29b      	uxth	r3, r3
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	b21b      	sxth	r3, r3
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	da0f      	bge.n	8011d8a <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8011d6a:	6a3a      	ldr	r2, [r7, #32]
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011d72:	189b      	adds	r3, r3, r2
 8011d74:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011d78:	189a      	adds	r2, r3, r2
 8011d7a:	683b      	ldr	r3, [r7, #0]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8011d86:	61fb      	str	r3, [r7, #28]
 8011d88:	e00e      	b.n	8011da8 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8011d8a:	6a3a      	ldr	r2, [r7, #32]
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011d92:	189b      	adds	r3, r3, r2
 8011d94:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8011d98:	189a      	adds	r2, r3, r2
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8011da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8011da6:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8011da8:	69fa      	ldr	r2, [r7, #28]
 8011daa:	f248 531f 	movw	r3, #34079	; 0x851f
 8011dae:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011db2:	fba3 1302 	umull	r1, r3, r3, r2
 8011db6:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011dba:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011dbe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8011dc6:	f04f 0264 	mov.w	r2, #100	; 0x64
 8011dca:	fb02 f303 	mul.w	r3, r2, r3
 8011dce:	69fa      	ldr	r2, [r7, #28]
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	899b      	ldrh	r3, [r3, #12]
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	b21b      	sxth	r3, r3
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	da12      	bge.n	8011e08 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8011de2:	69bb      	ldr	r3, [r7, #24]
 8011de4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011de8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011dec:	f248 531f 	movw	r3, #34079	; 0x851f
 8011df0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011df4:	fba3 1302 	umull	r1, r3, r3, r2
 8011df8:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011dfc:	f003 0307 	and.w	r3, r3, #7
 8011e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e02:	4313      	orrs	r3, r2
 8011e04:	627b      	str	r3, [r7, #36]	; 0x24
 8011e06:	e011      	b.n	8011e2c <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8011e08:	69bb      	ldr	r3, [r7, #24]
 8011e0a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011e0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011e12:	f248 531f 	movw	r3, #34079	; 0x851f
 8011e16:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011e1a:	fba3 1302 	umull	r1, r3, r3, r2
 8011e1e:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011e22:	f003 030f 	and.w	r3, r3, #15
 8011e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e28:	4313      	orrs	r3, r2
 8011e2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8011e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	811a      	strh	r2, [r3, #8]
}
 8011e34:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}

08011e3c <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b083      	sub	sp, #12
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8011e4a:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f04f 0200 	mov.w	r2, #0
 8011e52:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f04f 0200 	mov.w	r2, #0
 8011e5a:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f04f 0200 	mov.w	r2, #0
 8011e62:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f04f 020c 	mov.w	r2, #12
 8011e6a:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	f04f 0200 	mov.w	r2, #0
 8011e72:	819a      	strh	r2, [r3, #12]
}
 8011e74:	f107 070c 	add.w	r7, r7, #12
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bc80      	pop	{r7}
 8011e7c:	4770      	bx	lr
 8011e7e:	bf00      	nop

08011e80 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8011e80:	b480      	push	{r7}
 8011e82:	b085      	sub	sp, #20
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 8011e8a:	f04f 0300 	mov.w	r3, #0
 8011e8e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	8a1b      	ldrh	r3, [r3, #16]
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8011e9e:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	881a      	ldrh	r2, [r3, #0]
 8011ea4:	683b      	ldr	r3, [r7, #0]
 8011ea6:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8011ea8:	4313      	orrs	r3, r2
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	889b      	ldrh	r3, [r3, #4]
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	88db      	ldrh	r3, [r3, #6]
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8011ebc:	68fa      	ldr	r2, [r7, #12]
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	821a      	strh	r2, [r3, #16]
}
 8011eca:	f107 0714 	add.w	r7, r7, #20
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bc80      	pop	{r7}
 8011ed2:	4770      	bx	lr

08011ed4 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8011ed4:	b480      	push	{r7}
 8011ed6:	b083      	sub	sp, #12
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f04f 0200 	mov.w	r2, #0
 8011ee2:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f04f 0200 	mov.w	r2, #0
 8011eea:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	f04f 0200 	mov.w	r2, #0
 8011ef2:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f04f 0200 	mov.w	r2, #0
 8011efa:	80da      	strh	r2, [r3, #6]
}
 8011efc:	f107 070c 	add.w	r7, r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bc80      	pop	{r7}
 8011f04:	4770      	bx	lr
 8011f06:	bf00      	nop

08011f08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011f08:	b480      	push	{r7}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	460b      	mov	r3, r1
 8011f12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011f14:	78fb      	ldrb	r3, [r7, #3]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d008      	beq.n	8011f2c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	899b      	ldrh	r3, [r3, #12]
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011f24:	b29a      	uxth	r2, r3
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	819a      	strh	r2, [r3, #12]
 8011f2a:	e007      	b.n	8011f3c <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	899b      	ldrh	r3, [r3, #12]
 8011f30:	b29b      	uxth	r3, r3
 8011f32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011f36:	b29a      	uxth	r2, r3
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	819a      	strh	r2, [r3, #12]
  }
}
 8011f3c:	f107 070c 	add.w	r7, r7, #12
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bc80      	pop	{r7}
 8011f44:	4770      	bx	lr
 8011f46:	bf00      	nop

08011f48 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8011f48:	b480      	push	{r7}
 8011f4a:	b083      	sub	sp, #12
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	460b      	mov	r3, r1
 8011f52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	8b1b      	ldrh	r3, [r3, #24]
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011f5e:	b29a      	uxth	r2, r3
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	8b1b      	ldrh	r3, [r3, #24]
 8011f68:	b29a      	uxth	r2, r3
 8011f6a:	78fb      	ldrb	r3, [r7, #3]
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	4313      	orrs	r3, r2
 8011f70:	b29a      	uxth	r2, r3
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	831a      	strh	r2, [r3, #24]
}
 8011f76:	f107 070c 	add.w	r7, r7, #12
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bc80      	pop	{r7}
 8011f7e:	4770      	bx	lr

08011f80 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	460b      	mov	r3, r1
 8011f8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011f8c:	78fb      	ldrb	r3, [r7, #3]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d00a      	beq.n	8011fa8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	899b      	ldrh	r3, [r3, #12]
 8011f96:	b29b      	uxth	r3, r3
 8011f98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011f9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011fa0:	b29a      	uxth	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	819a      	strh	r2, [r3, #12]
 8011fa6:	e009      	b.n	8011fbc <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	899b      	ldrh	r3, [r3, #12]
 8011fac:	b29b      	uxth	r3, r3
 8011fae:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8011fb2:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8011fb6:	b29a      	uxth	r2, r3
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	819a      	strh	r2, [r3, #12]
  }
}  
 8011fbc:	f107 070c 	add.w	r7, r7, #12
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bc80      	pop	{r7}
 8011fc4:	4770      	bx	lr
 8011fc6:	bf00      	nop

08011fc8 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
 8011fd0:	460b      	mov	r3, r1
 8011fd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011fd4:	78fb      	ldrb	r3, [r7, #3]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d008      	beq.n	8011fec <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	8a9b      	ldrh	r3, [r3, #20]
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011fe4:	b29a      	uxth	r2, r3
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	829a      	strh	r2, [r3, #20]
 8011fea:	e007      	b.n	8011ffc <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	8a9b      	ldrh	r3, [r3, #20]
 8011ff0:	b29b      	uxth	r3, r3
 8011ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	829a      	strh	r2, [r3, #20]
  }
}
 8011ffc:	f107 070c 	add.w	r7, r7, #12
 8012000:	46bd      	mov	sp, r7
 8012002:	bc80      	pop	{r7}
 8012004:	4770      	bx	lr
 8012006:	bf00      	nop

08012008 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8012008:	b480      	push	{r7}
 801200a:	b083      	sub	sp, #12
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	460b      	mov	r3, r1
 8012012:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8012014:	887b      	ldrh	r3, [r7, #2]
 8012016:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801201a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801201e:	b29a      	uxth	r2, r3
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	809a      	strh	r2, [r3, #4]
}
 8012024:	f107 070c 	add.w	r7, r7, #12
 8012028:	46bd      	mov	sp, r7
 801202a:	bc80      	pop	{r7}
 801202c:	4770      	bx	lr
 801202e:	bf00      	nop

08012030 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8012030:	b480      	push	{r7}
 8012032:	b083      	sub	sp, #12
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	889b      	ldrh	r3, [r3, #4]
 801203c:	b29b      	uxth	r3, r3
 801203e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8012042:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8012046:	b29b      	uxth	r3, r3
}
 8012048:	4618      	mov	r0, r3
 801204a:	f107 070c 	add.w	r7, r7, #12
 801204e:	46bd      	mov	sp, r7
 8012050:	bc80      	pop	{r7}
 8012052:	4770      	bx	lr

08012054 <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 8012054:	b480      	push	{r7}
 8012056:	b083      	sub	sp, #12
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	460b      	mov	r3, r1
 801205e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	8a1b      	ldrh	r3, [r3, #16]
 8012064:	b29b      	uxth	r3, r3
 8012066:	f023 030f 	bic.w	r3, r3, #15
 801206a:	b29a      	uxth	r2, r3
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	8a1b      	ldrh	r3, [r3, #16]
 8012074:	b29a      	uxth	r2, r3
 8012076:	78fb      	ldrb	r3, [r7, #3]
 8012078:	b29b      	uxth	r3, r3
 801207a:	4313      	orrs	r3, r2
 801207c:	b29a      	uxth	r2, r3
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	821a      	strh	r2, [r3, #16]
}
 8012082:	f107 070c 	add.w	r7, r7, #12
 8012086:	46bd      	mov	sp, r7
 8012088:	bc80      	pop	{r7}
 801208a:	4770      	bx	lr

0801208c <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801208c:	b480      	push	{r7}
 801208e:	b083      	sub	sp, #12
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
 8012094:	460b      	mov	r3, r1
 8012096:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8012098:	78fb      	ldrb	r3, [r7, #3]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d008      	beq.n	80120b0 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	899b      	ldrh	r3, [r3, #12]
 80120a2:	b29b      	uxth	r3, r3
 80120a4:	f043 0302 	orr.w	r3, r3, #2
 80120a8:	b29a      	uxth	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	819a      	strh	r2, [r3, #12]
 80120ae:	e007      	b.n	80120c0 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	899b      	ldrh	r3, [r3, #12]
 80120b4:	b29b      	uxth	r3, r3
 80120b6:	f023 0302 	bic.w	r3, r3, #2
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	819a      	strh	r2, [r3, #12]
  }
}
 80120c0:	f107 070c 	add.w	r7, r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bc80      	pop	{r7}
 80120c8:	4770      	bx	lr
 80120ca:	bf00      	nop

080120cc <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 80120cc:	b480      	push	{r7}
 80120ce:	b083      	sub	sp, #12
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	460b      	mov	r3, r1
 80120d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	899b      	ldrh	r3, [r3, #12]
 80120dc:	b29b      	uxth	r3, r3
 80120de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	899b      	ldrh	r3, [r3, #12]
 80120ec:	b29a      	uxth	r2, r3
 80120ee:	887b      	ldrh	r3, [r7, #2]
 80120f0:	4313      	orrs	r3, r2
 80120f2:	b29a      	uxth	r2, r3
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	819a      	strh	r2, [r3, #12]
}
 80120f8:	f107 070c 	add.w	r7, r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bc80      	pop	{r7}
 8012100:	4770      	bx	lr
 8012102:	bf00      	nop

08012104 <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
 801210c:	460b      	mov	r3, r1
 801210e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	8a1b      	ldrh	r3, [r3, #16]
 8012114:	b29b      	uxth	r3, r3
 8012116:	f023 0320 	bic.w	r3, r3, #32
 801211a:	b29a      	uxth	r2, r3
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	8a1b      	ldrh	r3, [r3, #16]
 8012124:	b29a      	uxth	r2, r3
 8012126:	887b      	ldrh	r3, [r7, #2]
 8012128:	4313      	orrs	r3, r2
 801212a:	b29a      	uxth	r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	821a      	strh	r2, [r3, #16]
}
 8012130:	f107 070c 	add.w	r7, r7, #12
 8012134:	46bd      	mov	sp, r7
 8012136:	bc80      	pop	{r7}
 8012138:	4770      	bx	lr
 801213a:	bf00      	nop

0801213c <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801213c:	b480      	push	{r7}
 801213e:	b083      	sub	sp, #12
 8012140:	af00      	add	r7, sp, #0
 8012142:	6078      	str	r0, [r7, #4]
 8012144:	460b      	mov	r3, r1
 8012146:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8012148:	78fb      	ldrb	r3, [r7, #3]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d008      	beq.n	8012160 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	8a1b      	ldrh	r3, [r3, #16]
 8012152:	b29b      	uxth	r3, r3
 8012154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012158:	b29a      	uxth	r2, r3
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	821a      	strh	r2, [r3, #16]
 801215e:	e007      	b.n	8012170 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	8a1b      	ldrh	r3, [r3, #16]
 8012164:	b29b      	uxth	r3, r3
 8012166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801216a:	b29a      	uxth	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	821a      	strh	r2, [r3, #16]
  }
}
 8012170:	f107 070c 	add.w	r7, r7, #12
 8012174:	46bd      	mov	sp, r7
 8012176:	bc80      	pop	{r7}
 8012178:	4770      	bx	lr
 801217a:	bf00      	nop

0801217c <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 801217c:	b480      	push	{r7}
 801217e:	b083      	sub	sp, #12
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	899b      	ldrh	r3, [r3, #12]
 8012188:	b29b      	uxth	r3, r3
 801218a:	f043 0301 	orr.w	r3, r3, #1
 801218e:	b29a      	uxth	r2, r3
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	819a      	strh	r2, [r3, #12]
}
 8012194:	f107 070c 	add.w	r7, r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	bc80      	pop	{r7}
 801219c:	4770      	bx	lr
 801219e:	bf00      	nop

080121a0 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80121a0:	b480      	push	{r7}
 80121a2:	b083      	sub	sp, #12
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	460b      	mov	r3, r1
 80121aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d008      	beq.n	80121c4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	8a9b      	ldrh	r3, [r3, #20]
 80121b6:	b29b      	uxth	r3, r3
 80121b8:	f043 0308 	orr.w	r3, r3, #8
 80121bc:	b29a      	uxth	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	829a      	strh	r2, [r3, #20]
 80121c2:	e007      	b.n	80121d4 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	8a9b      	ldrh	r3, [r3, #20]
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	f023 0308 	bic.w	r3, r3, #8
 80121ce:	b29a      	uxth	r2, r3
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	829a      	strh	r2, [r3, #20]
  }
}
 80121d4:	f107 070c 	add.w	r7, r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	bc80      	pop	{r7}
 80121dc:	4770      	bx	lr
 80121de:	bf00      	nop

080121e0 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 80121e0:	b480      	push	{r7}
 80121e2:	b083      	sub	sp, #12
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	6078      	str	r0, [r7, #4]
 80121e8:	460b      	mov	r3, r1
 80121ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	8b1b      	ldrh	r3, [r3, #24]
 80121f0:	b29b      	uxth	r3, r3
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	b29a      	uxth	r2, r3
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8b1b      	ldrh	r3, [r3, #24]
 80121fe:	b29a      	uxth	r2, r3
 8012200:	78fb      	ldrb	r3, [r7, #3]
 8012202:	b29b      	uxth	r3, r3
 8012204:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8012208:	b29b      	uxth	r3, r3
 801220a:	4313      	orrs	r3, r2
 801220c:	b29a      	uxth	r2, r3
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	831a      	strh	r2, [r3, #24]
}
 8012212:	f107 070c 	add.w	r7, r7, #12
 8012216:	46bd      	mov	sp, r7
 8012218:	bc80      	pop	{r7}
 801221a:	4770      	bx	lr

0801221c <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801221c:	b480      	push	{r7}
 801221e:	b083      	sub	sp, #12
 8012220:	af00      	add	r7, sp, #0
 8012222:	6078      	str	r0, [r7, #4]
 8012224:	460b      	mov	r3, r1
 8012226:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012228:	78fb      	ldrb	r3, [r7, #3]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d008      	beq.n	8012240 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	8a9b      	ldrh	r3, [r3, #20]
 8012232:	b29b      	uxth	r3, r3
 8012234:	f043 0320 	orr.w	r3, r3, #32
 8012238:	b29a      	uxth	r2, r3
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	829a      	strh	r2, [r3, #20]
 801223e:	e007      	b.n	8012250 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	8a9b      	ldrh	r3, [r3, #20]
 8012244:	b29b      	uxth	r3, r3
 8012246:	f023 0320 	bic.w	r3, r3, #32
 801224a:	b29a      	uxth	r2, r3
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	829a      	strh	r2, [r3, #20]
  }
}
 8012250:	f107 070c 	add.w	r7, r7, #12
 8012254:	46bd      	mov	sp, r7
 8012256:	bc80      	pop	{r7}
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop

0801225c <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 801225c:	b480      	push	{r7}
 801225e:	b083      	sub	sp, #12
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	460b      	mov	r3, r1
 8012266:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8012268:	78fb      	ldrb	r3, [r7, #3]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d008      	beq.n	8012280 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	8a9b      	ldrh	r3, [r3, #20]
 8012272:	b29b      	uxth	r3, r3
 8012274:	f043 0310 	orr.w	r3, r3, #16
 8012278:	b29a      	uxth	r2, r3
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	829a      	strh	r2, [r3, #20]
 801227e:	e007      	b.n	8012290 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	8a9b      	ldrh	r3, [r3, #20]
 8012284:	b29b      	uxth	r3, r3
 8012286:	f023 0310 	bic.w	r3, r3, #16
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	829a      	strh	r2, [r3, #20]
  }
}
 8012290:	f107 070c 	add.w	r7, r7, #12
 8012294:	46bd      	mov	sp, r7
 8012296:	bc80      	pop	{r7}
 8012298:	4770      	bx	lr
 801229a:	bf00      	nop

0801229c <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 801229c:	b480      	push	{r7}
 801229e:	b083      	sub	sp, #12
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
 80122a4:	460b      	mov	r3, r1
 80122a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	8a9b      	ldrh	r3, [r3, #20]
 80122ac:	b29b      	uxth	r3, r3
 80122ae:	f023 0304 	bic.w	r3, r3, #4
 80122b2:	b29a      	uxth	r2, r3
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	8a9b      	ldrh	r3, [r3, #20]
 80122bc:	b29a      	uxth	r2, r3
 80122be:	887b      	ldrh	r3, [r7, #2]
 80122c0:	4313      	orrs	r3, r2
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	829a      	strh	r2, [r3, #20]
}
 80122c8:	f107 070c 	add.w	r7, r7, #12
 80122cc:	46bd      	mov	sp, r7
 80122ce:	bc80      	pop	{r7}
 80122d0:	4770      	bx	lr
 80122d2:	bf00      	nop

080122d4 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80122d4:	b480      	push	{r7}
 80122d6:	b083      	sub	sp, #12
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	460b      	mov	r3, r1
 80122de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 80122e0:	78fb      	ldrb	r3, [r7, #3]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d008      	beq.n	80122f8 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	8a9b      	ldrh	r3, [r3, #20]
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	f043 0302 	orr.w	r3, r3, #2
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	829a      	strh	r2, [r3, #20]
 80122f6:	e007      	b.n	8012308 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	8a9b      	ldrh	r3, [r3, #20]
 80122fc:	b29b      	uxth	r3, r3
 80122fe:	f023 0302 	bic.w	r3, r3, #2
 8012302:	b29a      	uxth	r2, r3
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	829a      	strh	r2, [r3, #20]
  }
}
 8012308:	f107 070c 	add.w	r7, r7, #12
 801230c:	46bd      	mov	sp, r7
 801230e:	bc80      	pop	{r7}
 8012310:	4770      	bx	lr
 8012312:	bf00      	nop

08012314 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	4613      	mov	r3, r2
 801231e:	460a      	mov	r2, r1
 8012320:	807a      	strh	r2, [r7, #2]
 8012322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8012324:	787b      	ldrb	r3, [r7, #1]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d008      	beq.n	801233c <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	8a9b      	ldrh	r3, [r3, #20]
 801232e:	b29a      	uxth	r2, r3
 8012330:	887b      	ldrh	r3, [r7, #2]
 8012332:	4313      	orrs	r3, r2
 8012334:	b29a      	uxth	r2, r3
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	829a      	strh	r2, [r3, #20]
 801233a:	e00a      	b.n	8012352 <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	8a9b      	ldrh	r3, [r3, #20]
 8012340:	b29a      	uxth	r2, r3
 8012342:	887b      	ldrh	r3, [r7, #2]
 8012344:	ea6f 0303 	mvn.w	r3, r3
 8012348:	b29b      	uxth	r3, r3
 801234a:	4013      	ands	r3, r2
 801234c:	b29a      	uxth	r2, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	829a      	strh	r2, [r3, #20]
  }
}
 8012352:	f107 070c 	add.w	r7, r7, #12
 8012356:	46bd      	mov	sp, r7
 8012358:	bc80      	pop	{r7}
 801235a:	4770      	bx	lr

0801235c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 801235c:	b480      	push	{r7}
 801235e:	b087      	sub	sp, #28
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	4613      	mov	r3, r2
 8012366:	460a      	mov	r2, r1
 8012368:	807a      	strh	r2, [r7, #2]
 801236a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 801236c:	f04f 0300 	mov.w	r3, #0
 8012370:	613b      	str	r3, [r7, #16]
 8012372:	f04f 0300 	mov.w	r3, #0
 8012376:	60fb      	str	r3, [r7, #12]
 8012378:	f04f 0300 	mov.w	r3, #0
 801237c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 801237e:	f04f 0300 	mov.w	r3, #0
 8012382:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8012388:	887b      	ldrh	r3, [r7, #2]
 801238a:	b2db      	uxtb	r3, r3
 801238c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8012390:	b2db      	uxtb	r3, r3
 8012392:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8012394:	887b      	ldrh	r3, [r7, #2]
 8012396:	f003 031f 	and.w	r3, r3, #31
 801239a:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	f04f 0201 	mov.w	r2, #1
 80123a2:	fa02 f303 	lsl.w	r3, r2, r3
 80123a6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	2b01      	cmp	r3, #1
 80123ac:	d104      	bne.n	80123b8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	f103 030c 	add.w	r3, r3, #12
 80123b4:	617b      	str	r3, [r7, #20]
 80123b6:	e00b      	b.n	80123d0 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80123b8:	693b      	ldr	r3, [r7, #16]
 80123ba:	2b02      	cmp	r3, #2
 80123bc:	d104      	bne.n	80123c8 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 80123be:	697b      	ldr	r3, [r7, #20]
 80123c0:	f103 0310 	add.w	r3, r3, #16
 80123c4:	617b      	str	r3, [r7, #20]
 80123c6:	e003      	b.n	80123d0 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80123c8:	697b      	ldr	r3, [r7, #20]
 80123ca:	f103 0314 	add.w	r3, r3, #20
 80123ce:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80123d0:	787b      	ldrb	r3, [r7, #1]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d006      	beq.n	80123e4 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	697a      	ldr	r2, [r7, #20]
 80123da:	6811      	ldr	r1, [r2, #0]
 80123dc:	68ba      	ldr	r2, [r7, #8]
 80123de:	430a      	orrs	r2, r1
 80123e0:	601a      	str	r2, [r3, #0]
 80123e2:	e007      	b.n	80123f4 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	697a      	ldr	r2, [r7, #20]
 80123e8:	6811      	ldr	r1, [r2, #0]
 80123ea:	68ba      	ldr	r2, [r7, #8]
 80123ec:	ea6f 0202 	mvn.w	r2, r2
 80123f0:	400a      	ands	r2, r1
 80123f2:	601a      	str	r2, [r3, #0]
  }
}
 80123f4:	f107 071c 	add.w	r7, r7, #28
 80123f8:	46bd      	mov	sp, r7
 80123fa:	bc80      	pop	{r7}
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop

08012400 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8012400:	b480      	push	{r7}
 8012402:	b085      	sub	sp, #20
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	460b      	mov	r3, r1
 801240a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 801240c:	f04f 0300 	mov.w	r3, #0
 8012410:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	881b      	ldrh	r3, [r3, #0]
 8012416:	b29a      	uxth	r2, r3
 8012418:	887b      	ldrh	r3, [r7, #2]
 801241a:	4013      	ands	r3, r2
 801241c:	b29b      	uxth	r3, r3
 801241e:	2b00      	cmp	r3, #0
 8012420:	d003      	beq.n	801242a <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8012422:	f04f 0301 	mov.w	r3, #1
 8012426:	73fb      	strb	r3, [r7, #15]
 8012428:	e002      	b.n	8012430 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 801242a:	f04f 0300 	mov.w	r3, #0
 801242e:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012430:	7bfb      	ldrb	r3, [r7, #15]
}
 8012432:	4618      	mov	r0, r3
 8012434:	f107 0714 	add.w	r7, r7, #20
 8012438:	46bd      	mov	sp, r7
 801243a:	bc80      	pop	{r7}
 801243c:	4770      	bx	lr
 801243e:	bf00      	nop

08012440 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8012440:	b480      	push	{r7}
 8012442:	b083      	sub	sp, #12
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	460b      	mov	r3, r1
 801244a:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 801244c:	887b      	ldrh	r3, [r7, #2]
 801244e:	ea6f 0303 	mvn.w	r3, r3
 8012452:	b29a      	uxth	r2, r3
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	801a      	strh	r2, [r3, #0]
}
 8012458:	f107 070c 	add.w	r7, r7, #12
 801245c:	46bd      	mov	sp, r7
 801245e:	bc80      	pop	{r7}
 8012460:	4770      	bx	lr
 8012462:	bf00      	nop

08012464 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8012464:	b480      	push	{r7}
 8012466:	b087      	sub	sp, #28
 8012468:	af00      	add	r7, sp, #0
 801246a:	6078      	str	r0, [r7, #4]
 801246c:	460b      	mov	r3, r1
 801246e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8012470:	f04f 0300 	mov.w	r3, #0
 8012474:	60fb      	str	r3, [r7, #12]
 8012476:	f04f 0300 	mov.w	r3, #0
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	f04f 0300 	mov.w	r3, #0
 8012480:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8012482:	f04f 0300 	mov.w	r3, #0
 8012486:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8012488:	887b      	ldrh	r3, [r7, #2]
 801248a:	b2db      	uxtb	r3, r3
 801248c:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8012490:	b2db      	uxtb	r3, r3
 8012492:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8012494:	887b      	ldrh	r3, [r7, #2]
 8012496:	f003 031f 	and.w	r3, r3, #31
 801249a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 801249c:	697b      	ldr	r3, [r7, #20]
 801249e:	f04f 0201 	mov.w	r2, #1
 80124a2:	fa02 f303 	lsl.w	r3, r2, r3
 80124a6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d106      	bne.n	80124bc <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	899b      	ldrh	r3, [r3, #12]
 80124b2:	b29b      	uxth	r3, r3
 80124b4:	697a      	ldr	r2, [r7, #20]
 80124b6:	4013      	ands	r3, r2
 80124b8:	617b      	str	r3, [r7, #20]
 80124ba:	e00f      	b.n	80124dc <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	2b02      	cmp	r3, #2
 80124c0:	d106      	bne.n	80124d0 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	8a1b      	ldrh	r3, [r3, #16]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	4013      	ands	r3, r2
 80124cc:	617b      	str	r3, [r7, #20]
 80124ce:	e005      	b.n	80124dc <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	8a9b      	ldrh	r3, [r3, #20]
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	697a      	ldr	r2, [r7, #20]
 80124d8:	4013      	ands	r3, r2
 80124da:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80124dc:	887b      	ldrh	r3, [r7, #2]
 80124de:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80124e2:	b29b      	uxth	r3, r3
 80124e4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	f04f 0201 	mov.w	r2, #1
 80124ec:	fa02 f303 	lsl.w	r3, r2, r3
 80124f0:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	881b      	ldrh	r3, [r3, #0]
 80124f6:	b29b      	uxth	r3, r3
 80124f8:	68fa      	ldr	r2, [r7, #12]
 80124fa:	4013      	ands	r3, r2
 80124fc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d006      	beq.n	8012512 <USART_GetITStatus+0xae>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d003      	beq.n	8012512 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 801250a:	f04f 0301 	mov.w	r3, #1
 801250e:	74fb      	strb	r3, [r7, #19]
 8012510:	e002      	b.n	8012518 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8012512:	f04f 0300 	mov.w	r3, #0
 8012516:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8012518:	7cfb      	ldrb	r3, [r7, #19]
}
 801251a:	4618      	mov	r0, r3
 801251c:	f107 071c 	add.w	r7, r7, #28
 8012520:	46bd      	mov	sp, r7
 8012522:	bc80      	pop	{r7}
 8012524:	4770      	bx	lr
 8012526:	bf00      	nop

08012528 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8012528:	b480      	push	{r7}
 801252a:	b085      	sub	sp, #20
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
 8012530:	460b      	mov	r3, r1
 8012532:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8012534:	f04f 0300 	mov.w	r3, #0
 8012538:	81fb      	strh	r3, [r7, #14]
 801253a:	f04f 0300 	mov.w	r3, #0
 801253e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8012540:	887b      	ldrh	r3, [r7, #2]
 8012542:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8012546:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8012548:	89fb      	ldrh	r3, [r7, #14]
 801254a:	f04f 0201 	mov.w	r2, #1
 801254e:	fa02 f303 	lsl.w	r3, r2, r3
 8012552:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8012554:	89bb      	ldrh	r3, [r7, #12]
 8012556:	ea6f 0303 	mvn.w	r3, r3
 801255a:	b29a      	uxth	r2, r3
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	801a      	strh	r2, [r3, #0]
}
 8012560:	f107 0714 	add.w	r7, r7, #20
 8012564:	46bd      	mov	sp, r7
 8012566:	bc80      	pop	{r7}
 8012568:	4770      	bx	lr
 801256a:	bf00      	nop

0801256c <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8012570:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012574:	f04f 0101 	mov.w	r1, #1
 8012578:	f7fa fbd2 	bl	800cd20 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 801257c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8012580:	f04f 0100 	mov.w	r1, #0
 8012584:	f7fa fbcc 	bl	800cd20 <RCC_APB1PeriphResetCmd>
}
 8012588:	bd80      	pop	{r7, pc}
 801258a:	bf00      	nop

0801258c <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 801258c:	b480      	push	{r7}
 801258e:	b085      	sub	sp, #20
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8012594:	f04f 0300 	mov.w	r3, #0
 8012598:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 801259a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 801259e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80125a2:	685b      	ldr	r3, [r3, #4]
 80125a4:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 80125a8:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 80125aa:	68fa      	ldr	r2, [r7, #12]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	4313      	orrs	r3, r2
 80125b0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 80125b2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80125b6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80125ba:	68fa      	ldr	r2, [r7, #12]
 80125bc:	605a      	str	r2, [r3, #4]
}
 80125be:	f107 0714 	add.w	r7, r7, #20
 80125c2:	46bd      	mov	sp, r7
 80125c4:	bc80      	pop	{r7}
 80125c6:	4770      	bx	lr

080125c8 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b085      	sub	sp, #20
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	4603      	mov	r3, r0
 80125d0:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 80125d2:	f04f 0300 	mov.w	r3, #0
 80125d6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 80125d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80125dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80125e0:	685b      	ldr	r3, [r3, #4]
 80125e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80125e6:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 80125e8:	79fb      	ldrb	r3, [r7, #7]
 80125ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80125ee:	68fb      	ldr	r3, [r7, #12]
 80125f0:	4313      	orrs	r3, r2
 80125f2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 80125f4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80125f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80125fc:	68fa      	ldr	r2, [r7, #12]
 80125fe:	605a      	str	r2, [r3, #4]
}
 8012600:	f107 0714 	add.w	r7, r7, #20
 8012604:	46bd      	mov	sp, r7
 8012606:	bc80      	pop	{r7}
 8012608:	4770      	bx	lr
 801260a:	bf00      	nop

0801260c <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 801260c:	b480      	push	{r7}
 801260e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8012610:	f248 03a4 	movw	r3, #32932	; 0x80a4
 8012614:	f2c4 2305 	movt	r3, #16901	; 0x4205
 8012618:	f04f 0201 	mov.w	r2, #1
 801261c:	601a      	str	r2, [r3, #0]
}
 801261e:	46bd      	mov	sp, r7
 8012620:	bc80      	pop	{r7}
 8012622:	4770      	bx	lr

08012624 <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8012624:	b480      	push	{r7}
 8012626:	b083      	sub	sp, #12
 8012628:	af00      	add	r7, sp, #0
 801262a:	4603      	mov	r3, r0
 801262c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 801262e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8012632:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012636:	79fa      	ldrb	r2, [r7, #7]
 8012638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801263c:	601a      	str	r2, [r3, #0]
}
 801263e:	f107 070c 	add.w	r7, r7, #12
 8012642:	46bd      	mov	sp, r7
 8012644:	bc80      	pop	{r7}
 8012646:	4770      	bx	lr

08012648 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8012648:	b480      	push	{r7}
 801264a:	b083      	sub	sp, #12
 801264c:	af00      	add	r7, sp, #0
 801264e:	4603      	mov	r3, r0
 8012650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8012652:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8012656:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801265a:	79fa      	ldrb	r2, [r7, #7]
 801265c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8012660:	b2d2      	uxtb	r2, r2
 8012662:	601a      	str	r2, [r3, #0]
}
 8012664:	f107 070c 	add.w	r7, r7, #12
 8012668:	46bd      	mov	sp, r7
 801266a:	bc80      	pop	{r7}
 801266c:	4770      	bx	lr
 801266e:	bf00      	nop

08012670 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 8012670:	b480      	push	{r7}
 8012672:	b083      	sub	sp, #12
 8012674:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8012676:	f04f 0300 	mov.w	r3, #0
 801267a:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 801267c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8012680:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8012684:	689b      	ldr	r3, [r3, #8]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d003      	beq.n	8012692 <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 801268a:	f04f 0301 	mov.w	r3, #1
 801268e:	71fb      	strb	r3, [r7, #7]
 8012690:	e002      	b.n	8012698 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8012692:	f04f 0300 	mov.w	r3, #0
 8012696:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8012698:	79fb      	ldrb	r3, [r7, #7]
}
 801269a:	4618      	mov	r0, r3
 801269c:	f107 070c 	add.w	r7, r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bc80      	pop	{r7}
 80126a4:	4770      	bx	lr
 80126a6:	bf00      	nop

080126a8 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 80126a8:	b480      	push	{r7}
 80126aa:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 80126ac:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80126b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80126b4:	f04f 0200 	mov.w	r2, #0
 80126b8:	609a      	str	r2, [r3, #8]
}
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bc80      	pop	{r7}
 80126be:	4770      	bx	lr
 80126c0:	69647473 	.word	0x69647473
 80126c4:	3a632e6f 	.word	0x3a632e6f
 80126c8:	636e6920 	.word	0x636e6920
 80126cc:	73616572 	.word	0x73616572
 80126d0:	414d2065 	.word	0x414d2065
 80126d4:	54535f58 	.word	0x54535f58
 80126d8:	474e4952 	.word	0x474e4952
 80126dc:	5a49535f 	.word	0x5a49535f
 80126e0:	000d0a45 	.word	0x000d0a45
 80126e4:	53550d0a 	.word	0x53550d0a
 80126e8:	20545241 	.word	0x20545241
 80126ec:	6e697250 	.word	0x6e697250
 80126f0:	45206674 	.word	0x45206674
 80126f4:	706d6178 	.word	0x706d6178
 80126f8:	203a656c 	.word	0x203a656c
 80126fc:	61746572 	.word	0x61746572
 8012700:	74656772 	.word	0x74656772
 8012704:	65687420 	.word	0x65687420
 8012708:	6c204320 	.word	0x6c204320
 801270c:	61726269 	.word	0x61726269
 8012710:	70207972 	.word	0x70207972
 8012714:	746e6972 	.word	0x746e6972
 8012718:	75662066 	.word	0x75662066
 801271c:	6974636e 	.word	0x6974636e
 8012720:	74206e6f 	.word	0x74206e6f
 8012724:	6874206f 	.word	0x6874206f
 8012728:	53552065 	.word	0x53552065
 801272c:	0a545241 	.word	0x0a545241
 8012730:	0000000d 	.word	0x0000000d
 8012734:	6e697270 	.word	0x6e697270
 8012738:	00006674 	.word	0x00006674
 801273c:	44200d0a 	.word	0x44200d0a
 8012740:	67756265 	.word	0x67756265
 8012744:	646f4d20 	.word	0x646f4d20
 8012748:	20656c75 	.word	0x20656c75
 801274c:	74696e49 	.word	0x74696e49
 8012750:	000d0a20 	.word	0x000d0a20

08012754 <_global_impure_ptr>:
 8012754:	20000008                                ... 

08012758 <ASCII16x24_Table>:
	...
 8012788:	01800000 01800180 01800180 01800180     ................
 8012798:	01800180 01800180 01800180 00000000     ................
 80127a8:	01800180 00000000 00000000 00000000     ................
 80127b8:	00000000 00cc00cc 00cc00cc 00cc00cc     ................
	...
 80127f4:	0c600c60 06300c60 1ffe0630 06301ffe     `.`.`.0.0.....0.
 8012804:	03180738 1ffe1ffe 03180318 018c018c     8...............
 8012814:	0000018c 00800000 0ff803e0 1c8c0e9c     ................
 8012824:	008c188c 01f80098 0e8007e0 188c1c80     ................
 8012834:	189c188c 0ff00cb8 008003e0 00000080     ................
	...
 801284c:	180e0000 0c110c1b 06110611 03110311     ................
 801285c:	018e019b 6cc038c0 44604460 44304430     .....8.l`D`D0D0D
 801286c:	6c184418 0000380c 00000000 01e00000     .D.l.8..........
 801287c:	073803f0 06180618 01f00330 00f800f0     ..8.....0.......
 801288c:	330e319c 1c061e06 3f061c06 21f073fc     .1.3.......?.s.!
	...
 80128ac:	000c000c 000c000c 000c000c 00000000     ................
	...
 80128d8:	02000000 01800300 00c000c0 00600060     ............`.`.
 80128e8:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80128f8:	00600060 00c000c0 03000180 00000200     `.`.............
 8012908:	00200000 00c00060 01800180 03000300     .. .`...........
 8012918:	06000600 06000600 06000600 06000600     ................
 8012928:	03000300 01800180 006000c0 00000020     ..........`. ...
	...
 8012944:	00c000c0 07f806d8 033001e0 00000738     ..........0.8...
	...
 8012974:	01800180 01800180 3ffc0180 01803ffc     ...........?.?..
 8012984:	01800180 01800180 00000000 00000000     ................
	...
 80129b8:	01800000 01000180 00800100 00000000     ................
	...
 80129e0:	07e007e0 00000000 00000000 00000000     ................
	...
 8012a18:	00c00000 000000c0 00000000 00000000     ................
 8012a28:	0c000000 06000c00 06000600 03000300     ................
 8012a38:	03800300 01800180 00c00180 00c000c0     ................
 8012a48:	00600060 00000000 00000000 00000000     `.`.............
 8012a58:	03e00000 0e3807f0 180c0c18 180c180c     ......8.........
 8012a68:	180c180c 180c180c 180c180c 0e380c18     ..............8.
 8012a78:	03e007f0 00000000 00000000 00000000     ................
 8012a88:	01000000 01c00180 019801f0 01800188     ................
 8012a98:	01800180 01800180 01800180 01800180     ................
 8012aa8:	01800180 00000000 00000000 00000000     ................
 8012ab8:	03e00000 0c180ff8 180c180c 18001800     ................
 8012ac8:	06000c00 01800300 006000c0 00180030     ..........`.0...
 8012ad8:	1ffc1ffc 00000000 00000000 00000000     ................
 8012ae8:	01e00000 0e1807f8 0c0c0c0c 06000c00     ................
 8012af8:	07c003c0 18000c00 180c1800 0c18180c     ................
 8012b08:	03e007f8 00000000 00000000 00000000     ................
 8012b18:	0c000000 0f000e00 0d800f00 0c600cc0     ..............`.
 8012b28:	0c300c60 0c0c0c18 3ffc3ffc 0c000c00     `.0......?.?....
 8012b38:	0c000c00 00000000 00000000 00000000     ................
 8012b48:	0ff80000 00180ff8 000c0018 07fc03ec     ................
 8012b58:	1c000e1c 18001800 180c1800 0e180c1c     ................
 8012b68:	03e007f8 00000000 00000000 00000000     ................
 8012b78:	07c00000 1c380ff0 00181818 03cc000c     ......8.........
 8012b88:	0e3c0fec 180c1c1c 180c180c 0e381c18     ..<...........8.
 8012b98:	03e007f0 00000000 00000000 00000000     ................
 8012ba8:	1ffc0000 0c001ffc 06000600 03800300     ................
 8012bb8:	01c00180 00e000c0 00600060 00300070     ........`.`.p.0.
 8012bc8:	00300030 00000000 00000000 00000000     0.0.............
 8012bd8:	03e00000 0e3807f0 0c180c18 06380c18     ......8.......8.
 8012be8:	07f007f0 180c0c18 180c180c 0c38180c     ..............8.
 8012bf8:	03e00ff8 00000000 00000000 00000000     ................
 8012c08:	03e00000 0e3807f0 180c0c1c 180c180c     ......8.........
 8012c18:	1e381c1c 19e01bf8 0c001800 0e1c0c00     ..8.............
 8012c28:	01f007f8 00000000 00000000 00000000     ................
	...
 8012c44:	01800180 00000000 00000000 00000000     ................
 8012c54:	00000000 01800180 00000000 00000000     ................
	...
 8012c74:	01800180 00000000 00000000 00000000     ................
 8012c84:	00000000 01800180 01000100 00000080     ................
	...
 8012ca8:	1c001000 03e00f80 001800f8 03e000f8     ................
 8012cb8:	1c000f80 00001000 00000000 00000000     ................
	...
 8012cd8:	00001ff8 00000000 00001ff8 00000000     ................
	...
 8012d08:	00380008 07c001f0 18001f00 07c01f00     ..8.............
 8012d18:	003801f0 00000008 00000000 00000000     ..8.............
 8012d28:	03e00000 0c180ff8 180c180c 0c001800     ................
 8012d38:	03000600 00c00180 00c000c0 00000000     ................
 8012d48:	00c000c0 00000000 00000000 00000000     ................
 8012d58:	00000000 181807e0 29c22004 44114a22     ......... .)"J.D
 8012d68:	44094409 22094409 0ce21311 20044002     .D.D.D.".....@. 
 8012d78:	07e01818 00000000 00000000 00000000     ................
 8012d88:	03800000 06c00380 06c006c0 0c600c60     ............`.`.
 8012d98:	18301830 3ff81830 701c3ff8 600c600c     0.0.0..?.?.p.`.`
 8012da8:	c006c006 00000000 00000000 00000000     ................
 8012db8:	03fc0000 0c0c0ffc 180c180c 0c0c180c     ................
 8012dc8:	0ffc07fc 300c180c 300c300c 180c300c     .......0.0.0.0..
 8012dd8:	07fc1ffc 00000000 00000000 00000000     ................
 8012de8:	07c00000 38381ff0 700c301c 00066006     ......88.0.p.`..
 8012df8:	00060006 00060006 60060006 301c700c     ...........`.p.0
 8012e08:	07e01ff0 00000000 00000000 00000000     ................
 8012e18:	03fe0000 0e060ffe 18061806 30063006     .............0.0
 8012e28:	30063006 30063006 18063006 0e061806     .0.0.0.0.0......
 8012e38:	03fe0ffe 00000000 00000000 00000000     ................
 8012e48:	3ffc0000 000c3ffc 000c000c 000c000c     ...?.?..........
 8012e58:	1ffc1ffc 000c000c 000c000c 000c000c     ................
 8012e68:	3ffc3ffc 00000000 00000000 00000000     .?.?............
 8012e78:	3ff80000 00183ff8 00180018 00180018     ...?.?..........
 8012e88:	1ff81ff8 00180018 00180018 00180018     ................
 8012e98:	00180018 00000000 00000000 00000000     ................
 8012ea8:	0fe00000 783c3ff8 e006600e 0003c007     .....?<x.`......
 8012eb8:	fe030003 c003fe03 c006c007 f03cc00e     ..............<.
 8012ec8:	0fe03ff8 00000000 00000000 00000000     .?..............
 8012ed8:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 8012ee8:	3ffc3ffc 300c300c 300c300c 300c300c     .?.?.0.0.0.0.0.0
 8012ef8:	300c300c 00000000 00000000 00000000     .0.0............
 8012f08:	01800000 01800180 01800180 01800180     ................
 8012f18:	01800180 01800180 01800180 01800180     ................
 8012f28:	01800180 00000000 00000000 00000000     ................
 8012f38:	06000000 06000600 06000600 06000600     ................
 8012f48:	06000600 06000600 06180600 07380618     ..............8.
 8012f58:	01e003f0 00000000 00000000 00000000     ................
 8012f68:	30060000 0c061806 03060606 00c60186     ...0............
 8012f78:	00760066 018e00de 06060306 18060c06     f.v.............
 8012f88:	60063006 00000000 00000000 00000000     .0.`............
 8012f98:	00180000 00180018 00180018 00180018     ................
 8012fa8:	00180018 00180018 00180018 00180018     ................
 8012fb8:	1ff81ff8 00000000 00000000 00000000     ................
 8012fc8:	e00e0000 f01ef01e d836f01e d836d836     ..........6.6.6.
 8012fd8:	cc66d836 cc66cc66 c6c6c6c6 c6c6c6c6     6.f.f.f.........
 8012fe8:	c386c386 00000000 00000000 00000000     ................
 8012ff8:	300c0000 303c301c 306c303c 30cc306c     ...0.0<0<0l0l0.0
 8013008:	318c30cc 330c330c 360c360c 3c0c3c0c     .0.1.3.3.6.6.<.<
 8013018:	300c380c 00000000 00000000 00000000     .8.0............
 8013028:	07e00000 381c1ff8 6006700e c003c003     .......8.p.`....
 8013038:	c003c003 c003c003 6006c003 381c700e     ...........`.p.8
 8013048:	07e01ff8 00000000 00000000 00000000     ................
 8013058:	0ffc0000 380c1ffc 300c300c 300c300c     .......8.0.0.0.0
 8013068:	1ffc180c 000c07fc 000c000c 000c000c     ................
 8013078:	000c000c 00000000 00000000 00000000     ................
 8013088:	07e00000 381c1ff8 6006700e c003e003     .......8.p.`....
 8013098:	c003c003 c003c003 6306e007 3c1c3f0e     ...........c.?.<
 80130a8:	f7e03ff8 0000c000 00000000 00000000     .?..............
 80130b8:	0ffe0000 38061ffe 30063006 38063006     .......8.0.0.0.8
 80130c8:	07fe1ffe 06060306 18060c06 30061806     ...............0
 80130d8:	60063006 00000000 00000000 00000000     .0.`............
 80130e8:	03e00000 0c1c0ff8 180c180c 001c000c     ................
 80130f8:	0fe003f8 38001e00 30063006 1c1c300e     .......8.0.0.0..
 8013108:	07e00ff8 00000000 00000000 00000000     ................
 8013118:	7ffe0000 01807ffe 01800180 01800180     ................
 8013128:	01800180 01800180 01800180 01800180     ................
 8013138:	01800180 00000000 00000000 00000000     ................
 8013148:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 8013158:	300c300c 300c300c 300c300c 1818300c     .0.0.0.0.0.0.0..
 8013168:	07e01ff8 00000000 00000000 00000000     ................
 8013178:	60030000 30063006 180c3006 180c180c     ...`.0.0.0......
 8013188:	0c180c18 06300e38 07700630 03600360     ....8.0.0.p.`.`.
 8013198:	01c001c0 00000000 00000000 00000000     ................
 80131a8:	60030000 61c361c3 336661c3 33663366     ...`.a.a.af3f3f3
 80131b8:	33663366 1b6c3366 1b6c1b6c 1e3c1a2c     f3f3f3l.l.l.,.<.
 80131c8:	0e380e38 00000000 00000000 00000000     8.8.............
 80131d8:	e00f0000 3018700c 0c701830 07c00e60     .....p.00.p.`...
 80131e8:	03800380 06e003c0 1c300c70 300c1818     ........p.0....0
 80131f8:	e007600e 00000000 00000000 00000000     .`..............
 8013208:	c0030000 300c6006 1838381c 06600c30     .....`.0.88.0.`.
 8013218:	03c007e0 01800180 01800180 01800180     ................
 8013228:	01800180 00000000 00000000 00000000     ................
 8013238:	7ffc0000 60007ffc 18003000 06000c00     .......`.0......
 8013248:	01800300 006000c0 00180030 0006000c     ......`.0.......
 8013258:	7ffe7ffe 00000000 00000000 00000000     ................
 8013268:	03e00000 006003e0 00600060 00600060     ......`.`.`.`.`.
 8013278:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8013288:	00600060 00600060 03e00060 000003e0     `.`.`.`.`.......
 8013298:	00300000 00600030 00600060 00c000c0     ..0.0.`.`.`.....
 80132a8:	01c000c0 01800180 03000180 03000300     ................
 80132b8:	06000600 00000000 00000000 00000000     ................
 80132c8:	03e00000 030003e0 03000300 03000300     ................
 80132d8:	03000300 03000300 03000300 03000300     ................
 80132e8:	03000300 03000300 03e00300 000003e0     ................
 80132f8:	00000000 01c001c0 03600360 06300360     ........`.`.`.0.
 8013308:	0c180630 00000c18 00000000 00000000     0...............
	...
 8013348:	ffff0000 0000ffff 00000000 00000000     ................
 8013358:	000c0000 000c000c 000c000c 0000000c     ................
	...
 8013394:	07f803f0 0c0c0c1c 0ff00f00 0c0c0cf8     ................
 80133a4:	0f1c0c0c 18f00ff8 00000000 00000000     ................
 80133b4:	00000000 00180000 00180018 00180018     ................
 80133c4:	0ff803d8 18180c38 18181818 18181818     ....8...........
 80133d4:	0c381818 03d80ff8 00000000 00000000     ..8.............
	...
 80133f4:	07f003c0 0c180e30 00180018 00180018     ....0...........
 8013404:	0e300c18 03c007f0 00000000 00000000     ..0.............
 8013414:	00000000 18000000 18001800 18001800     ................
 8013424:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 8013434:	1c301818 1bc01ff0 00000000 00000000     ..0.............
	...
 8013454:	0ff003c0 18180c30 1ff81ff8 00180018     ....0...........
 8013464:	1c301838 07c00ff0 00000000 00000000     8.0.............
 8013474:	00000000 0f800000 00c00fc0 00c000c0     ................
 8013484:	07f007f0 00c000c0 00c000c0 00c000c0     ................
 8013494:	00c000c0 00c000c0 00000000 00000000     ................
	...
 80134b4:	0ff80de0 0c0c0e18 0c0c0c0c 0c0c0c0c     ................
 80134c4:	0e180c0c 0de00ff8 0c0c0c00 07f8061c     ................
 80134d4:	000001f0 00180000 00180018 00180018     ................
 80134e4:	0ff807d8 18181c38 18181818 18181818     ....8...........
 80134f4:	18181818 18181818 00000000 00000000     ................
 8013504:	00000000 00c00000 000000c0 00000000     ................
 8013514:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8013524:	00c000c0 00c000c0 00000000 00000000     ................
 8013534:	00000000 00c00000 000000c0 00000000     ................
 8013544:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8013554:	00c000c0 00c000c0 00c000c0 00f800c0     ................
 8013564:	00000078 000c0000 000c000c 000c000c     x...............
 8013574:	060c0c0c 018c030c 006c00cc 019c00fc     ..........l.....
 8013584:	030c038c 0c0c060c 00000000 00000000     ................
 8013594:	00000000 00c00000 00c000c0 00c000c0     ................
 80135a4:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 80135b4:	00c000c0 00c000c0 00000000 00000000     ................
	...
 80135d4:	7eff3c7c c183e3c7 c183c183 c183c183     |<.~............
 80135e4:	c183c183 c183c183 00000000 00000000     ................
	...
 8013604:	0ff80798 18181c38 18181818 18181818     ....8...........
 8013614:	18181818 18181818 00000000 00000000     ................
	...
 8013634:	0ff003c0 18180c30 18181818 18181818     ....0...........
 8013644:	0c301818 03c00ff0 00000000 00000000     ..0.............
	...
 8013664:	0ff803d8 18180c38 18181818 18181818     ....8...........
 8013674:	0c381818 03d80ff8 00180018 00180018     ..8.............
 8013684:	00000018 00000000 00000000 00000000     ................
 8013694:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 80136a4:	1c301818 1bc01ff0 18001800 18001800     ..0.............
 80136b4:	00001800 00000000 00000000 00000000     ................
 80136c4:	03f007b0 00300070 00300030 00300030     ....p.0.0.0.0.0.
 80136d4:	00300030 00300030 00000000 00000000     0.0.0.0.........
	...
 80136f4:	03f003e0 0c180e38 03f00038 0c0007c0     ....8...8.......
 8013704:	0e380c18 03e007f0 00000000 00000000     ..8.............
	...
 801371c:	00c00080 00c000c0 07f007f0 00c000c0     ................
 801372c:	00c000c0 00c000c0 00c000c0 078007c0     ................
	...
 8013754:	18181818 18181818 18181818 18181818     ................
 8013764:	1c381818 19e01ff0 00000000 00000000     ..8.............
	...
 8013784:	0c18180c 0c180c18 06300630 03600630     ........0.0.0.`.
 8013794:	03600360 01c001c0 00000000 00000000     `.`.............
	...
 80137b4:	41c141c1 636361c3 63636363 36363636     .A.A.acccccc6666
 80137c4:	1c1c3636 1c1c1c1c 00000000 00000000     66..............
	...
 80137e4:	1c38381c 06600c30 03600360 03600360     .88.0.`.`.`.`.`.
 80137f4:	0c300660 381c1c38 00000000 00000000     `.0.8..8........
	...
 8013814:	18303018 18701830 0c600c60 06c00ce0     .00.0.p.`.`.....
 8013824:	038006c0 03800380 01800180 00f001c0     ................
 8013834:	00000070 00000000 00000000 00000000     p...............
 8013844:	1ffc1ffc 06000c00 01800300 006000c0     ..............`.
 8013854:	00180030 1ffc1ffc 00000000 00000000     0...............
 8013864:	00000000 03000000 00c00180 00c000c0     ................
 8013874:	00c000c0 006000c0 00300060 00400060     ......`.`.0.`.@.
 8013884:	00c000c0 00c000c0 00c000c0 03000180     ................
 8013894:	00000000 01800000 01800180 01800180     ................
 80138a4:	01800180 01800180 01800180 01800180     ................
 80138b4:	01800180 01800180 01800180 01800180     ................
 80138c4:	00000180 00600000 01c000c0 01800180     ......`.........
 80138d4:	01800180 03000180 06000300 01000300     ................
 80138e4:	01800180 01800180 01800180 006000c0     ..............`.
	...
 8013908:	1ff810f0 00000f08 00000000 00000000     ................
	...

08013928 <ASCII12x12_Table>:
	...
 8013940:	20000000 20002000 20002000 20002000     ... . . . . . . 
 8013950:	20000000 00000000 50000000 50005000     ... .......P.P.P
	...
 8013970:	09000000 12000900 12007f00 12007f00     ................
 8013980:	24002400 00000000 38001000 50005400     .$.$.......8.T.P
 8013990:	38005000 54001400 38005400 00001000     .P.8...T.T.8....
 80139a0:	30800000 49004900 32c04a00 09200520     ...0.I.I.J.2 . .
 80139b0:	10c00920 00000000 0c000000 12001200      ...............
 80139c0:	18001400 23002500 1d802300 00000000     .....%.#.#......
 80139d0:	40000000 40004000 00000000 00000000     ...@.@.@........
	...
 80139e8:	08000000 10001000 20002000 20002000     ......... . . . 
 80139f8:	20002000 10001000 40000000 20002000     . . .......@. . 
 8013a08:	10001000 10001000 10001000 20002000     ............. . 
 8013a18:	20000000 20007000 00005000 00000000     ... .p. .P......
	...
 8013a34:	08000000 7f000800 08000800 00000000     ................
	...
 8013a58:	20000000 40002000 00000000 00000000     ... . .@........
 8013a68:	00000000 00007000 00000000 00000000     .....p..........
	...
 8013a88:	20000000 00000000 10000000 10001000     ... ............
 8013a98:	20002000 20002000 40004000 00000000     . . . . .@.@....
 8013aa8:	10000000 44002800 44004400 44004400     .....(.D.D.D.D.D
 8013ab8:	10002800 00000000 10000000 50003000     .(...........0.P
 8013ac8:	10001000 10001000 10001000 00000000     ................
 8013ad8:	30000000 44004800 08000400 20001000     ...0.H.D....... 
 8013ae8:	7c004000 00000000 30000000 04004800     .@.|.......0.H..
 8013af8:	10000800 44000800 30004800 00000000     .......D.H.0....
 8013b08:	08000000 18001800 28002800 7c004800     .........(.(.H.|
 8013b18:	08000800 00000000 3c000000 40002000     ...........<. .@
 8013b28:	48007000 44000400 30004800 00000000     .p.H...D.H.0....
 8013b38:	18000000 40002400 68005000 44004400     .....$.@.P.h.D.D
 8013b48:	10002800 00000000 7c000000 08000400     .(.........|....
 8013b58:	10001000 20001000 20002000 00000000     ....... . . ....
 8013b68:	10000000 44002800 10002800 44002800     .....(.D.(...(.D
 8013b78:	10002800 00000000 10000000 44002800     .(...........(.D
 8013b88:	2c004400 04001400 30004800 00000000     .D.,.....H.0....
 8013b98:	00000000 20000000 00000000 00000000     ....... ........
 8013ba8:	20000000 00000000 00000000 20000000     ... ........... 
	...
 8013bc0:	20000000 40002000 00000000 08000400     ... . .@........
 8013bd0:	40003000 08003000 00000400 00000000     .0.@.0..........
 8013be0:	00000000 7c000000 00000000 00007c00     .......|.....|..
	...
 8013bfc:	20004000 04001800 20001800 00004000     .@. ....... .@..
 8013c0c:	00000000 38000000 44006400 08000400     .......8.d.D....
 8013c1c:	10001000 10000000 00000000 0f800000     ................
 8013c2c:	2ea01040 512051a0 51205120 4dc05320     @....Q Q Q Q S.M
 8013c3c:	10402020 08000000 14001400 22001400       @............"
 8013c4c:	22003e00 41004100 00000000 3c000000     .>.".A.A.......<
 8013c5c:	22002200 3c002200 22002200 3c002200     .".".".<.".".".<
 8013c6c:	00000000 0e000000 21001100 20002000     ...........!. . 
 8013c7c:	21002000 0e001100 00000000 3c000000     . .!...........<
 8013c8c:	21002200 21002100 21002100 3c002200     .".!.!.!.!.!.".<
 8013c9c:	00000000 3e000000 20002000 3e002000     .......>. . . .>
 8013cac:	20002000 3e002000 00000000 3e000000     . . . .>.......>
 8013cbc:	20002000 3c002000 20002000 20002000     . . . .<. . . . 
 8013ccc:	00000000 0e000000 21001100 27002000     ...........!. .'
 8013cdc:	21002100 0e001100 00000000 21000000     .!.!...........!
 8013cec:	21002100 3f002100 21002100 21002100     .!.!.!.?.!.!.!.!
 8013cfc:	00000000 20000000 20002000 20002000     ....... . . . . 
 8013d0c:	20002000 20002000 00000000 08000000     . . . . ........
 8013d1c:	08000800 08000800 48000800 30004800     ...........H.H.0
 8013d2c:	00000000 22000000 28002400 38002800     .......".$.(.(.8
 8013d3c:	24002800 22002400 00000000 20000000     .(.$.$."....... 
 8013d4c:	20002000 20002000 20002000 3e002000     . . . . . . . .>
 8013d5c:	00000000 20800000 31803180 2a803180     ....... .1.1.1.*
 8013d6c:	2a802a80 24802a80 00000000 21000000     .*.*.*.$.......!
 8013d7c:	31003100 29002900 23002500 21002300     .1.1.).).%.#.#.!
 8013d8c:	00000000 0c000000 21001200 21002100     ...........!.!.!
 8013d9c:	21002100 0c001200 00000000 3c000000     .!.!...........<
 8013dac:	22002200 3c002200 20002000 20002000     .".".".<. . . . 
 8013dbc:	00000000 0c000000 21001200 21002100     ...........!.!.!
 8013dcc:	21002100 0d001600 00000100 3e000000     .!.!...........>
 8013ddc:	21002100 3e002100 22002400 20802100     .!.!.!.>.$.".!. 
 8013dec:	00000000 1c000000 22002200 1c002000     .........".". ..
 8013dfc:	22000200 1c002200 00000000 3e000000     ...".".........>
 8013e0c:	08000800 08000800 08000800 08000800     ................
 8013e1c:	00000000 21000000 21002100 21002100     .......!.!.!.!.!
 8013e2c:	21002100 0c001200 00000000 41000000     .!.!...........A
 8013e3c:	22004100 22002200 14001400 08001400     .A."."."........
 8013e4c:	00000000 44400000 2a404a40 2a802a80     ......@D@J@*.*.*
 8013e5c:	2a802a80 11002a80 00000000 41000000     .*.*.*.........A
 8013e6c:	14002200 08001400 14001400 41002200     ."...........".A
 8013e7c:	00000000 41000000 22002200 08001400     .......A."."....
 8013e8c:	08000800 08000800 00000000 7e000000     ...............~
 8013e9c:	04000200 10000800 20001000 7e004000     ........... .@.~
 8013eac:	00000000 30000000 20002000 20002000     .......0. . . . 
 8013ebc:	20002000 20002000 20002000 40000000     . . . . . . ...@
 8013ecc:	20004000 20002000 20002000 10001000     .@. . . . . ....
 8013edc:	00000000 60000000 20002000 20002000     .......`. . . . 
 8013eec:	20002000 20002000 20002000 10000000     . . . . . . ....
 8013efc:	28002800 44002800 00000000 00000000     .(.(.(.D........
	...
 8013f24:	7e000000 20004000 00000000 00000000     ...~.@. ........
	...
 8013f44:	38000000 04004400 44003c00 3c004400     ...8.D...<.D.D.<
 8013f54:	00000000 40000000 58004000 44006400     .......@.@.X.d.D
 8013f64:	44004400 58006400 00000000 00000000     .D.D.d.X........
 8013f74:	30000000 40004800 40004000 30004800     ...0.H.@.@.@.H.0
 8013f84:	00000000 04000000 34000400 44004c00     ...........4.L.D
 8013f94:	44004400 34004c00 00000000 00000000     .D.D.L.4........
 8013fa4:	38000000 44004400 40007c00 38004400     ...8.D.D.|.@.D.8
 8013fb4:	00000000 60000000 e0004000 40004000     .......`.@...@.@
 8013fc4:	40004000 40004000 00000000 00000000     .@.@.@.@........
 8013fd4:	34000000 44004c00 44004400 34004c00     ...4.L.D.D.D.L.4
 8013fe4:	44000400 40000000 58004000 44006400     ...D...@.@.X.d.D
 8013ff4:	44004400 44004400 00000000 40000000     .D.D.D.D.......@
 8014004:	40000000 40004000 40004000 40004000     ...@.@.@.@.@.@.@
 8014014:	00000000 40000000 40000000 40004000     .......@...@.@.@
 8014024:	40004000 40004000 40004000 40000000     .@.@.@.@.@.@...@
 8014034:	48004000 60005000 50005000 48004800     .@.H.P.`.P.P.H.H
 8014044:	00000000 40000000 40004000 40004000     .......@.@.@.@.@
 8014054:	40004000 40004000 00000000 00000000     .@.@.@.@........
 8014064:	52000000 49006d00 49004900 49004900     ...R.m.I.I.I.I.I
	...
 801407c:	58000000 44006400 44004400 44004400     ...X.d.D.D.D.D.D
	...
 8014094:	38000000 44004400 44004400 38004400     ...8.D.D.D.D.D.8
	...
 80140ac:	58000000 44006400 44004400 58006400     ...X.d.D.D.D.d.X
 80140bc:	40004000 00000000 34000000 44004c00     .@.@.......4.L.D
 80140cc:	44004400 34004c00 04000400 00000000     .D.D.L.4........
 80140dc:	50000000 40006000 40004000 40004000     ...P.`.@.@.@.@.@
	...
 80140f4:	30000000 40004800 08003000 30004800     ...0.H.@.0...H.0
 8014104:	00000000 40000000 e0004000 40004000     .......@.@...@.@
 8014114:	40004000 60004000 00000000 00000000     .@.@.@.`........
 8014124:	44000000 44004400 44004400 34004c00     ...D.D.D.D.D.L.4
	...
 801413c:	44000000 28004400 28002800 10002800     ...D.D.(.(.(.(..
	...
 8014154:	49000000 55004900 55005500 22005500     ...I.I.U.U.U.U."
	...
 801416c:	44000000 28002800 28001000 44002800     ...D.(.(...(.(.D
	...
 8014184:	44000000 28004400 28002800 10001000     ...D.D.(.(.(....
 8014194:	10001000 00000000 78000000 10000800     ...........x....
 80141a4:	20002000 78004000 00000000 10000000     . . .@.x........
 80141b4:	20002000 20002000 20004000 20002000     . . . . .@. . . 
 80141c4:	20002000 20000000 20002000 20002000     . . ... . . . . 
 80141d4:	20002000 20002000 20002000 40000000     . . . . . . ...@
 80141e4:	20002000 20002000 20001000 20002000     . . . . ... . . 
 80141f4:	20002000 00000000 00000000 58007400     . . .........t.X
	...
 8014214:	50007000 50005000 50005000 70005000     .p.P.P.P.P.P.P.p
 8014224:	00000000                                ....

08014228 <ASCII8x12_Table>:
	...
 8014244:	00100000 00100010 00100010 00000010     ................
 8014254:	00000010 00000000 00280000 00280028     ..........(.(.(.
	...
 8014274:	00140000 003e0014 00280014 0028007c     ......>...(.|.(.
 8014284:	00000028 00000000 00380010 00500054     (.........8.T.P.
 8014294:	00140038 00540014 00100038 00000000     8.....T.8.......
 80142a4:	00440000 00a800a8 00140050 002a001a     ..D.....P.....*.
 80142b4:	00000024 00000000 00200000 00500050     $......... .P.P.
 80142c4:	00e80020 00980098 00000060 00000000      .......`.......
 80142d4:	00800000 00800080 00000000 00000000     ................
	...
 80142ec:	00400000 00800080 00800080 00800080     ..@.............
 80142fc:	00800080 00000000 00800000 00400040     ............@.@.
 801430c:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
 801431c:	00400000 004000e0 000000a0 00000000     ..@...@.........
	...
 8014338:	00200000 00f80020 00200020 00000000     .. . ... . .....
	...
 801435c:	00400040 00000000 00000000 00000000     @.@.............
 801436c:	00000000 000000c0 00000000 00000000     ................
	...
 801438c:	00000040 00000000 00200000 00200020     @......... . . .
 801439c:	00400040 00800080 00000080 00000000     @.@.............
 80143ac:	00600000 00900090 00900090 00900090     ..`.............
 80143bc:	00000060 00000000 00200000 00a00060     `......... .`...
 80143cc:	00200020 00200020 00000020 00000000      . . . . .......
 80143dc:	00600000 00100090 00200010 00800040     ..`....... .@...
 80143ec:	000000f0 00000000 00600000 00100090     ..........`.....
 80143fc:	00100060 00900010 00000060 00000000     `.......`.......
 801440c:	00100000 00500030 00900050 001000f8     ....0.P.P.......
 801441c:	00000010 00000000 00700000 00800040     ..........p.@...
 801442c:	001000e0 00900010 00000060 00000000     ........`.......
 801443c:	00600000 00800090 00d000a0 00900090     ..`.............
 801444c:	00000060 00000000 00f00000 00200010     `............. .
 801445c:	00200020 00400040 00000040 00000000      . .@.@.@.......
 801446c:	00600000 00900090 00900060 00900090     ..`.....`.......
 801447c:	00000060 00000000 00600000 00900090     `.........`.....
 801448c:	005000b0 00900010 00000060 00000000     ..P.....`.......
 801449c:	00000000 00400000 00000000 00000000     ......@.........
 80144ac:	00000040 00000000 00000000 00400000     @.............@.
	...
 80144c4:	00400040 00000000 00000000 00100000     @.@.............
 80144d4:	00800060 00100060 00000000 00000000     `...`...........
	...
 80144ec:	000000f0 000000f0 00000000 00000000     ................
 80144fc:	00000000 00800000 00100060 00800060     ........`...`...
	...
 8014514:	00600000 00100090 00400020 00000040     ..`..... .@.@...
 8014524:	00000040 00000000 001c0000 005b0022     @...........".[.
 8014534:	00a500a5 00a500a5 0041009e 00000000     ..........A.....
 8014544:	00200000 00500050 00500050 00880070     .. .P.P.P.P.p...
 8014554:	00000088 00000000 00f00000 00880088     ................
 8014564:	008800f0 00880088 000000f0 00000000     ................
 8014574:	00380000 00840044 00800080 00440084     ..8.D.........D.
 8014584:	00000038 00000000 00e00000 00880090     8...............
 8014594:	00880088 00900088 000000e0 00000000     ................
 80145a4:	00f80000 00800080 008000f8 00800080     ................
 80145b4:	000000f8 00000000 00780000 00400040     ..........x.@.@.
 80145c4:	00400070 00400040 00000040 00000000     p.@.@.@.@.......
 80145d4:	00380000 00840044 009c0080 00440084     ..8.D.........D.
 80145e4:	00000038 00000000 00880000 00880088     8...............
 80145f4:	008800f8 00880088 00000088 00000000     ................
 8014604:	00800000 00800080 00800080 00800080     ................
 8014614:	00000080 00000000 00100000 00100010     ................
 8014624:	00100010 00900090 00000060 00000000     ........`.......
 8014634:	00880000 00a00090 00a000e0 00900090     ................
 8014644:	00000088 00000000 00800000 00800080     ................
 8014654:	00800080 00800080 000000f0 00000000     ................
 8014664:	00820000 00c600c6 00aa00aa 00aa00aa     ................
 8014674:	00000092 00000000 00840000 00a400c4     ................
 8014684:	009400a4 008c0094 00000084 00000000     ................
 8014694:	00300000 00840048 00840084 00480084     ..0.H.........H.
 80146a4:	00000030 00000000 00f00000 00880088     0...............
 80146b4:	00f00088 00800080 00000080 00000000     ................
 80146c4:	00300000 00840048 00840084 00580084     ..0.H.........X.
 80146d4:	00040034 00000000 00780000 00440044     4.........x.D.D.
 80146e4:	00500078 00440048 00000042 00000000     x.P.H.D.B.......
 80146f4:	00700000 00800088 00080070 00880088     ..p.....p.......
 8014704:	00000070 00000000 00f80000 00200020     p........... . .
 8014714:	00200020 00200020 00000020 00000000      . . . . .......
 8014724:	00840000 00840084 00840084 00480084     ..............H.
 8014734:	00000030 00000000 00880000 00500088     0.............P.
 8014744:	00500050 00500050 00000020 00000000     P.P.P.P. .......
 8014754:	00920000 00aa00aa 00aa00aa 00aa00aa     ................
 8014764:	00000044 00000000 00840000 00480048     D...........H.H.
 8014774:	00300030 00480048 00000084 00000000     0.0.H.H.........
 8014784:	00880000 00500050 00200020 00200020     ....P.P. . . . .
 8014794:	00000020 00000000 00f80000 00100008      ...............
 80147a4:	00200020 00800040 000000f8 00000000      . .@...........
 80147b4:	00c00000 00800080 00800080 00800080     ................
 80147c4:	00800080 00000000 00800000 00400080     ..............@.
 80147d4:	00400040 00200040 00000020 00000000     @.@.@. . .......
 80147e4:	00c00000 00400040 00400040 00400040     ....@.@.@.@.@.@.
 80147f4:	00400040 00000000 00400000 00a000a0     @.@.......@.....
 8014804:	000000a0 00000000 00000000 00000000     ................
	...
 8014824:	00f80000 00000000 00800000 00000040     ............@...
	...
 8014848:	00e00000 00700010 00900090 00000070     ......p.....p...
 8014858:	00000000 00800000 00a00080 009000d0     ................
 8014868:	00d00090 000000a0 00000000 00000000     ................
 8014878:	00600000 00800090 00900080 00000060     ..`.........`...
 8014888:	00000000 00100000 00500010 009000b0     ..........P.....
 8014898:	00b00090 00000050 00000000 00000000     ....P...........
 80148a8:	00600000 00f00090 00900080 00000060     ..`.........`...
 80148b8:	00000000 00c00000 00c00080 00800080     ................
 80148c8:	00800080 00000080 00000000 00000000     ................
 80148d8:	00500000 009000b0 00b00090 00100050     ..P.........P...
 80148e8:	00000000 00800000 00a00080 009000d0     ................
 80148f8:	00900090 00000090 00000000 00800000     ................
 8014908:	00800000 00800080 00800080 00000080     ................
 8014918:	00000000 00800000 00800000 00800080     ................
 8014928:	00800080 00800080 00000000 00800000     ................
 8014938:	00900080 00c000a0 009000a0 00000090     ................
 8014948:	00000000 00800000 00800080 00800080     ................
 8014958:	00800080 00000080 00000000 00000000     ................
 8014968:	00a60000 009200da 00920092 00000092     ................
	...
 8014980:	00a00000 009000d0 00900090 00000090     ................
	...
 8014998:	00600000 00900090 00900090 00000060     ..`.........`...
	...
 80149b0:	00a00000 009000d0 00d00090 008000a0     ................
	...
 80149c8:	00500000 009000b0 00b00090 00100050     ..P.........P...
	...
 80149e0:	00a00000 008000c0 00800080 00000080     ................
	...
 80149f8:	00e00000 00400090 00900020 00000060     ......@. ...`...
 8014a08:	00000000 00800000 00c00080 00800080     ................
 8014a18:	00800080 000000c0 00000000 00000000     ................
 8014a28:	00900000 00900090 00b00090 00000050     ............P...
	...
 8014a40:	00880000 00500088 00500050 00000020     ......P.P.P. ...
	...
 8014a58:	00920000 00aa00aa 00aa00aa 00000044     ............D...
	...
 8014a70:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
 8014a88:	00880000 00500050 00200050 00200020     ....P.P.P. . . .
	...
 8014aa0:	00f00000 00200010 00800040 000000f0     ...... .@.......
 8014ab0:	00000000 00c00000 00800080 00000080     ................
 8014ac0:	00800080 00800080 00000000 00800000     ................
 8014ad0:	00800080 00800080 00800080 00800080     ................
 8014ae0:	00000000 00c00000 00400040 00200040     ........@.@.@. .
 8014af0:	00400040 00400040 00000000 00000000     @.@.@.@.........
 8014b00:	00000000 00b000e8 00000000 00000000     ................
	...
 8014b18:	00a000e0 00a000a0 00a000a0 000000e0     ................

08014b28 <ASCII8x8_Table>:
	...
 8014b38:	00400040 00400040 00400040 00400000     @.@.@.@.@.@...@.
 8014b48:	00a000a0 000000a0 00000000 00000000     ................
 8014b58:	00240000 00fe0024 00fc0048 00480048     ..$.$...H...H.H.
 8014b68:	00540038 00380050 00140014 00380054     8.T.P.8.....T.8.
 8014b78:	00a80044 005000a8 001a0014 0024002a     D.....P.....*.$.
 8014b88:	00280010 00100028 004c0074 0030004c     ..(.(...t.L.L.0.
 8014b98:	00100010 00000010 00000000 00000000     ................
 8014ba8:	00100008 00100010 00100010 00080010     ................
 8014bb8:	00080010 00080008 00080008 00100008     ................
 8014bc8:	00000000 00180024 0018003c 00000024     ....$...<...$...
 8014bd8:	00000000 00100010 0010007c 00000010     ........|.......
	...
 8014bf0:	00080000 00100008 00000000 00000000     ................
 8014c00:	0000003c 00000000 00000000 00000000     <...............
 8014c10:	00000000 00180018 00080008 00100008     ................
 8014c20:	00200010 00200020 00240018 00240024     .. . . ...$.$.$.
 8014c30:	00240024 00180024 00180008 00080028     $.$.$.......(...
 8014c40:	00080008 00080008 00440038 00040000     ........8.D.....
 8014c50:	00100008 007c0020 00240018 00180004     .... .|...$.....
 8014c60:	00040004 00180024 000c0004 00240014     ....$.........$.
 8014c70:	007e0044 00040004 0020003c 00380020     D.~.....<. . .8.
 8014c80:	00040004 00180024 00240018 00380020     ....$.....$. .8.
 8014c90:	00240024 00180024 0004003c 00080008     $.$.$...<.......
 8014ca0:	00100008 00100010 00240018 00180024     ..........$.$...
 8014cb0:	00240024 00180024 00240018 00240024     $.$.$.....$.$.$.
 8014cc0:	0004001c 00180024 00000000 00000010     ....$...........
 8014cd0:	00100000 00000000 00000000 00000008     ................
 8014ce0:	00080000 00000010 00000000 00180004     ................
 8014cf0:	00180020 00000004 00000000 003c0000      .............<.
 8014d00:	003c0000 00000000 00000000 00180020     ..<......... ...
 8014d10:	00180004 00000020 00240018 00080004     .... .....$.....
 8014d20:	00100010 00100000 0042003c 00a50099     ........<.B.....
 8014d30:	009d00a5 00380042 00440038 00440044     ....B.8.8.D.D.D.
 8014d40:	0044007c 00440044 00440078 00780044     |.D.D.D.x.D.D.x.
 8014d50:	00440044 00780044 0022001c 00400042     D.D.D.x...".B.@.
 8014d60:	00420040 001c0022 00480070 00440044     @.B."...p.H.D.D.
 8014d70:	00440044 00700048 0040007c 007c0040     D.D.H.p.|.@.@.|.
 8014d80:	00400040 007c0040 0020003c 00380020     @.@.@.|.<. . .8.
 8014d90:	00200020 00200020 0022001c 00400042      . . . ...".B.@.
 8014da0:	0042004e 001c0022 00440044 007c0044     N.B."...D.D.D.|.
 8014db0:	00440044 00440044 00100010 00100010     D.D.D.D.........
 8014dc0:	00100010 00100010 00040004 00040004     ................
 8014dd0:	00240004 00180024 00480044 00700050     ..$.$...D.H.P.p.
 8014de0:	00480050 00440048 00200020 00200020     P.H.H.D. . . . .
 8014df0:	00200020 003c0020 00c60082 00aa00c6      . . .<.........
 8014e00:	00aa00aa 009200aa 00620042 00520052     ........B.b.R.R.
 8014e10:	004a004a 00420046 00240018 00420042     J.J.F.B...$.B.B.
 8014e20:	00420042 00180024 00440078 00440044     B.B.$...x.D.D.D.
 8014e30:	00400078 00400040 00240018 00420042     x.@.@.@...$.B.B.
 8014e40:	00420042 001a002c 00440078 00780044     B.B.,...x.D.D.x.
 8014e50:	00480050 00420044 00440038 00380040     P.H.D.B.8.D.@.8.
 8014e60:	00440004 00380044 0010007c 00100010     ..D.D.8.|.......
 8014e70:	00100010 00100010 00420042 00420042     ........B.B.B.B.
 8014e80:	00420042 00180024 00440044 00280028     B.B.$...D.D.(.(.
 8014e90:	00280028 00100028 00aa0092 00aa00aa     (.(.(...........
 8014ea0:	00aa00aa 004400aa 00240042 00180024     ......D.B.$.$...
 8014eb0:	00240018 00420024 00280044 00100028     ..$.$.B.D.(.(...
 8014ec0:	00100010 00100010 0004007c 00100008     ........|.......
 8014ed0:	00200010 007c0040 0010001c 00100010     .. .@.|.........
 8014ee0:	00100010 001c0010 00100010 00080008     ................
 8014ef0:	00080008 00040004 0004001c 00040004     ................
 8014f00:	00040004 001c0004 00280010 00000044     ..........(.D...
	...
 8014f28:	00100020 00000010 00000000 00000000      ...............
 8014f38:	00000000 00040018 0024001c 001c0024     ..........$.$...
 8014f48:	00200020 00340028 00240024 00280034      . .(.4.$.$.4.(.
 8014f58:	00000000 00240018 00200020 00180024     ......$. . .$...
 8014f68:	00040004 002c0014 00240024 0014002c     ......,.$.$.,...
 8014f78:	00000000 00240018 0020003c 00180024     ......$.<. .$...
 8014f88:	00180000 00100010 00100018 00100010     ................
 8014f98:	00180000 00240024 00040018 00180024     ....$.$.....$...
 8014fa8:	00200020 00340028 00240024 00240024      . .(.4.$.$.$.$.
 8014fb8:	00000010 00100010 00100010 00100010     ................
 8014fc8:	00000008 00080008 00080008 00100028     ............(...
 8014fd8:	00200020 00280024 00280030 00240024      . .$.(.0.(.$.$.
 8014fe8:	00100010 00100010 00100010 00100010     ................
 8014ff8:	00000000 00da00a6 00920092 00920092     ................
 8015008:	00000000 00340028 00240024 00240024     ....(.4.$.$.$.$.
 8015018:	00000000 00240018 00240024 00180024     ......$.$.$.$...
 8015028:	00280000 00240034 00200038 00200020     ..(.4.$.8. . . .
 8015038:	00140000 0024002c 0004001c 00040004     ....,.$.........
 8015048:	00000000 0030002c 00200020 00200020     ....,.0. . . . .
 8015058:	00000000 00240018 00080010 00180024     ......$.....$...
 8015068:	00100000 00100038 00100010 00180010     ....8...........
 8015078:	00000000 00240024 00240024 0014002c     ....$.$.$.$.,...
 8015088:	00000000 00440044 00280028 00100028     ....D.D.(.(.(...
 8015098:	00000000 00aa0092 00aa00aa 004400aa     ..............D.
 80150a8:	00000000 00280044 00100010 00440028     ....D.(.....(.D.
 80150b8:	00280000 00280028 00100010 00100010     ..(.(.(.........
 80150c8:	00000000 0004003c 00100008 003c0020     ....<....... .<.
 80150d8:	00080000 00100010 00100020 00080010     ........ .......
 80150e8:	00100010 00100010 00100010 00100010     ................
 80150f8:	00100000 00080008 00080004 00100008     ................
 8015108:	00000000 00600000 000c0092 00000000     ......`.........
 8015118:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................

08015128 <GPIO_PIN>:
 8015128:	20001000 80004000                       ... .@..

08015130 <GPIO_CLK>:
 8015130:	00000008 00000008 00000008 00000008     ................

08015140 <BUTTON_PIN>:
 8015140:	00000001                                ....

08015144 <BUTTON_CLK>:
 8015144:	00000001                                ....

08015148 <BUTTON_EXTI_LINE>:
 8015148:	00000001                                ....

0801514c <BUTTON_PORT_SOURCE>:
 801514c:	00000000                                ....

08015150 <BUTTON_PIN_SOURCE>:
 8015150:	00000000                                ....

08015154 <BUTTON_IRQn>:
 8015154:	00000006                                ....

08015158 <COM_USART_CLK>:
 8015158:	00000020 00040000                        .......

08015160 <COM_TX_PORT_CLK>:
 8015160:	00000004 00000004                       ........

08015168 <COM_RX_PORT_CLK>:
 8015168:	00000004 00000004                       ........

08015170 <COM_TX_PIN>:
 8015170:	04000040                                @...

08015174 <COM_RX_PIN>:
 8015174:	08000080                                ....

08015178 <COM_TX_PIN_SOURCE>:
 8015178:	000a0006                                ....

0801517c <COM_RX_PIN_SOURCE>:
 801517c:	000b0007                                ....

08015180 <COM_TX_AF>:
 8015180:	00070008                                ....

08015184 <COM_RX_AF>:
 8015184:	00070008 00000043                       ....C...

0801518c <__EH_FRAME_BEGIN__>:
 801518c:	00000000                                ....

08015190 <_init>:
 8015190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015192:	bf00      	nop
 8015194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015196:	bc08      	pop	{r3}
 8015198:	469e      	mov	lr, r3
 801519a:	4770      	bx	lr

0801519c <_fini>:
 801519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801519e:	bf00      	nop
 80151a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80151a2:	bc08      	pop	{r3}
 80151a4:	469e      	mov	lr, r3
 80151a6:	4770      	bx	lr
