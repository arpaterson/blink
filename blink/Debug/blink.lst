
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147a8  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08014930  08014930  0001c930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08014934  08014934  0001c934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000060  20000000  08014938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .jcr          00000004  20000060  08014998  00020060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000210  20000064  0801499c  00020064  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000274  0801499c  00020274  2**0
                  ALLOC
  8 .ARM.attributes 0000002f  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  9 .debug_line   00009641  00000000  00000000  00020093  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000121c9  00000000  00000000  000296d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000032a6  00000000  00000000  0003b89d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001800  00000000  00000000  0003eb48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000015b8  00000000  00000000  00040348  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008c96  00000000  00000000  00041900  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006ea9  00000000  00000000  0004a596  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  0005143f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004bc4  00000000  00000000  00051470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 0464 	movw	r4, #100	; 0x64
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f644 1014 	movw	r0, #18708	; 0x4914
 80001a4:	f6c0 0001 	movt	r0, #2049	; 0x801
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f644 1014 	movw	r0, #18708	; 0x4914
 80001c4:	f240 0168 	movw	r1, #104	; 0x68
 80001c8:	f6c0 0001 	movt	r0, #2049	; 0x801
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 0060 	movw	r0, #96	; 0x60
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop
 80001f0:	08014938 	.word	0x08014938
 80001f4:	20000000 	.word	0x20000000
 80001f8:	20000060 	.word	0x20000060
 80001fc:	20000064 	.word	0x20000064
 8000200:	20000274 	.word	0x20000274

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000342:	f1a4 0401 	sub.w	r4, r4, #1
 8000346:	d1e9      	bne.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f092 0f00 	teq	r2, #0
 80004ee:	bf14      	ite	ne
 80004f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e720      	b.n	8000348 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aedc 	beq.w	80002f6 <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6c1      	b.n	80002f6 <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__gedf2>:
 8000574:	f04f 3cff 	mov.w	ip, #4294967295
 8000578:	e006      	b.n	8000588 <__cmpdf2+0x4>
 800057a:	bf00      	nop

0800057c <__ledf2>:
 800057c:	f04f 0c01 	mov.w	ip, #1
 8000580:	e002      	b.n	8000588 <__cmpdf2+0x4>
 8000582:	bf00      	nop

08000584 <__cmpdf2>:
 8000584:	f04f 0c01 	mov.w	ip, #1
 8000588:	f84d cd04 	str.w	ip, [sp, #-4]!
 800058c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000590:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000594:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000598:	bf18      	it	ne
 800059a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800059e:	d01b      	beq.n	80005d8 <__cmpdf2+0x54>
 80005a0:	b001      	add	sp, #4
 80005a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005a6:	bf0c      	ite	eq
 80005a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005ac:	ea91 0f03 	teqne	r1, r3
 80005b0:	bf02      	ittt	eq
 80005b2:	ea90 0f02 	teqeq	r0, r2
 80005b6:	2000      	moveq	r0, #0
 80005b8:	4770      	bxeq	lr
 80005ba:	f110 0f00 	cmn.w	r0, #0
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf58      	it	pl
 80005c4:	4299      	cmppl	r1, r3
 80005c6:	bf08      	it	eq
 80005c8:	4290      	cmpeq	r0, r2
 80005ca:	bf2c      	ite	cs
 80005cc:	17d8      	asrcs	r0, r3, #31
 80005ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005d2:	f040 0001 	orr.w	r0, r0, #1
 80005d6:	4770      	bx	lr
 80005d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005e0:	d102      	bne.n	80005e8 <__cmpdf2+0x64>
 80005e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005e6:	d107      	bne.n	80005f8 <__cmpdf2+0x74>
 80005e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005f0:	d1d6      	bne.n	80005a0 <__cmpdf2+0x1c>
 80005f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005f6:	d0d3      	beq.n	80005a0 <__cmpdf2+0x1c>
 80005f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <__aeabi_cdrcmple>:
 8000600:	4684      	mov	ip, r0
 8000602:	4610      	mov	r0, r2
 8000604:	4662      	mov	r2, ip
 8000606:	468c      	mov	ip, r1
 8000608:	4619      	mov	r1, r3
 800060a:	4663      	mov	r3, ip
 800060c:	e000      	b.n	8000610 <__aeabi_cdcmpeq>
 800060e:	bf00      	nop

08000610 <__aeabi_cdcmpeq>:
 8000610:	b501      	push	{r0, lr}
 8000612:	f7ff ffb7 	bl	8000584 <__cmpdf2>
 8000616:	2800      	cmp	r0, #0
 8000618:	bf48      	it	mi
 800061a:	f110 0f00 	cmnmi.w	r0, #0
 800061e:	bd01      	pop	{r0, pc}

08000620 <__aeabi_dcmpeq>:
 8000620:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000624:	f7ff fff4 	bl	8000610 <__aeabi_cdcmpeq>
 8000628:	bf0c      	ite	eq
 800062a:	2001      	moveq	r0, #1
 800062c:	2000      	movne	r0, #0
 800062e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000632:	bf00      	nop

08000634 <__aeabi_dcmplt>:
 8000634:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000638:	f7ff ffea 	bl	8000610 <__aeabi_cdcmpeq>
 800063c:	bf34      	ite	cc
 800063e:	2001      	movcc	r0, #1
 8000640:	2000      	movcs	r0, #0
 8000642:	f85d fb08 	ldr.w	pc, [sp], #8
 8000646:	bf00      	nop

08000648 <__aeabi_dcmple>:
 8000648:	f84d ed08 	str.w	lr, [sp, #-8]!
 800064c:	f7ff ffe0 	bl	8000610 <__aeabi_cdcmpeq>
 8000650:	bf94      	ite	ls
 8000652:	2001      	movls	r0, #1
 8000654:	2000      	movhi	r0, #0
 8000656:	f85d fb08 	ldr.w	pc, [sp], #8
 800065a:	bf00      	nop

0800065c <__aeabi_dcmpge>:
 800065c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000660:	f7ff ffce 	bl	8000600 <__aeabi_cdrcmple>
 8000664:	bf94      	ite	ls
 8000666:	2001      	movls	r0, #1
 8000668:	2000      	movhi	r0, #0
 800066a:	f85d fb08 	ldr.w	pc, [sp], #8
 800066e:	bf00      	nop

08000670 <__aeabi_dcmpgt>:
 8000670:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000674:	f7ff ffc4 	bl	8000600 <__aeabi_cdrcmple>
 8000678:	bf34      	ite	cc
 800067a:	2001      	movcc	r0, #1
 800067c:	2000      	movcs	r0, #0
 800067e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000682:	bf00      	nop

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	f644 1630 	movw	r6, #18736	; 0x4930
 800068a:	f644 1530 	movw	r5, #18736	; 0x4930
 800068e:	f6c0 0601 	movt	r6, #2049	; 0x801
 8000692:	f6c0 0501 	movt	r5, #2049	; 0x801
 8000696:	1b76      	subs	r6, r6, r5
 8000698:	10b6      	asrs	r6, r6, #2
 800069a:	d006      	beq.n	80006aa <__libc_init_array+0x26>
 800069c:	2400      	movs	r4, #0
 800069e:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a2:	3401      	adds	r4, #1
 80006a4:	4798      	blx	r3
 80006a6:	42a6      	cmp	r6, r4
 80006a8:	d1f9      	bne.n	800069e <__libc_init_array+0x1a>
 80006aa:	f644 1634 	movw	r6, #18740	; 0x4934
 80006ae:	f644 1530 	movw	r5, #18736	; 0x4930
 80006b2:	f6c0 0601 	movt	r6, #2049	; 0x801
 80006b6:	f6c0 0501 	movt	r5, #2049	; 0x801
 80006ba:	1b76      	subs	r6, r6, r5
 80006bc:	f014 f92c 	bl	8014918 <_init>
 80006c0:	10b6      	asrs	r6, r6, #2
 80006c2:	d006      	beq.n	80006d2 <__libc_init_array+0x4e>
 80006c4:	2400      	movs	r4, #0
 80006c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ca:	3401      	adds	r4, #1
 80006cc:	4798      	blx	r3
 80006ce:	42a6      	cmp	r6, r4
 80006d0:	d1f9      	bne.n	80006c6 <__libc_init_array+0x42>
 80006d2:	bd70      	pop	{r4, r5, r6, pc}

080006d4 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80006d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80006d6:	f000 b804 	b.w	80006e2 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 80006dc:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80006de:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80006e0:	3104      	adds	r1, #4

080006e2 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80006e2:	480f      	ldr	r0, [pc, #60]	; (8000720 <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 80006e4:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 80006e6:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80006e8:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80006ea:	f4ff aff6 	bcc.w	80006da <CopyDataInit>
  ldr  r2, =_sbss
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 80006f0:	f000 b803 	b.w	80006fa <LoopFillZerobss>

080006f4 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80006f4:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80006f6:	f842 3b04 	str.w	r3, [r2], #4

080006fa <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <LoopFillZerobss+0x32>)
  cmp  r2, r3
 80006fc:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80006fe:	f4ff aff9 	bcc.w	80006f4 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8000702:	480b      	ldr	r0, [pc, #44]	; (8000730 <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 8000704:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8000706:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 800070a:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800070c:	f000 f83e 	bl	800078c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000710:	f7ff ffb8 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000714:	f000 f810 	bl	8000738 <main>
  bx  lr    
 8000718:	4770      	bx	lr
 800071a:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800071c:	08014938 	.word	0x08014938
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000724:	20000060 	.word	0x20000060
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000728:	20000064 	.word	0x20000064
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800072c:	20000274 	.word	0x20000274
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8000730:	e000ed88 	.word	0xe000ed88

08000734 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000734:	f7ff bffe 	b.w	8000734 <ADC_IRQHandler>

08000738 <main>:
/**
  * @brief  Main program.
  * @param
  * @retval
  */
int main(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
	STM32f4_Discovery_LCD_Init();
 800073e:	f001 fa53 	bl	8001be8 <STM32f4_Discovery_LCD_Init>
	LCD_RGB_Test();
 8000742:	f001 fbb7 	bl	8001eb4 <LCD_RGB_Test>
	LCD_DrawCircle(50,50,10);
 8000746:	f04f 0032 	mov.w	r0, #50	; 0x32
 800074a:	f04f 0132 	mov.w	r1, #50	; 0x32
 800074e:	f04f 020a 	mov.w	r2, #10
 8000752:	f001 fec9 	bl	80024e8 <LCD_DrawCircle>
	LCD_LOG_Init();
 8000756:	f000 fa0b 	bl	8000b70 <LCD_LOG_Init>

	char Str[10] = "hello";
 800075a:	f641 7208 	movw	r2, #7944	; 0x1f08
 800075e:	f6c0 0201 	movt	r2, #2049	; 0x801
 8000762:	f107 0304 	add.w	r3, r7, #4
 8000766:	e892 0003 	ldmia.w	r2, {r0, r1}
 800076a:	6018      	str	r0, [r3, #0]
 800076c:	f103 0304 	add.w	r3, r3, #4
 8000770:	8019      	strh	r1, [r3, #0]
 8000772:	f04f 0300 	mov.w	r3, #0
 8000776:	817b      	strh	r3, [r7, #10]
 8000778:	f04f 0300 	mov.w	r3, #0
 800077c:	81bb      	strh	r3, [r7, #12]
	LCD_LOG_SetHeader((uint8_t*)&Str);
 800077e:	f107 0304 	add.w	r3, r7, #4
 8000782:	4618      	mov	r0, r3
 8000784:	f000 fa50 	bl	8000c28 <LCD_LOG_SetHeader>
	while(1){

	}
 8000788:	e7fe      	b.n	8000788 <main+0x50>
 800078a:	bf00      	nop

0800078c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000790:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000794:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000798:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800079c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	f042 0201 	orr.w	r2, r2, #1
 80007a6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007b0:	f04f 0200 	mov.w	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80007b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007c6:	6812      	ldr	r2, [r2, #0]
 80007c8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80007cc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80007d0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80007d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007da:	f243 0210 	movw	r2, #12304	; 0x3010
 80007de:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80007e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80007e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80007e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80007ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80007f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80007fa:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80007fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000800:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000804:	f04f 0200 	mov.w	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800080a:	f000 f8c1 	bl	8000990 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800080e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000812:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800081a:	609a      	str	r2, [r3, #8]
#endif
}
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop

08000820 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	f04f 0300 	mov.w	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	f04f 0302 	mov.w	r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	f04f 0300 	mov.w	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	f04f 0302 	mov.w	r3, #2
 8000842:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000844:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000848:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 030c 	and.w	r3, r3, #12
 8000852:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000854:	693b      	ldr	r3, [r7, #16]
 8000856:	2b04      	cmp	r3, #4
 8000858:	d00d      	beq.n	8000876 <SystemCoreClockUpdate+0x56>
 800085a:	2b08      	cmp	r3, #8
 800085c:	d015      	beq.n	800088a <SystemCoreClockUpdate+0x6a>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d169      	bne.n	8000936 <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000862:	f240 0304 	movw	r3, #4
 8000866:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800086a:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 800086e:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000872:	601a      	str	r2, [r3, #0]
      break;
 8000874:	e069      	b.n	800094a <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000876:	f240 0304 	movw	r3, #4
 800087a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800087e:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 8000882:	f2c0 027a 	movt	r2, #122	; 0x7a
 8000886:	601a      	str	r2, [r3, #0]
      break;
 8000888:	e05f      	b.n	800094a <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800088a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800088e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000892:	685b      	ldr	r3, [r3, #4]
 8000894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000898:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800089c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800089e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80008ac:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d014      	beq.n	80008de <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80008b4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80008b8:	f2c0 037a 	movt	r3, #122	; 0x7a
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	fbb3 f2f2 	udiv	r2, r3, r2
 80008c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008ca:	6859      	ldr	r1, [r3, #4]
 80008cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80008d0:	400b      	ands	r3, r1
 80008d2:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80008d6:	fb03 f302 	mul.w	r3, r3, r2
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	e013      	b.n	8000906 <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008de:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80008e2:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	fbb3 f2f2 	udiv	r2, r3, r2
 80008ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80008f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80008f4:	6859      	ldr	r1, [r3, #4]
 80008f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80008fa:	400b      	ands	r3, r1
 80008fc:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000900:	fb03 f302 	mul.w	r3, r3, r2
 8000904:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000906:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800090a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000914:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8000918:	f103 0301 	add.w	r3, r3, #1
 800091c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000920:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000922:	697a      	ldr	r2, [r7, #20]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	fbb2 f2f3 	udiv	r2, r2, r3
 800092a:	f240 0304 	movw	r3, #4
 800092e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000932:	601a      	str	r2, [r3, #0]
      break;
 8000934:	e009      	b.n	800094a <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 8000936:	f240 0304 	movw	r3, #4
 800093a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800093e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000942:	f2c0 02f4 	movt	r2, #244	; 0xf4
 8000946:	601a      	str	r2, [r3, #0]
      break;
 8000948:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800094a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800094e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000958:	ea4f 1213 	mov.w	r2, r3, lsr #4
 800095c:	f240 0308 	movw	r3, #8
 8000960:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000964:	5c9b      	ldrb	r3, [r3, r2]
 8000966:	b2db      	uxtb	r3, r3
 8000968:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800096a:	f240 0304 	movw	r3, #4
 800096e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	fa22 f203 	lsr.w	r2, r2, r3
 800097a:	f240 0304 	movw	r3, #4
 800097e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	f107 071c 	add.w	r7, r7, #28
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop

08000990 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000996:	f04f 0300 	mov.w	r3, #0
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	f04f 0300 	mov.w	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80009a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009aa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80009ae:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80009b2:	6812      	ldr	r2, [r2, #0]
 80009b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80009b8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80009ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c8:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	f103 0301 	add.w	r3, r3, #1
 80009d0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d103      	bne.n	80009e0 <SetSysClock+0x50>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80009de:	d1ec      	bne.n	80009ba <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80009e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80009e4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d003      	beq.n	80009fa <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80009f2:	f04f 0301 	mov.w	r3, #1
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	e002      	b.n	8000a00 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	f040 8082 	bne.w	8000b0c <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000a08:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a0c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a10:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a14:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000a1a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a1e:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000a20:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000a24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8000a28:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000a2c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a36:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000a38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a48:	6892      	ldr	r2, [r2, #8]
 8000a4a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000a4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a50:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a54:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a58:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a5c:	6892      	ldr	r2, [r2, #8]
 8000a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a62:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000a64:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a6c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a74:	6892      	ldr	r2, [r2, #8]
 8000a76:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 8000a7a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000a7c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a80:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a84:	f245 4208 	movw	r2, #21512	; 0x5408
 8000a88:	f2c0 7240 	movt	r2, #1856	; 0x740
 8000a8c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000a8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000a92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000a96:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000a9a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000a9e:	6812      	ldr	r2, [r2, #0]
 8000aa0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000aa4:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000aa6:	bf00      	nop
 8000aa8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000aac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0f6      	beq.n	8000aa8 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8000abe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ac2:	f240 6205 	movw	r2, #1541	; 0x605
 8000ac6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ac8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000acc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ad0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000ad4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000ad8:	6892      	ldr	r2, [r2, #8]
 8000ada:	f022 0203 	bic.w	r2, r2, #3
 8000ade:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000ae0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ae4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000ae8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000aec:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000af0:	6892      	ldr	r2, [r2, #8]
 8000af2:	f042 0202 	orr.w	r2, r2, #2
 8000af6:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000af8:	bf00      	nop
 8000afa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000afe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	f003 030c 	and.w	r3, r3, #12
 8000b08:	2b08      	cmp	r3, #8
 8000b0a:	d1f6      	bne.n	8000afa <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000b0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b18:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b1c:	6892      	ldr	r2, [r2, #8]
 8000b1e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000b22:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000b24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b2c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000b30:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8000b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 8000b38:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b40:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000b4e:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000b50:	bf00      	nop
 8000b52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000b56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f6      	beq.n	8000b52 <SetSysClock+0x1c2>
  {
  }
}
 8000b64:	f107 070c 	add.w	r7, r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <LCD_LOG_Init>:
* @param  None
* @retval None
*/

void LCD_LOG_Init ( void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* Deinit LCD cache */
  LCD_LOG_DeInit();
 8000b74:	f000 f806 	bl	8000b84 <LCD_LOG_DeInit>
  /* Clear the LCD */
  LCD_Clear(Black);  
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	f001 fa84 	bl	8002088 <LCD_Clear>
}
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop

08000b84 <LCD_LOG_DeInit>:
* @brief DeInitializes the LCD Log module. 
* @param  None
* @retval None
*/
void LCD_LOG_DeInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  LCD_LineColor = LCD_LOG_DEFAULT_COLOR;
 8000b88:	f240 236c 	movw	r3, #620	; 0x26c
 8000b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b94:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_xptr = 0;
 8000b96:	f240 038e 	movw	r3, #142	; 0x8e
 8000b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_top = 0;
 8000ba4:	f240 0394 	movw	r3, #148	; 0x94
 8000ba8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bac:	f04f 0200 	mov.w	r2, #0
 8000bb0:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom = 0;
 8000bb2:	f240 038c 	movw	r3, #140	; 0x8c
 8000bb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_top_bak = 0;
 8000bc0:	f240 038a 	movw	r3, #138	; 0x8a
 8000bc4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bc8:	f04f 0200 	mov.w	r2, #0
 8000bcc:	801a      	strh	r2, [r3, #0]
  LCD_CacheBuffer_yptr_bottom_bak = 0;
 8000bce:	f240 0388 	movw	r3, #136	; 0x88
 8000bd2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bd6:	f04f 0200 	mov.w	r2, #0
 8000bda:	801a      	strh	r2, [r3, #0]
  
  LCD_CacheBuffer_yptr_invert= ENABLE;
 8000bdc:	f240 0390 	movw	r3, #144	; 0x90
 8000be0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000be4:	f04f 0201 	mov.w	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
  LCD_ScrollActive = DISABLE;
 8000bea:	f240 0396 	movw	r3, #150	; 0x96
 8000bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000bf2:	f04f 0200 	mov.w	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
  LCD_Lock = DISABLE;
 8000bf8:	f240 0391 	movw	r3, #145	; 0x91
 8000bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
  LCD_Scrolled = DISABLE;
 8000c06:	f240 0392 	movw	r3, #146	; 0x92
 8000c0a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c0e:	f04f 0200 	mov.w	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
  LCD_ScrollBackStep = 0;
 8000c14:	f240 236e 	movw	r3, #622	; 0x26e
 8000c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000c1c:	f04f 0200 	mov.w	r2, #0
 8000c20:	801a      	strh	r2, [r3, #0]
}
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <LCD_LOG_SetHeader>:
* @brief  Display the application header (title) on the LCD screen 
* @param  Title :  pointer to the string to be displayed
* @retval None
*/
void LCD_LOG_SetHeader (uint8_t *Title)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	; 0x38
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  sFONT *cFont;
  uint32_t size = 0 , idx; 
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t  *ptr = Title;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  tmp[27];
  
  /* center the header */
  while (*ptr++) size ++ ;
 8000c3a:	e003      	b.n	8000c44 <LCD_LOG_SetHeader+0x1c>
 8000c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c3e:	f103 0301 	add.w	r3, r3, #1
 8000c42:	637b      	str	r3, [r7, #52]	; 0x34
 8000c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	bf0c      	ite	eq
 8000c4c:	2300      	moveq	r3, #0
 8000c4e:	2301      	movne	r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c54:	f102 0201 	add.w	r2, r2, #1
 8000c58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1ee      	bne.n	8000c3c <LCD_LOG_SetHeader+0x14>

  /* truncate extra text */
  if(size > 26)
 8000c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c60:	2b1a      	cmp	r3, #26
 8000c62:	d902      	bls.n	8000c6a <LCD_LOG_SetHeader+0x42>
  {
     size = 26;
 8000c64:	f04f 031a 	mov.w	r3, #26
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
  }
  
  for (idx = 0 ; idx < 27 ; idx ++)
 8000c6a:	f04f 0300 	mov.w	r3, #0
 8000c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8000c70:	e00a      	b.n	8000c88 <LCD_LOG_SetHeader+0x60>
  { 
    tmp[idx] = ' '; 
 8000c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c74:	f107 020c 	add.w	r2, r7, #12
 8000c78:	18d3      	adds	r3, r2, r3
 8000c7a:	f04f 0220 	mov.w	r2, #32
 8000c7e:	701a      	strb	r2, [r3, #0]
  if(size > 26)
  {
     size = 26;
  }
  
  for (idx = 0 ; idx < 27 ; idx ++)
 8000c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c82:	f103 0301 	add.w	r3, r3, #1
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	2b1a      	cmp	r3, #26
 8000c8c:	d9f1      	bls.n	8000c72 <LCD_LOG_SetHeader+0x4a>
  { 
    tmp[idx] = ' '; 
  }

  for (idx = 0 ; idx < size ; idx ++)
 8000c8e:	f04f 0300 	mov.w	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	; 0x30
 8000c94:	e013      	b.n	8000cbe <LCD_LOG_SetHeader+0x96>
  { 
    tmp[idx + (27 - size)/2] = Title[idx];
 8000c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c98:	f1c3 031b 	rsb	r3, r3, #27
 8000c9c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8000ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca2:	18d3      	adds	r3, r2, r3
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ca8:	188a      	adds	r2, r1, r2
 8000caa:	7812      	ldrb	r2, [r2, #0]
 8000cac:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000cb0:	18cb      	adds	r3, r1, r3
 8000cb2:	f803 2c2c 	strb.w	r2, [r3, #-44]
  for (idx = 0 ; idx < 27 ; idx ++)
  { 
    tmp[idx] = ' '; 
  }

  for (idx = 0 ; idx < size ; idx ++)
 8000cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb8:	f103 0301 	add.w	r3, r3, #1
 8000cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8000cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3e7      	bcc.n	8000c96 <LCD_LOG_SetHeader+0x6e>
  { 
    tmp[idx + (27 - size)/2] = Title[idx];
  }
  
  /* Clear the LCD */
  LCD_Clear(Black);
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	f001 f9dd 	bl	8002088 <LCD_Clear>
    
  /* Set the LCD Font */
  LCD_SetFont (&Font12x12);
 8000cce:	f240 0020 	movw	r0, #32
 8000cd2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000cd6:	f001 f999 	bl	800200c <LCD_SetFont>

  cFont = LCD_GetFont();  
 8000cda:	f001 f9a7 	bl	800202c <LCD_GetFont>
 8000cde:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Set the LCD Text Color */
  LCD_SetTextColor(White);
 8000ce0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ce4:	f001 f962 	bl	8001fac <LCD_SetTextColor>
  LCD_SetBackColor(Blue);
 8000ce8:	f04f 001f 	mov.w	r0, #31
 8000cec:	f001 f970 	bl	8001fd0 <LCD_SetBackColor>
  LCD_ClearLine(0);
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	f001 f9a6 	bl	8002044 <LCD_ClearLine>
  LCD_DisplayStringLine(cFont->Height, tmp);
 8000cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfa:	88db      	ldrh	r3, [r3, #6]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	f001 fade 	bl	80022c4 <LCD_DisplayStringLine>
  LCD_ClearLine(2 * cFont->Height);
 8000d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d0a:	88db      	ldrh	r3, [r3, #6]
 8000d0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d10:	b29b      	uxth	r3, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f996 	bl	8002044 <LCD_ClearLine>

  LCD_SetBackColor(Black);
 8000d18:	f04f 0000 	mov.w	r0, #0
 8000d1c:	f001 f958 	bl	8001fd0 <LCD_SetBackColor>
  LCD_SetFont (&Font8x12);
 8000d20:	f240 0028 	movw	r0, #40	; 0x28
 8000d24:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000d28:	f001 f970 	bl	800200c <LCD_SetFont>
}
 8000d2c:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <LCD_LOG_SetFooter>:
* @brief  Display the application footer (status) on the LCD screen 
* @param  Status :  pointer to the string to be displayed
* @retval None
*/
void LCD_LOG_SetFooter(uint8_t *Status)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	; 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  sFONT *cFont;
  uint8_t  tmp[40], i;
  LCD_SetBackColor(Blue);
 8000d3c:	f04f 001f 	mov.w	r0, #31
 8000d40:	f001 f946 	bl	8001fd0 <LCD_SetBackColor>
  cFont = LCD_GetFont();
 8000d44:	f001 f972 	bl	800202c <LCD_GetFont>
 8000d48:	6338      	str	r0, [r7, #48]	; 0x30
  
  for (i= 0; i< (320/cFont->Width)-1 ; i++)
 8000d4a:	f04f 0300 	mov.w	r3, #0
 8000d4e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d52:	e00e      	b.n	8000d72 <LCD_LOG_SetFooter+0x3e>
  {
    tmp[i] = ' ';
 8000d54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d5c:	18d3      	adds	r3, r2, r3
 8000d5e:	f04f 0220 	mov.w	r2, #32
 8000d62:	f803 2c30 	strb.w	r2, [r3, #-48]
  sFONT *cFont;
  uint8_t  tmp[40], i;
  LCD_SetBackColor(Blue);
  cFont = LCD_GetFont();
  
  for (i= 0; i< (320/cFont->Width)-1 ; i++)
 8000d66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d6a:	f103 0301 	add.w	r3, r3, #1
 8000d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000d72:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	889b      	ldrh	r3, [r3, #4]
 8000d7a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000d7e:	fb91 f3f3 	sdiv	r3, r1, r3
 8000d82:	f103 33ff 	add.w	r3, r3, #4294967295
 8000d86:	429a      	cmp	r2, r3
 8000d88:	dbe4      	blt.n	8000d54 <LCD_LOG_SetFooter+0x20>
  {
    tmp[i] = ' ';
  }
  
  tmp[(320/cFont->Width)-1] = 0;
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	889b      	ldrh	r3, [r3, #4]
 8000d8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000d92:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d96:	f103 33ff 	add.w	r3, r3, #4294967295
 8000d9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d9e:	18d3      	adds	r3, r2, r3
 8000da0:	f04f 0200 	mov.w	r2, #0
 8000da4:	f803 2c30 	strb.w	r2, [r3, #-48]
  LCD_DisplayStringLine(LCD_PIXEL_HEIGHT - cFont->Height, tmp);
 8000da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000daa:	88db      	ldrh	r3, [r3, #6]
 8000dac:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f107 0308 	add.w	r3, r7, #8
 8000db8:	4619      	mov	r1, r3
 8000dba:	f001 fa83 	bl	80022c4 <LCD_DisplayStringLine>
  LCD_DisplayStringLine(LCD_PIXEL_HEIGHT - cFont->Height, Status);
 8000dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc0:	88db      	ldrh	r3, [r3, #6]
 8000dc2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f001 fa7a 	bl	80022c4 <LCD_DisplayStringLine>
  LCD_SetBackColor(Black);  
 8000dd0:	f04f 0000 	mov.w	r0, #0
 8000dd4:	f001 f8fc 	bl	8001fd0 <LCD_SetBackColor>
}
 8000dd8:	f107 0738 	add.w	r7, r7, #56	; 0x38
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <LCD_LOG_ClearTextZone>:
* @brief  Clear the Text Zone 
* @param  None 
* @retval None
*/
void LCD_LOG_ClearTextZone(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
  uint8_t i=0;
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	71fb      	strb	r3, [r7, #7]
  sFONT *cFont = LCD_GetFont();
 8000dec:	f001 f91e 	bl	800202c <LCD_GetFont>
 8000df0:	6038      	str	r0, [r7, #0]
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 8000df2:	f04f 0300 	mov.w	r3, #0
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e00f      	b.n	8000e1a <LCD_LOG_ClearTextZone+0x3a>
  {
    LCD_ClearLine((i + YWINDOW_MIN) * cFont->Height);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f103 0303 	add.w	r3, r3, #3
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	88d2      	ldrh	r2, [r2, #6]
 8000e06:	fb02 f303 	mul.w	r3, r2, r3
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f001 f919 	bl	8002044 <LCD_ClearLine>
void LCD_LOG_ClearTextZone(void)
{
  uint8_t i=0;
  sFONT *cFont = LCD_GetFont();
  
  for (i= 0 ; i < YWINDOW_SIZE; i++)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f103 0301 	add.w	r3, r3, #1
 8000e18:	71fb      	strb	r3, [r7, #7]
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d9ec      	bls.n	8000dfa <LCD_LOG_ClearTextZone+0x1a>
  {
    LCD_ClearLine((i + YWINDOW_MIN) * cFont->Height);
  }
  
  LCD_LOG_DeInit();
 8000e20:	f7ff feb0 	bl	8000b84 <LCD_LOG_DeInit>
}
 8000e24:	f107 0708 	add.w	r7, r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <__io_putchar>:
* @param  c: character to be displayed
* @param  f: output file pointer
* @retval None
*/
PUTCHAR_PROTOTYPE
{
 8000e2c:	b5b0      	push	{r4, r5, r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  
  sFONT *cFont = LCD_GetFont();
 8000e34:	f001 f8fa 	bl	800202c <LCD_GetFont>
 8000e38:	60b8      	str	r0, [r7, #8]
  uint32_t idx;
  
  if(LCD_Lock == DISABLE)
 8000e3a:	f240 0391 	movw	r3, #145	; 0x91
 8000e3e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f040 8143 	bne.w	80010d0 <__io_putchar+0x2a4>
  {
    if((LCD_ScrollActive == ENABLE)||(LCD_ScrollActive == ENABLE))
 8000e4a:	f240 0396 	movw	r3, #150	; 0x96
 8000e4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d006      	beq.n	8000e66 <__io_putchar+0x3a>
 8000e58:	f240 0396 	movw	r3, #150	; 0x96
 8000e5c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d128      	bne.n	8000eb8 <__io_putchar+0x8c>
    {
      LCD_CacheBuffer_yptr_bottom = LCD_CacheBuffer_yptr_bottom_bak;
 8000e66:	f240 0388 	movw	r3, #136	; 0x88
 8000e6a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e6e:	881a      	ldrh	r2, [r3, #0]
 8000e70:	f240 038c 	movw	r3, #140	; 0x8c
 8000e74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e78:	801a      	strh	r2, [r3, #0]
      LCD_CacheBuffer_yptr_top    = LCD_CacheBuffer_yptr_top_bak;
 8000e7a:	f240 038a 	movw	r3, #138	; 0x8a
 8000e7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e82:	881a      	ldrh	r2, [r3, #0]
 8000e84:	f240 0394 	movw	r3, #148	; 0x94
 8000e88:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e8c:	801a      	strh	r2, [r3, #0]
      LCD_ScrollActive = DISABLE;
 8000e8e:	f240 0396 	movw	r3, #150	; 0x96
 8000e92:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000e96:	f04f 0200 	mov.w	r2, #0
 8000e9a:	701a      	strb	r2, [r3, #0]
      LCD_Scrolled = DISABLE;
 8000e9c:	f240 0392 	movw	r3, #146	; 0x92
 8000ea0:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
      LCD_ScrollBackStep = 0;
 8000eaa:	f240 236e 	movw	r3, #622	; 0x26e
 8000eae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eb2:	f04f 0200 	mov.w	r2, #0
 8000eb6:	801a      	strh	r2, [r3, #0]
      
    }
    
    if(( LCD_CacheBuffer_xptr < LCD_PIXEL_WIDTH /cFont->Width ) &&  ( ch != '\n'))
 8000eb8:	f240 038e 	movw	r3, #142	; 0x8e
 8000ebc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000ecc:	fb91 f3f3 	sdiv	r3, r1, r3
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	da24      	bge.n	8000f1e <__io_putchar+0xf2>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b0a      	cmp	r3, #10
 8000ed8:	d021      	beq.n	8000f1e <__io_putchar+0xf2>
    {
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 8000eda:	f240 038c 	movw	r3, #140	; 0x8c
 8000ede:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461c      	mov	r4, r3
 8000ee6:	f240 038e 	movw	r3, #142	; 0x8e
 8000eea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4610      	mov	r0, r2
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	b2d9      	uxtb	r1, r3
 8000ef6:	f240 0398 	movw	r3, #152	; 0x98
 8000efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000efe:	f04f 0534 	mov.w	r5, #52	; 0x34
 8000f02:	fb05 f404 	mul.w	r4, r5, r4
 8000f06:	1820      	adds	r0, r4, r0
 8000f08:	181b      	adds	r3, r3, r0
 8000f0a:	7019      	strb	r1, [r3, #0]
 8000f0c:	f102 0301 	add.w	r3, r2, #1
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f240 038e 	movw	r3, #142	; 0x8e
 8000f16:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f1a:	801a      	strh	r2, [r3, #0]
 8000f1c:	e0d8      	b.n	80010d0 <__io_putchar+0x2a4>
    }   
    else 
    {
      if(LCD_CacheBuffer_yptr_top >= LCD_CacheBuffer_yptr_bottom)
 8000f1e:	f240 0394 	movw	r3, #148	; 0x94
 8000f22:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f26:	881a      	ldrh	r2, [r3, #0]
 8000f28:	f240 038c 	movw	r3, #140	; 0x8c
 8000f2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d329      	bcc.n	8000f8a <__io_putchar+0x15e>
      {
        
        if(LCD_CacheBuffer_yptr_invert == DISABLE)
 8000f36:	f240 0390 	movw	r3, #144	; 0x90
 8000f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d11b      	bne.n	8000f7c <__io_putchar+0x150>
        {
          LCD_CacheBuffer_yptr_top++;
 8000f44:	f240 0394 	movw	r3, #148	; 0x94
 8000f48:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	f103 0301 	add.w	r3, r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f240 0394 	movw	r3, #148	; 0x94
 8000f58:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f5c:	801a      	strh	r2, [r3, #0]
          
          if(LCD_CacheBuffer_yptr_top == LCD_CACHE_DEPTH)
 8000f5e:	f240 0394 	movw	r3, #148	; 0x94
 8000f62:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f66:	881b      	ldrh	r3, [r3, #0]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d10e      	bne.n	8000f8a <__io_putchar+0x15e>
          {
            LCD_CacheBuffer_yptr_top = 0;  
 8000f6c:	f240 0394 	movw	r3, #148	; 0x94
 8000f70:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f74:	f04f 0200 	mov.w	r2, #0
 8000f78:	801a      	strh	r2, [r3, #0]
 8000f7a:	e006      	b.n	8000f8a <__io_putchar+0x15e>
          }
        }
        else
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
 8000f7c:	f240 0390 	movw	r3, #144	; 0x90
 8000f80:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < LCD_PIXEL_WIDTH /cFont->Width; idx++)
 8000f8a:	f240 038e 	movw	r3, #142	; 0x8e
 8000f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	60fb      	str	r3, [r7, #12]
 8000f96:	e024      	b.n	8000fe2 <__io_putchar+0x1b6>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
 8000f98:	f240 038c 	movw	r3, #140	; 0x8c
 8000f9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f240 038e 	movw	r3, #142	; 0x8e
 8000fa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fac:	881a      	ldrh	r2, [r3, #0]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	f240 0398 	movw	r3, #152	; 0x98
 8000fb4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fb8:	f04f 0434 	mov.w	r4, #52	; 0x34
 8000fbc:	fb04 f000 	mul.w	r0, r4, r0
 8000fc0:	1841      	adds	r1, r0, r1
 8000fc2:	185b      	adds	r3, r3, r1
 8000fc4:	f04f 0120 	mov.w	r1, #32
 8000fc8:	7019      	strb	r1, [r3, #0]
 8000fca:	f102 0301 	add.w	r3, r2, #1
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	f240 038e 	movw	r3, #142	; 0x8e
 8000fd4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000fd8:	801a      	strh	r2, [r3, #0]
        {
          LCD_CacheBuffer_yptr_invert= DISABLE;
        }
      }
      
      for(idx = LCD_CacheBuffer_xptr ; idx < LCD_PIXEL_WIDTH /cFont->Width; idx++)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f103 0301 	add.w	r3, r3, #1
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	889b      	ldrh	r3, [r3, #4]
 8000fe6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000fea:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fee:	461a      	mov	r2, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d8d0      	bhi.n	8000f98 <__io_putchar+0x16c>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = ' ';
      }   
      LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].color = LCD_LineColor;  
 8000ff6:	f240 038c 	movw	r3, #140	; 0x8c
 8000ffa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f240 236c 	movw	r3, #620	; 0x26c
 8001006:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	f240 0398 	movw	r3, #152	; 0x98
 8001010:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001014:	f04f 0034 	mov.w	r0, #52	; 0x34
 8001018:	fb00 f101 	mul.w	r1, r0, r1
 800101c:	185b      	adds	r3, r3, r1
 800101e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001022:	805a      	strh	r2, [r3, #2]
      
      LCD_CacheBuffer_xptr = 0;
 8001024:	f240 038e 	movw	r3, #142	; 0x8e
 8001028:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	801a      	strh	r2, [r3, #0]
      
      LCD_LOG_UpdateDisplay (); 
 8001032:	f000 f853 	bl	80010dc <LCD_LOG_UpdateDisplay>
      
      LCD_CacheBuffer_yptr_bottom ++; 
 8001036:	f240 038c 	movw	r3, #140	; 0x8c
 800103a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	f103 0301 	add.w	r3, r3, #1
 8001044:	b29a      	uxth	r2, r3
 8001046:	f240 038c 	movw	r3, #140	; 0x8c
 800104a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800104e:	801a      	strh	r2, [r3, #0]
      
      if (LCD_CacheBuffer_yptr_bottom == LCD_CACHE_DEPTH) 
 8001050:	f240 038c 	movw	r3, #140	; 0x8c
 8001054:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	2b09      	cmp	r3, #9
 800105c:	d114      	bne.n	8001088 <__io_putchar+0x25c>
      {
        LCD_CacheBuffer_yptr_bottom = 0;
 800105e:	f240 038c 	movw	r3, #140	; 0x8c
 8001062:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_top = 1;    
 800106c:	f240 0394 	movw	r3, #148	; 0x94
 8001070:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001074:	f04f 0201 	mov.w	r2, #1
 8001078:	801a      	strh	r2, [r3, #0]
        LCD_CacheBuffer_yptr_invert = ENABLE;
 800107a:	f240 0390 	movw	r3, #144	; 0x90
 800107e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001082:	f04f 0201 	mov.w	r2, #1
 8001086:	701a      	strb	r2, [r3, #0]
      }
      
      if( ch != '\n')
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b0a      	cmp	r3, #10
 800108c:	d020      	beq.n	80010d0 <__io_putchar+0x2a4>
      {
        LCD_CacheBuffer[LCD_CacheBuffer_yptr_bottom].line[LCD_CacheBuffer_xptr++] = (uint16_t)ch;
 800108e:	f240 038c 	movw	r3, #140	; 0x8c
 8001092:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001096:	881b      	ldrh	r3, [r3, #0]
 8001098:	461c      	mov	r4, r3
 800109a:	f240 038e 	movw	r3, #142	; 0x8e
 800109e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010a2:	881a      	ldrh	r2, [r3, #0]
 80010a4:	4610      	mov	r0, r2
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	b2d9      	uxtb	r1, r3
 80010aa:	f240 0398 	movw	r3, #152	; 0x98
 80010ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010b2:	f04f 0534 	mov.w	r5, #52	; 0x34
 80010b6:	fb05 f404 	mul.w	r4, r5, r4
 80010ba:	1820      	adds	r0, r4, r0
 80010bc:	181b      	adds	r3, r3, r0
 80010be:	7019      	strb	r1, [r3, #0]
 80010c0:	f102 0301 	add.w	r3, r2, #1
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	f240 038e 	movw	r3, #142	; 0x8e
 80010ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80010ce:	801a      	strh	r2, [r3, #0]
      }
      
    }
  }
  return ch;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	f107 0710 	add.w	r7, r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bdb0      	pop	{r4, r5, r7, pc}

080010dc <LCD_LOG_UpdateDisplay>:
* @brief  Update the text area display
* @param  None
* @retval None
*/
static void LCD_LOG_UpdateDisplay (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
  uint8_t cnt = 0 ;
 80010e2:	f04f 0300 	mov.w	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0 ;
 80010e8:	f04f 0300 	mov.w	r3, #0
 80010ec:	81bb      	strh	r3, [r7, #12]
  uint16_t ptr = 0, index = 0;
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	817b      	strh	r3, [r7, #10]
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	813b      	strh	r3, [r7, #8]
  
  sFONT *cFont = LCD_GetFont();
 80010fa:	f000 ff97 	bl	800202c <LCD_GetFont>
 80010fe:	6078      	str	r0, [r7, #4]
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001100:	f240 038c 	movw	r3, #140	; 0x8c
 8001104:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	2b07      	cmp	r3, #7
 800110c:	d843      	bhi.n	8001196 <LCD_LOG_UpdateDisplay+0xba>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
 800110e:	f240 038c 	movw	r3, #140	; 0x8c
 8001112:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	f240 0394 	movw	r3, #148	; 0x94
 800111c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001120:	881b      	ldrh	r3, [r3, #0]
  uint16_t length = 0 ;
  uint16_t ptr = 0, index = 0;
  
  sFONT *cFont = LCD_GetFont();
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
 8001122:	429a      	cmp	r2, r3
 8001124:	d337      	bcc.n	8001196 <LCD_LOG_UpdateDisplay+0xba>
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
 8001126:	7bfa      	ldrb	r2, [r7, #15]
 8001128:	f240 038c 	movw	r3, #140	; 0x8c
 800112c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	18d2      	adds	r2, r2, r3
 8001134:	f240 0398 	movw	r3, #152	; 0x98
 8001138:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800113c:	f04f 0134 	mov.w	r1, #52	; 0x34
 8001140:	fb01 f202 	mul.w	r2, r1, r2
 8001144:	189b      	adds	r3, r3, r2
 8001146:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800114a:	885b      	ldrh	r3, [r3, #2]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 ff2d 	bl	8001fac <LCD_SetTextColor>
    LCD_DisplayStringLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom) * cFont->Height,
 8001152:	f240 038c 	movw	r3, #140	; 0x8c
 8001156:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	f103 0303 	add.w	r3, r3, #3
 8001160:	b29b      	uxth	r3, r3
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	88d2      	ldrh	r2, [r2, #6]
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	b29a      	uxth	r2, r3
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
 800116c:	7bf9      	ldrb	r1, [r7, #15]
 800116e:	f240 038c 	movw	r3, #140	; 0x8c
 8001172:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	18cb      	adds	r3, r1, r3
 800117a:	f04f 0134 	mov.w	r1, #52	; 0x34
 800117e:	fb01 f103 	mul.w	r1, r1, r3
 8001182:	f240 0398 	movw	r3, #152	; 0x98
 8001186:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800118a:	18cb      	adds	r3, r1, r3
  
  if((LCD_CacheBuffer_yptr_bottom  < (YWINDOW_SIZE -1)) && 
     (LCD_CacheBuffer_yptr_bottom  >= LCD_CacheBuffer_yptr_top))
  {
    LCD_SetTextColor(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].color);
    LCD_DisplayStringLine ((YWINDOW_MIN + LCD_CacheBuffer_yptr_bottom) * cFont->Height,
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f001 f898 	bl	80022c4 <LCD_DisplayStringLine>
 8001194:	e065      	b.n	8001262 <LCD_LOG_UpdateDisplay+0x186>
                           (uint8_t *)(LCD_CacheBuffer[cnt + LCD_CacheBuffer_yptr_bottom].line));
  }
  else
  {
    
    if(LCD_CacheBuffer_yptr_bottom < LCD_CacheBuffer_yptr_top)
 8001196:	f240 038c 	movw	r3, #140	; 0x8c
 800119a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800119e:	881a      	ldrh	r2, [r3, #0]
 80011a0:	f240 0394 	movw	r3, #148	; 0x94
 80011a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d208      	bcs.n	80011c0 <LCD_LOG_UpdateDisplay+0xe4>
    {
      /* Virtual length for rolling */
      length = LCD_CACHE_DEPTH + LCD_CacheBuffer_yptr_bottom ;
 80011ae:	f240 038c 	movw	r3, #140	; 0x8c
 80011b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f103 0309 	add.w	r3, r3, #9
 80011bc:	81bb      	strh	r3, [r7, #12]
 80011be:	e005      	b.n	80011cc <LCD_LOG_UpdateDisplay+0xf0>
    }
    else
    {
      length = LCD_CacheBuffer_yptr_bottom;
 80011c0:	f240 038c 	movw	r3, #140	; 0x8c
 80011c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	81bb      	strh	r3, [r7, #12]
    }
    
    ptr = length - YWINDOW_SIZE + 1;
 80011cc:	89bb      	ldrh	r3, [r7, #12]
 80011ce:	f1a3 0308 	sub.w	r3, r3, #8
 80011d2:	817b      	strh	r3, [r7, #10]
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e03f      	b.n	800125c <LCD_LOG_UpdateDisplay+0x180>
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	897b      	ldrh	r3, [r7, #10]
 80011e0:	18d1      	adds	r1, r2, r3
 80011e2:	f648 6339 	movw	r3, #36409	; 0x8e39
 80011e6:	f6c3 03e3 	movt	r3, #14563	; 0x38e3
 80011ea:	fb83 2301 	smull	r2, r3, r3, r1
 80011ee:	ea4f 0263 	mov.w	r2, r3, asr #1
 80011f2:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80011f6:	1ad2      	subs	r2, r2, r3
 80011f8:	4613      	mov	r3, r2
 80011fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80011fe:	189b      	adds	r3, r3, r2
 8001200:	1aca      	subs	r2, r1, r3
 8001202:	4613      	mov	r3, r2
 8001204:	813b      	strh	r3, [r7, #8]
      
      LCD_SetTextColor(LCD_CacheBuffer[index].color);
 8001206:	893a      	ldrh	r2, [r7, #8]
 8001208:	f240 0398 	movw	r3, #152	; 0x98
 800120c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001210:	f04f 0134 	mov.w	r1, #52	; 0x34
 8001214:	fb01 f202 	mul.w	r2, r1, r2
 8001218:	189b      	adds	r3, r3, r2
 800121a:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800121e:	885b      	ldrh	r3, [r3, #2]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fec3 	bl	8001fac <LCD_SetTextColor>
      LCD_DisplayStringLine ((cnt + YWINDOW_MIN) * cFont->Height, 
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	f103 0303 	add.w	r3, r3, #3
 800122c:	b29b      	uxth	r3, r3
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	88d2      	ldrh	r2, [r2, #6]
 8001232:	fb02 f303 	mul.w	r3, r2, r3
 8001236:	b29a      	uxth	r2, r3
                             (uint8_t *)(LCD_CacheBuffer[index].line));
 8001238:	893b      	ldrh	r3, [r7, #8]
 800123a:	f04f 0134 	mov.w	r1, #52	; 0x34
 800123e:	fb01 f103 	mul.w	r1, r1, r3
 8001242:	f240 0398 	movw	r3, #152	; 0x98
 8001246:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800124a:	18cb      	adds	r3, r1, r3
    {
      
      index = (cnt + ptr )% LCD_CACHE_DEPTH ;
      
      LCD_SetTextColor(LCD_CacheBuffer[index].color);
      LCD_DisplayStringLine ((cnt + YWINDOW_MIN) * cFont->Height, 
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f001 f838 	bl	80022c4 <LCD_DisplayStringLine>
      length = LCD_CacheBuffer_yptr_bottom;
    }
    
    ptr = length - YWINDOW_SIZE + 1;
    
    for  (cnt = 0 ; cnt < YWINDOW_SIZE ; cnt ++)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	f103 0301 	add.w	r3, r3, #1
 800125a:	73fb      	strb	r3, [r7, #15]
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	2b08      	cmp	r3, #8
 8001260:	d9bc      	bls.n	80011dc <LCD_LOG_UpdateDisplay+0x100>
                             (uint8_t *)(LCD_CacheBuffer[index].line));
      
    }
  }
  
}
 8001262:	f107 0710 	add.w	r7, r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop

0800126c <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	f644 03ec 	movw	r3, #18668	; 0x48ec
 800127c:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001284:	4618      	mov	r0, r3
 8001286:	f04f 0101 	mov.w	r1, #1
 800128a:	f00b f81d 	bl	800c2c8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	f644 03e4 	movw	r3, #18660	; 0x48e4
 8001294:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001298:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800129c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800129e:	f04f 0301 	mov.w	r3, #1
 80012a2:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80012aa:	f04f 0301 	mov.w	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80012b0:	f04f 0302 	mov.w	r3, #2
 80012b4:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	f240 0338 	movw	r3, #56	; 0x38
 80012bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f107 0308 	add.w	r3, r7, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	f008 fdb6 	bl	8009e3c <GPIO_Init>
}
 80012d0:	f107 0710 	add.w	r7, r7, #16
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 80012e2:	79fa      	ldrb	r2, [r7, #7]
 80012e4:	f240 0338 	movw	r3, #56	; 0x38
 80012e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80012ec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80012f0:	79f9      	ldrb	r1, [r7, #7]
 80012f2:	f644 03e4 	movw	r3, #18660	; 0x48e4
 80012f6:	f6c0 0301 	movt	r3, #2049	; 0x801
 80012fa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80012fe:	8313      	strh	r3, [r2, #24]
}
 8001300:	f107 070c 	add.w	r7, r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop

0800130c <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 8001316:	79fa      	ldrb	r2, [r7, #7]
 8001318:	f240 0338 	movw	r3, #56	; 0x38
 800131c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001320:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001324:	79f9      	ldrb	r1, [r7, #7]
 8001326:	f644 03e4 	movw	r3, #18660	; 0x48e4
 800132a:	f6c0 0301 	movt	r3, #2049	; 0x801
 800132e:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001332:	8353      	strh	r3, [r2, #26]
}
 8001334:	f107 070c 	add.w	r7, r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop

08001340 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	f240 0338 	movw	r3, #56	; 0x38
 8001350:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001354:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001358:	79f9      	ldrb	r1, [r7, #7]
 800135a:	f240 0338 	movw	r3, #56	; 0x38
 800135e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001362:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001366:	6959      	ldr	r1, [r3, #20]
 8001368:	79f8      	ldrb	r0, [r7, #7]
 800136a:	f644 03e4 	movw	r3, #18660	; 0x48e4
 800136e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001372:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8001376:	404b      	eors	r3, r1
 8001378:	6153      	str	r3, [r2, #20]
}
 800137a:	f107 070c 	add.w	r7, r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	71fa      	strb	r2, [r7, #7]
 8001390:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	f644 1300 	movw	r3, #18688	; 0x4900
 8001398:	f6c0 0301 	movt	r3, #2049	; 0x801
 800139c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f04f 0101 	mov.w	r1, #1
 80013a6:	f00a ff8f 	bl	800c2c8 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80013aa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013ae:	f04f 0101 	mov.w	r1, #1
 80013b2:	f00b f831 	bl	800c418 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80013b6:	f04f 0300 	mov.w	r3, #0
 80013ba:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	f644 03fc 	movw	r3, #18684	; 0x48fc
 80013c8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80013cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	f240 0348 	movw	r3, #72	; 0x48
 80013d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80013dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	4619      	mov	r1, r3
 80013e8:	f008 fd28 	bl	8009e3c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d13a      	bne.n	8001468 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 80013f2:	79fa      	ldrb	r2, [r7, #7]
 80013f4:	f644 1308 	movw	r3, #18696	; 0x4908
 80013f8:	f6c0 0301 	movt	r3, #2049	; 0x801
 80013fc:	5c9a      	ldrb	r2, [r3, r2]
 80013fe:	79f9      	ldrb	r1, [r7, #7]
 8001400:	f644 130c 	movw	r3, #18700	; 0x490c
 8001404:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001408:	5c5b      	ldrb	r3, [r3, r1]
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	f00e f893 	bl	800f538 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 8001412:	79fa      	ldrb	r2, [r7, #7]
 8001414:	f644 1304 	movw	r3, #18692	; 0x4904
 8001418:	f6c0 0301 	movt	r3, #2049	; 0x801
 800141c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001420:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8001428:	f04f 0308 	mov.w	r3, #8
 800142c:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 800142e:	f04f 0301 	mov.w	r3, #1
 8001432:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4618      	mov	r0, r3
 800143a:	f007 f82f 	bl	800849c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 800143e:	79fa      	ldrb	r2, [r7, #7]
 8001440:	f644 1310 	movw	r3, #18704	; 0x4910
 8001444:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001448:	5c9b      	ldrb	r3, [r3, r2]
 800144a:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 800144c:	f04f 030f 	mov.w	r3, #15
 8001450:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 8001452:	f04f 030f 	mov.w	r3, #15
 8001456:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001458:	f04f 0301 	mov.w	r3, #1
 800145c:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4618      	mov	r0, r3
 8001464:	f001 ff62 	bl	800332c <NVIC_Init>
  }
}
 8001468:	f107 0720 	add.w	r7, r7, #32
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800147a:	79fa      	ldrb	r2, [r7, #7]
 800147c:	f240 0348 	movw	r3, #72	; 0x48
 8001480:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001484:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001488:	79f9      	ldrb	r1, [r7, #7]
 800148a:	f644 03fc 	movw	r3, #18684	; 0x48fc
 800148e:	f6c0 0301 	movt	r3, #2049	; 0x801
 8001492:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f008 fdb1 	bl	800a000 <GPIO_ReadInputDataBit>
 800149e:	4603      	mov	r3, r0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	f107 0708 	add.w	r7, r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop

080014ac <LCD_DeInit>:
  * @brief  LCD Default FSMC Init
  * @param  None
  * @retval None
  */
void LCD_DeInit(void)
{ 
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /*!< LCD Display Off */
  LCD_DisplayOff();
 80014b2:	f000 fd9f 	bl	8001ff4 <LCD_DisplayOff>

  /* BANK 3 (of NOR/SRAM Bank 1~4) is disabled */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM3, ENABLE);
 80014b6:	f04f 0004 	mov.w	r0, #4
 80014ba:	f04f 0101 	mov.w	r1, #1
 80014be:	f007 ff83 	bl	80093c8 <FSMC_NORSRAMCmd>
  
  /*!< LCD_SPI DeInit */
  FSMC_NORSRAMDeInit(FSMC_Bank1_NORSRAM3);
 80014c2:	f04f 0004 	mov.w	r0, #4
 80014c6:	f007 fe21 	bl	800910c <FSMC_NORSRAMDeInit>
   
/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 80014ca:	f24c 7303 	movw	r3, #50947	; 0xc703
 80014ce:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80014dc:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80014e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80014e4:	463b      	mov	r3, r7
 80014e6:	4619      	mov	r1, r3
 80014e8:	f008 fca8 	bl	8009e3c <GPIO_Init>
 
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_MCO);
 80014ec:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80014f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80014f4:	f04f 0100 	mov.w	r1, #0
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	f008 fe2c 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_MCO);
 8001500:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001504:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001508:	f04f 0101 	mov.w	r1, #1
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f008 fe22 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_MCO);
 8001514:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001518:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800151c:	f04f 0108 	mov.w	r1, #8
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f008 fe18 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_MCO);
 8001528:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800152c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001530:	f04f 0109 	mov.w	r1, #9
 8001534:	f04f 0200 	mov.w	r2, #0
 8001538:	f008 fe0e 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_MCO);
 800153c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001540:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001544:	f04f 010a 	mov.w	r1, #10
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	f008 fe04 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_MCO);
 8001550:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001554:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001558:	f04f 010e 	mov.w	r1, #14
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f008 fdfa 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_MCO);
 8001564:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001568:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800156c:	f04f 010f 	mov.w	r1, #15
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f008 fdf0 	bl	800a158 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 8001578:	f64f 7380 	movw	r3, #65408	; 0xff80
 800157c:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;

  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800157e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001582:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	f008 fc57 	bl	8009e3c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_MCO);
 800158e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001592:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001596:	f04f 0107 	mov.w	r1, #7
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f008 fddb 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_MCO);
 80015a2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015a6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015aa:	f04f 0108 	mov.w	r1, #8
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f008 fdd1 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_MCO);
 80015b6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015ba:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015be:	f04f 0109 	mov.w	r1, #9
 80015c2:	f04f 0200 	mov.w	r2, #0
 80015c6:	f008 fdc7 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_MCO);
 80015ca:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015ce:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015d2:	f04f 010a 	mov.w	r1, #10
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f008 fdbd 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_MCO);
 80015de:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015e2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015e6:	f04f 010b 	mov.w	r1, #11
 80015ea:	f04f 0200 	mov.w	r2, #0
 80015ee:	f008 fdb3 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_MCO);
 80015f2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80015f6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80015fa:	f04f 010c 	mov.w	r1, #12
 80015fe:	f04f 0200 	mov.w	r2, #0
 8001602:	f008 fda9 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_MCO);
 8001606:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800160a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800160e:	f04f 010d 	mov.w	r1, #13
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	f008 fd9f 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_MCO);
 800161a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800161e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001622:	f04f 010e 	mov.w	r1, #14
 8001626:	f04f 0200 	mov.w	r2, #0
 800162a:	f008 fd95 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_MCO);
 800162e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001632:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001636:	f04f 010f 	mov.w	r1, #15
 800163a:	f04f 0200 	mov.w	r2, #0
 800163e:	f008 fd8b 	bl	800a158 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 8001642:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001646:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_12 | GPIO_Pin_13 | 
                                GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001648:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800164c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001650:	463b      	mov	r3, r7
 8001652:	4619      	mov	r1, r3
 8001654:	f008 fbf2 	bl	8009e3c <GPIO_Init>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource0, GPIO_AF_MCO);
 8001658:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 800165c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f008 fd76 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource1, GPIO_AF_MCO);
 800166c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001670:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001674:	f04f 0101 	mov.w	r1, #1
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	f008 fd6c 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource2, GPIO_AF_MCO);
 8001680:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001684:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001688:	f04f 0102 	mov.w	r1, #2
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f008 fd62 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource3, GPIO_AF_MCO);
 8001694:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001698:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800169c:	f04f 0103 	mov.w	r1, #3
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f008 fd58 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource4, GPIO_AF_MCO);
 80016a8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80016ac:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80016b0:	f04f 0104 	mov.w	r1, #4
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f008 fd4e 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource5, GPIO_AF_MCO);
 80016bc:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80016c0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80016c4:	f04f 0105 	mov.w	r1, #5
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	f008 fd44 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource12, GPIO_AF_MCO);
 80016d0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80016d4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80016d8:	f04f 010c 	mov.w	r1, #12
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f008 fd3a 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource13, GPIO_AF_MCO);
 80016e4:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80016e8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80016ec:	f04f 010d 	mov.w	r1, #13
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	f008 fd30 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource14, GPIO_AF_MCO);
 80016f8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80016fc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001700:	f04f 010e 	mov.w	r1, #14
 8001704:	f04f 0200 	mov.w	r2, #0
 8001708:	f008 fd26 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOF,GPIO_PinSource15, GPIO_AF_MCO);
 800170c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001710:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001714:	f04f 010f 	mov.w	r1, #15
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f008 fd1c 	bl	800a158 <GPIO_PinAFConfig>


  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3 | 
 8001720:	f04f 033f 	mov.w	r3, #63	; 0x3f
 8001724:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_4 | GPIO_Pin_5;

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001726:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800172a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800172e:	463b      	mov	r3, r7
 8001730:	4619      	mov	r1, r3
 8001732:	f008 fb83 	bl	8009e3c <GPIO_Init>

  GPIO_PinAFConfig(GPIOG,GPIO_PinSource0, GPIO_AF_MCO);
 8001736:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800173a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	f04f 0200 	mov.w	r2, #0
 8001746:	f008 fd07 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource1, GPIO_AF_MCO);
 800174a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800174e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001752:	f04f 0101 	mov.w	r1, #1
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f008 fcfd 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource2, GPIO_AF_MCO);
 800175e:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001762:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001766:	f04f 0102 	mov.w	r1, #2
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	f008 fcf3 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource3, GPIO_AF_MCO);
 8001772:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001776:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800177a:	f04f 0103 	mov.w	r1, #3
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f008 fce9 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource4, GPIO_AF_MCO);
 8001786:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800178a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800178e:	f04f 0104 	mov.w	r1, #4
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f008 fcdf 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOG,GPIO_PinSource5, GPIO_AF_MCO);
 800179a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800179e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017a2:	f04f 0105 	mov.w	r1, #5
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f008 fcd5 	bl	800a158 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13; 
 80017ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80017b2:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80017b4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80017b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017bc:	463b      	mov	r3, r7
 80017be:	4619      	mov	r1, r3
 80017c0:	f008 fb3c 	bl	8009e3c <GPIO_Init>

  GPIO_PinAFConfig(GPIOD,GPIO_PinSource11, GPIO_AF_MCO);
 80017c4:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80017c8:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017cc:	f04f 010b 	mov.w	r1, #11
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f008 fcc0 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource12, GPIO_AF_MCO);
 80017d8:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80017dc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017e0:	f04f 010c 	mov.w	r1, #12
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f008 fcb6 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource13, GPIO_AF_MCO);
 80017ec:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80017f0:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80017f4:	f04f 010d 	mov.w	r1, #13
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f008 fcac 	bl	800a158 <GPIO_PinAFConfig>

  /* NOE and NWE configuration */  
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 |GPIO_Pin_5;
 8001800:	f04f 0330 	mov.w	r3, #48	; 0x30
 8001804:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001806:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800180a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800180e:	463b      	mov	r3, r7
 8001810:	4619      	mov	r1, r3
 8001812:	f008 fb13 	bl	8009e3c <GPIO_Init>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource4, GPIO_AF_MCO);
 8001816:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800181a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800181e:	f04f 0104 	mov.w	r1, #4
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f008 fc97 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD,GPIO_PinSource5, GPIO_AF_MCO);
 800182a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800182e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001832:	f04f 0105 	mov.w	r1, #5
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	f008 fc8d 	bl	800a158 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10; 
 800183e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001842:	603b      	str	r3, [r7, #0]

  GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001844:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001848:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800184c:	463b      	mov	r3, r7
 800184e:	4619      	mov	r1, r3
 8001850:	f008 faf4 	bl	8009e3c <GPIO_Init>
  GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_MCO);
 8001854:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001858:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800185c:	f04f 010c 	mov.w	r1, #12
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	f008 fc78 	bl	800a158 <GPIO_PinAFConfig>

  /* NBL0, NBL1 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; 
 8001868:	f04f 0303 	mov.w	r3, #3
 800186c:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure); 
 800186e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001872:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001876:	463b      	mov	r3, r7
 8001878:	4619      	mov	r1, r3
 800187a:	f008 fadf 	bl	8009e3c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE,GPIO_PinSource0, GPIO_AF_MCO);
 800187e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001882:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f008 fc63 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE,GPIO_PinSource1, GPIO_AF_MCO);
 8001892:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001896:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800189a:	f04f 0101 	mov.w	r1, #1
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f008 fc59 	bl	800a158 <GPIO_PinAFConfig>
}
 80018a6:	f107 0708 	add.w	r7, r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop

080018b0 <LCD_CtrlLinesConfig>:
  * @brief  Configures LCD Control lines (FSMC Pins) in alternate function mode.
  * @param  None
  * @retval None
  */
void LCD_CtrlLinesConfig(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable GPIOB, GPIOD, GPIOE, GPIOF, GPIOG and AFIO clocks */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE |
 80018b6:	f04f 003a 	mov.w	r0, #58	; 0x3a
 80018ba:	f04f 0101 	mov.w	r1, #1
 80018be:	f00a fd03 	bl	800c2c8 <RCC_AHB1PeriphClockCmd>
                         RCC_AHB1Periph_GPIOF, ENABLE);

/*-- GPIO Configuration ------------------------------------------------------*/
  /* SRAM Data lines,  NOE and NWE configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 |
 80018c2:	f24c 7333 	movw	r3, #50995	; 0xc733
 80018c6:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15 |
                                GPIO_Pin_4 |GPIO_Pin_5;;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80018c8:	f04f 0302 	mov.w	r3, #2
 80018cc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80018ce:	f04f 0302 	mov.w	r3, #2
 80018d2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80018d4:	f04f 0300 	mov.w	r3, #0
 80018d8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80018e0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80018e4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80018e8:	463b      	mov	r3, r7
 80018ea:	4619      	mov	r1, r3
 80018ec:	f008 faa6 	bl	8009e3c <GPIO_Init>

  GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
 80018f0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80018f4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80018f8:	f04f 0100 	mov.w	r1, #0
 80018fc:	f04f 020c 	mov.w	r2, #12
 8001900:	f008 fc2a 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
 8001904:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001908:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800190c:	f04f 0101 	mov.w	r1, #1
 8001910:	f04f 020c 	mov.w	r2, #12
 8001914:	f008 fc20 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
 8001918:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800191c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001920:	f04f 0104 	mov.w	r1, #4
 8001924:	f04f 020c 	mov.w	r2, #12
 8001928:	f008 fc16 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
 800192c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001930:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001934:	f04f 0105 	mov.w	r1, #5
 8001938:	f04f 020c 	mov.w	r2, #12
 800193c:	f008 fc0c 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
 8001940:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001944:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001948:	f04f 0108 	mov.w	r1, #8
 800194c:	f04f 020c 	mov.w	r2, #12
 8001950:	f008 fc02 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
 8001954:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001958:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800195c:	f04f 0109 	mov.w	r1, #9
 8001960:	f04f 020c 	mov.w	r2, #12
 8001964:	f008 fbf8 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 8001968:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800196c:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001970:	f04f 010a 	mov.w	r1, #10
 8001974:	f04f 020c 	mov.w	r2, #12
 8001978:	f008 fbee 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
 800197c:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001980:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001984:	f04f 010e 	mov.w	r1, #14
 8001988:	f04f 020c 	mov.w	r2, #12
 800198c:	f008 fbe4 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
 8001990:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001994:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001998:	f04f 010f 	mov.w	r1, #15
 800199c:	f04f 020c 	mov.w	r2, #12
 80019a0:	f008 fbda 	bl	800a158 <GPIO_PinAFConfig>

  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
 80019a4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80019a8:	603b      	str	r3, [r7, #0]
                                GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                GPIO_Pin_15;
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80019aa:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019ae:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019b2:	463b      	mov	r3, r7
 80019b4:	4619      	mov	r1, r3
 80019b6:	f008 fa41 	bl	8009e3c <GPIO_Init>

  GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
 80019ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019be:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019c2:	f04f 0107 	mov.w	r1, #7
 80019c6:	f04f 020c 	mov.w	r2, #12
 80019ca:	f008 fbc5 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
 80019ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019d2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019d6:	f04f 0108 	mov.w	r1, #8
 80019da:	f04f 020c 	mov.w	r2, #12
 80019de:	f008 fbbb 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
 80019e2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019e6:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019ea:	f04f 0109 	mov.w	r1, #9
 80019ee:	f04f 020c 	mov.w	r2, #12
 80019f2:	f008 fbb1 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
 80019f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80019fa:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80019fe:	f04f 010a 	mov.w	r1, #10
 8001a02:	f04f 020c 	mov.w	r2, #12
 8001a06:	f008 fba7 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
 8001a0a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a0e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a12:	f04f 010b 	mov.w	r1, #11
 8001a16:	f04f 020c 	mov.w	r2, #12
 8001a1a:	f008 fb9d 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
 8001a1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a22:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a26:	f04f 010c 	mov.w	r1, #12
 8001a2a:	f04f 020c 	mov.w	r2, #12
 8001a2e:	f008 fb93 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
 8001a32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a36:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a3a:	f04f 010d 	mov.w	r1, #13
 8001a3e:	f04f 020c 	mov.w	r2, #12
 8001a42:	f008 fb89 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
 8001a46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a4a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a4e:	f04f 010e 	mov.w	r1, #14
 8001a52:	f04f 020c 	mov.w	r2, #12
 8001a56:	f008 fb7f 	bl	800a158 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
 8001a5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a5e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a62:	f04f 010f 	mov.w	r1, #15
 8001a66:	f04f 020c 	mov.w	r2, #12
 8001a6a:	f008 fb75 	bl	800a158 <GPIO_PinAFConfig>

  /* SRAM Address lines configuration LCD-DC */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8001a6e:	f04f 0308 	mov.w	r3, #8
 8001a72:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOE, &GPIO_InitStructure);  
 8001a74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a78:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f008 f9dc 	bl	8009e3c <GPIO_Init>
  GPIO_PinAFConfig(GPIOE, GPIO_PinSource3, GPIO_AF_FSMC);	   
 8001a84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a88:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001a8c:	f04f 0103 	mov.w	r1, #3
 8001a90:	f04f 020c 	mov.w	r2, #12
 8001a94:	f008 fb60 	bl	800a158 <GPIO_PinAFConfig>

  /* NE3 configuration */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
 8001a98:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001a9c:	603b      	str	r3, [r7, #0]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001a9e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001aa2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001aa6:	463b      	mov	r3, r7
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f008 f9c7 	bl	8009e3c <GPIO_Init>
  GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
 8001aae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ab2:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ab6:	f04f 010a 	mov.w	r1, #10
 8001aba:	f04f 020c 	mov.w	r2, #12
 8001abe:	f008 fb4b 	bl	800a158 <GPIO_PinAFConfig>

  /* LCD RST configuration */
  GPIO_InitStructure.GPIO_Pin = LCD_RST_PIN; 
 8001ac2:	f04f 0308 	mov.w	r3, #8
 8001ac6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001ac8:	f04f 0301 	mov.w	r3, #1
 8001acc:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(LCD_RST_PORT, &GPIO_InitStructure);
 8001ae0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001ae4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001ae8:	463b      	mov	r3, r7
 8001aea:	4619      	mov	r1, r3
 8001aec:	f008 f9a6 	bl	8009e3c <GPIO_Init>

   /* LCD pwm configuration */
  GPIO_InitStructure.GPIO_Pin = LCD_PWM_PIN; 
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001af6:	f04f 0301 	mov.w	r3, #1
 8001afa:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8001afc:	f04f 0301 	mov.w	r3, #1
 8001b00:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 8001b08:	f04f 0300 	mov.w	r3, #0
 8001b0c:	71fb      	strb	r3, [r7, #7]

  GPIO_Init(LCD_PWM_PORT, &GPIO_InitStructure);
 8001b0e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001b12:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b16:	463b      	mov	r3, r7
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f008 f98f 	bl	8009e3c <GPIO_Init>
  GPIO_SetBits(LCD_PWM_PORT, LCD_PWM_PIN);
 8001b1e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001b22:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b2a:	f008 fac1 	bl	800a0b0 <GPIO_SetBits>
}
 8001b2e:	f107 0708 	add.w	r7, r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop

08001b38 <LCD_FSMCConfig>:
  * @brief  Configures the Parallel interface (FSMC) for LCD(Parallel mode)
  * @param  None
  * @retval None
  */
void LCD_FSMCConfig(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b096      	sub	sp, #88	; 0x58
 8001b3c:	af00      	add	r7, sp, #0
  FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
  FSMC_NORSRAMTimingInitTypeDef  p;
   
  /* Enable FSMC clock */
  RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
 8001b3e:	f04f 0001 	mov.w	r0, #1
 8001b42:	f04f 0101 	mov.w	r1, #1
 8001b46:	f00a fc13 	bl	800c370 <RCC_AHB3PeriphClockCmd>
  
/*-- FSMC Configuration ------------------------------------------------------*/
/*----------------------- SRAM Bank 1 ----------------------------------------*/
  /* FSMC_Bank1_NORSRAM4 configuration */
  p.FSMC_AddressSetupTime = 1;
 8001b4a:	f04f 0301 	mov.w	r3, #1
 8001b4e:	603b      	str	r3, [r7, #0]
  p.FSMC_AddressHoldTime = 0;
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  p.FSMC_DataSetupTime = 9;
 8001b56:	f04f 0309 	mov.w	r3, #9
 8001b5a:	60bb      	str	r3, [r7, #8]
  p.FSMC_BusTurnAroundDuration = 0;
 8001b5c:	f04f 0300 	mov.w	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  p.FSMC_CLKDivision = 0;
 8001b62:	f04f 0300 	mov.w	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  p.FSMC_DataLatency = 0;
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  p.FSMC_AccessMode = FSMC_AccessMode_A;
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
        - Data Width = 16bit
        - Write Operation = Enable
        - Extended Mode = Enable
        - Asynchronous Wait = Disable */

  FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_SRAM;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
 8001b86:	f04f 0310 	mov.w	r3, #16
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
  FSMC_NORSRAMInitStructure.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 8001b92:	f04f 0300 	mov.w	r3, #0
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	637b      	str	r3, [r7, #52]	; 0x34
  FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8001baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bae:	643b      	str	r3, [r7, #64]	; 0x40
  FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
 8001bb0:	f04f 0300 	mov.w	r3, #0
 8001bb4:	647b      	str	r3, [r7, #68]	; 0x44
  FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
  FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8001bbc:	f04f 0300 	mov.w	r3, #0
 8001bc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	653b      	str	r3, [r7, #80]	; 0x50
  FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p;
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	657b      	str	r3, [r7, #84]	; 0x54

  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);   
 8001bca:	f107 031c 	add.w	r3, r7, #28
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f007 faca 	bl	8009168 <FSMC_NORSRAMInit>

  /* Enable FSMC NOR/SRAM Bank1 */
  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);
 8001bd4:	f04f 0000 	mov.w	r0, #0
 8001bd8:	f04f 0101 	mov.w	r1, #1
 8001bdc:	f007 fbf4 	bl	80093c8 <FSMC_NORSRAMCmd>
}
 8001be0:	f107 0758 	add.w	r7, r7, #88	; 0x58
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <STM32f4_Discovery_LCD_Init>:
/**
  * @brief  LCD Init.
  * @retval None
  */
void STM32f4_Discovery_LCD_Init(void)
{ 
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0

  unsigned long ulCount;
	
  /* Configure the LCD Control pins */
  LCD_CtrlLinesConfig();
 8001bee:	f7ff fe5f 	bl	80018b0 <LCD_CtrlLinesConfig>
	
  /* Configure the FSMC Parallel interface */
  LCD_FSMCConfig();
 8001bf2:	f7ff ffa1 	bl	8001b38 <LCD_FSMCConfig>
	
  _delay_(5); 
 8001bf6:	f04f 0005 	mov.w	r0, #5
 8001bfa:	f001 fb69 	bl	80032d0 <delay>
	
  /* Reset LCD */
  GPIO_ResetBits(LCD_RST_PORT, LCD_RST_PIN);	
 8001bfe:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001c02:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c06:	f04f 0108 	mov.w	r1, #8
 8001c0a:	f008 fa5f 	bl	800a0cc <GPIO_ResetBits>
  _delay_(10);	
 8001c0e:	f04f 000a 	mov.w	r0, #10
 8001c12:	f001 fb5d 	bl	80032d0 <delay>
  GPIO_SetBits(LCD_RST_PORT, LCD_RST_PIN);
 8001c16:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8001c1a:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8001c1e:	f04f 0108 	mov.w	r1, #8
 8001c22:	f008 fa45 	bl	800a0b0 <GPIO_SetBits>

  /*
  SSD2119Init(void)
  */
  /* Enter sleep mode (if we are not already there).*/
  LCD_WriteReg(SSD2119_SLEEP_MODE_1_REG, 0x0001);
 8001c26:	f04f 0010 	mov.w	r0, #16
 8001c2a:	f04f 0101 	mov.w	r1, #1
 8001c2e:	f000 f8e7 	bl	8001e00 <LCD_WriteReg>

  /* Set initial power parameters. */
  LCD_WriteReg(SSD2119_PWR_CTRL_5_REG, 0x00B2);
 8001c32:	f04f 001e 	mov.w	r0, #30
 8001c36:	f04f 01b2 	mov.w	r1, #178	; 0xb2
 8001c3a:	f000 f8e1 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_VCOM_OTP_1_REG, 0x0006);
 8001c3e:	f04f 0028 	mov.w	r0, #40	; 0x28
 8001c42:	f04f 0106 	mov.w	r1, #6
 8001c46:	f000 f8db 	bl	8001e00 <LCD_WriteReg>
  
  /* Start the oscillator.*/
  LCD_WriteReg(SSD2119_OSC_START_REG, 0x0001);
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0101 	mov.w	r1, #1
 8001c52:	f000 f8d5 	bl	8001e00 <LCD_WriteReg>

  /* Set pixel format and basic display orientation (scanning direction).*/
  LCD_WriteReg(SSD2119_OUTPUT_CTRL_REG, 0x30EF);
 8001c56:	f04f 0001 	mov.w	r0, #1
 8001c5a:	f243 01ef 	movw	r1, #12527	; 0x30ef
 8001c5e:	f000 f8cf 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_LCD_DRIVE_AC_CTRL_REG, 0x0600);
 8001c62:	f04f 0002 	mov.w	r0, #2
 8001c66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001c6a:	f000 f8c9 	bl	8001e00 <LCD_WriteReg>

  /* Exit sleep mode.*/
  LCD_WriteReg(SSD2119_SLEEP_MODE_1_REG, 0x0000);
 8001c6e:	f04f 0010 	mov.w	r0, #16
 8001c72:	f04f 0100 	mov.w	r1, #0
 8001c76:	f000 f8c3 	bl	8001e00 <LCD_WriteReg>
  _delay_(5);
 8001c7a:	f04f 0005 	mov.w	r0, #5
 8001c7e:	f001 fb27 	bl	80032d0 <delay>
	  
  /* Configure pixel color format and MCU interface parameters.*/
  LCD_WriteReg(SSD2119_ENTRY_MODE_REG, ENTRY_MODE_DEFAULT);
 8001c82:	f04f 0011 	mov.w	r0, #17
 8001c86:	f646 0130 	movw	r1, #26672	; 0x6830
 8001c8a:	f000 f8b9 	bl	8001e00 <LCD_WriteReg>

  /* Set analog parameters */
  LCD_WriteReg(SSD2119_SLEEP_MODE_2_REG, 0x0999);
 8001c8e:	f04f 0012 	mov.w	r0, #18
 8001c92:	f640 1199 	movw	r1, #2457	; 0x999
 8001c96:	f000 f8b3 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_ANALOG_SET_REG, 0x3800);
 8001c9a:	f04f 0026 	mov.w	r0, #38	; 0x26
 8001c9e:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8001ca2:	f000 f8ad 	bl	8001e00 <LCD_WriteReg>

  /* Enable the display */
  LCD_WriteReg(SSD2119_DISPLAY_CTRL_REG, 0x0033);
 8001ca6:	f04f 0007 	mov.w	r0, #7
 8001caa:	f04f 0133 	mov.w	r1, #51	; 0x33
 8001cae:	f000 f8a7 	bl	8001e00 <LCD_WriteReg>

  /* Set VCIX2 voltage to 6.1V.*/
  LCD_WriteReg(SSD2119_PWR_CTRL_2_REG, 0x0005);
 8001cb2:	f04f 000c 	mov.w	r0, #12
 8001cb6:	f04f 0105 	mov.w	r1, #5
 8001cba:	f000 f8a1 	bl	8001e00 <LCD_WriteReg>

  /* Configure gamma correction.*/
  LCD_WriteReg(SSD2119_GAMMA_CTRL_1_REG, 0x0000);
 8001cbe:	f04f 0030 	mov.w	r0, #48	; 0x30
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	f000 f89b 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_2_REG, 0x0303);
 8001cca:	f04f 0031 	mov.w	r0, #49	; 0x31
 8001cce:	f240 3103 	movw	r1, #771	; 0x303
 8001cd2:	f000 f895 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_3_REG, 0x0407);
 8001cd6:	f04f 0032 	mov.w	r0, #50	; 0x32
 8001cda:	f240 4107 	movw	r1, #1031	; 0x407
 8001cde:	f000 f88f 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_4_REG, 0x0301);
 8001ce2:	f04f 0033 	mov.w	r0, #51	; 0x33
 8001ce6:	f240 3101 	movw	r1, #769	; 0x301
 8001cea:	f000 f889 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_5_REG, 0x0301);
 8001cee:	f04f 0034 	mov.w	r0, #52	; 0x34
 8001cf2:	f240 3101 	movw	r1, #769	; 0x301
 8001cf6:	f000 f883 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_6_REG, 0x0403);
 8001cfa:	f04f 0035 	mov.w	r0, #53	; 0x35
 8001cfe:	f240 4103 	movw	r1, #1027	; 0x403
 8001d02:	f000 f87d 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_7_REG, 0x0707);
 8001d06:	f04f 0036 	mov.w	r0, #54	; 0x36
 8001d0a:	f240 7107 	movw	r1, #1799	; 0x707
 8001d0e:	f000 f877 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_8_REG, 0x0400);
 8001d12:	f04f 0037 	mov.w	r0, #55	; 0x37
 8001d16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d1a:	f000 f871 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_9_REG, 0x0a00);
 8001d1e:	f04f 003a 	mov.w	r0, #58	; 0x3a
 8001d22:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8001d26:	f000 f86b 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_GAMMA_CTRL_10_REG, 0x1000);
 8001d2a:	f04f 003b 	mov.w	r0, #59	; 0x3b
 8001d2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d32:	f000 f865 	bl	8001e00 <LCD_WriteReg>

  /* Configure Vlcd63 and VCOMl */
  LCD_WriteReg(SSD2119_PWR_CTRL_3_REG, 0x000A);
 8001d36:	f04f 000d 	mov.w	r0, #13
 8001d3a:	f04f 010a 	mov.w	r1, #10
 8001d3e:	f000 f85f 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_PWR_CTRL_4_REG, 0x2E00);
 8001d42:	f04f 000e 	mov.w	r0, #14
 8001d46:	f44f 5138 	mov.w	r1, #11776	; 0x2e00
 8001d4a:	f000 f859 	bl	8001e00 <LCD_WriteReg>

  /* Set the display size and ensure that the GRAM window is set to allow
     access to the full display buffer.*/
  LCD_WriteReg(SSD2119_V_RAM_POS_REG, (LCD_PIXEL_HEIGHT-1) << 8);
 8001d4e:	f04f 0044 	mov.w	r0, #68	; 0x44
 8001d52:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8001d56:	f000 f853 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_H_RAM_START_REG, 0x0000);
 8001d5a:	f04f 0045 	mov.w	r0, #69	; 0x45
 8001d5e:	f04f 0100 	mov.w	r1, #0
 8001d62:	f000 f84d 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_H_RAM_END_REG, LCD_PIXEL_WIDTH-1);
 8001d66:	f04f 0046 	mov.w	r0, #70	; 0x46
 8001d6a:	f240 113f 	movw	r1, #319	; 0x13f
 8001d6e:	f000 f847 	bl	8001e00 <LCD_WriteReg>

  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, 0x00);
 8001d72:	f04f 004e 	mov.w	r0, #78	; 0x4e
 8001d76:	f04f 0100 	mov.w	r1, #0
 8001d7a:	f000 f841 	bl	8001e00 <LCD_WriteReg>
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, 0x00);
 8001d7e:	f04f 004f 	mov.w	r0, #79	; 0x4f
 8001d82:	f04f 0100 	mov.w	r1, #0
 8001d86:	f000 f83b 	bl	8001e00 <LCD_WriteReg>
  
  /* clear the lcd  */
  LCD_WriteReg(SSD2119_RAM_DATA_REG, 0x0000);
 8001d8a:	f04f 0022 	mov.w	r0, #34	; 0x22
 8001d8e:	f04f 0100 	mov.w	r1, #0
 8001d92:	f000 f835 	bl	8001e00 <LCD_WriteReg>
  for(ulCount = 0; ulCount < (LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT); ulCount++)
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	e007      	b.n	8001dae <STM32f4_Discovery_LCD_Init+0x1c6>
  {
    LCD_WriteRAM(0x0000);
 8001d9e:	f04f 0000 	mov.w	r0, #0
 8001da2:	f000 f86b 	bl	8001e7c <LCD_WriteRAM>
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, 0x00);
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, 0x00);
  
  /* clear the lcd  */
  LCD_WriteReg(SSD2119_RAM_DATA_REG, 0x0000);
  for(ulCount = 0; ulCount < (LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT); ulCount++)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f103 0301 	add.w	r3, r3, #1
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8001db4:	f2c0 0301 	movt	r3, #1
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d9f0      	bls.n	8001d9e <STM32f4_Discovery_LCD_Init+0x1b6>
  {
    LCD_WriteRAM(0x0000);
  }
  LCD_SetFont(&LCD_DEFAULT_FONT);
 8001dbc:	f240 0018 	movw	r0, #24
 8001dc0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001dc4:	f000 f922 	bl	800200c <LCD_SetFont>
}
 8001dc8:	f107 0708 	add.w	r7, r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <LCD_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position. 
  * @retval None
  */
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	80fa      	strh	r2, [r7, #6]
 8001ddc:	80bb      	strh	r3, [r7, #4]
  /* Set the X address of the display cursor.*/
  LCD_WriteReg(SSD2119_X_RAM_ADDR_REG, Xpos);
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	f04f 004e 	mov.w	r0, #78	; 0x4e
 8001de4:	4619      	mov	r1, r3
 8001de6:	f000 f80b 	bl	8001e00 <LCD_WriteReg>
	
  /* Set the Y address of the display cursor.*/
  LCD_WriteReg(SSD2119_Y_RAM_ADDR_REG, Ypos);
 8001dea:	88bb      	ldrh	r3, [r7, #4]
 8001dec:	f04f 004f 	mov.w	r0, #79	; 0x4f
 8001df0:	4619      	mov	r1, r3
 8001df2:	f000 f805 	bl	8001e00 <LCD_WriteReg>
}
 8001df6:	f107 0708 	add.w	r7, r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop

08001e00 <LCD_WriteReg>:
  * @param  LCD_Reg: address of the selected register.
  * @param  LCD_RegValue: value to write to the selected register.
  * @retval None
  */
void LCD_WriteReg(uint8_t LCD_Reg, uint16_t LCD_RegValue)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	71fa      	strb	r2, [r7, #7]
 8001e0c:	80bb      	strh	r3, [r7, #4]
  /* Write 16-bit Index, then Write Reg */
  LCD_CMD = LCD_Reg;
 8001e0e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	460b      	mov	r3, r1
 8001e1a:	801a      	strh	r2, [r3, #0]
  /* Write 16-bit Reg */
  LCD_Data = LCD_RegValue;
 8001e1c:	f04f 0300 	mov.w	r3, #0
 8001e20:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001e24:	88ba      	ldrh	r2, [r7, #4]
 8001e26:	801a      	strh	r2, [r3, #0]
}
 8001e28:	f107 070c 	add.w	r7, r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bc80      	pop	{r7}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop

08001e34 <LCD_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  LCD_Reg: address of the selected register.
  * @retval LCD Register Value.
  */
uint16_t LCD_ReadReg(uint8_t LCD_Reg)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index (then Read Reg) */
  LCD_CMD = LCD_Reg;
 8001e3e:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	461a      	mov	r2, r3
 8001e48:	460b      	mov	r3, r1
 8001e4a:	801a      	strh	r2, [r3, #0]
  /* Read 16-bit Reg */
  return (LCD_Data);
 8001e4c:	f04f 0300 	mov.w	r3, #0
 8001e50:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f107 070c 	add.w	r7, r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <LCD_WriteRAM_Prepare>:
  * @brief  Prepare to write to the LCD RAM.
  * @param  None
  * @retval None
  */
void LCD_WriteRAM_Prepare(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
	LCD_CMD = SSD2119_RAM_DATA_REG;
 8001e68:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
 8001e6c:	f04f 0322 	mov.w	r3, #34	; 0x22
 8001e70:	461a      	mov	r2, r3
 8001e72:	460b      	mov	r3, r1
 8001e74:	801a      	strh	r2, [r3, #0]
}
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <LCD_WriteRAM>:
  * @brief  Writes to the LCD RAM.
  * @param  RGB_Code: the pixel color in RGB mode (5-6-5).
  * @retval None
  */
void LCD_WriteRAM(uint16_t RGB_Code)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit GRAM Reg */
  LCD_Data = RGB_Code;
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	801a      	strh	r2, [r3, #0]
}
 8001e92:	f107 070c 	add.w	r7, r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <LCD_ReadRAM>:
  * @brief  Reads the LCD RAM.
  * @param  None
  * @retval LCD RAM Value.
  */
uint16_t LCD_ReadRAM(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* Write 16-bit Index (then Read Reg) */
//  LCD_CMD = SSD2119_RAM_DATA_REG; /* Select GRAM Reg */
  /* Read 16-bit Reg */
  return LCD_Data;
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <LCD_RGB_Test>:
/**
  * @brief  Test LCD Display
  * @retval None
  */
void LCD_RGB_Test(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint32_t index;

  LCD_SetCursor(0x00, 0x00); 
 8001eba:	f04f 0000 	mov.w	r0, #0
 8001ebe:	f04f 0100 	mov.w	r1, #0
 8001ec2:	f7ff ff85 	bl	8001dd0 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8001ec6:	f7ff ffcd 	bl	8001e64 <LCD_WriteRAM_Prepare>

	/* R */
  for(index = 0; index < (LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	e00a      	b.n	8001ee8 <LCD_RGB_Test+0x34>
  {
    LCD_Data = LCD_COLOR_RED;
 8001ed2:	f04f 0300 	mov.w	r3, #0
 8001ed6:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001eda:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ede:	801a      	strh	r2, [r3, #0]

  LCD_SetCursor(0x00, 0x00); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */

	/* R */
  for(index = 0; index < (LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f103 0301 	add.w	r3, r3, #1
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	f246 33ff 	movw	r3, #25599	; 0x63ff
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d9ef      	bls.n	8001ed2 <LCD_RGB_Test+0x1e>
  {
    LCD_Data = LCD_COLOR_RED;
  }
	  
  /* G */
  for(;index < 2*(LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 8001ef2:	e00a      	b.n	8001f0a <LCD_RGB_Test+0x56>
  {
    LCD_Data = LCD_COLOR_GREEN;
 8001ef4:	f04f 0300 	mov.w	r3, #0
 8001ef8:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001efc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f00:	801a      	strh	r2, [r3, #0]
  {
    LCD_Data = LCD_COLOR_RED;
  }
	  
  /* G */
  for(;index < 2*(LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH)/3; index++)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 0301 	add.w	r3, r3, #1
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	f24c 73ff 	movw	r3, #51199	; 0xc7ff
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d9ef      	bls.n	8001ef4 <LCD_RGB_Test+0x40>
  {
    LCD_Data = LCD_COLOR_GREEN;
  }
	  
	/* B */
  for(; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 8001f14:	e00a      	b.n	8001f2c <LCD_RGB_Test+0x78>
  {
    LCD_Data = LCD_COLOR_BLUE;
 8001f16:	f04f 0300 	mov.w	r3, #0
 8001f1a:	f2c6 0310 	movt	r3, #24592	; 0x6010
 8001f1e:	f04f 021f 	mov.w	r2, #31
 8001f22:	801a      	strh	r2, [r3, #0]
  {
    LCD_Data = LCD_COLOR_GREEN;
  }
	  
	/* B */
  for(; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f103 0301 	add.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	f642 33ff 	movw	r3, #11263	; 0x2bff
 8001f32:	f2c0 0301 	movt	r3, #1
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d9ed      	bls.n	8001f16 <LCD_RGB_Test+0x62>
  {
    LCD_Data = LCD_COLOR_BLUE;
  }
}
 8001f3a:	f107 0708 	add.w	r7, r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop

08001f44 <LCD_SetColors>:
  * @param  _TextColor: specifies the Text Color.
  * @param  _BackColor: specifies the Background Color.
  * @retval None
  */
void LCD_SetColors(__IO uint16_t _TextColor, __IO uint16_t _BackColor)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	80fa      	strh	r2, [r7, #6]
 8001f50:	80bb      	strh	r3, [r7, #4]
  TextColor = _TextColor; 
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	f240 0384 	movw	r3, #132	; 0x84
 8001f5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f5e:	801a      	strh	r2, [r3, #0]
  BackColor = _BackColor;
 8001f60:	88bb      	ldrh	r3, [r7, #4]
 8001f62:	b29a      	uxth	r2, r3
 8001f64:	f240 034c 	movw	r3, #76	; 0x4c
 8001f68:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f6c:	801a      	strh	r2, [r3, #0]
}
 8001f6e:	f107 070c 	add.w	r7, r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bc80      	pop	{r7}
 8001f76:	4770      	bx	lr

08001f78 <LCD_GetColors>:
  * @param  _BackColor: pointer to the variable that will contain the Background 
            Color.
  * @retval None
  */
void LCD_GetColors(__IO uint16_t *_TextColor, __IO uint16_t *_BackColor)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  *_TextColor = TextColor; *_BackColor = BackColor;
 8001f82:	f240 0384 	movw	r3, #132	; 0x84
 8001f86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	f240 034c 	movw	r3, #76	; 0x4c
 8001f96:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	801a      	strh	r2, [r3, #0]
}
 8001fa2:	f107 070c 	add.w	r7, r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <LCD_SetTextColor>:
  * @brief  Sets the Text color.
  * @param  Color: specifies the Text color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetTextColor(__IO uint16_t Color)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
  TextColor = Color;
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	b29a      	uxth	r2, r3
 8001fba:	f240 0384 	movw	r3, #132	; 0x84
 8001fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fc2:	801a      	strh	r2, [r3, #0]
}
 8001fc4:	f107 070c 	add.w	r7, r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <LCD_SetBackColor>:
  * @brief  Sets the Background color.
  * @param  Color: specifies the Background color code RGB(5-6-5).
  * @retval None
  */
void LCD_SetBackColor(__IO uint16_t Color)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  BackColor = Color;
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	f240 034c 	movw	r3, #76	; 0x4c
 8001fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8001fe6:	801a      	strh	r2, [r3, #0]
}
 8001fe8:	f107 070c 	add.w	r7, r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bc80      	pop	{r7}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <LCD_DisplayOff>:

/**
LCD_DisplayOff
  */
void LCD_DisplayOff(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

}
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <LCD_DisplayOn>:

/**
LCD_DisplayOn
  */
void LCD_DisplayOn(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

}
 8002004:	46bd      	mov	sp, r7
 8002006:	bc80      	pop	{r7}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <LCD_SetFont>:
  * @brief  Sets the Text Font.
  * @param  fonts: specifies the font to be used.
  * @retval None
  */
void LCD_SetFont(sFONT *fonts)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8002014:	f240 0380 	movw	r3, #128	; 0x80
 8002018:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	f107 070c 	add.w	r7, r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop

0800202c <LCD_GetFont>:
  * @brief  Gets the Text Font.
  * @param  None.
  * @retval the used font.
  */
sFONT *LCD_GetFont(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return LCD_Currentfonts;
 8002030:	f240 0380 	movw	r3, #128	; 0x80
 8002034:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002038:	681b      	ldr	r3, [r3, #0]
}
 800203a:	4618      	mov	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <LCD_ClearLine>:
  *   This parameter can be one of the following values:
  *     @arg Linex: where x can be 0..n
  * @retval None
  */
void LCD_ClearLine(uint16_t Line)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 800204e:	f04f 0300 	mov.w	r3, #0
 8002052:	81fb      	strh	r3, [r7, #14]

  do {
       /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, ' ');
 8002054:	88fa      	ldrh	r2, [r7, #6]
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f04f 0220 	mov.w	r2, #32
 8002060:	f000 f906 	bl	8002270 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 8002064:	f240 0380 	movw	r3, #128	; 0x80
 8002068:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	889a      	ldrh	r2, [r3, #4]
 8002070:	89fb      	ldrh	r3, [r7, #14]
 8002072:	18d3      	adds	r3, r2, r3
 8002074:	81fb      	strh	r3, [r7, #14]
  } while (refcolumn < LCD_PIXEL_WIDTH);	
 8002076:	89fa      	ldrh	r2, [r7, #14]
 8002078:	f240 133f 	movw	r3, #319	; 0x13f
 800207c:	429a      	cmp	r2, r3
 800207e:	d9e9      	bls.n	8002054 <LCD_ClearLine+0x10>
}
 8002080:	f107 0710 	add.w	r7, r7, #16
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}

08002088 <LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background.
  * @retval None
  */
void LCD_Clear(uint16_t Color)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  uint32_t index = 0;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(0x00, 0x00); 
 8002098:	f04f 0000 	mov.w	r0, #0
 800209c:	f04f 0100 	mov.w	r1, #0
 80020a0:	f7ff fe96 	bl	8001dd0 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80020a4:	f7ff fede 	bl	8001e64 <LCD_WriteRAM_Prepare>
  for(index = 0; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	e009      	b.n	80020c4 <LCD_Clear+0x3c>
  {
    LCD_Data = Color;
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	f2c6 0310 	movt	r3, #24592	; 0x6010
 80020b8:	88fa      	ldrh	r2, [r7, #6]
 80020ba:	801a      	strh	r2, [r3, #0]
{
  uint32_t index = 0;
  
  LCD_SetCursor(0x00, 0x00); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < LCD_PIXEL_HEIGHT*LCD_PIXEL_WIDTH; index++)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f103 0301 	add.w	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	f642 33ff 	movw	r3, #11263	; 0x2bff
 80020ca:	f2c0 0301 	movt	r3, #1
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d9ee      	bls.n	80020b0 <LCD_Clear+0x28>
  {
    LCD_Data = Color;
  }  
}
 80020d2:	f107 0710 	add.w	r7, r7, #16
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop

080020dc <PutPixel>:
  * @param  x: pixel x.
  * @param  y: pixel y.  
  * @retval None
  */
static void PutPixel(int16_t x, int16_t y)
{ 
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	80fa      	strh	r2, [r7, #6]
 80020e8:	80bb      	strh	r3, [r7, #4]
  if(x < 0 || x > LCD_PIXEL_WIDTH-1 || y < 0 || y > LCD_PIXEL_HEIGHT-1)
 80020ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	db18      	blt.n	8002124 <PutPixel+0x48>
 80020f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020f6:	f240 133f 	movw	r3, #319	; 0x13f
 80020fa:	429a      	cmp	r2, r3
 80020fc:	dc12      	bgt.n	8002124 <PutPixel+0x48>
 80020fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	db0e      	blt.n	8002124 <PutPixel+0x48>
 8002106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800210a:	2bef      	cmp	r3, #239	; 0xef
 800210c:	dc0a      	bgt.n	8002124 <PutPixel+0x48>
  {
    return;  
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	88bb      	ldrh	r3, [r7, #4]
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f04f 0201 	mov.w	r2, #1
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	f000 f953 	bl	80023c8 <LCD_DrawLine>
 8002122:	e000      	b.n	8002126 <PutPixel+0x4a>
  */
static void PutPixel(int16_t x, int16_t y)
{ 
  if(x < 0 || x > LCD_PIXEL_WIDTH-1 || y < 0 || y > LCD_PIXEL_HEIGHT-1)
  {
    return;  
 8002124:	bf00      	nop
  }
  LCD_DrawLine(x, y, 1, LCD_DIR_HORIZONTAL);
}
 8002126:	f107 0708 	add.w	r7, r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop

08002130 <LCD_DrawChar>:
  * @param  Ypos: start column address.
  * @param  c: pointer to the character data.
  * @retval None
  */
void LCD_DrawChar(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	460b      	mov	r3, r1
 8002138:	603a      	str	r2, [r7, #0]
 800213a:	4602      	mov	r2, r0
 800213c:	80fa      	strh	r2, [r7, #6]
 800213e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, i = 0;
 8002140:	f04f 0300 	mov.w	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	613b      	str	r3, [r7, #16]
  uint16_t  Xaddress = 0;
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	81fb      	strh	r3, [r7, #14]
  Xaddress = Xpos;
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	81fb      	strh	r3, [r7, #14]
  
  LCD_SetCursor(Ypos, Xaddress);
 8002156:	88ba      	ldrh	r2, [r7, #4]
 8002158:	89fb      	ldrh	r3, [r7, #14]
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7ff fe37 	bl	8001dd0 <LCD_SetCursor>
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8002162:	f04f 0300 	mov.w	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e074      	b.n	8002254 <LCD_DrawChar+0x124>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 800216a:	f7ff fe7b 	bl	8001e64 <LCD_WriteRAM_Prepare>
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	613b      	str	r3, [r7, #16]
 8002174:	e056      	b.n	8002224 <LCD_DrawChar+0xf4>
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	18d3      	adds	r3, r2, r3
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	f240 0380 	movw	r3, #128	; 0x80
 8002188:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	8899      	ldrh	r1, [r3, #4]
 8002190:	f64a 23ab 	movw	r3, #43691	; 0xaaab
 8002194:	f6ca 23aa 	movt	r3, #43690	; 0xaaaa
 8002198:	fba3 0301 	umull	r0, r3, r3, r1
 800219c:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80021a6:	f04f 0180 	mov.w	r1, #128	; 0x80
 80021aa:	fa01 f103 	lsl.w	r1, r1, r3
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	fa41 f303 	asr.w	r3, r1, r3
 80021b4:	4013      	ands	r3, r2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d107      	bne.n	80021ca <LCD_DrawChar+0x9a>
 80021ba:	f240 0380 	movw	r3, #128	; 0x80
 80021be:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	889b      	ldrh	r3, [r3, #4]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d915      	bls.n	80021f6 <LCD_DrawChar+0xc6>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	18d3      	adds	r3, r2, r3
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	fa42 f303 	asr.w	r3, r2, r3
 80021de:	f003 0301 	and.w	r3, r3, #1
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
    {
  
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> i)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d111      	bne.n	800220a <LCD_DrawChar+0xda>
        (((c[index] & (0x1 << i)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 80021e6:	f240 0380 	movw	r3, #128	; 0x80
 80021ea:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	889b      	ldrh	r3, [r3, #4]
 80021f2:	2b0c      	cmp	r3, #12
 80021f4:	d909      	bls.n	800220a <LCD_DrawChar+0xda>

      {
        LCD_WriteRAM(BackColor);
 80021f6:	f240 034c 	movw	r3, #76	; 0x4c
 80021fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	b29b      	uxth	r3, r3
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fe3a 	bl	8001e7c <LCD_WriteRAM>
 8002208:	e008      	b.n	800221c <LCD_DrawChar+0xec>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 800220a:	f240 0384 	movw	r3, #132	; 0x84
 800220e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002212:	881b      	ldrh	r3, [r3, #0]
 8002214:	b29b      	uxth	r3, r3
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff fe30 	bl	8001e7c <LCD_WriteRAM>
  LCD_SetCursor(Ypos, Xaddress);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < LCD_Currentfonts->Width; i++)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f103 0301 	add.w	r3, r3, #1
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	f240 0380 	movw	r3, #128	; 0x80
 8002228:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	889b      	ldrh	r3, [r3, #4]
 8002230:	461a      	mov	r2, r3
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	429a      	cmp	r2, r3
 8002236:	d89e      	bhi.n	8002176 <LCD_DrawChar+0x46>
      else
      {
        LCD_WriteRAM(TextColor);
      } 
    }
    Xaddress++;
 8002238:	89fb      	ldrh	r3, [r7, #14]
 800223a:	f103 0301 	add.w	r3, r3, #1
 800223e:	81fb      	strh	r3, [r7, #14]
    LCD_SetCursor(Ypos, Xaddress);
 8002240:	88ba      	ldrh	r2, [r7, #4]
 8002242:	89fb      	ldrh	r3, [r7, #14]
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7ff fdc2 	bl	8001dd0 <LCD_SetCursor>
  uint16_t  Xaddress = 0;
  Xaddress = Xpos;
  
  LCD_SetCursor(Ypos, Xaddress);
  
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f103 0301 	add.w	r3, r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	f240 0380 	movw	r3, #128	; 0x80
 8002258:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	88db      	ldrh	r3, [r3, #6]
 8002260:	461a      	mov	r2, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d880      	bhi.n	800216a <LCD_DrawChar+0x3a>
      } 
    }
    Xaddress++;
    LCD_SetCursor(Ypos, Xaddress);
  }
}
 8002268:	f107 0718 	add.w	r7, r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <LCD_DisplayChar>:
  * @param  Column: start column address.
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4613      	mov	r3, r2
 8002278:	4602      	mov	r2, r0
 800227a:	80fa      	strh	r2, [r7, #6]
 800227c:	460a      	mov	r2, r1
 800227e:	80ba      	strh	r2, [r7, #4]
 8002280:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8002282:	78fb      	ldrb	r3, [r7, #3]
 8002284:	f1a3 0320 	sub.w	r3, r3, #32
 8002288:	70fb      	strb	r3, [r7, #3]
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 800228a:	f240 0380 	movw	r3, #128	; 0x80
 800228e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	78f9      	ldrb	r1, [r7, #3]
 8002298:	f240 0380 	movw	r3, #128	; 0x80
 800229c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	88db      	ldrh	r3, [r3, #6]
 80022a4:	fb03 f301 	mul.w	r3, r3, r1
 80022a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80022ac:	18d3      	adds	r3, r2, r3
 80022ae:	88f9      	ldrh	r1, [r7, #6]
 80022b0:	88ba      	ldrh	r2, [r7, #4]
 80022b2:	4608      	mov	r0, r1
 80022b4:	4611      	mov	r1, r2
 80022b6:	461a      	mov	r2, r3
 80022b8:	f7ff ff3a 	bl	8002130 <LCD_DrawChar>
}
 80022bc:	f107 0708 	add.w	r7, r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	80fb      	strh	r3, [r7, #6]
  uint16_t refcolumn = 0;
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	81fb      	strh	r3, [r7, #14]

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 80022d6:	e01a      	b.n	800230e <LCD_DisplayStringLine+0x4a>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	88f9      	ldrh	r1, [r7, #6]
 80022de:	89fa      	ldrh	r2, [r7, #14]
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	f7ff ffc3 	bl	8002270 <LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
 80022ea:	f240 0380 	movw	r3, #128	; 0x80
 80022ee:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	889a      	ldrh	r2, [r3, #4]
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	81fb      	strh	r3, [r7, #14]
	if (refcolumn >= LCD_PIXEL_WIDTH) {
 80022fc:	89fa      	ldrh	r2, [r7, #14]
 80022fe:	f240 133f 	movw	r3, #319	; 0x13f
 8002302:	429a      	cmp	r2, r3
 8002304:	d808      	bhi.n	8002318 <LCD_DisplayStringLine+0x54>
		break;
	}
    /* Point on the next character */
    ptr++;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f103 0301 	add.w	r3, r3, #1
 800230c:	603b      	str	r3, [r7, #0]
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
  uint16_t refcolumn = 0;

  /* Send the string character by character on lCD */
  while (*ptr != 0)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1e0      	bne.n	80022d8 <LCD_DisplayStringLine+0x14>
 8002316:	e000      	b.n	800231a <LCD_DisplayStringLine+0x56>
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
    /* Decrement the column position by 16 */
    refcolumn += LCD_Currentfonts->Width;
	if (refcolumn >= LCD_PIXEL_WIDTH) {
		break;
 8002318:	bf00      	nop
	}
    /* Point on the next character */
    ptr++;
  }
}
 800231a:	f107 0710 	add.w	r7, r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop

08002324 <LCD_SetDisplayWindow>:
  * @param  Height: display window width.
  * @param  Width: display window Height.
  * @retval None
  */
void LCD_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t width, uint16_t Height)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	80f8      	strh	r0, [r7, #6]
 800232c:	80b9      	strh	r1, [r7, #4]
 800232e:	807a      	strh	r2, [r7, #2]
 8002330:	803b      	strh	r3, [r7, #0]
  uint32_t value = 0;	
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	60fb      	str	r3, [r7, #12]

  LCD_WriteReg(SSD2119_H_RAM_START_REG, Xpos);
 8002338:	88fb      	ldrh	r3, [r7, #6]
 800233a:	f04f 0045 	mov.w	r0, #69	; 0x45
 800233e:	4619      	mov	r1, r3
 8002340:	f7ff fd5e 	bl	8001e00 <LCD_WriteReg>
	
  if ((Xpos+width) >= LCD_PIXEL_WIDTH) {
 8002344:	88fa      	ldrh	r2, [r7, #6]
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	18d2      	adds	r2, r2, r3
 800234a:	f240 133f 	movw	r3, #319	; 0x13f
 800234e:	429a      	cmp	r2, r3
 8002350:	dd06      	ble.n	8002360 <LCD_SetDisplayWindow+0x3c>
    LCD_WriteReg(SSD2119_H_RAM_END_REG, LCD_PIXEL_WIDTH-1);	
 8002352:	f04f 0046 	mov.w	r0, #70	; 0x46
 8002356:	f240 113f 	movw	r1, #319	; 0x13f
 800235a:	f7ff fd51 	bl	8001e00 <LCD_WriteReg>
 800235e:	e008      	b.n	8002372 <LCD_SetDisplayWindow+0x4e>
  } else {
    LCD_WriteReg(SSD2119_H_RAM_END_REG, Xpos+width);		
 8002360:	88fa      	ldrh	r2, [r7, #6]
 8002362:	887b      	ldrh	r3, [r7, #2]
 8002364:	18d3      	adds	r3, r2, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	f04f 0046 	mov.w	r0, #70	; 0x46
 800236c:	4619      	mov	r1, r3
 800236e:	f7ff fd47 	bl	8001e00 <LCD_WriteReg>
  }
  
  if ((Ypos+Height) >= LCD_PIXEL_HEIGHT) {
 8002372:	88ba      	ldrh	r2, [r7, #4]
 8002374:	883b      	ldrh	r3, [r7, #0]
 8002376:	18d3      	adds	r3, r2, r3
 8002378:	2bef      	cmp	r3, #239	; 0xef
 800237a:	dd03      	ble.n	8002384 <LCD_SetDisplayWindow+0x60>
    value = (LCD_PIXEL_HEIGHT-1) << 8;	
 800237c:	f44f 436f 	mov.w	r3, #61184	; 0xef00
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	e005      	b.n	8002390 <LCD_SetDisplayWindow+0x6c>
  } else {
    value = (Ypos+Height) << 8;	
 8002384:	88ba      	ldrh	r2, [r7, #4]
 8002386:	883b      	ldrh	r3, [r7, #0]
 8002388:	18d3      	adds	r3, r2, r3
 800238a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800238e:	60fb      	str	r3, [r7, #12]
  }
  value |= Xpos;
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  LCD_WriteReg(SSD2119_V_RAM_POS_REG, value);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	b29b      	uxth	r3, r3
 800239c:	f04f 0044 	mov.w	r0, #68	; 0x44
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7ff fd2d 	bl	8001e00 <LCD_WriteReg>
  LCD_SetCursor(Xpos, Ypos);
 80023a6:	88fa      	ldrh	r2, [r7, #6]
 80023a8:	88bb      	ldrh	r3, [r7, #4]
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f7ff fd0f 	bl	8001dd0 <LCD_SetCursor>
}
 80023b2:	f107 0710 	add.w	r7, r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop

080023bc <LCD_WindowModeDisable>:
  * @brief  Disables LCD Window mode.
  * @param  None
  * @retval None
  */
void LCD_WindowModeDisable(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
#if 0
  LCD_SetDisplayWindow(239, 0x13F, 240, 320);
  LCD_WriteReg(LCD_REG_3, 0x1018);    
#endif
}
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bc80      	pop	{r7}
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop

080023c8 <LCD_DrawLine>:
  * @param Direction: line direction.
  *   This parameter can be one of the following values: Vertical or Horizontal.
  * @retval None
  */
void LCD_DrawLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length, uint8_t Direction)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	80f8      	strh	r0, [r7, #6]
 80023d0:	80b9      	strh	r1, [r7, #4]
 80023d2:	807a      	strh	r2, [r7, #2]
 80023d4:	707b      	strb	r3, [r7, #1]
  uint32_t i = 0;
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
  
  LCD_SetCursor(Xpos, Ypos);
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	88bb      	ldrh	r3, [r7, #4]
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7ff fcf4 	bl	8001dd0 <LCD_SetCursor>
  if(Direction == LCD_DIR_HORIZONTAL)
 80023e8:	787b      	ldrb	r3, [r7, #1]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d117      	bne.n	800241e <LCD_DrawLine+0x56>
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80023ee:	f7ff fd39 	bl	8001e64 <LCD_WriteRAM_Prepare>
    for(i = 0; i < Length; i++)
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e00c      	b.n	8002414 <LCD_DrawLine+0x4c>
    {
      LCD_WriteRAM(TextColor);
 80023fa:	f240 0384 	movw	r3, #132	; 0x84
 80023fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	b29b      	uxth	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fd38 	bl	8001e7c <LCD_WriteRAM>
  
  LCD_SetCursor(Xpos, Ypos);
  if(Direction == LCD_DIR_HORIZONTAL)
  {
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
    for(i = 0; i < Length; i++)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f103 0301 	add.w	r3, r3, #1
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	887a      	ldrh	r2, [r7, #2]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	429a      	cmp	r2, r3
 800241a:	d8ee      	bhi.n	80023fa <LCD_DrawLine+0x32>
 800241c:	e020      	b.n	8002460 <LCD_DrawLine+0x98>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 800241e:	f04f 0300 	mov.w	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	e018      	b.n	8002458 <LCD_DrawLine+0x90>
    {
      LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002426:	f7ff fd1d 	bl	8001e64 <LCD_WriteRAM_Prepare>
      LCD_WriteRAM(TextColor);
 800242a:	f240 0384 	movw	r3, #132	; 0x84
 800242e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fd20 	bl	8001e7c <LCD_WriteRAM>
      Ypos++;
 800243c:	88bb      	ldrh	r3, [r7, #4]
 800243e:	f103 0301 	add.w	r3, r3, #1
 8002442:	80bb      	strh	r3, [r7, #4]
      LCD_SetCursor(Xpos, Ypos);
 8002444:	88fa      	ldrh	r2, [r7, #6]
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7ff fcc0 	bl	8001dd0 <LCD_SetCursor>
      LCD_WriteRAM(TextColor);
    }
  }
  else
  {
    for(i = 0; i < Length; i++)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f103 0301 	add.w	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	887a      	ldrh	r2, [r7, #2]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	429a      	cmp	r2, r3
 800245e:	d8e2      	bhi.n	8002426 <LCD_DrawLine+0x5e>
      LCD_WriteRAM(TextColor);
      Ypos++;
      LCD_SetCursor(Xpos, Ypos);
    }
  }
}
 8002460:	f107 0710 	add.w	r7, r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <LCD_DrawRect>:
  * @param  Height: display rectangle height.
  * @param  Width: display rectangle width.
  * @retval None
  */
void LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint8_t Height, uint16_t Width)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	80f8      	strh	r0, [r7, #6]
 8002470:	80b9      	strh	r1, [r7, #4]
 8002472:	70fa      	strb	r2, [r7, #3]
 8002474:	803b      	strh	r3, [r7, #0]
  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_VERTICAL);
 8002476:	88f9      	ldrh	r1, [r7, #6]
 8002478:	88ba      	ldrh	r2, [r7, #4]
 800247a:	883b      	ldrh	r3, [r7, #0]
 800247c:	4608      	mov	r0, r1
 800247e:	4611      	mov	r1, r2
 8002480:	461a      	mov	r2, r3
 8002482:	f04f 0301 	mov.w	r3, #1
 8002486:	f7ff ff9f 	bl	80023c8 <LCD_DrawLine>
  LCD_DrawLine((Xpos + Height-1), Ypos, Width, LCD_DIR_VERTICAL);
 800248a:	78fb      	ldrb	r3, [r7, #3]
 800248c:	b29a      	uxth	r2, r3
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	18d3      	adds	r3, r2, r3
 8002492:	b29b      	uxth	r3, r3
 8002494:	f103 33ff 	add.w	r3, r3, #4294967295
 8002498:	b299      	uxth	r1, r3
 800249a:	88ba      	ldrh	r2, [r7, #4]
 800249c:	883b      	ldrh	r3, [r7, #0]
 800249e:	4608      	mov	r0, r1
 80024a0:	4611      	mov	r1, r2
 80024a2:	461a      	mov	r2, r3
 80024a4:	f04f 0301 	mov.w	r3, #1
 80024a8:	f7ff ff8e 	bl	80023c8 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_HORIZONTAL);
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	88f9      	ldrh	r1, [r7, #6]
 80024b2:	88ba      	ldrh	r2, [r7, #4]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	f7ff ff83 	bl	80023c8 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos + Width), Height, LCD_DIR_HORIZONTAL);
 80024c2:	88ba      	ldrh	r2, [r7, #4]
 80024c4:	883b      	ldrh	r3, [r7, #0]
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	88f9      	ldrh	r1, [r7, #6]
 80024d0:	4608      	mov	r0, r1
 80024d2:	4611      	mov	r1, r2
 80024d4:	461a      	mov	r2, r3
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	f7ff ff75 	bl	80023c8 <LCD_DrawLine>
}
 80024de:	f107 0708 	add.w	r7, r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop

080024e8 <LCD_DrawCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4613      	mov	r3, r2
 80024f0:	4602      	mov	r2, r0
 80024f2:	80fa      	strh	r2, [r7, #6]
 80024f4:	460a      	mov	r2, r1
 80024f6:	80ba      	strh	r2, [r7, #4]
 80024f8:	807b      	strh	r3, [r7, #2]
  int32_t  D;/* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80024fa:	887b      	ldrh	r3, [r7, #2]
 80024fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002500:	f1c3 0303 	rsb	r3, r3, #3
 8002504:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 800250c:	887b      	ldrh	r3, [r7, #2]
 800250e:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 8002510:	e0e5      	b.n	80026de <LCD_DrawCircle+0x1f6>
  {
    LCD_SetCursor(Xpos + CurX, Ypos + CurY);
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	b29a      	uxth	r2, r3
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	18d3      	adds	r3, r2, r3
 800251a:	b29a      	uxth	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	b299      	uxth	r1, r3
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	18cb      	adds	r3, r1, r3
 8002524:	b29b      	uxth	r3, r3
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7ff fc51 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 800252e:	f7ff fc99 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002532:	f240 0384 	movw	r3, #132	; 0x84
 8002536:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800253a:	881b      	ldrh	r3, [r3, #0]
 800253c:	b29b      	uxth	r3, r3
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fc9c 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurX, Ypos - CurY);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	b29a      	uxth	r2, r3
 8002548:	88fb      	ldrh	r3, [r7, #6]
 800254a:	18d3      	adds	r3, r2, r3
 800254c:	b29a      	uxth	r2, r3
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	b29b      	uxth	r3, r3
 8002552:	88b9      	ldrh	r1, [r7, #4]
 8002554:	1acb      	subs	r3, r1, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7ff fc38 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002560:	f7ff fc80 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002564:	f240 0384 	movw	r3, #132	; 0x84
 8002568:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	b29b      	uxth	r3, r3
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fc83 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos + CurY);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	b29b      	uxth	r3, r3
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	b299      	uxth	r1, r3
 8002584:	88bb      	ldrh	r3, [r7, #4]
 8002586:	18cb      	adds	r3, r1, r3
 8002588:	b29b      	uxth	r3, r3
 800258a:	4610      	mov	r0, r2
 800258c:	4619      	mov	r1, r3
 800258e:	f7ff fc1f 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002592:	f7ff fc67 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002596:	f240 0384 	movw	r3, #132	; 0x84
 800259a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fc6a 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurX, Ypos - CurY);
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	b29b      	uxth	r3, r3
 80025b6:	88b9      	ldrh	r1, [r7, #4]
 80025b8:	1acb      	subs	r3, r1, r3
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7ff fc06 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80025c4:	f7ff fc4e 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 80025c8:	f240 0384 	movw	r3, #132	; 0x84
 80025cc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fc51 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos + CurX);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	b29a      	uxth	r2, r3
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	18d3      	adds	r3, r2, r3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	b299      	uxth	r1, r3
 80025e8:	88bb      	ldrh	r3, [r7, #4]
 80025ea:	18cb      	adds	r3, r1, r3
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	4610      	mov	r0, r2
 80025f0:	4619      	mov	r1, r3
 80025f2:	f7ff fbed 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 80025f6:	f7ff fc35 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 80025fa:	f240 0384 	movw	r3, #132	; 0x84
 80025fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	b29b      	uxth	r3, r3
 8002606:	4618      	mov	r0, r3
 8002608:	f7ff fc38 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos + CurY, Ypos - CurX);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	b29a      	uxth	r2, r3
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	18d3      	adds	r3, r2, r3
 8002614:	b29a      	uxth	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	b29b      	uxth	r3, r3
 800261a:	88b9      	ldrh	r1, [r7, #4]
 800261c:	1acb      	subs	r3, r1, r3
 800261e:	b29b      	uxth	r3, r3
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f7ff fbd4 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002628:	f7ff fc1c 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 800262c:	f240 0384 	movw	r3, #132	; 0x84
 8002630:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002634:	881b      	ldrh	r3, [r3, #0]
 8002636:	b29b      	uxth	r3, r3
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff fc1f 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos + CurX);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	b29b      	uxth	r3, r3
 8002642:	88fa      	ldrh	r2, [r7, #6]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	b29a      	uxth	r2, r3
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	b299      	uxth	r1, r3
 800264c:	88bb      	ldrh	r3, [r7, #4]
 800264e:	18cb      	adds	r3, r1, r3
 8002650:	b29b      	uxth	r3, r3
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7ff fbbb 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 800265a:	f7ff fc03 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 800265e:	f240 0384 	movw	r3, #132	; 0x84
 8002662:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fc06 	bl	8001e7c <LCD_WriteRAM>
    LCD_SetCursor(Xpos - CurY, Ypos - CurX);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	b29b      	uxth	r3, r3
 8002674:	88fa      	ldrh	r2, [r7, #6]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	b29a      	uxth	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	b29b      	uxth	r3, r3
 800267e:	88b9      	ldrh	r1, [r7, #4]
 8002680:	1acb      	subs	r3, r1, r3
 8002682:	b29b      	uxth	r3, r3
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff fba2 	bl	8001dd0 <LCD_SetCursor>
    LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 800268c:	f7ff fbea 	bl	8001e64 <LCD_WriteRAM_Prepare>
    LCD_WriteRAM(TextColor);
 8002690:	f240 0384 	movw	r3, #132	; 0x84
 8002694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002698:	881b      	ldrh	r3, [r3, #0]
 800269a:	b29b      	uxth	r3, r3
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff fbed 	bl	8001e7c <LCD_WriteRAM>
    if (D < 0)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	da08      	bge.n	80026ba <LCD_DrawCircle+0x1d2>
    { 
      D += (CurX << 2) + 6;
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	18d3      	adds	r3, r2, r3
 80026b2:	f103 0306 	add.w	r3, r3, #6
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e00d      	b.n	80026d6 <LCD_DrawCircle+0x1ee>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	18d3      	adds	r3, r2, r3
 80026c8:	f103 030a 	add.w	r3, r3, #10
 80026cc:	617b      	str	r3, [r7, #20]
      CurY--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80026d4:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f103 0301 	add.w	r3, r3, #1
 80026dc:	613b      	str	r3, [r7, #16]
  
  D = 3 - (Radius << 1);
  CurX = 0;
  CurY = Radius;
  
  while (CurX <= CurY)
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	f67f af15 	bls.w	8002512 <LCD_DrawCircle+0x2a>
      D += ((CurX - CurY) << 2) + 10;
      CurY--;
    }
    CurX++;
  }
}
 80026e8:	f107 0718 	add.w	r7, r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <LCD_DrawMonoPict>:
  * @brief  Displays a mono-color picture.
  * @param  Pict: pointer to the picture array.
  * @retval None
  */
void LCD_DrawMonoPict(const uint32_t *Pict)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t index = 0, i = 0;
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	60bb      	str	r3, [r7, #8]
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
 8002704:	f04f 0000 	mov.w	r0, #0
 8002708:	f240 113f 	movw	r1, #319	; 0x13f
 800270c:	f7ff fb60 	bl	8001dd0 <LCD_SetCursor>
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
 8002710:	f7ff fba8 	bl	8001e64 <LCD_WriteRAM_Prepare>
  for(index = 0; index < 2400; index++)
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e02f      	b.n	800277c <LCD_DrawMonoPict+0x8c>
  {
    for(i = 0; i < 32; i++)
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	e024      	b.n	800276e <LCD_DrawMonoPict+0x7e>
    {
      if((Pict[index] & (1 << i)) == 0x00)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	18d3      	adds	r3, r2, r3
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f04f 0101 	mov.w	r1, #1
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d109      	bne.n	8002754 <LCD_DrawMonoPict+0x64>
      {
        LCD_WriteRAM(BackColor);
 8002740:	f240 034c 	movw	r3, #76	; 0x4c
 8002744:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002748:	881b      	ldrh	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff fb95 	bl	8001e7c <LCD_WriteRAM>
 8002752:	e008      	b.n	8002766 <LCD_DrawMonoPict+0x76>
      }
      else
      {
        LCD_WriteRAM(TextColor);
 8002754:	f240 0384 	movw	r3, #132	; 0x84
 8002758:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800275c:	881b      	ldrh	r3, [r3, #0]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fb8b 	bl	8001e7c <LCD_WriteRAM>
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
  {
    for(i = 0; i < 32; i++)
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f103 0301 	add.w	r3, r3, #1
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b1f      	cmp	r3, #31
 8002772:	d9d7      	bls.n	8002724 <LCD_DrawMonoPict+0x34>
void LCD_DrawMonoPict(const uint32_t *Pict)
{
  uint32_t index = 0, i = 0;
  LCD_SetCursor(0, (LCD_PIXEL_WIDTH - 1)); 
  LCD_WriteRAM_Prepare(); /* Prepare to write GRAM */
  for(index = 0; index < 2400; index++)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f103 0301 	add.w	r3, r3, #1
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	f640 135f 	movw	r3, #2399	; 0x95f
 8002782:	429a      	cmp	r2, r3
 8002784:	d9ca      	bls.n	800271c <LCD_DrawMonoPict+0x2c>
      {
        LCD_WriteRAM(TextColor);
      }
    }
  }
}
 8002786:	f107 0710 	add.w	r7, r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop

08002790 <LCD_WriteBMP>:
  * @brief  Displays a bitmap picture loaded in the internal Flash.
  * @param  BmpAddress: Bmp picture address in the internal Flash.
  * @retval None
  */
void LCD_WriteBMP(uint32_t BmpAddress)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Set GRAM write direction and BGR = 1 */
  /* I/D = 01 (Horizontal : increment, Vertical : decrement) */
  /* AM = 1 (address is updated in vertical writing direction) */
  LCD_WriteReg(LCD_REG_3, 0x1018);
#endif
}
 8002798:	f107 070c 	add.w	r7, r7, #12
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop

080027a4 <LCD_DrawFullRect>:
  * @param  Height: rectangle height.
  * @param  Width: rectangle width.
  * @retval None
  */
void LCD_DrawFullRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b082      	sub	sp, #8
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	80f8      	strh	r0, [r7, #6]
 80027ac:	80b9      	strh	r1, [r7, #4]
 80027ae:	807a      	strh	r2, [r7, #2]
 80027b0:	803b      	strh	r3, [r7, #0]
  LCD_SetTextColor(TextColor);
 80027b2:	f240 0384 	movw	r3, #132	; 0x84
 80027b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fbf4 	bl	8001fac <LCD_SetTextColor>

  LCD_DrawLine(Xpos, Ypos, Width, LCD_DIR_HORIZONTAL);
 80027c4:	88f9      	ldrh	r1, [r7, #6]
 80027c6:	88ba      	ldrh	r2, [r7, #4]
 80027c8:	887b      	ldrh	r3, [r7, #2]
 80027ca:	4608      	mov	r0, r1
 80027cc:	4611      	mov	r1, r2
 80027ce:	461a      	mov	r2, r3
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	f7ff fdf8 	bl	80023c8 <LCD_DrawLine>
  LCD_DrawLine(Xpos, (Ypos+Height), Width, LCD_DIR_HORIZONTAL);
 80027d8:	88ba      	ldrh	r2, [r7, #4]
 80027da:	883b      	ldrh	r3, [r7, #0]
 80027dc:	18d3      	adds	r3, r2, r3
 80027de:	b29a      	uxth	r2, r3
 80027e0:	88f9      	ldrh	r1, [r7, #6]
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	4608      	mov	r0, r1
 80027e6:	4611      	mov	r1, r2
 80027e8:	461a      	mov	r2, r3
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	f7ff fdeb 	bl	80023c8 <LCD_DrawLine>
  
  LCD_DrawLine(Xpos, Ypos, Height, LCD_DIR_VERTICAL);
 80027f2:	88f9      	ldrh	r1, [r7, #6]
 80027f4:	88ba      	ldrh	r2, [r7, #4]
 80027f6:	883b      	ldrh	r3, [r7, #0]
 80027f8:	4608      	mov	r0, r1
 80027fa:	4611      	mov	r1, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	f04f 0301 	mov.w	r3, #1
 8002802:	f7ff fde1 	bl	80023c8 <LCD_DrawLine>
  LCD_DrawLine((Xpos+Width-1), Ypos, Height, LCD_DIR_VERTICAL);
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	887b      	ldrh	r3, [r7, #2]
 800280a:	18d3      	adds	r3, r2, r3
 800280c:	b29b      	uxth	r3, r3
 800280e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002812:	b299      	uxth	r1, r3
 8002814:	88ba      	ldrh	r2, [r7, #4]
 8002816:	883b      	ldrh	r3, [r7, #0]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	f04f 0301 	mov.w	r3, #1
 8002822:	f7ff fdd1 	bl	80023c8 <LCD_DrawLine>

  Height--;
 8002826:	883b      	ldrh	r3, [r7, #0]
 8002828:	f103 33ff 	add.w	r3, r3, #4294967295
 800282c:	803b      	strh	r3, [r7, #0]
  Ypos++;
 800282e:	88bb      	ldrh	r3, [r7, #4]
 8002830:	f103 0301 	add.w	r3, r3, #1
 8002834:	80bb      	strh	r3, [r7, #4]

  LCD_SetTextColor(BackColor);
 8002836:	f240 034c 	movw	r3, #76	; 0x4c
 800283a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	b29b      	uxth	r3, r3
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fbb2 	bl	8001fac <LCD_SetTextColor>

  while(Height--)
 8002848:	e00d      	b.n	8002866 <LCD_DrawFullRect+0xc2>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);    
 800284a:	88ba      	ldrh	r2, [r7, #4]
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	f103 0301 	add.w	r3, r3, #1
 8002852:	80bb      	strh	r3, [r7, #4]
 8002854:	88f9      	ldrh	r1, [r7, #6]
 8002856:	887b      	ldrh	r3, [r7, #2]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	f04f 0300 	mov.w	r3, #0
 8002862:	f7ff fdb1 	bl	80023c8 <LCD_DrawLine>
  Height--;
  Ypos++;

  LCD_SetTextColor(BackColor);

  while(Height--)
 8002866:	883b      	ldrh	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	bf0c      	ite	eq
 800286c:	2300      	moveq	r3, #0
 800286e:	2301      	movne	r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	883a      	ldrh	r2, [r7, #0]
 8002874:	f102 32ff 	add.w	r2, r2, #4294967295
 8002878:	803a      	strh	r2, [r7, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e5      	bne.n	800284a <LCD_DrawFullRect+0xa6>
  {
    LCD_DrawLine(Xpos, Ypos++, Width, LCD_DIR_HORIZONTAL);    
  }

  LCD_SetTextColor(TextColor);
 800287e:	f240 0384 	movw	r3, #132	; 0x84
 8002882:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fb8e 	bl	8001fac <LCD_SetTextColor>
}
 8002890:	f107 0708 	add.w	r7, r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <LCD_DrawFullCircle>:
  * @param  Ypos: specifies the Y position.
  * @param  Radius
  * @retval None
  */
void LCD_DrawFullCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	4613      	mov	r3, r2
 80028a0:	4602      	mov	r2, r0
 80028a2:	80fa      	strh	r2, [r7, #6]
 80028a4:	460a      	mov	r2, r1
 80028a6:	80ba      	strh	r2, [r7, #4]
 80028a8:	807b      	strh	r3, [r7, #2]
  int32_t  D;    /* Decision Variable */ 
  uint32_t  CurX;/* Current X Value */
  uint32_t  CurY;/* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80028aa:	887b      	ldrh	r3, [r7, #2]
 80028ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028b0:	f1c3 0303 	rsb	r3, r3, #3
 80028b4:	617b      	str	r3, [r7, #20]

  CurX = 0;
 80028b6:	f04f 0300 	mov.w	r3, #0
 80028ba:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 80028bc:	887b      	ldrh	r3, [r7, #2]
 80028be:	60fb      	str	r3, [r7, #12]
  
  LCD_SetTextColor(BackColor);
 80028c0:	f240 034c 	movw	r3, #76	; 0x4c
 80028c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fb6d 	bl	8001fac <LCD_SetTextColor>

  while (CurX <= CurY)
 80028d2:	e07b      	b.n	80029cc <LCD_DrawFullCircle+0x134>
  {
    if(CurY > 0) 
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d02b      	beq.n	8002932 <LCD_DrawFullCircle+0x9a>
    {
      LCD_DrawLine(Xpos - CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	88fa      	ldrh	r2, [r7, #6]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	b299      	uxth	r1, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	88bb      	ldrh	r3, [r7, #4]
 80028ea:	18d3      	adds	r3, r2, r3
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4608      	mov	r0, r1
 80028fa:	4611      	mov	r1, r2
 80028fc:	461a      	mov	r2, r3
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	f7ff fd61 	bl	80023c8 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurX, Ypos + CurY, 2*CurY, LCD_DIR_HORIZONTAL);
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	b29a      	uxth	r2, r3
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	b299      	uxth	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b29a      	uxth	r2, r3
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	18d3      	adds	r3, r2, r3
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	b29b      	uxth	r3, r3
 800291e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002922:	b29b      	uxth	r3, r3
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	f04f 0300 	mov.w	r3, #0
 800292e:	f7ff fd4b 	bl	80023c8 <LCD_DrawLine>
    }

    if(CurX > 0) 
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d02b      	beq.n	8002990 <LCD_DrawFullCircle+0xf8>
    {
      LCD_DrawLine(Xpos - CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	b29b      	uxth	r3, r3
 800293c:	88fa      	ldrh	r2, [r7, #6]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	b299      	uxth	r1, r3
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	b29a      	uxth	r2, r3
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	18d3      	adds	r3, r2, r3
 800294a:	b29a      	uxth	r2, r3
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	b29b      	uxth	r3, r3
 8002950:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	4608      	mov	r0, r1
 8002958:	4611      	mov	r1, r2
 800295a:	461a      	mov	r2, r3
 800295c:	f04f 0300 	mov.w	r3, #0
 8002960:	f7ff fd32 	bl	80023c8 <LCD_DrawLine>
      LCD_DrawLine(Xpos + CurY, Ypos + CurX, 2*CurX, LCD_DIR_HORIZONTAL);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	b29a      	uxth	r2, r3
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	18d3      	adds	r3, r2, r3
 800296c:	b299      	uxth	r1, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	b29a      	uxth	r2, r3
 8002972:	88bb      	ldrh	r3, [r7, #4]
 8002974:	18d3      	adds	r3, r2, r3
 8002976:	b29a      	uxth	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	b29b      	uxth	r3, r3
 800297c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002980:	b29b      	uxth	r3, r3
 8002982:	4608      	mov	r0, r1
 8002984:	4611      	mov	r1, r2
 8002986:	461a      	mov	r2, r3
 8002988:	f04f 0300 	mov.w	r3, #0
 800298c:	f7ff fd1c 	bl	80023c8 <LCD_DrawLine>
    }
    if (D < 0)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	da08      	bge.n	80029a8 <LCD_DrawFullCircle+0x110>
    { 
      D += (CurX << 2) + 6;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	18d3      	adds	r3, r2, r3
 80029a0:	f103 0306 	add.w	r3, r3, #6
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	e00d      	b.n	80029c4 <LCD_DrawFullCircle+0x12c>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	18d3      	adds	r3, r2, r3
 80029b6:	f103 030a 	add.w	r3, r3, #10
 80029ba:	617b      	str	r3, [r7, #20]
      CurY--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f103 33ff 	add.w	r3, r3, #4294967295
 80029c2:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f103 0301 	add.w	r3, r3, #1
 80029ca:	613b      	str	r3, [r7, #16]
  CurX = 0;
  CurY = Radius;
  
  LCD_SetTextColor(BackColor);

  while (CurX <= CurY)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f67f af7f 	bls.w	80028d4 <LCD_DrawFullCircle+0x3c>
      CurY--;
    }
    CurX++;
  }

  LCD_SetTextColor(TextColor);
 80029d6:	f240 0384 	movw	r3, #132	; 0x84
 80029da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80029de:	881b      	ldrh	r3, [r3, #0]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fae2 	bl	8001fac <LCD_SetTextColor>
  LCD_DrawCircle(Xpos, Ypos, Radius);
 80029e8:	88f9      	ldrh	r1, [r7, #6]
 80029ea:	88ba      	ldrh	r2, [r7, #4]
 80029ec:	887b      	ldrh	r3, [r7, #2]
 80029ee:	4608      	mov	r0, r1
 80029f0:	4611      	mov	r1, r2
 80029f2:	461a      	mov	r2, r3
 80029f4:	f7ff fd78 	bl	80024e8 <LCD_DrawCircle>
}
 80029f8:	f107 0718 	add.w	r7, r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <LCD_DrawUniLine>:
  * @param  x2: specifies the point 2 x position.
  * @param  y2: specifies the point 2 y position.
  * @retval None
  */
void LCD_DrawUniLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	80f8      	strh	r0, [r7, #6]
 8002a08:	80b9      	strh	r1, [r7, #4]
 8002a0a:	807a      	strh	r2, [r7, #2]
 8002a0c:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002a0e:	f04f 0300 	mov.w	r3, #0
 8002a12:	823b      	strh	r3, [r7, #16]
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	81fb      	strh	r3, [r7, #14]
 8002a1a:	f04f 0300 	mov.w	r3, #0
 8002a1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	83fb      	strh	r3, [r7, #30]
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	83bb      	strh	r3, [r7, #28]
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	837b      	strh	r3, [r7, #26]
 8002a44:	f04f 0300 	mov.w	r3, #0
 8002a48:	833b      	strh	r3, [r7, #24]
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	82fb      	strh	r3, [r7, #22]
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002a5c:	887a      	ldrh	r2, [r7, #2]
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002a6a:	883a      	ldrh	r2, [r7, #0]
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bfb8      	it	lt
 8002a74:	425b      	neglt	r3, r3
 8002a76:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002a7c:	88bb      	ldrh	r3, [r7, #4]
 8002a7e:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002a80:	887a      	ldrh	r2, [r7, #2]
 8002a82:	88fb      	ldrh	r3, [r7, #6]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d306      	bcc.n	8002a96 <LCD_DrawUniLine+0x96>
  {
    xinc1 = 1;
 8002a88:	f04f 0301 	mov.w	r3, #1
 8002a8c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002a8e:	f04f 0301 	mov.w	r3, #1
 8002a92:	843b      	strh	r3, [r7, #32]
 8002a94:	e005      	b.n	8002aa2 <LCD_DrawUniLine+0xa2>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a9a:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa0:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002aa2:	883a      	ldrh	r2, [r7, #0]
 8002aa4:	88bb      	ldrh	r3, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d306      	bcc.n	8002ab8 <LCD_DrawUniLine+0xb8>
  {
    yinc1 = 1;
 8002aaa:	f04f 0301 	mov.w	r3, #1
 8002aae:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002ab0:	f04f 0301 	mov.w	r3, #1
 8002ab4:	83bb      	strh	r3, [r7, #28]
 8002ab6:	e005      	b.n	8002ac4 <LCD_DrawUniLine+0xc4>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002abc:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac2:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002ac4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002ac8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	db14      	blt.n	8002afa <LCD_DrawUniLine+0xfa>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002adc:	8a3b      	ldrh	r3, [r7, #16]
 8002ade:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002ae0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ae4:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 8002ae8:	18d3      	adds	r3, r2, r3
 8002aea:	ea4f 0363 	mov.w	r3, r3, asr #1
 8002aee:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002af4:	8a3b      	ldrh	r3, [r7, #16]
 8002af6:	82bb      	strh	r3, [r7, #20]
 8002af8:	e013      	b.n	8002b22 <LCD_DrawUniLine+0x122>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002b0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b0e:	ea4f 72d3 	mov.w	r2, r3, lsr #31
 8002b12:	18d3      	adds	r3, r2, r3
 8002b14:	ea4f 0363 	mov.w	r3, r3, asr #1
 8002b18:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002b1a:	8a3b      	ldrh	r3, [r7, #16]
 8002b1c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	827b      	strh	r3, [r7, #18]
 8002b28:	e02f      	b.n	8002b8a <LCD_DrawUniLine+0x18a>
  {
    PutPixel(x, y);             /* Draw the current pixel */
 8002b2a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8002b2e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f7ff fad1 	bl	80020dc <PutPixel>
    num += numadd;              /* Increase the numerator by the top of the fraction */
 8002b3a:	8b3a      	ldrh	r2, [r7, #24]
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	18d3      	adds	r3, r2, r3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002b44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	db0e      	blt.n	8002b6e <LCD_DrawUniLine+0x16e>
    {
      num -= den;               /* Calculate the new numerator value */
 8002b50:	8b3a      	ldrh	r2, [r7, #24]
 8002b52:	8b7b      	ldrh	r3, [r7, #26]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8002b5a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002b5e:	18d3      	adds	r3, r2, r3
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8002b64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b66:	8bfb      	ldrh	r3, [r7, #30]
 8002b68:	18d3      	adds	r3, r2, r3
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8002b6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002b70:	8c3b      	ldrh	r3, [r7, #32]
 8002b72:	18d3      	adds	r3, r2, r3
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8002b78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b7a:	8bbb      	ldrh	r3, [r7, #28]
 8002b7c:	18d3      	adds	r3, r2, r3
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	84bb      	strh	r3, [r7, #36]	; 0x24
    num = deltay / 2;
    numadd = deltax;
    numpixels = deltay;         /* There are more y-values than x-values */
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002b82:	8a7b      	ldrh	r3, [r7, #18]
 8002b84:	f103 0301 	add.w	r3, r3, #1
 8002b88:	827b      	strh	r3, [r7, #18]
 8002b8a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002b8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	ddc9      	ble.n	8002b2a <LCD_DrawUniLine+0x12a>
      y += yinc1;               /* Change the y as appropriate */
    }
    x += xinc2;                 /* Change the x as appropriate */
    y += yinc2;                 /* Change the y as appropriate */
  }
}
 8002b96:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop

08002ba0 <LCD_PolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLine(pPoint Points, uint16_t PointCount)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8002bac:	f04f 0300 	mov.w	r3, #0
 8002bb0:	81fb      	strh	r3, [r7, #14]
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8002bb8:	887b      	ldrh	r3, [r7, #2]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d814      	bhi.n	8002be8 <LCD_PolyLine+0x48>
  {
    return;
 8002bbe:	e01a      	b.n	8002bf6 <LCD_PolyLine+0x56>
  }

  while(--PointCount)
  {
    X = Points->X;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	881b      	ldrh	r3, [r3, #0]
 8002bc4:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	885b      	ldrh	r3, [r3, #2]
 8002bca:	81bb      	strh	r3, [r7, #12]
    Points++;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f103 0304 	add.w	r3, r3, #4
 8002bd2:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
 8002bd4:	89f8      	ldrh	r0, [r7, #14]
 8002bd6:	89b9      	ldrh	r1, [r7, #12]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	885b      	ldrh	r3, [r3, #2]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f7ff ff0c 	bl	8002a00 <LCD_DrawUniLine>
  if(PointCount < 2)
  {
    return;
  }

  while(--PointCount)
 8002be8:	887b      	ldrh	r3, [r7, #2]
 8002bea:	f103 33ff 	add.w	r3, r3, #4294967295
 8002bee:	807b      	strh	r3, [r7, #2]
 8002bf0:	887b      	ldrh	r3, [r7, #2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1e4      	bne.n	8002bc0 <LCD_PolyLine+0x20>
    X = Points->X;
    Y = Points->Y;
    Points++;
    LCD_DrawUniLine(X, Y, Points->X, Points->Y);
  }
}
 8002bf6:	f107 0710 	add.w	r7, r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <LCD_PolyLineRelativeClosed>:
  * @param  Closed: specifies if the draw is closed or not.
  *           1: closed, 0 : not closed.
  * @retval None
  */
static void LCD_PolyLineRelativeClosed(pPoint Points, uint16_t PointCount, uint16_t Closed)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	460a      	mov	r2, r1
 8002c0c:	807a      	strh	r2, [r7, #2]
 8002c0e:	803b      	strh	r3, [r7, #0]
  int16_t X = 0, Y = 0;
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	81fb      	strh	r3, [r7, #14]
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	81bb      	strh	r3, [r7, #12]
  pPoint First = Points;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	60bb      	str	r3, [r7, #8]

  if(PointCount < 2)
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d93d      	bls.n	8002ca2 <LCD_PolyLineRelativeClosed+0xa2>
  {
    return;
  }  
  X = Points->X;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	81fb      	strh	r3, [r7, #14]
  Y = Points->Y;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	885b      	ldrh	r3, [r3, #2]
 8002c30:	81bb      	strh	r3, [r7, #12]
  while(--PointCount)
 8002c32:	e021      	b.n	8002c78 <LCD_PolyLineRelativeClosed+0x78>
  {
    Points++;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0304 	add.w	r3, r3, #4
 8002c3a:	607b      	str	r3, [r7, #4]
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
 8002c3c:	89f8      	ldrh	r0, [r7, #14]
 8002c3e:	89b9      	ldrh	r1, [r7, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	89fb      	ldrh	r3, [r7, #14]
 8002c48:	18d3      	adds	r3, r2, r3
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	885b      	ldrh	r3, [r3, #2]
 8002c50:	b29c      	uxth	r4, r3
 8002c52:	89bb      	ldrh	r3, [r7, #12]
 8002c54:	18e3      	adds	r3, r4, r3
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	f7ff fed2 	bl	8002a00 <LCD_DrawUniLine>
    X = X + Points->X;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	89fb      	ldrh	r3, [r7, #14]
 8002c64:	18d3      	adds	r3, r2, r3
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	81fb      	strh	r3, [r7, #14]
    Y = Y + Points->Y;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	885b      	ldrh	r3, [r3, #2]
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	89bb      	ldrh	r3, [r7, #12]
 8002c72:	18d3      	adds	r3, r2, r3
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	81bb      	strh	r3, [r7, #12]
  {
    return;
  }  
  X = Points->X;
  Y = Points->Y;
  while(--PointCount)
 8002c78:	887b      	ldrh	r3, [r7, #2]
 8002c7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8002c7e:	807b      	strh	r3, [r7, #2]
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1d6      	bne.n	8002c34 <LCD_PolyLineRelativeClosed+0x34>
    Points++;
    LCD_DrawUniLine(X, Y, X + Points->X, Y + Points->Y);
    X = X + Points->X;
    Y = Y + Points->Y;
  }
  if(Closed)
 8002c86:	883b      	ldrh	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d00b      	beq.n	8002ca4 <LCD_PolyLineRelativeClosed+0xa4>
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	b298      	uxth	r0, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	885b      	ldrh	r3, [r3, #2]
 8002c96:	b299      	uxth	r1, r3
 8002c98:	89fa      	ldrh	r2, [r7, #14]
 8002c9a:	89bb      	ldrh	r3, [r7, #12]
 8002c9c:	f7ff feb0 	bl	8002a00 <LCD_DrawUniLine>
 8002ca0:	e000      	b.n	8002ca4 <LCD_PolyLineRelativeClosed+0xa4>
  int16_t X = 0, Y = 0;
  pPoint First = Points;

  if(PointCount < 2)
  {
    return;
 8002ca2:	bf00      	nop
  }
  if(Closed)
  {
    LCD_DrawUniLine(First->X, First->Y, X, Y);
  }  
}
 8002ca4:	f107 0714 	add.w	r7, r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd90      	pop	{r4, r7, pc}

08002cac <LCD_ClosedPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLine(pPoint Points, uint16_t PointCount)
{
 8002cac:	b590      	push	{r4, r7, lr}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	807b      	strh	r3, [r7, #2]
  LCD_PolyLine(Points, PointCount);
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	f7ff ff6f 	bl	8002ba0 <LCD_PolyLine>
  LCD_DrawUniLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	881b      	ldrh	r3, [r3, #0]
 8002cc6:	b298      	uxth	r0, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	885b      	ldrh	r3, [r3, #2]
 8002ccc:	b299      	uxth	r1, r3
 8002cce:	887b      	ldrh	r3, [r7, #2]
 8002cd0:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	18d3      	adds	r3, r2, r3
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ce6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002cea:	687c      	ldr	r4, [r7, #4]
 8002cec:	18e3      	adds	r3, r4, r3
 8002cee:	885b      	ldrh	r3, [r3, #2]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f7ff fe85 	bl	8002a00 <LCD_DrawUniLine>
}
 8002cf6:	f107 070c 	add.w	r7, r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
 8002cfe:	bf00      	nop

08002d00 <LCD_PolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_PolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 0);
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f7ff ff73 	bl	8002c00 <LCD_PolyLineRelativeClosed>
}
 8002d1a:	f107 0708 	add.w	r7, r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop

08002d24 <LCD_ClosedPolyLineRelative>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_ClosedPolyLineRelative(pPoint Points, uint16_t PointCount)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
  LCD_PolyLineRelativeClosed(Points, PointCount, 1);
 8002d30:	887b      	ldrh	r3, [r7, #2]
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f04f 0201 	mov.w	r2, #1
 8002d3a:	f7ff ff61 	bl	8002c00 <LCD_PolyLineRelativeClosed>
}
 8002d3e:	f107 0708 	add.w	r7, r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <LCD_FillPolyLine>:
  * @param  Points: pointer to the points array.
  * @param  PointCount: Number of points.
  * @retval None
  */
void LCD_FillPolyLine(pPoint Points, uint16_t PointCount)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	b0ed      	sub	sp, #436	; 0x1b4
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	f107 0304 	add.w	r3, r7, #4
 8002d52:	6018      	str	r0, [r3, #0]
 8002d54:	460b      	mov	r3, r1
 8002d56:	461a      	mov	r2, r3
 8002d58:	f107 0302 	add.w	r3, r7, #2
 8002d5c:	801a      	strh	r2, [r3, #0]
  /*  public-domain code by Darel Rex Finley, 2007 */
  uint16_t  nodes = 0, nodeX[MAX_POLY_CORNERS], pixelX = 0, pixelY = 0, i = 0,
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
  j = 0, swap = 0;
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
 8002dae:	f107 0304 	add.w	r3, r7, #4
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
 8002dba:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8002dbe:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;
 8002dc2:	f107 0304 	add.w	r3, r7, #4
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	885b      	ldrh	r3, [r3, #2]
 8002dca:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
 8002dce:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8002dd2:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2

  for(i = 1; i < PointCount; i++)
 8002dd6:	f04f 0301 	mov.w	r3, #1
 8002dda:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002dde:	e043      	b.n	8002e68 <LCD_FillPolyLine+0x120>
  {
    pixelX = POLY_X(i);
 8002de0:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002de4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002de8:	f107 0204 	add.w	r2, r7, #4
 8002dec:	6812      	ldr	r2, [r2, #0]
 8002dee:	18d3      	adds	r3, r2, r3
 8002df0:	885b      	ldrh	r3, [r3, #2]
 8002df2:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
    if(pixelX < IMAGE_LEFT)
 8002df6:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8002dfa:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d203      	bcs.n	8002e0a <LCD_FillPolyLine+0xc2>
    {
      IMAGE_LEFT = pixelX;
 8002e02:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8002e06:	f8a7 31a6 	strh.w	r3, [r7, #422]	; 0x1a6
    }
    if(pixelX > IMAGE_RIGHT)
 8002e0a:	f8b7 219e 	ldrh.w	r2, [r7, #414]	; 0x19e
 8002e0e:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d903      	bls.n	8002e1e <LCD_FillPolyLine+0xd6>
    {
      IMAGE_RIGHT = pixelX;
 8002e16:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
 8002e1a:	f8a7 31a4 	strh.w	r3, [r7, #420]	; 0x1a4
    }
    
    pixelY = POLY_Y(i);
 8002e1e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002e22:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002e26:	f107 0204 	add.w	r2, r7, #4
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	18d3      	adds	r3, r2, r3
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
    if(pixelY < IMAGE_TOP)
 8002e34:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8002e38:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d203      	bcs.n	8002e48 <LCD_FillPolyLine+0x100>
    { 
      IMAGE_TOP = pixelY;
 8002e40:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002e44:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
    }
    if(pixelY > IMAGE_BOTTOM)
 8002e48:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8002e4c:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d903      	bls.n	8002e5c <LCD_FillPolyLine+0x114>
    {
      IMAGE_BOTTOM = pixelY;
 8002e54:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002e58:	f8a7 31a0 	strh.w	r3, [r7, #416]	; 0x1a0
  uint16_t  IMAGE_LEFT = 0, IMAGE_RIGHT = 0, IMAGE_TOP = 0, IMAGE_BOTTOM = 0;

  IMAGE_LEFT = IMAGE_RIGHT = Points->X;
  IMAGE_TOP= IMAGE_BOTTOM = Points->Y;

  for(i = 1; i < PointCount; i++)
 8002e5c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002e60:	f103 0301 	add.w	r3, r3, #1
 8002e64:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002e68:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8002e6c:	f107 0302 	add.w	r3, r7, #2
 8002e70:	881b      	ldrh	r3, [r3, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d3b4      	bcc.n	8002de0 <LCD_FillPolyLine+0x98>
    {
      IMAGE_BOTTOM = pixelY;
    }
  }
  
  LCD_SetTextColor(BackColor);  
 8002e76:	f240 034c 	movw	r3, #76	; 0x4c
 8002e7a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff f892 	bl	8001fac <LCD_SetTextColor>

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 8002e88:	f8b7 31a2 	ldrh.w	r3, [r7, #418]	; 0x1a2
 8002e8c:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 8002e90:	e209      	b.n	80032a6 <LCD_FillPolyLine+0x55e>
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
 8002e9a:	f107 0302 	add.w	r3, r7, #2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	f103 33ff 	add.w	r3, r3, #4294967295
 8002ea4:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8

    for (i = 0; i < PointCount; i++) 
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8002eb0:	e0f6      	b.n	80030a0 <LCD_FillPolyLine+0x358>
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 8002eb2:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002eb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002eba:	f107 0204 	add.w	r2, r7, #4
 8002ebe:	6812      	ldr	r2, [r2, #0]
 8002ec0:	18d3      	adds	r3, r2, r3
 8002ec2:	881b      	ldrh	r3, [r3, #0]
 8002ec4:	b21b      	sxth	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd faee 	bl	80004a8 <__aeabi_i2d>
 8002ecc:	4604      	mov	r4, r0
 8002ece:	460d      	mov	r5, r1
 8002ed0:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fad7 	bl	8000488 <__aeabi_ui2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	f04f 0101 	mov.w	r1, #1
 8002ee2:	460e      	mov	r6, r1
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd fba4 	bl	8000634 <__aeabi_dcmplt>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <LCD_FillPolyLine+0x1b0>
 8002ef2:	f04f 0300 	mov.w	r3, #0
 8002ef6:	461e      	mov	r6, r3
 8002ef8:	b2f3      	uxtb	r3, r6
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d025      	beq.n	8002f4a <LCD_FillPolyLine+0x202>
 8002efe:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002f02:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f06:	f107 0204 	add.w	r2, r7, #4
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	881b      	ldrh	r3, [r3, #0]
 8002f10:	b21b      	sxth	r3, r3
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fac8 	bl	80004a8 <__aeabi_i2d>
 8002f18:	4604      	mov	r4, r0
 8002f1a:	460d      	mov	r5, r1
 8002f1c:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fab1 	bl	8000488 <__aeabi_ui2d>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	f04f 0101 	mov.w	r1, #1
 8002f2e:	460e      	mov	r6, r1
 8002f30:	4620      	mov	r0, r4
 8002f32:	4629      	mov	r1, r5
 8002f34:	f7fd fb92 	bl	800065c <__aeabi_dcmpge>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <LCD_FillPolyLine+0x1fc>
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	461e      	mov	r6, r3
 8002f44:	b2f3      	uxtb	r3, r6
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d14b      	bne.n	8002fe2 <LCD_FillPolyLine+0x29a>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 8002f4a:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8002f4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f52:	f107 0204 	add.w	r2, r7, #4
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	18d3      	adds	r3, r2, r3
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b21b      	sxth	r3, r3
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd faa2 	bl	80004a8 <__aeabi_i2d>
 8002f64:	4604      	mov	r4, r0
 8002f66:	460d      	mov	r5, r1
 8002f68:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fd fa8b 	bl	8000488 <__aeabi_ui2d>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	f04f 0101 	mov.w	r1, #1
 8002f7a:	460e      	mov	r6, r1
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4629      	mov	r1, r5
 8002f80:	f7fd fb58 	bl	8000634 <__aeabi_dcmplt>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d102      	bne.n	8002f90 <LCD_FillPolyLine+0x248>
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	461e      	mov	r6, r3
 8002f90:	b2f3      	uxtb	r3, r6
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
    {
      if (((POLY_Y(i)<(double) pixelY) && (POLY_Y(j)>=(double) pixelY)) || \
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d07a      	beq.n	800308c <LCD_FillPolyLine+0x344>
          ((POLY_Y(j)<(double) pixelY) && (POLY_Y(i)>=(double) pixelY)))
 8002f96:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002f9a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002f9e:	f107 0204 	add.w	r2, r7, #4
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	18d3      	adds	r3, r2, r3
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fa7c 	bl	80004a8 <__aeabi_i2d>
 8002fb0:	4604      	mov	r4, r0
 8002fb2:	460d      	mov	r5, r1
 8002fb4:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7fd fa65 	bl	8000488 <__aeabi_ui2d>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	f04f 0101 	mov.w	r1, #1
 8002fc6:	460e      	mov	r6, r1
 8002fc8:	4620      	mov	r0, r4
 8002fca:	4629      	mov	r1, r5
 8002fcc:	f7fd fb46 	bl	800065c <__aeabi_dcmpge>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <LCD_FillPolyLine+0x294>
 8002fd6:	f04f 0300 	mov.w	r3, #0
 8002fda:	461e      	mov	r6, r3
 8002fdc:	b2f3      	uxtb	r3, r6
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d054      	beq.n	800308c <LCD_FillPolyLine+0x344>
      {
        nodeX[nodes++]=(int) (POLY_X(i)+((pixelY-POLY_Y(i))*(POLY_X(j)-POLY_X(i)))/(POLY_Y(j)-POLY_Y(i))); 
 8002fe2:	f8b7 21ae 	ldrh.w	r2, [r7, #430]	; 0x1ae
 8002fe6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8002fea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002fee:	f107 0104 	add.w	r1, r7, #4
 8002ff2:	6809      	ldr	r1, [r1, #0]
 8002ff4:	18cb      	adds	r3, r1, r3
 8002ff6:	885b      	ldrh	r3, [r3, #2]
 8002ff8:	b299      	uxth	r1, r3
 8002ffa:	f8b7 01ac 	ldrh.w	r0, [r7, #428]	; 0x1ac
 8002ffe:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003002:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003006:	f107 0404 	add.w	r4, r7, #4
 800300a:	6824      	ldr	r4, [r4, #0]
 800300c:	18e3      	adds	r3, r4, r3
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b21b      	sxth	r3, r3
 8003012:	1ac3      	subs	r3, r0, r3
 8003014:	f8b7 01a8 	ldrh.w	r0, [r7, #424]	; 0x1a8
 8003018:	ea4f 0080 	mov.w	r0, r0, lsl #2
 800301c:	f107 0404 	add.w	r4, r7, #4
 8003020:	6824      	ldr	r4, [r4, #0]
 8003022:	1820      	adds	r0, r4, r0
 8003024:	8840      	ldrh	r0, [r0, #2]
 8003026:	b204      	sxth	r4, r0
 8003028:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 800302c:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8003030:	f107 0504 	add.w	r5, r7, #4
 8003034:	682d      	ldr	r5, [r5, #0]
 8003036:	1828      	adds	r0, r5, r0
 8003038:	8840      	ldrh	r0, [r0, #2]
 800303a:	b200      	sxth	r0, r0
 800303c:	1a20      	subs	r0, r4, r0
 800303e:	fb00 f003 	mul.w	r0, r0, r3
 8003042:	f8b7 31a8 	ldrh.w	r3, [r7, #424]	; 0x1a8
 8003046:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800304a:	f107 0404 	add.w	r4, r7, #4
 800304e:	6824      	ldr	r4, [r4, #0]
 8003050:	18e3      	adds	r3, r4, r3
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b21c      	sxth	r4, r3
 8003056:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800305a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800305e:	f107 0504 	add.w	r5, r7, #4
 8003062:	682d      	ldr	r5, [r5, #0]
 8003064:	18eb      	adds	r3, r5, r3
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b21b      	sxth	r3, r3
 800306a:	1ae3      	subs	r3, r4, r3
 800306c:	fb90 f3f3 	sdiv	r3, r0, r3
 8003070:	b29b      	uxth	r3, r3
 8003072:	18cb      	adds	r3, r1, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	f107 030c 	add.w	r3, r7, #12
 800307c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003080:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8003084:	f103 0301 	add.w	r3, r3, #1
 8003088:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
      }
      j = i; 
 800308c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003090:	f8a7 31a8 	strh.w	r3, [r7, #424]	; 0x1a8
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
  {  
    /* Build a list of nodes. */
    nodes = 0; j = PointCount-1;

    for (i = 0; i < PointCount; i++) 
 8003094:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003098:	f103 0301 	add.w	r3, r3, #1
 800309c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 80030a0:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80030a4:	f107 0302 	add.w	r3, r7, #2
 80030a8:	881b      	ldrh	r3, [r3, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	f4ff af01 	bcc.w	8002eb2 <LCD_FillPolyLine+0x16a>
      }
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
    while (i < nodes-1) 
 80030b8:	e041      	b.n	800313e <LCD_FillPolyLine+0x3f6>
    {
      if (nodeX[i]>nodeX[i+1]) 
 80030ba:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80030be:	f107 030c 	add.w	r3, r7, #12
 80030c2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80030c6:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80030ca:	f103 0101 	add.w	r1, r3, #1
 80030ce:	f107 030c 	add.w	r3, r7, #12
 80030d2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d92b      	bls.n	8003132 <LCD_FillPolyLine+0x3ea>
      {
        swap = nodeX[i]; 
 80030da:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80030e6:	f8a7 319c 	strh.w	r3, [r7, #412]	; 0x19c
        nodeX[i] = nodeX[i+1]; 
 80030ea:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 80030ee:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80030f2:	f103 0101 	add.w	r1, r3, #1
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80030fe:	4619      	mov	r1, r3
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        nodeX[i+1] = swap; 
 8003108:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 800310c:	f103 0201 	add.w	r2, r3, #1
 8003110:	f8b7 119c 	ldrh.w	r1, [r7, #412]	; 0x19c
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if(i)
 800311c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <LCD_FillPolyLine+0x3f6>
        {
          i--; 
 8003124:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003128:	f103 33ff 	add.w	r3, r3, #4294967295
 800312c:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003130:	e005      	b.n	800313e <LCD_FillPolyLine+0x3f6>
        }
      }
      else 
      {
        i++;
 8003132:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003136:	f103 0301 	add.w	r3, r3, #1
 800313a:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
      j = i; 
    }
  
    /* Sort the nodes, via a simple "Bubble" sort. */
    i = 0;
    while (i < nodes-1) 
 800313e:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 8003142:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8003146:	f103 33ff 	add.w	r3, r3, #4294967295
 800314a:	429a      	cmp	r2, r3
 800314c:	dbb5      	blt.n	80030ba <LCD_FillPolyLine+0x372>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003156:	e097      	b.n	8003288 <LCD_FillPolyLine+0x540>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
 8003158:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800315c:	f107 030c 	add.w	r3, r7, #12
 8003160:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003164:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 8003168:	429a      	cmp	r2, r3
 800316a:	f240 8095 	bls.w	8003298 <LCD_FillPolyLine+0x550>
      {
        break;
      }
      if(nodeX[i+1] > IMAGE_LEFT) 
 800316e:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003172:	f103 0201 	add.w	r2, r3, #1
 8003176:	f107 030c 	add.w	r3, r7, #12
 800317a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800317e:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8003182:	429a      	cmp	r2, r3
 8003184:	d27a      	bcs.n	800327c <LCD_FillPolyLine+0x534>
      {
        if (nodeX[i] < IMAGE_LEFT)
 8003186:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800318a:	f107 030c 	add.w	r3, r7, #12
 800318e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003192:	f8b7 21a6 	ldrh.w	r2, [r7, #422]	; 0x1a6
 8003196:	429a      	cmp	r2, r3
 8003198:	d907      	bls.n	80031aa <LCD_FillPolyLine+0x462>
        {
          nodeX[i]=IMAGE_LEFT;
 800319a:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800319e:	f8b7 11a6 	ldrh.w	r1, [r7, #422]	; 0x1a6
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        if(nodeX[i+1] > IMAGE_RIGHT)
 80031aa:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80031ae:	f103 0201 	add.w	r2, r3, #1
 80031b2:	f107 030c 	add.w	r3, r7, #12
 80031b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031ba:	f8b7 21a4 	ldrh.w	r2, [r7, #420]	; 0x1a4
 80031be:	429a      	cmp	r2, r3
 80031c0:	d209      	bcs.n	80031d6 <LCD_FillPolyLine+0x48e>
        {
          nodeX[i+1] = IMAGE_RIGHT;
 80031c2:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80031c6:	f103 0201 	add.w	r2, r3, #1
 80031ca:	f8b7 11a4 	ldrh.w	r1, [r7, #420]	; 0x1a4
 80031ce:	f107 030c 	add.w	r3, r7, #12
 80031d2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        LCD_SetTextColor(BackColor);
 80031d6:	f240 034c 	movw	r3, #76	; 0x4c
 80031da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fee2 	bl	8001fac <LCD_SetTextColor>
        LCD_DrawLine(pixelY, nodeX[i+1], nodeX[i+1] - nodeX[i], LCD_DIR_HORIZONTAL);
 80031e8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80031ec:	f103 0201 	add.w	r2, r3, #1
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80031f8:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 80031fc:	f103 0101 	add.w	r1, r3, #1
 8003200:	f107 030c 	add.w	r3, r7, #12
 8003204:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8003208:	f8b7 01aa 	ldrh.w	r0, [r7, #426]	; 0x1aa
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8003214:	1acb      	subs	r3, r1, r3
 8003216:	b29b      	uxth	r3, r3
 8003218:	f8b7 11ac 	ldrh.w	r1, [r7, #428]	; 0x1ac
 800321c:	4608      	mov	r0, r1
 800321e:	4611      	mov	r1, r2
 8003220:	461a      	mov	r2, r3
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	f7ff f8cf 	bl	80023c8 <LCD_DrawLine>
        LCD_SetTextColor(TextColor);
 800322a:	f240 0384 	movw	r3, #132	; 0x84
 800322e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe feb8 	bl	8001fac <LCD_SetTextColor>
        PutPixel(pixelY, nodeX[i+1]);
 800323c:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8003240:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003244:	f103 0101 	add.w	r1, r3, #1
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8003250:	b29b      	uxth	r3, r3
 8003252:	b212      	sxth	r2, r2
 8003254:	b21b      	sxth	r3, r3
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fe ff3f 	bl	80020dc <PutPixel>
        PutPixel(pixelY, nodeX[i]);
 800325e:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 8003262:	f8b7 11aa 	ldrh.w	r1, [r7, #426]	; 0x1aa
 8003266:	f107 030c 	add.w	r3, r7, #12
 800326a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800326e:	b29b      	uxth	r3, r3
 8003270:	b212      	sxth	r2, r2
 8003272:	b21b      	sxth	r3, r3
 8003274:	4610      	mov	r0, r2
 8003276:	4619      	mov	r1, r3
 8003278:	f7fe ff30 	bl	80020dc <PutPixel>
        i++;
      }
    }
  
    /*  Fill the pixels between node pairs. */
    for (i = 0; i < nodes; i+=2) 
 800327c:	f8b7 31aa 	ldrh.w	r3, [r7, #426]	; 0x1aa
 8003280:	f103 0302 	add.w	r3, r3, #2
 8003284:	f8a7 31aa 	strh.w	r3, [r7, #426]	; 0x1aa
 8003288:	f8b7 21aa 	ldrh.w	r2, [r7, #426]	; 0x1aa
 800328c:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8003290:	429a      	cmp	r2, r3
 8003292:	f4ff af61 	bcc.w	8003158 <LCD_FillPolyLine+0x410>
 8003296:	e000      	b.n	800329a <LCD_FillPolyLine+0x552>
    {
      if(nodeX[i] >= IMAGE_RIGHT) 
      {
        break;
 8003298:	bf00      	nop
  }
  
  LCD_SetTextColor(BackColor);  

  /*  Loop through the rows of the image. */
  for (pixelY = IMAGE_TOP; pixelY < IMAGE_BOTTOM; pixelY++) 
 800329a:	f8b7 31ac 	ldrh.w	r3, [r7, #428]	; 0x1ac
 800329e:	f103 0301 	add.w	r3, r3, #1
 80032a2:	f8a7 31ac 	strh.w	r3, [r7, #428]	; 0x1ac
 80032a6:	f8b7 21ac 	ldrh.w	r2, [r7, #428]	; 0x1ac
 80032aa:	f8b7 31a0 	ldrh.w	r3, [r7, #416]	; 0x1a0
 80032ae:	429a      	cmp	r2, r3
 80032b0:	f4ff adef 	bcc.w	8002e92 <LCD_FillPolyLine+0x14a>
        /* for (j=nodeX[i]; j<nodeX[i+1]; j++) PutPixel(j,pixelY); */
      }
    }
  } 
  /* draw the edges */
  LCD_SetTextColor(TextColor);
 80032b4:	f240 0384 	movw	r3, #132	; 0x84
 80032b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7fe fe73 	bl	8001fac <LCD_SetTextColor>
}
 80032c6:	f507 77da 	add.w	r7, r7, #436	; 0x1b4
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ce:	bf00      	nop

080032d0 <delay>:
  * @brief  Inserts a delay time.
  * @param  nCount: specifies the delay time length.
  * @retval None
  */
static void delay(__IO uint32_t nCount)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t index = 0; 
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	60fb      	str	r3, [r7, #12]
  for(index = (10000 * nCount); index != 0; index--)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f242 7210 	movw	r2, #10000	; 0x2710
 80032e4:	fb02 f303 	mul.w	r3, r2, r3
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e003      	b.n	80032f4 <delay+0x24>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f8      	bne.n	80032ec <delay+0x1c>
  {
  }
}
 80032fa:	f107 0714 	add.w	r7, r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bc80      	pop	{r7}
 8003302:	4770      	bx	lr

08003304 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800330c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003310:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 800331a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 800331e:	60da      	str	r2, [r3, #12]
}
 8003320:	f107 070c 	add.w	r7, r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	bc80      	pop	{r7}
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop

0800332c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8003334:	f04f 0300 	mov.w	r3, #0
 8003338:	73fb      	strb	r3, [r7, #15]
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	73bb      	strb	r3, [r7, #14]
 8003340:	f04f 030f 	mov.w	r3, #15
 8003344:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	78db      	ldrb	r3, [r3, #3]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d045      	beq.n	80033da <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800334e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003352:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	ea6f 0303 	mvn.w	r3, r3
 800335c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003360:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003364:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8003366:	7bfb      	ldrb	r3, [r7, #15]
 8003368:	f1c3 0304 	rsb	r3, r3, #4
 800336c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800336e:	7b7a      	ldrb	r2, [r7, #13]
 8003370:	7bfb      	ldrb	r3, [r7, #15]
 8003372:	fa42 f303 	asr.w	r3, r2, r3
 8003376:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	785b      	ldrb	r3, [r3, #1]
 800337c:	461a      	mov	r2, r3
 800337e:	7bbb      	ldrb	r3, [r7, #14]
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	789a      	ldrb	r2, [r3, #2]
 800338a:	7b7b      	ldrb	r3, [r7, #13]
 800338c:	4013      	ands	r3, r2
 800338e:	b2da      	uxtb	r2, r3
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	4313      	orrs	r3, r2
 8003394:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800339c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800339e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80033a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	7812      	ldrb	r2, [r2, #0]
 80033aa:	189b      	adds	r3, r3, r2
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80033b2:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80033b6:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	7812      	ldrb	r2, [r2, #0]
 80033be:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80033c2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	7809      	ldrb	r1, [r1, #0]
 80033c8:	f001 011f 	and.w	r1, r1, #31
 80033cc:	f04f 0001 	mov.w	r0, #1
 80033d0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80033d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80033d8:	e014      	b.n	8003404 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80033da:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80033de:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	7812      	ldrb	r2, [r2, #0]
 80033e6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80033ea:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	7809      	ldrb	r1, [r1, #0]
 80033f0:	f001 011f 	and.w	r1, r1, #31
 80033f4:	f04f 0001 	mov.w	r0, #1
 80033f8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80033fc:	f102 0220 	add.w	r2, r2, #32
 8003400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8003404:	f107 0714 	add.w	r7, r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bc80      	pop	{r7}
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop

08003410 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 800341a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800341e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8003428:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	430a      	orrs	r2, r1
 8003430:	609a      	str	r2, [r3, #8]
}
 8003432:	f107 070c 	add.w	r7, r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr

0800343c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	4602      	mov	r2, r0
 8003444:	460b      	mov	r3, r1
 8003446:	71fa      	strb	r2, [r7, #7]
 8003448:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800344a:	79bb      	ldrb	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8003450:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8003454:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003458:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800345c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8003460:	6911      	ldr	r1, [r2, #16]
 8003462:	79fa      	ldrb	r2, [r7, #7]
 8003464:	430a      	orrs	r2, r1
 8003466:	611a      	str	r2, [r3, #16]
 8003468:	e00d      	b.n	8003486 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800346a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800346e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8003472:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8003476:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800347a:	6911      	ldr	r1, [r2, #16]
 800347c:	79fa      	ldrb	r2, [r7, #7]
 800347e:	ea6f 0202 	mvn.w	r2, r2
 8003482:	400a      	ands	r2, r1
 8003484:	611a      	str	r2, [r3, #16]
  }
}
 8003486:	f107 070c 	add.w	r7, r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b04      	cmp	r3, #4
 800349c:	d10c      	bne.n	80034b8 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800349e:	f24e 0310 	movw	r3, #57360	; 0xe010
 80034a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80034a6:	f24e 0210 	movw	r2, #57360	; 0xe010
 80034aa:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	f042 0204 	orr.w	r2, r2, #4
 80034b4:	601a      	str	r2, [r3, #0]
 80034b6:	e00b      	b.n	80034d0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80034b8:	f24e 0310 	movw	r3, #57360	; 0xe010
 80034bc:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80034c0:	f24e 0210 	movw	r2, #57360	; 0xe010
 80034c4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80034c8:	6812      	ldr	r2, [r2, #0]
 80034ca:	f022 0204 	bic.w	r2, r2, #4
 80034ce:	601a      	str	r2, [r3, #0]
  }
}
 80034d0:	f107 070c 	add.w	r7, r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop

080034dc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 80034e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034e4:	f04f 0101 	mov.w	r1, #1
 80034e8:	f009 f868 	bl	800c5bc <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 80034ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	f009 f862 	bl	800c5bc <RCC_APB2PeriphResetCmd>
}
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop

080034fc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800351e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003522:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8003530:	4313      	orrs	r3, r2
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8003544:	68fa      	ldr	r2, [r7, #12]
 8003546:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 800354a:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800355a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8003560:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	795b      	ldrb	r3, [r3, #5]
 8003566:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800356a:	4313      	orrs	r3, r2
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357c:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003584:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	7d1b      	ldrb	r3, [r3, #20]
 800358a:	f103 33ff 	add.w	r3, r3, #4294967295
 800358e:	b2da      	uxtb	r2, r3
 8003590:	7afb      	ldrb	r3, [r7, #11]
 8003592:	4313      	orrs	r3, r2
 8003594:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8003596:	7afb      	ldrb	r3, [r7, #11]
 8003598:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035a8:	f107 0714 	add.w	r7, r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop

080035b4 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f04f 0200 	mov.w	r2, #0
 80035da:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f04f 0201 	mov.w	r2, #1
 80035f2:	751a      	strb	r2, [r3, #20]
}
 80035f4:	f107 070c 	add.w	r7, r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8003608:	f04f 0300 	mov.w	r3, #0
 800360c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 800360e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003612:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8003620:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8003624:	4013      	ands	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8003630:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8003636:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 800363c:	4313      	orrs	r3, r2
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8003644:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003648:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	605a      	str	r2, [r3, #4]
}
 8003650:	f107 0714 	add.w	r7, r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	60da      	str	r2, [r3, #12]
}
 8003684:	f107 070c 	add.w	r7, r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	bc80      	pop	{r7}
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop

08003690 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	460b      	mov	r3, r1
 800369a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	609a      	str	r2, [r3, #8]
 80036ae:	e005      	b.n	80036bc <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 0201 	bic.w	r2, r3, #1
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	609a      	str	r2, [r3, #8]
  }
}
 80036bc:	f107 070c 	add.w	r7, r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bc80      	pop	{r7}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop

080036c8 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e8:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	605a      	str	r2, [r3, #4]
}
 80036f8:	f107 0714 	add.w	r7, r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bc80      	pop	{r7}
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	460a      	mov	r2, r1
 8003710:	807a      	strh	r2, [r7, #2]
 8003712:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8003714:	887a      	ldrh	r2, [r7, #2]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 800371a:	883a      	ldrh	r2, [r7, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003720:	f107 070c 	add.w	r7, r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	bc80      	pop	{r7}
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop

0800372c <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8003738:	f04f 0300 	mov.w	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 031f 	bic.w	r3, r3, #31
 800374a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	605a      	str	r2, [r3, #4]
}
 800375a:	f107 0714 	add.w	r7, r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	4603      	mov	r3, r0
 800376c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800376e:	79fb      	ldrb	r3, [r7, #7]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00c      	beq.n	800378e <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8003774:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003778:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800377c:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003780:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003784:	6852      	ldr	r2, [r2, #4]
 8003786:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800378a:	605a      	str	r2, [r3, #4]
 800378c:	e00b      	b.n	80037a6 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 800378e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003792:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003796:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 800379a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800379e:	6852      	ldr	r2, [r2, #4]
 80037a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80037a4:	605a      	str	r2, [r3, #4]
  }
}
 80037a6:	f107 070c 	add.w	r7, r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80037ba:	79fb      	ldrb	r3, [r7, #7]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00c      	beq.n	80037da <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 80037c0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80037c4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80037c8:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80037cc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80037d0:	6852      	ldr	r2, [r2, #4]
 80037d2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	e00b      	b.n	80037f2 <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 80037da:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80037de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80037e2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80037e6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80037ea:	6852      	ldr	r2, [r2, #4]
 80037ec:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80037f0:	605a      	str	r2, [r3, #4]
  }
}
 80037f2:	f107 070c 	add.w	r7, r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	70f9      	strb	r1, [r7, #3]
 8003806:	70ba      	strb	r2, [r7, #2]
 8003808:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	2b09      	cmp	r3, #9
 800381a:	d927      	bls.n	800386c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8003822:	78fa      	ldrb	r2, [r7, #3]
 8003824:	4613      	mov	r3, r2
 8003826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800382a:	189b      	adds	r3, r3, r2
 800382c:	f1a3 031e 	sub.w	r3, r3, #30
 8003830:	f04f 0207 	mov.w	r2, #7
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	ea6f 0303 	mvn.w	r3, r3
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4013      	ands	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8003846:	7879      	ldrb	r1, [r7, #1]
 8003848:	78fa      	ldrb	r2, [r7, #3]
 800384a:	4613      	mov	r3, r2
 800384c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003850:	189b      	adds	r3, r3, r2
 8003852:	f1a3 031e 	sub.w	r3, r3, #30
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4313      	orrs	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	60da      	str	r2, [r3, #12]
 800386a:	e022      	b.n	80038b2 <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	4613      	mov	r3, r2
 8003876:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800387a:	189b      	adds	r3, r3, r2
 800387c:	f04f 0207 	mov.w	r2, #7
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	ea6f 0303 	mvn.w	r3, r3
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8003892:	7879      	ldrb	r1, [r7, #1]
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	4613      	mov	r3, r2
 8003898:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800389c:	189b      	adds	r3, r3, r2
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80038b2:	78bb      	ldrb	r3, [r7, #2]
 80038b4:	2b06      	cmp	r3, #6
 80038b6:	d827      	bhi.n	8003908 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038bc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80038be:	78bb      	ldrb	r3, [r7, #2]
 80038c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80038c4:	4613      	mov	r3, r2
 80038c6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	f04f 021f 	mov.w	r2, #31
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	ea6f 0303 	mvn.w	r3, r3
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80038e2:	78f9      	ldrb	r1, [r7, #3]
 80038e4:	78bb      	ldrb	r3, [r7, #2]
 80038e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80038ea:	4613      	mov	r3, r2
 80038ec:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	fa01 f303 	lsl.w	r3, r1, r3
 80038f6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
 8003906:	e051      	b.n	80039ac <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8003908:	78bb      	ldrb	r3, [r7, #2]
 800390a:	2b0c      	cmp	r3, #12
 800390c:	d827      	bhi.n	800395e <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8003914:	78ba      	ldrb	r2, [r7, #2]
 8003916:	4613      	mov	r3, r2
 8003918:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800391c:	189b      	adds	r3, r3, r2
 800391e:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8003922:	f04f 021f 	mov.w	r2, #31
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	ea6f 0303 	mvn.w	r3, r3
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4013      	ands	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8003938:	78f9      	ldrb	r1, [r7, #3]
 800393a:	78ba      	ldrb	r2, [r7, #2]
 800393c:	4613      	mov	r3, r2
 800393e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003942:	189b      	adds	r3, r3, r2
 8003944:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8003948:	fa01 f303 	lsl.w	r3, r1, r3
 800394c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68fa      	ldr	r2, [r7, #12]
 800395a:	631a      	str	r2, [r3, #48]	; 0x30
 800395c:	e026      	b.n	80039ac <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003962:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8003964:	78ba      	ldrb	r2, [r7, #2]
 8003966:	4613      	mov	r3, r2
 8003968:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800396c:	189b      	adds	r3, r3, r2
 800396e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8003972:	f04f 021f 	mov.w	r2, #31
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	ea6f 0303 	mvn.w	r3, r3
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8003988:	78f9      	ldrb	r1, [r7, #3]
 800398a:	78ba      	ldrb	r2, [r7, #2]
 800398c:	4613      	mov	r3, r2
 800398e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003992:	189b      	adds	r3, r3, r2
 8003994:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8003998:	fa01 f303 	lsl.w	r3, r1, r3
 800399c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80039ac:	f107 0714 	add.w	r7, r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	609a      	str	r2, [r3, #8]
}
 80039cc:	f107 070c 	add.w	r7, r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop

080039d8 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 80039f2:	f04f 0301 	mov.w	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e002      	b.n	8003a00 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	f107 0714 	add.w	r7, r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop

08003a10 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	460b      	mov	r3, r1
 8003a1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d006      	beq.n	8003a30 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	e005      	b.n	8003a3c <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	609a      	str	r2, [r3, #8]
  }
}
 8003a3c:	f107 070c 	add.w	r7, r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop

08003a48 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d006      	beq.n	8003a68 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f043 0202 	orr.w	r2, r3, #2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	e005      	b.n	8003a74 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 0202 	bic.w	r2, r3, #2
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	609a      	str	r2, [r3, #8]
  }
}
 8003a74:	f107 070c 	add.w	r7, r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bc80      	pop	{r7}
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop

08003a80 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8003a8c:	f04f 0300 	mov.w	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003aa4:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	f103 33ff 	add.w	r3, r3, #4294967295
 8003aac:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	ea4f 3343 	mov.w	r3, r3, lsl #13
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
}
 8003ac0:	f107 0714 	add.w	r7, r7, #20
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop

08003acc <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003ad8:	78fb      	ldrb	r3, [r7, #3]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	e005      	b.n	8003af8 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	605a      	str	r2, [r3, #4]
  }
}
 8003af8:	f107 070c 	add.w	r7, r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop

08003b04 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b10:	b29b      	uxth	r3, r3
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	f107 070c 	add.w	r7, r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop

08003b20 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8003b24:	f242 3308 	movw	r3, #8968	; 0x2308
 8003b28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003b2c:	681b      	ldr	r3, [r3, #0]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop

08003b38 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	460b      	mov	r3, r1
 8003b42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]
 8003b56:	e005      	b.n	8003b64 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	609a      	str	r2, [r3, #8]
  }
}
 8003b64:	f107 070c 	add.w	r7, r7, #12
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop

08003b70 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d006      	beq.n	8003b90 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	609a      	str	r2, [r3, #8]
 8003b8e:	e005      	b.n	8003b9c <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
  }
}
 8003b9c:	f107 070c 	add.w	r7, r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop

08003ba8 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00c      	beq.n	8003bd2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8003bb8:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003bbc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003bc0:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003bc4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003bc8:	6852      	ldr	r2, [r2, #4]
 8003bca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bce:	605a      	str	r2, [r3, #4]
 8003bd0:	e00b      	b.n	8003bea <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 8003bd2:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8003bd6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003bda:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8003bde:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8003be2:	6852      	ldr	r2, [r2, #4]
 8003be4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be8:	605a      	str	r2, [r3, #4]
  }
}
 8003bea:	f107 070c 	add.w	r7, r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	70f9      	strb	r1, [r7, #3]
 8003bfe:	70ba      	strb	r2, [r7, #2]
 8003c00:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	2b09      	cmp	r3, #9
 8003c18:	d927      	bls.n	8003c6a <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	4613      	mov	r3, r2
 8003c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c28:	189b      	adds	r3, r3, r2
 8003c2a:	f1a3 031e 	sub.w	r3, r3, #30
 8003c2e:	f04f 0207 	mov.w	r2, #7
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	ea6f 0303 	mvn.w	r3, r3
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4013      	ands	r3, r2
 8003c42:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8003c44:	7879      	ldrb	r1, [r7, #1]
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	4613      	mov	r3, r2
 8003c4a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	f1a3 031e 	sub.w	r3, r3, #30
 8003c54:	fa01 f303 	lsl.w	r3, r1, r3
 8003c58:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	60da      	str	r2, [r3, #12]
 8003c68:	e022      	b.n	8003cb0 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8003c70:	78fa      	ldrb	r2, [r7, #3]
 8003c72:	4613      	mov	r3, r2
 8003c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c78:	189b      	adds	r3, r3, r2
 8003c7a:	f04f 0207 	mov.w	r2, #7
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	ea6f 0303 	mvn.w	r3, r3
 8003c8a:	697a      	ldr	r2, [r7, #20]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8003c90:	7879      	ldrb	r1, [r7, #1]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4613      	mov	r3, r2
 8003c96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003cbc:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8003cc0:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	ea6f 0303 	mvn.w	r3, r3
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	78bb      	ldrb	r3, [r7, #2]
 8003cce:	18d3      	adds	r3, r2, r3
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	f103 0303 	add.w	r3, r3, #3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4613      	mov	r3, r2
 8003cdc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003ce0:	189b      	adds	r3, r3, r2
 8003ce2:	f04f 021f 	mov.w	r2, #31
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	ea6f 0303 	mvn.w	r3, r3
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 8003cf8:	78f9      	ldrb	r1, [r7, #3]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	ea6f 0303 	mvn.w	r3, r3
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	78bb      	ldrb	r3, [r7, #2]
 8003d06:	18d3      	adds	r3, r2, r3
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	f103 0303 	add.w	r3, r3, #3
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	461a      	mov	r2, r3
 8003d12:	4613      	mov	r3, r2
 8003d14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8003d18:	189b      	adds	r3, r3, r2
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d2e:	f107 071c 	add.w	r7, r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003d5c:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d64:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003d78:	f107 0714 	add.w	r7, r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bc80      	pop	{r7}
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop

08003d84 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	460a      	mov	r2, r1
 8003d90:	70fa      	strb	r2, [r7, #3]
 8003d92:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 8003d9e:	78fa      	ldrb	r2, [r7, #3]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	18d3      	adds	r3, r2, r3
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	883a      	ldrh	r2, [r7, #0]
 8003daa:	601a      	str	r2, [r3, #0]
}
 8003dac:	f107 0714 	add.w	r7, r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bc80      	pop	{r7}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop

08003db8 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8003dd4:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	609a      	str	r2, [r3, #8]
}
 8003de4:	f107 0714 	add.w	r7, r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e0c:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 8003e0e:	68fa      	ldr	r2, [r7, #12]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	609a      	str	r2, [r3, #8]
}
 8003e1c:	f107 0714 	add.w	r7, r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bc80      	pop	{r7}
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop

08003e28 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]
}
 8003e3c:	f107 070c 	add.w	r7, r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop

08003e48 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8003e50:	f04f 0300 	mov.w	r3, #0
 8003e54:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8003e62:	f04f 0301 	mov.w	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	e002      	b.n	8003e70 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	f107 0714 	add.w	r7, r7, #20
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop

08003e80 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	e005      	b.n	8003eac <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	605a      	str	r2, [r3, #4]
  }
}
 8003eac:	f107 070c 	add.w	r7, r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop

08003eb8 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d006      	beq.n	8003ed8 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	605a      	str	r2, [r3, #4]
 8003ed6:	e005      	b.n	8003ee4 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	605a      	str	r2, [r3, #4]
  }
}
 8003ee4:	f107 070c 	add.w	r7, r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bc80      	pop	{r7}
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	18d3      	adds	r3, r2, r3
 8003f0c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8003f10:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f107 0714 	add.w	r7, r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr

08003f24 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	460a      	mov	r2, r1
 8003f30:	807a      	strh	r2, [r7, #2]
 8003f32:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 8003f3a:	887b      	ldrh	r3, [r7, #2]
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f04f 0201 	mov.w	r2, #1
 8003f46:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8003f4c:	787b      	ldrb	r3, [r7, #1]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d006      	beq.n	8003f60 <ADC_ITConfig+0x3c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	605a      	str	r2, [r3, #4]
 8003f5e:	e007      	b.n	8003f70 <ADC_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	ea6f 0303 	mvn.w	r3, r3
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	605a      	str	r2, [r3, #4]
  }
}
 8003f70:	f107 0714 	add.w	r7, r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bc80      	pop	{r7}
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop

08003f7c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	460b      	mov	r3, r1
 8003f86:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8003f88:	f04f 0300 	mov.w	r3, #0
 8003f8c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8003f9a:	f04f 0301 	mov.w	r3, #1
 8003f9e:	73fb      	strb	r3, [r7, #15]
 8003fa0:	e002      	b.n	8003fa8 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8003fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	f107 0714 	add.w	r7, r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop

08003fb8 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	ea6f 0203 	mvn.w	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	601a      	str	r2, [r3, #0]
}
 8003fce:	f107 070c 	add.w	r7, r7, #12
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bc80      	pop	{r7}
 8003fd6:	4770      	bx	lr

08003fd8 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	887b      	ldrh	r3, [r7, #2]
 8004006:	b2db      	uxtb	r3, r3
 8004008:	f04f 0101 	mov.w	r1, #1
 800400c:	fa01 f303 	lsl.w	r3, r1, r3
 8004010:	4013      	ands	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	4013      	ands	r3, r2
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <ADC_GetITStatus+0x56>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <ADC_GetITStatus+0x56>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8004026:	f04f 0301 	mov.w	r3, #1
 800402a:	75fb      	strb	r3, [r7, #23]
 800402c:	e002      	b.n	8004034 <ADC_GetITStatus+0x5c>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	f107 071c 	add.w	r7, r7, #28
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop

08004044 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8004056:	887b      	ldrh	r3, [r7, #2]
 8004058:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800405c:	b29b      	uxth	r3, r3
 800405e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8004060:	7bfb      	ldrb	r3, [r7, #15]
 8004062:	ea6f 0203 	mvn.w	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	601a      	str	r2, [r3, #0]
}                    
 800406a:	f107 0714 	add.w	r7, r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004082:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004086:	429a      	cmp	r2, r3
 8004088:	d10c      	bne.n	80040a4 <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800408a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800408e:	f04f 0101 	mov.w	r1, #1
 8004092:	f008 fa69 	bl	800c568 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8004096:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800409a:	f04f 0100 	mov.w	r1, #0
 800409e:	f008 fa63 	bl	800c568 <RCC_APB1PeriphResetCmd>
 80040a2:	e00b      	b.n	80040bc <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 80040a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80040a8:	f04f 0101 	mov.w	r1, #1
 80040ac:	f008 fa5c 	bl	800c568 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 80040b0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80040b4:	f04f 0100 	mov.w	r1, #0
 80040b8:	f008 fa56 	bl	800c568 <RCC_APB1PeriphResetCmd>
  }
}
 80040bc:	f107 0708 	add.w	r7, r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80040ce:	f04f 0300 	mov.w	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f023 0202 	bic.w	r2, r3, #2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f043 0201 	orr.w	r2, r3, #1
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80040f2:	e003      	b.n	80040fc <CAN_Init+0x38>
  {
    wait_ack++;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f103 0301 	add.w	r3, r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <CAN_Init+0x4e>
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800410e:	429a      	cmp	r2, r3
 8004110:	d1f0      	bne.n	80040f4 <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 800411e:	f04f 0300 	mov.w	r3, #0
 8004122:	73fb      	strb	r3, [r7, #15]
 8004124:	e0a7      	b.n	8004276 <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	799b      	ldrb	r3, [r3, #6]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d106      	bne.n	800413c <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e005      	b.n	8004148 <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	79db      	ldrb	r3, [r3, #7]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d106      	bne.n	800415e <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e005      	b.n	800416a <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	7a1b      	ldrb	r3, [r3, #8]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d106      	bne.n	8004180 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f043 0220 	orr.w	r2, r3, #32
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e005      	b.n	800418c <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 0220 	bic.w	r2, r3, #32
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	7a5b      	ldrb	r3, [r3, #9]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d106      	bne.n	80041a2 <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f043 0210 	orr.w	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e005      	b.n	80041ae <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f023 0210 	bic.w	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	7a9b      	ldrb	r3, [r3, #10]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d106      	bne.n	80041c4 <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f043 0208 	orr.w	r2, r3, #8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e005      	b.n	80041d0 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f023 0208 	bic.w	r2, r3, #8
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	7adb      	ldrb	r3, [r3, #11]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d106      	bne.n	80041e6 <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e005      	b.n	80041f2 <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 0204 	bic.w	r2, r3, #4
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	789b      	ldrb	r3, [r3, #2]
 80041f6:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	78db      	ldrb	r3, [r3, #3]
 80041fe:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8004202:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	791b      	ldrb	r3, [r3, #4]
 8004208:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 800420c:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	795b      	ldrb	r3, [r3, #5]
 8004212:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8004216:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8004220:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8004238:	e003      	b.n	8004242 <CAN_Init+0x17e>
   {
     wait_ack++;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	f103 0301 	add.w	r3, r3, #1
 8004240:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	b2db      	uxtb	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	d004      	beq.n	800425a <CAN_Init+0x196>
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004256:	429a      	cmp	r2, r3
 8004258:	d1ef      	bne.n	800423a <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 8004268:	f04f 0300 	mov.w	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
 800426e:	e002      	b.n	8004276 <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8004270:	f04f 0301 	mov.w	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	f107 0714 	add.w	r7, r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr

08004284 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 800428c:	f04f 0300 	mov.w	r3, #0
 8004290:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	7a9b      	ldrb	r3, [r3, #10]
 8004296:	f04f 0201 	mov.w	r2, #1
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 80042a0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80042a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042a8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80042ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80042b0:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 80042bc:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80042c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042c4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80042c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80042cc:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	ea6f 0202 	mvn.w	r2, r2
 80042d6:	400a      	ands	r2, r1
 80042d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	7b1b      	ldrb	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d133      	bne.n	800434c <CAN_FilterInit+0xc8>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80042e4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80042e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80042ec:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80042f0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80042f4:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	ea6f 0202 	mvn.w	r2, r2
 80042fe:	400a      	ands	r2, r1
 8004300:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004304:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004308:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	88c9      	ldrh	r1, [r1, #6]
 8004314:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 800431c:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800431e:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8004322:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004326:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800432a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	8889      	ldrh	r1, [r1, #4]
 8004336:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800433e:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004340:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8004344:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7b1b      	ldrb	r3, [r3, #12]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d131      	bne.n	80043b8 <CAN_FilterInit+0x134>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8004354:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004358:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800435c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004360:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004364:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	430a      	orrs	r2, r1
 800436c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8004370:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004374:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	8809      	ldrh	r1, [r1, #0]
 8004380:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8004388:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800438a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800438e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8004392:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004396:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	8889      	ldrh	r1, [r1, #4]
 80043a2:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 80043aa:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 80043ac:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80043b0:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80043b4:	18d3      	adds	r3, r2, r3
 80043b6:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7adb      	ldrb	r3, [r3, #11]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d110      	bne.n	80043e2 <CAN_FilterInit+0x15e>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80043c0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80043c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80043c8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80043cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80043d0:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	ea6f 0202 	mvn.w	r2, r2
 80043da:	400a      	ands	r2, r1
 80043dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80043e0:	e00d      	b.n	80043fe <CAN_FilterInit+0x17a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80043e2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80043e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80043ea:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80043ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80043f2:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	891b      	ldrh	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <CAN_FilterInit+0x1a2>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8004406:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800440a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800440e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004412:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004416:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	ea6f 0202 	mvn.w	r2, r2
 8004420:	400a      	ands	r2, r1
 8004422:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	891b      	ldrh	r3, [r3, #8]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d10d      	bne.n	800444a <CAN_FilterInit+0x1c6>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 800442e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004432:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004436:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800443a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800443e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	430a      	orrs	r2, r1
 8004446:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	7b5b      	ldrb	r3, [r3, #13]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d10d      	bne.n	800446e <CAN_FilterInit+0x1ea>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8004452:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004456:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800445a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800445e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004462:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	430a      	orrs	r2, r1
 800446a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 800446e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8004472:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004476:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800447a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800447e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800448a:	f107 0714 	add.w	r7, r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f04f 0200 	mov.w	r2, #0
 80044a2:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f04f 0200 	mov.w	r2, #0
 80044b2:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f04f 0200 	mov.w	r2, #0
 80044c2:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f04f 0203 	mov.w	r2, #3
 80044e2:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f04f 0202 	mov.w	r2, #2
 80044ea:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f04f 0201 	mov.w	r2, #1
 80044f2:	801a      	strh	r2, [r3, #0]
}
 80044f4:	f107 070c 	add.w	r7, r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bc80      	pop	{r7}
 80044fc:	4770      	bx	lr
 80044fe:	bf00      	nop

08004500 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 800450a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800450e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004512:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004516:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800451a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8004526:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800452a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800452e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004532:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004536:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800453a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800453e:	f022 020e 	bic.w	r2, r2, #14
 8004542:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8004546:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800454a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800454e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004552:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004556:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 800455a:	79fa      	ldrb	r2, [r7, #7]
 800455c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004560:	430a      	orrs	r2, r1
 8004562:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8004566:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800456a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800456e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8004572:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004576:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004582:	f107 070c 	add.w	r7, r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d006      	beq.n	80045ac <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	e005      	b.n	80045b8 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	601a      	str	r2, [r3, #0]
  }
}
 80045b8:	f107 070c 	add.w	r7, r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop

080045c4 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80045d0:	78fb      	ldrb	r3, [r7, #3]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01e      	beq.n	8004614 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 80045e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80045f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004608:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8004612:	e01d      	b.n	8004650 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8004626:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8004636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8004650:	f107 070c 	add.w	r7, r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop

0800465c <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d003      	beq.n	8004680 <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 8004678:	f04f 0300 	mov.w	r3, #0
 800467c:	73fb      	strb	r3, [r7, #15]
 800467e:	e016      	b.n	80046ae <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 800468c:	f04f 0301 	mov.w	r3, #1
 8004690:	73fb      	strb	r3, [r7, #15]
 8004692:	e00c      	b.n	80046ae <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 80046a0:	f04f 0302 	mov.w	r3, #2
 80046a4:	73fb      	strb	r3, [r7, #15]
 80046a6:	e002      	b.n	80046ae <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80046a8:	f04f 0304 	mov.w	r3, #4
 80046ac:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	2b04      	cmp	r3, #4
 80046b2:	f000 80ba 	beq.w	800482a <CAN_Transmit+0x1ce>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80046b6:	7bfb      	ldrb	r3, [r7, #15]
 80046b8:	7bfa      	ldrb	r2, [r7, #15]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	f102 0218 	add.w	r2, r2, #24
 80046c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80046c4:	188a      	adds	r2, r1, r2
 80046c6:	6812      	ldr	r2, [r2, #0]
 80046c8:	f002 0201 	and.w	r2, r2, #1
 80046cc:	6879      	ldr	r1, [r7, #4]
 80046ce:	f103 0318 	add.w	r3, r3, #24
 80046d2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80046d6:	18cb      	adds	r3, r1, r3
 80046d8:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	7a1b      	ldrb	r3, [r3, #8]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d118      	bne.n	8004714 <CAN_Transmit+0xb8>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	f102 0218 	add.w	r2, r2, #24
 80046ec:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80046f0:	188a      	adds	r2, r1, r2
 80046f2:	6811      	ldr	r1, [r2, #0]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8004700:	4302      	orrs	r2, r0
 8004702:	430a      	orrs	r2, r1
 8004704:	6879      	ldr	r1, [r7, #4]
 8004706:	f103 0318 	add.w	r3, r3, #24
 800470a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800470e:	18cb      	adds	r3, r1, r3
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	e01a      	b.n	800474a <CAN_Transmit+0xee>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	7bfa      	ldrb	r2, [r7, #15]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	f102 0218 	add.w	r2, r2, #24
 800471e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004722:	188a      	adds	r2, r1, r2
 8004724:	6811      	ldr	r1, [r2, #0]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	6852      	ldr	r2, [r2, #4]
 800472a:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8004732:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8004738:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800473a:	430a      	orrs	r2, r1
 800473c:	6879      	ldr	r1, [r7, #4]
 800473e:	f103 0318 	add.w	r3, r3, #24
 8004742:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004746:	18cb      	adds	r3, r1, r3
 8004748:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	7a9b      	ldrb	r3, [r3, #10]
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	b2da      	uxtb	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	7bfa      	ldrb	r2, [r7, #15]
 800475c:	6879      	ldr	r1, [r7, #4]
 800475e:	f102 0218 	add.w	r2, r2, #24
 8004762:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004766:	188a      	adds	r2, r1, r2
 8004768:	6852      	ldr	r2, [r2, #4]
 800476a:	f022 020f 	bic.w	r2, r2, #15
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	f103 0318 	add.w	r3, r3, #24
 8004774:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004778:	18cb      	adds	r3, r1, r3
 800477a:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	7bfa      	ldrb	r2, [r7, #15]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	f102 0218 	add.w	r2, r2, #24
 8004786:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800478a:	188a      	adds	r2, r1, r2
 800478c:	6851      	ldr	r1, [r2, #4]
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	7a92      	ldrb	r2, [r2, #10]
 8004792:	430a      	orrs	r2, r1
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	f103 0318 	add.w	r3, r3, #24
 800479a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800479e:	18cb      	adds	r3, r1, r3
 80047a0:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	7b92      	ldrb	r2, [r2, #14]
 80047a8:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	7b52      	ldrb	r2, [r2, #13]
 80047b0:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80047b4:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	7b12      	ldrb	r2, [r2, #12]
 80047ba:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80047be:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80047c4:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047cc:	18cb      	adds	r3, r1, r3
 80047ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80047d2:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	7c92      	ldrb	r2, [r2, #18]
 80047da:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	7c52      	ldrb	r2, [r2, #17]
 80047e2:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80047e6:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	7c12      	ldrb	r2, [r2, #16]
 80047ec:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80047f0:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80047f6:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80047fe:	18cb      	adds	r3, r1, r3
 8004800:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004804:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8004806:	7bfb      	ldrb	r3, [r7, #15]
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	f102 0218 	add.w	r2, r2, #24
 8004810:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8004814:	188a      	adds	r2, r1, r2
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	f103 0318 	add.w	r3, r3, #24
 8004822:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004826:	18cb      	adds	r3, r1, r3
 8004828:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 800482a:	7bfb      	ldrb	r3, [r7, #15]
}
 800482c:	4618      	mov	r0, r3
 800482e:	f107 0714 	add.w	r7, r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	460b      	mov	r3, r1
 8004842:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8004844:	f04f 0300 	mov.w	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d00c      	beq.n	800486a <CAN_TransmitStatus+0x32>
 8004850:	2b02      	cmp	r3, #2
 8004852:	d013      	beq.n	800487c <CAN_TransmitStatus+0x44>
 8004854:	2b00      	cmp	r3, #0
 8004856:	d11a      	bne.n	800488e <CAN_TransmitStatus+0x56>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	f04f 0303 	mov.w	r3, #3
 8004860:	f2c0 4300 	movt	r3, #1024	; 0x400
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
      break;
 8004868:	e015      	b.n	8004896 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004872:	f6c0 0300 	movt	r3, #2048	; 0x800
 8004876:	4013      	ands	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
      break;
 800487a:	e00c      	b.n	8004896 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f2c1 0303 	movt	r3, #4099	; 0x1003
 8004888:	4013      	ands	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]
      break;
 800488c:	e003      	b.n	8004896 <CAN_TransmitStatus+0x5e>
    default:
      state = CAN_TxStatus_Failed;
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
      break;
 8004894:	bf00      	nop
  }
  switch (state)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f44f 7280 	mov.w	r2, #256	; 0x100
 800489c:	f6c0 0200 	movt	r2, #2048	; 0x800
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d02f      	beq.n	8004904 <CAN_TransmitStatus+0xcc>
 80048a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d80e      	bhi.n	80048ce <CAN_TransmitStatus+0x96>
 80048b0:	f04f 0201 	mov.w	r2, #1
 80048b4:	f2c0 4200 	movt	r2, #1024	; 0x400
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d01f      	beq.n	80048fc <CAN_TransmitStatus+0xc4>
 80048bc:	f04f 0203 	mov.w	r2, #3
 80048c0:	f2c0 4200 	movt	r2, #1024	; 0x400
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d025      	beq.n	8004914 <CAN_TransmitStatus+0xdc>
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d013      	beq.n	80048f4 <CAN_TransmitStatus+0xbc>
 80048cc:	e02e      	b.n	800492c <CAN_TransmitStatus+0xf4>
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f2c1 0201 	movt	r2, #4097	; 0x1001
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d018      	beq.n	800490c <CAN_TransmitStatus+0xd4>
 80048da:	f04f 0200 	mov.w	r2, #0
 80048de:	f2c1 0203 	movt	r2, #4099	; 0x1003
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01e      	beq.n	8004924 <CAN_TransmitStatus+0xec>
 80048e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80048ea:	f6c0 0200 	movt	r2, #2048	; 0x800
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d014      	beq.n	800491c <CAN_TransmitStatus+0xe4>
 80048f2:	e01b      	b.n	800492c <CAN_TransmitStatus+0xf4>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 80048f4:	f04f 0302 	mov.w	r3, #2
 80048f8:	60fb      	str	r3, [r7, #12]
      break;
 80048fa:	e01b      	b.n	8004934 <CAN_TransmitStatus+0xfc>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
      break;
 8004902:	e017      	b.n	8004934 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8004904:	f04f 0300 	mov.w	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
      break;
 800490a:	e013      	b.n	8004934 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	60fb      	str	r3, [r7, #12]
      break;
 8004912:	e00f      	b.n	8004934 <CAN_TransmitStatus+0xfc>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8004914:	f04f 0301 	mov.w	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]
      break;
 800491a:	e00b      	b.n	8004934 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 800491c:	f04f 0301 	mov.w	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
      break;
 8004922:	e007      	b.n	8004934 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8004924:	f04f 0301 	mov.w	r3, #1
 8004928:	60fb      	str	r3, [r7, #12]
      break;
 800492a:	e003      	b.n	8004934 <CAN_TransmitStatus+0xfc>
    default: state = CAN_TxStatus_Failed;
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	60fb      	str	r3, [r7, #12]
      break;
 8004932:	bf00      	nop
  }
  return (uint8_t) state;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	b2db      	uxtb	r3, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	f107 0714 	add.w	r7, r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	bc80      	pop	{r7}
 8004942:	4770      	bx	lr

08004944 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	460b      	mov	r3, r1
 800494e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d00a      	beq.n	800496c <CAN_CancelTransmit+0x28>
 8004956:	2b02      	cmp	r3, #2
 8004958:	d00f      	beq.n	800497a <CAN_CancelTransmit+0x36>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d114      	bne.n	8004988 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	609a      	str	r2, [r3, #8]
      break;
 800496a:	e00e      	b.n	800498a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	609a      	str	r2, [r3, #8]
      break;
 8004978:	e007      	b.n	800498a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	609a      	str	r2, [r3, #8]
      break;
 8004986:	e000      	b.n	800498a <CAN_CancelTransmit+0x46>
    default:
      break;
 8004988:	bf00      	nop
  }
}
 800498a:	f107 070c 	add.w	r7, r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	bc80      	pop	{r7}
 8004992:	4770      	bx	lr

08004994 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	460b      	mov	r3, r1
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80049a2:	7afb      	ldrb	r3, [r7, #11]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	f103 031b 	add.w	r3, r3, #27
 80049aa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80049ae:	18d3      	adds	r3, r2, r3
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7a1b      	ldrb	r3, [r3, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10c      	bne.n	80049e0 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	f103 031b 	add.w	r3, r3, #27
 80049ce:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80049d2:	18d3      	adds	r3, r2, r3
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	ea4f 5253 	mov.w	r2, r3, lsr #21
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	e00b      	b.n	80049f8 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80049e0:	7afb      	ldrb	r3, [r7, #11]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	f103 031b 	add.w	r3, r3, #27
 80049e8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80049ec:	18d3      	adds	r3, r2, r3
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80049f8:	7afb      	ldrb	r3, [r7, #11]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	f103 031b 	add.w	r3, r3, #27
 8004a00:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a04:	18d3      	adds	r3, r2, r3
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8004a14:	7afb      	ldrb	r3, [r7, #11]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	f103 031b 	add.w	r3, r3, #27
 8004a1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a20:	18d3      	adds	r3, r2, r3
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8004a30:	7afb      	ldrb	r3, [r7, #11]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	f103 031b 	add.w	r3, r3, #27
 8004a38:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a3c:	18d3      	adds	r3, r2, r3
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8004a4a:	7afb      	ldrb	r3, [r7, #11]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a52:	18d3      	adds	r3, r2, r3
 8004a54:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8004a60:	7afb      	ldrb	r3, [r7, #11]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a68:	18d3      	adds	r3, r2, r3
 8004a6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8004a7a:	7afb      	ldrb	r3, [r7, #11]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a82:	18d3      	adds	r3, r2, r3
 8004a84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8004a94:	7afb      	ldrb	r3, [r7, #11]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004a9c:	18d3      	adds	r3, r2, r3
 8004a9e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8004aae:	7afb      	ldrb	r3, [r7, #11]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004ab6:	18d3      	adds	r3, r2, r3
 8004ab8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8004ac4:	7afb      	ldrb	r3, [r7, #11]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004acc:	18d3      	adds	r3, r2, r3
 8004ace:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8004ade:	7afb      	ldrb	r3, [r7, #11]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004ae6:	18d3      	adds	r3, r2, r3
 8004ae8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	68fa      	ldr	r2, [r7, #12]
 8004afc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8004b00:	18d3      	adds	r3, r2, r3
 8004b02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8004b12:	7afb      	ldrb	r3, [r7, #11]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d106      	bne.n	8004b26 <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f043 0220 	orr.w	r2, r3, #32
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	60da      	str	r2, [r3, #12]
 8004b24:	e005      	b.n	8004b32 <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	691b      	ldr	r3, [r3, #16]
 8004b2a:	f043 0220 	orr.w	r2, r3, #32
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	611a      	str	r2, [r3, #16]
  }
}
 8004b32:	f107 0714 	add.w	r7, r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8004b48:	78fb      	ldrb	r3, [r7, #3]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60da      	str	r2, [r3, #12]
 8004b5a:	e005      	b.n	8004b68 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f043 0220 	orr.w	r2, r3, #32
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	611a      	str	r2, [r3, #16]
  }
}
 8004b68:	f107 070c 	add.w	r7, r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bc80      	pop	{r7}
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop

08004b74 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d106      	bne.n	8004b9a <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e00c      	b.n	8004bb4 <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d106      	bne.n	8004bae <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	73fb      	strb	r3, [r7, #15]
 8004bac:	e002      	b.n	8004bb4 <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f107 0714 	add.w	r7, r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bc80      	pop	{r7}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	460b      	mov	r3, r1
 8004bce:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 8004bd0:	f04f 0300 	mov.w	r3, #0
 8004bd4:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 8004bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d123      	bne.n	8004c2a <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 0303 	bic.w	r3, r3, #3
 8004bea:	f043 0201 	orr.w	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8004bf2:	e003      	b.n	8004bfc <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bfa:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 0303 	and.w	r3, r3, #3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d002      	beq.n	8004c0e <CAN_OperatingModeRequest+0x4a>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f2      	bne.n	8004bf4 <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f003 0303 	and.w	r3, r3, #3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d003      	beq.n	8004c22 <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e052      	b.n	8004cc8 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8004c22:	f04f 0301 	mov.w	r3, #1
 8004c26:	73fb      	strb	r3, [r7, #15]
 8004c28:	e04e      	b.n	8004cc8 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d121      	bne.n	8004c74 <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f023 0203 	bic.w	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8004c3c:	e003      	b.n	8004c46 <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c44:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <CAN_OperatingModeRequest+0x94>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1f2      	bne.n	8004c3e <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f003 0303 	and.w	r3, r3, #3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	73fb      	strb	r3, [r7, #15]
 8004c6a:	e02d      	b.n	8004cc8 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8004c6c:	f04f 0301 	mov.w	r3, #1
 8004c70:	73fb      	strb	r3, [r7, #15]
 8004c72:	e029      	b.n	8004cc8 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d123      	bne.n	8004cc2 <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 0303 	bic.w	r3, r3, #3
 8004c82:	f043 0202 	orr.w	r2, r3, #2
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8004c8a:	e003      	b.n	8004c94 <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004c92:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d002      	beq.n	8004ca6 <CAN_OperatingModeRequest+0xe2>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f2      	bne.n	8004c8c <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d003      	beq.n	8004cba <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 8004cb2:	f04f 0300 	mov.w	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
 8004cb8:	e006      	b.n	8004cc8 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8004cba:	f04f 0301 	mov.w	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	e002      	b.n	8004cc8 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f107 0714 	add.w	r7, r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bc80      	pop	{r7}
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop

08004cd8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d102      	bne.n	8004d08 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 8004d02:	f04f 0301 	mov.w	r3, #1
 8004d06:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f107 0714 	add.w	r7, r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bc80      	pop	{r7}
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop

08004d18 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 8004d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d24:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 0202 	bic.w	r2, r3, #2
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8004d38:	e003      	b.n	8004d42 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d40:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <CAN_WakeUp+0x3c>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1f2      	bne.n	8004d3a <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d102      	bne.n	8004d66 <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8004d60:	f04f 0301 	mov.w	r3, #1
 8004d64:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8004d66:	7afb      	ldrb	r3, [r7, #11]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f107 0714 	add.w	r7, r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bc80      	pop	{r7}
 8004d72:	4770      	bx	lr

08004d74 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 8004d7c:	f04f 0300 	mov.w	r3, #0
 8004d80:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d8c:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 8004d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	f107 0714 	add.w	r7, r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8004db2:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	f107 0714 	add.w	r7, r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bc80      	pop	{r7}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop

08004dc4 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8004dcc:	f04f 0300 	mov.w	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004dda:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8004dde:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	f107 0714 	add.w	r7, r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop

08004df0 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	695a      	ldr	r2, [r3, #20]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	615a      	str	r2, [r3, #20]
 8004e10:	e007      	b.n	8004e22 <CAN_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	ea6f 0303 	mvn.w	r3, r3
 8004e1c:	401a      	ands	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	615a      	str	r2, [r3, #20]
  }
}
 8004e22:	f107 0714 	add.w	r7, r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b085      	sub	sp, #20
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004e36:	f04f 0300 	mov.w	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d011      	beq.n	8004e6a <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699a      	ldr	r2, [r3, #24]
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <CAN_GetFlagStatus+0x36>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004e5a:	f04f 0301 	mov.w	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
 8004e60:	e059      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	73fb      	strb	r3, [r7, #15]
 8004e68:	e055      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d011      	beq.n	8004e98 <CAN_GetFlagStatus+0x6c>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685a      	ldr	r2, [r3, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e80:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <CAN_GetFlagStatus+0x64>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004e88:	f04f 0301 	mov.w	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
 8004e8e:	e042      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004e90:	f04f 0300 	mov.w	r3, #0
 8004e94:	73fb      	strb	r3, [r7, #15]
 8004e96:	e03e      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d011      	beq.n	8004ec6 <CAN_GetFlagStatus+0x9a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689a      	ldr	r2, [r3, #8]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004eae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <CAN_GetFlagStatus+0x92>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004eb6:	f04f 0301 	mov.w	r3, #1
 8004eba:	73fb      	strb	r3, [r7, #15]
 8004ebc:	e02b      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004ebe:	f04f 0300 	mov.w	r3, #0
 8004ec2:	73fb      	strb	r3, [r7, #15]
 8004ec4:	e027      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d011      	beq.n	8004ef4 <CAN_GetFlagStatus+0xc8>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004edc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <CAN_GetFlagStatus+0xc0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004ee4:	f04f 0301 	mov.w	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	e014      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e010      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	4013      	ands	r3, r2
 8004efc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <CAN_GetFlagStatus+0xe4>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8004f08:	f04f 0301 	mov.w	r3, #1
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	e002      	b.n	8004f16 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 8004f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f107 0714 	add.w	r7, r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	f04f 0370 	mov.w	r3, #112	; 0x70
 8004f3a:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d104      	bne.n	8004f4c <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	619a      	str	r2, [r3, #24]
 8004f4a:	e023      	b.n	8004f94 <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004f52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f56:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d003      	beq.n	8004f6a <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	60da      	str	r2, [r3, #12]
 8004f68:	e014      	b.n	8004f94 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	611a      	str	r2, [r3, #16]
 8004f7a:	e00b      	b.n	8004f94 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d003      	beq.n	8004f8e <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	e002      	b.n	8004f94 <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68fa      	ldr	r2, [r7, #12]
 8004f92:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004f94:	f107 0714 	add.w	r7, r7, #20
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop

08004fa0 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	695a      	ldr	r2, [r3, #20]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80c4 	beq.w	8005146 <CAN_GetITStatus+0x1a6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d06b      	beq.n	800509c <CAN_GetITStatus+0xfc>
 8004fc4:	2b40      	cmp	r3, #64	; 0x40
 8004fc6:	d80f      	bhi.n	8004fe8 <CAN_GetITStatus+0x48>
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d03f      	beq.n	800504c <CAN_GetITStatus+0xac>
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d804      	bhi.n	8004fda <CAN_GetITStatus+0x3a>
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d025      	beq.n	8005020 <CAN_GetITStatus+0x80>
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d02f      	beq.n	8005038 <CAN_GetITStatus+0x98>
 8004fd8:	e0b1      	b.n	800513e <CAN_GetITStatus+0x19e>
 8004fda:	2b10      	cmp	r3, #16
 8004fdc:	d04a      	beq.n	8005074 <CAN_GetITStatus+0xd4>
 8004fde:	2b20      	cmp	r3, #32
 8004fe0:	d052      	beq.n	8005088 <CAN_GetITStatus+0xe8>
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d03c      	beq.n	8005060 <CAN_GetITStatus+0xc0>
 8004fe6:	e0aa      	b.n	800513e <CAN_GetITStatus+0x19e>
 8004fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fec:	f000 8092 	beq.w	8005114 <CAN_GetITStatus+0x174>
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ff4:	d809      	bhi.n	800500a <CAN_GetITStatus+0x6a>
 8004ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ffa:	d077      	beq.n	80050ec <CAN_GetITStatus+0x14c>
 8004ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005000:	d07e      	beq.n	8005100 <CAN_GetITStatus+0x160>
 8005002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005006:	d067      	beq.n	80050d8 <CAN_GetITStatus+0x138>
 8005008:	e099      	b.n	800513e <CAN_GetITStatus+0x19e>
 800500a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800500e:	d04f      	beq.n	80050b0 <CAN_GetITStatus+0x110>
 8005010:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005014:	d056      	beq.n	80050c4 <CAN_GetITStatus+0x124>
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501a:	f000 8085 	beq.w	8005128 <CAN_GetITStatus+0x188>
 800501e:	e08e      	b.n	800513e <CAN_GetITStatus+0x19e>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f240 1101 	movw	r1, #257	; 0x101
 800502a:	f2c0 0101 	movt	r1, #1
 800502e:	f000 f911 	bl	8005254 <CheckITStatus>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]
        break;
 8005036:	e089      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4618      	mov	r0, r3
 800503e:	f04f 0103 	mov.w	r1, #3
 8005042:	f000 f907 	bl	8005254 <CheckITStatus>
 8005046:	4603      	mov	r3, r0
 8005048:	73fb      	strb	r3, [r7, #15]
        break;
 800504a:	e07f      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	4618      	mov	r0, r3
 8005052:	f04f 0108 	mov.w	r1, #8
 8005056:	f000 f8fd 	bl	8005254 <CheckITStatus>
 800505a:	4603      	mov	r3, r0
 800505c:	73fb      	strb	r3, [r7, #15]
        break;
 800505e:	e075      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4618      	mov	r0, r3
 8005066:	f04f 0110 	mov.w	r1, #16
 800506a:	f000 f8f3 	bl	8005254 <CheckITStatus>
 800506e:	4603      	mov	r3, r0
 8005070:	73fb      	strb	r3, [r7, #15]
        break;
 8005072:	e06b      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	4618      	mov	r0, r3
 800507a:	f04f 0103 	mov.w	r1, #3
 800507e:	f000 f8e9 	bl	8005254 <CheckITStatus>
 8005082:	4603      	mov	r3, r0
 8005084:	73fb      	strb	r3, [r7, #15]
        break;
 8005086:	e061      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	4618      	mov	r0, r3
 800508e:	f04f 0108 	mov.w	r1, #8
 8005092:	f000 f8df 	bl	8005254 <CheckITStatus>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]
        break;
 800509a:	e057      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f04f 0110 	mov.w	r1, #16
 80050a6:	f000 f8d5 	bl	8005254 <CheckITStatus>
 80050aa:	4603      	mov	r3, r0
 80050ac:	73fb      	strb	r3, [r7, #15]
        break;
 80050ae:	e04d      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f04f 0108 	mov.w	r1, #8
 80050ba:	f000 f8cb 	bl	8005254 <CheckITStatus>
 80050be:	4603      	mov	r3, r0
 80050c0:	73fb      	strb	r3, [r7, #15]
        break;
 80050c2:	e043      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f04f 0110 	mov.w	r1, #16
 80050ce:	f000 f8c1 	bl	8005254 <CheckITStatus>
 80050d2:	4603      	mov	r3, r0
 80050d4:	73fb      	strb	r3, [r7, #15]
        break;
 80050d6:	e039      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	4618      	mov	r0, r3
 80050de:	f04f 0101 	mov.w	r1, #1
 80050e2:	f000 f8b7 	bl	8005254 <CheckITStatus>
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ea:	e02f      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f04f 0102 	mov.w	r1, #2
 80050f6:	f000 f8ad 	bl	8005254 <CheckITStatus>
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
        break;
 80050fe:	e025      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	4618      	mov	r0, r3
 8005106:	f04f 0104 	mov.w	r1, #4
 800510a:	f000 f8a3 	bl	8005254 <CheckITStatus>
 800510e:	4603      	mov	r3, r0
 8005110:	73fb      	strb	r3, [r7, #15]
        break;
 8005112:	e01b      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	4618      	mov	r0, r3
 800511a:	f04f 0170 	mov.w	r1, #112	; 0x70
 800511e:	f000 f899 	bl	8005254 <CheckITStatus>
 8005122:	4603      	mov	r3, r0
 8005124:	73fb      	strb	r3, [r7, #15]
        break;
 8005126:	e011      	b.n	800514c <CAN_GetITStatus+0x1ac>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	f04f 0104 	mov.w	r1, #4
 8005132:	f000 f88f 	bl	8005254 <CheckITStatus>
 8005136:	4603      	mov	r3, r0
 8005138:	73fb      	strb	r3, [r7, #15]
        break;
 800513a:	bf00      	nop
 800513c:	e006      	b.n	800514c <CAN_GetITStatus+0x1ac>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 800513e:	f04f 0300 	mov.w	r3, #0
 8005142:	73fb      	strb	r3, [r7, #15]
        break;
 8005144:	e002      	b.n	800514c <CAN_GetITStatus+0x1ac>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	f107 0710 	add.w	r7, r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005168:	d04c      	beq.n	8005204 <CAN_ClearITPendingBit+0xac>
 800516a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800516e:	d80d      	bhi.n	800518c <CAN_ClearITPendingBit+0x34>
 8005170:	2b08      	cmp	r3, #8
 8005172:	d02e      	beq.n	80051d2 <CAN_ClearITPendingBit+0x7a>
 8005174:	2b08      	cmp	r3, #8
 8005176:	d804      	bhi.n	8005182 <CAN_ClearITPendingBit+0x2a>
 8005178:	2b01      	cmp	r3, #1
 800517a:	d01e      	beq.n	80051ba <CAN_ClearITPendingBit+0x62>
 800517c:	2b04      	cmp	r3, #4
 800517e:	d023      	beq.n	80051c8 <CAN_ClearITPendingBit+0x70>
 8005180:	e061      	b.n	8005246 <CAN_ClearITPendingBit+0xee>
 8005182:	2b20      	cmp	r3, #32
 8005184:	d02a      	beq.n	80051dc <CAN_ClearITPendingBit+0x84>
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	d02d      	beq.n	80051e6 <CAN_ClearITPendingBit+0x8e>
 800518a:	e05c      	b.n	8005246 <CAN_ClearITPendingBit+0xee>
 800518c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005190:	d047      	beq.n	8005222 <CAN_ClearITPendingBit+0xca>
 8005192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005196:	d806      	bhi.n	80051a6 <CAN_ClearITPendingBit+0x4e>
 8005198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800519c:	d037      	beq.n	800520e <CAN_ClearITPendingBit+0xb6>
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a2:	d039      	beq.n	8005218 <CAN_ClearITPendingBit+0xc0>
 80051a4:	e04f      	b.n	8005246 <CAN_ClearITPendingBit+0xee>
 80051a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051aa:	d021      	beq.n	80051f0 <CAN_ClearITPendingBit+0x98>
 80051ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051b0:	d023      	beq.n	80051fa <CAN_ClearITPendingBit+0xa2>
 80051b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b6:	d03d      	beq.n	8005234 <CAN_ClearITPendingBit+0xdc>
 80051b8:	e045      	b.n	8005246 <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	f240 1301 	movw	r3, #257	; 0x101
 80051c0:	f2c0 0301 	movt	r3, #1
 80051c4:	6093      	str	r3, [r2, #8]
      break;
 80051c6:	e03f      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f04f 0208 	mov.w	r2, #8
 80051ce:	60da      	str	r2, [r3, #12]
      break;
 80051d0:	e03a      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f04f 0210 	mov.w	r2, #16
 80051d8:	60da      	str	r2, [r3, #12]
      break;
 80051da:	e035      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f04f 0208 	mov.w	r2, #8
 80051e2:	611a      	str	r2, [r3, #16]
      break;
 80051e4:	e030      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f04f 0210 	mov.w	r2, #16
 80051ec:	611a      	str	r2, [r3, #16]
      break;
 80051ee:	e02b      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f04f 0208 	mov.w	r2, #8
 80051f6:	605a      	str	r2, [r3, #4]
      break;
 80051f8:	e026      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f04f 0210 	mov.w	r2, #16
 8005200:	605a      	str	r2, [r3, #4]
      break;
 8005202:	e021      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f04f 0204 	mov.w	r2, #4
 800520a:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 800520c:	e01c      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f04f 0204 	mov.w	r2, #4
 8005214:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 8005216:	e017      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f04f 0204 	mov.w	r2, #4
 800521e:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8005220:	e012      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f04f 0204 	mov.w	r2, #4
 8005230:	605a      	str	r2, [r3, #4]
      break;
 8005232:	e009      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f04f 0204 	mov.w	r2, #4
 8005242:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8005244:	e000      	b.n	8005248 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 8005246:	bf00      	nop
   }
}
 8005248:	f107 070c 	add.w	r7, r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop

08005254 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	4013      	ands	r3, r2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800526e:	f04f 0301 	mov.w	r3, #1
 8005272:	73fb      	strb	r3, [r7, #15]
 8005274:	e002      	b.n	800527c <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 800527c:	7bfb      	ldrb	r3, [r7, #15]
}
 800527e:	4618      	mov	r0, r3
 8005280:	f107 0714 	add.w	r7, r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop

0800528c <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8005290:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005294:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005298:	f04f 0201 	mov.w	r2, #1
 800529c:	609a      	str	r2, [r3, #8]
}
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr

080052a4 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 80052ac:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 80052b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052c0:	681b      	ldr	r3, [r3, #0]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	f107 070c 	add.w	r7, r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop

080052d0 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
 80052e6:	e00e      	b.n	8005306 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 80052e8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80052ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	188a      	adds	r2, r1, r2
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f103 0301 	add.w	r3, r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	429a      	cmp	r2, r3
 800530c:	d3ec      	bcc.n	80052e8 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 800530e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005312:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005316:	681b      	ldr	r3, [r3, #0]
}
 8005318:	4618      	mov	r0, r3
 800531a:	f107 0714 	add.w	r7, r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	bc80      	pop	{r7}
 8005322:	4770      	bx	lr

08005324 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8005328:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800532c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005330:	681b      	ldr	r3, [r3, #0]
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop

0800533c <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8005346:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800534a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800534e:	79fa      	ldrb	r2, [r7, #7]
 8005350:	711a      	strb	r2, [r3, #4]
}
 8005352:	f107 070c 	add.w	r7, r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	bc80      	pop	{r7}
 800535a:	4770      	bx	lr

0800535c <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8005360:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005364:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	b2db      	uxtb	r3, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	bc80      	pop	{r7}
 8005372:	4770      	bx	lr

08005374 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8005378:	f04f 0010 	mov.w	r0, #16
 800537c:	f04f 0101 	mov.w	r1, #1
 8005380:	f007 f89e 	bl	800c4c0 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8005384:	f04f 0010 	mov.w	r0, #16
 8005388:	f04f 0100 	mov.w	r1, #0
 800538c:	f007 f898 	bl	800c4c0 <RCC_AHB2PeriphResetCmd>
}
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop

08005394 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 800539c:	f04f 0300 	mov.w	r3, #0
 80053a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 80053b2:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80053c4:	6811      	ldr	r1, [r2, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	8852      	ldrh	r2, [r2, #2]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80053e4:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80053e6:	f04f 0300 	mov.w	r3, #0
 80053ea:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80053ee:	f04f 0200 	mov.w	r2, #0
 80053f2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80053f6:	6811      	ldr	r1, [r2, #0]
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	8892      	ldrh	r2, [r2, #4]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	885b      	ldrh	r3, [r3, #2]
 8005404:	2b20      	cmp	r3, #32
 8005406:	d00b      	beq.n	8005420 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 800540c:	2b28      	cmp	r3, #40	; 0x28
 800540e:	d007      	beq.n	8005420 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 8005414:	2b30      	cmp	r3, #48	; 0x30
 8005416:	d003      	beq.n	8005420 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 800541c:	2b38      	cmp	r3, #56	; 0x38
 800541e:	d118      	bne.n	8005452 <CRYP_Init+0xbe>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005436:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005448:	6811      	ldr	r1, [r2, #0]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	88d2      	ldrh	r2, [r2, #6]
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8005452:	f04f 0300 	mov.w	r3, #0
 8005456:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005462:	6812      	ldr	r2, [r2, #0]
 8005464:	f022 0204 	bic.w	r2, r2, #4
 8005468:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800547a:	6811      	ldr	r1, [r2, #0]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	8812      	ldrh	r2, [r2, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	f107 070c 	add.w	r7, r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop

08005490 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f04f 0200 	mov.w	r2, #0
 800549e:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	80da      	strh	r2, [r3, #6]
}
 80054b8:	f107 070c 	add.w	r7, r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop

080054c4 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6852      	ldr	r2, [r2, #4]
 80054e6:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 80054e8:	f04f 0300 	mov.w	r3, #0
 80054ec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	6892      	ldr	r2, [r2, #8]
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	68d2      	ldr	r2, [r2, #12]
 8005502:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	6912      	ldr	r2, [r2, #16]
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8005512:	f04f 0300 	mov.w	r3, #0
 8005516:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6952      	ldr	r2, [r2, #20]
 800551e:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8005520:	f04f 0300 	mov.w	r3, #0
 8005524:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	6992      	ldr	r2, [r2, #24]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	69d2      	ldr	r2, [r2, #28]
 800553a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800553c:	f107 070c 	add.w	r7, r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	bc80      	pop	{r7}
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop

08005548 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f04f 0200 	mov.w	r2, #0
 800555e:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f04f 0200 	mov.w	r2, #0
 8005576:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f04f 0200 	mov.w	r2, #0
 800557e:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f04f 0200 	mov.w	r2, #0
 800558e:	61da      	str	r2, [r3, #28]
}
 8005590:	f107 070c 	add.w	r7, r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop

0800559c <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6812      	ldr	r2, [r2, #0]
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 80055b2:	f04f 0300 	mov.w	r3, #0
 80055b6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6852      	ldr	r2, [r2, #4]
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68d2      	ldr	r2, [r2, #12]
 80055da:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80055dc:	f107 070c 	add.w	r7, r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop

080055e8 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	60da      	str	r2, [r3, #12]
}
 8005610:	f107 070c 	add.w	r7, r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop

0800561c <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005628:	f04f 0200 	mov.w	r2, #0
 800562c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005630:	6812      	ldr	r2, [r2, #0]
 8005632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005636:	601a      	str	r2, [r3, #0]
}
 8005638:	46bd      	mov	sp, r7
 800563a:	bc80      	pop	{r7}
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop

08005640 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00c      	beq.n	800566a <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005658:	f04f 0200 	mov.w	r2, #0
 800565c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005660:	6812      	ldr	r2, [r2, #0]
 8005662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e00b      	b.n	8005682 <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005680:	601a      	str	r2, [r3, #0]
  }
}
 8005682:	f107 070c 	add.w	r7, r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	bc80      	pop	{r7}
 800568a:	4770      	bx	lr

0800568c <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8005694:	f04f 0300 	mov.w	r3, #0
 8005698:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	609a      	str	r2, [r3, #8]
}
 80056a0:	f107 070c 	add.w	r7, r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop

080056ac <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 80056ac:	b480      	push	{r7}
 80056ae:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80056b8:	68db      	ldr	r3, [r3, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	46bd      	mov	sp, r7
 80056be:	bc80      	pop	{r7}
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop

080056c4 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 80056ce:	f04f 0300 	mov.w	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80056e8:	f04f 0200 	mov.w	r2, #0
 80056ec:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80056f0:	6912      	ldr	r2, [r2, #16]
 80056f2:	f022 0201 	bic.w	r2, r2, #1
 80056f6:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 80056f8:	f04f 0300 	mov.w	r3, #0
 80056fc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 800570a:	f04f 0311 	mov.w	r3, #17
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e002      	b.n	8005718 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8005712:	f04f 0315 	mov.w	r3, #21
 8005716:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8005718:	f04f 0300 	mov.w	r3, #0
 800571c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	4013      	ands	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
    timeout++;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f103 0301 	add.w	r3, r3, #1
 800572e:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8005730:	68ba      	ldr	r2, [r7, #8]
 8005732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005736:	429a      	cmp	r2, r3
 8005738:	d002      	beq.n	8005740 <CRYP_SaveContext+0x7c>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d1eb      	bne.n	8005718 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	4013      	ands	r3, r2
 800574e:	2b01      	cmp	r3, #1
 8005750:	d003      	beq.n	800575a <CRYP_SaveContext+0x96>
  {
    status = ERROR;
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	74fb      	strb	r3, [r7, #19]
 8005758:	e05f      	b.n	800581a <CRYP_SaveContext+0x156>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 800575a:	f04f 0300 	mov.w	r3, #0
 800575e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800576a:	6912      	ldr	r2, [r2, #16]
 800576c:	f022 0202 	bic.w	r2, r2, #2
 8005770:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8005772:	f04f 0300 	mov.w	r3, #0
 8005776:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005782:	6812      	ldr	r2, [r2, #0]
 8005784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005788:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80057a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80057b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 80057b8:	f04f 0300 	mov.w	r3, #0
 80057bc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80057c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 80057c6:	f04f 0300 	mov.w	r3, #0
 80057ca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80057ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	68da      	ldr	r2, [r3, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	691a      	ldr	r2, [r3, #16]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	699a      	ldr	r2, [r3, #24]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	69da      	ldr	r2, [r3, #28]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8005814:	f04f 0301 	mov.w	r3, #1
 8005818:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 800581a:	7cfb      	ldrb	r3, [r7, #19]
}
 800581c:	4618      	mov	r0, r3
 800581e:	f107 071c 	add.w	r7, r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	6952      	ldr	r2, [r2, #20]
 800584a:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 800584c:	f04f 0300 	mov.w	r3, #0
 8005850:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6992      	ldr	r2, [r2, #24]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	69d2      	ldr	r2, [r2, #28]
 8005866:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6a12      	ldr	r2, [r2, #32]
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005890:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800589e:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6852      	ldr	r2, [r2, #4]
 80058ba:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 80058bc:	f04f 0300 	mov.w	r3, #0
 80058c0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6892      	ldr	r2, [r2, #8]
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	68d2      	ldr	r2, [r2, #12]
 80058d6:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 80058d8:	f04f 0300 	mov.w	r3, #0
 80058dc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6912      	ldr	r2, [r2, #16]
 80058e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 80058e6:	f04f 0300 	mov.w	r3, #0
 80058ea:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80058ee:	f04f 0200 	mov.w	r2, #0
 80058f2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058fc:	601a      	str	r2, [r3, #0]
}
 80058fe:	f107 070c 	add.w	r7, r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	bc80      	pop	{r7}
 8005906:	4770      	bx	lr

08005908 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	71fa      	strb	r2, [r7, #7]
 8005914:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8005916:	79bb      	ldrb	r3, [r7, #6]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <CRYP_DMACmd+0x2e>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800592c:	6911      	ldr	r1, [r2, #16]
 800592e:	79fa      	ldrb	r2, [r7, #7]
 8005930:	430a      	orrs	r2, r1
 8005932:	611a      	str	r2, [r3, #16]
 8005934:	e00e      	b.n	8005954 <CRYP_DMACmd+0x4c>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8005936:	f04f 0300 	mov.w	r3, #0
 800593a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005946:	6911      	ldr	r1, [r2, #16]
 8005948:	79fa      	ldrb	r2, [r7, #7]
 800594a:	ea6f 0202 	mvn.w	r2, r2
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	400a      	ands	r2, r1
 8005952:	611a      	str	r2, [r3, #16]
  }
}
 8005954:	f107 070c 	add.w	r7, r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	bc80      	pop	{r7}
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop

08005960 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	71fa      	strb	r2, [r7, #7]
 800596c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800596e:	79bb      	ldrb	r3, [r7, #6]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <CRYP_ITConfig+0x2e>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8005974:	f04f 0300 	mov.w	r3, #0
 8005978:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8005984:	6951      	ldr	r1, [r2, #20]
 8005986:	79fa      	ldrb	r2, [r7, #7]
 8005988:	430a      	orrs	r2, r1
 800598a:	615a      	str	r2, [r3, #20]
 800598c:	e00e      	b.n	80059ac <CRYP_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 800598e:	f04f 0300 	mov.w	r3, #0
 8005992:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005996:	f04f 0200 	mov.w	r2, #0
 800599a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800599e:	6951      	ldr	r1, [r2, #20]
 80059a0:	79fa      	ldrb	r2, [r7, #7]
 80059a2:	ea6f 0202 	mvn.w	r2, r2
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	400a      	ands	r2, r1
 80059aa:	615a      	str	r2, [r3, #20]
  }
}
 80059ac:	f107 070c 	add.w	r7, r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bc80      	pop	{r7}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop

080059b8 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	4603      	mov	r3, r0
 80059c0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 80059c2:	f04f 0300 	mov.w	r3, #0
 80059c6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	79fb      	ldrb	r3, [r7, #7]
 80059d4:	4013      	ands	r3, r2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <CRYP_GetITStatus+0x2a>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 80059da:	f04f 0301 	mov.w	r3, #1
 80059de:	73fb      	strb	r3, [r7, #15]
 80059e0:	e002      	b.n	80059e8 <CRYP_GetITStatus+0x30>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	f107 0714 	add.w	r7, r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop

080059f8 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	4603      	mov	r3, r0
 8005a00:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8005a02:	f04f 0300 	mov.w	r3, #0
 8005a06:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8005a0e:	79fb      	ldrb	r3, [r7, #7]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	e005      	b.n	8005a32 <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8005a26:	f04f 0300 	mov.w	r3, #0
 8005a2a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 8005a32:	79fa      	ldrb	r2, [r7, #7]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d003      	beq.n	8005a44 <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 8005a3c:	f04f 0301 	mov.w	r3, #1
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	e002      	b.n	8005a4a <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8005a44:	f04f 0300 	mov.w	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f107 0714 	add.w	r7, r7, #20
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bc80      	pop	{r7}
 8005a56:	4770      	bx	lr

08005a58 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8005a58:	b590      	push	{r4, r7, lr}
 8005a5a:	b0bb      	sub	sp, #236	; 0xec
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	4603      	mov	r3, r0
 8005a64:	73fb      	strb	r3, [r7, #15]
 8005a66:	4613      	mov	r3, r2
 8005a68:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8005a70:	f04f 0300 	mov.w	r3, #0
 8005a74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ErrorStatus status = SUCCESS;
 8005a78:	f04f 0301 	mov.w	r3, #1
 8005a7c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint32_t keyaddr    = (uint32_t)Key;
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t inputaddr  = (uint32_t)Input;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t outputaddr = (uint32_t)Output;
 8005a8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a90:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t i = 0;
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8005a9c:	f107 0318 	add.w	r3, r7, #24
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fd51 	bl	8005548 <CRYP_KeyStructInit>

  switch(Keysize)
 8005aa6:	89bb      	ldrh	r3, [r7, #12]
 8005aa8:	2bc0      	cmp	r3, #192	; 0xc0
 8005aaa:	d050      	beq.n	8005b4e <CRYP_AES_ECB+0xf6>
 8005aac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab0:	f000 80bd 	beq.w	8005c2e <CRYP_AES_ECB+0x1d6>
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	f040 8130 	bne.w	8005d1a <CRYP_AES_ECB+0x2c2>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005ac0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005aca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005ace:	ba1c      	rev	r4, r3
 8005ad0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  return(result);
 8005ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ad8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8005ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ade:	f103 0304 	add.w	r3, r3, #4
 8005ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005ae6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005af0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005af4:	ba1c      	rev	r4, r3
 8005af6:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
  return(result);
 8005afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005afe:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8005b00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b04:	f103 0304 	add.w	r3, r3, #4
 8005b08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005b0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005b1a:	ba1c      	rev	r4, r3
 8005b1c:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
  return(result);
 8005b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b24:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8005b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b2a:	f103 0304 	add.w	r3, r3, #4
 8005b2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005b32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005b40:	ba1c      	rev	r4, r3
 8005b42:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
  return(result);
 8005b46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8005b4c:	e0e6      	b.n	8005d1c <CRYP_AES_ECB+0x2c4>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8005b4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005b52:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005b54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005b62:	ba1c      	rev	r4, r3
 8005b64:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  return(result);
 8005b68:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005b6c:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8005b6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b72:	f103 0304 	add.w	r3, r3, #4
 8005b76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8005b7a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005b84:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005b88:	ba1c      	rev	r4, r3
 8005b8a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  return(result);
 8005b8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8005b94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005b98:	f103 0304 	add.w	r3, r3, #4
 8005b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005ba0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005baa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bae:	ba1c      	rev	r4, r3
 8005bb0:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  return(result);
 8005bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8005bba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bbe:	f103 0304 	add.w	r3, r3, #4
 8005bc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005bc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bd4:	ba1c      	rev	r4, r3
 8005bd6:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
  return(result);
 8005bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8005be0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005be4:	f103 0304 	add.w	r3, r3, #4
 8005be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005bec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bfa:	ba1c      	rev	r4, r3
 8005bfc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
  return(result);
 8005c00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c04:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8005c06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c0a:	f103 0304 	add.w	r3, r3, #4
 8005c0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005c12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c20:	ba1c      	rev	r4, r3
 8005c22:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
  return(result);
 8005c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8005c2c:	e076      	b.n	8005d1c <CRYP_AES_ECB+0x2c4>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8005c2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c32:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8005c34:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005c3c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005c3e:	ba1c      	rev	r4, r3
 8005c40:	67bc      	str	r4, [r7, #120]	; 0x78
  return(result);
 8005c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c44:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8005c46:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c4a:	f103 0304 	add.w	r3, r3, #4
 8005c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8005c52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c5c:	ba1c      	rev	r4, r3
 8005c5e:	673c      	str	r4, [r7, #112]	; 0x70
  return(result);
 8005c60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c62:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8005c64:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c68:	f103 0304 	add.w	r3, r3, #4
 8005c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8005c70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c7a:	ba1c      	rev	r4, r3
 8005c7c:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 8005c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c80:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8005c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c86:	f103 0304 	add.w	r3, r3, #4
 8005c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8005c8e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005c96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c98:	ba1c      	rev	r4, r3
 8005c9a:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8005c9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8005ca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ca4:	f103 0304 	add.w	r3, r3, #4
 8005ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005cac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cb6:	ba1c      	rev	r4, r3
 8005cb8:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8005cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8005cbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cc2:	f103 0304 	add.w	r3, r3, #4
 8005cc6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005cca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cd4:	ba1c      	rev	r4, r3
 8005cd6:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8005cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8005cdc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005ce0:	f103 0304 	add.w	r3, r3, #4
 8005ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005ce8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005cf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf2:	ba1c      	rev	r4, r3
 8005cf4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8005cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cf8:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8005cfa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cfe:	f103 0304 	add.w	r3, r3, #4
 8005d02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8005d06:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d10:	ba1c      	rev	r4, r3
 8005d12:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8005d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d16:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 8005d18:	e000      	b.n	8005d1c <CRYP_AES_ECB+0x2c4>
    default:
    break;
 8005d1a:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d138      	bne.n	8005d94 <CRYP_AES_ECB+0x33c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8005d22:	f7ff fc7b 	bl	800561c <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8005d26:	f04f 0304 	mov.w	r3, #4
 8005d2a:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 8005d2c:	f04f 0338 	mov.w	r3, #56	; 0x38
 8005d30:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8005d38:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7ff fb29 	bl	8005394 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8005d42:	f107 0318 	add.w	r3, r7, #24
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff fbbc 	bl	80054c4 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 8005d4c:	f04f 0001 	mov.w	r0, #1
 8005d50:	f7ff fc76 	bl	8005640 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005d54:	f04f 0010 	mov.w	r0, #16
 8005d58:	f7ff fe4e 	bl	80059f8 <CRYP_GetFlagStatus>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f103 0301 	add.w	r3, r3, #1
 8005d68:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d70:	d003      	beq.n	8005d7a <CRYP_AES_ECB+0x322>
 8005d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1ec      	bne.n	8005d54 <CRYP_AES_ECB+0x2fc>

    if (busystatus != RESET)
 8005d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d004      	beq.n	8005d8c <CRYP_AES_ECB+0x334>
   {
       status = ERROR;
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8005d8a:	e00b      	b.n	8005da4 <CRYP_AES_ECB+0x34c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8005d8c:	f04f 0304 	mov.w	r3, #4
 8005d90:	873b      	strh	r3, [r7, #56]	; 0x38
 8005d92:	e007      	b.n	8005da4 <CRYP_AES_ECB+0x34c>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8005d94:	f107 0318 	add.w	r3, r7, #24
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7ff fb93 	bl	80054c4 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8005da4:	f04f 0320 	mov.w	r3, #32
 8005da8:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8005daa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8005dae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8005db0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005db4:	4618      	mov	r0, r3
 8005db6:	f7ff faed 	bl	8005394 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8005dba:	f7ff fc2f 	bl	800561c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8005dbe:	f04f 0001 	mov.w	r0, #1
 8005dc2:	f7ff fc3d 	bl	8005640 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dce:	e084      	b.n	8005eda <CRYP_AES_ECB+0x482>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fc58 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f103 0304 	add.w	r3, r3, #4
 8005de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7ff fc4c 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df8:	f103 0304 	add.w	r3, r3, #4
 8005dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7ff fc40 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8005e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e10:	f103 0304 	add.w	r3, r3, #4
 8005e14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7ff fc34 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8005e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e28:	f103 0304 	add.w	r3, r3, #4
 8005e2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Wait until the complete message has been processed */
    counter = 0;
 8005e30:	f04f 0300 	mov.w	r3, #0
 8005e34:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8005e36:	f04f 0010 	mov.w	r0, #16
 8005e3a:	f7ff fddd 	bl	80059f8 <CRYP_GetFlagStatus>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f103 0301 	add.w	r3, r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e52:	d003      	beq.n	8005e5c <CRYP_AES_ECB+0x404>
 8005e54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1ec      	bne.n	8005e36 <CRYP_AES_ECB+0x3de>

    if (busystatus != RESET)
 8005e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <CRYP_AES_ECB+0x416>
   {
       status = ERROR;
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8005e6c:	e02f      	b.n	8005ece <CRYP_AES_ECB+0x476>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005e6e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005e72:	f7ff fc1b 	bl	80056ac <CRYP_DataOut>
 8005e76:	4603      	mov	r3, r0
 8005e78:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e7e:	f103 0304 	add.w	r3, r3, #4
 8005e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005e86:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005e8a:	f7ff fc0f 	bl	80056ac <CRYP_DataOut>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005e92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e96:	f103 0304 	add.w	r3, r3, #4
 8005e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8005e9e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005ea2:	f7ff fc03 	bl	80056ac <CRYP_DataOut>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eae:	f103 0304 	add.w	r3, r3, #4
 8005eb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8005eb6:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8005eba:	f7ff fbf7 	bl	80056ac <CRYP_DataOut>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8005ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ec6:	f103 0304 	add.w	r3, r3, #4
 8005eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8005ece:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ed2:	f103 0310 	add.w	r3, r3, #16
 8005ed6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eda:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8005ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d204      	bcs.n	8005ef0 <CRYP_AES_ECB+0x498>
 8005ee6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f47f af70 	bne.w	8005dd0 <CRYP_AES_ECB+0x378>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8005ef0:	f04f 0000 	mov.w	r0, #0
 8005ef4:	f7ff fba4 	bl	8005640 <CRYP_Cmd>

  return status; 
 8005ef8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	f107 07ec 	add.w	r7, r7, #236	; 0xec
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}
 8005f06:	bf00      	nop

08005f08 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8005f08:	b590      	push	{r4, r7, lr}
 8005f0a:	b0c7      	sub	sp, #284	; 0x11c
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	f107 0408 	add.w	r4, r7, #8
 8005f12:	6021      	str	r1, [r4, #0]
 8005f14:	f107 0104 	add.w	r1, r7, #4
 8005f18:	600a      	str	r2, [r1, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f107 0310 	add.w	r3, r7, #16
 8005f20:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f24:	4601      	mov	r1, r0
 8005f26:	7019      	strb	r1, [r3, #0]
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8005f2e:	f04f 0200 	mov.w	r2, #0
 8005f32:	f107 0310 	add.w	r3, r7, #16
 8005f36:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8005f40:	f04f 0301 	mov.w	r3, #1
 8005f44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8005f48:	f107 0304 	add.w	r3, r7, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8005f52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005f56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8005f5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8005f5e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8005f62:	f107 0308 	add.w	r3, r7, #8
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8005f6c:	f04f 0300 	mov.w	r3, #0
 8005f70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8005f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7ff fae5 	bl	8005548 <CRYP_KeyStructInit>

  switch(Keysize)
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	2bc0      	cmp	r3, #192	; 0xc0
 8005f86:	d051      	beq.n	800602c <CRYP_AES_CBC+0x124>
 8005f88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f8c:	f000 80bf 	beq.w	800610e <CRYP_AES_CBC+0x206>
 8005f90:	2b80      	cmp	r3, #128	; 0x80
 8005f92:	f040 8149 	bne.w	8006228 <CRYP_AES_CBC+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8005f9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005fa8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005fac:	ba1c      	rev	r4, r3
 8005fae:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8005fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fb6:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8005fb8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fbc:	f103 0304 	add.w	r3, r3, #4
 8005fc0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8005fc4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005fce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005fd2:	ba1c      	rev	r4, r3
 8005fd4:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8005fd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8005fde:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fe2:	f103 0304 	add.w	r3, r3, #4
 8005fe6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8005fea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8005ff4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ff8:	ba1c      	rev	r4, r3
 8005ffa:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006002:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8006004:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006008:	f103 0304 	add.w	r3, r3, #4
 800600c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006010:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	ba1c      	rev	r4, r3
 8006020:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8006024:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006028:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800602a:	e0fe      	b.n	800622a <CRYP_AES_CBC+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800602c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006030:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006034:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800603e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006042:	ba1c      	rev	r4, r3
 8006044:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8006048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800604e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006052:	f103 0304 	add.w	r3, r3, #4
 8006056:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800605a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006064:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006068:	ba1c      	rev	r4, r3
 800606a:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 800606e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006072:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006074:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006078:	f103 0304 	add.w	r3, r3, #4
 800607c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006080:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800608a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800608e:	ba1c      	rev	r4, r3
 8006090:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8006094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006098:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800609a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800609e:	f103 0304 	add.w	r3, r3, #4
 80060a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80060a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80060b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060b4:	ba1c      	rev	r4, r3
 80060b6:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 80060ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80060be:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80060c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060c4:	f103 0304 	add.w	r3, r3, #4
 80060c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80060cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060da:	ba1c      	rev	r4, r3
 80060dc:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 80060e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80060e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80060e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060ea:	f103 0304 	add.w	r3, r3, #4
 80060ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80060f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006100:	ba1c      	rev	r4, r3
 8006102:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 8006106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800610a:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800610c:	e08d      	b.n	800622a <CRYP_AES_CBC+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800610e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006112:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8006116:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006120:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006124:	ba1c      	rev	r4, r3
 8006126:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 800612a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8006130:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006134:	f103 0304 	add.w	r3, r3, #4
 8006138:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800613c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006146:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800614a:	ba1c      	rev	r4, r3
 800614c:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8006150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006154:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006156:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800615a:	f103 0304 	add.w	r3, r3, #4
 800615e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006162:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800616c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006170:	ba1c      	rev	r4, r3
 8006172:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8006176:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800617c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006180:	f103 0304 	add.w	r3, r3, #4
 8006184:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006188:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006192:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006196:	ba1c      	rev	r4, r3
 8006198:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 800619c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061a0:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80061a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061a6:	f103 0304 	add.w	r3, r3, #4
 80061aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80061ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80061b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061bc:	ba1c      	rev	r4, r3
 80061be:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 80061c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80061c8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061cc:	f103 0304 	add.w	r3, r3, #4
 80061d0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80061d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80061de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061e2:	ba1c      	rev	r4, r3
 80061e4:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 80061e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061e8:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80061ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061ee:	f103 0304 	add.w	r3, r3, #4
 80061f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80061f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80061fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006200:	ba1c      	rev	r4, r3
 8006202:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8006204:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8006208:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800620c:	f103 0304 	add.w	r3, r3, #4
 8006210:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006214:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800621c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800621e:	ba1c      	rev	r4, r3
 8006220:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8006222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006224:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8006226:	e000      	b.n	800622a <CRYP_AES_CBC+0x322>
    default:
    break;
 8006228:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800622a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006232:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006234:	ba1c      	rev	r4, r3
 8006236:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8006238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800623a:	461a      	mov	r2, r3
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8006242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006246:	f103 0304 	add.w	r3, r3, #4
 800624a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800624e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006258:	ba1c      	rev	r4, r3
 800625a:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800625c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800625e:	461a      	mov	r2, r3
 8006260:	f107 0314 	add.w	r3, r7, #20
 8006264:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8006266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800626a:	f103 0304 	add.w	r3, r3, #4
 800626e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8006272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800627a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800627c:	ba1c      	rev	r4, r3
 800627e:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8006280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006282:	461a      	mov	r2, r3
 8006284:	f107 0314 	add.w	r3, r7, #20
 8006288:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 800628a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800628e:	f103 0304 	add.w	r3, r3, #4
 8006292:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8006296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800629e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a0:	ba1c      	rev	r4, r3
 80062a2:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 80062a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a6:	461a      	mov	r2, r3
 80062a8:	f107 0314 	add.w	r3, r7, #20
 80062ac:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80062ae:	f107 0310 	add.w	r3, r7, #16
 80062b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d142      	bne.n	8006342 <CRYP_AES_CBC+0x43a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 80062bc:	f7ff f9ae 	bl	800561c <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80062c0:	f04f 0304 	mov.w	r3, #4
 80062c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80062c8:	f04f 0338 	mov.w	r3, #56	; 0x38
 80062cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 80062d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80062dc:	4618      	mov	r0, r3
 80062de:	f7ff f859 	bl	8005394 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80062e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff f8ec 	bl	80054c4 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80062ec:	f04f 0001 	mov.w	r0, #1
 80062f0:	f7ff f9a6 	bl	8005640 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80062f4:	f04f 0010 	mov.w	r0, #16
 80062f8:	f7ff fb7e 	bl	80059f8 <CRYP_GetFlagStatus>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8006302:	f107 0310 	add.w	r3, r7, #16
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f103 0201 	add.w	r2, r3, #1
 800630c:	f107 0310 	add.w	r3, r7, #16
 8006310:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006312:	f107 0310 	add.w	r3, r7, #16
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800631c:	d003      	beq.n	8006326 <CRYP_AES_CBC+0x41e>
 800631e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e6      	bne.n	80062f4 <CRYP_AES_CBC+0x3ec>

    if (busystatus != RESET)
 8006326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <CRYP_AES_CBC+0x430>
   {
       status = ERROR;
 800632e:	f04f 0300 	mov.w	r3, #0
 8006332:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8006336:	e00d      	b.n	8006354 <CRYP_AES_CBC+0x44c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006338:	f04f 0304 	mov.w	r3, #4
 800633c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006340:	e008      	b.n	8006354 <CRYP_AES_CBC+0x44c>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8006342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff f8bc 	bl	80054c4 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8006354:	f04f 0328 	mov.w	r3, #40	; 0x28
 8006358:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800635c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006360:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8006364:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006368:	4618      	mov	r0, r3
 800636a:	f7ff f813 	bl	8005394 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800636e:	f107 0314 	add.w	r3, r7, #20
 8006372:	4618      	mov	r0, r3
 8006374:	f7ff f912 	bl	800559c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8006378:	f7ff f950 	bl	800561c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800637c:	f04f 0001 	mov.w	r0, #1
 8006380:	f7ff f95e 	bl	8005640 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8006384:	f04f 0300 	mov.w	r3, #0
 8006388:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800638c:	e08c      	b.n	80064a8 <CRYP_AES_CBC+0x5a0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800638e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff f979 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 800639a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800639e:	f103 0304 	add.w	r3, r3, #4
 80063a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80063a6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7ff f96d 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 80063b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063b6:	f103 0304 	add.w	r3, r3, #4
 80063ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80063be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff f961 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 80063ca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063ce:	f103 0304 	add.w	r3, r3, #4
 80063d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80063d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff f955 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 80063e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80063e6:	f103 0304 	add.w	r3, r3, #4
 80063ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 80063ee:	f04f 0200 	mov.w	r2, #0
 80063f2:	f107 0310 	add.w	r3, r7, #16
 80063f6:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80063f8:	f04f 0010 	mov.w	r0, #16
 80063fc:	f7ff fafc 	bl	80059f8 <CRYP_GetFlagStatus>
 8006400:	4603      	mov	r3, r0
 8006402:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8006406:	f107 0310 	add.w	r3, r7, #16
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f103 0201 	add.w	r2, r3, #1
 8006410:	f107 0310 	add.w	r3, r7, #16
 8006414:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006416:	f107 0310 	add.w	r3, r7, #16
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006420:	d003      	beq.n	800642a <CRYP_AES_CBC+0x522>
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1e6      	bne.n	80063f8 <CRYP_AES_CBC+0x4f0>

    if (busystatus != RESET)
 800642a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642e:	2b00      	cmp	r3, #0
 8006430:	d004      	beq.n	800643c <CRYP_AES_CBC+0x534>
   {
       status = ERROR;
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800643a:	e02f      	b.n	800649c <CRYP_AES_CBC+0x594>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800643c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006440:	f7ff f934 	bl	80056ac <CRYP_DataOut>
 8006444:	4603      	mov	r3, r0
 8006446:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800644c:	f103 0304 	add.w	r3, r3, #4
 8006450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006454:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006458:	f7ff f928 	bl	80056ac <CRYP_DataOut>
 800645c:	4603      	mov	r3, r0
 800645e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006464:	f103 0304 	add.w	r3, r3, #4
 8006468:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800646c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006470:	f7ff f91c 	bl	80056ac <CRYP_DataOut>
 8006474:	4603      	mov	r3, r0
 8006476:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800647c:	f103 0304 	add.w	r3, r3, #4
 8006480:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006484:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006488:	f7ff f910 	bl	80056ac <CRYP_DataOut>
 800648c:	4603      	mov	r3, r0
 800648e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006490:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006494:	f103 0304 	add.w	r3, r3, #4
 8006498:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 800649c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80064a0:	f103 0310 	add.w	r3, r3, #16
 80064a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80064a8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80064ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d204      	bcs.n	80064be <CRYP_AES_CBC+0x5b6>
 80064b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f af68 	bne.w	800638e <CRYP_AES_CBC+0x486>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f7ff f8bd 	bl	8005640 <CRYP_Cmd>

  return status;
 80064c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd90      	pop	{r4, r7, pc}

080064d4 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80064d4:	b590      	push	{r4, r7, lr}
 80064d6:	b0c7      	sub	sp, #284	; 0x11c
 80064d8:	af00      	add	r7, sp, #0
 80064da:	f107 0408 	add.w	r4, r7, #8
 80064de:	6021      	str	r1, [r4, #0]
 80064e0:	f107 0104 	add.w	r1, r7, #4
 80064e4:	600a      	str	r2, [r1, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f107 0310 	add.w	r3, r7, #16
 80064ec:	f103 33ff 	add.w	r3, r3, #4294967295
 80064f0:	4601      	mov	r1, r0
 80064f2:	7019      	strb	r1, [r3, #0]
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	f107 0310 	add.w	r3, r7, #16
 8006502:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 800650c:	f04f 0301 	mov.w	r3, #1
 8006510:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8006514:	f107 0304 	add.w	r3, r7, #4
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 800651e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006522:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8006526:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800652a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800652e:	f107 0308 	add.w	r3, r7, #8
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8006540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe ffff 	bl	8005548 <CRYP_KeyStructInit>

  switch(Keysize)
 800654a:	f107 030c 	add.w	r3, r7, #12
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	2bc0      	cmp	r3, #192	; 0xc0
 8006552:	d051      	beq.n	80065f8 <CRYP_AES_CTR+0x124>
 8006554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006558:	f000 80bf 	beq.w	80066da <CRYP_AES_CTR+0x206>
 800655c:	2b80      	cmp	r3, #128	; 0x80
 800655e:	f040 8149 	bne.w	80067f4 <CRYP_AES_CTR+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800656a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006574:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006578:	ba1c      	rev	r4, r3
 800657a:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006584:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006588:	f103 0304 	add.w	r3, r3, #4
 800658c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800659a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800659e:	ba1c      	rev	r4, r3
 80065a0:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 80065a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065a8:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80065aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ae:	f103 0304 	add.w	r3, r3, #4
 80065b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80065b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80065c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065c4:	ba1c      	rev	r4, r3
 80065c6:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 80065ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80065d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065d4:	f103 0304 	add.w	r3, r3, #4
 80065d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80065dc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065ea:	ba1c      	rev	r4, r3
 80065ec:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 80065f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065f4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80065f6:	e0fe      	b.n	80067f6 <CRYP_AES_CTR+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 80065f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006600:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800660a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800660e:	ba1c      	rev	r4, r3
 8006610:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8006614:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006618:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800661a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800661e:	f103 0304 	add.w	r3, r3, #4
 8006622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006626:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006630:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006634:	ba1c      	rev	r4, r3
 8006636:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 800663a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800663e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8006640:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006644:	f103 0304 	add.w	r3, r3, #4
 8006648:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800664c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006656:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800665a:	ba1c      	rev	r4, r3
 800665c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8006660:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006666:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800666a:	f103 0304 	add.w	r3, r3, #4
 800666e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006672:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800667c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006680:	ba1c      	rev	r4, r3
 8006682:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8006686:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800668a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 800668c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006690:	f103 0304 	add.w	r3, r3, #4
 8006694:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006698:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066a6:	ba1c      	rev	r4, r3
 80066a8:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 80066ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80066b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066b6:	f103 0304 	add.w	r3, r3, #4
 80066ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80066be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80066cc:	ba1c      	rev	r4, r3
 80066ce:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 80066d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066d6:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80066d8:	e08d      	b.n	80067f6 <CRYP_AES_CTR+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80066da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80066de:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80066e2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80066ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80066f0:	ba1c      	rev	r4, r3
 80066f2:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 80066f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 80066fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006700:	f103 0304 	add.w	r3, r3, #4
 8006704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8006708:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006712:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006716:	ba1c      	rev	r4, r3
 8006718:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 800671c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006720:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8006722:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006726:	f103 0304 	add.w	r3, r3, #4
 800672a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800672e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006738:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800673c:	ba1c      	rev	r4, r3
 800673e:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8006742:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8006748:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800674c:	f103 0304 	add.w	r3, r3, #4
 8006750:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006754:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800675e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006762:	ba1c      	rev	r4, r3
 8006764:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8006768:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800676c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 800676e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006772:	f103 0304 	add.w	r3, r3, #4
 8006776:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800677a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006784:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006788:	ba1c      	rev	r4, r3
 800678a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 800678e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006792:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8006794:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006798:	f103 0304 	add.w	r3, r3, #4
 800679c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80067a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80067ae:	ba1c      	rev	r4, r3
 80067b0:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 80067b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80067b4:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80067b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067ba:	f103 0304 	add.w	r3, r3, #4
 80067be:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80067c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067cc:	ba1c      	rev	r4, r3
 80067ce:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80067d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80067d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067d8:	f103 0304 	add.w	r3, r3, #4
 80067dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80067e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ea:	ba1c      	rev	r4, r3
 80067ec:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80067ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067f0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80067f2:	e000      	b.n	80067f6 <CRYP_AES_CTR+0x322>
    default:
    break;
 80067f4:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 80067f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80067fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006800:	ba1c      	rev	r4, r3
 8006802:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8006804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006806:	461a      	mov	r2, r3
 8006808:	f107 0314 	add.w	r3, r7, #20
 800680c:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006812:	f103 0304 	add.w	r3, r3, #4
 8006816:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800681a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006822:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006824:	ba1c      	rev	r4, r3
 8006826:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8006828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800682a:	461a      	mov	r2, r3
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8006832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006836:	f103 0304 	add.w	r3, r3, #4
 800683a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 800683e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006848:	ba1c      	rev	r4, r3
 800684a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800684c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800684e:	461a      	mov	r2, r3
 8006850:	f107 0314 	add.w	r3, r7, #20
 8006854:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8006856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685a:	f103 0304 	add.w	r3, r3, #4
 800685e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8006862:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800686a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800686c:	ba1c      	rev	r4, r3
 800686e:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8006870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006872:	461a      	mov	r2, r3
 8006874:	f107 0314 	add.w	r3, r7, #20
 8006878:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 800687a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe fe20 	bl	80054c4 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8006884:	f107 0310 	add.w	r3, r7, #16
 8006888:	f103 33ff 	add.w	r3, r3, #4294967295
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d104      	bne.n	800689c <CRYP_AES_CTR+0x3c8>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006892:	f04f 0304 	mov.w	r3, #4
 8006896:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800689a:	e003      	b.n	80068a4 <CRYP_AES_CTR+0x3d0>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 80068a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80068a8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80068ac:	f04f 0380 	mov.w	r3, #128	; 0x80
 80068b0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 80068b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fd6b 	bl	8005394 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 80068be:	f107 0314 	add.w	r3, r7, #20
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7fe fe6a 	bl	800559c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 80068c8:	f7fe fea8 	bl	800561c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80068cc:	f04f 0001 	mov.w	r0, #1
 80068d0:	f7fe feb6 	bl	8005640 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80068dc:	e08c      	b.n	80069f8 <CRYP_AES_CTR+0x524>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80068de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe fed1 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 80068ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068ee:	f103 0304 	add.w	r3, r3, #4
 80068f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80068f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fec5 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006902:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006906:	f103 0304 	add.w	r3, r3, #4
 800690a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800690e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe feb9 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 800691a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800691e:	f103 0304 	add.w	r3, r3, #4
 8006922:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006926:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe fead 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006932:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006936:	f103 0304 	add.w	r3, r3, #4
 800693a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f107 0310 	add.w	r3, r7, #16
 8006946:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006948:	f04f 0010 	mov.w	r0, #16
 800694c:	f7ff f854 	bl	80059f8 <CRYP_GetFlagStatus>
 8006950:	4603      	mov	r3, r0
 8006952:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8006956:	f107 0310 	add.w	r3, r7, #16
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f103 0201 	add.w	r2, r3, #1
 8006960:	f107 0310 	add.w	r3, r7, #16
 8006964:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8006966:	f107 0310 	add.w	r3, r7, #16
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006970:	d003      	beq.n	800697a <CRYP_AES_CTR+0x4a6>
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e6      	bne.n	8006948 <CRYP_AES_CTR+0x474>

    if (busystatus != RESET)
 800697a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800697e:	2b00      	cmp	r3, #0
 8006980:	d004      	beq.n	800698c <CRYP_AES_CTR+0x4b8>
   {
       status = ERROR;
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800698a:	e02f      	b.n	80069ec <CRYP_AES_CTR+0x518>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800698c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8006990:	f7fe fe8c 	bl	80056ac <CRYP_DataOut>
 8006994:	4603      	mov	r3, r0
 8006996:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800699c:	f103 0304 	add.w	r3, r3, #4
 80069a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80069a4:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80069a8:	f7fe fe80 	bl	80056ac <CRYP_DataOut>
 80069ac:	4603      	mov	r3, r0
 80069ae:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80069b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069b4:	f103 0304 	add.w	r3, r3, #4
 80069b8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80069bc:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80069c0:	f7fe fe74 	bl	80056ac <CRYP_DataOut>
 80069c4:	4603      	mov	r3, r0
 80069c6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80069c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069cc:	f103 0304 	add.w	r3, r3, #4
 80069d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80069d4:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 80069d8:	f7fe fe68 	bl	80056ac <CRYP_DataOut>
 80069dc:	4603      	mov	r3, r0
 80069de:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80069e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80069e4:	f103 0304 	add.w	r3, r3, #4
 80069e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80069ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80069f0:	f103 0310 	add.w	r3, r3, #16
 80069f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80069f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80069fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d204      	bcs.n	8006a0e <CRYP_AES_CTR+0x53a>
 8006a04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f47f af68 	bne.w	80068de <CRYP_AES_CTR+0x40a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8006a0e:	f04f 0000 	mov.w	r0, #0
 8006a12:	f7fe fe15 	bl	8005640 <CRYP_Cmd>

  return status;
 8006a16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd90      	pop	{r4, r7, pc}

08006a24 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b09b      	sub	sp, #108	; 0x6c
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006a34:	f04f 0300 	mov.w	r3, #0
 8006a38:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006a3a:	f04f 0300 	mov.w	r3, #0
 8006a3e:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8006a40:	f04f 0301 	mov.w	r3, #1
 8006a44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8006a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a52:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 8006a54:	f04f 0300 	mov.w	r3, #0
 8006a58:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8006a5a:	f107 0318 	add.w	r3, r7, #24
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f7fe fd72 	bl	8005548 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d103      	bne.n	8006a72 <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006a70:	e002      	b.n	8006a78 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8006a72:	f04f 0304 	mov.w	r3, #4
 8006a76:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8006a78:	f04f 0310 	mov.w	r3, #16
 8006a7c:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006a7e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a82:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 8006a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fe fc83 	bl	8005394 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006a8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a96:	ba1c      	rev	r4, r3
 8006a98:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8006a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a9c:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8006a9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa0:	f103 0304 	add.w	r3, r3, #4
 8006aa4:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aae:	ba1c      	rev	r4, r3
 8006ab0:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8006ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8006ab6:	f107 0318 	add.w	r3, r7, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fd02 	bl	80054c4 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006ac0:	f7fe fdac 	bl	800561c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006ac4:	f04f 0001 	mov.w	r0, #1
 8006ac8:	f7fe fdba 	bl	8005640 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ad2:	e043      	b.n	8006b5c <CRYP_DES_ECB+0x138>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006ad4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fdd7 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006ade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae0:	f103 0304 	add.w	r3, r3, #4
 8006ae4:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006ae6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fe fdce 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006af2:	f103 0304 	add.w	r3, r3, #4
 8006af6:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006afe:	f04f 0010 	mov.w	r0, #16
 8006b02:	f7fe ff79 	bl	80059f8 <CRYP_GetFlagStatus>
 8006b06:	4603      	mov	r3, r0
 8006b08:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f103 0301 	add.w	r3, r3, #1
 8006b10:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b18:	d002      	beq.n	8006b20 <CRYP_DES_ECB+0xfc>
 8006b1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1ee      	bne.n	8006afe <CRYP_DES_ECB+0xda>

    if (busystatus != RESET)
 8006b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <CRYP_DES_ECB+0x10c>
   {
       status = ERROR;
 8006b26:	f04f 0300 	mov.w	r3, #0
 8006b2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006b2e:	e011      	b.n	8006b54 <CRYP_DES_ECB+0x130>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006b30:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8006b32:	f7fe fdbb 	bl	80056ac <CRYP_DataOut>
 8006b36:	4603      	mov	r3, r0
 8006b38:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b3c:	f103 0304 	add.w	r3, r3, #4
 8006b40:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006b42:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8006b44:	f7fe fdb2 	bl	80056ac <CRYP_DataOut>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006b4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4e:	f103 0304 	add.w	r3, r3, #4
 8006b52:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b56:	f103 0308 	add.w	r3, r3, #8
 8006b5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d203      	bcs.n	8006b6c <CRYP_DES_ECB+0x148>
 8006b64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1b3      	bne.n	8006ad4 <CRYP_DES_ECB+0xb0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8006b6c:	f04f 0000 	mov.w	r0, #0
 8006b70:	f7fe fd66 	bl	8005640 <CRYP_Cmd>

  return status; 
 8006b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd90      	pop	{r4, r7, pc}
 8006b82:	bf00      	nop

08006b84 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8006b84:	b590      	push	{r4, r7, lr}
 8006b86:	b0a3      	sub	sp, #140	; 0x8c
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8006ba0:	f04f 0301 	mov.w	r3, #1
 8006ba4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8006bb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bb6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 8006bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fcbe 	bl	8005548 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d104      	bne.n	8006bdc <CRYP_DES_CBC+0x58>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006bda:	e003      	b.n	8006be4 <CRYP_DES_CBC+0x60>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8006bdc:	f04f 0304 	mov.w	r3, #4
 8006be0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 8006be4:	f04f 0318 	mov.w	r3, #24
 8006be8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006bec:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006bf0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 8006bf4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7fe fbcb 	bl	8005394 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006bfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006c04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c06:	ba1c      	rev	r4, r3
 8006c08:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8006c0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8006c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c10:	f103 0304 	add.w	r3, r3, #4
 8006c14:	673b      	str	r3, [r7, #112]	; 0x70
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006c16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1e:	ba1c      	rev	r4, r3
 8006c20:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8006c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8006c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fc4a 	bl	80054c4 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8006c30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c38:	ba1c      	rev	r4, r3
 8006c3a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8006c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3e:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8006c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c42:	f103 0304 	add.w	r3, r3, #4
 8006c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8006c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c50:	ba1c      	rev	r4, r3
 8006c52:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8006c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c56:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8006c58:	f107 0314 	add.w	r3, r7, #20
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fc9d 	bl	800559c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006c62:	f7fe fcdb 	bl	800561c <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006c66:	f04f 0001 	mov.w	r0, #1
 8006c6a:	f7fe fce9 	bl	8005640 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006c6e:	f04f 0300 	mov.w	r3, #0
 8006c72:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c74:	e049      	b.n	8006d0a <CRYP_DES_CBC+0x186>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fe fd05 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006c82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c86:	f103 0304 	add.w	r3, r3, #4
 8006c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe fcf9 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006c9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c9e:	f103 0304 	add.w	r3, r3, #4
 8006ca2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8006ca6:	f04f 0300 	mov.w	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006cac:	f04f 0010 	mov.w	r0, #16
 8006cb0:	f7fe fea2 	bl	80059f8 <CRYP_GetFlagStatus>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f103 0301 	add.w	r3, r3, #1
 8006cbe:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cc6:	d002      	beq.n	8006cce <CRYP_DES_CBC+0x14a>
 8006cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1ee      	bne.n	8006cac <CRYP_DES_CBC+0x128>

    if (busystatus != RESET)
 8006cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d004      	beq.n	8006cde <CRYP_DES_CBC+0x15a>
   {
       status = ERROR;
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006cdc:	e011      	b.n	8006d02 <CRYP_DES_CBC+0x17e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006cde:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006ce0:	f7fe fce4 	bl	80056ac <CRYP_DataOut>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006ce8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cea:	f103 0304 	add.w	r3, r3, #4
 8006cee:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006cf0:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006cf2:	f7fe fcdb 	bl	80056ac <CRYP_DataOut>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006cfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cfc:	f103 0304 	add.w	r3, r3, #4
 8006d00:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006d02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d04:	f103 0308 	add.w	r3, r3, #8
 8006d08:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d0a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d203      	bcs.n	8006d1c <CRYP_DES_CBC+0x198>
 8006d14:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1ac      	bne.n	8006c76 <CRYP_DES_CBC+0xf2>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8006d1c:	f04f 0000 	mov.w	r0, #0
 8006d20:	f7fe fc8e 	bl	8005640 <CRYP_Cmd>

  return status; 
 8006d24:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd90      	pop	{r4, r7, pc}
 8006d32:	bf00      	nop

08006d34 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8006d34:	b590      	push	{r4, r7, lr}
 8006d36:	b0a3      	sub	sp, #140	; 0x8c
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60b9      	str	r1, [r7, #8]
 8006d3c:	607a      	str	r2, [r7, #4]
 8006d3e:	603b      	str	r3, [r7, #0]
 8006d40:	4603      	mov	r3, r0
 8006d42:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8006d44:	f04f 0300 	mov.w	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8006d50:	f04f 0301 	mov.w	r3, #1
 8006d54:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8006d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t i = 0;
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8006d6e:	f107 0318 	add.w	r3, r7, #24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fbe8 	bl	8005548 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d103      	bne.n	8006d86 <CRYP_TDES_ECB+0x52>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8006d7e:	f04f 0300 	mov.w	r3, #0
 8006d82:	873b      	strh	r3, [r7, #56]	; 0x38
 8006d84:	e002      	b.n	8006d8c <CRYP_TDES_ECB+0x58>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006d86:	f04f 0304 	mov.w	r3, #4
 8006d8a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006d92:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d96:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8006d98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7fe faf9 	bl	8005394 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006daa:	ba1c      	rev	r4, r3
 8006dac:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 8006dae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006db0:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8006db2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006db4:	f103 0304 	add.w	r3, r3, #4
 8006db8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006dba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dc2:	ba1c      	rev	r4, r3
 8006dc4:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 8006dc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 8006dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dcc:	f103 0304 	add.w	r3, r3, #4
 8006dd0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dda:	ba1c      	rev	r4, r3
 8006ddc:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8006dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 8006de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006de4:	f103 0304 	add.w	r3, r3, #4
 8006de8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006dea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006df2:	ba1c      	rev	r4, r3
 8006df4:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8006df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8006dfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dfc:	f103 0304 	add.w	r3, r3, #4
 8006e00:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8006e02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0a:	ba1c      	rev	r4, r3
 8006e0c:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 8006e0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e10:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8006e12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e14:	f103 0304 	add.w	r3, r3, #4
 8006e18:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8006e1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e22:	ba1c      	rev	r4, r3
 8006e24:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8006e26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 8006e2a:	f107 0318 	add.w	r3, r7, #24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f7fe fb48 	bl	80054c4 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8006e34:	f7fe fbf2 	bl	800561c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8006e38:	f04f 0001 	mov.w	r0, #1
 8006e3c:	f7fe fc00 	bl	8005640 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006e40:	f04f 0300 	mov.w	r3, #0
 8006e44:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e46:	e049      	b.n	8006edc <CRYP_TDES_ECB+0x1a8>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006e48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fc1c 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e58:	f103 0304 	add.w	r3, r3, #4
 8006e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8006e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fc10 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 8006e6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e70:	f103 0304 	add.w	r3, r3, #4
 8006e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8006e78:	f04f 0300 	mov.w	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8006e7e:	f04f 0010 	mov.w	r0, #16
 8006e82:	f7fe fdb9 	bl	80059f8 <CRYP_GetFlagStatus>
 8006e86:	4603      	mov	r3, r0
 8006e88:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f103 0301 	add.w	r3, r3, #1
 8006e90:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e98:	d002      	beq.n	8006ea0 <CRYP_TDES_ECB+0x16c>
 8006e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1ee      	bne.n	8006e7e <CRYP_TDES_ECB+0x14a>

    if (busystatus != RESET)
 8006ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <CRYP_TDES_ECB+0x17c>
    {
       status = ERROR;
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8006eae:	e011      	b.n	8006ed4 <CRYP_TDES_ECB+0x1a0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006eb0:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006eb2:	f7fe fbfb 	bl	80056ac <CRYP_DataOut>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ebc:	f103 0304 	add.w	r3, r3, #4
 8006ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8006ec2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8006ec4:	f7fe fbf2 	bl	80056ac <CRYP_DataOut>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8006ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ece:	f103 0304 	add.w	r3, r3, #4
 8006ed2:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8006ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ed6:	f103 0308 	add.w	r3, r3, #8
 8006eda:	67bb      	str	r3, [r7, #120]	; 0x78
 8006edc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d203      	bcs.n	8006eec <CRYP_TDES_ECB+0x1b8>
 8006ee4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d1ad      	bne.n	8006e48 <CRYP_TDES_ECB+0x114>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8006eec:	f04f 0000 	mov.w	r0, #0
 8006ef0:	f7fe fba6 	bl	8005640 <CRYP_Cmd>

  return status; 
 8006ef4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd90      	pop	{r4, r7, pc}
 8006f02:	bf00      	nop

08006f04 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b0ab      	sub	sp, #172	; 0xac
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4603      	mov	r3, r0
 8006f12:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8006f14:	f04f 0300 	mov.w	r3, #0
 8006f18:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8006f1a:	f04f 0300 	mov.w	r3, #0
 8006f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8006f22:	f04f 0301 	mov.w	r3, #1
 8006f26:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8006f36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t i = 0;
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 8006f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe faf9 	bl	8005548 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d104      	bne.n	8006f66 <CRYP_TDES_CBC+0x62>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006f64:	e003      	b.n	8006f6e <CRYP_TDES_CBC+0x6a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8006f66:	f04f 0304 	mov.w	r3, #4
 8006f6a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 8006f6e:	f04f 0308 	mov.w	r3, #8
 8006f72:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8006f76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006f7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 8006f7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fa06 	bl	8005394 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8006f88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f96:	ba1c      	rev	r4, r3
 8006f98:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8006f9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8006fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fa6:	f103 0304 	add.w	r3, r3, #4
 8006faa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8006fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006fb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fbc:	ba1c      	rev	r4, r3
 8006fbe:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8006fc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fc2:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 8006fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fc8:	f103 0304 	add.w	r3, r3, #4
 8006fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8006fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006fd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fda:	ba1c      	rev	r4, r3
 8006fdc:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8006fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe0:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 8006fe2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006fe6:	f103 0304 	add.w	r3, r3, #4
 8006fea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8006fee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8006ff6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ff8:	ba1c      	rev	r4, r3
 8006ffa:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8006ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 8007000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007004:	f103 0304 	add.w	r3, r3, #4
 8007008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 800700c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007014:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007016:	ba1c      	rev	r4, r3
 8007018:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 800701a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800701c:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 800701e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007022:	f103 0304 	add.w	r3, r3, #4
 8007026:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800702a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007032:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007034:	ba1c      	rev	r4, r3
 8007036:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8007038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703a:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800703c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fa3f 	bl	80054c4 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8007046:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800704e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007050:	ba1c      	rev	r4, r3
 8007052:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8007054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007056:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8007058:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800705c:	f103 0304 	add.w	r3, r3, #4
 8007060:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8007064:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800706c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800706e:	ba1c      	rev	r4, r3
 8007070:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8007072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007074:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8007076:	f107 0314 	add.w	r3, r7, #20
 800707a:	4618      	mov	r0, r3
 800707c:	f7fe fa8e 	bl	800559c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8007080:	f7fe facc 	bl	800561c <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8007084:	f04f 0001 	mov.w	r0, #1
 8007088:	f7fe fada 	bl	8005640 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800708c:	f04f 0300 	mov.w	r3, #0
 8007090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007094:	e054      	b.n	8007140 <CRYP_TDES_CBC+0x23c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8007096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe faf5 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 80070a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070a6:	f103 0304 	add.w	r3, r3, #4
 80070aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80070ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f7fe fae9 	bl	800568c <CRYP_DataIn>
    inputaddr+=4;
 80070ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070be:	f103 0304 	add.w	r3, r3, #4
 80070c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 80070c6:	f04f 0300 	mov.w	r3, #0
 80070ca:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80070cc:	f04f 0010 	mov.w	r0, #16
 80070d0:	f7fe fc92 	bl	80059f8 <CRYP_GetFlagStatus>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	f103 0301 	add.w	r3, r3, #1
 80070e0:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e8:	d003      	beq.n	80070f2 <CRYP_TDES_CBC+0x1ee>
 80070ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1ec      	bne.n	80070cc <CRYP_TDES_CBC+0x1c8>

    if (busystatus != RESET)
 80070f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d004      	beq.n	8007104 <CRYP_TDES_CBC+0x200>
   {
       status = ERROR;
 80070fa:	f04f 0300 	mov.w	r3, #0
 80070fe:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8007102:	e017      	b.n	8007134 <CRYP_TDES_CBC+0x230>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8007104:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007108:	f7fe fad0 	bl	80056ac <CRYP_DataOut>
 800710c:	4603      	mov	r3, r0
 800710e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007114:	f103 0304 	add.w	r3, r3, #4
 8007118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800711c:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8007120:	f7fe fac4 	bl	80056ac <CRYP_DataOut>
 8007124:	4603      	mov	r3, r0
 8007126:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8007128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800712c:	f103 0304 	add.w	r3, r3, #4
 8007130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8007134:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007138:	f103 0308 	add.w	r3, r3, #8
 800713c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007140:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007144:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007148:	429a      	cmp	r2, r3
 800714a:	d203      	bcs.n	8007154 <CRYP_TDES_CBC+0x250>
 800714c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1a0      	bne.n	8007096 <CRYP_TDES_CBC+0x192>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8007154:	f04f 0000 	mov.w	r0, #0
 8007158:	f7fe fa72 	bl	8005640 <CRYP_Cmd>

  return status; 
 800715c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8007160:	4618      	mov	r0, r3
 8007162:	f107 07ac 	add.w	r7, r7, #172	; 0xac
 8007166:	46bd      	mov	sp, r7
 8007168:	bd90      	pop	{r4, r7, pc}
 800716a:	bf00      	nop

0800716c <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8007170:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007174:	f04f 0101 	mov.w	r1, #1
 8007178:	f005 f9f6 	bl	800c568 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 800717c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8007180:	f04f 0100 	mov.w	r1, #0
 8007184:	f005 f9f0 	bl	800c568 <RCC_APB1PeriphResetCmd>
}
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop

0800718c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8007196:	f04f 0300 	mov.w	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	f04f 0300 	mov.w	r3, #0
 80071a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 80071a2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80071a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	ea6f 0303 	mvn.w	r3, r3
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4013      	ands	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80071d0:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80071e8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80071ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	f107 0714 	add.w	r7, r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bc80      	pop	{r7}
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f04f 0200 	mov.w	r2, #0
 8007216:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	60da      	str	r2, [r3, #12]
}
 8007228:	f107 070c 	add.w	r7, r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	bc80      	pop	{r7}
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop

08007234 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	460b      	mov	r3, r1
 800723e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d010      	beq.n	8007268 <DAC_Cmd+0x34>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8007246:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800724a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800724e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007252:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007256:	6811      	ldr	r1, [r2, #0]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	f04f 0001 	mov.w	r0, #1
 800725e:	fa00 f202 	lsl.w	r2, r0, r2
 8007262:	430a      	orrs	r2, r1
 8007264:	601a      	str	r2, [r3, #0]
 8007266:	e011      	b.n	800728c <DAC_Cmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8007268:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800726c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007270:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007274:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007278:	6811      	ldr	r1, [r2, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	f04f 0001 	mov.w	r0, #1
 8007280:	fa00 f202 	lsl.w	r2, r0, r2
 8007284:	ea6f 0202 	mvn.w	r2, r2
 8007288:	400a      	ands	r2, r1
 800728a:	601a      	str	r2, [r3, #0]
  }
}
 800728c:	f107 070c 	add.w	r7, r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	bc80      	pop	{r7}
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80072a4:	78fb      	ldrb	r3, [r7, #3]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d012      	beq.n	80072d0 <DAC_SoftwareTriggerCmd+0x38>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 80072aa:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80072ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072b2:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80072b6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80072ba:	6851      	ldr	r1, [r2, #4]
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	ea4f 1212 	mov.w	r2, r2, lsr #4
 80072c2:	f04f 0001 	mov.w	r0, #1
 80072c6:	fa00 f202 	lsl.w	r2, r0, r2
 80072ca:	430a      	orrs	r2, r1
 80072cc:	605a      	str	r2, [r3, #4]
 80072ce:	e013      	b.n	80072f8 <DAC_SoftwareTriggerCmd+0x60>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80072d0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80072d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072d8:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80072dc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80072e0:	6851      	ldr	r1, [r2, #4]
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	ea4f 1212 	mov.w	r2, r2, lsr #4
 80072e8:	f04f 0001 	mov.w	r0, #1
 80072ec:	fa00 f202 	lsl.w	r2, r0, r2
 80072f0:	ea6f 0202 	mvn.w	r2, r2
 80072f4:	400a      	ands	r2, r1
 80072f6:	605a      	str	r2, [r3, #4]
  }
}
 80072f8:	f107 070c 	add.w	r7, r7, #12
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bc80      	pop	{r7}
 8007300:	4770      	bx	lr
 8007302:	bf00      	nop

08007304 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	4603      	mov	r3, r0
 800730c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800730e:	79fb      	ldrb	r3, [r7, #7]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00c      	beq.n	800732e <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 8007314:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007318:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800731c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007320:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007324:	6852      	ldr	r2, [r2, #4]
 8007326:	f042 0203 	orr.w	r2, r2, #3
 800732a:	605a      	str	r2, [r3, #4]
 800732c:	e00b      	b.n	8007346 <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 800732e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007332:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007336:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800733a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800733e:	6852      	ldr	r2, [r2, #4]
 8007340:	f022 0203 	bic.w	r2, r2, #3
 8007344:	605a      	str	r2, [r3, #4]
  }
}
 8007346:	f107 070c 	add.w	r7, r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	bc80      	pop	{r7}
 800734e:	4770      	bx	lr

08007350 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d00f      	beq.n	8007384 <DAC_WaveGenerationCmd+0x34>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8007364:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007368:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800736c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007370:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007374:	6811      	ldr	r1, [r2, #0]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	68b8      	ldr	r0, [r7, #8]
 800737a:	fa00 f202 	lsl.w	r2, r0, r2
 800737e:	430a      	orrs	r2, r1
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	e010      	b.n	80073a6 <DAC_WaveGenerationCmd+0x56>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8007384:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007388:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800738c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007390:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007394:	6811      	ldr	r1, [r2, #0]
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	68b8      	ldr	r0, [r7, #8]
 800739a:	fa00 f202 	lsl.w	r2, r0, r2
 800739e:	ea6f 0202 	mvn.w	r2, r2
 80073a2:	400a      	ands	r2, r1
 80073a4:	601a      	str	r2, [r3, #0]
  }
}
 80073a6:	f107 0714 	add.w	r7, r7, #20
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bc80      	pop	{r7}
 80073ae:	4770      	bx	lr

080073b0 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80073b0:	b480      	push	{r7}
 80073b2:	b085      	sub	sp, #20
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	460b      	mov	r3, r1
 80073ba:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80073c2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80073c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80073ca:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	18d3      	adds	r3, r2, r3
 80073d2:	f103 0308 	add.w	r3, r3, #8
 80073d6:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	887a      	ldrh	r2, [r7, #2]
 80073dc:	601a      	str	r2, [r3, #0]
}
 80073de:	f107 0714 	add.w	r7, r7, #20
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bc80      	pop	{r7}
 80073e6:	4770      	bx	lr

080073e8 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	460b      	mov	r3, r1
 80073f2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80073fa:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80073fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007402:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	18d3      	adds	r3, r2, r3
 800740a:	f103 0314 	add.w	r3, r3, #20
 800740e:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	887a      	ldrh	r2, [r7, #2]
 8007414:	601a      	str	r2, [r3, #0]
}
 8007416:	f107 0714 	add.w	r7, r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	bc80      	pop	{r7}
 800741e:	4770      	bx	lr

08007420 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	460a      	mov	r2, r1
 800742c:	807a      	strh	r2, [r7, #2]
 800742e:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	f04f 0300 	mov.w	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2b08      	cmp	r3, #8
 8007440:	d106      	bne.n	8007450 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	ea4f 2203 	mov.w	r2, r3, lsl #8
 8007448:	883b      	ldrh	r3, [r7, #0]
 800744a:	4313      	orrs	r3, r2
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	e005      	b.n	800745c <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8007450:	887b      	ldrh	r3, [r7, #2]
 8007452:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8007456:	883b      	ldrh	r3, [r7, #0]
 8007458:	4313      	orrs	r3, r2
 800745a:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 800745c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007460:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007464:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	18d3      	adds	r3, r2, r3
 800746c:	f103 0320 	add.w	r3, r3, #32
 8007470:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	601a      	str	r2, [r3, #0]
}
 8007478:	f107 0714 	add.w	r7, r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	bc80      	pop	{r7}
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop

08007484 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800748c:	f04f 0300 	mov.w	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8007492:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007496:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800749a:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	ea4f 0293 	mov.w	r2, r3, lsr #2
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	18d3      	adds	r3, r2, r3
 80074a6:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80074aa:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	b29b      	uxth	r3, r3
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	f107 0714 	add.w	r7, r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bc80      	pop	{r7}
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop

080074c0 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	460b      	mov	r3, r1
 80074ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80074cc:	78fb      	ldrb	r3, [r7, #3]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d010      	beq.n	80074f4 <DAC_DMACmd+0x34>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 80074d2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80074d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80074da:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80074de:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80074e2:	6811      	ldr	r1, [r2, #0]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80074ea:	fa00 f202 	lsl.w	r2, r0, r2
 80074ee:	430a      	orrs	r2, r1
 80074f0:	601a      	str	r2, [r3, #0]
 80074f2:	e011      	b.n	8007518 <DAC_DMACmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 80074f4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80074f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80074fc:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007500:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007504:	6811      	ldr	r1, [r2, #0]
 8007506:	687a      	ldr	r2, [r7, #4]
 8007508:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800750c:	fa00 f202 	lsl.w	r2, r0, r2
 8007510:	ea6f 0202 	mvn.w	r2, r2
 8007514:	400a      	ands	r2, r1
 8007516:	601a      	str	r2, [r3, #0]
  }
}
 8007518:	f107 070c 	add.w	r7, r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	bc80      	pop	{r7}
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop

08007524 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	4613      	mov	r3, r2
 8007530:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8007532:	79fb      	ldrb	r3, [r7, #7]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00f      	beq.n	8007558 <DAC_ITConfig+0x34>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8007538:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800753c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007540:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007544:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007548:	6811      	ldr	r1, [r2, #0]
 800754a:	68fa      	ldr	r2, [r7, #12]
 800754c:	68b8      	ldr	r0, [r7, #8]
 800754e:	fa00 f202 	lsl.w	r2, r0, r2
 8007552:	430a      	orrs	r2, r1
 8007554:	601a      	str	r2, [r3, #0]
 8007556:	e010      	b.n	800757a <DAC_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8007558:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800755c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007560:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8007564:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8007568:	6811      	ldr	r1, [r2, #0]
 800756a:	68fa      	ldr	r2, [r7, #12]
 800756c:	68b8      	ldr	r0, [r7, #8]
 800756e:	fa00 f202 	lsl.w	r2, r0, r2
 8007572:	ea6f 0202 	mvn.w	r2, r2
 8007576:	400a      	ands	r2, r1
 8007578:	601a      	str	r2, [r3, #0]
  }
}
 800757a:	f107 0714 	add.w	r7, r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	bc80      	pop	{r7}
 8007582:	4770      	bx	lr

08007584 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8007584:	b480      	push	{r7}
 8007586:	b085      	sub	sp, #20
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800758e:	f04f 0300 	mov.w	r3, #0
 8007592:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8007594:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007598:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800759c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	fa01 f303 	lsl.w	r3, r1, r3
 80075a6:	4013      	ands	r3, r2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <DAC_GetFlagStatus+0x30>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 80075ac:	f04f 0301 	mov.w	r3, #1
 80075b0:	73fb      	strb	r3, [r7, #15]
 80075b2:	e002      	b.n	80075ba <DAC_GetFlagStatus+0x36>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 80075b4:	f04f 0300 	mov.w	r3, #0
 80075b8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	f107 0714 	add.w	r7, r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bc80      	pop	{r7}
 80075c6:	4770      	bx	lr

080075c8 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 80075d2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80075d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	fa01 f202 	lsl.w	r2, r1, r2
 80075e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80075e4:	f107 070c 	add.w	r7, r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop

080075f0 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80075fa:	f04f 0300 	mov.w	r3, #0
 80075fe:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8007600:	f04f 0300 	mov.w	r3, #0
 8007604:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8007606:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800760a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6839      	ldr	r1, [r7, #0]
 8007614:	fa01 f303 	lsl.w	r3, r1, r3
 8007618:	4013      	ands	r3, r2
 800761a:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 800761c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007620:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	fa01 f303 	lsl.w	r3, r1, r3
 800762e:	4013      	ands	r3, r2
 8007630:	2b00      	cmp	r3, #0
 8007632:	d006      	beq.n	8007642 <DAC_GetITStatus+0x52>
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <DAC_GetITStatus+0x52>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 800763a:	f04f 0301 	mov.w	r3, #1
 800763e:	73fb      	strb	r3, [r7, #15]
 8007640:	e002      	b.n	8007648 <DAC_GetITStatus+0x58>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	f107 0714 	add.w	r7, r7, #20
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop

08007658 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8007662:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8007666:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	6839      	ldr	r1, [r7, #0]
 800766e:	fa01 f202 	lsl.w	r2, r1, r2
 8007672:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007674:	f107 070c 	add.w	r7, r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop

08007680 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8007680:	b480      	push	{r7}
 8007682:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8007684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007688:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 8007692:	4618      	mov	r0, r3
 8007694:	46bd      	mov	sp, r7
 8007696:	bc80      	pop	{r7}
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop

0800769c <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 80076a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076a4:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	ea4f 5303 	mov.w	r3, r3, lsl #20
 80076ae:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bc80      	pop	{r7}
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop

080076bc <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00c      	beq.n	80076e8 <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 80076ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076d2:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80076d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076da:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80076de:	6851      	ldr	r1, [r2, #4]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	e00d      	b.n	8007704 <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 80076e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076ec:	f2ce 0304 	movt	r3, #57348	; 0xe004
 80076f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076f4:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80076f8:	6851      	ldr	r1, [r2, #4]
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	ea6f 0202 	mvn.w	r2, r2
 8007700:	400a      	ands	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
  }
}
 8007704:	f107 070c 	add.w	r7, r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	bc80      	pop	{r7}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop

08007710 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	460b      	mov	r3, r1
 800771a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00c      	beq.n	800773c <DBGMCU_APB1PeriphConfig+0x2c>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8007722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007726:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800772a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800772e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007732:	6891      	ldr	r1, [r2, #8]
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	430a      	orrs	r2, r1
 8007738:	609a      	str	r2, [r3, #8]
 800773a:	e00d      	b.n	8007758 <DBGMCU_APB1PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 800773c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007740:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007744:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007748:	f2ce 0204 	movt	r2, #57348	; 0xe004
 800774c:	6891      	ldr	r1, [r2, #8]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	ea6f 0202 	mvn.w	r2, r2
 8007754:	400a      	ands	r2, r1
 8007756:	609a      	str	r2, [r3, #8]
  }
}
 8007758:	f107 070c 	add.w	r7, r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	bc80      	pop	{r7}
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop

08007764 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00c      	beq.n	8007790 <DBGMCU_APB2PeriphConfig+0x2c>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8007776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800777a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 800777e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007782:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8007786:	68d1      	ldr	r1, [r2, #12]
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	430a      	orrs	r2, r1
 800778c:	60da      	str	r2, [r3, #12]
 800778e:	e00d      	b.n	80077ac <DBGMCU_APB2PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8007790:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007794:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8007798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800779c:	f2ce 0204 	movt	r2, #57348	; 0xe004
 80077a0:	68d1      	ldr	r1, [r2, #12]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	ea6f 0202 	mvn.w	r2, r2
 80077a8:	400a      	ands	r2, r1
 80077aa:	60da      	str	r2, [r3, #12]
  }
}
 80077ac:	f107 070c 	add.w	r7, r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bc80      	pop	{r7}
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop

080077b8 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80077c4:	f04f 0200 	mov.w	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80077d2:	f04f 0200 	mov.w	r2, #0
 80077d6:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 80077d8:	f04f 0300 	mov.w	r3, #0
 80077dc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80077e0:	f04f 021f 	mov.w	r2, #31
 80077e4:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80077fc:	f04f 0200 	mov.w	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8007802:	f04f 0300 	mov.w	r3, #0
 8007806:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007818:	f04f 0200 	mov.w	r2, #0
 800781c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 800782c:	f04f 0300 	mov.w	r3, #0
 8007830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800783a:	f04f 0200 	mov.w	r2, #0
 800783e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007842:	6812      	ldr	r2, [r2, #0]
 8007844:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8007860:	f023 0312 	bic.w	r3, r3, #18
 8007864:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800786e:	4313      	orrs	r3, r2
 8007870:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8007876:	4313      	orrs	r3, r2
 8007878:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 800787e:	4313      	orrs	r3, r2
 8007880:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8007886:	4313      	orrs	r3, r2
 8007888:	b29a      	uxth	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	895b      	ldrh	r3, [r3, #10]
 800788e:	4313      	orrs	r3, r2
 8007890:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8007896:	4313      	orrs	r3, r2
 8007898:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	4313      	orrs	r3, r2
 800789e:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80078a8:	68fa      	ldr	r2, [r7, #12]
 80078aa:	601a      	str	r2, [r3, #0]
}
 80078ac:	f107 0714 	add.w	r7, r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bc80      	pop	{r7}
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop

080078b8 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f04f 0200 	mov.w	r2, #0
 80078d6:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f04f 0200 	mov.w	r2, #0
 80078de:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f04f 0200 	mov.w	r2, #0
 80078e6:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f04f 0200 	mov.w	r2, #0
 80078ee:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f04f 0200 	mov.w	r2, #0
 80078f6:	819a      	strh	r2, [r3, #12]
}
 80078f8:	f107 070c 	add.w	r7, r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bc80      	pop	{r7}
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop

08007904 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 800790c:	f04f 0300 	mov.w	r3, #0
 8007910:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	8852      	ldrh	r2, [r2, #2]
 8007918:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	8812      	ldrh	r2, [r2, #0]
 800791e:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8007922:	430a      	orrs	r2, r1
 8007924:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8007926:	f04f 0300 	mov.w	r3, #0
 800792a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	88d2      	ldrh	r2, [r2, #6]
 8007932:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8007934:	687a      	ldr	r2, [r7, #4]
 8007936:	8892      	ldrh	r2, [r2, #4]
 8007938:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 800793c:	430a      	orrs	r2, r1
 800793e:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8007940:	f107 070c 	add.w	r7, r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	bc80      	pop	{r7}
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop

0800794c <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d00c      	beq.n	8007976 <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007964:	f04f 0200 	mov.w	r2, #0
 8007968:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800796c:	6812      	ldr	r2, [r2, #0]
 800796e:	f042 0204 	orr.w	r2, r2, #4
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e00b      	b.n	800798e <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007986:	6812      	ldr	r2, [r2, #0]
 8007988:	f022 0204 	bic.w	r2, r2, #4
 800798c:	601a      	str	r2, [r3, #0]
  }
}
 800798e:	f107 070c 	add.w	r7, r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	bc80      	pop	{r7}
 8007996:	4770      	bx	lr

08007998 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80079a0:	f04f 0300 	mov.w	r3, #0
 80079a4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	7812      	ldrb	r2, [r2, #0]
 80079ac:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	7852      	ldrb	r2, [r2, #1]
 80079b2:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80079b6:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	7892      	ldrb	r2, [r2, #2]
 80079bc:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 80079c0:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	78d2      	ldrb	r2, [r2, #3]
 80079c6:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 80079ca:	430a      	orrs	r2, r1
 80079cc:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 80079ce:	f107 070c 	add.w	r7, r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr

080079d8 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00c      	beq.n	8007a02 <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80079f8:	6812      	ldr	r2, [r2, #0]
 80079fa:	f042 0208 	orr.w	r2, r2, #8
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e00b      	b.n	8007a1a <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8007a02:	f04f 0300 	mov.w	r3, #0
 8007a06:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007a12:	6812      	ldr	r2, [r2, #0]
 8007a14:	f022 0208 	bic.w	r2, r2, #8
 8007a18:	601a      	str	r2, [r3, #0]
  }
}
 8007a1a:	f107 070c 	add.w	r7, r7, #12
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bc80      	pop	{r7}
 8007a22:	4770      	bx	lr

08007a24 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007a2e:	79fb      	ldrb	r3, [r7, #7]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00c      	beq.n	8007a4e <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007a3c:	f04f 0200 	mov.w	r2, #0
 8007a40:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	e00b      	b.n	8007a66 <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007a56:	f04f 0200 	mov.w	r2, #0
 8007a5a:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a64:	601a      	str	r2, [r3, #0]
  }
}
 8007a66:	f107 070c 	add.w	r7, r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00c      	beq.n	8007a9a <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007a88:	f04f 0200 	mov.w	r2, #0
 8007a8c:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	f042 0201 	orr.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	e00b      	b.n	8007ab2 <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007aa2:	f04f 0200 	mov.w	r2, #0
 8007aa6:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007aaa:	6812      	ldr	r2, [r2, #0]
 8007aac:	f022 0201 	bic.w	r2, r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
  }
}
 8007ab2:	f107 070c 	add.w	r7, r7, #12
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bc80      	pop	{r7}
 8007aba:	4770      	bx	lr

08007abc <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 8007abc:	b480      	push	{r7}
 8007abe:	af00      	add	r7, sp, #0
  return DCMI->DR;
 8007ac0:	f04f 0300 	mov.w	r3, #0
 8007ac4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bc80      	pop	{r7}
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop

08007ad4 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	80fa      	strh	r2, [r7, #6]
 8007ae0:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007ae2:	797b      	ldrb	r3, [r7, #5]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <DCMI_ITConfig+0x2e>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007af0:	f04f 0200 	mov.w	r2, #0
 8007af4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007af8:	68d1      	ldr	r1, [r2, #12]
 8007afa:	88fa      	ldrh	r2, [r7, #6]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	60da      	str	r2, [r3, #12]
 8007b00:	e00e      	b.n	8007b20 <DCMI_ITConfig+0x4c>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8007b12:	68d1      	ldr	r1, [r2, #12]
 8007b14:	88fa      	ldrh	r2, [r7, #6]
 8007b16:	ea6f 0202 	mvn.w	r2, r2
 8007b1a:	b292      	uxth	r2, r2
 8007b1c:	400a      	ands	r2, r1
 8007b1e:	60da      	str	r2, [r3, #12]
  }  
}
 8007b20:	f107 070c 	add.w	r7, r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop

08007b2c <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	4603      	mov	r3, r0
 8007b34:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d106      	bne.n	8007b60 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	613b      	str	r3, [r7, #16]
 8007b5e:	e00f      	b.n	8007b80 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d106      	bne.n	8007b74 <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	e005      	b.n	8007b80 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8007b74:	f04f 0300 	mov.w	r3, #0
 8007b78:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8007b80:	88fa      	ldrh	r2, [r7, #6]
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	4013      	ands	r3, r2
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 8007b8a:	f04f 0301 	mov.w	r3, #1
 8007b8e:	75fb      	strb	r3, [r7, #23]
 8007b90:	e002      	b.n	8007b98 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 8007b92:	f04f 0300 	mov.w	r3, #0
 8007b96:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8007b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f107 071c 	add.w	r7, r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop

08007ba8 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	4603      	mov	r3, r0
 8007bb0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007bba:	88fa      	ldrh	r2, [r7, #6]
 8007bbc:	615a      	str	r2, [r3, #20]
}
 8007bbe:	f107 070c 	add.w	r7, r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bc80      	pop	{r7}
 8007bc6:	4770      	bx	lr

08007bc8 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	4603      	mov	r3, r0
 8007bd0:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 8007bde:	f04f 0300 	mov.w	r3, #0
 8007be2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	88fb      	ldrh	r3, [r7, #6]
 8007bea:	4013      	ands	r3, r2
 8007bec:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <DCMI_GetITStatus+0x34>
  {
    bitstatus = SET;
 8007bf4:	f04f 0301 	mov.w	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
 8007bfa:	e002      	b.n	8007c02 <DCMI_GetITStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	f107 0714 	add.w	r7, r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr

08007c10 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	615a      	str	r2, [r3, #20]
}
 8007c26:	f107 070c 	add.w	r7, r7, #12
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bc80      	pop	{r7}
 8007c2e:	4770      	bx	lr

08007c30 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f023 0201 	bic.w	r2, r3, #1
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f04f 0200 	mov.w	r2, #0
 8007c4a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f04f 0200 	mov.w	r2, #0
 8007c52:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f04f 0200 	mov.w	r2, #0
 8007c5a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f04f 0200 	mov.w	r2, #0
 8007c62:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f04f 0221 	mov.w	r2, #33	; 0x21
 8007c72:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	f246 0310 	movw	r3, #24592	; 0x6010
 8007c7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d107      	bne.n	8007c92 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8007c82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007c86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c8a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8007c8e:	609a      	str	r2, [r3, #8]
 8007c90:	e0eb      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	f246 0328 	movw	r3, #24616	; 0x6028
 8007c98:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d107      	bne.n	8007cb0 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8007ca0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ca8:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8007cac:	609a      	str	r2, [r3, #8]
 8007cae:	e0dc      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	f246 0340 	movw	r3, #24640	; 0x6040
 8007cb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d107      	bne.n	8007cce <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8007cbe:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007cc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cc6:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8007cca:	609a      	str	r2, [r3, #8]
 8007ccc:	e0cd      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	f246 0358 	movw	r3, #24664	; 0x6058
 8007cd4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d107      	bne.n	8007cec <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8007cdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007ce0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007ce4:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8007ce8:	609a      	str	r2, [r3, #8]
 8007cea:	e0be      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f246 0370 	movw	r3, #24688	; 0x6070
 8007cf2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d109      	bne.n	8007d0e <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8007cfa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007cfe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d02:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8007d06:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007d0a:	60da      	str	r2, [r3, #12]
 8007d0c:	e0ad      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	f246 0388 	movw	r3, #24712	; 0x6088
 8007d14:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d109      	bne.n	8007d30 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8007d1c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d24:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8007d28:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007d2c:	60da      	str	r2, [r3, #12]
 8007d2e:	e09c      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8007d36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d109      	bne.n	8007d52 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8007d3e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007d42:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8007d4e:	60da      	str	r2, [r3, #12]
 8007d50:	e08b      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8007d58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d107      	bne.n	8007d70 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8007d60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8007d64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d68:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8007d6c:	60da      	str	r2, [r3, #12]
 8007d6e:	e07c      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	f246 4310 	movw	r3, #25616	; 0x6410
 8007d76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d107      	bne.n	8007d8e <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8007d7e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007d82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d86:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	e06d      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	f246 4328 	movw	r3, #25640	; 0x6428
 8007d94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d107      	bne.n	8007dac <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8007d9c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007da0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007da4:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8007da8:	609a      	str	r2, [r3, #8]
 8007daa:	e05e      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	f246 4340 	movw	r3, #25664	; 0x6440
 8007db2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d107      	bne.n	8007dca <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8007dba:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007dbe:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dc2:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8007dc6:	609a      	str	r2, [r3, #8]
 8007dc8:	e04f      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	f246 4358 	movw	r3, #25688	; 0x6458
 8007dd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d107      	bne.n	8007de8 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8007dd8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007ddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007de0:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8007de4:	609a      	str	r2, [r3, #8]
 8007de6:	e040      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	f246 4370 	movw	r3, #25712	; 0x6470
 8007dee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d109      	bne.n	8007e0a <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8007df6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007dfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dfe:	f04f 023d 	mov.w	r2, #61	; 0x3d
 8007e02:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007e06:	60da      	str	r2, [r3, #12]
 8007e08:	e02f      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	f246 4388 	movw	r3, #25736	; 0x6488
 8007e10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e14:	429a      	cmp	r2, r3
 8007e16:	d109      	bne.n	8007e2c <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8007e18:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007e1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e20:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8007e24:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8007e28:	60da      	str	r2, [r3, #12]
 8007e2a:	e01e      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8007e32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d109      	bne.n	8007e4e <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8007e3a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e42:	f04f 0200 	mov.w	r2, #0
 8007e46:	f2c2 023d 	movt	r2, #8253	; 0x203d
 8007e4a:	60da      	str	r2, [r3, #12]
 8007e4c:	e00d      	b.n	8007e6a <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8007e54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d106      	bne.n	8007e6a <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8007e5c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8007e60:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e64:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8007e68:	60da      	str	r2, [r3, #12]
    }
  }
}
 8007e6a:	f107 070c 	add.w	r7, r7, #12
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bc80      	pop	{r7}
 8007e72:	4770      	bx	lr

08007e74 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007e7e:	f04f 0300 	mov.w	r3, #0
 8007e82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007e8a:	68fa      	ldr	r2, [r7, #12]
 8007e8c:	f248 033f 	movw	r3, #32831	; 0x803f
 8007e90:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8007e94:	4013      	ands	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8007ea6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8007eb2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	6a1b      	ldr	r3, [r3, #32]
 8007eb8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8007ebe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8007eca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68fa      	ldr	r2, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	685a      	ldr	r2, [r3, #4]
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60da      	str	r2, [r3, #12]
}
 8007f1a:	f107 0714 	add.w	r7, r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr

08007f24 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f04f 0200 	mov.w	r2, #0
 8007f3a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f04f 0200 	mov.w	r2, #0
 8007f5a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f04f 0200 	mov.w	r2, #0
 8007f62:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f04f 0200 	mov.w	r2, #0
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f04f 0200 	mov.w	r2, #0
 8007f82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f04f 0200 	mov.w	r2, #0
 8007f9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8007fa4:	f107 070c 	add.w	r7, r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bc80      	pop	{r7}
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d006      	beq.n	8007fd0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f043 0201 	orr.w	r2, r3, #1
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e005      	b.n	8007fdc <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f023 0201 	bic.w	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	601a      	str	r2, [r3, #0]
  }
}
 8007fdc:	f107 070c 	add.w	r7, r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bc80      	pop	{r7}
 8007fe4:	4770      	bx	lr
 8007fe6:	bf00      	nop

08007fe8 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	e005      	b.n	8008012 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	601a      	str	r2, [r3, #0]
  }
}
 8008012:	f107 070c 	add.w	r7, r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	bc80      	pop	{r7}
 800801a:	4770      	bx	lr

0800801c <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d006      	beq.n	800803a <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f043 0220 	orr.w	r2, r3, #32
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	601a      	str	r2, [r3, #0]
 8008038:	e005      	b.n	8008046 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f023 0220 	bic.w	r2, r3, #32
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	601a      	str	r2, [r3, #0]
  }
}
 8008046:	f107 070c 	add.w	r7, r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr

08008050 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800805c:	887a      	ldrh	r2, [r7, #2]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	605a      	str	r2, [r3, #4]
}
 8008062:	f107 070c 	add.w	r7, r7, #12
 8008066:	46bd      	mov	sp, r7
 8008068:	bc80      	pop	{r7}
 800806a:	4770      	bx	lr

0800806c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	b29b      	uxth	r3, r3
}
 800807a:	4618      	mov	r0, r3
 800807c:	f107 070c 	add.w	r7, r7, #12
 8008080:	46bd      	mov	sp, r7
 8008082:	bc80      	pop	{r7}
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop

08008088 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	e005      	b.n	80080b4 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	68ba      	ldr	r2, [r7, #8]
 80080b8:	611a      	str	r2, [r3, #16]
}
 80080ba:	f107 0714 	add.w	r7, r7, #20
 80080be:	46bd      	mov	sp, r7
 80080c0:	bc80      	pop	{r7}
 80080c2:	4770      	bx	lr

080080c4 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 80080d0:	78fb      	ldrb	r3, [r7, #3]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d006      	beq.n	80080e4 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	e005      	b.n	80080f0 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	601a      	str	r2, [r3, #0]
  }
}
 80080f0:	f107 070c 	add.w	r7, r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bc80      	pop	{r7}
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop

080080fc <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d003      	beq.n	8008116 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	611a      	str	r2, [r3, #16]
 8008114:	e002      	b.n	800811c <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	68ba      	ldr	r2, [r7, #8]
 800811a:	60da      	str	r2, [r3, #12]
  }
}
 800811c:	f107 0714 	add.w	r7, r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	bc80      	pop	{r7}
 8008124:	4770      	bx	lr
 8008126:	bf00      	nop

08008128 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8008130:	f04f 0300 	mov.w	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8008142:	f04f 0301 	mov.w	r3, #1
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	e002      	b.n	8008150 <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800814a:	f04f 0300 	mov.w	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8008150:	68fb      	ldr	r3, [r7, #12]
}
 8008152:	4618      	mov	r0, r3
 8008154:	f107 0714 	add.w	r7, r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop

08008160 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f003 0301 	and.w	r3, r3, #1
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800817c:	f04f 0301 	mov.w	r3, #1
 8008180:	73fb      	strb	r3, [r7, #15]
 8008182:	e002      	b.n	800818a <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8008184:	f04f 0300 	mov.w	r3, #0
 8008188:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800818a:	7bfb      	ldrb	r3, [r7, #15]
}
 800818c:	4618      	mov	r0, r3
 800818e:	f107 0714 	add.w	r7, r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	bc80      	pop	{r7}
 8008196:	4770      	bx	lr

08008198 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80081a0:	f04f 0300 	mov.w	r3, #0
 80081a4:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80081ae:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 80081b0:	68fb      	ldr	r3, [r7, #12]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	f107 0714 	add.w	r7, r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop

080081c0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b087      	sub	sp, #28
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80081d0:	f04f 0300 	mov.w	r3, #0
 80081d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	f246 430f 	movw	r3, #25615	; 0x640f
 80081dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d805      	bhi.n	80081f0 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80081e4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80081e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80081ec:	613b      	str	r3, [r7, #16]
 80081ee:	e004      	b.n	80081fa <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80081f0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80081f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80081f8:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	e002      	b.n	8008212 <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008218:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800821c:	4013      	ands	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	4013      	ands	r3, r2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d003      	beq.n	8008232 <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800822a:	f04f 0301 	mov.w	r3, #1
 800822e:	75fb      	strb	r3, [r7, #23]
 8008230:	e002      	b.n	8008238 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8008232:	f04f 0300 	mov.w	r3, #0
 8008236:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8008238:	7dfb      	ldrb	r3, [r7, #23]
}
 800823a:	4618      	mov	r0, r3
 800823c:	f107 071c 	add.w	r7, r7, #28
 8008240:	46bd      	mov	sp, r7
 8008242:	bc80      	pop	{r7}
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	f246 430f 	movw	r3, #25615	; 0x640f
 8008258:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800825c:	429a      	cmp	r2, r3
 800825e:	d805      	bhi.n	800826c <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8008260:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008264:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008268:	60fb      	str	r3, [r7, #12]
 800826a:	e004      	b.n	8008276 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800826c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008270:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008274:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d008      	beq.n	8008292 <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8008280:	683a      	ldr	r2, [r7, #0]
 8008282:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008286:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800828a:	4013      	ands	r3, r2
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	60d3      	str	r3, [r2, #12]
 8008290:	e007      	b.n	80082a2 <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008298:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800829c:	4013      	ands	r3, r2
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	6093      	str	r3, [r2, #8]
  }    
}
 80082a2:	f107 0714 	add.w	r7, r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bc80      	pop	{r7}
 80082aa:	4770      	bx	lr

080082ac <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b085      	sub	sp, #20
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4613      	mov	r3, r2
 80082b8:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00f      	beq.n	80082e4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80082c4:	79fb      	ldrb	r3, [r7, #7]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	615a      	str	r2, [r3, #20]
 80082d6:	e005      	b.n	80082e4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	695b      	ldr	r3, [r3, #20]
 80082dc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	2b80      	cmp	r3, #128	; 0x80
 80082e8:	d015      	beq.n	8008316 <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d008      	beq.n	8008302 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 031e 	and.w	r3, r3, #30
 80082fa:	431a      	orrs	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	601a      	str	r2, [r3, #0]
 8008300:	e009      	b.n	8008316 <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	f003 031e 	and.w	r3, r3, #30
 800830c:	ea6f 0303 	mvn.w	r3, r3
 8008310:	401a      	ands	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	601a      	str	r2, [r3, #0]
    }    
  }
}
 8008316:	f107 0714 	add.w	r7, r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	bc80      	pop	{r7}
 800831e:	4770      	bx	lr

08008320 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8008320:	b480      	push	{r7}
 8008322:	b087      	sub	sp, #28
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800832a:	f04f 0300 	mov.w	r3, #0
 800832e:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	60fb      	str	r3, [r7, #12]
 8008336:	f04f 0300 	mov.w	r3, #0
 800833a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	f246 430f 	movw	r3, #25615	; 0x640f
 8008342:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008346:	429a      	cmp	r2, r3
 8008348:	d805      	bhi.n	8008356 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800834a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800834e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008352:	613b      	str	r3, [r7, #16]
 8008354:	e004      	b.n	8008360 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8008356:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800835a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800835e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	f640 733c 	movw	r3, #3900	; 0xf3c
 8008366:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 800836a:	4013      	ands	r3, r2
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <DMA_GetITStatus+0x68>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008376:	f003 031e 	and.w	r3, r3, #30
 800837a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4013      	ands	r3, r2
 8008384:	60bb      	str	r3, [r7, #8]
 8008386:	e004      	b.n	8008392 <DMA_GetITStatus+0x72>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008390:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008398:	2b00      	cmp	r3, #0
 800839a:	d003      	beq.n	80083a4 <DMA_GetITStatus+0x84>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	e002      	b.n	80083aa <DMA_GetITStatus+0x8a>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	f640 737d 	movw	r3, #3965	; 0xf7d
 80083b0:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80083b4:	4013      	ands	r3, r2
 80083b6:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	4013      	ands	r3, r2
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d006      	beq.n	80083d0 <DMA_GetITStatus+0xb0>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d003      	beq.n	80083d0 <DMA_GetITStatus+0xb0>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80083c8:	f04f 0301 	mov.w	r3, #1
 80083cc:	75fb      	strb	r3, [r7, #23]
 80083ce:	e002      	b.n	80083d6 <DMA_GetITStatus+0xb6>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80083d0:	f04f 0300 	mov.w	r3, #0
 80083d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80083d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	f107 071c 	add.w	r7, r7, #28
 80083de:	46bd      	mov	sp, r7
 80083e0:	bc80      	pop	{r7}
 80083e2:	4770      	bx	lr

080083e4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	f246 430f 	movw	r3, #25615	; 0x640f
 80083f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d805      	bhi.n	8008408 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80083fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008400:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	e004      	b.n	8008412 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8008408:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800840c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008410:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d008      	beq.n	800842e <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800841c:	683a      	ldr	r2, [r7, #0]
 800841e:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008422:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008426:	4013      	ands	r3, r2
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	60d3      	str	r3, [r2, #12]
 800842c:	e007      	b.n	800843e <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	f640 737d 	movw	r3, #3965	; 0xf7d
 8008434:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8008438:	4013      	ands	r3, r2
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	6093      	str	r3, [r2, #8]
  }   
}
 800843e:	f107 0714 	add.w	r7, r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	bc80      	pop	{r7}
 8008446:	4770      	bx	lr

08008448 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 800844c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008450:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 800845a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800845e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008462:	f04f 0200 	mov.w	r2, #0
 8008466:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8008468:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800846c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008470:	f04f 0200 	mov.w	r2, #0
 8008474:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8008476:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800847a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800847e:	f04f 0200 	mov.w	r2, #0
 8008482:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8008484:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008488:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800848c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008490:	f2c0 027f 	movt	r2, #127	; 0x7f
 8008494:	615a      	str	r2, [r3, #20]
}
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr

0800849c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800849c:	b480      	push	{r7}
 800849e:	b085      	sub	sp, #20
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80084a4:	f04f 0300 	mov.w	r3, #0
 80084a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80084aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80084b2:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	799b      	ldrb	r3, [r3, #6]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d078      	beq.n	80085ae <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80084bc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80084c4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80084c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	ea6f 0202 	mvn.w	r2, r2
 80084d6:	400a      	ands	r2, r1
 80084d8:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80084da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80084e2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80084e6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80084ea:	6851      	ldr	r1, [r2, #4]
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	ea6f 0202 	mvn.w	r2, r2
 80084f4:	400a      	ands	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	791b      	ldrb	r3, [r3, #4]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	18d3      	adds	r3, r2, r3
 8008500:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	6811      	ldr	r1, [r2, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	6812      	ldr	r2, [r2, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8008510:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008514:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008518:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800851c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008520:	6891      	ldr	r1, [r2, #8]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6812      	ldr	r2, [r2, #0]
 8008526:	ea6f 0202 	mvn.w	r2, r2
 800852a:	400a      	ands	r2, r1
 800852c:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800852e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008532:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008536:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800853a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800853e:	68d1      	ldr	r1, [r2, #12]
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	6812      	ldr	r2, [r2, #0]
 8008544:	ea6f 0202 	mvn.w	r2, r2
 8008548:	400a      	ands	r2, r1
 800854a:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	795b      	ldrb	r3, [r3, #5]
 8008550:	2b10      	cmp	r3, #16
 8008552:	d11a      	bne.n	800858a <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8008554:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008558:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800855c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008560:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008564:	6891      	ldr	r1, [r2, #8]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6812      	ldr	r2, [r2, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 800856e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008572:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008576:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800857a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800857e:	68d1      	ldr	r1, [r2, #12]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	6812      	ldr	r2, [r2, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	60da      	str	r2, [r3, #12]
 8008588:	e01f      	b.n	80085ca <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 800858a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800858e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008592:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	795b      	ldrb	r3, [r3, #5]
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	18d3      	adds	r3, r2, r3
 800859c:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	6811      	ldr	r1, [r2, #0]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6812      	ldr	r2, [r2, #0]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e00d      	b.n	80085ca <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	791b      	ldrb	r3, [r3, #4]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	18d3      	adds	r3, r2, r3
 80085b6:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	68fa      	ldr	r2, [r7, #12]
 80085bc:	6811      	ldr	r1, [r2, #0]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	ea6f 0202 	mvn.w	r2, r2
 80085c6:	400a      	ands	r2, r1
 80085c8:	601a      	str	r2, [r3, #0]
  }
}
 80085ca:	f107 0714 	add.w	r7, r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr

080085d4 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f04f 0200 	mov.w	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f04f 020c 	mov.w	r2, #12
 80085f2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f04f 0200 	mov.w	r2, #0
 80085fa:	719a      	strb	r2, [r3, #6]
}
 80085fc:	f107 070c 	add.w	r7, r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop

08008608 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8008610:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008614:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008618:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800861c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008620:	6911      	ldr	r1, [r2, #16]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	430a      	orrs	r2, r1
 8008626:	611a      	str	r2, [r3, #16]
}
 8008628:	f107 070c 	add.w	r7, r7, #12
 800862c:	46bd      	mov	sp, r7
 800862e:	bc80      	pop	{r7}
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop

08008634 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8008642:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008646:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800864a:	695a      	ldr	r2, [r3, #20]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	4013      	ands	r3, r2
 8008650:	2b00      	cmp	r3, #0
 8008652:	d003      	beq.n	800865c <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8008654:	f04f 0301 	mov.w	r3, #1
 8008658:	73fb      	strb	r3, [r7, #15]
 800865a:	e002      	b.n	8008662 <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	f107 0714 	add.w	r7, r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	bc80      	pop	{r7}
 800866e:	4770      	bx	lr

08008670 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8008678:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800867c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	615a      	str	r2, [r3, #20]
}
 8008684:	f107 070c 	add.w	r7, r7, #12
 8008688:	46bd      	mov	sp, r7
 800868a:	bc80      	pop	{r7}
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop

08008690 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8008698:	f04f 0300 	mov.w	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800869e:	f04f 0300 	mov.w	r3, #0
 80086a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 80086a4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086a8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4013      	ands	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80086b4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4013      	ands	r3, r2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d006      	beq.n	80086d4 <EXTI_GetITStatus+0x44>
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d003      	beq.n	80086d4 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 80086cc:	f04f 0301 	mov.w	r3, #1
 80086d0:	73fb      	strb	r3, [r7, #15]
 80086d2:	e002      	b.n	80086da <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 80086d4:	f04f 0300 	mov.w	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	f107 0714 	add.w	r7, r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bc80      	pop	{r7}
 80086e6:	4770      	bx	lr

080086e8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80086f0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80086f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	615a      	str	r2, [r3, #20]
}
 80086fc:	f107 070c 	add.w	r7, r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop

08008708 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8008710:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008714:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	b2d2      	uxtb	r2, r2
 800871c:	701a      	strb	r2, [r3, #0]
}
 800871e:	f107 070c 	add.w	r7, r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	4603      	mov	r3, r0
 8008730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8008732:	79fb      	ldrb	r3, [r7, #7]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8008738:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800873c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008740:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008744:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008748:	6812      	ldr	r2, [r2, #0]
 800874a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	e00b      	b.n	800876a <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8008752:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008756:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800875a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800875e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008762:	6812      	ldr	r2, [r2, #0]
 8008764:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008768:	601a      	str	r2, [r3, #0]
  }
}
 800876a:	f107 070c 	add.w	r7, r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	4603      	mov	r3, r0
 800877c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 800877e:	79fb      	ldrb	r3, [r7, #7]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00c      	beq.n	800879e <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8008784:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008788:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800878c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008790:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008794:	6812      	ldr	r2, [r2, #0]
 8008796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800879a:	601a      	str	r2, [r3, #0]
 800879c:	e00b      	b.n	80087b6 <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 800879e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087a6:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80087aa:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80087b4:	601a      	str	r2, [r3, #0]
  }
}
 80087b6:	f107 070c 	add.w	r7, r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr

080087c0 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b083      	sub	sp, #12
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	4603      	mov	r3, r0
 80087c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00c      	beq.n	80087ea <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 80087d0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087d8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80087dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80087e0:	6812      	ldr	r2, [r2, #0]
 80087e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087e6:	601a      	str	r2, [r3, #0]
 80087e8:	e00b      	b.n	8008802 <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 80087ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80087f2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80087f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008800:	601a      	str	r2, [r3, #0]
  }
}
 8008802:	f107 070c 	add.w	r7, r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	bc80      	pop	{r7}
 800880a:	4770      	bx	lr

0800880c <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8008810:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008814:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008818:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800881c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008820:	6812      	ldr	r2, [r2, #0]
 8008822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008826:	601a      	str	r2, [r3, #0]
}
 8008828:	46bd      	mov	sp, r7
 800882a:	bc80      	pop	{r7}
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop

08008830 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8008830:	b480      	push	{r7}
 8008832:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8008834:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008838:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800883c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008840:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800884a:	601a      	str	r2, [r3, #0]
}
 800884c:	46bd      	mov	sp, r7
 800884e:	bc80      	pop	{r7}
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop

08008854 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8008858:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800885c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	2b00      	cmp	r3, #0
 8008864:	da11      	bge.n	800888a <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8008866:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800886a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800886e:	f240 1223 	movw	r2, #291	; 0x123
 8008872:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8008876:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8008878:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800887c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008880:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8008884:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8008888:	605a      	str	r2, [r3, #4]
  }  
}
 800888a:	46bd      	mov	sp, r7
 800888c:	bc80      	pop	{r7}
 800888e:	4770      	bx	lr

08008890 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8008890:	b480      	push	{r7}
 8008892:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008894:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008898:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800889c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80088a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80088a4:	6912      	ldr	r2, [r2, #16]
 80088a6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80088aa:	611a      	str	r2, [r3, #16]
}
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bc80      	pop	{r7}
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop

080088b4 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b084      	sub	sp, #16
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80088c6:	f04f 0308 	mov.w	r3, #8
 80088ca:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80088cc:	78fb      	ldrb	r3, [r7, #3]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d103      	bne.n	80088da <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80088d2:	f04f 0300 	mov.w	r3, #0
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	e010      	b.n	80088fc <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d103      	bne.n	80088e8 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80088e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088e4:	60fb      	str	r3, [r7, #12]
 80088e6:	e009      	b.n	80088fc <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 80088e8:	78fb      	ldrb	r3, [r7, #3]
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d103      	bne.n	80088f6 <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80088ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	e002      	b.n	80088fc <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80088f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80088fa:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80088fc:	f000 fbec 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008900:	4603      	mov	r3, r0
 8008902:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8008904:	7afb      	ldrb	r3, [r7, #11]
 8008906:	2b08      	cmp	r3, #8
 8008908:	d159      	bne.n	80089be <FLASH_EraseSector+0x10a>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 800890a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800890e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008912:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008916:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800891a:	6912      	ldr	r2, [r2, #16]
 800891c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008920:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 8008922:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008926:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800892a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800892e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008932:	6911      	ldr	r1, [r2, #16]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	430a      	orrs	r2, r1
 8008938:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 800893a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800893e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008942:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008946:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800894a:	6912      	ldr	r2, [r2, #16]
 800894c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008950:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8008952:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008956:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800895a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800895e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008962:	6911      	ldr	r1, [r2, #16]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	430a      	orrs	r2, r1
 8008968:	f042 0202 	orr.w	r2, r2, #2
 800896c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 800896e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008972:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008976:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800897a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800897e:	6912      	ldr	r2, [r2, #16]
 8008980:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008984:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008986:	f000 fba7 	bl	80090d8 <FLASH_WaitForLastOperation>
 800898a:	4603      	mov	r3, r0
 800898c:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 800898e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008992:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008996:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800899a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800899e:	6912      	ldr	r2, [r2, #16]
 80089a0:	f022 0202 	bic.w	r2, r2, #2
 80089a4:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 80089a6:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80089ae:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80089b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80089b6:	6912      	ldr	r2, [r2, #16]
 80089b8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80089bc:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 80089be:	7afb      	ldrb	r3, [r7, #11]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	f107 0710 	add.w	r7, r7, #16
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop

080089cc <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	4603      	mov	r3, r0
 80089d4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 80089d6:	f04f 0300 	mov.w	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 80089dc:	f04f 0308 	mov.w	r3, #8
 80089e0:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80089e2:	f000 fb79 	bl	80090d8 <FLASH_WaitForLastOperation>
 80089e6:	4603      	mov	r3, r0
 80089e8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d103      	bne.n	80089f8 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80089f0:	f04f 0300 	mov.w	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	e010      	b.n	8008a1a <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 80089f8:	79fb      	ldrb	r3, [r7, #7]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d103      	bne.n	8008a06 <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80089fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a02:	60fb      	str	r3, [r7, #12]
 8008a04:	e009      	b.n	8008a1a <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 8008a06:	79fb      	ldrb	r3, [r7, #7]
 8008a08:	2b02      	cmp	r3, #2
 8008a0a:	d103      	bne.n	8008a14 <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a10:	60fb      	str	r3, [r7, #12]
 8008a12:	e002      	b.n	8008a1a <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008a14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008a18:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d13f      	bne.n	8008aa0 <FLASH_EraseAllSectors+0xd4>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8008a20:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a28:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008a2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a30:	6912      	ldr	r2, [r2, #16]
 8008a32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008a36:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 8008a38:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a40:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008a44:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a48:	6911      	ldr	r1, [r2, #16]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 8008a50:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a54:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a58:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008a5c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a60:	6912      	ldr	r2, [r2, #16]
 8008a62:	f042 0204 	orr.w	r2, r2, #4
 8008a66:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8008a68:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a6c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a70:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008a74:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a78:	6912      	ldr	r2, [r2, #16]
 8008a7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008a7e:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008a80:	f000 fb2a 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008a84:	4603      	mov	r3, r0
 8008a86:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8008a88:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008a8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008a90:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008a94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008a98:	6912      	ldr	r2, [r2, #16]
 8008a9a:	f022 0204 	bic.w	r2, r2, #4
 8008a9e:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 8008aa0:	7afb      	ldrb	r3, [r7, #11]
}
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f107 0710 	add.w	r7, r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8008ab8:	f04f 0308 	mov.w	r3, #8
 8008abc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008abe:	f000 fb0b 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 8008ac6:	7dfb      	ldrb	r3, [r7, #23]
 8008ac8:	2b08      	cmp	r3, #8
 8008aca:	d138      	bne.n	8008b3e <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8008acc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ad0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ad4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008ad8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008adc:	6912      	ldr	r2, [r2, #16]
 8008ade:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008ae2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008ae4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ae8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008aec:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008af0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008af4:	6912      	ldr	r2, [r2, #16]
 8008af6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8008afa:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8008afc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b00:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b04:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008b08:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b0c:	6912      	ldr	r2, [r2, #16]
 8008b0e:	f042 0201 	orr.w	r2, r2, #1
 8008b12:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 8008b14:	68f9      	ldr	r1, [r7, #12]
 8008b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b1a:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008b1e:	f000 fadb 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008b22:	4603      	mov	r3, r0
 8008b24:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8008b26:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b2e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008b32:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b36:	6912      	ldr	r2, [r2, #16]
 8008b38:	f022 0201 	bic.w	r2, r2, #1
 8008b3c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8008b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	f107 0718 	add.w	r7, r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop

08008b4c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8008b56:	f04f 0308 	mov.w	r3, #8
 8008b5a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008b5c:	f000 fabc 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008b60:	4603      	mov	r3, r0
 8008b62:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8008b64:	7bfb      	ldrb	r3, [r7, #15]
 8008b66:	2b08      	cmp	r3, #8
 8008b68:	d136      	bne.n	8008bd8 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8008b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b6e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b72:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008b76:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b7a:	6912      	ldr	r2, [r2, #16]
 8008b7c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008b80:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8008b82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b86:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008b8a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008b8e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008b92:	6912      	ldr	r2, [r2, #16]
 8008b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b98:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8008b9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b9e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ba2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008ba6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008baa:	6912      	ldr	r2, [r2, #16]
 8008bac:	f042 0201 	orr.w	r2, r2, #1
 8008bb0:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	683a      	ldr	r2, [r7, #0]
 8008bb6:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008bb8:	f000 fa8e 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8008bc0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008bc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008bc8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008bcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008bd0:	6912      	ldr	r2, [r2, #16]
 8008bd2:	f022 0201 	bic.w	r2, r2, #1
 8008bd6:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f107 0710 	add.w	r7, r7, #16
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 8008bf0:	f04f 0308 	mov.w	r3, #8
 8008bf4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008bf6:	f000 fa6f 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8008bfe:	7bfb      	ldrb	r3, [r7, #15]
 8008c00:	2b08      	cmp	r3, #8
 8008c02:	d136      	bne.n	8008c72 <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8008c04:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c08:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c0c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008c10:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c14:	6912      	ldr	r2, [r2, #16]
 8008c16:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008c1a:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8008c1c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c24:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c2c:	6912      	ldr	r2, [r2, #16]
 8008c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c32:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8008c34:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c3c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c44:	6912      	ldr	r2, [r2, #16]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	887a      	ldrh	r2, [r7, #2]
 8008c50:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008c52:	f000 fa41 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8008c5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008c5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008c62:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008c66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008c6a:	6912      	ldr	r2, [r2, #16]
 8008c6c:	f022 0201 	bic.w	r2, r2, #1
 8008c70:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	f107 0710 	add.w	r7, r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop

08008c80 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8008c8c:	f04f 0308 	mov.w	r3, #8
 8008c90:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008c92:	f000 fa21 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
 8008c9c:	2b08      	cmp	r3, #8
 8008c9e:	d134      	bne.n	8008d0a <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8008ca0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ca4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008ca8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008cac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008cb0:	6912      	ldr	r2, [r2, #16]
 8008cb2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8008cb6:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8008cb8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cc0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008cc4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008cc8:	6912      	ldr	r2, [r2, #16]
 8008cca:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8008ccc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cd4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008cd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008cdc:	6912      	ldr	r2, [r2, #16]
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8008cea:	f000 f9f5 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8008cf2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008cf6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008cfa:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008cfe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008d02:	6912      	ldr	r2, [r2, #16]
 8008d04:	f022 0201 	bic.w	r2, r2, #1
 8008d08:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f107 0710 	add.w	r7, r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop

08008d18 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 8008d1c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d011      	beq.n	8008d54 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8008d30:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d34:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d38:	f642 223b 	movw	r2, #10811	; 0x2a3b
 8008d3c:	f6c0 0219 	movt	r2, #2073	; 0x819
 8008d40:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8008d42:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d4a:	f646 627f 	movw	r2, #28287	; 0x6e7f
 8008d4e:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 8008d52:	609a      	str	r2, [r3, #8]
  }  
}
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bc80      	pop	{r7}
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop

08008d5c <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8008d60:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008d64:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008d68:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008d6c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008d70:	6952      	ldr	r2, [r2, #20]
 8008d72:	f042 0201 	orr.w	r2, r2, #1
 8008d76:	615a      	str	r2, [r3, #20]
}
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bc80      	pop	{r7}
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop

08008d80 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 8008d8c:	f04f 0308 	mov.w	r3, #8
 8008d90:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8008d92:	f000 f9a1 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008d96:	4603      	mov	r3, r0
 8008d98:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8008d9a:	7bfb      	ldrb	r3, [r7, #15]
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d124      	bne.n	8008dea <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 8008da0:	78fb      	ldrb	r3, [r7, #3]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d012      	beq.n	8008dcc <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8008da6:	f643 4316 	movw	r3, #15382	; 0x3c16
 8008daa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008dae:	f643 4216 	movw	r2, #15382	; 0x3c16
 8008db2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008db6:	8812      	ldrh	r2, [r2, #0]
 8008db8:	b291      	uxth	r1, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	b292      	uxth	r2, r2
 8008dbe:	ea6f 0202 	mvn.w	r2, r2
 8008dc2:	b292      	uxth	r2, r2
 8008dc4:	400a      	ands	r2, r1
 8008dc6:	b292      	uxth	r2, r2
 8008dc8:	801a      	strh	r2, [r3, #0]
 8008dca:	e00e      	b.n	8008dea <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 8008dcc:	f643 4316 	movw	r3, #15382	; 0x3c16
 8008dd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008dd4:	f643 4216 	movw	r2, #15382	; 0x3c16
 8008dd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ddc:	8812      	ldrh	r2, [r2, #0]
 8008dde:	b291      	uxth	r1, r2
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	b292      	uxth	r2, r2
 8008de4:	430a      	orrs	r2, r1
 8008de6:	b292      	uxth	r2, r2
 8008de8:	801a      	strh	r2, [r3, #0]
    }
  }
}
 8008dea:	f107 0710 	add.w	r7, r7, #16
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}
 8008df2:	bf00      	nop

08008df4 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 8008dfe:	f04f 0308 	mov.w	r3, #8
 8008e02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 8008e04:	f000 f968 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 8008e0c:	7bfb      	ldrb	r3, [r7, #15]
 8008e0e:	2b08      	cmp	r3, #8
 8008e10:	d105      	bne.n	8008e1e <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 8008e12:	f643 4315 	movw	r3, #15381	; 0x3c15
 8008e16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e1a:	79fa      	ldrb	r2, [r7, #7]
 8008e1c:	701a      	strb	r2, [r3, #0]

  }
}
 8008e1e:	f107 0710 	add.w	r7, r7, #16
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop

08008e28 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	4613      	mov	r3, r2
 8008e30:	4602      	mov	r2, r0
 8008e32:	71fa      	strb	r2, [r7, #7]
 8008e34:	460a      	mov	r2, r1
 8008e36:	71ba      	strb	r2, [r7, #6]
 8008e38:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8008e3a:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8008e3e:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8008e40:	f04f 0308 	mov.w	r3, #8
 8008e44:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008e46:	f000 f947 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b08      	cmp	r3, #8
 8008e52:	d117      	bne.n	8008e84 <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8008e54:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008e58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 030f 	and.w	r3, r3, #15
 8008e64:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8008e66:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008e6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e6e:	79b9      	ldrb	r1, [r7, #6]
 8008e70:	7bfa      	ldrb	r2, [r7, #15]
 8008e72:	430a      	orrs	r2, r1
 8008e74:	b2d1      	uxtb	r1, r2
 8008e76:	797a      	ldrb	r2, [r7, #5]
 8008e78:	430a      	orrs	r2, r1
 8008e7a:	b2d1      	uxtb	r1, r2
 8008e7c:	79fa      	ldrb	r2, [r7, #7]
 8008e7e:	430a      	orrs	r2, r1
 8008e80:	b2d2      	uxtb	r2, r2
 8008e82:	701a      	strb	r2, [r3, #0]
  }  
}
 8008e84:	f107 0710 	add.w	r7, r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8008e96:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008e9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008e9e:	f643 4214 	movw	r2, #15380	; 0x3c14
 8008ea2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ea6:	7812      	ldrb	r2, [r2, #0]
 8008ea8:	b2d2      	uxtb	r2, r2
 8008eaa:	f022 020c 	bic.w	r2, r2, #12
 8008eae:	b2d2      	uxtb	r2, r2
 8008eb0:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8008eb2:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008eb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008eba:	f643 4214 	movw	r2, #15380	; 0x3c14
 8008ebe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ec2:	7812      	ldrb	r2, [r2, #0]
 8008ec4:	b2d1      	uxtb	r1, r2
 8008ec6:	79fa      	ldrb	r2, [r7, #7]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	b2d2      	uxtb	r2, r2
 8008ecc:	701a      	strb	r2, [r3, #0]

}
 8008ece:	f107 070c 	add.w	r7, r7, #12
 8008ed2:	46bd      	mov	sp, r7
 8008ed4:	bc80      	pop	{r7}
 8008ed6:	4770      	bx	lr

08008ed8 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b082      	sub	sp, #8
 8008edc:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 8008ede:	f04f 0308 	mov.w	r3, #8
 8008ee2:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 8008ee4:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008ee8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008eec:	f643 4214 	movw	r2, #15380	; 0x3c14
 8008ef0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008ef4:	7812      	ldrb	r2, [r2, #0]
 8008ef6:	b2d2      	uxtb	r2, r2
 8008ef8:	f042 0202 	orr.w	r2, r2, #2
 8008efc:	b2d2      	uxtb	r2, r2
 8008efe:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8008f00:	f000 f8ea 	bl	80090d8 <FLASH_WaitForLastOperation>
 8008f04:	4603      	mov	r3, r0
 8008f06:	71fb      	strb	r3, [r7, #7]

  return status;
 8008f08:	79fb      	ldrb	r3, [r7, #7]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f107 0708 	add.w	r7, r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 8008f18:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008f1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8008f26:	b2db      	uxtb	r3, r3
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8008f30:	b480      	push	{r7}
 8008f32:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8008f34:	f643 4316 	movw	r3, #15382	; 0x3c16
 8008f38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	b29b      	uxth	r3, r3
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bc80      	pop	{r7}
 8008f46:	4770      	bx	lr

08008f48 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 8008f4e:	f04f 0300 	mov.w	r3, #0
 8008f52:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8008f54:	f643 4315 	movw	r3, #15381	; 0x3c15
 8008f58:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	2baa      	cmp	r3, #170	; 0xaa
 8008f62:	d003      	beq.n	8008f6c <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8008f64:	f04f 0301 	mov.w	r3, #1
 8008f68:	71fb      	strb	r3, [r7, #7]
 8008f6a:	e002      	b.n	8008f72 <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 8008f6c:	f04f 0300 	mov.w	r3, #0
 8008f70:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8008f72:	79fb      	ldrb	r3, [r7, #7]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	f107 070c 	add.w	r7, r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bc80      	pop	{r7}
 8008f7e:	4770      	bx	lr

08008f80 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8008f84:	f643 4314 	movw	r3, #15380	; 0x3c14
 8008f88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	f003 030c 	and.w	r3, r3, #12
 8008f94:	b2db      	uxtb	r3, r3
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bc80      	pop	{r7}
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop

08008fa0 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b083      	sub	sp, #12
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 8008fac:	78fb      	ldrb	r3, [r7, #3]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00c      	beq.n	8008fcc <FLASH_ITConfig+0x2c>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8008fb2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fba:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008fbe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fc2:	6911      	ldr	r1, [r2, #16]
 8008fc4:	687a      	ldr	r2, [r7, #4]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	611a      	str	r2, [r3, #16]
 8008fca:	e00d      	b.n	8008fe8 <FLASH_ITConfig+0x48>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 8008fcc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fd0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008fd4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8008fd8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008fdc:	6911      	ldr	r1, [r2, #16]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	ea6f 0202 	mvn.w	r2, r2
 8008fe4:	400a      	ands	r2, r1
 8008fe6:	611a      	str	r2, [r3, #16]
  }
}
 8008fe8:	f107 070c 	add.w	r7, r7, #12
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop

08008ff4 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8008ffc:	f04f 0300 	mov.w	r3, #0
 8009000:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 8009002:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009006:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800900a:	68da      	ldr	r2, [r3, #12]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4013      	ands	r3, r2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <FLASH_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8009014:	f04f 0301 	mov.w	r3, #1
 8009018:	73fb      	strb	r3, [r7, #15]
 800901a:	e002      	b.n	8009022 <FLASH_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8009022:	7bfb      	ldrb	r3, [r7, #15]
}
 8009024:	4618      	mov	r0, r3
 8009026:	f107 0714 	add.w	r7, r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	bc80      	pop	{r7}
 800902e:	4770      	bx	lr

08009030 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8009038:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800903c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	60da      	str	r2, [r3, #12]
}
 8009044:	f107 070c 	add.w	r7, r7, #12
 8009048:	46bd      	mov	sp, r7
 800904a:	bc80      	pop	{r7}
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8009050:	b480      	push	{r7}
 8009052:	b083      	sub	sp, #12
 8009054:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8009056:	f04f 0308 	mov.w	r3, #8
 800905a:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800905c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 800906e:	f04f 0301 	mov.w	r3, #1
 8009072:	71fb      	strb	r3, [r7, #7]
 8009074:	e029      	b.n	80090ca <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8009076:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800907a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0310 	and.w	r3, r3, #16
 8009084:	2b00      	cmp	r3, #0
 8009086:	d003      	beq.n	8009090 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8009088:	f04f 0305 	mov.w	r3, #5
 800908c:	71fb      	strb	r3, [r7, #7]
 800908e:	e01c      	b.n	80090ca <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8009090:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009094:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d003      	beq.n	80090aa <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 80090a2:	f04f 0306 	mov.w	r3, #6
 80090a6:	71fb      	strb	r3, [r7, #7]
 80090a8:	e00f      	b.n	80090ca <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 80090aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80090ae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	f003 0302 	and.w	r3, r3, #2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d003      	beq.n	80090c4 <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 80090bc:	f04f 0307 	mov.w	r3, #7
 80090c0:	71fb      	strb	r3, [r7, #7]
 80090c2:	e002      	b.n	80090ca <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 80090c4:	f04f 0308 	mov.w	r3, #8
 80090c8:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80090ca:	79fb      	ldrb	r3, [r7, #7]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	f107 070c 	add.w	r7, r7, #12
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bc80      	pop	{r7}
 80090d6:	4770      	bx	lr

080090d8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80090d8:	b580      	push	{r7, lr}
 80090da:	b082      	sub	sp, #8
 80090dc:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 80090de:	f04f 0308 	mov.w	r3, #8
 80090e2:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80090e4:	f7ff ffb4 	bl	8009050 <FLASH_GetStatus>
 80090e8:	4603      	mov	r3, r0
 80090ea:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80090ec:	e003      	b.n	80090f6 <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 80090ee:	f7ff ffaf 	bl	8009050 <FLASH_GetStatus>
 80090f2:	4603      	mov	r3, r0
 80090f4:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	2b01      	cmp	r3, #1
 80090fc:	d0f7      	beq.n	80090ee <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80090fe:	79fb      	ldrb	r3, [r7, #7]
 8009100:	b2db      	uxtb	r3, r3
}
 8009102:	4618      	mov	r0, r3
 8009104:	f107 0708 	add.w	r7, r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d107      	bne.n	800912a <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 800911a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	f243 01db 	movw	r1, #12507	; 0x30db
 8009124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009128:	e006      	b.n	8009138 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 800912a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8009134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8009138:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f103 0201 	add.w	r2, r3, #1
 8009142:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009146:	4603      	mov	r3, r0
 8009148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 800914c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009150:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800915a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800915e:	f107 070c 	add.w	r7, r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	bc80      	pop	{r7}
 8009166:	4770      	bx	lr

08009168 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8009168:	b490      	push	{r4, r7}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8009170:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681a      	ldr	r2, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	6859      	ldr	r1, [r3, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8009180:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8009186:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	691b      	ldr	r3, [r3, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800918c:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	695b      	ldr	r3, [r3, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8009192:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	699b      	ldr	r3, [r3, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8009198:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	69db      	ldr	r3, [r3, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800919e:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6a1b      	ldr	r3, [r3, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 80091a4:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 80091aa:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 80091b0:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 80091b6:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 80091bc:	4319      	orrs	r1, r3
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 80091be:	4603      	mov	r3, r0
 80091c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	2b08      	cmp	r3, #8
 80091ca:	d10f      	bne.n	80091ec <FSMC_NORSRAMInit+0x84>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80091cc:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6819      	ldr	r1, [r3, #0]
 80091dc:	4623      	mov	r3, r4
 80091de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091e2:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80091e6:	4603      	mov	r3, r0
 80091e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80091ec:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f103 0201 	add.w	r2, r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fc:	6819      	ldr	r1, [r3, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	ea4f 1303 	mov.w	r3, r3, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 8009208:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	ea4f 2303 	mov.w	r3, r3, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 8009214:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8009220:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	ea4f 5303 	mov.w	r3, r3, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800922c:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009232:	695b      	ldr	r3, [r3, #20]
 8009234:	ea4f 6303 	mov.w	r3, r3, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8009238:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923e:	699b      	ldr	r3, [r3, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8009240:	4319      	orrs	r1, r3
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8009242:	4603      	mov	r3, r0
 8009244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800924c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009250:	d127      	bne.n	80092a2 <FSMC_NORSRAMInit+0x13a>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8009252:	f44f 7382 	mov.w	r3, #260	; 0x104
 8009256:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009262:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8009264:	6879      	ldr	r1, [r7, #4]
 8009266:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009268:	6849      	ldr	r1, [r1, #4]
 800926a:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800926e:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8009270:	6879      	ldr	r1, [r7, #4]
 8009272:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009274:	6889      	ldr	r1, [r1, #8]
 8009276:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 800927a:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009280:	6909      	ldr	r1, [r1, #16]
 8009282:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8009286:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8009288:	6879      	ldr	r1, [r7, #4]
 800928a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800928c:	6949      	ldr	r1, [r1, #20]
 800928e:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8009292:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8009294:	6879      	ldr	r1, [r7, #4]
 8009296:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8009298:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 800929a:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800929c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80092a0:	e009      	b.n	80092b6 <FSMC_NORSRAMInit+0x14e>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 80092a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80092a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	6812      	ldr	r2, [r2, #0]
 80092ae:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80092b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 80092b6:	f107 0708 	add.w	r7, r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc90      	pop	{r4, r7}
 80092be:	4770      	bx	lr

080092c0 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f04f 0200 	mov.w	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f04f 0202 	mov.w	r2, #2
 80092d6:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f04f 0200 	mov.w	r2, #0
 80092de:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f04f 0200 	mov.w	r2, #0
 80092f6:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f04f 0200 	mov.w	r2, #0
 80092fe:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009316:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800931e:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f04f 0200 	mov.w	r2, #0
 8009326:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009334:	f04f 020f 	mov.w	r2, #15
 8009338:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800933e:	f04f 020f 	mov.w	r2, #15
 8009342:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009348:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800934c:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009352:	f04f 020f 	mov.w	r2, #15
 8009356:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800935c:	f04f 020f 	mov.w	r2, #15
 8009360:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009366:	f04f 020f 	mov.w	r2, #15
 800936a:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009370:	f04f 0200 	mov.w	r2, #0
 8009374:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800937a:	f04f 020f 	mov.w	r2, #15
 800937e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009384:	f04f 020f 	mov.w	r2, #15
 8009388:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8009392:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009398:	f04f 020f 	mov.w	r2, #15
 800939c:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	f04f 020f 	mov.w	r2, #15
 80093a6:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	f04f 020f 	mov.w	r2, #15
 80093b0:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b6:	f04f 0200 	mov.w	r2, #0
 80093ba:	619a      	str	r2, [r3, #24]
}
 80093bc:	f107 070c 	add.w	r7, r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bc80      	pop	{r7}
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop

080093c8 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	460b      	mov	r3, r1
 80093d2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80093d4:	78fb      	ldrb	r3, [r7, #3]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00d      	beq.n	80093f6 <FSMC_NORSRAMCmd+0x2e>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 80093da:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80093de:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093e8:	f043 0101 	orr.w	r1, r3, #1
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	4603      	mov	r3, r0
 80093f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80093f4:	e00f      	b.n	8009416 <FSMC_NORSRAMCmd+0x4e>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 80093f6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80093fa:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80093fe:	687a      	ldr	r2, [r7, #4]
 8009400:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009404:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009408:	f2c0 030f 	movt	r3, #15
 800940c:	4013      	ands	r3, r2
 800940e:	6879      	ldr	r1, [r7, #4]
 8009410:	4602      	mov	r2, r0
 8009412:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 8009416:	f107 070c 	add.w	r7, r7, #12
 800941a:	46bd      	mov	sp, r7
 800941c:	bc80      	pop	{r7}
 800941e:	4770      	bx	lr

08009420 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2b10      	cmp	r3, #16
 800942c:	d11c      	bne.n	8009468 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 800942e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009432:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009436:	f04f 0218 	mov.w	r2, #24
 800943a:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 800943c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009440:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009444:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009448:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 800944a:	f04f 0360 	mov.w	r3, #96	; 0x60
 800944e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009452:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009456:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8009458:	f04f 0360 	mov.w	r3, #96	; 0x60
 800945c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009460:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009464:	60da      	str	r2, [r3, #12]
 8009466:	e01b      	b.n	80094a0 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8009468:	f04f 0380 	mov.w	r3, #128	; 0x80
 800946c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009470:	f04f 0218 	mov.w	r2, #24
 8009474:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8009476:	f04f 0380 	mov.w	r3, #128	; 0x80
 800947a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800947e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8009482:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8009484:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009488:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800948c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009490:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8009492:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009496:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800949a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 800949e:	60da      	str	r2, [r3, #12]
  }  
}
 80094a0:	f107 070c 	add.w	r7, r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bc80      	pop	{r7}
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop

080094ac <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b087      	sub	sp, #28
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 80094b4:	f04f 0300 	mov.w	r3, #0
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	613b      	str	r3, [r7, #16]
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 80094ce:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 80094d4:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 80094da:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	695b      	ldr	r3, [r3, #20]
 80094e0:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 80094e4:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 80094ee:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 80094f0:	f043 0308 	orr.w	r3, r3, #8
 80094f4:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69db      	ldr	r3, [r3, #28]
 80094fa:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009506:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009512:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	69db      	ldr	r3, [r3, #28]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800951e:	4313      	orrs	r3, r2
 8009520:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a1b      	ldr	r3, [r3, #32]
 8009526:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6a1b      	ldr	r3, [r3, #32]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009532:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800953e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a1b      	ldr	r3, [r3, #32]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800954a:	4313      	orrs	r3, r2
 800954c:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2b10      	cmp	r3, #16
 8009554:	d112      	bne.n	800957c <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8009556:	f04f 0360 	mov.w	r3, #96	; 0x60
 800955a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8009562:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009566:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 800956e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009572:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	60da      	str	r2, [r3, #12]
 800957a:	e011      	b.n	80095a0 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 800957c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009580:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8009588:	f04f 0380 	mov.w	r3, #128	; 0x80
 800958c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009590:	693a      	ldr	r2, [r7, #16]
 8009592:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8009594:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009598:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	60da      	str	r2, [r3, #12]
  }
}
 80095a0:	f107 071c 	add.w	r7, r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bc80      	pop	{r7}
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop

080095ac <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f04f 0210 	mov.w	r2, #16
 80095ba:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f04f 0200 	mov.w	r2, #0
 80095c2:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f04f 0200 	mov.w	r2, #0
 80095ca:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f04f 0200 	mov.w	r2, #0
 80095e2:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f04f 0200 	mov.w	r2, #0
 80095ea:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80095f4:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 80095fe:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	69db      	ldr	r3, [r3, #28]
 8009604:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009608:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	69db      	ldr	r3, [r3, #28]
 800960e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009612:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a1b      	ldr	r3, [r3, #32]
 8009618:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800961c:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009626:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009630:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800963a:	60da      	str	r2, [r3, #12]
}
 800963c:	f107 070c 	add.w	r7, r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	bc80      	pop	{r7}
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop

08009648 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8009648:	b480      	push	{r7}
 800964a:	b083      	sub	sp, #12
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	460b      	mov	r3, r1
 8009652:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8009654:	78fb      	ldrb	r3, [r7, #3]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d01c      	beq.n	8009694 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b10      	cmp	r3, #16
 800965e:	d10c      	bne.n	800967a <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8009660:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009664:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009668:	f04f 0260 	mov.w	r2, #96	; 0x60
 800966c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009670:	6812      	ldr	r2, [r2, #0]
 8009672:	f042 0204 	orr.w	r2, r2, #4
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	e02e      	b.n	80096d8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 800967a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800967e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009682:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009686:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800968a:	6812      	ldr	r2, [r2, #0]
 800968c:	f042 0204 	orr.w	r2, r2, #4
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	e021      	b.n	80096d8 <FSMC_NANDCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b10      	cmp	r3, #16
 8009698:	d10f      	bne.n	80096ba <FSMC_NANDCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 800969a:	f04f 0260 	mov.w	r2, #96	; 0x60
 800969e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80096a2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80096a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80096aa:	6819      	ldr	r1, [r3, #0]
 80096ac:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80096b0:	f2c0 030f 	movt	r3, #15
 80096b4:	400b      	ands	r3, r1
 80096b6:	6013      	str	r3, [r2, #0]
 80096b8:	e00e      	b.n	80096d8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 80096ba:	f04f 0280 	mov.w	r2, #128	; 0x80
 80096be:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80096c2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80096c6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80096ca:	6819      	ldr	r1, [r3, #0]
 80096cc:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80096d0:	f2c0 030f 	movt	r3, #15
 80096d4:	400b      	ands	r3, r1
 80096d6:	6013      	str	r3, [r2, #0]
    }
  }
}
 80096d8:	f107 070c 	add.w	r7, r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	bc80      	pop	{r7}
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop

080096e4 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80096f0:	78fb      	ldrb	r3, [r7, #3]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d01c      	beq.n	8009730 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2b10      	cmp	r3, #16
 80096fa:	d10c      	bne.n	8009716 <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 80096fc:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009700:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009704:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009708:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800970c:	6812      	ldr	r2, [r2, #0]
 800970e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009712:	601a      	str	r2, [r3, #0]
 8009714:	e02e      	b.n	8009774 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8009716:	f04f 0380 	mov.w	r3, #128	; 0x80
 800971a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800971e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009722:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009726:	6812      	ldr	r2, [r2, #0]
 8009728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800972c:	601a      	str	r2, [r3, #0]
 800972e:	e021      	b.n	8009774 <FSMC_NANDECCCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b10      	cmp	r3, #16
 8009734:	d10f      	bne.n	8009756 <FSMC_NANDECCCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8009736:	f04f 0260 	mov.w	r2, #96	; 0x60
 800973a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800973e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009742:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009746:	6819      	ldr	r1, [r3, #0]
 8009748:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800974c:	f2c0 030f 	movt	r3, #15
 8009750:	400b      	ands	r3, r1
 8009752:	6013      	str	r3, [r2, #0]
 8009754:	e00e      	b.n	8009774 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8009756:	f04f 0280 	mov.w	r2, #128	; 0x80
 800975a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800975e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009762:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009766:	6819      	ldr	r1, [r3, #0]
 8009768:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 800976c:	f2c0 030f 	movt	r3, #15
 8009770:	400b      	ands	r3, r1
 8009772:	6013      	str	r3, [r2, #0]
    }
  }
}
 8009774:	f107 070c 	add.w	r7, r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	bc80      	pop	{r7}
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop

08009780 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8009788:	f04f 0300 	mov.w	r3, #0
 800978c:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2b10      	cmp	r3, #16
 8009792:	d106      	bne.n	80097a2 <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8009794:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009798:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	60fb      	str	r3, [r7, #12]
 80097a0:	e005      	b.n	80097ae <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 80097a2:	f04f 0380 	mov.w	r3, #128	; 0x80
 80097a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80097aa:	695b      	ldr	r3, [r3, #20]
 80097ac:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 80097ae:	68fb      	ldr	r3, [r7, #12]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	f107 0714 	add.w	r7, r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bc80      	pop	{r7}
 80097ba:	4770      	bx	lr

080097bc <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 80097c0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80097c4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80097c8:	f04f 0218 	mov.w	r2, #24
 80097cc:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 80097ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80097d2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 80097dc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80097e0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80097e4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80097e8:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 80097ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80097ee:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80097f2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 80097f6:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 80097f8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80097fc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009800:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8009804:	611a      	str	r2, [r3, #16]
}
 8009806:	46bd      	mov	sp, r7
 8009808:	bc80      	pop	{r7}
 800980a:	4770      	bx	lr

0800980c <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8009814:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009818:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	6852      	ldr	r2, [r2, #4]
 8009824:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8009828:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	6892      	ldr	r2, [r2, #8]
 800982e:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8009832:	430a      	orrs	r2, r1
 8009834:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8009838:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800983a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800983e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	68d2      	ldr	r2, [r2, #12]
 8009846:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009848:	687a      	ldr	r2, [r7, #4]
 800984a:	68d2      	ldr	r2, [r2, #12]
 800984c:	6852      	ldr	r2, [r2, #4]
 800984e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8009852:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	68d2      	ldr	r2, [r2, #12]
 8009858:	6892      	ldr	r2, [r2, #8]
 800985a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800985e:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	68d2      	ldr	r2, [r2, #12]
 8009864:	68d2      	ldr	r2, [r2, #12]
 8009866:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800986a:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 800986c:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 800986e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009872:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	6912      	ldr	r2, [r2, #16]
 800987a:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	6912      	ldr	r2, [r2, #16]
 8009880:	6852      	ldr	r2, [r2, #4]
 8009882:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8009886:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6912      	ldr	r2, [r2, #16]
 800988c:	6892      	ldr	r2, [r2, #8]
 800988e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8009892:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	6912      	ldr	r2, [r2, #16]
 8009898:	68d2      	ldr	r2, [r2, #12]
 800989a:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 800989e:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 80098a0:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80098a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80098a6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	6952      	ldr	r2, [r2, #20]
 80098ae:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	6952      	ldr	r2, [r2, #20]
 80098b4:	6852      	ldr	r2, [r2, #4]
 80098b6:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80098ba:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	6952      	ldr	r2, [r2, #20]
 80098c0:	6892      	ldr	r2, [r2, #8]
 80098c2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 80098c6:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	6952      	ldr	r2, [r2, #20]
 80098cc:	68d2      	ldr	r2, [r2, #12]
 80098ce:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 80098d2:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 80098d4:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 80098d6:	f107 070c 	add.w	r7, r7, #12
 80098da:	46bd      	mov	sp, r7
 80098dc:	bc80      	pop	{r7}
 80098de:	4770      	bx	lr

080098e0 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f04f 0200 	mov.w	r2, #0
 80098ee:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f04f 0200 	mov.w	r2, #0
 80098f6:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f04f 0200 	mov.w	r2, #0
 80098fe:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009908:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009912:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800991c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009926:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009930:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800993a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	691b      	ldr	r3, [r3, #16]
 8009940:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009944:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800994e:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	695b      	ldr	r3, [r3, #20]
 8009954:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009958:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	695b      	ldr	r3, [r3, #20]
 800995e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009962:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	695b      	ldr	r3, [r3, #20]
 8009968:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 800996c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8009976:	60da      	str	r2, [r3, #12]
}
 8009978:	f107 070c 	add.w	r7, r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	bc80      	pop	{r7}
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop

08009984 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	4603      	mov	r3, r0
 800998c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00c      	beq.n	80099ae <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8009994:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009998:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800999c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 80099a0:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80099a4:	6812      	ldr	r2, [r2, #0]
 80099a6:	f042 0204 	orr.w	r2, r2, #4
 80099aa:	601a      	str	r2, [r3, #0]
 80099ac:	e00e      	b.n	80099cc <FSMC_PCCARDCmd+0x48>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 80099ae:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 80099b2:	f2ca 0200 	movt	r2, #40960	; 0xa000
 80099b6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80099ba:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80099be:	6819      	ldr	r1, [r3, #0]
 80099c0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80099c4:	f2c0 030f 	movt	r3, #15
 80099c8:	400b      	ands	r3, r1
 80099ca:	6013      	str	r3, [r2, #0]
  }
}
 80099cc:	f107 070c 	add.w	r7, r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bc80      	pop	{r7}
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop

080099d8 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	4613      	mov	r3, r2
 80099e4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d02d      	beq.n	8009a48 <FSMC_ITConfig+0x70>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2b10      	cmp	r3, #16
 80099f0:	d10c      	bne.n	8009a0c <FSMC_ITConfig+0x34>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 80099f2:	f04f 0360 	mov.w	r3, #96	; 0x60
 80099f6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80099fa:	f04f 0260 	mov.w	r2, #96	; 0x60
 80099fe:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009a02:	6851      	ldr	r1, [r2, #4]
 8009a04:	68ba      	ldr	r2, [r7, #8]
 8009a06:	430a      	orrs	r2, r1
 8009a08:	605a      	str	r2, [r3, #4]
 8009a0a:	e050      	b.n	8009aae <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a12:	d10c      	bne.n	8009a2e <FSMC_ITConfig+0x56>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8009a14:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009a18:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a1c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009a20:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009a24:	6851      	ldr	r1, [r2, #4]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	605a      	str	r2, [r3, #4]
 8009a2c:	e03f      	b.n	8009aae <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 8009a2e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009a32:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a36:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009a3a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009a3e:	6851      	ldr	r1, [r2, #4]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	430a      	orrs	r2, r1
 8009a44:	605a      	str	r2, [r3, #4]
 8009a46:	e032      	b.n	8009aae <FSMC_ITConfig+0xd6>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b10      	cmp	r3, #16
 8009a4c:	d10e      	bne.n	8009a6c <FSMC_ITConfig+0x94>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 8009a4e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009a52:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a56:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009a5a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009a5e:	6851      	ldr	r1, [r2, #4]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	ea6f 0202 	mvn.w	r2, r2
 8009a66:	400a      	ands	r2, r1
 8009a68:	605a      	str	r2, [r3, #4]
 8009a6a:	e020      	b.n	8009aae <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a72:	d10e      	bne.n	8009a92 <FSMC_ITConfig+0xba>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8009a74:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009a78:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a7c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009a80:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009a84:	6851      	ldr	r1, [r2, #4]
 8009a86:	68ba      	ldr	r2, [r7, #8]
 8009a88:	ea6f 0202 	mvn.w	r2, r2
 8009a8c:	400a      	ands	r2, r1
 8009a8e:	605a      	str	r2, [r3, #4]
 8009a90:	e00d      	b.n	8009aae <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8009a92:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009a96:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009a9a:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009a9e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009aa2:	6851      	ldr	r1, [r2, #4]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	ea6f 0202 	mvn.w	r2, r2
 8009aaa:	400a      	ands	r2, r1
 8009aac:	605a      	str	r2, [r3, #4]
    }
  }
}
 8009aae:	f107 0714 	add.w	r7, r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8009ac2:	f04f 0300 	mov.w	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2b10      	cmp	r3, #16
 8009ad2:	d106      	bne.n	8009ae2 <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 8009ad4:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009ad8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	e010      	b.n	8009b04 <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae8:	d106      	bne.n	8009af8 <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 8009aea:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009aee:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	60bb      	str	r3, [r7, #8]
 8009af6:	e005      	b.n	8009b04 <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8009af8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009afc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 8009b04:	68ba      	ldr	r2, [r7, #8]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8009b0e:	f04f 0301 	mov.w	r3, #1
 8009b12:	73fb      	strb	r3, [r7, #15]
 8009b14:	e002      	b.n	8009b1c <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 8009b16:	f04f 0300 	mov.w	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f107 0714 	add.w	r7, r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bc80      	pop	{r7}
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop

08009b2c <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b10      	cmp	r3, #16
 8009b3a:	d10e      	bne.n	8009b5a <FSMC_ClearFlag+0x2e>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 8009b3c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009b40:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009b44:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009b48:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009b4c:	6851      	ldr	r1, [r2, #4]
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	ea6f 0202 	mvn.w	r2, r2
 8009b54:	400a      	ands	r2, r1
 8009b56:	605a      	str	r2, [r3, #4]
 8009b58:	e020      	b.n	8009b9c <FSMC_ClearFlag+0x70>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b60:	d10e      	bne.n	8009b80 <FSMC_ClearFlag+0x54>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8009b62:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009b66:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009b6a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009b6e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009b72:	6851      	ldr	r1, [r2, #4]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	ea6f 0202 	mvn.w	r2, r2
 8009b7a:	400a      	ands	r2, r1
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	e00d      	b.n	8009b9c <FSMC_ClearFlag+0x70>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8009b80:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009b84:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009b88:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009b8c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009b90:	6851      	ldr	r1, [r2, #4]
 8009b92:	683a      	ldr	r2, [r7, #0]
 8009b94:	ea6f 0202 	mvn.w	r2, r2
 8009b98:	400a      	ands	r2, r1
 8009b9a:	605a      	str	r2, [r3, #4]
  }
}
 8009b9c:	f107 070c 	add.w	r7, r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bc80      	pop	{r7}
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop

08009ba8 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8009bb2:	f04f 0300 	mov.w	r3, #0
 8009bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8009bb8:	f04f 0300 	mov.w	r3, #0
 8009bbc:	613b      	str	r3, [r7, #16]
 8009bbe:	f04f 0300 	mov.w	r3, #0
 8009bc2:	60fb      	str	r3, [r7, #12]
 8009bc4:	f04f 0300 	mov.w	r3, #0
 8009bc8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2b10      	cmp	r3, #16
 8009bce:	d106      	bne.n	8009bde <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 8009bd0:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009bd4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	613b      	str	r3, [r7, #16]
 8009bdc:	e010      	b.n	8009c00 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009be4:	d106      	bne.n	8009bf4 <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 8009be6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009bea:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	613b      	str	r3, [r7, #16]
 8009bf2:	e005      	b.n	8009c00 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 8009bf4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009bf8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	4013      	ands	r3, r2
 8009c06:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	4013      	ands	r3, r2
 8009c12:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d006      	beq.n	8009c28 <FSMC_GetITStatus+0x80>
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 8009c20:	f04f 0301 	mov.w	r3, #1
 8009c24:	75fb      	strb	r3, [r7, #23]
 8009c26:	e002      	b.n	8009c2e <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 8009c28:	f04f 0300 	mov.w	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	f107 071c 	add.w	r7, r7, #28
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bc80      	pop	{r7}
 8009c3a:	4770      	bx	lr

08009c3c <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2b10      	cmp	r3, #16
 8009c4a:	d110      	bne.n	8009c6e <FSMC_ClearITPendingBit+0x32>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 8009c4c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8009c50:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c54:	f04f 0260 	mov.w	r2, #96	; 0x60
 8009c58:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009c5c:	6851      	ldr	r1, [r2, #4]
 8009c5e:	683a      	ldr	r2, [r7, #0]
 8009c60:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8009c64:	ea6f 0202 	mvn.w	r2, r2
 8009c68:	400a      	ands	r2, r1
 8009c6a:	605a      	str	r2, [r3, #4]
 8009c6c:	e024      	b.n	8009cb8 <FSMC_ClearITPendingBit+0x7c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c74:	d110      	bne.n	8009c98 <FSMC_ClearITPendingBit+0x5c>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8009c76:	f04f 0380 	mov.w	r3, #128	; 0x80
 8009c7a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009c7e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8009c82:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009c86:	6851      	ldr	r1, [r2, #4]
 8009c88:	683a      	ldr	r2, [r7, #0]
 8009c8a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8009c8e:	ea6f 0202 	mvn.w	r2, r2
 8009c92:	400a      	ands	r2, r1
 8009c94:	605a      	str	r2, [r3, #4]
 8009c96:	e00f      	b.n	8009cb8 <FSMC_ClearITPendingBit+0x7c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8009c98:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8009c9c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8009ca0:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8009ca4:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8009ca8:	6851      	ldr	r1, [r2, #4]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8009cb0:	ea6f 0202 	mvn.w	r2, r2
 8009cb4:	400a      	ands	r2, r1
 8009cb6:	605a      	str	r2, [r3, #4]
  }
}
 8009cb8:	f107 070c 	add.w	r7, r7, #12
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc80      	pop	{r7}
 8009cc0:	4770      	bx	lr
 8009cc2:	bf00      	nop

08009cc4 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 8009ccc:	687a      	ldr	r2, [r7, #4]
 8009cce:	f04f 0300 	mov.w	r3, #0
 8009cd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d10c      	bne.n	8009cf4 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8009cda:	f04f 0001 	mov.w	r0, #1
 8009cde:	f04f 0101 	mov.w	r1, #1
 8009ce2:	f002 fbc3 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 8009ce6:	f04f 0001 	mov.w	r0, #1
 8009cea:	f04f 0100 	mov.w	r1, #0
 8009cee:	f002 fbbd 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009cf2:	e09e      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d10c      	bne.n	8009d1c <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8009d02:	f04f 0002 	mov.w	r0, #2
 8009d06:	f04f 0101 	mov.w	r1, #1
 8009d0a:	f002 fbaf 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 8009d0e:	f04f 0002 	mov.w	r0, #2
 8009d12:	f04f 0100 	mov.w	r1, #0
 8009d16:	f002 fba9 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009d1a:	e08a      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009d22:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d10c      	bne.n	8009d44 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8009d2a:	f04f 0004 	mov.w	r0, #4
 8009d2e:	f04f 0101 	mov.w	r1, #1
 8009d32:	f002 fb9b 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8009d36:	f04f 0004 	mov.w	r0, #4
 8009d3a:	f04f 0100 	mov.w	r1, #0
 8009d3e:	f002 fb95 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009d42:	e076      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8009d44:	687a      	ldr	r2, [r7, #4]
 8009d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009d4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d10c      	bne.n	8009d6c <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8009d52:	f04f 0008 	mov.w	r0, #8
 8009d56:	f04f 0101 	mov.w	r1, #1
 8009d5a:	f002 fb87 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 8009d5e:	f04f 0008 	mov.w	r0, #8
 8009d62:	f04f 0100 	mov.w	r1, #0
 8009d66:	f002 fb81 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009d6a:	e062      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d10c      	bne.n	8009d94 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8009d7a:	f04f 0010 	mov.w	r0, #16
 8009d7e:	f04f 0101 	mov.w	r1, #1
 8009d82:	f002 fb73 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8009d86:	f04f 0010 	mov.w	r0, #16
 8009d8a:	f04f 0100 	mov.w	r1, #0
 8009d8e:	f002 fb6d 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009d92:	e04e      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009d9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d10c      	bne.n	8009dbc <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8009da2:	f04f 0020 	mov.w	r0, #32
 8009da6:	f04f 0101 	mov.w	r1, #1
 8009daa:	f002 fb5f 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 8009dae:	f04f 0020 	mov.w	r0, #32
 8009db2:	f04f 0100 	mov.w	r1, #0
 8009db6:	f002 fb59 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009dba:	e03a      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009dc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d10c      	bne.n	8009de4 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8009dca:	f04f 0040 	mov.w	r0, #64	; 0x40
 8009dce:	f04f 0101 	mov.w	r1, #1
 8009dd2:	f002 fb4b 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 8009dd6:	f04f 0040 	mov.w	r0, #64	; 0x40
 8009dda:	f04f 0100 	mov.w	r1, #0
 8009dde:	f002 fb45 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009de2:	e026      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009dea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d10c      	bne.n	8009e0c <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 8009df2:	f04f 0080 	mov.w	r0, #128	; 0x80
 8009df6:	f04f 0101 	mov.w	r1, #1
 8009dfa:	f002 fb37 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 8009dfe:	f04f 0080 	mov.w	r0, #128	; 0x80
 8009e02:	f04f 0100 	mov.w	r1, #0
 8009e06:	f002 fb31 	bl	800c46c <RCC_AHB1PeriphResetCmd>
 8009e0a:	e012      	b.n	8009e32 <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e16:	429a      	cmp	r2, r3
 8009e18:	d10b      	bne.n	8009e32 <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 8009e1a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e1e:	f04f 0101 	mov.w	r1, #1
 8009e22:	f002 fb23 	bl	800c46c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8009e26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009e2a:	f04f 0100 	mov.w	r1, #0
 8009e2e:	f002 fb1d 	bl	800c46c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8009e32:	f107 0708 	add.w	r7, r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop

08009e3c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8009e46:	f04f 0300 	mov.w	r3, #0
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	f04f 0300 	mov.w	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
 8009e52:	f04f 0300 	mov.w	r3, #0
 8009e56:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009e58:	f04f 0300 	mov.w	r3, #0
 8009e5c:	617b      	str	r3, [r7, #20]
 8009e5e:	e086      	b.n	8009f6e <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f04f 0201 	mov.w	r2, #1
 8009e66:	fa02 f303 	lsl.w	r3, r2, r3
 8009e6a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	4013      	ands	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d173      	bne.n	8009f66 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009e88:	f04f 0103 	mov.w	r1, #3
 8009e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009e90:	ea6f 0303 	mvn.w	r3, r3
 8009e94:	401a      	ands	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	791b      	ldrb	r3, [r3, #4]
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	791b      	ldrb	r3, [r3, #4]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d003      	beq.n	8009ec4 <GPIO_Init+0x88>
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	791b      	ldrb	r3, [r3, #4]
 8009ec0:	2b02      	cmp	r3, #2
 8009ec2:	d134      	bne.n	8009f2e <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689a      	ldr	r2, [r3, #8]
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ece:	f04f 0103 	mov.w	r1, #3
 8009ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ed6:	ea6f 0303 	mvn.w	r3, r3
 8009eda:	401a      	ands	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	689a      	ldr	r2, [r3, #8]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	795b      	ldrb	r3, [r3, #5]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	697b      	ldr	r3, [r7, #20]
 8009eec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef4:	431a      	orrs	r2, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685a      	ldr	r2, [r3, #4]
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	f04f 0101 	mov.w	r1, #1
 8009f06:	fa01 f303 	lsl.w	r3, r1, r3
 8009f0a:	ea6f 0303 	mvn.w	r3, r3
 8009f0e:	401a      	ands	r2, r3
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	799b      	ldrb	r3, [r3, #6]
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	fa01 f303 	lsl.w	r3, r1, r3
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68da      	ldr	r2, [r3, #12]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f3a:	f04f 0103 	mov.w	r1, #3
 8009f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f42:	ea6f 0303 	mvn.w	r3, r3
 8009f46:	401a      	ands	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68da      	ldr	r2, [r3, #12]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	79db      	ldrb	r3, [r3, #7]
 8009f54:	4619      	mov	r1, r3
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8009f60:	431a      	orrs	r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f103 0301 	add.w	r3, r3, #1
 8009f6c:	617b      	str	r3, [r7, #20]
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2b0f      	cmp	r3, #15
 8009f72:	f67f af75 	bls.w	8009e60 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8009f76:	f107 071c 	add.w	r7, r7, #28
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bc80      	pop	{r7}
 8009f7e:	4770      	bx	lr

08009f80 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f04f 0200 	mov.w	r2, #0
 8009f96:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f04f 0200 	mov.w	r2, #0
 8009f9e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f04f 0200 	mov.w	r2, #0
 8009fa6:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f04f 0200 	mov.w	r2, #0
 8009fae:	71da      	strb	r2, [r3, #7]
}
 8009fb0:	f107 070c 	add.w	r7, r7, #12
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bc80      	pop	{r7}
 8009fb8:	4770      	bx	lr
 8009fba:	bf00      	nop

08009fbc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 8009fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fcc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8009fce:	887a      	ldrh	r2, [r7, #2]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8009fd6:	68fa      	ldr	r2, [r7, #12]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 8009fdc:	887a      	ldrh	r2, [r7, #2]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8009fe2:	68fa      	ldr	r2, [r7, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69db      	ldr	r3, [r3, #28]
 8009ff2:	60fb      	str	r3, [r7, #12]
}
 8009ff4:	f107 0714 	add.w	r7, r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bc80      	pop	{r7}
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop

0800a000 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	691a      	ldr	r2, [r3, #16]
 800a016:	887b      	ldrh	r3, [r7, #2]
 800a018:	4013      	ands	r3, r2
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800a01e:	f04f 0301 	mov.w	r3, #1
 800a022:	73fb      	strb	r3, [r7, #15]
 800a024:	e002      	b.n	800a02c <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800a026:	f04f 0300 	mov.w	r3, #0
 800a02a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	f107 0714 	add.w	r7, r7, #20
 800a034:	46bd      	mov	sp, r7
 800a036:	bc80      	pop	{r7}
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop

0800a03c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	b29b      	uxth	r3, r3
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	f107 070c 	add.w	r7, r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop

0800a058 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 800a064:	f04f 0300 	mov.w	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	695a      	ldr	r2, [r3, #20]
 800a06e:	887b      	ldrh	r3, [r7, #2]
 800a070:	4013      	ands	r3, r2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800a076:	f04f 0301 	mov.w	r3, #1
 800a07a:	73fb      	strb	r3, [r7, #15]
 800a07c:	e002      	b.n	800a084 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800a07e:	f04f 0300 	mov.w	r3, #0
 800a082:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a084:	7bfb      	ldrb	r3, [r7, #15]
}
 800a086:	4618      	mov	r0, r3
 800a088:	f107 0714 	add.w	r7, r7, #20
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bc80      	pop	{r7}
 800a090:	4770      	bx	lr
 800a092:	bf00      	nop

0800a094 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	695b      	ldr	r3, [r3, #20]
 800a0a0:	b29b      	uxth	r3, r3
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f107 070c 	add.w	r7, r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bc80      	pop	{r7}
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop

0800a0b0 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	887a      	ldrh	r2, [r7, #2]
 800a0c0:	831a      	strh	r2, [r3, #24]
}
 800a0c2:	f107 070c 	add.w	r7, r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bc80      	pop	{r7}
 800a0ca:	4770      	bx	lr

0800a0cc <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	887a      	ldrh	r2, [r7, #2]
 800a0dc:	835a      	strh	r2, [r3, #26]
}
 800a0de:	f107 070c 	add.w	r7, r7, #12
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bc80      	pop	{r7}
 800a0e6:	4770      	bx	lr

0800a0e8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	460a      	mov	r2, r1
 800a0f4:	807a      	strh	r2, [r7, #2]
 800a0f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800a0f8:	787b      	ldrb	r3, [r7, #1]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	887a      	ldrh	r2, [r7, #2]
 800a102:	831a      	strh	r2, [r3, #24]
 800a104:	e002      	b.n	800a10c <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	887a      	ldrh	r2, [r7, #2]
 800a10a:	835a      	strh	r2, [r3, #26]
  }
}
 800a10c:	f107 070c 	add.w	r7, r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	bc80      	pop	{r7}
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop

0800a118 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 800a124:	887a      	ldrh	r2, [r7, #2]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	615a      	str	r2, [r3, #20]
}
 800a12a:	f107 070c 	add.w	r7, r7, #12
 800a12e:	46bd      	mov	sp, r7
 800a130:	bc80      	pop	{r7}
 800a132:	4770      	bx	lr

0800a134 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	460b      	mov	r3, r1
 800a13e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	695a      	ldr	r2, [r3, #20]
 800a144:	887b      	ldrh	r3, [r7, #2]
 800a146:	405a      	eors	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	615a      	str	r2, [r3, #20]
}
 800a14c:	f107 070c 	add.w	r7, r7, #12
 800a150:	46bd      	mov	sp, r7
 800a152:	bc80      	pop	{r7}
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop

0800a158 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	4613      	mov	r3, r2
 800a162:	460a      	mov	r2, r1
 800a164:	807a      	strh	r2, [r7, #2]
 800a166:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800a168:	f04f 0300 	mov.w	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800a16e:	f04f 0300 	mov.w	r3, #0
 800a172:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800a174:	787a      	ldrb	r2, [r7, #1]
 800a176:	887b      	ldrh	r3, [r7, #2]
 800a178:	f003 0307 	and.w	r3, r3, #7
 800a17c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a180:	fa02 f303 	lsl.w	r3, r2, r3
 800a184:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800a186:	887b      	ldrh	r3, [r7, #2]
 800a188:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	461a      	mov	r2, r3
 800a190:	887b      	ldrh	r3, [r7, #2]
 800a192:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a196:	b29b      	uxth	r3, r3
 800a198:	4619      	mov	r1, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f101 0108 	add.w	r1, r1, #8
 800a1a0:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800a1a4:	887b      	ldrh	r3, [r7, #2]
 800a1a6:	f003 0307 	and.w	r3, r3, #7
 800a1aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a1ae:	f04f 000f 	mov.w	r0, #15
 800a1b2:	fa00 f303 	lsl.w	r3, r0, r3
 800a1b6:	ea6f 0303 	mvn.w	r3, r3
 800a1ba:	4019      	ands	r1, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f102 0208 	add.w	r2, r2, #8
 800a1c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800a1c6:	887b      	ldrh	r3, [r7, #2]
 800a1c8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f102 0208 	add.w	r2, r2, #8
 800a1d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800a1e0:	887b      	ldrh	r3, [r7, #2]
 800a1e2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f102 0208 	add.w	r2, r2, #8
 800a1f0:	68b9      	ldr	r1, [r7, #8]
 800a1f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800a1f6:	f107 0714 	add.w	r7, r7, #20
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bc80      	pop	{r7}
 800a1fe:	4770      	bx	lr

0800a200 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 800a204:	f04f 0020 	mov.w	r0, #32
 800a208:	f04f 0101 	mov.w	r1, #1
 800a20c:	f002 f958 	bl	800c4c0 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 800a210:	f04f 0020 	mov.w	r0, #32
 800a214:	f04f 0100 	mov.w	r1, #0
 800a218:	f002 f952 	bl	800c4c0 <RCC_AHB2PeriphResetCmd>
}
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop

0800a220 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 800a220:	b480      	push	{r7}
 800a222:	b083      	sub	sp, #12
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 800a228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a230:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a234:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a238:	6812      	ldr	r2, [r2, #0]
 800a23a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a23e:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800a240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a244:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a24c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a250:	6811      	ldr	r1, [r2, #0]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800a25a:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 800a260:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800a262:	430a      	orrs	r2, r1
 800a264:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	2b40      	cmp	r3, #64	; 0x40
 800a26c:	d118      	bne.n	800a2a0 <HASH_Init+0x80>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800a26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a272:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a27a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a27e:	6812      	ldr	r2, [r2, #0]
 800a280:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a284:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 800a286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a28e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a292:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a296:	6811      	ldr	r1, [r2, #0]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	68d2      	ldr	r2, [r2, #12]
 800a29c:	430a      	orrs	r2, r1
 800a29e:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 800a2a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a2a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a2ac:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a2b0:	6812      	ldr	r2, [r2, #0]
 800a2b2:	f042 0204 	orr.w	r2, r2, #4
 800a2b6:	601a      	str	r2, [r3, #0]
}
 800a2b8:	f107 070c 	add.w	r7, r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop

0800a2c4 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f04f 0200 	mov.w	r2, #0
 800a2d2:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f04f 0200 	mov.w	r2, #0
 800a2da:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f04f 0200 	mov.w	r2, #0
 800a2ea:	60da      	str	r2, [r3, #12]
}
 800a2ec:	f107 070c 	add.w	r7, r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bc80      	pop	{r7}
 800a2f4:	4770      	bx	lr
 800a2f6:	bf00      	nop

0800a2f8 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 800a2fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a300:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a304:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a308:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a30c:	6812      	ldr	r2, [r2, #0]
 800a30e:	f042 0204 	orr.w	r2, r2, #4
 800a312:	601a      	str	r2, [r3, #0]
}
 800a314:	46bd      	mov	sp, r7
 800a316:	bc80      	pop	{r7}
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop

0800a31c <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b083      	sub	sp, #12
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 800a326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a32a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a32e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a332:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a336:	6892      	ldr	r2, [r2, #8]
 800a338:	f022 021f 	bic.w	r2, r2, #31
 800a33c:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800a33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a342:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a34a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a34e:	6891      	ldr	r1, [r2, #8]
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	430a      	orrs	r2, r1
 800a354:	609a      	str	r2, [r3, #8]
}
 800a356:	f107 070c 	add.w	r7, r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bc80      	pop	{r7}
 800a35e:	4770      	bx	lr

0800a360 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 800a368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a36c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	605a      	str	r2, [r3, #4]
}
 800a374:	f107 070c 	add.w	r7, r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	bc80      	pop	{r7}
 800a37c:	4770      	bx	lr
 800a37e:	bf00      	nop

0800a380 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 800a380:	b480      	push	{r7}
 800a382:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 800a384:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a388:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a392:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a396:	b2db      	uxtb	r3, r3
}
 800a398:	4618      	mov	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bc80      	pop	{r7}
 800a39e:	4770      	bx	lr

0800a3a0 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 800a3a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 800a3b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ba:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a3be:	691a      	ldr	r2, [r3, #16]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 800a3c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3c8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a3cc:	695a      	ldr	r2, [r3, #20]
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 800a3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3d6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a3da:	699a      	ldr	r2, [r3, #24]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 800a3e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3e4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a3e8:	69da      	ldr	r2, [r3, #28]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	611a      	str	r2, [r3, #16]
}
 800a3ee:	f107 070c 	add.w	r7, r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bc80      	pop	{r7}
 800a3f6:	4770      	bx	lr

0800a3f8 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 800a3fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a400:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a404:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a408:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a40c:	6892      	ldr	r2, [r2, #8]
 800a40e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a412:	609a      	str	r2, [r3, #8]
}
 800a414:	46bd      	mov	sp, r7
 800a416:	bc80      	pop	{r7}
 800a418:	4770      	bx	lr
 800a41a:	bf00      	nop

0800a41c <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800a424:	f04f 0300 	mov.w	r3, #0
 800a428:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 800a42a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a42e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a432:	6a1a      	ldr	r2, [r3, #32]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 800a438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a43c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a440:	689a      	ldr	r2, [r3, #8]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 800a446:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a44a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a44e:	681a      	ldr	r2, [r3, #0]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 800a454:	f04f 0300 	mov.w	r3, #0
 800a458:	73fb      	strb	r3, [r7, #15]
 800a45a:	e014      	b.n	800a486 <HASH_SaveContext+0x6a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 800a45c:	7bf8      	ldrb	r0, [r7, #15]
 800a45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a462:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a466:	7bfa      	ldrb	r2, [r7, #15]
 800a468:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 800a46c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	f100 0302 	add.w	r3, r0, #2
 800a476:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800a47a:	18cb      	adds	r3, r1, r3
 800a47c:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 800a47e:	7bfb      	ldrb	r3, [r7, #15]
 800a480:	f103 0301 	add.w	r3, r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]
 800a486:	7bfb      	ldrb	r3, [r7, #15]
 800a488:	2b32      	cmp	r3, #50	; 0x32
 800a48a:	d9e7      	bls.n	800a45c <HASH_SaveContext+0x40>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 800a48c:	f107 0714 	add.w	r7, r7, #20
 800a490:	46bd      	mov	sp, r7
 800a492:	bc80      	pop	{r7}
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop

0800a498 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 800a498:	b480      	push	{r7}
 800a49a:	b085      	sub	sp, #20
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 800a4a0:	f04f 0300 	mov.w	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 800a4a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	6812      	ldr	r2, [r2, #0]
 800a4b2:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 800a4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6852      	ldr	r2, [r2, #4]
 800a4c0:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 800a4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4c6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6892      	ldr	r2, [r2, #8]
 800a4ce:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 800a4d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4d4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a4d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4dc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a4e0:	6812      	ldr	r2, [r2, #0]
 800a4e2:	f042 0204 	orr.w	r2, r2, #4
 800a4e6:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 800a4e8:	f04f 0300 	mov.w	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]
 800a4ee:	e014      	b.n	800a51a <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 800a4f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4f4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a4f8:	7bf8      	ldrb	r0, [r7, #15]
 800a4fa:	7bfa      	ldrb	r2, [r7, #15]
 800a4fc:	6879      	ldr	r1, [r7, #4]
 800a4fe:	f102 0202 	add.w	r2, r2, #2
 800a502:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800a506:	188a      	adds	r2, r1, r2
 800a508:	6851      	ldr	r1, [r2, #4]
 800a50a:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 800a50e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 800a512:	7bfb      	ldrb	r3, [r7, #15]
 800a514:	f103 0301 	add.w	r3, r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	2b32      	cmp	r3, #50	; 0x32
 800a51e:	d9e7      	bls.n	800a4f0 <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 800a520:	f107 0714 	add.w	r7, r7, #20
 800a524:	46bd      	mov	sp, r7
 800a526:	bc80      	pop	{r7}
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop

0800a52c <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 800a52c:	b480      	push	{r7}
 800a52e:	b083      	sub	sp, #12
 800a530:	af00      	add	r7, sp, #0
 800a532:	4603      	mov	r3, r0
 800a534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a536:	79fb      	ldrb	r3, [r7, #7]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d00c      	beq.n	800a556 <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 800a53c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a540:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a548:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a54c:	6812      	ldr	r2, [r2, #0]
 800a54e:	f042 0208 	orr.w	r2, r2, #8
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	e00b      	b.n	800a56e <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 800a556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a55a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a55e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a562:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a566:	6812      	ldr	r2, [r2, #0]
 800a568:	f022 0208 	bic.w	r2, r2, #8
 800a56c:	601a      	str	r2, [r3, #0]
  }
}
 800a56e:	f107 070c 	add.w	r7, r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	bc80      	pop	{r7}
 800a576:	4770      	bx	lr

0800a578 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	71fa      	strb	r2, [r7, #7]
 800a584:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800a586:	79bb      	ldrb	r3, [r7, #6]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00c      	beq.n	800a5a6 <HASH_ITConfig+0x2e>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 800a58c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a590:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a598:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a59c:	6a11      	ldr	r1, [r2, #32]
 800a59e:	79fa      	ldrb	r2, [r7, #7]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	621a      	str	r2, [r3, #32]
 800a5a4:	e00e      	b.n	800a5c4 <HASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 800a5a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5aa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a5ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5b2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800a5b6:	6a11      	ldr	r1, [r2, #32]
 800a5b8:	79fa      	ldrb	r2, [r7, #7]
 800a5ba:	ea6f 0202 	mvn.w	r2, r2
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	400a      	ands	r2, r1
 800a5c2:	621a      	str	r2, [r3, #32]
  }
}
 800a5c4:	f107 070c 	add.w	r7, r7, #12
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bc80      	pop	{r7}
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop

0800a5d0 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800a5da:	f04f 0300 	mov.w	r3, #0
 800a5de:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 800a5e0:	f04f 0300 	mov.w	r3, #0
 800a5e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d006      	beq.n	800a5fe <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 800a5f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	60bb      	str	r3, [r7, #8]
 800a5fc:	e005      	b.n	800a60a <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 800a5fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a602:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a608:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 800a60a:	88fa      	ldrh	r2, [r7, #6]
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4013      	ands	r3, r2
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 800a614:	f04f 0301 	mov.w	r3, #1
 800a618:	73fb      	strb	r3, [r7, #15]
 800a61a:	e002      	b.n	800a622 <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 800a61c:	f04f 0300 	mov.w	r3, #0
 800a620:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 800a622:	7bfb      	ldrb	r3, [r7, #15]
}
 800a624:	4618      	mov	r0, r3
 800a626:	f107 0714 	add.w	r7, r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bc80      	pop	{r7}
 800a62e:	4770      	bx	lr

0800a630 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 800a63a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a642:	88fa      	ldrh	r2, [r7, #6]
 800a644:	ea6f 0202 	mvn.w	r2, r2
 800a648:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a64a:	f107 070c 	add.w	r7, r7, #12
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc80      	pop	{r7}
 800a652:	4770      	bx	lr

0800a654 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 800a654:	b480      	push	{r7}
 800a656:	b085      	sub	sp, #20
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800a65e:	f04f 0300 	mov.w	r3, #0
 800a662:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800a664:	f04f 0300 	mov.w	r3, #0
 800a668:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 800a66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a66e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 800a676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a67e:	6a1a      	ldr	r2, [r3, #32]
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	401a      	ands	r2, r3
 800a684:	79fb      	ldrb	r3, [r7, #7]
 800a686:	4013      	ands	r3, r2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d003      	beq.n	800a694 <HASH_GetITStatus+0x40>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 800a68c:	f04f 0301 	mov.w	r3, #1
 800a690:	73fb      	strb	r3, [r7, #15]
 800a692:	e002      	b.n	800a69a <HASH_GetITStatus+0x46>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 800a694:	f04f 0300 	mov.w	r3, #0
 800a698:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	f107 0714 	add.w	r7, r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bc80      	pop	{r7}
 800a6a6:	4770      	bx	lr

0800a6a8 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 800a6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6b6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a6ba:	79fa      	ldrb	r2, [r7, #7]
 800a6bc:	ea6f 0202 	mvn.w	r2, r2
 800a6c0:	b2d2      	uxtb	r2, r2
 800a6c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a6c4:	f107 070c 	add.w	r7, r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bc80      	pop	{r7}
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop

0800a6d0 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 800a6d0:	b590      	push	{r4, r7, lr}
 800a6d2:	b09d      	sub	sp, #116	; 0x74
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800a6ee:	f04f 0300 	mov.w	r3, #0
 800a6f2:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 800a6f4:	f04f 0301 	mov.w	r3, #1
 800a6f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	b29b      	uxth	r3, r3
 800a708:	f003 0303 	and.w	r3, r3, #3
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a712:	b29b      	uxth	r3, r3
 800a714:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800a716:	f7ff fd73 	bl	800a200 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800a71a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a71e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800a720:	f04f 0300 	mov.w	r3, #0
 800a724:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800a726:	f04f 0320 	mov.w	r3, #32
 800a72a:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 800a72c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fd75 	bl	800a220 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800a736:	8afb      	ldrh	r3, [r7, #22]
 800a738:	b29b      	uxth	r3, r3
 800a73a:	4618      	mov	r0, r3
 800a73c:	f7ff fdee 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800a740:	f04f 0300 	mov.w	r3, #0
 800a744:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a746:	e00c      	b.n	800a762 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800a748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff fe07 	bl	800a360 <HASH_DataIn>
    inputaddr+=4;
 800a752:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a754:	f103 0304 	add.w	r3, r3, #4
 800a758:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800a75a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75c:	f103 0304 	add.w	r3, r3, #4
 800a760:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a762:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	429a      	cmp	r2, r3
 800a768:	d3ee      	bcc.n	800a748 <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800a76a:	f7ff fe45 	bl	800a3f8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a76e:	f04f 0008 	mov.w	r0, #8
 800a772:	f7ff ff2d 	bl	800a5d0 <HASH_GetFlagStatus>
 800a776:	4603      	mov	r3, r0
 800a778:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	f103 0301 	add.w	r3, r3, #1
 800a780:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a788:	d002      	beq.n	800a790 <HASH_MD5+0xc0>
 800a78a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1ee      	bne.n	800a76e <HASH_MD5+0x9e>

  if (busystatus != RESET)
 800a790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a792:	2b00      	cmp	r3, #0
 800a794:	d004      	beq.n	800a7a0 <HASH_MD5+0xd0>
  {
     status = ERROR;
 800a796:	f04f 0300 	mov.w	r3, #0
 800a79a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 800a79e:	e030      	b.n	800a802 <HASH_MD5+0x132>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 800a7a0:	f107 0318 	add.w	r3, r7, #24
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff fdfb 	bl	800a3a0 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800a7aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ac:	69ba      	ldr	r2, [r7, #24]
 800a7ae:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a7b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7b2:	ba14      	rev	r4, r2
 800a7b4:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800a7b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7b8:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a7ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7bc:	f103 0304 	add.w	r3, r3, #4
 800a7c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800a7c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c4:	69fa      	ldr	r2, [r7, #28]
 800a7c6:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a7c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a7ca:	ba14      	rev	r4, r2
 800a7cc:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800a7ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7d0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a7d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7d4:	f103 0304 	add.w	r3, r3, #4
 800a7d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800a7da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7dc:	6a3a      	ldr	r2, [r7, #32]
 800a7de:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a7e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7e2:	ba14      	rev	r4, r2
 800a7e4:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 800a7e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7e8:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800a7ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ec:	f103 0304 	add.w	r3, r3, #4
 800a7f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800a7f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7f6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800a7f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7fa:	ba14      	rev	r4, r2
 800a7fc:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800a7fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a800:	601a      	str	r2, [r3, #0]
  }
  return status; 
 800a802:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 800a806:	4618      	mov	r0, r3
 800a808:	f107 0774 	add.w	r7, r7, #116	; 0x74
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd90      	pop	{r4, r7, pc}

0800a810 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 800a810:	b590      	push	{r4, r7, lr}
 800a812:	b09f      	sub	sp, #124	; 0x7c
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	607a      	str	r2, [r7, #4]
 800a81c:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800a81e:	f04f 0300 	mov.w	r3, #0
 800a822:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800a82a:	f04f 0300 	mov.w	r3, #0
 800a82e:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800a830:	f04f 0300 	mov.w	r3, #0
 800a834:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800a836:	f04f 0300 	mov.w	r3, #0
 800a83a:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 800a83c:	f04f 0301 	mov.w	r3, #1
 800a840:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 800a84c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a850:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	b29b      	uxth	r3, r3
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a860:	b29b      	uxth	r3, r3
 800a862:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	b29b      	uxth	r3, r3
 800a868:	f003 0303 	and.w	r3, r3, #3
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800a872:	b29b      	uxth	r3, r3
 800a874:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 800a876:	f7ff fcc3 	bl	800a200 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 800a87a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a87e:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800a880:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a884:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800a886:	f04f 0320 	mov.w	r3, #32
 800a88a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	2b40      	cmp	r3, #64	; 0x40
 800a890:	d903      	bls.n	800a89a <HMAC_MD5+0x8a>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800a892:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a896:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a898:	e002      	b.n	800a8a0 <HMAC_MD5+0x90>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800a89a:	f04f 0300 	mov.w	r3, #0
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 800a8a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fcbb 	bl	800a220 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800a8aa:	8b3b      	ldrh	r3, [r7, #24]
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff fd34 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	677b      	str	r3, [r7, #116]	; 0x74
 800a8ba:	e00c      	b.n	800a8d6 <HMAC_MD5+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800a8bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff fd4d 	bl	800a360 <HASH_DataIn>
    keyaddr+=4;
 800a8c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c8:	f103 0304 	add.w	r3, r3, #4
 800a8cc:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800a8ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8d0:	f103 0304 	add.w	r3, r3, #4
 800a8d4:	677b      	str	r3, [r7, #116]	; 0x74
 800a8d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d3ee      	bcc.n	800a8bc <HMAC_MD5+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 800a8de:	f7ff fd8b 	bl	800a3f8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a8e2:	f04f 0008 	mov.w	r0, #8
 800a8e6:	f7ff fe73 	bl	800a5d0 <HASH_GetFlagStatus>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	f103 0301 	add.w	r3, r3, #1
 800a8f4:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8fc:	d002      	beq.n	800a904 <HMAC_MD5+0xf4>
 800a8fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a900:	2b00      	cmp	r3, #0
 800a902:	d1ee      	bne.n	800a8e2 <HMAC_MD5+0xd2>

  if (busystatus != RESET)
 800a904:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a906:	2b00      	cmp	r3, #0
 800a908:	d004      	beq.n	800a914 <HMAC_MD5+0x104>
  {
     status = ERROR;
 800a90a:	f04f 0300 	mov.w	r3, #0
 800a90e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a912:	e0a2      	b.n	800aa5a <HMAC_MD5+0x24a>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800a914:	8b7b      	ldrh	r3, [r7, #26]
 800a916:	b29b      	uxth	r3, r3
 800a918:	4618      	mov	r0, r3
 800a91a:	f7ff fcff 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800a91e:	f04f 0300 	mov.w	r3, #0
 800a922:	677b      	str	r3, [r7, #116]	; 0x74
 800a924:	e00c      	b.n	800a940 <HMAC_MD5+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800a926:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff fd18 	bl	800a360 <HASH_DataIn>
      inputaddr+=4;
 800a930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a932:	f103 0304 	add.w	r3, r3, #4
 800a936:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800a938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a93a:	f103 0304 	add.w	r3, r3, #4
 800a93e:	677b      	str	r3, [r7, #116]	; 0x74
 800a940:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d3ee      	bcc.n	800a926 <HMAC_MD5+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800a948:	f7ff fd56 	bl	800a3f8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 800a94c:	f04f 0300 	mov.w	r3, #0
 800a950:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a952:	f04f 0008 	mov.w	r0, #8
 800a956:	f7ff fe3b 	bl	800a5d0 <HASH_GetFlagStatus>
 800a95a:	4603      	mov	r3, r0
 800a95c:	667b      	str	r3, [r7, #100]	; 0x64
       counter++;
 800a95e:	697b      	ldr	r3, [r7, #20]
 800a960:	f103 0301 	add.w	r3, r3, #1
 800a964:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a96c:	d002      	beq.n	800a974 <HMAC_MD5+0x164>
 800a96e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a970:	2b00      	cmp	r3, #0
 800a972:	d1ee      	bne.n	800a952 <HMAC_MD5+0x142>

    if (busystatus != RESET)
 800a974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <HMAC_MD5+0x174>
    {
      status = ERROR;
 800a97a:	f04f 0300 	mov.w	r3, #0
 800a97e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a982:	e06a      	b.n	800aa5a <HMAC_MD5+0x24a>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800a984:	8b3b      	ldrh	r3, [r7, #24]
 800a986:	b29b      	uxth	r3, r3
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fcc7 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 800a992:	f04f 0300 	mov.w	r3, #0
 800a996:	677b      	str	r3, [r7, #116]	; 0x74
 800a998:	e00c      	b.n	800a9b4 <HMAC_MD5+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800a99a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fcde 	bl	800a360 <HASH_DataIn>
        keyaddr+=4;
 800a9a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9a6:	f103 0304 	add.w	r3, r3, #4
 800a9aa:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800a9ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a9ae:	f103 0304 	add.w	r3, r3, #4
 800a9b2:	677b      	str	r3, [r7, #116]	; 0x74
 800a9b4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d3ee      	bcc.n	800a99a <HMAC_MD5+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 800a9bc:	f7ff fd1c 	bl	800a3f8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 800a9c0:	f04f 0300 	mov.w	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800a9c6:	f04f 0008 	mov.w	r0, #8
 800a9ca:	f7ff fe01 	bl	800a5d0 <HASH_GetFlagStatus>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	667b      	str	r3, [r7, #100]	; 0x64
          counter++;
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	f103 0301 	add.w	r3, r3, #1
 800a9d8:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9e0:	d002      	beq.n	800a9e8 <HMAC_MD5+0x1d8>
 800a9e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1ee      	bne.n	800a9c6 <HMAC_MD5+0x1b6>

      if (busystatus != RESET)
 800a9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d004      	beq.n	800a9f8 <HMAC_MD5+0x1e8>
      {
         status = ERROR;
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800a9f6:	e030      	b.n	800aa5a <HMAC_MD5+0x24a>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 800a9f8:	f107 031c 	add.w	r3, r7, #28
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f7ff fccf 	bl	800a3a0 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 800aa02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa04:	69fa      	ldr	r2, [r7, #28]
 800aa06:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aa08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa0a:	ba14      	rev	r4, r2
 800aa0c:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800aa0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa10:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800aa12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa14:	f103 0304 	add.w	r3, r3, #4
 800aa18:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 800aa1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa1c:	6a3a      	ldr	r2, [r7, #32]
 800aa1e:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aa20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa22:	ba14      	rev	r4, r2
 800aa24:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 800aa26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa28:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800aa2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa2c:	f103 0304 	add.w	r3, r3, #4
 800aa30:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 800aa32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa36:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aa38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa3a:	ba14      	rev	r4, r2
 800aa3c:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800aa3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa40:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800aa42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa44:	f103 0304 	add.w	r3, r3, #4
 800aa48:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800aa4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa4e:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aa50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aa52:	ba14      	rev	r4, r2
 800aa54:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800aa56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa58:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800aa5a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd90      	pop	{r4, r7, pc}

0800aa68 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 800aa68:	b590      	push	{r4, r7, lr}
 800aa6a:	b09f      	sub	sp, #124	; 0x7c
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800aa74:	f04f 0300 	mov.w	r3, #0
 800aa78:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800aa7a:	f04f 0300 	mov.w	r3, #0
 800aa7e:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 800aa80:	f04f 0300 	mov.w	r3, #0
 800aa84:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800aa86:	f04f 0300 	mov.w	r3, #0
 800aa8a:	66bb      	str	r3, [r7, #104]	; 0x68
  ErrorStatus status = SUCCESS;
 800aa8c:	f04f 0301 	mov.w	r3, #1
 800aa90:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t inputaddr  = (uint32_t)Input;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t outputaddr = (uint32_t)Output;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	667b      	str	r3, [r7, #100]	; 0x64

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800aaae:	f7ff fba7 	bl	800a200 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800aab2:	f04f 0300 	mov.w	r3, #0
 800aab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 800aab8:	f04f 0300 	mov.w	r3, #0
 800aabc:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800aabe:	f04f 0320 	mov.w	r3, #32
 800aac2:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 800aac4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fba9 	bl	800a220 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800aace:	8afb      	ldrh	r3, [r7, #22]
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff fc22 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	677b      	str	r3, [r7, #116]	; 0x74
 800aade:	e00c      	b.n	800aafa <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 800aae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f7ff fc3b 	bl	800a360 <HASH_DataIn>
    inputaddr+=4;
 800aaea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaec:	f103 0304 	add.w	r3, r3, #4
 800aaf0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 800aaf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf4:	f103 0304 	add.w	r3, r3, #4
 800aaf8:	677b      	str	r3, [r7, #116]	; 0x74
 800aafa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d3ee      	bcc.n	800aae0 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800ab02:	f7ff fc79 	bl	800a3f8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800ab06:	f04f 0008 	mov.w	r0, #8
 800ab0a:	f7ff fd61 	bl	800a5d0 <HASH_GetFlagStatus>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	66bb      	str	r3, [r7, #104]	; 0x68
    counter++;
 800ab12:	693b      	ldr	r3, [r7, #16]
 800ab14:	f103 0301 	add.w	r3, r3, #1
 800ab18:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab20:	d002      	beq.n	800ab28 <HASH_SHA1+0xc0>
 800ab22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d1ee      	bne.n	800ab06 <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 800ab28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d004      	beq.n	800ab38 <HASH_SHA1+0xd0>
  {
     status = ERROR;
 800ab2e:	f04f 0300 	mov.w	r3, #0
 800ab32:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 800ab36:	e03c      	b.n	800abb2 <HASH_SHA1+0x14a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 800ab38:	f107 0318 	add.w	r3, r7, #24
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7ff fc2f 	bl	800a3a0 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800ab42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ab48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab4a:	ba14      	rev	r4, r2
 800ab4c:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800ab4e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab50:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800ab52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab54:	f103 0304 	add.w	r3, r3, #4
 800ab58:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800ab5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab5c:	69fa      	ldr	r2, [r7, #28]
 800ab5e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ab60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab62:	ba14      	rev	r4, r2
 800ab64:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800ab66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab68:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800ab6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab6c:	f103 0304 	add.w	r3, r3, #4
 800ab70:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800ab72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab74:	6a3a      	ldr	r2, [r7, #32]
 800ab76:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ab78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab7a:	ba14      	rev	r4, r2
 800ab7c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800ab7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab80:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800ab82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab84:	f103 0304 	add.w	r3, r3, #4
 800ab88:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800ab8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab8e:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ab90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab92:	ba14      	rev	r4, r2
 800ab94:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 800ab96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab98:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800ab9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab9c:	f103 0304 	add.w	r3, r3, #4
 800aba0:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800aba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aba4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aba6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800aba8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abaa:	ba14      	rev	r4, r2
 800abac:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800abae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800abb0:	601a      	str	r2, [r3, #0]
  }
  return status;
 800abb2:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd90      	pop	{r4, r7, pc}

0800abc0 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 800abc0:	b590      	push	{r4, r7, lr}
 800abc2:	b0a1      	sub	sp, #132	; 0x84
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	60b9      	str	r1, [r7, #8]
 800abca:	607a      	str	r2, [r7, #4]
 800abcc:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 800abda:	f04f 0300 	mov.w	r3, #0
 800abde:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 800abe0:	f04f 0300 	mov.w	r3, #0
 800abe4:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 800abec:	f04f 0301 	mov.w	r3, #1
 800abf0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 800abfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac00:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ac10:	b29b      	uxth	r3, r3
 800ac12:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	f003 0303 	and.w	r3, r3, #3
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800ac26:	f7ff faeb 	bl	800a200 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 800ac30:	f04f 0340 	mov.w	r3, #64	; 0x40
 800ac34:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800ac36:	f04f 0320 	mov.w	r3, #32
 800ac3a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b40      	cmp	r3, #64	; 0x40
 800ac40:	d903      	bls.n	800ac4a <HMAC_SHA1+0x8a>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 800ac42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ac46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac48:	e002      	b.n	800ac50 <HMAC_SHA1+0x90>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800ac4a:	f04f 0300 	mov.w	r3, #0
 800ac4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 800ac50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7ff fae3 	bl	800a220 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800ac5a:	8b3b      	ldrh	r3, [r7, #24]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7ff fb5c 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800ac64:	f04f 0300 	mov.w	r3, #0
 800ac68:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac6a:	e00c      	b.n	800ac86 <HMAC_SHA1+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800ac6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4618      	mov	r0, r3
 800ac72:	f7ff fb75 	bl	800a360 <HASH_DataIn>
    keyaddr+=4;
 800ac76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac78:	f103 0304 	add.w	r3, r3, #4
 800ac7c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800ac7e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ac80:	f103 0304 	add.w	r3, r3, #4
 800ac84:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ac86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d3ee      	bcc.n	800ac6c <HMAC_SHA1+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800ac8e:	f7ff fbb3 	bl	800a3f8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800ac92:	f04f 0008 	mov.w	r0, #8
 800ac96:	f7ff fc9b 	bl	800a5d0 <HASH_GetFlagStatus>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	f103 0301 	add.w	r3, r3, #1
 800aca4:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acac:	d002      	beq.n	800acb4 <HMAC_SHA1+0xf4>
 800acae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d1ee      	bne.n	800ac92 <HMAC_SHA1+0xd2>

  if (busystatus != RESET)
 800acb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d004      	beq.n	800acc4 <HMAC_SHA1+0x104>
  {
     status = ERROR;
 800acba:	f04f 0300 	mov.w	r3, #0
 800acbe:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800acc2:	e0ae      	b.n	800ae22 <HMAC_SHA1+0x262>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 800acc4:	8b7b      	ldrh	r3, [r7, #26]
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	4618      	mov	r0, r3
 800acca:	f7ff fb27 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800acce:	f04f 0300 	mov.w	r3, #0
 800acd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acd4:	e00c      	b.n	800acf0 <HMAC_SHA1+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 800acd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	4618      	mov	r0, r3
 800acdc:	f7ff fb40 	bl	800a360 <HASH_DataIn>
      inputaddr+=4;
 800ace0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ace2:	f103 0304 	add.w	r3, r3, #4
 800ace6:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 800ace8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800acea:	f103 0304 	add.w	r3, r3, #4
 800acee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800acf0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d3ee      	bcc.n	800acd6 <HMAC_SHA1+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 800acf8:	f7ff fb7e 	bl	800a3f8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 800acfc:	f04f 0300 	mov.w	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800ad02:	f04f 0008 	mov.w	r0, #8
 800ad06:	f7ff fc63 	bl	800a5d0 <HASH_GetFlagStatus>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	f103 0301 	add.w	r3, r3, #1
 800ad14:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad1c:	d002      	beq.n	800ad24 <HMAC_SHA1+0x164>
 800ad1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d1ee      	bne.n	800ad02 <HMAC_SHA1+0x142>

    if (busystatus != RESET)
 800ad24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d004      	beq.n	800ad34 <HMAC_SHA1+0x174>
    {
      status = ERROR;
 800ad2a:	f04f 0300 	mov.w	r3, #0
 800ad2e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800ad32:	e076      	b.n	800ae22 <HMAC_SHA1+0x262>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800ad34:	8b3b      	ldrh	r3, [r7, #24]
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7ff faef 	bl	800a31c <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 800ad42:	f04f 0300 	mov.w	r3, #0
 800ad46:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad48:	e00c      	b.n	800ad64 <HMAC_SHA1+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800ad4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff fb06 	bl	800a360 <HASH_DataIn>
        keyaddr+=4;
 800ad54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad56:	f103 0304 	add.w	r3, r3, #4
 800ad5a:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800ad5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ad5e:	f103 0304 	add.w	r3, r3, #4
 800ad62:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad64:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d3ee      	bcc.n	800ad4a <HMAC_SHA1+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800ad6c:	f7ff fb44 	bl	800a3f8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 800ad70:	f04f 0300 	mov.w	r3, #0
 800ad74:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 800ad76:	f04f 0008 	mov.w	r0, #8
 800ad7a:	f7ff fc29 	bl	800a5d0 <HASH_GetFlagStatus>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	66fb      	str	r3, [r7, #108]	; 0x6c
        counter++;
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	f103 0301 	add.w	r3, r3, #1
 800ad88:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad90:	d002      	beq.n	800ad98 <HMAC_SHA1+0x1d8>
 800ad92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1ee      	bne.n	800ad76 <HMAC_SHA1+0x1b6>

      if (busystatus != RESET)
 800ad98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <HMAC_SHA1+0x1e8>
      {
        status = ERROR;
 800ad9e:	f04f 0300 	mov.w	r3, #0
 800ada2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800ada6:	e03c      	b.n	800ae22 <HMAC_SHA1+0x262>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 800ada8:	f107 031c 	add.w	r3, r7, #28
 800adac:	4618      	mov	r0, r3
 800adae:	f7ff faf7 	bl	800a3a0 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 800adb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adb4:	69fa      	ldr	r2, [r7, #28]
 800adb6:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800adb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800adba:	ba14      	rev	r4, r2
 800adbc:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800adbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800adc0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800adc2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adc4:	f103 0304 	add.w	r3, r3, #4
 800adc8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800adca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adcc:	6a3a      	ldr	r2, [r7, #32]
 800adce:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800add0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800add2:	ba14      	rev	r4, r2
 800add4:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800add6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800add8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800adda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800addc:	f103 0304 	add.w	r3, r3, #4
 800ade0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 800ade2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ade4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ade6:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ade8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800adea:	ba14      	rev	r4, r2
 800adec:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 800adee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adf0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800adf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adf4:	f103 0304 	add.w	r3, r3, #4
 800adf8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800adfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800adfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adfe:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae02:	ba14      	rev	r4, r2
 800ae04:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800ae06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae08:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 800ae0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae0c:	f103 0304 	add.w	r3, r3, #4
 800ae10:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 800ae12:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae16:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800ae18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae1a:	ba14      	rev	r4, r2
 800ae1c:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 800ae1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae20:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 800ae22:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	f107 0784 	add.w	r7, r7, #132	; 0x84
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd90      	pop	{r4, r7, pc}

0800ae30 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800ae3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d10c      	bne.n	800ae60 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 800ae46:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ae4a:	f04f 0101 	mov.w	r1, #1
 800ae4e:	f001 fb8b 	bl	800c568 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 800ae52:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ae56:	f04f 0100 	mov.w	r1, #0
 800ae5a:	f001 fb85 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800ae5e:	e026      	b.n	800aeae <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 800ae66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d10c      	bne.n	800ae88 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800ae6e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ae72:	f04f 0101 	mov.w	r1, #1
 800ae76:	f001 fb77 	bl	800c568 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800ae7a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800ae7e:	f04f 0100 	mov.w	r1, #0
 800ae82:	f001 fb71 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800ae86:	e012      	b.n	800aeae <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800ae8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d10b      	bne.n	800aeae <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 800ae96:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800ae9a:	f04f 0101 	mov.w	r1, #1
 800ae9e:	f001 fb63 	bl	800c568 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 800aea2:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800aea6:	f04f 0100 	mov.w	r1, #0
 800aeaa:	f001 fb5d 	bl	800c568 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800aeae:	f107 0708 	add.w	r7, r7, #8
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop

0800aeb8 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08a      	sub	sp, #40	; 0x28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 800aec2:	f04f 0300 	mov.w	r3, #0
 800aec6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800aec8:	f04f 0300 	mov.w	r3, #0
 800aecc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 800aece:	f04f 0304 	mov.w	r3, #4
 800aed2:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 800aed4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800aed8:	f2c0 037a 	movt	r3, #122	; 0x7a
 800aedc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	889b      	ldrh	r3, [r3, #4]
 800aee2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 800aee4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aee6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800aeea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 800aeec:	f107 030c 	add.w	r3, r7, #12
 800aef0:	4618      	mov	r0, r3
 800aef2:	f001 f899 	bl	800c028 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	f64d 6383 	movw	r3, #56963	; 0xde83
 800af00:	f2c4 331b 	movt	r3, #17179	; 0x431b
 800af04:	fba3 1302 	umull	r1, r3, r3, r2
 800af08:	ea4f 4393 	mov.w	r3, r3, lsr #18
 800af0c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800af0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af12:	4313      	orrs	r3, r2
 800af14:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af1a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	b29b      	uxth	r3, r3
 800af22:	f023 0301 	bic.w	r3, r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800af2c:	f04f 0300 	mov.w	r3, #0
 800af30:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800af3a:	f2c0 0301 	movt	r3, #1
 800af3e:	429a      	cmp	r2, r3
 800af40:	d818      	bhi.n	800af74 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800af50:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 800af52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af54:	2b03      	cmp	r3, #3
 800af56:	d802      	bhi.n	800af5e <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800af58:	f04f 0304 	mov.w	r3, #4
 800af5c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800af5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800af60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af62:	4313      	orrs	r3, r2
 800af64:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800af66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af68:	f103 0301 	add.w	r3, r3, #1
 800af6c:	b29a      	uxth	r2, r3
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	841a      	strh	r2, [r3, #32]
 800af72:	e04b      	b.n	800b00c <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	88da      	ldrh	r2, [r3, #6]
 800af78:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d10a      	bne.n	800af96 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	681a      	ldr	r2, [r3, #0]
 800af84:	4613      	mov	r3, r2
 800af86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800af8a:	189b      	adds	r3, r3, r2
 800af8c:	69fa      	ldr	r2, [r7, #28]
 800af8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af92:	84bb      	strh	r3, [r7, #36]	; 0x24
 800af94:	e010      	b.n	800afb8 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	681a      	ldr	r2, [r3, #0]
 800af9a:	4613      	mov	r3, r2
 800af9c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800afa0:	189b      	adds	r3, r3, r2
 800afa2:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800afa6:	189b      	adds	r3, r3, r2
 800afa8:	69fa      	ldr	r2, [r7, #28]
 800afaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800afae:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800afb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afb6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 800afb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afba:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800afbe:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d103      	bne.n	800afce <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 800afc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc8:	f043 0301 	orr.w	r3, r3, #1
 800afcc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 800afce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800afd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afd2:	4313      	orrs	r3, r2
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afde:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 800afe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afe2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800afe6:	fb02 f203 	mul.w	r2, r2, r3
 800afea:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 800afee:	f2c1 0362 	movt	r3, #4194	; 0x1062
 800aff2:	fb83 1302 	smull	r1, r3, r3, r2
 800aff6:	ea4f 11a3 	mov.w	r1, r3, asr #6
 800affa:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800affe:	1acb      	subs	r3, r1, r3
 800b000:	b29b      	uxth	r3, r3
 800b002:	f103 0301 	add.w	r3, r3, #1
 800b006:	b29a      	uxth	r2, r3
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b010:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	881b      	ldrh	r3, [r3, #0]
 800b016:	b29b      	uxth	r3, r3
 800b018:	f043 0301 	orr.w	r3, r3, #1
 800b01c:	b29a      	uxth	r2, r3
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	881b      	ldrh	r3, [r3, #0]
 800b026:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 800b028:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b02a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b02e:	f023 030a 	bic.w	r3, r3, #10
 800b032:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	889a      	ldrh	r2, [r3, #4]
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	895b      	ldrh	r3, [r3, #10]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	b29a      	uxth	r2, r3
 800b040:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b042:	4313      	orrs	r3, r2
 800b044:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b04a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	899a      	ldrh	r2, [r3, #12]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	891b      	ldrh	r3, [r3, #8]
 800b054:	4313      	orrs	r3, r2
 800b056:	b29a      	uxth	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	811a      	strh	r2, [r3, #8]
}
 800b05c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 800b064:	b480      	push	{r7}
 800b066:	b083      	sub	sp, #12
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b072:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f04f 0200 	mov.w	r2, #0
 800b07a:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800b082:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f04f 0200 	mov.w	r2, #0
 800b08a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f04f 0200 	mov.w	r2, #0
 800b092:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b09a:	819a      	strh	r2, [r3, #12]
}
 800b09c:	f107 070c 	add.w	r7, r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bc80      	pop	{r7}
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop

0800b0a8 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b0b4:	78fb      	ldrb	r3, [r7, #3]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d008      	beq.n	800b0cc <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	881b      	ldrh	r3, [r3, #0]
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	f043 0301 	orr.w	r3, r3, #1
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	801a      	strh	r2, [r3, #0]
 800b0ca:	e007      	b.n	800b0dc <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f023 0301 	bic.w	r3, r3, #1
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	801a      	strh	r2, [r3, #0]
  }
}
 800b0dc:	f107 070c 	add.w	r7, r7, #12
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bc80      	pop	{r7}
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop

0800b0e8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b0f4:	78fb      	ldrb	r3, [r7, #3]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d008      	beq.n	800b10c <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	881b      	ldrh	r3, [r3, #0]
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b104:	b29a      	uxth	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	801a      	strh	r2, [r3, #0]
 800b10a:	e007      	b.n	800b11c <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	881b      	ldrh	r3, [r3, #0]
 800b110:	b29b      	uxth	r3, r3
 800b112:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b116:	b29a      	uxth	r2, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	801a      	strh	r2, [r3, #0]
  }
}
 800b11c:	f107 070c 	add.w	r7, r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	bc80      	pop	{r7}
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop

0800b128 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d008      	beq.n	800b14c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b144:	b29a      	uxth	r2, r3
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	e007      	b.n	800b15c <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	881b      	ldrh	r3, [r3, #0]
 800b150:	b29b      	uxth	r3, r3
 800b152:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b156:	b29a      	uxth	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	801a      	strh	r2, [r3, #0]
  }
}
 800b15c:	f107 070c 	add.w	r7, r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	bc80      	pop	{r7}
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop

0800b168 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
 800b170:	4613      	mov	r3, r2
 800b172:	460a      	mov	r2, r1
 800b174:	70fa      	strb	r2, [r7, #3]
 800b176:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 800b178:	78bb      	ldrb	r3, [r7, #2]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d004      	beq.n	800b188 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800b17e:	78fb      	ldrb	r3, [r7, #3]
 800b180:	f043 0301 	orr.w	r3, r3, #1
 800b184:	70fb      	strb	r3, [r7, #3]
 800b186:	e003      	b.n	800b190 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	f023 0301 	bic.w	r3, r3, #1
 800b18e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 800b190:	78fb      	ldrb	r3, [r7, #3]
 800b192:	b29a      	uxth	r2, r3
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	821a      	strh	r2, [r3, #16]
}
 800b198:	f107 070c 	add.w	r7, r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bc80      	pop	{r7}
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop

0800b1a4 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b1b0:	78fb      	ldrb	r3, [r7, #3]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d008      	beq.n	800b1c8 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	881b      	ldrh	r3, [r3, #0]
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	801a      	strh	r2, [r3, #0]
 800b1c6:	e007      	b.n	800b1d8 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	881b      	ldrh	r3, [r3, #0]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	801a      	strh	r2, [r3, #0]
  }
}
 800b1d8:	f107 070c 	add.w	r7, r7, #12
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bc80      	pop	{r7}
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop

0800b1e4 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b085      	sub	sp, #20
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 800b1f0:	f04f 0300 	mov.w	r3, #0
 800b1f4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	899b      	ldrh	r3, [r3, #12]
 800b1fa:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
 800b1fe:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b202:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	b29b      	uxth	r3, r3
 800b208:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	89fb      	ldrh	r3, [r7, #14]
 800b210:	4313      	orrs	r3, r2
 800b212:	b29b      	uxth	r3, r3
 800b214:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	89fa      	ldrh	r2, [r7, #14]
 800b21a:	819a      	strh	r2, [r3, #12]
}
 800b21c:	f107 0714 	add.w	r7, r7, #20
 800b220:	46bd      	mov	sp, r7
 800b222:	bc80      	pop	{r7}
 800b224:	4770      	bx	lr
 800b226:	bf00      	nop

0800b228 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b234:	78fb      	ldrb	r3, [r7, #3]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d008      	beq.n	800b24c <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	899b      	ldrh	r3, [r3, #12]
 800b23e:	b29b      	uxth	r3, r3
 800b240:	f043 0301 	orr.w	r3, r3, #1
 800b244:	b29a      	uxth	r2, r3
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	819a      	strh	r2, [r3, #12]
 800b24a:	e007      	b.n	800b25c <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	899b      	ldrh	r3, [r3, #12]
 800b250:	b29b      	uxth	r3, r3
 800b252:	f023 0301 	bic.w	r3, r3, #1
 800b256:	b29a      	uxth	r2, r3
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	819a      	strh	r2, [r3, #12]
  }
}
 800b25c:	f107 070c 	add.w	r7, r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	bc80      	pop	{r7}
 800b264:	4770      	bx	lr
 800b266:	bf00      	nop

0800b268 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	460b      	mov	r3, r1
 800b272:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b274:	78fb      	ldrb	r3, [r7, #3]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	881b      	ldrh	r3, [r3, #0]
 800b27e:	b29b      	uxth	r3, r3
 800b280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b284:	b29a      	uxth	r2, r3
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	801a      	strh	r2, [r3, #0]
 800b28a:	e007      	b.n	800b29c <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	881b      	ldrh	r3, [r3, #0]
 800b290:	b29b      	uxth	r3, r3
 800b292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b296:	b29a      	uxth	r2, r3
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	801a      	strh	r2, [r3, #0]
  }
}
 800b29c:	f107 070c 	add.w	r7, r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bc80      	pop	{r7}
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop

0800b2a8 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b083      	sub	sp, #12
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b2b4:	78fb      	ldrb	r3, [r7, #3]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	b29b      	uxth	r3, r3
 800b2c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	801a      	strh	r2, [r3, #0]
 800b2ce:	e009      	b.n	800b2e4 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	881b      	ldrh	r3, [r3, #0]
 800b2d4:	b29b      	uxth	r3, r3
 800b2d6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800b2da:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800b2de:	b29a      	uxth	r2, r3
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	801a      	strh	r2, [r3, #0]
  }
}
 800b2e4:	f107 070c 	add.w	r7, r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bc80      	pop	{r7}
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop

0800b2f0 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 800b2fc:	78fb      	ldrb	r3, [r7, #3]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d108      	bne.n	800b314 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	881b      	ldrh	r3, [r3, #0]
 800b306:	b29b      	uxth	r3, r3
 800b308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	801a      	strh	r2, [r3, #0]
 800b312:	e007      	b.n	800b324 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	881b      	ldrh	r3, [r3, #0]
 800b318:	b29b      	uxth	r3, r3
 800b31a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b31e:	b29a      	uxth	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	801a      	strh	r2, [r3, #0]
  }
}
 800b324:	f107 070c 	add.w	r7, r7, #12
 800b328:	46bd      	mov	sp, r7
 800b32a:	bc80      	pop	{r7}
 800b32c:	4770      	bx	lr
 800b32e:	bf00      	nop

0800b330 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800b33c:	887b      	ldrh	r3, [r7, #2]
 800b33e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b342:	d008      	beq.n	800b356 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	8b9b      	ldrh	r3, [r3, #28]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b34e:	b29a      	uxth	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	839a      	strh	r2, [r3, #28]
 800b354:	e007      	b.n	800b366 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	8b9b      	ldrh	r3, [r3, #28]
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b360:	b29a      	uxth	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	839a      	strh	r2, [r3, #28]
  }
}
 800b366:	f107 070c 	add.w	r7, r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bc80      	pop	{r7}
 800b36e:	4770      	bx	lr

0800b370 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	460b      	mov	r3, r1
 800b37a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800b37c:	887b      	ldrh	r3, [r7, #2]
 800b37e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b382:	d108      	bne.n	800b396 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	b29b      	uxth	r3, r3
 800b38a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b38e:	b29a      	uxth	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	801a      	strh	r2, [r3, #0]
 800b394:	e007      	b.n	800b3a6 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	801a      	strh	r2, [r3, #0]
  }
}
 800b3a6:	f107 070c 	add.w	r7, r7, #12
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bc80      	pop	{r7}
 800b3ae:	4770      	bx	lr

0800b3b0 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800b3bc:	887b      	ldrh	r3, [r7, #2]
 800b3be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b3c2:	d108      	bne.n	800b3d6 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	801a      	strh	r2, [r3, #0]
 800b3d4:	e007      	b.n	800b3e6 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	881b      	ldrh	r3, [r3, #0]
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	801a      	strh	r2, [r3, #0]
  }
}
 800b3e6:	f107 070c 	add.w	r7, r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bc80      	pop	{r7}
 800b3ee:	4770      	bx	lr

0800b3f0 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b3fc:	78fb      	ldrb	r3, [r7, #3]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d008      	beq.n	800b414 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	881b      	ldrh	r3, [r3, #0]
 800b406:	b29b      	uxth	r3, r3
 800b408:	f043 0310 	orr.w	r3, r3, #16
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	801a      	strh	r2, [r3, #0]
 800b412:	e007      	b.n	800b424 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	f023 0310 	bic.w	r3, r3, #16
 800b41e:	b29a      	uxth	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	801a      	strh	r2, [r3, #0]
  }
}
 800b424:	f107 070c 	add.w	r7, r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	bc80      	pop	{r7}
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop

0800b430 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 800b430:	b480      	push	{r7}
 800b432:	b083      	sub	sp, #12
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	460b      	mov	r3, r1
 800b43a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800b43c:	78fb      	ldrb	r3, [r7, #3]
 800b43e:	b29a      	uxth	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	821a      	strh	r2, [r3, #16]
}
 800b444:	f107 070c 	add.w	r7, r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	bc80      	pop	{r7}
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop

0800b450 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	8a1b      	ldrh	r3, [r3, #16]
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	b2db      	uxtb	r3, r3
}
 800b460:	4618      	mov	r0, r3
 800b462:	f107 070c 	add.w	r7, r7, #12
 800b466:	46bd      	mov	sp, r7
 800b468:	bc80      	pop	{r7}
 800b46a:	4770      	bx	lr

0800b46c <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	460b      	mov	r3, r1
 800b476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b478:	78fb      	ldrb	r3, [r7, #3]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d008      	beq.n	800b490 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	b29b      	uxth	r3, r3
 800b484:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b488:	b29a      	uxth	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	801a      	strh	r2, [r3, #0]
 800b48e:	e007      	b.n	800b4a0 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	881b      	ldrh	r3, [r3, #0]
 800b494:	b29b      	uxth	r3, r3
 800b496:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b49a:	b29a      	uxth	r2, r3
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	801a      	strh	r2, [r3, #0]
  }
}
 800b4a0:	f107 070c 	add.w	r7, r7, #12
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bc80      	pop	{r7}
 800b4a8:	4770      	bx	lr
 800b4aa:	bf00      	nop

0800b4ac <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 800b4b8:	887b      	ldrh	r3, [r7, #2]
 800b4ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4be:	d108      	bne.n	800b4d2 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	881b      	ldrh	r3, [r3, #0]
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	801a      	strh	r2, [r3, #0]
 800b4d0:	e007      	b.n	800b4e2 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	881b      	ldrh	r3, [r3, #0]
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4dc:	b29a      	uxth	r2, r3
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	801a      	strh	r2, [r3, #0]
  }
}
 800b4e2:	f107 070c 	add.w	r7, r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bc80      	pop	{r7}
 800b4ea:	4770      	bx	lr

0800b4ec <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b4f8:	78fb      	ldrb	r3, [r7, #3]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d008      	beq.n	800b510 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	881b      	ldrh	r3, [r3, #0]
 800b502:	b29b      	uxth	r3, r3
 800b504:	f043 0320 	orr.w	r3, r3, #32
 800b508:	b29a      	uxth	r2, r3
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	801a      	strh	r2, [r3, #0]
 800b50e:	e007      	b.n	800b520 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f023 0320 	bic.w	r3, r3, #32
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	801a      	strh	r2, [r3, #0]
  }
}
 800b520:	f107 070c 	add.w	r7, r7, #12
 800b524:	46bd      	mov	sp, r7
 800b526:	bc80      	pop	{r7}
 800b528:	4770      	bx	lr
 800b52a:	bf00      	nop

0800b52c <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	8b1b      	ldrh	r3, [r3, #24]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b53e:	b29b      	uxth	r3, r3
 800b540:	b2db      	uxtb	r3, r3
}
 800b542:	4618      	mov	r0, r3
 800b544:	f107 070c 	add.w	r7, r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	bc80      	pop	{r7}
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop

0800b550 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	460b      	mov	r3, r1
 800b55a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b55c:	78fb      	ldrb	r3, [r7, #3]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d008      	beq.n	800b574 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	889b      	ldrh	r3, [r3, #4]
 800b566:	b29b      	uxth	r3, r3
 800b568:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b56c:	b29a      	uxth	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	809a      	strh	r2, [r3, #4]
 800b572:	e007      	b.n	800b584 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	889b      	ldrh	r3, [r3, #4]
 800b578:	b29b      	uxth	r3, r3
 800b57a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b57e:	b29a      	uxth	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	809a      	strh	r2, [r3, #4]
  }
}
 800b584:	f107 070c 	add.w	r7, r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	bc80      	pop	{r7}
 800b58c:	4770      	bx	lr
 800b58e:	bf00      	nop

0800b590 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	460b      	mov	r3, r1
 800b59a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800b59c:	78fb      	ldrb	r3, [r7, #3]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d008      	beq.n	800b5b4 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	889b      	ldrh	r3, [r3, #4]
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5ac:	b29a      	uxth	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	809a      	strh	r2, [r3, #4]
 800b5b2:	e007      	b.n	800b5c4 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	889b      	ldrh	r3, [r3, #4]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b5be:	b29a      	uxth	r2, r3
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	809a      	strh	r2, [r3, #4]
  }
}
 800b5c4:	f107 070c 	add.w	r7, r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bc80      	pop	{r7}
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop

0800b5d0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	460b      	mov	r3, r1
 800b5da:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 800b5dc:	f04f 0300 	mov.w	r3, #0
 800b5e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 800b5e6:	78fa      	ldrb	r2, [r7, #3]
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	18d3      	adds	r3, r2, r3
 800b5ec:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	b29b      	uxth	r3, r3
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	f107 0714 	add.w	r7, r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bc80      	pop	{r7}
 800b5fe:	4770      	bx	lr

0800b600 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	4613      	mov	r3, r2
 800b60a:	460a      	mov	r2, r1
 800b60c:	807a      	strh	r2, [r7, #2]
 800b60e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 800b610:	787b      	ldrb	r3, [r7, #1]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d008      	beq.n	800b628 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	889b      	ldrh	r3, [r3, #4]
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	887b      	ldrh	r3, [r7, #2]
 800b61e:	4313      	orrs	r3, r2
 800b620:	b29a      	uxth	r2, r3
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	809a      	strh	r2, [r3, #4]
 800b626:	e00a      	b.n	800b63e <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	889b      	ldrh	r3, [r3, #4]
 800b62c:	b29a      	uxth	r2, r3
 800b62e:	887b      	ldrh	r3, [r7, #2]
 800b630:	ea6f 0303 	mvn.w	r3, r3
 800b634:	b29b      	uxth	r3, r3
 800b636:	4013      	ands	r3, r2
 800b638:	b29a      	uxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	809a      	strh	r2, [r3, #4]
  }
}
 800b63e:	f107 070c 	add.w	r7, r7, #12
 800b642:	46bd      	mov	sp, r7
 800b644:	bc80      	pop	{r7}
 800b646:	4770      	bx	lr

0800b648 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 800b648:	b480      	push	{r7}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
 800b650:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 800b658:	f04f 0300 	mov.w	r3, #0
 800b65c:	60fb      	str	r3, [r7, #12]
 800b65e:	f04f 0300 	mov.w	r3, #0
 800b662:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800b664:	f04f 0300 	mov.w	r3, #0
 800b668:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	8a9b      	ldrh	r3, [r3, #20]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	8b1b      	ldrh	r3, [r3, #24]
 800b676:	b29b      	uxth	r3, r3
 800b678:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800b680:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	4313      	orrs	r3, r2
 800b688:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b68c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 800b68e:	693a      	ldr	r2, [r7, #16]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	401a      	ands	r2, r3
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	d103      	bne.n	800b6a2 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800b69a:	f04f 0301 	mov.w	r3, #1
 800b69e:	75fb      	strb	r3, [r7, #23]
 800b6a0:	e002      	b.n	800b6a8 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 800b6a2:	f04f 0300 	mov.w	r3, #0
 800b6a6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800b6a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f107 071c 	add.w	r7, r7, #28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bc80      	pop	{r7}
 800b6b4:	4770      	bx	lr
 800b6b6:	bf00      	nop

0800b6b8 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b087      	sub	sp, #28
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800b6c0:	f04f 0300 	mov.w	r3, #0
 800b6c4:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	613b      	str	r3, [r7, #16]
 800b6cc:	f04f 0300 	mov.w	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	8a9b      	ldrh	r3, [r3, #20]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	8b1b      	ldrh	r3, [r3, #24]
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800b6e8:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 800b6ea:	693a      	ldr	r2, [r7, #16]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6f4:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 800b6f6:	697b      	ldr	r3, [r7, #20]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f107 071c 	add.w	r7, r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bc80      	pop	{r7}
 800b702:	4770      	bx	lr

0800b704 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800b70e:	f04f 0300 	mov.w	r3, #0
 800b712:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	613b      	str	r3, [r7, #16]
 800b71a:	f04f 0300 	mov.w	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800b72a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b732:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d004      	beq.n	800b744 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f103 0314 	add.w	r3, r3, #20
 800b740:	60fb      	str	r3, [r7, #12]
 800b742:	e007      	b.n	800b754 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b74a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f103 0318 	add.w	r3, r3, #24
 800b752:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d003      	beq.n	800b768 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800b760:	f04f 0301 	mov.w	r3, #1
 800b764:	75fb      	strb	r3, [r7, #23]
 800b766:	e002      	b.n	800b76e <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 800b768:	f04f 0300 	mov.w	r3, #0
 800b76c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b770:	4618      	mov	r0, r3
 800b772:	f107 071c 	add.w	r7, r7, #28
 800b776:	46bd      	mov	sp, r7
 800b778:	bc80      	pop	{r7}
 800b77a:	4770      	bx	lr

0800b77c <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800b786:	f04f 0300 	mov.w	r3, #0
 800b78a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b792:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	b29b      	uxth	r3, r3
 800b798:	ea6f 0303 	mvn.w	r3, r3
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	829a      	strh	r2, [r3, #20]
}
 800b7a2:	f107 0714 	add.w	r7, r7, #20
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bc80      	pop	{r7}
 800b7aa:	4770      	bx	lr

0800b7ac <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b085      	sub	sp, #20
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800b7b6:	f04f 0300 	mov.w	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800b7bc:	f04f 0300 	mov.w	r3, #0
 800b7c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b7c8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	889b      	ldrh	r3, [r3, #4]
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b7dc:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	8a9b      	ldrh	r3, [r3, #20]
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d006      	beq.n	800b7fc <I2C_GetITStatus+0x50>
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 800b7f4:	f04f 0301 	mov.w	r3, #1
 800b7f8:	73fb      	strb	r3, [r7, #15]
 800b7fa:	e002      	b.n	800b802 <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 800b7fc:	f04f 0300 	mov.w	r3, #0
 800b800:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 800b802:	7bfb      	ldrb	r3, [r7, #15]
}
 800b804:	4618      	mov	r0, r3
 800b806:	f107 0714 	add.w	r7, r7, #20
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bc80      	pop	{r7}
 800b80e:	4770      	bx	lr

0800b810 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b826:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	ea6f 0303 	mvn.w	r3, r3
 800b830:	b29a      	uxth	r2, r3
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	829a      	strh	r2, [r3, #20]
}
 800b836:	f107 0714 	add.w	r7, r7, #20
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bc80      	pop	{r7}
 800b83e:	4770      	bx	lr

0800b840 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 800b84a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b84e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b852:	88fa      	ldrh	r2, [r7, #6]
 800b854:	601a      	str	r2, [r3, #0]
}
 800b856:	f107 070c 	add.w	r7, r7, #12
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bc80      	pop	{r7}
 800b85e:	4770      	bx	lr

0800b860 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 800b860:	b480      	push	{r7}
 800b862:	b083      	sub	sp, #12
 800b864:	af00      	add	r7, sp, #0
 800b866:	4603      	mov	r3, r0
 800b868:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 800b86a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b86e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b872:	79fa      	ldrb	r2, [r7, #7]
 800b874:	605a      	str	r2, [r3, #4]
}
 800b876:	f107 070c 	add.w	r7, r7, #12
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bc80      	pop	{r7}
 800b87e:	4770      	bx	lr

0800b880 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 800b880:	b480      	push	{r7}
 800b882:	b083      	sub	sp, #12
 800b884:	af00      	add	r7, sp, #0
 800b886:	4603      	mov	r3, r0
 800b888:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 800b88a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b88e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b892:	88fa      	ldrh	r2, [r7, #6]
 800b894:	609a      	str	r2, [r3, #8]
}
 800b896:	f107 070c 	add.w	r7, r7, #12
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bc80      	pop	{r7}
 800b89e:	4770      	bx	lr

0800b8a0 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 800b8a4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b8a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8ac:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800b8b0:	601a      	str	r2, [r3, #0]
}
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bc80      	pop	{r7}
 800b8b6:	4770      	bx	lr

0800b8b8 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 800b8bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b8c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8c4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800b8c8:	601a      	str	r2, [r3, #0]
}
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bc80      	pop	{r7}
 800b8ce:	4770      	bx	lr

0800b8d0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 800b8da:	f04f 0300 	mov.w	r3, #0
 800b8de:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 800b8e0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800b8e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8e8:	68da      	ldr	r2, [r3, #12]
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	4013      	ands	r3, r2
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <IWDG_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800b8f2:	f04f 0301 	mov.w	r3, #1
 800b8f6:	73fb      	strb	r3, [r7, #15]
 800b8f8:	e002      	b.n	800b900 <IWDG_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800b8fa:	f04f 0300 	mov.w	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800b900:	7bfb      	ldrb	r3, [r7, #15]
}
 800b902:	4618      	mov	r0, r3
 800b904:	f107 0714 	add.w	r7, r7, #20
 800b908:	46bd      	mov	sp, r7
 800b90a:	bc80      	pop	{r7}
 800b90c:	4770      	bx	lr
 800b90e:	bf00      	nop

0800b910 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 800b914:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b918:	f04f 0101 	mov.w	r1, #1
 800b91c:	f000 fe24 	bl	800c568 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 800b920:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800b924:	f04f 0100 	mov.w	r1, #0
 800b928:	f000 fe1e 	bl	800c568 <RCC_APB1PeriphResetCmd>
}
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop

0800b930 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 800b930:	b480      	push	{r7}
 800b932:	b083      	sub	sp, #12
 800b934:	af00      	add	r7, sp, #0
 800b936:	4603      	mov	r3, r0
 800b938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 800b93a:	f04f 0320 	mov.w	r3, #32
 800b93e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b942:	79fa      	ldrb	r2, [r7, #7]
 800b944:	601a      	str	r2, [r3, #0]
}
 800b946:	f107 070c 	add.w	r7, r7, #12
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bc80      	pop	{r7}
 800b94e:	4770      	bx	lr

0800b950 <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800b958:	f04f 0300 	mov.w	r3, #0
 800b95c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 800b95e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b962:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 800b970:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800b97a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800b97e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b982:	68fa      	ldr	r2, [r7, #12]
 800b984:	601a      	str	r2, [r3, #0]
}
 800b986:	f107 0714 	add.w	r7, r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bc80      	pop	{r7}
 800b98e:	4770      	bx	lr

0800b990 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	4603      	mov	r3, r0
 800b998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 800b99a:	f04f 0310 	mov.w	r3, #16
 800b99e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b9a2:	79fa      	ldrb	r2, [r7, #7]
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	f107 070c 	add.w	r7, r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bc80      	pop	{r7}
 800b9ae:	4770      	bx	lr

0800b9b0 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 800b9ba:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800b9be:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b9c2:	79fa      	ldrb	r2, [r7, #7]
 800b9c4:	601a      	str	r2, [r3, #0]
}
 800b9c6:	f107 070c 	add.w	r7, r7, #12
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bc80      	pop	{r7}
 800b9ce:	4770      	bx	lr

0800b9d0 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b083      	sub	sp, #12
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 800b9da:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 800b9de:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800b9e2:	79fa      	ldrb	r2, [r7, #7]
 800b9e4:	601a      	str	r2, [r3, #0]
}
 800b9e6:	f107 070c 	add.w	r7, r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bc80      	pop	{r7}
 800b9ee:	4770      	bx	lr

0800b9f0 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	b083      	sub	sp, #12
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10c      	bne.n	800ba18 <PWR_MainRegulatorModeConfig+0x28>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 800b9fe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800ba02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba06:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800ba0a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba0e:	6812      	ldr	r2, [r2, #0]
 800ba10:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	e00b      	b.n	800ba30 <PWR_MainRegulatorModeConfig+0x40>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 800ba18:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800ba1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba20:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800ba24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba28:	6812      	ldr	r2, [r2, #0]
 800ba2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ba2e:	601a      	str	r2, [r3, #0]
  }
}
 800ba30:	f107 070c 	add.w	r7, r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bc80      	pop	{r7}
 800ba38:	4770      	bx	lr
 800ba3a:	bf00      	nop

0800ba3c <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 800ba46:	f04f 0324 	mov.w	r3, #36	; 0x24
 800ba4a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800ba4e:	79fa      	ldrb	r2, [r7, #7]
 800ba50:	601a      	str	r2, [r3, #0]
}
 800ba52:	f107 070c 	add.w	r7, r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bc80      	pop	{r7}
 800ba5a:	4770      	bx	lr

0800ba5c <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b085      	sub	sp, #20
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800ba68:	f04f 0300 	mov.w	r3, #0
 800ba6c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800ba6e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800ba72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f023 0303 	bic.w	r3, r3, #3
 800ba80:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 800ba82:	68fa      	ldr	r2, [r7, #12]
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	4313      	orrs	r3, r2
 800ba88:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800ba8a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800ba8e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba92:	68fa      	ldr	r2, [r7, #12]
 800ba94:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800ba96:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800ba9a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800ba9e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800baa2:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800baa6:	6912      	ldr	r2, [r2, #16]
 800baa8:	f042 0204 	orr.w	r2, r2, #4
 800baac:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800baae:	78fb      	ldrb	r3, [r7, #3]
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d101      	bne.n	800bab8 <PWR_EnterSTOPMode+0x5c>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800bab4:	bf30      	wfi
 800bab6:	e000      	b.n	800baba <PWR_EnterSTOPMode+0x5e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 800bab8:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800baba:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800babe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800bac2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800bac6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800baca:	6912      	ldr	r2, [r2, #16]
 800bacc:	f022 0204 	bic.w	r2, r2, #4
 800bad0:	611a      	str	r2, [r3, #16]
}
 800bad2:	f107 0714 	add.w	r7, r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bc80      	pop	{r7}
 800bada:	4770      	bx	lr

0800badc <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 800badc:	b480      	push	{r7}
 800bade:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 800bae0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800bae4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bae8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800baec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800baf0:	6812      	ldr	r2, [r2, #0]
 800baf2:	f042 0204 	orr.w	r2, r2, #4
 800baf6:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 800baf8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800bafc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb00:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800bb04:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb08:	6812      	ldr	r2, [r2, #0]
 800bb0a:	f042 0202 	orr.w	r2, r2, #2
 800bb0e:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 800bb10:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800bb14:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800bb18:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 800bb1c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 800bb20:	6912      	ldr	r2, [r2, #16]
 800bb22:	f042 0204 	orr.w	r2, r2, #4
 800bb26:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 800bb28:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bc80      	pop	{r7}
 800bb2e:	4770      	bx	lr

0800bb30 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800bb3e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800bb42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4013      	ands	r3, r2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d003      	beq.n	800bb58 <PWR_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800bb50:	f04f 0301 	mov.w	r3, #1
 800bb54:	73fb      	strb	r3, [r7, #15]
 800bb56:	e002      	b.n	800bb5e <PWR_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800bb58:	f04f 0300 	mov.w	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800bb5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	f107 0714 	add.w	r7, r7, #20
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bc80      	pop	{r7}
 800bb6a:	4770      	bx	lr

0800bb6c <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 800bb74:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800bb78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb7c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 800bb80:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb84:	6811      	ldr	r1, [r2, #0]
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800bb8c:	430a      	orrs	r2, r1
 800bb8e:	601a      	str	r2, [r3, #0]
}
 800bb90:	f107 070c 	add.w	r7, r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bc80      	pop	{r7}
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop

0800bb9c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800bba0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bba4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bba8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bbac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bbb0:	6812      	ldr	r2, [r2, #0]
 800bbb2:	f042 0201 	orr.w	r2, r2, #1
 800bbb6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800bbb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bbbc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bbc0:	f04f 0200 	mov.w	r2, #0
 800bbc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800bbc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bbca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bbce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bbd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bbd6:	6812      	ldr	r2, [r2, #0]
 800bbd8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800bbdc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bbe0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800bbe2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bbe6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bbea:	f243 0210 	movw	r2, #12304	; 0x3010
 800bbee:	f2c2 4200 	movt	r2, #9216	; 0x2400
 800bbf2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800bbf4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bbf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bbfc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800bc00:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800bc04:	6812      	ldr	r2, [r2, #0]
 800bc06:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bc0a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800bc0c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bc10:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc14:	f04f 0200 	mov.w	r2, #0
 800bc18:	60da      	str	r2, [r3, #12]
}
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bc80      	pop	{r7}
 800bc1e:	4770      	bx	lr

0800bc20 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	4603      	mov	r3, r0
 800bc28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800bc2a:	f643 0302 	movw	r3, #14338	; 0x3802
 800bc2e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc32:	f04f 0200 	mov.w	r2, #0
 800bc36:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 800bc38:	f643 0302 	movw	r3, #14338	; 0x3802
 800bc3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bc40:	79fa      	ldrb	r2, [r7, #7]
 800bc42:	701a      	strb	r2, [r3, #0]
}
 800bc44:	f107 070c 	add.w	r7, r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bc80      	pop	{r7}
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop

0800bc50 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800bc5c:	f04f 0300 	mov.w	r3, #0
 800bc60:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800bc62:	f04f 0300 	mov.w	r3, #0
 800bc66:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800bc68:	f04f 0031 	mov.w	r0, #49	; 0x31
 800bc6c:	f000 fdd2 	bl	800c814 <RCC_GetFlagStatus>
 800bc70:	4603      	mov	r3, r0
 800bc72:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	f103 0301 	add.w	r3, r3, #1
 800bc7a:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800bc82:	d002      	beq.n	800bc8a <RCC_WaitForHSEStartUp+0x3a>
 800bc84:	79bb      	ldrb	r3, [r7, #6]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d0ee      	beq.n	800bc68 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800bc8a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800bc8e:	f000 fdc1 	bl	800c814 <RCC_GetFlagStatus>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d003      	beq.n	800bca0 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 800bc98:	f04f 0301 	mov.w	r3, #1
 800bc9c:	71fb      	strb	r3, [r7, #7]
 800bc9e:	e002      	b.n	800bca6 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 800bca0:	f04f 0300 	mov.w	r3, #0
 800bca4:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 800bca6:	79fb      	ldrb	r3, [r7, #7]
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f107 0708 	add.w	r7, r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
 800bcb2:	bf00      	nop

0800bcb4 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800bcbe:	f04f 0300 	mov.w	r3, #0
 800bcc2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 800bcc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bcc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 800bcd8:	79fb      	ldrb	r3, [r7, #7]
 800bcda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800bcde:	68fa      	ldr	r2, [r7, #12]
 800bce0:	4313      	orrs	r3, r2
 800bce2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 800bce4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bce8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	601a      	str	r2, [r3, #0]
}
 800bcf0:	f107 0714 	add.w	r7, r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bc80      	pop	{r7}
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop

0800bcfc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	4603      	mov	r3, r0
 800bd04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800bd0e:	79fa      	ldrb	r2, [r7, #7]
 800bd10:	601a      	str	r2, [r3, #0]
}
 800bd12:	f107 070c 	add.w	r7, r7, #12
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bc80      	pop	{r7}
 800bd1a:	4770      	bx	lr

0800bd1c <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	4603      	mov	r3, r0
 800bd24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800bd26:	f643 0370 	movw	r3, #14448	; 0x3870
 800bd2a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd2e:	f04f 0200 	mov.w	r2, #0
 800bd32:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800bd34:	f643 0370 	movw	r3, #14448	; 0x3870
 800bd38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd3c:	f04f 0200 	mov.w	r2, #0
 800bd40:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d002      	beq.n	800bd4e <RCC_LSEConfig+0x32>
 800bd48:	2b04      	cmp	r3, #4
 800bd4a:	d008      	beq.n	800bd5e <RCC_LSEConfig+0x42>
 800bd4c:	e00f      	b.n	800bd6e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800bd4e:	f643 0370 	movw	r3, #14448	; 0x3870
 800bd52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd56:	f04f 0201 	mov.w	r2, #1
 800bd5a:	701a      	strb	r2, [r3, #0]
      break;
 800bd5c:	e008      	b.n	800bd70 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800bd5e:	f643 0370 	movw	r3, #14448	; 0x3870
 800bd62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bd66:	f04f 0205 	mov.w	r2, #5
 800bd6a:	701a      	strb	r2, [r3, #0]
      break;
 800bd6c:	e000      	b.n	800bd70 <RCC_LSEConfig+0x54>
    default:
      break;
 800bd6e:	bf00      	nop
  }
}
 800bd70:	f107 070c 	add.w	r7, r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bc80      	pop	{r7}
 800bd78:	4770      	bx	lr
 800bd7a:	bf00      	nop

0800bd7c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b083      	sub	sp, #12
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	4603      	mov	r3, r0
 800bd84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 800bd86:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800bd8a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800bd8e:	79fa      	ldrb	r2, [r7, #7]
 800bd90:	601a      	str	r2, [r3, #0]
}
 800bd92:	f107 070c 	add.w	r7, r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bc80      	pop	{r7}
 800bd9a:	4770      	bx	lr

0800bd9c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]
 800bda8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800bdaa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bdae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bdb2:	687a      	ldr	r2, [r7, #4]
 800bdb4:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800bdb8:	68ba      	ldr	r2, [r7, #8]
 800bdba:	4311      	orrs	r1, r2
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bdc2:	f102 32ff 	add.w	r2, r2, #4294967295
 800bdc6:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800bdca:	4311      	orrs	r1, r2
 800bdcc:	68fa      	ldr	r2, [r7, #12]
 800bdce:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 800bdd0:	69ba      	ldr	r2, [r7, #24]
 800bdd2:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800bdd6:	430a      	orrs	r2, r1
 800bdd8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 800bdda:	f107 0714 	add.w	r7, r7, #20
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bc80      	pop	{r7}
 800bde2:	4770      	bx	lr

0800bde4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b083      	sub	sp, #12
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 800bdee:	f04f 0360 	mov.w	r3, #96	; 0x60
 800bdf2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800bdf6:	79fa      	ldrb	r2, [r7, #7]
 800bdf8:	601a      	str	r2, [r3, #0]
}
 800bdfa:	f107 070c 	add.w	r7, r7, #12
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bc80      	pop	{r7}
 800be02:	4770      	bx	lr

0800be04 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 800be04:	b480      	push	{r7}
 800be06:	b083      	sub	sp, #12
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 800be0e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800be12:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	ea4f 1182 	mov.w	r1, r2, lsl #6
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	ea4f 7202 	mov.w	r2, r2, lsl #28
 800be22:	430a      	orrs	r2, r1
 800be24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800be28:	f107 070c 	add.w	r7, r7, #12
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bc80      	pop	{r7}
 800be30:	4770      	bx	lr
 800be32:	bf00      	nop

0800be34 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
 800be3a:	4603      	mov	r3, r0
 800be3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800be3e:	f04f 0368 	mov.w	r3, #104	; 0x68
 800be42:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800be46:	79fa      	ldrb	r2, [r7, #7]
 800be48:	601a      	str	r2, [r3, #0]
}
 800be4a:	f107 070c 	add.w	r7, r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	bc80      	pop	{r7}
 800be52:	4770      	bx	lr

0800be54 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	4603      	mov	r3, r0
 800be5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800be5e:	f04f 034c 	mov.w	r3, #76	; 0x4c
 800be62:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800be66:	79fa      	ldrb	r2, [r7, #7]
 800be68:	601a      	str	r2, [r3, #0]
}
 800be6a:	f107 070c 	add.w	r7, r7, #12
 800be6e:	46bd      	mov	sp, r7
 800be70:	bc80      	pop	{r7}
 800be72:	4770      	bx	lr

0800be74 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800be7e:	f04f 0300 	mov.w	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 800be84:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800be88:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 800be96:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	4313      	orrs	r3, r2
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	4313      	orrs	r3, r2
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800bea4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bea8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800beac:	68fa      	ldr	r2, [r7, #12]
 800beae:	609a      	str	r2, [r3, #8]
}
 800beb0:	f107 0714 	add.w	r7, r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bc80      	pop	{r7}
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop

0800bebc <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b085      	sub	sp, #20
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bec6:	f04f 0300 	mov.w	r3, #0
 800beca:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 800becc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bed0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800bede:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	68fa      	ldr	r2, [r7, #12]
 800bee8:	4313      	orrs	r3, r2
 800beea:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 800beec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bef0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	609a      	str	r2, [r3, #8]
}
 800bef8:	f107 0714 	add.w	r7, r7, #20
 800befc:	46bd      	mov	sp, r7
 800befe:	bc80      	pop	{r7}
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop

0800bf04 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bf0c:	f04f 0300 	mov.w	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 800bf12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f023 0303 	bic.w	r3, r3, #3
 800bf24:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800bf2e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf32:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	609a      	str	r2, [r3, #8]
}
 800bf3a:	f107 0714 	add.w	r7, r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bc80      	pop	{r7}
 800bf42:	4770      	bx	lr

0800bf44 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 800bf44:	b480      	push	{r7}
 800bf46:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 800bf48:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf4c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf50:	689b      	ldr	r3, [r3, #8]
 800bf52:	b2db      	uxtb	r3, r3
 800bf54:	f003 030c 	and.w	r3, r3, #12
 800bf58:	b2db      	uxtb	r3, r3
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bc80      	pop	{r7}
 800bf60:	4770      	bx	lr
 800bf62:	bf00      	nop

0800bf64 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b085      	sub	sp, #20
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bf6c:	f04f 0300 	mov.w	r3, #0
 800bf70:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800bf72:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf76:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf7a:	689b      	ldr	r3, [r3, #8]
 800bf7c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf84:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800bf86:	68fa      	ldr	r2, [r7, #12]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800bf8e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bf92:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	609a      	str	r2, [r3, #8]
}
 800bf9a:	f107 0714 	add.w	r7, r7, #20
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	bc80      	pop	{r7}
 800bfa2:	4770      	bx	lr

0800bfa4 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b085      	sub	sp, #20
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bfac:	f04f 0300 	mov.w	r3, #0
 800bfb0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800bfb2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bfb6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bfba:	689b      	ldr	r3, [r3, #8]
 800bfbc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800bfc4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800bfce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bfd2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	609a      	str	r2, [r3, #8]
}
 800bfda:	f107 0714 	add.w	r7, r7, #20
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bc80      	pop	{r7}
 800bfe2:	4770      	bx	lr

0800bfe4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b085      	sub	sp, #20
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800bff2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bff6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c004:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	4313      	orrs	r3, r2
 800c010:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800c012:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c016:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	609a      	str	r2, [r3, #8]
}
 800c01e:	f107 0714 	add.w	r7, r7, #20
 800c022:	46bd      	mov	sp, r7
 800c024:	bc80      	pop	{r7}
 800c026:	4770      	bx	lr

0800c028 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800c028:	b480      	push	{r7}
 800c02a:	b089      	sub	sp, #36	; 0x24
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800c030:	f04f 0300 	mov.w	r3, #0
 800c034:	61bb      	str	r3, [r7, #24]
 800c036:	f04f 0300 	mov.w	r3, #0
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	f04f 0300 	mov.w	r3, #0
 800c040:	61fb      	str	r3, [r7, #28]
 800c042:	f04f 0302 	mov.w	r3, #2
 800c046:	613b      	str	r3, [r7, #16]
 800c048:	f04f 0300 	mov.w	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	f04f 0302 	mov.w	r3, #2
 800c052:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800c054:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c058:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	f003 030c 	and.w	r3, r3, #12
 800c062:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800c064:	69bb      	ldr	r3, [r7, #24]
 800c066:	2b04      	cmp	r3, #4
 800c068:	d00a      	beq.n	800c080 <RCC_GetClocksFreq+0x58>
 800c06a:	2b08      	cmp	r3, #8
 800c06c:	d00f      	beq.n	800c08e <RCC_GetClocksFreq+0x66>
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d160      	bne.n	800c134 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c078:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800c07c:	6013      	str	r3, [r2, #0]
      break;
 800c07e:	e060      	b.n	800c142 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800c086:	f2c0 037a 	movt	r3, #122	; 0x7a
 800c08a:	6013      	str	r3, [r2, #0]
      break;
 800c08c:	e059      	b.n	800c142 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800c08e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c092:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c09c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 800c0a0:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c0a2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c0a6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0b0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d014      	beq.n	800c0e2 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800c0b8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800c0bc:	f2c0 037a 	movt	r3, #122	; 0x7a
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0c6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c0ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c0ce:	6859      	ldr	r1, [r3, #4]
 800c0d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c0d4:	400b      	ands	r3, r1
 800c0d6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c0da:	fb03 f302 	mul.w	r3, r3, r2
 800c0de:	61fb      	str	r3, [r7, #28]
 800c0e0:	e013      	b.n	800c10a <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800c0e2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c0e6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	fbb3 f2f2 	udiv	r2, r3, r2
 800c0f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c0f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c0f8:	6859      	ldr	r1, [r3, #4]
 800c0fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c0fe:	400b      	ands	r3, r1
 800c100:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c104:	fb03 f302 	mul.w	r3, r3, r2
 800c108:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800c10a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c10e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c118:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800c11c:	f103 0301 	add.w	r3, r3, #1
 800c120:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c124:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800c126:	69fa      	ldr	r2, [r7, #28]
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	fbb2 f2f3 	udiv	r2, r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	601a      	str	r2, [r3, #0]
      break;
 800c132:	e006      	b.n	800c142 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800c13a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800c13e:	6013      	str	r3, [r2, #0]
      break;
 800c140:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800c142:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c146:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c150:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c158:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800c15a:	f240 0350 	movw	r3, #80	; 0x50
 800c15e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c162:	69ba      	ldr	r2, [r7, #24]
 800c164:	189b      	adds	r3, r3, r2
 800c166:	781b      	ldrb	r3, [r3, #0]
 800c168:	b2db      	uxtb	r3, r3
 800c16a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681a      	ldr	r2, [r3, #0]
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	fa22 f203 	lsr.w	r2, r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800c17a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c17e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800c188:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800c18a:	69bb      	ldr	r3, [r7, #24]
 800c18c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 800c190:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800c192:	f240 0350 	movw	r3, #80	; 0x50
 800c196:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c19a:	69ba      	ldr	r2, [r7, #24]
 800c19c:	189b      	adds	r3, r3, r2
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	fa22 f203 	lsr.w	r2, r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 800c1b2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c1b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c1ba:	689b      	ldr	r3, [r3, #8]
 800c1bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c1c0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800c1c2:	69bb      	ldr	r3, [r7, #24]
 800c1c4:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800c1c8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800c1ca:	f240 0350 	movw	r3, #80	; 0x50
 800c1ce:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800c1d2:	69ba      	ldr	r2, [r7, #24]
 800c1d4:	189b      	adds	r3, r3, r2
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	fa22 f203 	lsr.w	r2, r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	60da      	str	r2, [r3, #12]
}
 800c1ea:	f107 0724 	add.w	r7, r7, #36	; 0x24
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bc80      	pop	{r7}
 800c1f2:	4770      	bx	lr

0800c1f4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b085      	sub	sp, #20
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800c1fc:	f04f 0300 	mov.w	r3, #0
 800c200:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c20c:	d117      	bne.n	800c23e <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 800c20e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c212:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c220:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	4313      	orrs	r3, r2
 800c230:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 800c232:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c236:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c23a:	68fa      	ldr	r2, [r7, #12]
 800c23c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800c23e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c242:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c246:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c24a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c24e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	ea4f 5202 	mov.w	r2, r2, lsl #20
 800c256:	ea4f 5212 	mov.w	r2, r2, lsr #20
 800c25a:	430a      	orrs	r2, r1
 800c25c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c25e:	f107 0714 	add.w	r7, r7, #20
 800c262:	46bd      	mov	sp, r7
 800c264:	bc80      	pop	{r7}
 800c266:	4770      	bx	lr

0800c268 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800c272:	f640 633c 	movw	r3, #3644	; 0xe3c
 800c276:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c27a:	79fa      	ldrb	r2, [r7, #7]
 800c27c:	601a      	str	r2, [r3, #0]
}
 800c27e:	f107 070c 	add.w	r7, r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	bc80      	pop	{r7}
 800c286:	4770      	bx	lr

0800c288 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	4603      	mov	r3, r0
 800c290:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 800c292:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 800c296:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c29a:	79fa      	ldrb	r2, [r7, #7]
 800c29c:	601a      	str	r2, [r3, #0]
}
 800c29e:	f107 070c 	add.w	r7, r7, #12
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bc80      	pop	{r7}
 800c2a6:	4770      	bx	lr

0800c2a8 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 800c2b0:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 800c2b4:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	601a      	str	r2, [r3, #0]
}
 800c2bc:	f107 070c 	add.w	r7, r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bc80      	pop	{r7}
 800c2c4:	4770      	bx	lr
 800c2c6:	bf00      	nop

0800c2c8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b083      	sub	sp, #12
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d00c      	beq.n	800c2f4 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800c2da:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c2de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c2e2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c2e6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c2ea:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c2ec:	687a      	ldr	r2, [r7, #4]
 800c2ee:	430a      	orrs	r2, r1
 800c2f0:	631a      	str	r2, [r3, #48]	; 0x30
 800c2f2:	e00d      	b.n	800c310 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800c2f4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c2f8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c2fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c300:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c304:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	ea6f 0202 	mvn.w	r2, r2
 800c30c:	400a      	ands	r2, r1
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800c310:	f107 070c 	add.w	r7, r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	bc80      	pop	{r7}
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop

0800c31c <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	460b      	mov	r3, r1
 800c326:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c328:	78fb      	ldrb	r3, [r7, #3]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00c      	beq.n	800c348 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800c32e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c332:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c336:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c33a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c33e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	430a      	orrs	r2, r1
 800c344:	635a      	str	r2, [r3, #52]	; 0x34
 800c346:	e00d      	b.n	800c364 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 800c348:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c34c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c350:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c354:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c358:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	ea6f 0202 	mvn.w	r2, r2
 800c360:	400a      	ands	r2, r1
 800c362:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 800c364:	f107 070c 	add.w	r7, r7, #12
 800c368:	46bd      	mov	sp, r7
 800c36a:	bc80      	pop	{r7}
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop

0800c370 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800c370:	b480      	push	{r7}
 800c372:	b083      	sub	sp, #12
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	460b      	mov	r3, r1
 800c37a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d00c      	beq.n	800c39c <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 800c382:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c386:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c38a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c38e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c392:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	430a      	orrs	r2, r1
 800c398:	639a      	str	r2, [r3, #56]	; 0x38
 800c39a:	e00d      	b.n	800c3b8 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800c39c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3a4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c3a8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c3ac:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	ea6f 0202 	mvn.w	r2, r2
 800c3b4:	400a      	ands	r2, r1
 800c3b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 800c3b8:	f107 070c 	add.w	r7, r7, #12
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bc80      	pop	{r7}
 800c3c0:	4770      	bx	lr
 800c3c2:	bf00      	nop

0800c3c4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c3d0:	78fb      	ldrb	r3, [r7, #3]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00c      	beq.n	800c3f0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800c3d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c3e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c3e6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	641a      	str	r2, [r3, #64]	; 0x40
 800c3ee:	e00d      	b.n	800c40c <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800c3f0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3f8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c3fc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c400:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	ea6f 0202 	mvn.w	r2, r2
 800c408:	400a      	ands	r2, r1
 800c40a:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800c40c:	f107 070c 	add.w	r7, r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	bc80      	pop	{r7}
 800c414:	4770      	bx	lr
 800c416:	bf00      	nop

0800c418 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800c418:	b480      	push	{r7}
 800c41a:	b083      	sub	sp, #12
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	460b      	mov	r3, r1
 800c422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d00c      	beq.n	800c444 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800c42a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c42e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c432:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c436:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c43a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	430a      	orrs	r2, r1
 800c440:	645a      	str	r2, [r3, #68]	; 0x44
 800c442:	e00d      	b.n	800c460 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800c444:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c448:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c44c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c450:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c454:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	ea6f 0202 	mvn.w	r2, r2
 800c45c:	400a      	ands	r2, r1
 800c45e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 800c460:	f107 070c 	add.w	r7, r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	bc80      	pop	{r7}
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop

0800c46c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b083      	sub	sp, #12
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	460b      	mov	r3, r1
 800c476:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c478:	78fb      	ldrb	r3, [r7, #3]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00c      	beq.n	800c498 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 800c47e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c482:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c486:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c48a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c48e:	6911      	ldr	r1, [r2, #16]
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	430a      	orrs	r2, r1
 800c494:	611a      	str	r2, [r3, #16]
 800c496:	e00d      	b.n	800c4b4 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 800c498:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c49c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c4a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c4a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c4a8:	6911      	ldr	r1, [r2, #16]
 800c4aa:	687a      	ldr	r2, [r7, #4]
 800c4ac:	ea6f 0202 	mvn.w	r2, r2
 800c4b0:	400a      	ands	r2, r1
 800c4b2:	611a      	str	r2, [r3, #16]
  }
}
 800c4b4:	f107 070c 	add.w	r7, r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	bc80      	pop	{r7}
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop

0800c4c0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	b083      	sub	sp, #12
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	460b      	mov	r3, r1
 800c4ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c4cc:	78fb      	ldrb	r3, [r7, #3]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d00c      	beq.n	800c4ec <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 800c4d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c4d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c4da:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c4de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c4e2:	6951      	ldr	r1, [r2, #20]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	430a      	orrs	r2, r1
 800c4e8:	615a      	str	r2, [r3, #20]
 800c4ea:	e00d      	b.n	800c508 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 800c4ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c4f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c4f4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c4f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c4fc:	6951      	ldr	r1, [r2, #20]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	ea6f 0202 	mvn.w	r2, r2
 800c504:	400a      	ands	r2, r1
 800c506:	615a      	str	r2, [r3, #20]
  }
}
 800c508:	f107 070c 	add.w	r7, r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bc80      	pop	{r7}
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop

0800c514 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	460b      	mov	r3, r1
 800c51e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00c      	beq.n	800c540 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 800c526:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c52a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c52e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c532:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c536:	6991      	ldr	r1, [r2, #24]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	430a      	orrs	r2, r1
 800c53c:	619a      	str	r2, [r3, #24]
 800c53e:	e00d      	b.n	800c55c <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 800c540:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c544:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c548:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c54c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c550:	6991      	ldr	r1, [r2, #24]
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	ea6f 0202 	mvn.w	r2, r2
 800c558:	400a      	ands	r2, r1
 800c55a:	619a      	str	r2, [r3, #24]
  }
}
 800c55c:	f107 070c 	add.w	r7, r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	bc80      	pop	{r7}
 800c564:	4770      	bx	lr
 800c566:	bf00      	nop

0800c568 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	460b      	mov	r3, r1
 800c572:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c574:	78fb      	ldrb	r3, [r7, #3]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00c      	beq.n	800c594 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 800c57a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c57e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c582:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c586:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c58a:	6a11      	ldr	r1, [r2, #32]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	430a      	orrs	r2, r1
 800c590:	621a      	str	r2, [r3, #32]
 800c592:	e00d      	b.n	800c5b0 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 800c594:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c598:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c59c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c5a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c5a4:	6a11      	ldr	r1, [r2, #32]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	ea6f 0202 	mvn.w	r2, r2
 800c5ac:	400a      	ands	r2, r1
 800c5ae:	621a      	str	r2, [r3, #32]
  }
}
 800c5b0:	f107 070c 	add.w	r7, r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bc80      	pop	{r7}
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop

0800c5bc <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c5c8:	78fb      	ldrb	r3, [r7, #3]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00c      	beq.n	800c5e8 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 800c5ce:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c5d6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c5da:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c5de:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	625a      	str	r2, [r3, #36]	; 0x24
 800c5e6:	e00d      	b.n	800c604 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 800c5e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c5ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c5f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c5f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c5f8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	ea6f 0202 	mvn.w	r2, r2
 800c600:	400a      	ands	r2, r1
 800c602:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c604:	f107 070c 	add.w	r7, r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	bc80      	pop	{r7}
 800c60c:	4770      	bx	lr
 800c60e:	bf00      	nop

0800c610 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	460b      	mov	r3, r1
 800c61a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c61c:	78fb      	ldrb	r3, [r7, #3]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00c      	beq.n	800c63c <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 800c622:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c626:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c62a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c62e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c632:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800c634:	687a      	ldr	r2, [r7, #4]
 800c636:	430a      	orrs	r2, r1
 800c638:	651a      	str	r2, [r3, #80]	; 0x50
 800c63a:	e00d      	b.n	800c658 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 800c63c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c640:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c644:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c648:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c64c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	ea6f 0202 	mvn.w	r2, r2
 800c654:	400a      	ands	r2, r1
 800c656:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 800c658:	f107 070c 	add.w	r7, r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bc80      	pop	{r7}
 800c660:	4770      	bx	lr
 800c662:	bf00      	nop

0800c664 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00c      	beq.n	800c690 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 800c676:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c67a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c67e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c682:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c686:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	430a      	orrs	r2, r1
 800c68c:	655a      	str	r2, [r3, #84]	; 0x54
 800c68e:	e00d      	b.n	800c6ac <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 800c690:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c694:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c698:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c69c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c6a0:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	ea6f 0202 	mvn.w	r2, r2
 800c6a8:	400a      	ands	r2, r1
 800c6aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 800c6ac:	f107 070c 	add.w	r7, r7, #12
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bc80      	pop	{r7}
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop

0800c6b8 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c6c4:	78fb      	ldrb	r3, [r7, #3]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00c      	beq.n	800c6e4 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 800c6ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c6ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c6d2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c6d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c6da:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	430a      	orrs	r2, r1
 800c6e0:	659a      	str	r2, [r3, #88]	; 0x58
 800c6e2:	e00d      	b.n	800c700 <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 800c6e4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c6e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c6ec:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c6f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c6f4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800c6f6:	687a      	ldr	r2, [r7, #4]
 800c6f8:	ea6f 0202 	mvn.w	r2, r2
 800c6fc:	400a      	ands	r2, r1
 800c6fe:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 800c700:	f107 070c 	add.w	r7, r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	bc80      	pop	{r7}
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop

0800c70c <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	460b      	mov	r3, r1
 800c716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c718:	78fb      	ldrb	r3, [r7, #3]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00c      	beq.n	800c738 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 800c71e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c722:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c726:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c72a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c72e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	430a      	orrs	r2, r1
 800c734:	661a      	str	r2, [r3, #96]	; 0x60
 800c736:	e00d      	b.n	800c754 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 800c738:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c73c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c740:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c744:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c748:	6e11      	ldr	r1, [r2, #96]	; 0x60
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	ea6f 0202 	mvn.w	r2, r2
 800c750:	400a      	ands	r2, r1
 800c752:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 800c754:	f107 070c 	add.w	r7, r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	bc80      	pop	{r7}
 800c75c:	4770      	bx	lr
 800c75e:	bf00      	nop

0800c760 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	460b      	mov	r3, r1
 800c76a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d00c      	beq.n	800c78c <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 800c772:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c776:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c77a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c77e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c782:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	430a      	orrs	r2, r1
 800c788:	665a      	str	r2, [r3, #100]	; 0x64
 800c78a:	e00d      	b.n	800c7a8 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 800c78c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c790:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c794:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c798:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c79c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	ea6f 0202 	mvn.w	r2, r2
 800c7a4:	400a      	ands	r2, r1
 800c7a6:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 800c7a8:	f107 070c 	add.w	r7, r7, #12
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bc80      	pop	{r7}
 800c7b0:	4770      	bx	lr
 800c7b2:	bf00      	nop

0800c7b4 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b083      	sub	sp, #12
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	4602      	mov	r2, r0
 800c7bc:	460b      	mov	r3, r1
 800c7be:	71fa      	strb	r2, [r7, #7]
 800c7c0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c7c2:	79bb      	ldrb	r3, [r7, #6]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d00e      	beq.n	800c7e6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 800c7c8:	f643 030d 	movw	r3, #14349	; 0x380d
 800c7cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c7d0:	f643 020d 	movw	r2, #14349	; 0x380d
 800c7d4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c7d8:	7812      	ldrb	r2, [r2, #0]
 800c7da:	b2d1      	uxtb	r1, r2
 800c7dc:	79fa      	ldrb	r2, [r7, #7]
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	b2d2      	uxtb	r2, r2
 800c7e2:	701a      	strb	r2, [r3, #0]
 800c7e4:	e010      	b.n	800c808 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 800c7e6:	f643 030d 	movw	r3, #14349	; 0x380d
 800c7ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c7ee:	f643 020d 	movw	r2, #14349	; 0x380d
 800c7f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c7f6:	7812      	ldrb	r2, [r2, #0]
 800c7f8:	b2d1      	uxtb	r1, r2
 800c7fa:	79fa      	ldrb	r2, [r7, #7]
 800c7fc:	ea6f 0202 	mvn.w	r2, r2
 800c800:	b2d2      	uxtb	r2, r2
 800c802:	400a      	ands	r2, r1
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	701a      	strb	r2, [r3, #0]
  }
}
 800c808:	f107 070c 	add.w	r7, r7, #12
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bc80      	pop	{r7}
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop

0800c814 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800c814:	b480      	push	{r7}
 800c816:	b087      	sub	sp, #28
 800c818:	af00      	add	r7, sp, #0
 800c81a:	4603      	mov	r3, r0
 800c81c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800c81e:	f04f 0300 	mov.w	r3, #0
 800c822:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800c824:	f04f 0300 	mov.w	r3, #0
 800c828:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800c82a:	f04f 0300 	mov.w	r3, #0
 800c82e:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 800c830:	79fb      	ldrb	r3, [r7, #7]
 800c832:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800c836:	b2db      	uxtb	r3, r3
 800c838:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d106      	bne.n	800c84e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 800c840:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c844:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	617b      	str	r3, [r7, #20]
 800c84c:	e00f      	b.n	800c86e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b02      	cmp	r3, #2
 800c852:	d106      	bne.n	800c862 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 800c854:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c858:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c85c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85e:	617b      	str	r3, [r7, #20]
 800c860:	e005      	b.n	800c86e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 800c862:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c866:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c86a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c86c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800c86e:	79fb      	ldrb	r3, [r7, #7]
 800c870:	f003 031f 	and.w	r3, r3, #31
 800c874:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	697a      	ldr	r2, [r7, #20]
 800c87a:	fa22 f303 	lsr.w	r3, r2, r3
 800c87e:	f003 0301 	and.w	r3, r3, #1
 800c882:	b2db      	uxtb	r3, r3
 800c884:	2b00      	cmp	r3, #0
 800c886:	d003      	beq.n	800c890 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 800c888:	f04f 0301 	mov.w	r3, #1
 800c88c:	74fb      	strb	r3, [r7, #19]
 800c88e:	e002      	b.n	800c896 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 800c890:	f04f 0300 	mov.w	r3, #0
 800c894:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 800c896:	7cfb      	ldrb	r3, [r7, #19]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	f107 071c 	add.w	r7, r7, #28
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bc80      	pop	{r7}
 800c8a2:	4770      	bx	lr

0800c8a4 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 800c8a8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c8ac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c8b0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c8b4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c8b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c8ba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800c8be:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bc80      	pop	{r7}
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop

0800c8c8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b085      	sub	sp, #20
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800c8d2:	f04f 0300 	mov.w	r3, #0
 800c8d6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 800c8d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c8dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c8e0:	68da      	ldr	r2, [r3, #12]
 800c8e2:	79fb      	ldrb	r3, [r7, #7]
 800c8e4:	4013      	ands	r3, r2
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d003      	beq.n	800c8f2 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 800c8ea:	f04f 0301 	mov.w	r3, #1
 800c8ee:	73fb      	strb	r3, [r7, #15]
 800c8f0:	e002      	b.n	800c8f8 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800c8f2:	f04f 0300 	mov.w	r3, #0
 800c8f6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800c8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f107 0714 	add.w	r7, r7, #20
 800c900:	46bd      	mov	sp, r7
 800c902:	bc80      	pop	{r7}
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop

0800c908 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	4603      	mov	r3, r0
 800c910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 800c912:	f643 030e 	movw	r3, #14350	; 0x380e
 800c916:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c91a:	79fa      	ldrb	r2, [r7, #7]
 800c91c:	701a      	strb	r2, [r3, #0]
}
 800c91e:	f107 070c 	add.w	r7, r7, #12
 800c922:	46bd      	mov	sp, r7
 800c924:	bc80      	pop	{r7}
 800c926:	4770      	bx	lr

0800c928 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 800c92c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800c930:	f04f 0101 	mov.w	r1, #1
 800c934:	f7ff fdc4 	bl	800c4c0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 800c938:	f04f 0040 	mov.w	r0, #64	; 0x40
 800c93c:	f04f 0100 	mov.w	r1, #0
 800c940:	f7ff fdbe 	bl	800c4c0 <RCC_AHB2PeriphResetCmd>
}
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop

0800c948 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 800c948:	b480      	push	{r7}
 800c94a:	b083      	sub	sp, #12
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	4603      	mov	r3, r0
 800c950:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c952:	79fb      	ldrb	r3, [r7, #7]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00c      	beq.n	800c972 <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 800c958:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c95c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c964:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	f042 0204 	orr.w	r2, r2, #4
 800c96e:	601a      	str	r2, [r3, #0]
 800c970:	e00b      	b.n	800c98a <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 800c972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c976:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c97a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c97e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c982:	6812      	ldr	r2, [r2, #0]
 800c984:	f022 0204 	bic.w	r2, r2, #4
 800c988:	601a      	str	r2, [r3, #0]
  }
}
 800c98a:	f107 070c 	add.w	r7, r7, #12
 800c98e:	46bd      	mov	sp, r7
 800c990:	bc80      	pop	{r7}
 800c992:	4770      	bx	lr

0800c994 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 800c994:	b480      	push	{r7}
 800c996:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 800c998:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c99c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c9a0:	689b      	ldr	r3, [r3, #8]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bc80      	pop	{r7}
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop

0800c9ac <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b083      	sub	sp, #12
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c9b6:	79fb      	ldrb	r3, [r7, #7]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00c      	beq.n	800c9d6 <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 800c9bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9c0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c9c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9c8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c9cc:	6812      	ldr	r2, [r2, #0]
 800c9ce:	f042 0208 	orr.w	r2, r2, #8
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	e00b      	b.n	800c9ee <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 800c9d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c9da:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800c9de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9e2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800c9e6:	6812      	ldr	r2, [r2, #0]
 800c9e8:	f022 0208 	bic.w	r2, r2, #8
 800c9ec:	601a      	str	r2, [r3, #0]
  }
}
 800c9ee:	f107 070c 	add.w	r7, r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bc80      	pop	{r7}
 800c9f6:	4770      	bx	lr

0800c9f8 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b085      	sub	sp, #20
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	4603      	mov	r3, r0
 800ca00:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 800ca02:	f04f 0300 	mov.w	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 800ca08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca0c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ca10:	685a      	ldr	r2, [r3, #4]
 800ca12:	79fb      	ldrb	r3, [r7, #7]
 800ca14:	4013      	ands	r3, r2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d003      	beq.n	800ca22 <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 800ca1a:	f04f 0301 	mov.w	r3, #1
 800ca1e:	73fb      	strb	r3, [r7, #15]
 800ca20:	e002      	b.n	800ca28 <RNG_GetFlagStatus+0x30>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800ca22:	f04f 0300 	mov.w	r3, #0
 800ca26:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800ca28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f107 0714 	add.w	r7, r7, #20
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bc80      	pop	{r7}
 800ca34:	4770      	bx	lr
 800ca36:	bf00      	nop

0800ca38 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b083      	sub	sp, #12
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	4603      	mov	r3, r0
 800ca40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800ca42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca46:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ca4a:	79fa      	ldrb	r2, [r7, #7]
 800ca4c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800ca50:	ea6f 0202 	mvn.w	r2, r2
 800ca54:	605a      	str	r2, [r3, #4]
}
 800ca56:	f107 070c 	add.w	r7, r7, #12
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bc80      	pop	{r7}
 800ca5e:	4770      	bx	lr

0800ca60 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800ca6a:	f04f 0300 	mov.w	r3, #0
 800ca6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800ca70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca74:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800ca78:	685a      	ldr	r2, [r3, #4]
 800ca7a:	79fb      	ldrb	r3, [r7, #7]
 800ca7c:	4013      	ands	r3, r2
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d003      	beq.n	800ca8a <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800ca82:	f04f 0301 	mov.w	r3, #1
 800ca86:	73fb      	strb	r3, [r7, #15]
 800ca88:	e002      	b.n	800ca90 <RNG_GetITStatus+0x30>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800ca8a:	f04f 0300 	mov.w	r3, #0
 800ca8e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	f107 0714 	add.w	r7, r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bc80      	pop	{r7}
 800ca9c:	4770      	bx	lr
 800ca9e:	bf00      	nop

0800caa0 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	4603      	mov	r3, r0
 800caa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800caaa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800caae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800cab2:	79fa      	ldrb	r2, [r7, #7]
 800cab4:	ea6f 0202 	mvn.w	r2, r2
 800cab8:	b2d2      	uxtb	r2, r2
 800caba:	605a      	str	r2, [r3, #4]
}
 800cabc:	f107 070c 	add.w	r7, r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bc80      	pop	{r7}
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop

0800cac8 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800cace:	f04f 0300 	mov.w	r3, #0
 800cad2:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800cad4:	f04f 0300 	mov.w	r3, #0
 800cad8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800cada:	f04f 0300 	mov.w	r3, #0
 800cade:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800cae0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cae4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cae8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800caec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800caee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800caf2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800caf6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800cafa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800cafc:	f000 f934 	bl	800cd68 <RTC_EnterInitMode>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d103      	bne.n	800cb0e <RTC_DeInit+0x46>
  {
    status = ERROR;
 800cb06:	f04f 0300 	mov.w	r3, #0
 800cb0a:	73fb      	strb	r3, [r7, #15]
 800cb0c:	e084      	b.n	800cc18 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800cb0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb16:	f04f 0200 	mov.w	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800cb1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb24:	f242 1201 	movw	r2, #8449	; 0x2101
 800cb28:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800cb2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb32:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cb36:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cb3a:	6892      	ldr	r2, [r2, #8]
 800cb3c:	f002 0207 	and.w	r2, r2, #7
 800cb40:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800cb42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	f003 0304 	and.w	r3, r3, #4
 800cb50:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f103 0301 	add.w	r3, r3, #1
 800cb58:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb60:	d002      	beq.n	800cb68 <RTC_DeInit+0xa0>
 800cb62:	68bb      	ldr	r3, [r7, #8]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d0ec      	beq.n	800cb42 <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800cb68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	f003 0304 	and.w	r3, r3, #4
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d103      	bne.n	800cb82 <RTC_DeInit+0xba>
    {
      status = ERROR;
 800cb7a:	f04f 0300 	mov.w	r3, #0
 800cb7e:	73fb      	strb	r3, [r7, #15]
 800cb80:	e04a      	b.n	800cc18 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800cb82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cb94:	f04f 0200 	mov.w	r2, #0
 800cb98:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800cb9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cb9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba6:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800cba8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbb0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cbb4:	f2c0 027f 	movt	r2, #127	; 0x7f
 800cbb8:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800cbba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbbe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbc2:	f04f 0200 	mov.w	r2, #0
 800cbc6:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800cbc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbd0:	f04f 0200 	mov.w	r2, #0
 800cbd4:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800cbd6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbda:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbde:	f04f 0200 	mov.w	r2, #0
 800cbe2:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800cbe4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbe8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbec:	f04f 0200 	mov.w	r2, #0
 800cbf0:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800cbf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cbf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cbfa:	f04f 0200 	mov.w	r2, #0
 800cbfe:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800cc00:	f000 f90e 	bl	800ce20 <RTC_WaitForSynchro>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d103      	bne.n	800cc12 <RTC_DeInit+0x14a>
      {
        status = ERROR;
 800cc0a:	f04f 0300 	mov.w	r3, #0
 800cc0e:	73fb      	strb	r3, [r7, #15]
 800cc10:	e002      	b.n	800cc18 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 800cc12:	f04f 0301 	mov.w	r3, #1
 800cc16:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800cc18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc20:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cc24:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800cc26:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f107 0710 	add.w	r7, r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop

0800cc34 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b084      	sub	sp, #16
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800cc3c:	f04f 0300 	mov.w	r3, #0
 800cc40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800cc42:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc4a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800cc4e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800cc50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc58:	f04f 0253 	mov.w	r2, #83	; 0x53
 800cc5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800cc5e:	f000 f883 	bl	800cd68 <RTC_EnterInitMode>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d103      	bne.n	800cc70 <RTC_Init+0x3c>
  {
    status = ERROR;
 800cc68:	f04f 0300 	mov.w	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
 800cc6e:	e033      	b.n	800ccd8 <RTC_Init+0xa4>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800cc70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc78:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cc7c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cc80:	6892      	ldr	r2, [r2, #8]
 800cc82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc86:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800cc88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cc8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cc90:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cc94:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cc98:	6891      	ldr	r1, [r2, #8]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	6812      	ldr	r2, [r2, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800cca2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cca6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	6892      	ldr	r2, [r2, #8]
 800ccae:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800ccb0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ccb4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ccb8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ccbc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ccc0:	6911      	ldr	r1, [r2, #16]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	6852      	ldr	r2, [r2, #4]
 800ccc6:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800ccca:	430a      	orrs	r2, r1
 800cccc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800ccce:	f000 f895 	bl	800cdfc <RTC_ExitInitMode>

    status = SUCCESS;    
 800ccd2:	f04f 0301 	mov.w	r3, #1
 800ccd6:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ccd8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ccdc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cce0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cce4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	f107 0710 	add.w	r7, r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
 800ccf2:	bf00      	nop

0800ccf4 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f04f 0200 	mov.w	r2, #0
 800cd02:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800cd0a:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cd12:	609a      	str	r2, [r3, #8]
}
 800cd14:	f107 070c 	add.w	r7, r7, #12
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bc80      	pop	{r7}
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop

0800cd20 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800cd20:	b480      	push	{r7}
 800cd22:	b083      	sub	sp, #12
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800cd2a:	79fb      	ldrb	r3, [r7, #7]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d007      	beq.n	800cd40 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800cd30:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd34:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd38:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cd3c:	625a      	str	r2, [r3, #36]	; 0x24
 800cd3e:	e00d      	b.n	800cd5c <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800cd40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd48:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800cd4c:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800cd4e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd56:	f04f 0253 	mov.w	r2, #83	; 0x53
 800cd5a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cd5c:	f107 070c 	add.w	r7, r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bc80      	pop	{r7}
 800cd64:	4770      	bx	lr
 800cd66:	bf00      	nop

0800cd68 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800cd68:	b480      	push	{r7}
 800cd6a:	b085      	sub	sp, #20
 800cd6c:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800cd6e:	f04f 0300 	mov.w	r3, #0
 800cd72:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800cd74:	f04f 0300 	mov.w	r3, #0
 800cd78:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800cd7a:	f04f 0300 	mov.w	r3, #0
 800cd7e:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800cd80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd88:	68db      	ldr	r3, [r3, #12]
 800cd8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d12a      	bne.n	800cde8 <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800cd92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cd96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd9a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd9e:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800cda0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cda4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdae:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f103 0301 	add.w	r3, r3, #1
 800cdb6:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdbe:	d002      	beq.n	800cdc6 <RTC_EnterInitMode+0x5e>
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d0ec      	beq.n	800cda0 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800cdc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cdca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 800cdd8:	f04f 0301 	mov.w	r3, #1
 800cddc:	73fb      	strb	r3, [r7, #15]
 800cdde:	e006      	b.n	800cdee <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 800cde0:	f04f 0300 	mov.w	r3, #0
 800cde4:	73fb      	strb	r3, [r7, #15]
 800cde6:	e002      	b.n	800cdee <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 800cde8:	f04f 0301 	mov.w	r3, #1
 800cdec:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f107 0714 	add.w	r7, r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bc80      	pop	{r7}
 800cdfa:	4770      	bx	lr

0800cdfc <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800cdfc:	b480      	push	{r7}
 800cdfe:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800ce00:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce08:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ce0c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ce10:	68d2      	ldr	r2, [r2, #12]
 800ce12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce16:	60da      	str	r2, [r3, #12]
}
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bc80      	pop	{r7}
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop

0800ce20 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b085      	sub	sp, #20
 800ce24:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800ce26:	f04f 0300 	mov.w	r3, #0
 800ce2a:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800ce2c:	f04f 0300 	mov.w	r3, #0
 800ce30:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800ce32:	f04f 0300 	mov.w	r3, #0
 800ce36:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ce38:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce40:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ce44:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ce46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce4e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ce52:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800ce54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce5c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ce60:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ce64:	68d2      	ldr	r2, [r2, #12]
 800ce66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ce6a:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800ce6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce74:	68db      	ldr	r3, [r3, #12]
 800ce76:	f003 0320 	and.w	r3, r3, #32
 800ce7a:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f103 0301 	add.w	r3, r3, #1
 800ce82:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce8a:	d002      	beq.n	800ce92 <RTC_WaitForSynchro+0x72>
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d0ec      	beq.n	800ce6c <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800ce92:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ce96:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	f003 0320 	and.w	r3, r3, #32
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d003      	beq.n	800ceac <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 800cea4:	f04f 0301 	mov.w	r3, #1
 800cea8:	73fb      	strb	r3, [r7, #15]
 800ceaa:	e002      	b.n	800ceb2 <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 800ceac:	f04f 0300 	mov.w	r3, #0
 800ceb0:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ceb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ceb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ceba:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cebe:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	f107 0714 	add.w	r7, r7, #20
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bc80      	pop	{r7}
 800cecc:	4770      	bx	lr
 800cece:	bf00      	nop

0800ced0 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800ceda:	f04f 0300 	mov.w	r3, #0
 800cede:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800cee0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cee4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cee8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ceec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ceee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cef2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cef6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800cefa:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800cefc:	f7ff ff34 	bl	800cd68 <RTC_EnterInitMode>
 800cf00:	4603      	mov	r3, r0
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d103      	bne.n	800cf0e <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 800cf06:	f04f 0300 	mov.w	r3, #0
 800cf0a:	73fb      	strb	r3, [r7, #15]
 800cf0c:	e020      	b.n	800cf50 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 800cf0e:	79fb      	ldrb	r3, [r7, #7]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d00c      	beq.n	800cf2e <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800cf14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf1c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cf20:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cf24:	6892      	ldr	r2, [r2, #8]
 800cf26:	f042 0210 	orr.w	r2, r2, #16
 800cf2a:	609a      	str	r2, [r3, #8]
 800cf2c:	e00b      	b.n	800cf46 <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800cf2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf36:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cf3a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cf3e:	6892      	ldr	r2, [r2, #8]
 800cf40:	f022 0210 	bic.w	r2, r2, #16
 800cf44:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800cf46:	f7ff ff59 	bl	800cdfc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800cf4a:	f04f 0301 	mov.w	r3, #1
 800cf4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800cf50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf58:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cf5c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800cf5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	f107 0710 	add.w	r7, r7, #16
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}
 800cf6a:	bf00      	nop

0800cf6c <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800cf76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf7e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800cf82:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800cf84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf8c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800cf90:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800cf92:	79fb      	ldrb	r3, [r7, #7]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00c      	beq.n	800cfb2 <RTC_BypassShadowCmd+0x46>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800cf98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cf9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfa0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cfa4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cfa8:	6892      	ldr	r2, [r2, #8]
 800cfaa:	f042 0220 	orr.w	r2, r2, #32
 800cfae:	609a      	str	r2, [r3, #8]
 800cfb0:	e00b      	b.n	800cfca <RTC_BypassShadowCmd+0x5e>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 800cfb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cfb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfba:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800cfbe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800cfc2:	6892      	ldr	r2, [r2, #8]
 800cfc4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800cfc8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800cfca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800cfce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cfd2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800cfd6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800cfd8:	f107 070c 	add.w	r7, r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bc80      	pop	{r7}
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop

0800cfe4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800cfe4:	b590      	push	{r4, r7, lr}
 800cfe6:	b085      	sub	sp, #20
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800cfee:	f04f 0300 	mov.w	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800cff4:	f04f 0300 	mov.w	r3, #0
 800cff8:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d10d      	bne.n	800d01c <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d000:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d008:	689b      	ldr	r3, [r3, #8]
 800d00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d119      	bne.n	800d046 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	f04f 0200 	mov.w	r2, #0
 800d018:	70da      	strb	r2, [r3, #3]
 800d01a:	e014      	b.n	800d046 <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d01c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d020:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d024:	689b      	ldr	r3, [r3, #8]
 800d026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d007      	beq.n	800d03e <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	4618      	mov	r0, r3
 800d034:	f001 fb1a 	bl	800e66c <RTC_Bcd2ToByte>
 800d038:	4603      	mov	r3, r0
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e003      	b.n	800d046 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	f04f 0200 	mov.w	r2, #0
 800d044:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d012      	beq.n	800d072 <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	785b      	ldrb	r3, [r3, #1]
 800d058:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d05c:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d062:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800d064:	683b      	ldr	r3, [r7, #0]
 800d066:	78db      	ldrb	r3, [r3, #3]
 800d068:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d06c:	4313      	orrs	r3, r2
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	e01e      	b.n	800d0b0 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	4618      	mov	r0, r3
 800d078:	f001 fad6 	bl	800e628 <RTC_ByteToBcd2>
 800d07c:	4603      	mov	r3, r0
 800d07e:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d082:	683b      	ldr	r3, [r7, #0]
 800d084:	785b      	ldrb	r3, [r3, #1]
 800d086:	4618      	mov	r0, r3
 800d088:	f001 face 	bl	800e628 <RTC_ByteToBcd2>
 800d08c:	4603      	mov	r3, r0
 800d08e:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d092:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	789b      	ldrb	r3, [r3, #2]
 800d098:	4618      	mov	r0, r3
 800d09a:	f001 fac5 	bl	800e628 <RTC_ByteToBcd2>
 800d09e:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800d0a0:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	78db      	ldrb	r3, [r3, #3]
 800d0a8:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800d0ac:	4313      	orrs	r3, r2
 800d0ae:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d0b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d0b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d0b8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d0bc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d0be:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d0c2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d0c6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d0ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d0cc:	f7ff fe4c 	bl	800cd68 <RTC_EnterInitMode>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d103      	bne.n	800d0de <RTC_SetTime+0xfa>
  {
    status = ERROR;
 800d0d6:	f04f 0300 	mov.w	r3, #0
 800d0da:	72fb      	strb	r3, [r7, #11]
 800d0dc:	e018      	b.n	800d110 <RTC_SetTime+0x12c>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d0de:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d0e2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d0e6:	68f9      	ldr	r1, [r7, #12]
 800d0e8:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800d0ec:	f2c0 037f 	movt	r3, #127	; 0x7f
 800d0f0:	400b      	ands	r3, r1
 800d0f2:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800d0f4:	f7ff fe82 	bl	800cdfc <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800d0f8:	f7ff fe92 	bl	800ce20 <RTC_WaitForSynchro>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d103      	bne.n	800d10a <RTC_SetTime+0x126>
    {
      status = ERROR;
 800d102:	f04f 0300 	mov.w	r3, #0
 800d106:	72fb      	strb	r3, [r7, #11]
 800d108:	e002      	b.n	800d110 <RTC_SetTime+0x12c>
    }
    else
    {
      status = SUCCESS;
 800d10a:	f04f 0301 	mov.w	r3, #1
 800d10e:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d110:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d114:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d118:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d11c:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800d11e:	7afb      	ldrb	r3, [r7, #11]
}
 800d120:	4618      	mov	r0, r3
 800d122:	f107 0714 	add.w	r7, r7, #20
 800d126:	46bd      	mov	sp, r7
 800d128:	bd90      	pop	{r4, r7, pc}
 800d12a:	bf00      	nop

0800d12c <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f04f 0200 	mov.w	r2, #0
 800d13a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f04f 0200 	mov.w	r2, #0
 800d142:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f04f 0200 	mov.w	r2, #0
 800d14a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	709a      	strb	r2, [r3, #2]
}
 800d154:	f107 070c 	add.w	r7, r7, #12
 800d158:	46bd      	mov	sp, r7
 800d15a:	bc80      	pop	{r7}
 800d15c:	4770      	bx	lr
 800d15e:	bf00      	nop

0800d160 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d16a:	f04f 0300 	mov.w	r3, #0
 800d16e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800d170:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d174:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800d17e:	f2c0 037f 	movt	r3, #127	; 0x7f
 800d182:	4013      	ands	r3, r2
 800d184:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d18c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d190:	b2da      	uxtb	r2, r3
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d19c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d1a0:	b2da      	uxtb	r2, r3
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d1ba:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d11a      	bne.n	800d200 <RTC_GetTime+0xa0>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f001 fa4c 	bl	800e66c <RTC_Bcd2ToByte>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	785b      	ldrb	r3, [r3, #1]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f001 fa43 	bl	800e66c <RTC_Bcd2ToByte>
 800d1e6:	4603      	mov	r3, r0
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	789b      	ldrb	r3, [r3, #2]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f001 fa3a 	bl	800e66c <RTC_Bcd2ToByte>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	709a      	strb	r2, [r3, #2]
  }
}
 800d200:	f107 0710 	add.w	r7, r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}

0800d208 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 800d208:	b480      	push	{r7}
 800d20a:	b083      	sub	sp, #12
 800d20c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 800d20e:	f04f 0300 	mov.w	r3, #0
 800d212:	607b      	str	r3, [r7, #4]
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800d214:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d218:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 800d220:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d224:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d228:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 800d22a:	687b      	ldr	r3, [r7, #4]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	f107 070c 	add.w	r7, r7, #12
 800d232:	46bd      	mov	sp, r7
 800d234:	bc80      	pop	{r7}
 800d236:	4770      	bx	lr

0800d238 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800d238:	b590      	push	{r4, r7, lr}
 800d23a:	b085      	sub	sp, #20
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
 800d240:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d242:	f04f 0300 	mov.w	r3, #0
 800d246:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800d248:	f04f 0300 	mov.w	r3, #0
 800d24c:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d10f      	bne.n	800d274 <RTC_SetDate+0x3c>
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	785b      	ldrb	r3, [r3, #1]
 800d258:	f003 0310 	and.w	r3, r3, #16
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d009      	beq.n	800d274 <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	785b      	ldrb	r3, [r3, #1]
 800d264:	f023 0310 	bic.w	r3, r3, #16
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	f103 030a 	add.w	r3, r3, #10
 800d26e:	b2da      	uxtb	r2, r3
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00d      	beq.n	800d296 <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	785b      	ldrb	r3, [r3, #1]
 800d27e:	4618      	mov	r0, r3
 800d280:	f001 f9f4 	bl	800e66c <RTC_Bcd2ToByte>
 800d284:	4603      	mov	r3, r0
 800d286:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	789b      	ldrb	r3, [r3, #2]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f001 f9ed 	bl	800e66c <RTC_Bcd2ToByte>
 800d292:	4603      	mov	r3, r0
 800d294:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d012      	beq.n	800d2c2 <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800d29c:	683b      	ldr	r3, [r7, #0]
 800d29e:	78db      	ldrb	r3, [r3, #3]
 800d2a0:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	785b      	ldrb	r3, [r3, #1]
 800d2a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800d2ac:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800d2b2:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	e01e      	b.n	800d300 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	78db      	ldrb	r3, [r3, #3]
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f001 f9ae 	bl	800e628 <RTC_ByteToBcd2>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800d2d2:	683b      	ldr	r3, [r7, #0]
 800d2d4:	785b      	ldrb	r3, [r3, #1]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 f9a6 	bl	800e628 <RTC_ByteToBcd2>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800d2e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	789b      	ldrb	r3, [r3, #2]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f001 f99d 	bl	800e628 <RTC_ByteToBcd2>
 800d2ee:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800d2f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	781b      	ldrb	r3, [r3, #0]
 800d2f8:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800d2fc:	4313      	orrs	r3, r2
 800d2fe:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d300:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d304:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d308:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d30c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d30e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d312:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d316:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d31a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800d31c:	f7ff fd24 	bl	800cd68 <RTC_EnterInitMode>
 800d320:	4603      	mov	r3, r0
 800d322:	2b00      	cmp	r3, #0
 800d324:	d103      	bne.n	800d32e <RTC_SetDate+0xf6>
  {
    status = ERROR;
 800d326:	f04f 0300 	mov.w	r3, #0
 800d32a:	72fb      	strb	r3, [r7, #11]
 800d32c:	e017      	b.n	800d35e <RTC_SetDate+0x126>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800d32e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d332:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d336:	68fa      	ldr	r2, [r7, #12]
 800d338:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800d33c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800d340:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800d342:	f7ff fd5b 	bl	800cdfc <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800d346:	f7ff fd6b 	bl	800ce20 <RTC_WaitForSynchro>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d103      	bne.n	800d358 <RTC_SetDate+0x120>
    {
      status = ERROR;
 800d350:	f04f 0300 	mov.w	r3, #0
 800d354:	72fb      	strb	r3, [r7, #11]
 800d356:	e002      	b.n	800d35e <RTC_SetDate+0x126>
    }
    else
    {
      status = SUCCESS;
 800d358:	f04f 0301 	mov.w	r3, #1
 800d35c:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800d35e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d362:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d366:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d36a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d36c:	7afb      	ldrb	r3, [r7, #11]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	f107 0714 	add.w	r7, r7, #20
 800d374:	46bd      	mov	sp, r7
 800d376:	bd90      	pop	{r4, r7, pc}

0800d378 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800d378:	b480      	push	{r7}
 800d37a:	b083      	sub	sp, #12
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f04f 0201 	mov.w	r2, #1
 800d386:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f04f 0201 	mov.w	r2, #1
 800d38e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f04f 0201 	mov.w	r2, #1
 800d396:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f04f 0200 	mov.w	r2, #0
 800d39e:	70da      	strb	r2, [r3, #3]
}
 800d3a0:	f107 070c 	add.w	r7, r7, #12
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bc80      	pop	{r7}
 800d3a8:	4770      	bx	lr
 800d3aa:	bf00      	nop

0800d3ac <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d3b6:	f04f 0300 	mov.w	r3, #0
 800d3ba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800d3bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d3c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d3ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d3ce:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d3d6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800d3e6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d3ea:	b2da      	uxtb	r2, r3
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d404:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800d408:	b2da      	uxtb	r2, r3
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d11a      	bne.n	800d44a <RTC_GetDate+0x9e>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	78db      	ldrb	r3, [r3, #3]
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 f927 	bl	800e66c <RTC_Bcd2ToByte>
 800d41e:	4603      	mov	r3, r0
 800d420:	461a      	mov	r2, r3
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 f91e 	bl	800e66c <RTC_Bcd2ToByte>
 800d430:	4603      	mov	r3, r0
 800d432:	461a      	mov	r2, r3
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	789b      	ldrb	r3, [r3, #2]
 800d43c:	4618      	mov	r0, r3
 800d43e:	f001 f915 	bl	800e66c <RTC_Bcd2ToByte>
 800d442:	4603      	mov	r3, r0
 800d444:	461a      	mov	r2, r3
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	709a      	strb	r2, [r3, #2]
  }
}
 800d44a:	f107 0710 	add.w	r7, r7, #16
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop

0800d454 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800d454:	b590      	push	{r4, r7, lr}
 800d456:	b087      	sub	sp, #28
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d460:	f04f 0300 	mov.w	r3, #0
 800d464:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10d      	bne.n	800d488 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d46c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d470:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d474:	689b      	ldr	r3, [r3, #8]
 800d476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d12c      	bne.n	800d4d8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f04f 0200 	mov.w	r2, #0
 800d484:	70da      	strb	r2, [r3, #3]
 800d486:	e027      	b.n	800d4d8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d488:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d48c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d496:	2b00      	cmp	r3, #0
 800d498:	d007      	beq.n	800d4aa <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f001 f8e4 	bl	800e66c <RTC_Bcd2ToByte>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	617b      	str	r3, [r7, #20]
 800d4a8:	e003      	b.n	800d4b2 <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f04f 0200 	mov.w	r2, #0
 800d4b0:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d107      	bne.n	800d4ca <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	7b1b      	ldrb	r3, [r3, #12]
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f001 f8d4 	bl	800e66c <RTC_Bcd2ToByte>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	617b      	str	r3, [r7, #20]
 800d4c8:	e006      	b.n	800d4d8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7b1b      	ldrb	r3, [r3, #12]
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f001 f8cc 	bl	800e66c <RTC_Bcd2ToByte>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d01d      	beq.n	800d51a <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	785b      	ldrb	r3, [r3, #1]
 800d4ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800d4ee:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800d4f4:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	78db      	ldrb	r3, [r3, #3]
 800d4fa:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800d4fe:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	7b1b      	ldrb	r3, [r3, #12]
 800d504:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800d508:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800d50e:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800d514:	4313      	orrs	r3, r2
 800d516:	617b      	str	r3, [r7, #20]
 800d518:	e02f      	b.n	800d57a <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	4618      	mov	r0, r3
 800d520:	f001 f882 	bl	800e628 <RTC_ByteToBcd2>
 800d524:	4603      	mov	r3, r0
 800d526:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	785b      	ldrb	r3, [r3, #1]
 800d52e:	4618      	mov	r0, r3
 800d530:	f001 f87a 	bl	800e628 <RTC_ByteToBcd2>
 800d534:	4603      	mov	r3, r0
 800d536:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800d53a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	789b      	ldrb	r3, [r3, #2]
 800d540:	4618      	mov	r0, r3
 800d542:	f001 f871 	bl	800e628 <RTC_ByteToBcd2>
 800d546:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800d548:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	78db      	ldrb	r3, [r3, #3]
 800d550:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800d554:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	7b1b      	ldrb	r3, [r3, #12]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f001 f863 	bl	800e628 <RTC_ByteToBcd2>
 800d562:	4603      	mov	r3, r0
 800d564:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800d568:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800d570:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800d576:	4313      	orrs	r3, r2
 800d578:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d57a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d57e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d582:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d586:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d588:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d58c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d590:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d594:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d59c:	d106      	bne.n	800d5ac <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800d59e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5a6:	697a      	ldr	r2, [r7, #20]
 800d5a8:	61da      	str	r2, [r3, #28]
 800d5aa:	e005      	b.n	800d5b8 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800d5ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5b4:	697a      	ldr	r2, [r7, #20]
 800d5b6:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800d5b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d5bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d5c0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d5c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d5c6:	f107 071c 	add.w	r7, r7, #28
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd90      	pop	{r4, r7, pc}
 800d5ce:	bf00      	nop

0800d5d0 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f04f 0200 	mov.w	r2, #0
 800d5de:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	f04f 0200 	mov.w	r2, #0
 800d5e6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f04f 0200 	mov.w	r2, #0
 800d5ee:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f04f 0200 	mov.w	r2, #0
 800d5f6:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f04f 0200 	mov.w	r2, #0
 800d5fe:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f04f 0201 	mov.w	r2, #1
 800d606:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f04f 0200 	mov.w	r2, #0
 800d60e:	605a      	str	r2, [r3, #4]
}
 800d610:	f107 070c 	add.w	r7, r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	bc80      	pop	{r7}
 800d618:	4770      	bx	lr
 800d61a:	bf00      	nop

0800d61c <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b086      	sub	sp, #24
 800d620:	af00      	add	r7, sp, #0
 800d622:	60f8      	str	r0, [r7, #12]
 800d624:	60b9      	str	r1, [r7, #8]
 800d626:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d628:	f04f 0300 	mov.w	r3, #0
 800d62c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d634:	d106      	bne.n	800d644 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800d636:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d63a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d63e:	69db      	ldr	r3, [r3, #28]
 800d640:	617b      	str	r3, [r7, #20]
 800d642:	e005      	b.n	800d650 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800d644:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d648:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d64c:	6a1b      	ldr	r3, [r3, #32]
 800d64e:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800d656:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d65a:	b2da      	uxtb	r2, r3
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800d666:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	b2db      	uxtb	r3, r3
 800d674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d678:	b2da      	uxtb	r2, r3
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d684:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800d688:	b2da      	uxtb	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800d694:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800d698:	b2da      	uxtb	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d123      	bne.n	800d700 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f000 ffd5 	bl	800e66c <RTC_Bcd2ToByte>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	785b      	ldrb	r3, [r3, #1]
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	f000 ffcc 	bl	800e66c <RTC_Bcd2ToByte>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	789b      	ldrb	r3, [r3, #2]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 ffc3 	bl	800e66c <RTC_Bcd2ToByte>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	7b1b      	ldrb	r3, [r3, #12]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f000 ffba 	bl	800e66c <RTC_Bcd2ToByte>
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	461a      	mov	r2, r3
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	731a      	strb	r2, [r3, #12]
  }  
}
 800d700:	f107 0718 	add.w	r7, r7, #24
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800d708:	b480      	push	{r7}
 800d70a:	b087      	sub	sp, #28
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	460b      	mov	r3, r1
 800d712:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800d714:	f04f 0300 	mov.w	r3, #0
 800d718:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800d71a:	f04f 0300 	mov.w	r3, #0
 800d71e:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800d720:	f04f 0300 	mov.w	r3, #0
 800d724:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d726:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d72a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d72e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d732:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d734:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d738:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d73c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d740:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800d742:	78fb      	ldrb	r3, [r7, #3]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d00f      	beq.n	800d768 <RTC_AlarmCmd+0x60>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800d748:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d74c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d750:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d754:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d758:	6891      	ldr	r1, [r2, #8]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	430a      	orrs	r2, r1
 800d75e:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800d760:	f04f 0301 	mov.w	r3, #1
 800d764:	75fb      	strb	r3, [r7, #23]
 800d766:	e034      	b.n	800d7d2 <RTC_AlarmCmd+0xca>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800d768:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d76c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d770:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d774:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d778:	6891      	ldr	r1, [r2, #8]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	ea6f 0202 	mvn.w	r2, r2
 800d780:	400a      	ands	r2, r1
 800d782:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800d784:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d788:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d78c:	68da      	ldr	r2, [r3, #12]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d794:	4013      	ands	r3, r2
 800d796:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f103 0301 	add.w	r3, r3, #1
 800d79e:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d7a6:	d002      	beq.n	800d7ae <RTC_AlarmCmd+0xa6>
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d0ea      	beq.n	800d784 <RTC_AlarmCmd+0x7c>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800d7ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d7b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d7b6:	68da      	ldr	r2, [r3, #12]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800d7be:	4013      	ands	r3, r2
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d103      	bne.n	800d7cc <RTC_AlarmCmd+0xc4>
    {
      status = ERROR;
 800d7c4:	f04f 0300 	mov.w	r3, #0
 800d7c8:	75fb      	strb	r3, [r7, #23]
 800d7ca:	e002      	b.n	800d7d2 <RTC_AlarmCmd+0xca>
    } 
    else
    {
      status = SUCCESS;
 800d7cc:	f04f 0301 	mov.w	r3, #1
 800d7d0:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d7d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d7d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d7da:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d7de:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800d7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f107 071c 	add.w	r7, r7, #28
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bc80      	pop	{r7}
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop

0800d7f0 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800d7fc:	f04f 0300 	mov.w	r3, #0
 800d800:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d802:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d806:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d80a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d80e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d810:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d814:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d818:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d81c:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	4313      	orrs	r3, r2
 800d824:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d82c:	d106      	bne.n	800d83c <RTC_AlarmSubSecondConfig+0x4c>
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 800d82e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d832:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d836:	697a      	ldr	r2, [r7, #20]
 800d838:	645a      	str	r2, [r3, #68]	; 0x44
 800d83a:	e005      	b.n	800d848 <RTC_AlarmSubSecondConfig+0x58>
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 800d83c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d840:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d844:	697a      	ldr	r2, [r7, #20]
 800d846:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800d848:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d84c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d850:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d854:	625a      	str	r2, [r3, #36]	; 0x24

}
 800d856:	f107 071c 	add.w	r7, r7, #28
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bc80      	pop	{r7}
 800d85e:	4770      	bx	lr

0800d860 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800d860:	b480      	push	{r7}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800d868:	f04f 0300 	mov.w	r3, #0
 800d86c:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d874:	d10a      	bne.n	800d88c <RTC_GetAlarmSubSecond+0x2c>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800d876:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d87a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d87e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d880:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d884:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d888:	60fb      	str	r3, [r7, #12]
 800d88a:	e009      	b.n	800d8a0 <RTC_GetAlarmSubSecond+0x40>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800d88c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d890:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d896:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800d89a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800d89e:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800d8a0:	68fb      	ldr	r3, [r7, #12]
}
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f107 0714 	add.w	r7, r7, #20
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bc80      	pop	{r7}
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop

0800d8b0 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d8b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8c0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d8c4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d8c6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8ca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8ce:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d8d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d8d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8dc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d8e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d8e4:	6892      	ldr	r2, [r2, #8]
 800d8e6:	f022 0207 	bic.w	r2, r2, #7
 800d8ea:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800d8ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d8f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d8f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d8f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d8fc:	6891      	ldr	r1, [r2, #8]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	430a      	orrs	r2, r1
 800d902:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d904:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d908:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d90c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d910:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d912:	f107 070c 	add.w	r7, r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	bc80      	pop	{r7}
 800d91a:	4770      	bx	lr

0800d91c <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d924:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d928:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d92c:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d930:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d932:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d936:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d93a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d93e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800d940:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d944:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800d94c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d950:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d954:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800d958:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d95a:	f107 070c 	add.w	r7, r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	bc80      	pop	{r7}
 800d962:	4770      	bx	lr

0800d964 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800d964:	b480      	push	{r7}
 800d966:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800d968:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d96c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800d976:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bc80      	pop	{r7}
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop

0800d984 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800d984:	b480      	push	{r7}
 800d986:	b087      	sub	sp, #28
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4603      	mov	r3, r0
 800d98c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800d98e:	f04f 0300 	mov.w	r3, #0
 800d992:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800d994:	f04f 0300 	mov.w	r3, #0
 800d998:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800d99a:	f04f 0300 	mov.w	r3, #0
 800d99e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800d9a0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9a8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800d9ac:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800d9ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9b6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800d9ba:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00f      	beq.n	800d9e2 <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800d9c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9ca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d9ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d9d2:	6892      	ldr	r2, [r2, #8]
 800d9d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d9d8:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800d9da:	f04f 0301 	mov.w	r3, #1
 800d9de:	75fb      	strb	r3, [r7, #23]
 800d9e0:	e02e      	b.n	800da40 <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800d9e2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9e6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800d9ea:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d9ee:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800d9f2:	6892      	ldr	r2, [r2, #8]
 800d9f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9f8:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800d9fa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800d9fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f003 0304 	and.w	r3, r3, #4
 800da08:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f103 0301 	add.w	r3, r3, #1
 800da10:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da18:	d002      	beq.n	800da20 <RTC_WakeUpCmd+0x9c>
 800da1a:	693b      	ldr	r3, [r7, #16]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d0ec      	beq.n	800d9fa <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800da20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da28:	68db      	ldr	r3, [r3, #12]
 800da2a:	f003 0304 	and.w	r3, r3, #4
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d103      	bne.n	800da3a <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800da32:	f04f 0300 	mov.w	r3, #0
 800da36:	75fb      	strb	r3, [r7, #23]
 800da38:	e002      	b.n	800da40 <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800da3a:	f04f 0301 	mov.w	r3, #1
 800da3e:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800da40:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da44:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da48:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800da4c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da50:	4618      	mov	r0, r3
 800da52:	f107 071c 	add.w	r7, r7, #28
 800da56:	46bd      	mov	sp, r7
 800da58:	bc80      	pop	{r7}
 800da5a:	4770      	bx	lr

0800da5c <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800da66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da6a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da6e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800da72:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800da74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da7c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800da80:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800da82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da86:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800da8a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800da8e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800da92:	6892      	ldr	r2, [r2, #8]
 800da94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800da98:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800da9a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800da9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800daa2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800daa6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800daaa:	6891      	ldr	r1, [r2, #8]
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	683a      	ldr	r2, [r7, #0]
 800dab0:	4302      	orrs	r2, r0
 800dab2:	430a      	orrs	r2, r1
 800dab4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800dab6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800daba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dabe:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dac2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dac4:	f107 070c 	add.w	r7, r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	bc80      	pop	{r7}
 800dacc:	4770      	bx	lr
 800dace:	bf00      	nop

0800dad0 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800dad0:	b480      	push	{r7}
 800dad2:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800dad4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dad8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bc80      	pop	{r7}
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop

0800daec <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800daf6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dafa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dafe:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800db02:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800db04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db0c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800db10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800db12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db1e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800db22:	6892      	ldr	r2, [r2, #8]
 800db24:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800db28:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800db2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db32:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db36:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800db3a:	6891      	ldr	r1, [r2, #8]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	683a      	ldr	r2, [r7, #0]
 800db40:	4302      	orrs	r2, r0
 800db42:	430a      	orrs	r2, r1
 800db44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800db46:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db4e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800db52:	625a      	str	r2, [r3, #36]	; 0x24
}
 800db54:	f107 070c 	add.w	r7, r7, #12
 800db58:	46bd      	mov	sp, r7
 800db5a:	bc80      	pop	{r7}
 800db5c:	4770      	bx	lr
 800db5e:	bf00      	nop

0800db60 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800db6a:	f04f 0300 	mov.w	r3, #0
 800db6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800db70:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db74:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db78:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800db7c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800db7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800db82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800db86:	f04f 0253 	mov.w	r2, #83	; 0x53
 800db8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800db8c:	f7ff f8ec 	bl	800cd68 <RTC_EnterInitMode>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d103      	bne.n	800db9e <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800db96:	f04f 0300 	mov.w	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]
 800db9c:	e00c      	b.n	800dbb8 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800db9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dba2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	683a      	ldr	r2, [r7, #0]
 800dbaa:	430a      	orrs	r2, r1
 800dbac:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800dbae:	f7ff f925 	bl	800cdfc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800dbb2:	f04f 0301 	mov.w	r3, #1
 800dbb6:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800dbb8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dbbc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dbc0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dbc4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800dbc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f107 0710 	add.w	r7, r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop

0800dbd4 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b084      	sub	sp, #16
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	4603      	mov	r3, r0
 800dbdc:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800dbde:	f04f 0300 	mov.w	r3, #0
 800dbe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dbe4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dbe8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dbec:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dbf0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dbf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dbf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dbfa:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dbfe:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800dc00:	f7ff f8b2 	bl	800cd68 <RTC_EnterInitMode>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d103      	bne.n	800dc12 <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800dc0a:	f04f 0300 	mov.w	r3, #0
 800dc0e:	73fb      	strb	r3, [r7, #15]
 800dc10:	e020      	b.n	800dc54 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800dc12:	79fb      	ldrb	r3, [r7, #7]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d00c      	beq.n	800dc32 <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800dc18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc20:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dc24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dc28:	6892      	ldr	r2, [r2, #8]
 800dc2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dc2e:	609a      	str	r2, [r3, #8]
 800dc30:	e00b      	b.n	800dc4a <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800dc32:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc3a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dc3e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dc42:	6892      	ldr	r2, [r2, #8]
 800dc44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc48:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800dc4a:	f7ff f8d7 	bl	800cdfc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800dc4e:	f04f 0301 	mov.w	r3, #1
 800dc52:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800dc54:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc58:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc5c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dc60:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800dc62:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	f107 0710 	add.w	r7, r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}
 800dc6e:	bf00      	nop

0800dc70 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b083      	sub	sp, #12
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	4603      	mov	r3, r0
 800dc78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dc7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc82:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dc86:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dc88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dc8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dc90:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dc94:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800dc96:	79fb      	ldrb	r3, [r7, #7]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00c      	beq.n	800dcb6 <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800dc9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dca0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dca4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dca8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dcac:	6892      	ldr	r2, [r2, #8]
 800dcae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800dcb2:	609a      	str	r2, [r3, #8]
 800dcb4:	e00b      	b.n	800dcce <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800dcb6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dcba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dcbe:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dcc2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dcc6:	6892      	ldr	r2, [r2, #8]
 800dcc8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800dccc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800dcce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dcd2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dcd6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dcda:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dcdc:	f107 070c 	add.w	r7, r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bc80      	pop	{r7}
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop

0800dce8 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dcf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dcf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dcf8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dcfc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dcfe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd06:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dd0a:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800dd0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd10:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd14:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dd18:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dd1c:	6892      	ldr	r2, [r2, #8]
 800dd1e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800dd22:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800dd24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd2c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dd30:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dd34:	6891      	ldr	r1, [r2, #8]
 800dd36:	687a      	ldr	r2, [r7, #4]
 800dd38:	430a      	orrs	r2, r1
 800dd3a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800dd3c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd44:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800dd48:	625a      	str	r2, [r3, #36]	; 0x24
}
 800dd4a:	f107 070c 	add.w	r7, r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bc80      	pop	{r7}
 800dd52:	4770      	bx	lr

0800dd54 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b087      	sub	sp, #28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800dd60:	f04f 0300 	mov.w	r3, #0
 800dd64:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800dd66:	f04f 0300 	mov.w	r3, #0
 800dd6a:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800dd6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd74:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800dd78:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800dd7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd82:	f04f 0253 	mov.w	r2, #83	; 0x53
 800dd86:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800dd88:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dd8c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d011      	beq.n	800ddbe <RTC_SmoothCalibConfig+0x6a>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800dd9a:	e003      	b.n	800dda4 <RTC_SmoothCalibConfig+0x50>
    {
      recalpfcount++;
 800dd9c:	693b      	ldr	r3, [r7, #16]
 800dd9e:	f103 0301 	add.w	r3, r3, #1
 800dda2:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800dda4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dda8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d003      	beq.n	800ddbe <RTC_SmoothCalibConfig+0x6a>
 800ddb6:	693b      	ldr	r3, [r7, #16]
 800ddb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ddbc:	d1ee      	bne.n	800dd9c <RTC_SmoothCalibConfig+0x48>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800ddbe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ddc2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddc6:	68db      	ldr	r3, [r3, #12]
 800ddc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d10d      	bne.n	800ddec <RTC_SmoothCalibConfig+0x98>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800ddd0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ddd4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddd8:	68f9      	ldr	r1, [r7, #12]
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	4311      	orrs	r1, r2
 800ddde:	687a      	ldr	r2, [r7, #4]
 800dde0:	430a      	orrs	r2, r1
 800dde2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 800dde4:	f04f 0301 	mov.w	r3, #1
 800dde8:	75fb      	strb	r3, [r7, #23]
 800ddea:	e002      	b.n	800ddf2 <RTC_SmoothCalibConfig+0x9e>
  }
  else
  {
    status = ERROR;
 800ddec:	f04f 0300 	mov.w	r3, #0
 800ddf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800ddf2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ddf6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ddfa:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ddfe:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800de00:	7dfb      	ldrb	r3, [r7, #23]
}
 800de02:	4618      	mov	r0, r3
 800de04:	f107 071c 	add.w	r7, r7, #28
 800de08:	46bd      	mov	sp, r7
 800de0a:	bc80      	pop	{r7}
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop

0800de10 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800de1c:	f04f 0300 	mov.w	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800de22:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de26:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de2a:	689b      	ldr	r3, [r3, #8]
 800de2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800de30:	f023 0308 	bic.w	r3, r3, #8
 800de34:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800de36:	78fb      	ldrb	r3, [r7, #3]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d006      	beq.n	800de4a <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	4313      	orrs	r3, r2
 800de42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	e003      	b.n	800de52 <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800de4a:	68fa      	ldr	r2, [r7, #12]
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	4313      	orrs	r3, r2
 800de50:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800de52:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de56:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de5a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800de5e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800de60:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de64:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de68:	f04f 0253 	mov.w	r2, #83	; 0x53
 800de6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800de6e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de72:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800de7a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800de7e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800de82:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800de86:	625a      	str	r2, [r3, #36]	; 0x24
}
 800de88:	f107 0714 	add.w	r7, r7, #20
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bc80      	pop	{r7}
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop

0800de94 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b086      	sub	sp, #24
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800dea0:	f04f 0300 	mov.w	r3, #0
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	f04f 0300 	mov.w	r3, #0
 800deaa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800deac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800deb0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800deb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800deb6:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800deba:	f2c0 037f 	movt	r3, #127	; 0x7f
 800debe:	4013      	ands	r3, r2
 800dec0:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800dec2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dec6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800deca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800decc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ded0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ded4:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800dedc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800dee6:	697b      	ldr	r3, [r7, #20]
 800dee8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800deec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800def0:	b2da      	uxtb	r2, r3
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	b2db      	uxtb	r3, r3
 800defa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800defe:	b2da      	uxtb	r2, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800df0a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	68bb      	ldr	r3, [r7, #8]
 800df12:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f04f 0200 	mov.w	r2, #0
 800df1a:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800df1c:	693b      	ldr	r3, [r7, #16]
 800df1e:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800df22:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800df26:	b2da      	uxtb	r2, r3
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df34:	b2da      	uxtb	r2, r3
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800df40:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800df44:	b2da      	uxtb	r2, r3
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d135      	bne.n	800dfbc <RTC_GetTimeStamp+0x128>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800df50:	68bb      	ldr	r3, [r7, #8]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	4618      	mov	r0, r3
 800df56:	f000 fb89 	bl	800e66c <RTC_Bcd2ToByte>
 800df5a:	4603      	mov	r3, r0
 800df5c:	461a      	mov	r2, r3
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	4618      	mov	r0, r3
 800df68:	f000 fb80 	bl	800e66c <RTC_Bcd2ToByte>
 800df6c:	4603      	mov	r3, r0
 800df6e:	461a      	mov	r2, r3
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	789b      	ldrb	r3, [r3, #2]
 800df78:	4618      	mov	r0, r3
 800df7a:	f000 fb77 	bl	800e66c <RTC_Bcd2ToByte>
 800df7e:	4603      	mov	r3, r0
 800df80:	461a      	mov	r2, r3
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	785b      	ldrb	r3, [r3, #1]
 800df8a:	4618      	mov	r0, r3
 800df8c:	f000 fb6e 	bl	800e66c <RTC_Bcd2ToByte>
 800df90:	4603      	mov	r3, r0
 800df92:	461a      	mov	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	789b      	ldrb	r3, [r3, #2]
 800df9c:	4618      	mov	r0, r3
 800df9e:	f000 fb65 	bl	800e66c <RTC_Bcd2ToByte>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	781b      	ldrb	r3, [r3, #0]
 800dfae:	4618      	mov	r0, r3
 800dfb0:	f000 fb5c 	bl	800e66c <RTC_Bcd2ToByte>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	701a      	strb	r2, [r3, #0]
  }
}
 800dfbc:	f107 0718 	add.w	r7, r7, #24
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}

0800dfc4 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	af00      	add	r7, sp, #0
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800dfc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dfcc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bc80      	pop	{r7}
 800dfd8:	4770      	bx	lr
 800dfda:	bf00      	nop

0800dfdc <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d110      	bne.n	800e00e <RTC_TamperTriggerConfig+0x32>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800dfec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800dff0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800dff4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800dff8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800dffc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e004:	ea6f 0202 	mvn.w	r2, r2
 800e008:	400a      	ands	r2, r1
 800e00a:	641a      	str	r2, [r3, #64]	; 0x40
 800e00c:	e00d      	b.n	800e02a <RTC_TamperTriggerConfig+0x4e>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800e00e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e012:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e016:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e01a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e01e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e026:	430a      	orrs	r2, r1
 800e028:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800e02a:	f107 070c 	add.w	r7, r7, #12
 800e02e:	46bd      	mov	sp, r7
 800e030:	bc80      	pop	{r7}
 800e032:	4770      	bx	lr

0800e034 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800e034:	b480      	push	{r7}
 800e036:	b083      	sub	sp, #12
 800e038:	af00      	add	r7, sp, #0
 800e03a:	6078      	str	r0, [r7, #4]
 800e03c:	460b      	mov	r3, r1
 800e03e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d00c      	beq.n	800e060 <RTC_TamperCmd+0x2c>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800e046:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e04a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e04e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e052:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e056:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	641a      	str	r2, [r3, #64]	; 0x40
 800e05e:	e00d      	b.n	800e07c <RTC_TamperCmd+0x48>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800e060:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e064:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e068:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e06c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e070:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	ea6f 0202 	mvn.w	r2, r2
 800e078:	400a      	ands	r2, r1
 800e07a:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800e07c:	f107 070c 	add.w	r7, r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	bc80      	pop	{r7}
 800e084:	4770      	bx	lr
 800e086:	bf00      	nop

0800e088 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800e090:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e094:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e098:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e09c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e0a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e0a2:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800e0a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800e0a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0b0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e0b4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e0b8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e0ba:	687a      	ldr	r2, [r7, #4]
 800e0bc:	430a      	orrs	r2, r1
 800e0be:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e0c0:	f107 070c 	add.w	r7, r7, #12
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bc80      	pop	{r7}
 800e0c8:	4770      	bx	lr
 800e0ca:	bf00      	nop

0800e0cc <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800e0d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0dc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e0e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e0e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e0e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800e0ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800e0ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e0f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e0f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e0f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e0fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	430a      	orrs	r2, r1
 800e102:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e104:	f107 070c 	add.w	r7, r7, #12
 800e108:	46bd      	mov	sp, r7
 800e10a:	bc80      	pop	{r7}
 800e10c:	4770      	bx	lr
 800e10e:	bf00      	nop

0800e110 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800e110:	b480      	push	{r7}
 800e112:	b083      	sub	sp, #12
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800e118:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e11c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e120:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e124:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e128:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e12a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800e12e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800e130:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e134:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e138:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e13c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e140:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e142:	687a      	ldr	r2, [r7, #4]
 800e144:	430a      	orrs	r2, r1
 800e146:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e148:	f107 070c 	add.w	r7, r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bc80      	pop	{r7}
 800e150:	4770      	bx	lr
 800e152:	bf00      	nop

0800e154 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800e15e:	79fb      	ldrb	r3, [r7, #7]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d00c      	beq.n	800e17e <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800e164:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e168:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e16c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e170:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e174:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e176:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e17a:	641a      	str	r2, [r3, #64]	; 0x40
 800e17c:	e00b      	b.n	800e196 <RTC_TimeStampOnTamperDetectionCmd+0x42>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800e17e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e182:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e186:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e18a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e18e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e194:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800e196:	f107 070c 	add.w	r7, r7, #12
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bc80      	pop	{r7}
 800e19e:	4770      	bx	lr

0800e1a0 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800e1a0:	b480      	push	{r7}
 800e1a2:	b083      	sub	sp, #12
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00c      	beq.n	800e1ca <RTC_TamperPullUpCmd+0x2a>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800e1b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e1b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1b8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e1bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e1c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e1c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e1c6:	641a      	str	r2, [r3, #64]	; 0x40
 800e1c8:	e00b      	b.n	800e1e2 <RTC_TamperPullUpCmd+0x42>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800e1ca:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e1ce:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e1d2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e1d6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e1da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e1dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e1e0:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 800e1e2:	f107 070c 	add.w	r7, r7, #12
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bc80      	pop	{r7}
 800e1ea:	4770      	bx	lr

0800e1ec <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b085      	sub	sp, #20
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800e1f6:	f04f 0300 	mov.w	r3, #0
 800e1fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800e1fc:	f642 0350 	movw	r3, #10320	; 0x2850
 800e200:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e204:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	18d3      	adds	r3, r2, r3
 800e210:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	683a      	ldr	r2, [r7, #0]
 800e216:	601a      	str	r2, [r3, #0]
}
 800e218:	f107 0714 	add.w	r7, r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bc80      	pop	{r7}
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop

0800e224 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800e224:	b480      	push	{r7}
 800e226:	b085      	sub	sp, #20
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800e22c:	f04f 0300 	mov.w	r3, #0
 800e230:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800e232:	f642 0350 	movw	r3, #10320	; 0x2850
 800e236:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e23a:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	18d3      	adds	r3, r2, r3
 800e246:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	f107 0714 	add.w	r7, r7, #20
 800e252:	46bd      	mov	sp, r7
 800e254:	bc80      	pop	{r7}
 800e256:	4770      	bx	lr

0800e258 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800e258:	b480      	push	{r7}
 800e25a:	b083      	sub	sp, #12
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800e260:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e264:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e268:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e26c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e270:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e272:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800e276:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800e278:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e27c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e280:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e284:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e288:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	430a      	orrs	r2, r1
 800e28e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e290:	f107 070c 	add.w	r7, r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	bc80      	pop	{r7}
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop

0800e29c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800e2a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2ac:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e2b0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e2b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e2b6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e2ba:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800e2bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2c0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e2c8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e2cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	430a      	orrs	r2, r1
 800e2d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e2d4:	f107 070c 	add.w	r7, r7, #12
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bc80      	pop	{r7}
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop

0800e2e0 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800e2e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e2ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e2f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e2f4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e2f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e2fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e2fe:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800e300:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e304:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e308:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e30c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e310:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	430a      	orrs	r2, r1
 800e316:	641a      	str	r2, [r3, #64]	; 0x40
}
 800e318:	f107 070c 	add.w	r7, r7, #12
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bc80      	pop	{r7}
 800e320:	4770      	bx	lr
 800e322:	bf00      	nop

0800e324 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e32e:	f04f 0300 	mov.w	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800e334:	f04f 0300 	mov.w	r3, #0
 800e338:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e33a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e33e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e342:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e346:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e348:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e34c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e350:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e354:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800e356:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e35a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f003 0308 	and.w	r3, r3, #8
 800e364:	2b00      	cmp	r3, #0
 800e366:	d011      	beq.n	800e38c <RTC_SynchroShiftConfig+0x68>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800e368:	e003      	b.n	800e372 <RTC_SynchroShiftConfig+0x4e>
    {
      shpfcount++;
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	f103 0301 	add.w	r3, r3, #1
 800e370:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800e372:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e376:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e37a:	68db      	ldr	r3, [r3, #12]
 800e37c:	f003 0308 	and.w	r3, r3, #8
 800e380:	2b00      	cmp	r3, #0
 800e382:	d003      	beq.n	800e38c <RTC_SynchroShiftConfig+0x68>
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e38a:	d1ee      	bne.n	800e36a <RTC_SynchroShiftConfig+0x46>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800e38c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e390:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f003 0308 	and.w	r3, r3, #8
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d121      	bne.n	800e3e2 <RTC_SynchroShiftConfig+0xbe>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800e39e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	f003 0310 	and.w	r3, r3, #16
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d114      	bne.n	800e3da <RTC_SynchroShiftConfig+0xb6>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800e3b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3b8:	6839      	ldr	r1, [r7, #0]
 800e3ba:	687a      	ldr	r2, [r7, #4]
 800e3bc:	430a      	orrs	r2, r1
 800e3be:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800e3c0:	f7fe fd2e 	bl	800ce20 <RTC_WaitForSynchro>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d103      	bne.n	800e3d2 <RTC_SynchroShiftConfig+0xae>
      {
        status = ERROR;
 800e3ca:	f04f 0300 	mov.w	r3, #0
 800e3ce:	73fb      	strb	r3, [r7, #15]
 800e3d0:	e00a      	b.n	800e3e8 <RTC_SynchroShiftConfig+0xc4>
      }
      else
      {
        status = SUCCESS;
 800e3d2:	f04f 0301 	mov.w	r3, #1
 800e3d6:	73fb      	strb	r3, [r7, #15]
 800e3d8:	e006      	b.n	800e3e8 <RTC_SynchroShiftConfig+0xc4>
      }
    }
    else
    {
      status = ERROR;
 800e3da:	f04f 0300 	mov.w	r3, #0
 800e3de:	73fb      	strb	r3, [r7, #15]
 800e3e0:	e002      	b.n	800e3e8 <RTC_SynchroShiftConfig+0xc4>
    }
  }
  else
  {
    status = ERROR;
 800e3e2:	f04f 0300 	mov.w	r3, #0
 800e3e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800e3e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e3ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e3f0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e3f4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800e3f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f107 0710 	add.w	r7, r7, #16
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop

0800e404 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
 800e40c:	460b      	mov	r3, r1
 800e40e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800e410:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e414:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e418:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800e41c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800e41e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e422:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e426:	f04f 0253 	mov.w	r2, #83	; 0x53
 800e42a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800e42c:	78fb      	ldrb	r3, [r7, #3]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d01c      	beq.n	800e46c <RTC_ITConfig+0x68>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800e432:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e436:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e43a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e43e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e442:	6891      	ldr	r1, [r2, #8]
 800e444:	687a      	ldr	r2, [r7, #4]
 800e446:	f022 0204 	bic.w	r2, r2, #4
 800e44a:	430a      	orrs	r2, r1
 800e44c:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800e44e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e452:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e456:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e45a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e45e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	f002 0204 	and.w	r2, r2, #4
 800e466:	430a      	orrs	r2, r1
 800e468:	641a      	str	r2, [r3, #64]	; 0x40
 800e46a:	e01f      	b.n	800e4ac <RTC_ITConfig+0xa8>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800e46c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e470:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e474:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e478:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e47c:	6891      	ldr	r1, [r2, #8]
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	f022 0204 	bic.w	r2, r2, #4
 800e484:	ea6f 0202 	mvn.w	r2, r2
 800e488:	400a      	ands	r2, r1
 800e48a:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800e48c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e490:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e494:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e498:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e49c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	f002 0204 	and.w	r2, r2, #4
 800e4a4:	ea6f 0202 	mvn.w	r2, r2
 800e4a8:	400a      	ands	r2, r1
 800e4aa:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800e4ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4b0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4b4:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800e4b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e4ba:	f107 070c 	add.w	r7, r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bc80      	pop	{r7}
 800e4c2:	4770      	bx	lr

0800e4c4 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b085      	sub	sp, #20
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800e4cc:	f04f 0300 	mov.w	r3, #0
 800e4d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800e4d2:	f04f 0300 	mov.w	r3, #0
 800e4d6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800e4d8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e4dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e4e0:	68da      	ldr	r2, [r3, #12]
 800e4e2:	f643 7377 	movw	r3, #16247	; 0x3f77
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	4013      	ands	r3, r2
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d003      	beq.n	800e4fc <RTC_GetFlagStatus+0x38>
  {
    bitstatus = SET;
 800e4f4:	f04f 0301 	mov.w	r3, #1
 800e4f8:	73fb      	strb	r3, [r7, #15]
 800e4fa:	e002      	b.n	800e502 <RTC_GetFlagStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800e4fc:	f04f 0300 	mov.w	r3, #0
 800e500:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
}
 800e504:	4618      	mov	r0, r3
 800e506:	f107 0714 	add.w	r7, r7, #20
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bc80      	pop	{r7}
 800e50e:	4770      	bx	lr

0800e510 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800e518:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e51c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800e526:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e52a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e52e:	ea6f 0102 	mvn.w	r1, r2
 800e532:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e536:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e53a:	68d2      	ldr	r2, [r2, #12]
 800e53c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e540:	430a      	orrs	r2, r1
 800e542:	60da      	str	r2, [r3, #12]
}
 800e544:	f107 070c 	add.w	r7, r7, #12
 800e548:	46bd      	mov	sp, r7
 800e54a:	bc80      	pop	{r7}
 800e54c:	4770      	bx	lr
 800e54e:	bf00      	nop

0800e550 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800e550:	b480      	push	{r7}
 800e552:	b087      	sub	sp, #28
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800e558:	f04f 0300 	mov.w	r3, #0
 800e55c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800e55e:	f04f 0300 	mov.w	r3, #0
 800e562:	613b      	str	r3, [r7, #16]
 800e564:	f04f 0300 	mov.w	r3, #0
 800e568:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800e56a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e56e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e574:	f003 0304 	and.w	r3, r3, #4
 800e578:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800e57a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e57e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e582:	689a      	ldr	r2, [r3, #8]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	401a      	ands	r2, r3
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	400b      	ands	r3, r1
 800e592:	4313      	orrs	r3, r2
 800e594:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800e596:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e59a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e59e:	68da      	ldr	r2, [r3, #12]
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e5a6:	4013      	ands	r3, r2
 800e5a8:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d00a      	beq.n	800e5c6 <RTC_GetITStatus+0x76>
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800e5b6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d003      	beq.n	800e5c6 <RTC_GetITStatus+0x76>
  {
    bitstatus = SET;
 800e5be:	f04f 0301 	mov.w	r3, #1
 800e5c2:	75fb      	strb	r3, [r7, #23]
 800e5c4:	e002      	b.n	800e5cc <RTC_GetITStatus+0x7c>
  }
  else
  {
    bitstatus = RESET;
 800e5c6:	f04f 0300 	mov.w	r3, #0
 800e5ca:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800e5cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f107 071c 	add.w	r7, r7, #28
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bc80      	pop	{r7}
 800e5d8:	4770      	bx	lr
 800e5da:	bf00      	nop

0800e5dc <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b085      	sub	sp, #20
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e5e4:	f04f 0300 	mov.w	r3, #0
 800e5e8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e5f0:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800e5f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e5f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800e600:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800e604:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e608:	ea6f 0102 	mvn.w	r1, r2
 800e60c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800e610:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800e614:	68d2      	ldr	r2, [r2, #12]
 800e616:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800e61a:	430a      	orrs	r2, r1
 800e61c:	60da      	str	r2, [r3, #12]
}
 800e61e:	f107 0714 	add.w	r7, r7, #20
 800e622:	46bd      	mov	sp, r7
 800e624:	bc80      	pop	{r7}
 800e626:	4770      	bx	lr

0800e628 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800e628:	b480      	push	{r7}
 800e62a:	b085      	sub	sp, #20
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	4603      	mov	r3, r0
 800e630:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800e632:	f04f 0300 	mov.w	r3, #0
 800e636:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800e638:	e007      	b.n	800e64a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800e63a:	7bfb      	ldrb	r3, [r7, #15]
 800e63c:	f103 0301 	add.w	r3, r3, #1
 800e640:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800e642:	79fb      	ldrb	r3, [r7, #7]
 800e644:	f1a3 030a 	sub.w	r3, r3, #10
 800e648:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	2b09      	cmp	r3, #9
 800e64e:	d8f4      	bhi.n	800e63a <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800e650:	7bfb      	ldrb	r3, [r7, #15]
 800e652:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e656:	b2da      	uxtb	r2, r3
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	4313      	orrs	r3, r2
 800e65c:	b2db      	uxtb	r3, r3
}
 800e65e:	4618      	mov	r0, r3
 800e660:	f107 0714 	add.w	r7, r7, #20
 800e664:	46bd      	mov	sp, r7
 800e666:	bc80      	pop	{r7}
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop

0800e66c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	4603      	mov	r3, r0
 800e674:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800e676:	f04f 0300 	mov.w	r3, #0
 800e67a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800e67c:	79fb      	ldrb	r3, [r7, #7]
 800e67e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800e682:	b2db      	uxtb	r3, r3
 800e684:	461a      	mov	r2, r3
 800e686:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800e68a:	18d3      	adds	r3, r2, r3
 800e68c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e690:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	f003 030f 	and.w	r3, r3, #15
 800e698:	b2da      	uxtb	r2, r3
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	18d3      	adds	r3, r2, r3
 800e69e:	b2db      	uxtb	r3, r3
}
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	f107 0714 	add.w	r7, r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bc80      	pop	{r7}
 800e6aa:	4770      	bx	lr

0800e6ac <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800e6b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e6b4:	f04f 0101 	mov.w	r1, #1
 800e6b8:	f7fd ff80 	bl	800c5bc <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800e6bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e6c0:	f04f 0100 	mov.w	r1, #0
 800e6c4:	f7fd ff7a 	bl	800c5bc <RCC_APB2PeriphResetCmd>
}
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop

0800e6cc <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e6d4:	f04f 0300 	mov.w	r3, #0
 800e6d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800e6da:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e6de:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800e6ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e6f0:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	7d1b      	ldrb	r3, [r3, #20]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800e702:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	68db      	ldr	r3, [r3, #12]
 800e708:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800e70e:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	691b      	ldr	r3, [r3, #16]
 800e714:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4313      	orrs	r3, r2
 800e71a:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800e71c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e720:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	605a      	str	r2, [r3, #4]
}
 800e728:	f107 0714 	add.w	r7, r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bc80      	pop	{r7}
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop

0800e734 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800e734:	b480      	push	{r7}
 800e736:	b083      	sub	sp, #12
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f04f 0200 	mov.w	r2, #0
 800e742:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f04f 0200 	mov.w	r2, #0
 800e74a:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f04f 0200 	mov.w	r2, #0
 800e752:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f04f 0200 	mov.w	r2, #0
 800e75a:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f04f 0200 	mov.w	r2, #0
 800e762:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f04f 0200 	mov.w	r2, #0
 800e76a:	611a      	str	r2, [r3, #16]
}
 800e76c:	f107 070c 	add.w	r7, r7, #12
 800e770:	46bd      	mov	sp, r7
 800e772:	bc80      	pop	{r7}
 800e774:	4770      	bx	lr
 800e776:	bf00      	nop

0800e778 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	4603      	mov	r3, r0
 800e780:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800e782:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800e786:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e78a:	79fa      	ldrb	r2, [r7, #7]
 800e78c:	601a      	str	r2, [r3, #0]
}
 800e78e:	f107 070c 	add.w	r7, r7, #12
 800e792:	46bd      	mov	sp, r7
 800e794:	bc80      	pop	{r7}
 800e796:	4770      	bx	lr

0800e798 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800e798:	b480      	push	{r7}
 800e79a:	b083      	sub	sp, #12
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800e7a0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e7a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e7a8:	687a      	ldr	r2, [r7, #4]
 800e7aa:	601a      	str	r2, [r3, #0]
}
 800e7ac:	f107 070c 	add.w	r7, r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bc80      	pop	{r7}
 800e7b4:	4770      	bx	lr
 800e7b6:	bf00      	nop

0800e7b8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800e7bc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e7c0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	f003 0303 	and.w	r3, r3, #3
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	46bd      	mov	sp, r7
 800e7ce:	bc80      	pop	{r7}
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop

0800e7d4 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800e7d4:	b480      	push	{r7}
 800e7d6:	b085      	sub	sp, #20
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e7dc:	f04f 0300 	mov.w	r3, #0
 800e7e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800e7e2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e7e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	6812      	ldr	r2, [r2, #0]
 800e7ee:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800e7f0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e7f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e802:	f023 030f 	bic.w	r3, r3, #15
 800e806:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685a      	ldr	r2, [r3, #4]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	68db      	ldr	r3, [r3, #12]
 800e816:	431a      	orrs	r2, r3
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	691b      	ldr	r3, [r3, #16]
 800e81c:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800e81e:	68fa      	ldr	r2, [r7, #12]
 800e820:	4313      	orrs	r3, r2
 800e822:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800e824:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e828:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e82c:	68fa      	ldr	r2, [r7, #12]
 800e82e:	60da      	str	r2, [r3, #12]
}
 800e830:	f107 0714 	add.w	r7, r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	bc80      	pop	{r7}
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop

0800e83c <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800e83c:	b480      	push	{r7}
 800e83e:	b083      	sub	sp, #12
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f04f 0200 	mov.w	r2, #0
 800e84a:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f04f 0200 	mov.w	r2, #0
 800e852:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f04f 0200 	mov.w	r2, #0
 800e85a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f04f 0200 	mov.w	r2, #0
 800e862:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	f04f 0200 	mov.w	r2, #0
 800e86a:	611a      	str	r2, [r3, #16]
}
 800e86c:	f107 070c 	add.w	r7, r7, #12
 800e870:	46bd      	mov	sp, r7
 800e872:	bc80      	pop	{r7}
 800e874:	4770      	bx	lr
 800e876:	bf00      	nop

0800e878 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800e878:	b480      	push	{r7}
 800e87a:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800e87c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e880:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	b2db      	uxtb	r3, r3
}
 800e888:	4618      	mov	r0, r3
 800e88a:	46bd      	mov	sp, r7
 800e88c:	bc80      	pop	{r7}
 800e88e:	4770      	bx	lr

0800e890 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800e890:	b480      	push	{r7}
 800e892:	b085      	sub	sp, #20
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800e898:	f04f 0300 	mov.w	r3, #0
 800e89c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	f642 4314 	movw	r3, #11284	; 0x2c14
 800e8a4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e8a8:	18d3      	adds	r3, r2, r3
 800e8aa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
}
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f107 0714 	add.w	r7, r7, #20
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bc80      	pop	{r7}
 800e8ba:	4770      	bx	lr

0800e8bc <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800e8bc:	b480      	push	{r7}
 800e8be:	b085      	sub	sp, #20
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800e8c4:	f04f 0300 	mov.w	r3, #0
 800e8c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800e8ca:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e8ce:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	6812      	ldr	r2, [r2, #0]
 800e8d6:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800e8d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e8dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e8e0:	687a      	ldr	r2, [r7, #4]
 800e8e2:	6852      	ldr	r2, [r2, #4]
 800e8e4:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800e8e6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e8ea:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f0:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800e8f8:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	689a      	ldr	r2, [r3, #8]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	691b      	ldr	r3, [r3, #16]
 800e908:	431a      	orrs	r2, r3
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	695b      	ldr	r3, [r3, #20]
 800e90e:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800e910:	68fa      	ldr	r2, [r7, #12]
 800e912:	4313      	orrs	r3, r2
 800e914:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800e916:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e91a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e91e:	68fa      	ldr	r2, [r7, #12]
 800e920:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800e922:	f107 0714 	add.w	r7, r7, #20
 800e926:	46bd      	mov	sp, r7
 800e928:	bc80      	pop	{r7}
 800e92a:	4770      	bx	lr

0800e92c <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f04f 32ff 	mov.w	r2, #4294967295
 800e93a:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f04f 0200 	mov.w	r2, #0
 800e942:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f04f 0200 	mov.w	r2, #0
 800e94a:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f04f 0200 	mov.w	r2, #0
 800e952:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f04f 0200 	mov.w	r2, #0
 800e95a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f04f 0200 	mov.w	r2, #0
 800e962:	615a      	str	r2, [r3, #20]
}
 800e964:	f107 070c 	add.w	r7, r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	bc80      	pop	{r7}
 800e96c:	4770      	bx	lr
 800e96e:	bf00      	nop

0800e970 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800e970:	b480      	push	{r7}
 800e972:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800e974:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e978:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e97c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800e97e:	4618      	mov	r0, r3
 800e980:	46bd      	mov	sp, r7
 800e982:	bc80      	pop	{r7}
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop

0800e988 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800e988:	b480      	push	{r7}
 800e98a:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800e98c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e990:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e998:	4618      	mov	r0, r3
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bc80      	pop	{r7}
 800e99e:	4770      	bx	lr

0800e9a0 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800e9a8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e9ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800e9b6:	f107 070c 	add.w	r7, r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bc80      	pop	{r7}
 800e9be:	4770      	bx	lr

0800e9c0 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800e9c0:	b480      	push	{r7}
 800e9c2:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800e9c4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800e9c8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e9cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bc80      	pop	{r7}
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop

0800e9d8 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800e9d8:	b480      	push	{r7}
 800e9da:	b083      	sub	sp, #12
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	4603      	mov	r3, r0
 800e9e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800e9e2:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800e9e6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800e9ea:	79fa      	ldrb	r2, [r7, #7]
 800e9ec:	601a      	str	r2, [r3, #0]
}
 800e9ee:	f107 070c 	add.w	r7, r7, #12
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bc80      	pop	{r7}
 800e9f6:	4770      	bx	lr

0800e9f8 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800e9f8:	b480      	push	{r7}
 800e9fa:	b083      	sub	sp, #12
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4603      	mov	r3, r0
 800ea00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800ea02:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800ea06:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ea0a:	79fa      	ldrb	r2, [r7, #7]
 800ea0c:	601a      	str	r2, [r3, #0]
}
 800ea0e:	f107 070c 	add.w	r7, r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bc80      	pop	{r7}
 800ea16:	4770      	bx	lr

0800ea18 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b083      	sub	sp, #12
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800ea20:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800ea24:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	601a      	str	r2, [r3, #0]
}
 800ea2c:	f107 070c 	add.w	r7, r7, #12
 800ea30:	46bd      	mov	sp, r7
 800ea32:	bc80      	pop	{r7}
 800ea34:	4770      	bx	lr
 800ea36:	bf00      	nop

0800ea38 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800ea38:	b480      	push	{r7}
 800ea3a:	b083      	sub	sp, #12
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	4603      	mov	r3, r0
 800ea40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800ea42:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800ea46:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ea4a:	79fa      	ldrb	r2, [r7, #7]
 800ea4c:	601a      	str	r2, [r3, #0]
}
 800ea4e:	f107 070c 	add.w	r7, r7, #12
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bc80      	pop	{r7}
 800ea56:	4770      	bx	lr

0800ea58 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800ea58:	b480      	push	{r7}
 800ea5a:	b083      	sub	sp, #12
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	4603      	mov	r3, r0
 800ea60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800ea62:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800ea66:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ea6a:	79fa      	ldrb	r2, [r7, #7]
 800ea6c:	601a      	str	r2, [r3, #0]
}
 800ea6e:	f107 070c 	add.w	r7, r7, #12
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bc80      	pop	{r7}
 800ea76:	4770      	bx	lr

0800ea78 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	4603      	mov	r3, r0
 800ea80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800ea82:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800ea86:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ea8a:	79fa      	ldrb	r2, [r7, #7]
 800ea8c:	601a      	str	r2, [r3, #0]
}
 800ea8e:	f107 070c 	add.w	r7, r7, #12
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bc80      	pop	{r7}
 800ea96:	4770      	bx	lr

0800ea98 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800eaa2:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800eaa6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800eaaa:	79fa      	ldrb	r2, [r7, #7]
 800eaac:	f002 0201 	and.w	r2, r2, #1
 800eab0:	2a00      	cmp	r2, #0
 800eab2:	bf14      	ite	ne
 800eab4:	2200      	movne	r2, #0
 800eab6:	2201      	moveq	r2, #1
 800eab8:	601a      	str	r2, [r3, #0]
}
 800eaba:	f107 070c 	add.w	r7, r7, #12
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bc80      	pop	{r7}
 800eac2:	4770      	bx	lr

0800eac4 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	4603      	mov	r3, r0
 800eacc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800eace:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800ead2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800ead6:	79fa      	ldrb	r2, [r7, #7]
 800ead8:	601a      	str	r2, [r3, #0]
}
 800eada:	f107 070c 	add.w	r7, r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	bc80      	pop	{r7}
 800eae2:	4770      	bx	lr

0800eae4 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800eaee:	f248 538c 	movw	r3, #34188	; 0x858c
 800eaf2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800eaf6:	79fa      	ldrb	r2, [r7, #7]
 800eaf8:	601a      	str	r2, [r3, #0]
}
 800eafa:	f107 070c 	add.w	r7, r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bc80      	pop	{r7}
 800eb02:	4770      	bx	lr

0800eb04 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800eb10:	78fb      	ldrb	r3, [r7, #3]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00c      	beq.n	800eb30 <SDIO_ITConfig+0x2c>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800eb16:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb1a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb1e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800eb22:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800eb26:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800eb28:	687a      	ldr	r2, [r7, #4]
 800eb2a:	430a      	orrs	r2, r1
 800eb2c:	63da      	str	r2, [r3, #60]	; 0x3c
 800eb2e:	e00d      	b.n	800eb4c <SDIO_ITConfig+0x48>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800eb30:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb34:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb38:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800eb3c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800eb40:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	ea6f 0202 	mvn.w	r2, r2
 800eb48:	400a      	ands	r2, r1
 800eb4a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800eb4c:	f107 070c 	add.w	r7, r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bc80      	pop	{r7}
 800eb54:	4770      	bx	lr
 800eb56:	bf00      	nop

0800eb58 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800eb58:	b480      	push	{r7}
 800eb5a:	b085      	sub	sp, #20
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800eb60:	f04f 0300 	mov.w	r3, #0
 800eb64:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800eb66:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eb6a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4013      	ands	r3, r2
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d003      	beq.n	800eb80 <SDIO_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800eb78:	f04f 0301 	mov.w	r3, #1
 800eb7c:	73fb      	strb	r3, [r7, #15]
 800eb7e:	e002      	b.n	800eb86 <SDIO_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800eb80:	f04f 0300 	mov.w	r3, #0
 800eb84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800eb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	f107 0714 	add.w	r7, r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bc80      	pop	{r7}
 800eb92:	4770      	bx	lr

0800eb94 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800eb9c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800eba0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	639a      	str	r2, [r3, #56]	; 0x38
}
 800eba8:	f107 070c 	add.w	r7, r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bc80      	pop	{r7}
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop

0800ebb4 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800ebb4:	b480      	push	{r7}
 800ebb6:	b085      	sub	sp, #20
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800ebbc:	f04f 0300 	mov.w	r3, #0
 800ebc0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800ebc2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ebc6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ebca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	4013      	ands	r3, r2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d003      	beq.n	800ebdc <SDIO_GetITStatus+0x28>
  {
    bitstatus = SET;
 800ebd4:	f04f 0301 	mov.w	r3, #1
 800ebd8:	73fb      	strb	r3, [r7, #15]
 800ebda:	e002      	b.n	800ebe2 <SDIO_GetITStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800ebdc:	f04f 0300 	mov.w	r3, #0
 800ebe0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ebe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f107 0714 	add.w	r7, r7, #20
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bc80      	pop	{r7}
 800ebee:	4770      	bx	lr

0800ebf0 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800ebf8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800ebfc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ec00:	687a      	ldr	r2, [r7, #4]
 800ec02:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ec04:	f107 070c 	add.w	r7, r7, #12
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bc80      	pop	{r7}
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop

0800ec10 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800ec18:	687a      	ldr	r2, [r7, #4]
 800ec1a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ec1e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d10c      	bne.n	800ec40 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800ec26:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ec2a:	f04f 0101 	mov.w	r1, #1
 800ec2e:	f7fd fcc5 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800ec32:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ec36:	f04f 0100 	mov.w	r1, #0
 800ec3a:	f7fd fcbf 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 800ec3e:	e026      	b.n	800ec8e <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800ec40:	687a      	ldr	r2, [r7, #4]
 800ec42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ec46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d10c      	bne.n	800ec68 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800ec4e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ec52:	f04f 0101 	mov.w	r1, #1
 800ec56:	f7fd fc87 	bl	800c568 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800ec5a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ec5e:	f04f 0100 	mov.w	r1, #0
 800ec62:	f7fd fc81 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800ec66:	e012      	b.n	800ec8e <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ec6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ec72:	429a      	cmp	r2, r3
 800ec74:	d10b      	bne.n	800ec8e <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800ec76:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ec7a:	f04f 0101 	mov.w	r1, #1
 800ec7e:	f7fd fc73 	bl	800c568 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800ec82:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ec86:	f04f 0100 	mov.w	r1, #0
 800ec8a:	f7fd fc6d 	bl	800c568 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800ec8e:	f107 0708 	add.w	r7, r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
 800ec96:	bf00      	nop

0800ec98 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800eca2:	f04f 0300 	mov.w	r3, #0
 800eca6:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	881b      	ldrh	r3, [r3, #0]
 800ecac:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800ecae:	89fb      	ldrh	r3, [r7, #14]
 800ecb0:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800ecb4:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	881a      	ldrh	r2, [r3, #0]
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	885b      	ldrh	r3, [r3, #2]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ecc6:	4313      	orrs	r3, r2
 800ecc8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800ecca:	683b      	ldr	r3, [r7, #0]
 800eccc:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ecce:	4313      	orrs	r3, r2
 800ecd0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ecd6:	4313      	orrs	r3, r2
 800ecd8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ecde:	4313      	orrs	r3, r2
 800ece0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ece6:	4313      	orrs	r3, r2
 800ece8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800ecee:	4313      	orrs	r3, r2
 800ecf0:	b29a      	uxth	r2, r3
 800ecf2:	89fb      	ldrh	r3, [r7, #14]
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	89fa      	ldrh	r2, [r7, #14]
 800ecfc:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	8b9b      	ldrh	r3, [r3, #28]
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ed08:	b29a      	uxth	r2, r3
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	8a1a      	ldrh	r2, [r3, #16]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	821a      	strh	r2, [r3, #16]
}
 800ed16:	f107 0714 	add.w	r7, r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	bc80      	pop	{r7}
 800ed1e:	4770      	bx	lr

0800ed20 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b08b      	sub	sp, #44	; 0x2c
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800ed2a:	f04f 0300 	mov.w	r3, #0
 800ed2e:	837b      	strh	r3, [r7, #26]
 800ed30:	f04f 0302 	mov.w	r3, #2
 800ed34:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed36:	f04f 0300 	mov.w	r3, #0
 800ed3a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ed3c:	f04f 0301 	mov.w	r3, #1
 800ed40:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800ed42:	f04f 0300 	mov.w	r3, #0
 800ed46:	61fb      	str	r3, [r7, #28]
 800ed48:	f04f 0300 	mov.w	r3, #0
 800ed4c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800ed4e:	f04f 0300 	mov.w	r3, #0
 800ed52:	613b      	str	r3, [r7, #16]
 800ed54:	f04f 0300 	mov.w	r3, #0
 800ed58:	60fb      	str	r3, [r7, #12]
 800ed5a:	f04f 0300 	mov.w	r3, #0
 800ed5e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	8b9b      	ldrh	r3, [r3, #28]
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800ed6a:	f023 031f 	bic.w	r3, r3, #31
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f04f 0202 	mov.w	r2, #2
 800ed7a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8b9b      	ldrh	r3, [r3, #28]
 800ed80:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	689b      	ldr	r3, [r3, #8]
 800ed86:	2b02      	cmp	r3, #2
 800ed88:	d106      	bne.n	800ed98 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800ed8a:	f04f 0300 	mov.w	r3, #0
 800ed8e:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800ed90:	f04f 0302 	mov.w	r3, #2
 800ed94:	84fb      	strh	r3, [r7, #38]	; 0x26
 800ed96:	e09a      	b.n	800eece <I2S_Init+0x1ae>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	889b      	ldrh	r3, [r3, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d103      	bne.n	800eda8 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800eda0:	f04f 0301 	mov.w	r3, #1
 800eda4:	847b      	strh	r3, [r7, #34]	; 0x22
 800eda6:	e002      	b.n	800edae <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800eda8:	f04f 0302 	mov.w	r3, #2
 800edac:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800edae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d00b      	beq.n	800edd8 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800edc0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800edc8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800edcc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800edd0:	6892      	ldr	r2, [r2, #8]
 800edd2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800edd6:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800edd8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800eddc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ede0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800ede4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ede8:	4013      	ands	r3, r2
 800edea:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800edee:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800edf2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800edf6:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800edf8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800edfc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ee00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee04:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ee08:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800ee0c:	f003 0307 	and.w	r3, r3, #7
 800ee10:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800ee12:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800ee16:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee20:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800ee22:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800ee26:	f2c0 037a 	movt	r3, #122	; 0x7a
 800ee2a:	693a      	ldr	r2, [r7, #16]
 800ee2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ee30:	68fa      	ldr	r2, [r7, #12]
 800ee32:	fb02 f203 	mul.w	r2, r2, r3
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee3c:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	88db      	ldrh	r3, [r3, #6]
 800ee42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee46:	d113      	bne.n	800ee70 <I2S_Init+0x150>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800ee48:	697b      	ldr	r3, [r7, #20]
 800ee4a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800ee4e:	4613      	mov	r3, r2
 800ee50:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee54:	189b      	adds	r3, r3, r2
 800ee56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	689b      	ldr	r3, [r3, #8]
 800ee60:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	f103 0305 	add.w	r3, r3, #5
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	61fb      	str	r3, [r7, #28]
 800ee6e:	e015      	b.n	800ee9c <I2S_Init+0x17c>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800ee70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ee72:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800ee76:	697a      	ldr	r2, [r7, #20]
 800ee78:	fbb2 f2f3 	udiv	r2, r2, r3
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ee82:	189b      	adds	r3, r3, r2
 800ee84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ee88:	461a      	mov	r2, r3
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	f103 0305 	add.w	r3, r3, #5
 800ee98:	b29b      	uxth	r3, r3
 800ee9a:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800ee9c:	69fa      	ldr	r2, [r7, #28]
 800ee9e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800eea2:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800eea6:	fba3 1302 	umull	r1, r3, r3, r2
 800eeaa:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800eeae:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800eeb0:	69fb      	ldr	r3, [r7, #28]
 800eeb2:	b29b      	uxth	r3, r3
 800eeb4:	f003 0301 	and.w	r3, r3, #1
 800eeb8:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800eeba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eebc:	69fa      	ldr	r2, [r7, #28]
 800eebe:	1ad3      	subs	r3, r2, r3
 800eec0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800eec4:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800eec6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eec8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800eecc:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800eece:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d902      	bls.n	800eeda <I2S_Init+0x1ba>
 800eed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eed6:	2bff      	cmp	r3, #255	; 0xff
 800eed8:	d905      	bls.n	800eee6 <I2S_Init+0x1c6>
  {
    /* Set the default values */
    i2sdiv = 2;
 800eeda:	f04f 0302 	mov.w	r3, #2
 800eede:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800eee0:	f04f 0300 	mov.w	r3, #0
 800eee4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	88da      	ldrh	r2, [r3, #6]
 800eeea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eeec:	4313      	orrs	r3, r2
 800eeee:	b29a      	uxth	r2, r3
 800eef0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eef2:	4313      	orrs	r3, r2
 800eef4:	b29a      	uxth	r2, r3
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	8859      	ldrh	r1, [r3, #2]
 800ef02:	683b      	ldr	r3, [r7, #0]
 800ef04:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800ef0a:	4303      	orrs	r3, r0
 800ef0c:	b29b      	uxth	r3, r3
 800ef0e:	430b      	orrs	r3, r1
 800ef10:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800ef12:	4313      	orrs	r3, r2
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	8b7b      	ldrh	r3, [r7, #26]
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ef20:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	8b7a      	ldrh	r2, [r7, #26]
 800ef26:	839a      	strh	r2, [r3, #28]
}
 800ef28:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bc80      	pop	{r7}
 800ef30:	4770      	bx	lr
 800ef32:	bf00      	nop

0800ef34 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	f04f 0200 	mov.w	r2, #0
 800ef42:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f04f 0200 	mov.w	r2, #0
 800ef4a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f04f 0200 	mov.w	r2, #0
 800ef52:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f04f 0200 	mov.w	r2, #0
 800ef5a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f04f 0200 	mov.w	r2, #0
 800ef62:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f04f 0200 	mov.w	r2, #0
 800ef72:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f04f 0200 	mov.w	r2, #0
 800ef7a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f04f 0207 	mov.w	r2, #7
 800ef82:	821a      	strh	r2, [r3, #16]
}
 800ef84:	f107 070c 	add.w	r7, r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bc80      	pop	{r7}
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop

0800ef90 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	f04f 0200 	mov.w	r2, #0
 800ef9e:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f04f 0200 	mov.w	r2, #0
 800efa6:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f04f 0200 	mov.w	r2, #0
 800efae:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f04f 0200 	mov.w	r2, #0
 800efb6:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f04f 0202 	mov.w	r2, #2
 800efbe:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	f04f 0200 	mov.w	r2, #0
 800efc6:	819a      	strh	r2, [r3, #12]
}
 800efc8:	f107 070c 	add.w	r7, r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	bc80      	pop	{r7}
 800efd0:	4770      	bx	lr
 800efd2:	bf00      	nop

0800efd4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	460b      	mov	r3, r1
 800efde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800efe0:	78fb      	ldrb	r3, [r7, #3]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d008      	beq.n	800eff8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	881b      	ldrh	r3, [r3, #0]
 800efea:	b29b      	uxth	r3, r3
 800efec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	801a      	strh	r2, [r3, #0]
 800eff6:	e007      	b.n	800f008 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	b29b      	uxth	r3, r3
 800effe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f002:	b29a      	uxth	r2, r3
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	801a      	strh	r2, [r3, #0]
  }
}
 800f008:	f107 070c 	add.w	r7, r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bc80      	pop	{r7}
 800f010:	4770      	bx	lr
 800f012:	bf00      	nop

0800f014 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	460b      	mov	r3, r1
 800f01e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800f020:	78fb      	ldrb	r3, [r7, #3]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d008      	beq.n	800f038 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8b9b      	ldrh	r3, [r3, #28]
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f030:	b29a      	uxth	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	839a      	strh	r2, [r3, #28]
 800f036:	e007      	b.n	800f048 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	8b9b      	ldrh	r3, [r3, #28]
 800f03c:	b29b      	uxth	r3, r3
 800f03e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f042:	b29a      	uxth	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	839a      	strh	r2, [r3, #28]
  }
}
 800f048:	f107 070c 	add.w	r7, r7, #12
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bc80      	pop	{r7}
 800f050:	4770      	bx	lr
 800f052:	bf00      	nop

0800f054 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800f054:	b480      	push	{r7}
 800f056:	b083      	sub	sp, #12
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	460b      	mov	r3, r1
 800f05e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	881b      	ldrh	r3, [r3, #0]
 800f064:	b29b      	uxth	r3, r3
 800f066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	881b      	ldrh	r3, [r3, #0]
 800f074:	b29a      	uxth	r2, r3
 800f076:	887b      	ldrh	r3, [r7, #2]
 800f078:	4313      	orrs	r3, r2
 800f07a:	b29a      	uxth	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	801a      	strh	r2, [r3, #0]
}
 800f080:	f107 070c 	add.w	r7, r7, #12
 800f084:	46bd      	mov	sp, r7
 800f086:	bc80      	pop	{r7}
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop

0800f08c <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	460b      	mov	r3, r1
 800f096:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800f098:	887b      	ldrh	r3, [r7, #2]
 800f09a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f09e:	d108      	bne.n	800f0b2 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	881b      	ldrh	r3, [r3, #0]
 800f0a4:	b29b      	uxth	r3, r3
 800f0a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	801a      	strh	r2, [r3, #0]
 800f0b0:	e007      	b.n	800f0c2 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	881b      	ldrh	r3, [r3, #0]
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f0bc:	b29a      	uxth	r2, r3
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	801a      	strh	r2, [r3, #0]
  }
}
 800f0c2:	f107 070c 	add.w	r7, r7, #12
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bc80      	pop	{r7}
 800f0ca:	4770      	bx	lr

0800f0cc <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800f0cc:	b480      	push	{r7}
 800f0ce:	b083      	sub	sp, #12
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800f0d8:	887a      	ldrh	r2, [r7, #2]
 800f0da:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d008      	beq.n	800f0f4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	881b      	ldrh	r3, [r3, #0]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	801a      	strh	r2, [r3, #0]
 800f0f2:	e007      	b.n	800f104 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	b29b      	uxth	r3, r3
 800f0fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	801a      	strh	r2, [r3, #0]
  }
}
 800f104:	f107 070c 	add.w	r7, r7, #12
 800f108:	46bd      	mov	sp, r7
 800f10a:	bc80      	pop	{r7}
 800f10c:	4770      	bx	lr
 800f10e:	bf00      	nop

0800f110 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f110:	b480      	push	{r7}
 800f112:	b083      	sub	sp, #12
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f11c:	78fb      	ldrb	r3, [r7, #3]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d008      	beq.n	800f134 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	889b      	ldrh	r3, [r3, #4]
 800f126:	b29b      	uxth	r3, r3
 800f128:	f043 0304 	orr.w	r3, r3, #4
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	809a      	strh	r2, [r3, #4]
 800f132:	e007      	b.n	800f144 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	889b      	ldrh	r3, [r3, #4]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	f023 0304 	bic.w	r3, r3, #4
 800f13e:	b29a      	uxth	r2, r3
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	809a      	strh	r2, [r3, #4]
  }
}
 800f144:	f107 070c 	add.w	r7, r7, #12
 800f148:	46bd      	mov	sp, r7
 800f14a:	bc80      	pop	{r7}
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop

0800f150 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	460b      	mov	r3, r1
 800f15a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800f15c:	78fb      	ldrb	r3, [r7, #3]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d008      	beq.n	800f174 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	889b      	ldrh	r3, [r3, #4]
 800f166:	b29b      	uxth	r3, r3
 800f168:	f043 0310 	orr.w	r3, r3, #16
 800f16c:	b29a      	uxth	r2, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	809a      	strh	r2, [r3, #4]
 800f172:	e007      	b.n	800f184 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	889b      	ldrh	r3, [r3, #4]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	f023 0310 	bic.w	r3, r3, #16
 800f17e:	b29a      	uxth	r2, r3
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	809a      	strh	r2, [r3, #4]
  }
}
 800f184:	f107 070c 	add.w	r7, r7, #12
 800f188:	46bd      	mov	sp, r7
 800f18a:	bc80      	pop	{r7}
 800f18c:	4770      	bx	lr
 800f18e:	bf00      	nop

0800f190 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800f19a:	f04f 0300 	mov.w	r3, #0
 800f19e:	81bb      	strh	r3, [r7, #12]
 800f1a0:	f04f 0300 	mov.w	r3, #0
 800f1a4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	8b9b      	ldrh	r3, [r3, #28]
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800f1b0:	f023 031f 	bic.w	r3, r3, #31
 800f1b4:	b29a      	uxth	r2, r3
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f04f 0202 	mov.w	r2, #2
 800f1c0:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	8b9b      	ldrh	r3, [r3, #28]
 800f1c6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	881b      	ldrh	r3, [r3, #0]
 800f1cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f1d0:	d003      	beq.n	800f1da <I2S_FullDuplexConfig+0x4a>
 800f1d2:	683b      	ldr	r3, [r7, #0]
 800f1d4:	881b      	ldrh	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d103      	bne.n	800f1e2 <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 800f1da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f1de:	81fb      	strh	r3, [r7, #14]
 800f1e0:	e00c      	b.n	800f1fc <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f1ea:	d004      	beq.n	800f1f6 <I2S_FullDuplexConfig+0x66>
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	881b      	ldrh	r3, [r3, #0]
 800f1f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f1f4:	d102      	bne.n	800f1fc <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 800f1f6:	f04f 0300 	mov.w	r3, #0
 800f1fa:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	885a      	ldrh	r2, [r3, #2]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800f208:	430b      	orrs	r3, r1
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	4313      	orrs	r3, r2
 800f20e:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800f210:	89fb      	ldrh	r3, [r7, #14]
 800f212:	4313      	orrs	r3, r2
 800f214:	b29a      	uxth	r2, r3
 800f216:	89bb      	ldrh	r3, [r7, #12]
 800f218:	4313      	orrs	r3, r2
 800f21a:	b29b      	uxth	r3, r3
 800f21c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f220:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	89ba      	ldrh	r2, [r7, #12]
 800f226:	839a      	strh	r2, [r3, #28]
}
 800f228:	f107 0714 	add.w	r7, r7, #20
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bc80      	pop	{r7}
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop

0800f234 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800f234:	b480      	push	{r7}
 800f236:	b083      	sub	sp, #12
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	899b      	ldrh	r3, [r3, #12]
 800f240:	b29b      	uxth	r3, r3
}
 800f242:	4618      	mov	r0, r3
 800f244:	f107 070c 	add.w	r7, r7, #12
 800f248:	46bd      	mov	sp, r7
 800f24a:	bc80      	pop	{r7}
 800f24c:	4770      	bx	lr
 800f24e:	bf00      	nop

0800f250 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	887a      	ldrh	r2, [r7, #2]
 800f260:	819a      	strh	r2, [r3, #12]
}
 800f262:	f107 070c 	add.w	r7, r7, #12
 800f266:	46bd      	mov	sp, r7
 800f268:	bc80      	pop	{r7}
 800f26a:	4770      	bx	lr

0800f26c <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	460b      	mov	r3, r1
 800f276:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f278:	78fb      	ldrb	r3, [r7, #3]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d008      	beq.n	800f290 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	881b      	ldrh	r3, [r3, #0]
 800f282:	b29b      	uxth	r3, r3
 800f284:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f288:	b29a      	uxth	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	801a      	strh	r2, [r3, #0]
 800f28e:	e007      	b.n	800f2a0 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	b29b      	uxth	r3, r3
 800f296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	801a      	strh	r2, [r3, #0]
  }
}
 800f2a0:	f107 070c 	add.w	r7, r7, #12
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bc80      	pop	{r7}
 800f2a8:	4770      	bx	lr
 800f2aa:	bf00      	nop

0800f2ac <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	b083      	sub	sp, #12
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	881b      	ldrh	r3, [r3, #0]
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	801a      	strh	r2, [r3, #0]
}
 800f2c4:	f107 070c 	add.w	r7, r7, #12
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bc80      	pop	{r7}
 800f2cc:	4770      	bx	lr
 800f2ce:	bf00      	nop

0800f2d0 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800f2d0:	b480      	push	{r7}
 800f2d2:	b085      	sub	sp, #20
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800f2dc:	f04f 0300 	mov.w	r3, #0
 800f2e0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800f2e2:	78fb      	ldrb	r3, [r7, #3]
 800f2e4:	2b01      	cmp	r3, #1
 800f2e6:	d003      	beq.n	800f2f0 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	8b1b      	ldrh	r3, [r3, #24]
 800f2ec:	81fb      	strh	r3, [r7, #14]
 800f2ee:	e002      	b.n	800f2f6 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	8a9b      	ldrh	r3, [r3, #20]
 800f2f4:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800f2f6:	89fb      	ldrh	r3, [r7, #14]
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f107 0714 	add.w	r7, r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bc80      	pop	{r7}
 800f302:	4770      	bx	lr

0800f304 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	8a1b      	ldrh	r3, [r3, #16]
 800f310:	b29b      	uxth	r3, r3
}
 800f312:	4618      	mov	r0, r3
 800f314:	f107 070c 	add.w	r7, r7, #12
 800f318:	46bd      	mov	sp, r7
 800f31a:	bc80      	pop	{r7}
 800f31c:	4770      	bx	lr
 800f31e:	bf00      	nop

0800f320 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	4613      	mov	r3, r2
 800f32a:	460a      	mov	r2, r1
 800f32c:	807a      	strh	r2, [r7, #2]
 800f32e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800f330:	787b      	ldrb	r3, [r7, #1]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d008      	beq.n	800f348 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	889b      	ldrh	r3, [r3, #4]
 800f33a:	b29a      	uxth	r2, r3
 800f33c:	887b      	ldrh	r3, [r7, #2]
 800f33e:	4313      	orrs	r3, r2
 800f340:	b29a      	uxth	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	809a      	strh	r2, [r3, #4]
 800f346:	e00a      	b.n	800f35e <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	889b      	ldrh	r3, [r3, #4]
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	887b      	ldrh	r3, [r7, #2]
 800f350:	ea6f 0303 	mvn.w	r3, r3
 800f354:	b29b      	uxth	r3, r3
 800f356:	4013      	ands	r3, r2
 800f358:	b29a      	uxth	r2, r3
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	809a      	strh	r2, [r3, #4]
  }
}
 800f35e:	f107 070c 	add.w	r7, r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	bc80      	pop	{r7}
 800f366:	4770      	bx	lr

0800f368 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	4613      	mov	r3, r2
 800f372:	460a      	mov	r2, r1
 800f374:	70fa      	strb	r2, [r7, #3]
 800f376:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800f378:	f04f 0300 	mov.w	r3, #0
 800f37c:	81fb      	strh	r3, [r7, #14]
 800f37e:	f04f 0300 	mov.w	r3, #0
 800f382:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800f384:	78fb      	ldrb	r3, [r7, #3]
 800f386:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800f38e:	89fb      	ldrh	r3, [r7, #14]
 800f390:	f04f 0201 	mov.w	r2, #1
 800f394:	fa02 f303 	lsl.w	r3, r2, r3
 800f398:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800f39a:	78bb      	ldrb	r3, [r7, #2]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d008      	beq.n	800f3b2 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	889b      	ldrh	r3, [r3, #4]
 800f3a4:	b29a      	uxth	r2, r3
 800f3a6:	89bb      	ldrh	r3, [r7, #12]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	809a      	strh	r2, [r3, #4]
 800f3b0:	e00a      	b.n	800f3c8 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	889b      	ldrh	r3, [r3, #4]
 800f3b6:	b29a      	uxth	r2, r3
 800f3b8:	89bb      	ldrh	r3, [r7, #12]
 800f3ba:	ea6f 0303 	mvn.w	r3, r3
 800f3be:	b29b      	uxth	r3, r3
 800f3c0:	4013      	ands	r3, r2
 800f3c2:	b29a      	uxth	r2, r3
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	809a      	strh	r2, [r3, #4]
  }
}
 800f3c8:	f107 0714 	add.w	r7, r7, #20
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bc80      	pop	{r7}
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop

0800f3d4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b085      	sub	sp, #20
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	460b      	mov	r3, r1
 800f3de:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800f3e0:	f04f 0300 	mov.w	r3, #0
 800f3e4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	891b      	ldrh	r3, [r3, #8]
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	887b      	ldrh	r3, [r7, #2]
 800f3ee:	4013      	ands	r3, r2
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d003      	beq.n	800f3fe <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800f3f6:	f04f 0301 	mov.w	r3, #1
 800f3fa:	73fb      	strb	r3, [r7, #15]
 800f3fc:	e002      	b.n	800f404 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800f3fe:	f04f 0300 	mov.w	r3, #0
 800f402:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800f404:	7bfb      	ldrb	r3, [r7, #15]
}
 800f406:	4618      	mov	r0, r3
 800f408:	f107 0714 	add.w	r7, r7, #20
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bc80      	pop	{r7}
 800f410:	4770      	bx	lr
 800f412:	bf00      	nop

0800f414 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	460b      	mov	r3, r1
 800f41e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800f420:	887b      	ldrh	r3, [r7, #2]
 800f422:	ea6f 0303 	mvn.w	r3, r3
 800f426:	b29a      	uxth	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	811a      	strh	r2, [r3, #8]
}
 800f42c:	f107 070c 	add.w	r7, r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	bc80      	pop	{r7}
 800f434:	4770      	bx	lr
 800f436:	bf00      	nop

0800f438 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800f444:	f04f 0300 	mov.w	r3, #0
 800f448:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800f44a:	f04f 0300 	mov.w	r3, #0
 800f44e:	81bb      	strh	r3, [r7, #12]
 800f450:	f04f 0300 	mov.w	r3, #0
 800f454:	817b      	strh	r3, [r7, #10]
 800f456:	f04f 0300 	mov.w	r3, #0
 800f45a:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800f45c:	78fb      	ldrb	r3, [r7, #3]
 800f45e:	f003 030f 	and.w	r3, r3, #15
 800f462:	f04f 0201 	mov.w	r2, #1
 800f466:	fa02 f303 	lsl.w	r3, r2, r3
 800f46a:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800f46c:	78fb      	ldrb	r3, [r7, #3]
 800f46e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800f472:	b2db      	uxtb	r3, r3
 800f474:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800f476:	897b      	ldrh	r3, [r7, #10]
 800f478:	f04f 0201 	mov.w	r2, #1
 800f47c:	fa02 f303 	lsl.w	r3, r2, r3
 800f480:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	889b      	ldrh	r3, [r3, #4]
 800f486:	b29a      	uxth	r2, r3
 800f488:	897b      	ldrh	r3, [r7, #10]
 800f48a:	4013      	ands	r3, r2
 800f48c:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	891b      	ldrh	r3, [r3, #8]
 800f492:	b29a      	uxth	r2, r3
 800f494:	89bb      	ldrh	r3, [r7, #12]
 800f496:	4013      	ands	r3, r2
 800f498:	b29b      	uxth	r3, r3
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d006      	beq.n	800f4ac <SPI_I2S_GetITStatus+0x74>
 800f49e:	893b      	ldrh	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d003      	beq.n	800f4ac <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800f4a4:	f04f 0301 	mov.w	r3, #1
 800f4a8:	73fb      	strb	r3, [r7, #15]
 800f4aa:	e002      	b.n	800f4b2 <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800f4ac:	f04f 0300 	mov.w	r3, #0
 800f4b0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800f4b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	f107 0714 	add.w	r7, r7, #20
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bc80      	pop	{r7}
 800f4be:	4770      	bx	lr

0800f4c0 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b085      	sub	sp, #20
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	460b      	mov	r3, r1
 800f4ca:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800f4cc:	f04f 0300 	mov.w	r3, #0
 800f4d0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800f4d2:	78fb      	ldrb	r3, [r7, #3]
 800f4d4:	f003 030f 	and.w	r3, r3, #15
 800f4d8:	f04f 0201 	mov.w	r2, #1
 800f4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f4e0:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800f4e2:	89fb      	ldrh	r3, [r7, #14]
 800f4e4:	ea6f 0303 	mvn.w	r3, r3
 800f4e8:	b29a      	uxth	r2, r3
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	811a      	strh	r2, [r3, #8]
}
 800f4ee:	f107 0714 	add.w	r7, r7, #20
 800f4f2:	46bd      	mov	sp, r7
 800f4f4:	bc80      	pop	{r7}
 800f4f6:	4770      	bx	lr

0800f4f8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800f4fc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f500:	f04f 0101 	mov.w	r1, #1
 800f504:	f7fd f85a 	bl	800c5bc <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800f508:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800f50c:	f04f 0100 	mov.w	r1, #0
 800f510:	f7fd f854 	bl	800c5bc <RCC_APB2PeriphResetCmd>
}
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop

0800f518 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800f518:	b480      	push	{r7}
 800f51a:	b083      	sub	sp, #12
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	4603      	mov	r3, r0
 800f520:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800f522:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f526:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f52a:	79fa      	ldrb	r2, [r7, #7]
 800f52c:	601a      	str	r2, [r3, #0]
}
 800f52e:	f107 070c 	add.w	r7, r7, #12
 800f532:	46bd      	mov	sp, r7
 800f534:	bc80      	pop	{r7}
 800f536:	4770      	bx	lr

0800f538 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800f538:	b490      	push	{r4, r7}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	4602      	mov	r2, r0
 800f540:	460b      	mov	r3, r1
 800f542:	71fa      	strb	r2, [r7, #7]
 800f544:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800f546:	f04f 0300 	mov.w	r3, #0
 800f54a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800f54c:	79bb      	ldrb	r3, [r7, #6]
 800f54e:	f003 0303 	and.w	r3, r3, #3
 800f552:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800f556:	f04f 020f 	mov.w	r2, #15
 800f55a:	fa02 f303 	lsl.w	r3, r2, r3
 800f55e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800f560:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f564:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f568:	79ba      	ldrb	r2, [r7, #6]
 800f56a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800f56e:	b2d2      	uxtb	r2, r2
 800f570:	4610      	mov	r0, r2
 800f572:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800f576:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f57a:	79b9      	ldrb	r1, [r7, #6]
 800f57c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800f580:	b2c9      	uxtb	r1, r1
 800f582:	f101 0102 	add.w	r1, r1, #2
 800f586:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	ea6f 0202 	mvn.w	r2, r2
 800f590:	4011      	ands	r1, r2
 800f592:	f100 0202 	add.w	r2, r0, #2
 800f596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800f59a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f59e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f5a2:	79ba      	ldrb	r2, [r7, #6]
 800f5a4:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800f5a8:	b2d2      	uxtb	r2, r2
 800f5aa:	4610      	mov	r0, r2
 800f5ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800f5b0:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800f5b4:	79b9      	ldrb	r1, [r7, #6]
 800f5b6:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800f5ba:	b2c9      	uxtb	r1, r1
 800f5bc:	f101 0102 	add.w	r1, r1, #2
 800f5c0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f5c4:	79fc      	ldrb	r4, [r7, #7]
 800f5c6:	79ba      	ldrb	r2, [r7, #6]
 800f5c8:	f002 0203 	and.w	r2, r2, #3
 800f5cc:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800f5d0:	fa04 f202 	lsl.w	r2, r4, r2
 800f5d4:	4311      	orrs	r1, r2
 800f5d6:	f100 0202 	add.w	r2, r0, #2
 800f5da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800f5de:	f107 0710 	add.w	r7, r7, #16
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	bc90      	pop	{r4, r7}
 800f5e6:	4770      	bx	lr

0800f5e8 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800f5e8:	b480      	push	{r7}
 800f5ea:	b083      	sub	sp, #12
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800f5f0:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800f5f4:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800f5f8:	687a      	ldr	r2, [r7, #4]
 800f5fa:	601a      	str	r2, [r3, #0]
}
 800f5fc:	f107 070c 	add.w	r7, r7, #12
 800f600:	46bd      	mov	sp, r7
 800f602:	bc80      	pop	{r7}
 800f604:	4770      	bx	lr
 800f606:	bf00      	nop

0800f608 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800f608:	b480      	push	{r7}
 800f60a:	b083      	sub	sp, #12
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	4603      	mov	r3, r0
 800f610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800f612:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f616:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800f61a:	79fa      	ldrb	r2, [r7, #7]
 800f61c:	601a      	str	r2, [r3, #0]
}
 800f61e:	f107 070c 	add.w	r7, r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	bc80      	pop	{r7}
 800f626:	4770      	bx	lr

0800f628 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800f62e:	f04f 0300 	mov.w	r3, #0
 800f632:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800f634:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800f638:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f63c:	6a1b      	ldr	r3, [r3, #32]
 800f63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f642:	2b00      	cmp	r3, #0
 800f644:	d003      	beq.n	800f64e <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800f646:	f04f 0301 	mov.w	r3, #1
 800f64a:	71fb      	strb	r3, [r7, #7]
 800f64c:	e002      	b.n	800f654 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800f64e:	f04f 0300 	mov.w	r3, #0
 800f652:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800f654:	79fb      	ldrb	r3, [r7, #7]
}
 800f656:	4618      	mov	r0, r3
 800f658:	f107 070c 	add.w	r7, r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bc80      	pop	{r7}
 800f660:	4770      	bx	lr
 800f662:	bf00      	nop

0800f664 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800f66c:	687a      	ldr	r2, [r7, #4]
 800f66e:	f04f 0300 	mov.w	r3, #0
 800f672:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f676:	429a      	cmp	r2, r3
 800f678:	d10c      	bne.n	800f694 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800f67a:	f04f 0001 	mov.w	r0, #1
 800f67e:	f04f 0101 	mov.w	r1, #1
 800f682:	f7fc ff9b 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800f686:	f04f 0001 	mov.w	r0, #1
 800f68a:	f04f 0100 	mov.w	r1, #0
 800f68e:	f7fc ff95 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 800f692:	e0ff      	b.n	800f894 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f69a:	d10c      	bne.n	800f6b6 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800f69c:	f04f 0001 	mov.w	r0, #1
 800f6a0:	f04f 0101 	mov.w	r1, #1
 800f6a4:	f7fc ff60 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800f6a8:	f04f 0001 	mov.w	r0, #1
 800f6ac:	f04f 0100 	mov.w	r1, #0
 800f6b0:	f7fc ff5a 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f6b4:	e0ee      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f6c0:	429a      	cmp	r2, r3
 800f6c2:	d10c      	bne.n	800f6de <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800f6c4:	f04f 0002 	mov.w	r0, #2
 800f6c8:	f04f 0101 	mov.w	r1, #1
 800f6cc:	f7fc ff4c 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800f6d0:	f04f 0002 	mov.w	r0, #2
 800f6d4:	f04f 0100 	mov.w	r1, #0
 800f6d8:	f7fc ff46 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f6dc:	e0da      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800f6de:	687a      	ldr	r2, [r7, #4]
 800f6e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f6e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f6e8:	429a      	cmp	r2, r3
 800f6ea:	d10c      	bne.n	800f706 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800f6ec:	f04f 0004 	mov.w	r0, #4
 800f6f0:	f04f 0101 	mov.w	r1, #1
 800f6f4:	f7fc ff38 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800f6f8:	f04f 0004 	mov.w	r0, #4
 800f6fc:	f04f 0100 	mov.w	r1, #0
 800f700:	f7fc ff32 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f704:	e0c6      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800f706:	687a      	ldr	r2, [r7, #4]
 800f708:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f70c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f710:	429a      	cmp	r2, r3
 800f712:	d10c      	bne.n	800f72e <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800f714:	f04f 0008 	mov.w	r0, #8
 800f718:	f04f 0101 	mov.w	r1, #1
 800f71c:	f7fc ff24 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800f720:	f04f 0008 	mov.w	r0, #8
 800f724:	f04f 0100 	mov.w	r1, #0
 800f728:	f7fc ff1e 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f72c:	e0b2      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f734:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f738:	429a      	cmp	r2, r3
 800f73a:	d10c      	bne.n	800f756 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800f73c:	f04f 0010 	mov.w	r0, #16
 800f740:	f04f 0101 	mov.w	r1, #1
 800f744:	f7fc ff10 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800f748:	f04f 0010 	mov.w	r0, #16
 800f74c:	f04f 0100 	mov.w	r1, #0
 800f750:	f7fc ff0a 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f754:	e09e      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f75c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f760:	429a      	cmp	r2, r3
 800f762:	d10c      	bne.n	800f77e <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800f764:	f04f 0020 	mov.w	r0, #32
 800f768:	f04f 0101 	mov.w	r1, #1
 800f76c:	f7fc fefc 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800f770:	f04f 0020 	mov.w	r0, #32
 800f774:	f04f 0100 	mov.w	r1, #0
 800f778:	f7fc fef6 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f77c:	e08a      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f784:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f788:	429a      	cmp	r2, r3
 800f78a:	d10c      	bne.n	800f7a6 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800f78c:	f04f 0002 	mov.w	r0, #2
 800f790:	f04f 0101 	mov.w	r1, #1
 800f794:	f7fc ff12 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800f798:	f04f 0002 	mov.w	r0, #2
 800f79c:	f04f 0100 	mov.w	r1, #0
 800f7a0:	f7fc ff0c 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 800f7a4:	e076      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f7ac:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d10c      	bne.n	800f7ce <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800f7b4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f7b8:	f04f 0101 	mov.w	r1, #1
 800f7bc:	f7fc fefe 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800f7c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800f7c4:	f04f 0100 	mov.w	r1, #0
 800f7c8:	f7fc fef8 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 800f7cc:	e062      	b.n	800f894 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800f7ce:	687a      	ldr	r2, [r7, #4]
 800f7d0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800f7d4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f7d8:	429a      	cmp	r2, r3
 800f7da:	d10c      	bne.n	800f7f6 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800f7dc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f7e0:	f04f 0101 	mov.w	r1, #1
 800f7e4:	f7fc feea 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800f7e8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800f7ec:	f04f 0100 	mov.w	r1, #0
 800f7f0:	f7fc fee4 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 800f7f4:	e04e      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800f7f6:	687a      	ldr	r2, [r7, #4]
 800f7f8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800f7fc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f800:	429a      	cmp	r2, r3
 800f802:	d10c      	bne.n	800f81e <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800f804:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f808:	f04f 0101 	mov.w	r1, #1
 800f80c:	f7fc fed6 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800f810:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800f814:	f04f 0100 	mov.w	r1, #0
 800f818:	f7fc fed0 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 800f81c:	e03a      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f824:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f828:	429a      	cmp	r2, r3
 800f82a:	d10c      	bne.n	800f846 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800f82c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800f830:	f04f 0101 	mov.w	r1, #1
 800f834:	f7fc fe98 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800f838:	f04f 0040 	mov.w	r0, #64	; 0x40
 800f83c:	f04f 0100 	mov.w	r1, #0
 800f840:	f7fc fe92 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f844:	e026      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f84c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f850:	429a      	cmp	r2, r3
 800f852:	d10c      	bne.n	800f86e <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800f854:	f04f 0080 	mov.w	r0, #128	; 0x80
 800f858:	f04f 0101 	mov.w	r1, #1
 800f85c:	f7fc fe84 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800f860:	f04f 0080 	mov.w	r0, #128	; 0x80
 800f864:	f04f 0100 	mov.w	r1, #0
 800f868:	f7fc fe7e 	bl	800c568 <RCC_APB1PeriphResetCmd>
 800f86c:	e012      	b.n	800f894 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f874:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f878:	429a      	cmp	r2, r3
 800f87a:	d10b      	bne.n	800f894 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800f87c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f880:	f04f 0101 	mov.w	r1, #1
 800f884:	f7fc fe70 	bl	800c568 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800f888:	f44f 7080 	mov.w	r0, #256	; 0x100
 800f88c:	f04f 0100 	mov.w	r1, #0
 800f890:	f7fc fe6a 	bl	800c568 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800f894:	f107 0708 	add.w	r7, r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}

0800f89c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800f8a6:	f04f 0300 	mov.w	r3, #0
 800f8aa:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	f04f 0300 	mov.w	r3, #0
 800f8b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d01f      	beq.n	800f900 <TIM_TimeBaseInit+0x64>
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d018      	beq.n	800f900 <TIM_TimeBaseInit+0x64>
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8d4:	d014      	beq.n	800f900 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d00d      	beq.n	800f900 <TIM_TimeBaseInit+0x64>
 800f8e4:	687a      	ldr	r2, [r7, #4]
 800f8e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f8ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d006      	beq.n	800f900 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800f8f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d108      	bne.n	800f912 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800f900:	89fb      	ldrh	r3, [r7, #14]
 800f902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f906:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800f908:	683b      	ldr	r3, [r7, #0]
 800f90a:	885a      	ldrh	r2, [r3, #2]
 800f90c:	89fb      	ldrh	r3, [r7, #14]
 800f90e:	4313      	orrs	r3, r2
 800f910:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800f912:	687a      	ldr	r2, [r7, #4]
 800f914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f918:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d00f      	beq.n	800f940 <TIM_TimeBaseInit+0xa4>
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f926:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d008      	beq.n	800f940 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800f92e:	89fb      	ldrh	r3, [r7, #14]
 800f930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f934:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	891a      	ldrh	r2, [r3, #8]
 800f93a:	89fb      	ldrh	r3, [r7, #14]
 800f93c:	4313      	orrs	r3, r2
 800f93e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	89fa      	ldrh	r2, [r7, #14]
 800f944:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	685a      	ldr	r2, [r3, #4]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	881a      	ldrh	r2, [r3, #0]
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	f04f 0300 	mov.w	r3, #0
 800f95c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f960:	429a      	cmp	r2, r3
 800f962:	d006      	beq.n	800f972 <TIM_TimeBaseInit+0xd6>
 800f964:	687a      	ldr	r2, [r7, #4]
 800f966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f96a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800f96e:	429a      	cmp	r2, r3
 800f970:	d104      	bne.n	800f97c <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	7a9b      	ldrb	r3, [r3, #10]
 800f976:	461a      	mov	r2, r3
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	f04f 0201 	mov.w	r2, #1
 800f982:	829a      	strh	r2, [r3, #20]
}
 800f984:	f107 0714 	add.w	r7, r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	bc80      	pop	{r7}
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop

0800f990 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	f04f 32ff 	mov.w	r2, #4294967295
 800f99e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f04f 0200 	mov.w	r2, #0
 800f9a6:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	f04f 0200 	mov.w	r2, #0
 800f9ae:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	f04f 0200 	mov.w	r2, #0
 800f9b6:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	f04f 0200 	mov.w	r2, #0
 800f9be:	729a      	strb	r2, [r3, #10]
}
 800f9c0:	f107 070c 	add.w	r7, r7, #12
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bc80      	pop	{r7}
 800f9c8:	4770      	bx	lr
 800f9ca:	bf00      	nop

0800f9cc <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b083      	sub	sp, #12
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
 800f9d4:	4613      	mov	r3, r2
 800f9d6:	460a      	mov	r2, r1
 800f9d8:	807a      	strh	r2, [r7, #2]
 800f9da:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	887a      	ldrh	r2, [r7, #2]
 800f9e0:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	883a      	ldrh	r2, [r7, #0]
 800f9e6:	829a      	strh	r2, [r3, #20]
}
 800f9e8:	f107 070c 	add.w	r7, r7, #12
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bc80      	pop	{r7}
 800f9f0:	4770      	bx	lr
 800f9f2:	bf00      	nop

0800f9f4 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800fa00:	f04f 0300 	mov.w	r3, #0
 800fa04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	881b      	ldrh	r3, [r3, #0]
 800fa0a:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fa0c:	89fb      	ldrh	r3, [r7, #14]
 800fa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa12:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800fa14:	89fa      	ldrh	r2, [r7, #14]
 800fa16:	887b      	ldrh	r3, [r7, #2]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	89fa      	ldrh	r2, [r7, #14]
 800fa20:	801a      	strh	r2, [r3, #0]
}
 800fa22:	f107 0714 	add.w	r7, r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	bc80      	pop	{r7}
 800fa2a:	4770      	bx	lr

0800fa2c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800fa2c:	b480      	push	{r7}
 800fa2e:	b083      	sub	sp, #12
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	683a      	ldr	r2, [r7, #0]
 800fa3a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fa3c:	f107 070c 	add.w	r7, r7, #12
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bc80      	pop	{r7}
 800fa44:	4770      	bx	lr
 800fa46:	bf00      	nop

0800fa48 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
 800fa50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	683a      	ldr	r2, [r7, #0]
 800fa56:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800fa58:	f107 070c 	add.w	r7, r7, #12
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bc80      	pop	{r7}
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop

0800fa64 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b083      	sub	sp, #12
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800fa70:	4618      	mov	r0, r3
 800fa72:	f107 070c 	add.w	r7, r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bc80      	pop	{r7}
 800fa7a:	4770      	bx	lr

0800fa7c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800fa7c:	b480      	push	{r7}
 800fa7e:	b083      	sub	sp, #12
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa88:	b29b      	uxth	r3, r3
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f107 070c 	add.w	r7, r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bc80      	pop	{r7}
 800fa94:	4770      	bx	lr
 800fa96:	bf00      	nop

0800fa98 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	460b      	mov	r3, r1
 800faa2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800faa4:	78fb      	ldrb	r3, [r7, #3]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d008      	beq.n	800fabc <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	881b      	ldrh	r3, [r3, #0]
 800faae:	b29b      	uxth	r3, r3
 800fab0:	f043 0302 	orr.w	r3, r3, #2
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	801a      	strh	r2, [r3, #0]
 800faba:	e007      	b.n	800facc <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	881b      	ldrh	r3, [r3, #0]
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	f023 0302 	bic.w	r3, r3, #2
 800fac6:	b29a      	uxth	r2, r3
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	801a      	strh	r2, [r3, #0]
  }
}
 800facc:	f107 070c 	add.w	r7, r7, #12
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bc80      	pop	{r7}
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop

0800fad8 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	460b      	mov	r3, r1
 800fae2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800fae4:	887b      	ldrh	r3, [r7, #2]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d008      	beq.n	800fafc <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	881b      	ldrh	r3, [r3, #0]
 800faee:	b29b      	uxth	r3, r3
 800faf0:	f043 0304 	orr.w	r3, r3, #4
 800faf4:	b29a      	uxth	r2, r3
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	801a      	strh	r2, [r3, #0]
 800fafa:	e007      	b.n	800fb0c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	881b      	ldrh	r3, [r3, #0]
 800fb00:	b29b      	uxth	r3, r3
 800fb02:	f023 0304 	bic.w	r3, r3, #4
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	801a      	strh	r2, [r3, #0]
  }
}
 800fb0c:	f107 070c 	add.w	r7, r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	bc80      	pop	{r7}
 800fb14:	4770      	bx	lr
 800fb16:	bf00      	nop

0800fb18 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800fb24:	78fb      	ldrb	r3, [r7, #3]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d008      	beq.n	800fb3c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	881b      	ldrh	r3, [r3, #0]
 800fb2e:	b29b      	uxth	r3, r3
 800fb30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb34:	b29a      	uxth	r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	801a      	strh	r2, [r3, #0]
 800fb3a:	e007      	b.n	800fb4c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	881b      	ldrh	r3, [r3, #0]
 800fb40:	b29b      	uxth	r3, r3
 800fb42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb46:	b29a      	uxth	r2, r3
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	801a      	strh	r2, [r3, #0]
  }
}
 800fb4c:	f107 070c 	add.w	r7, r7, #12
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bc80      	pop	{r7}
 800fb54:	4770      	bx	lr
 800fb56:	bf00      	nop

0800fb58 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b083      	sub	sp, #12
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	460b      	mov	r3, r1
 800fb62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	881b      	ldrh	r3, [r3, #0]
 800fb68:	b29b      	uxth	r3, r3
 800fb6a:	f023 0308 	bic.w	r3, r3, #8
 800fb6e:	b29a      	uxth	r2, r3
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	b29a      	uxth	r2, r3
 800fb7a:	887b      	ldrh	r3, [r7, #2]
 800fb7c:	4313      	orrs	r3, r2
 800fb7e:	b29a      	uxth	r2, r3
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	801a      	strh	r2, [r3, #0]
}
 800fb84:	f107 070c 	add.w	r7, r7, #12
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bc80      	pop	{r7}
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop

0800fb90 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	881b      	ldrh	r3, [r3, #0]
 800fba0:	b29b      	uxth	r3, r3
 800fba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	887b      	ldrh	r3, [r7, #2]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	b29a      	uxth	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	801a      	strh	r2, [r3, #0]
}
 800fbbc:	f107 070c 	add.w	r7, r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	bc80      	pop	{r7}
 800fbc4:	4770      	bx	lr
 800fbc6:	bf00      	nop

0800fbc8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800fbc8:	b480      	push	{r7}
 800fbca:	b083      	sub	sp, #12
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
 800fbd0:	460b      	mov	r3, r1
 800fbd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800fbd4:	78fb      	ldrb	r3, [r7, #3]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d008      	beq.n	800fbec <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	881b      	ldrh	r3, [r3, #0]
 800fbde:	b29b      	uxth	r3, r3
 800fbe0:	f043 0301 	orr.w	r3, r3, #1
 800fbe4:	b29a      	uxth	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	801a      	strh	r2, [r3, #0]
 800fbea:	e007      	b.n	800fbfc <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	f023 0301 	bic.w	r3, r3, #1
 800fbf6:	b29a      	uxth	r2, r3
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	801a      	strh	r2, [r3, #0]
  }
}
 800fbfc:	f107 070c 	add.w	r7, r7, #12
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bc80      	pop	{r7}
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop

0800fc08 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800fc08:	b480      	push	{r7}
 800fc0a:	b085      	sub	sp, #20
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
 800fc10:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800fc12:	f04f 0300 	mov.w	r3, #0
 800fc16:	817b      	strh	r3, [r7, #10]
 800fc18:	f04f 0300 	mov.w	r3, #0
 800fc1c:	81fb      	strh	r3, [r7, #14]
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	8c1b      	ldrh	r3, [r3, #32]
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	f023 0301 	bic.w	r3, r3, #1
 800fc2e:	b29a      	uxth	r2, r3
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	8c1b      	ldrh	r3, [r3, #32]
 800fc38:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	889b      	ldrh	r3, [r3, #4]
 800fc3e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	8b1b      	ldrh	r3, [r3, #24]
 800fc44:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800fc46:	897b      	ldrh	r3, [r7, #10]
 800fc48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc4c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800fc4e:	897b      	ldrh	r3, [r7, #10]
 800fc50:	f023 0303 	bic.w	r3, r3, #3
 800fc54:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	881a      	ldrh	r2, [r3, #0]
 800fc5a:	897b      	ldrh	r3, [r7, #10]
 800fc5c:	4313      	orrs	r3, r2
 800fc5e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800fc60:	89fb      	ldrh	r3, [r7, #14]
 800fc62:	f023 0302 	bic.w	r3, r3, #2
 800fc66:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	899a      	ldrh	r2, [r3, #12]
 800fc6c:	89fb      	ldrh	r3, [r7, #14]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	885a      	ldrh	r2, [r3, #2]
 800fc76:	89fb      	ldrh	r3, [r7, #14]
 800fc78:	4313      	orrs	r3, r2
 800fc7a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	f04f 0300 	mov.w	r3, #0
 800fc82:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d006      	beq.n	800fc98 <TIM_OC1Init+0x90>
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fc90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fc94:	429a      	cmp	r2, r3
 800fc96:	d123      	bne.n	800fce0 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800fc98:	89fb      	ldrh	r3, [r7, #14]
 800fc9a:	f023 0308 	bic.w	r3, r3, #8
 800fc9e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	89da      	ldrh	r2, [r3, #14]
 800fca4:	89fb      	ldrh	r3, [r7, #14]
 800fca6:	4313      	orrs	r3, r2
 800fca8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800fcaa:	89fb      	ldrh	r3, [r7, #14]
 800fcac:	f023 0304 	bic.w	r3, r3, #4
 800fcb0:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	889a      	ldrh	r2, [r3, #4]
 800fcb6:	89fb      	ldrh	r3, [r7, #14]
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800fcbc:	89bb      	ldrh	r3, [r7, #12]
 800fcbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcc2:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800fcc4:	89bb      	ldrh	r3, [r7, #12]
 800fcc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fcca:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800fccc:	683b      	ldr	r3, [r7, #0]
 800fcce:	8a1a      	ldrh	r2, [r3, #16]
 800fcd0:	89bb      	ldrh	r3, [r7, #12]
 800fcd2:	4313      	orrs	r3, r2
 800fcd4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	8a5a      	ldrh	r2, [r3, #18]
 800fcda:	89bb      	ldrh	r3, [r7, #12]
 800fcdc:	4313      	orrs	r3, r2
 800fcde:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	89ba      	ldrh	r2, [r7, #12]
 800fce4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	897a      	ldrh	r2, [r7, #10]
 800fcea:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	689a      	ldr	r2, [r3, #8]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	89fa      	ldrh	r2, [r7, #14]
 800fcf8:	841a      	strh	r2, [r3, #32]
}
 800fcfa:	f107 0714 	add.w	r7, r7, #20
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	bc80      	pop	{r7}
 800fd02:	4770      	bx	lr

0800fd04 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800fd04:	b480      	push	{r7}
 800fd06:	b085      	sub	sp, #20
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800fd0e:	f04f 0300 	mov.w	r3, #0
 800fd12:	817b      	strh	r3, [r7, #10]
 800fd14:	f04f 0300 	mov.w	r3, #0
 800fd18:	81fb      	strh	r3, [r7, #14]
 800fd1a:	f04f 0300 	mov.w	r3, #0
 800fd1e:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	8c1b      	ldrh	r3, [r3, #32]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	f023 0310 	bic.w	r3, r3, #16
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	8c1b      	ldrh	r3, [r3, #32]
 800fd34:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	889b      	ldrh	r3, [r3, #4]
 800fd3a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	8b1b      	ldrh	r3, [r3, #24]
 800fd40:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800fd42:	897b      	ldrh	r3, [r7, #10]
 800fd44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd48:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800fd4a:	897b      	ldrh	r3, [r7, #10]
 800fd4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd50:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fd5a:	b29a      	uxth	r2, r3
 800fd5c:	897b      	ldrh	r3, [r7, #10]
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800fd62:	89fb      	ldrh	r3, [r7, #14]
 800fd64:	f023 0320 	bic.w	r3, r3, #32
 800fd68:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	899b      	ldrh	r3, [r3, #12]
 800fd6e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	89fb      	ldrh	r3, [r7, #14]
 800fd76:	4313      	orrs	r3, r2
 800fd78:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	885b      	ldrh	r3, [r3, #2]
 800fd7e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	89fb      	ldrh	r3, [r7, #14]
 800fd86:	4313      	orrs	r3, r2
 800fd88:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800fd8a:	687a      	ldr	r2, [r7, #4]
 800fd8c:	f04f 0300 	mov.w	r3, #0
 800fd90:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d006      	beq.n	800fda6 <TIM_OC2Init+0xa2>
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd9e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d12f      	bne.n	800fe06 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800fda6:	89fb      	ldrh	r3, [r7, #14]
 800fda8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdac:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800fdae:	683b      	ldr	r3, [r7, #0]
 800fdb0:	89db      	ldrh	r3, [r3, #14]
 800fdb2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	89fb      	ldrh	r3, [r7, #14]
 800fdba:	4313      	orrs	r3, r2
 800fdbc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800fdbe:	89fb      	ldrh	r3, [r7, #14]
 800fdc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdc4:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	889b      	ldrh	r3, [r3, #4]
 800fdca:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800fdce:	b29a      	uxth	r2, r3
 800fdd0:	89fb      	ldrh	r3, [r7, #14]
 800fdd2:	4313      	orrs	r3, r2
 800fdd4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800fdd6:	89bb      	ldrh	r3, [r7, #12]
 800fdd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fddc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800fdde:	89bb      	ldrh	r3, [r7, #12]
 800fde0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fde4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	8a1b      	ldrh	r3, [r3, #16]
 800fdea:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	89bb      	ldrh	r3, [r7, #12]
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	8a5b      	ldrh	r3, [r3, #18]
 800fdfa:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800fdfe:	b29a      	uxth	r2, r3
 800fe00:	89bb      	ldrh	r3, [r7, #12]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	89ba      	ldrh	r2, [r7, #12]
 800fe0a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	897a      	ldrh	r2, [r7, #10]
 800fe10:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	689a      	ldr	r2, [r3, #8]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	89fa      	ldrh	r2, [r7, #14]
 800fe1e:	841a      	strh	r2, [r3, #32]
}
 800fe20:	f107 0714 	add.w	r7, r7, #20
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bc80      	pop	{r7}
 800fe28:	4770      	bx	lr
 800fe2a:	bf00      	nop

0800fe2c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	b085      	sub	sp, #20
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800fe36:	f04f 0300 	mov.w	r3, #0
 800fe3a:	817b      	strh	r3, [r7, #10]
 800fe3c:	f04f 0300 	mov.w	r3, #0
 800fe40:	81fb      	strh	r3, [r7, #14]
 800fe42:	f04f 0300 	mov.w	r3, #0
 800fe46:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	8c1b      	ldrh	r3, [r3, #32]
 800fe4c:	b29b      	uxth	r3, r3
 800fe4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe52:	b29a      	uxth	r2, r3
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	8c1b      	ldrh	r3, [r3, #32]
 800fe5c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	889b      	ldrh	r3, [r3, #4]
 800fe62:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	8b9b      	ldrh	r3, [r3, #28]
 800fe68:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800fe6a:	897b      	ldrh	r3, [r7, #10]
 800fe6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe70:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800fe72:	897b      	ldrh	r3, [r7, #10]
 800fe74:	f023 0303 	bic.w	r3, r3, #3
 800fe78:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	881a      	ldrh	r2, [r3, #0]
 800fe7e:	897b      	ldrh	r3, [r7, #10]
 800fe80:	4313      	orrs	r3, r2
 800fe82:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800fe84:	89fb      	ldrh	r3, [r7, #14]
 800fe86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe8a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800fe8c:	683b      	ldr	r3, [r7, #0]
 800fe8e:	899b      	ldrh	r3, [r3, #12]
 800fe90:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	89fb      	ldrh	r3, [r7, #14]
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	885b      	ldrh	r3, [r3, #2]
 800fea0:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	89fb      	ldrh	r3, [r7, #14]
 800fea8:	4313      	orrs	r3, r2
 800feaa:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	f04f 0300 	mov.w	r3, #0
 800feb2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800feb6:	429a      	cmp	r2, r3
 800feb8:	d006      	beq.n	800fec8 <TIM_OC3Init+0x9c>
 800feba:	687a      	ldr	r2, [r7, #4]
 800febc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fec0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d12f      	bne.n	800ff28 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800fec8:	89fb      	ldrh	r3, [r7, #14]
 800feca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fece:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	89db      	ldrh	r3, [r3, #14]
 800fed4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fed8:	b29a      	uxth	r2, r3
 800feda:	89fb      	ldrh	r3, [r7, #14]
 800fedc:	4313      	orrs	r3, r2
 800fede:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800fee0:	89fb      	ldrh	r3, [r7, #14]
 800fee2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fee6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	889b      	ldrh	r3, [r3, #4]
 800feec:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	89fb      	ldrh	r3, [r7, #14]
 800fef4:	4313      	orrs	r3, r2
 800fef6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800fef8:	89bb      	ldrh	r3, [r7, #12]
 800fefa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fefe:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800ff00:	89bb      	ldrh	r3, [r7, #12]
 800ff02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff06:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	8a1b      	ldrh	r3, [r3, #16]
 800ff0c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	89bb      	ldrh	r3, [r7, #12]
 800ff14:	4313      	orrs	r3, r2
 800ff16:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	8a5b      	ldrh	r3, [r3, #18]
 800ff1c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ff20:	b29a      	uxth	r2, r3
 800ff22:	89bb      	ldrh	r3, [r7, #12]
 800ff24:	4313      	orrs	r3, r2
 800ff26:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	89ba      	ldrh	r2, [r7, #12]
 800ff2c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	897a      	ldrh	r2, [r7, #10]
 800ff32:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	689a      	ldr	r2, [r3, #8]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	89fa      	ldrh	r2, [r7, #14]
 800ff40:	841a      	strh	r2, [r3, #32]
}
 800ff42:	f107 0714 	add.w	r7, r7, #20
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bc80      	pop	{r7}
 800ff4a:	4770      	bx	lr

0800ff4c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800ff56:	f04f 0300 	mov.w	r3, #0
 800ff5a:	81bb      	strh	r3, [r7, #12]
 800ff5c:	f04f 0300 	mov.w	r3, #0
 800ff60:	817b      	strh	r3, [r7, #10]
 800ff62:	f04f 0300 	mov.w	r3, #0
 800ff66:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	8c1b      	ldrh	r3, [r3, #32]
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff72:	b29a      	uxth	r2, r3
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	8c1b      	ldrh	r3, [r3, #32]
 800ff7c:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	889b      	ldrh	r3, [r3, #4]
 800ff82:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	8b9b      	ldrh	r3, [r3, #28]
 800ff88:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800ff8a:	89bb      	ldrh	r3, [r7, #12]
 800ff8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff90:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800ff92:	89bb      	ldrh	r3, [r7, #12]
 800ff94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff98:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800ff9a:	683b      	ldr	r3, [r7, #0]
 800ff9c:	881b      	ldrh	r3, [r3, #0]
 800ff9e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	89bb      	ldrh	r3, [r7, #12]
 800ffa6:	4313      	orrs	r3, r2
 800ffa8:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800ffaa:	897b      	ldrh	r3, [r7, #10]
 800ffac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffb0:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	899b      	ldrh	r3, [r3, #12]
 800ffb6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ffba:	b29a      	uxth	r2, r3
 800ffbc:	897b      	ldrh	r3, [r7, #10]
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	885b      	ldrh	r3, [r3, #2]
 800ffc6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	897b      	ldrh	r3, [r7, #10]
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800ffd2:	687a      	ldr	r2, [r7, #4]
 800ffd4:	f04f 0300 	mov.w	r3, #0
 800ffd8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ffdc:	429a      	cmp	r2, r3
 800ffde:	d006      	beq.n	800ffee <TIM_OC4Init+0xa2>
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffe6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d10b      	bne.n	8010006 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800ffee:	89fb      	ldrh	r3, [r7, #14]
 800fff0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fff4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	8a1b      	ldrh	r3, [r3, #16]
 800fffa:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800fffe:	b29a      	uxth	r2, r3
 8010000:	89fb      	ldrh	r3, [r7, #14]
 8010002:	4313      	orrs	r3, r2
 8010004:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	89fa      	ldrh	r2, [r7, #14]
 801000a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	89ba      	ldrh	r2, [r7, #12]
 8010010:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	689a      	ldr	r2, [r3, #8]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	897a      	ldrh	r2, [r7, #10]
 801001e:	841a      	strh	r2, [r3, #32]
}
 8010020:	f107 0714 	add.w	r7, r7, #20
 8010024:	46bd      	mov	sp, r7
 8010026:	bc80      	pop	{r7}
 8010028:	4770      	bx	lr
 801002a:	bf00      	nop

0801002c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f04f 0200 	mov.w	r2, #0
 801003a:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f04f 0200 	mov.w	r2, #0
 8010042:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	f04f 0200 	mov.w	r2, #0
 801004a:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f04f 0200 	mov.w	r2, #0
 8010052:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f04f 0200 	mov.w	r2, #0
 801005a:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f04f 0200 	mov.w	r2, #0
 8010062:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	f04f 0200 	mov.w	r2, #0
 801006a:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	f04f 0200 	mov.w	r2, #0
 8010072:	825a      	strh	r2, [r3, #18]
}
 8010074:	f107 070c 	add.w	r7, r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	bc80      	pop	{r7}
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop

08010080 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8010080:	b480      	push	{r7}
 8010082:	b085      	sub	sp, #20
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	4613      	mov	r3, r2
 801008a:	460a      	mov	r2, r1
 801008c:	807a      	strh	r2, [r7, #2]
 801008e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 8010090:	f04f 0300 	mov.w	r3, #0
 8010094:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 8010096:	f04f 0300 	mov.w	r3, #0
 801009a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 80100a0:	68fb      	ldr	r3, [r7, #12]
 80100a2:	f103 0318 	add.w	r3, r3, #24
 80100a6:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 80100a8:	887b      	ldrh	r3, [r7, #2]
 80100aa:	f04f 0201 	mov.w	r2, #1
 80100ae:	fa02 f303 	lsl.w	r3, r2, r3
 80100b2:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	8c1b      	ldrh	r3, [r3, #32]
 80100b8:	b29a      	uxth	r2, r3
 80100ba:	897b      	ldrh	r3, [r7, #10]
 80100bc:	ea6f 0303 	mvn.w	r3, r3
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	4013      	ands	r3, r2
 80100c4:	b29a      	uxth	r2, r3
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 80100ca:	887b      	ldrh	r3, [r7, #2]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d002      	beq.n	80100d6 <TIM_SelectOCxM+0x56>
 80100d0:	887b      	ldrh	r3, [r7, #2]
 80100d2:	2b08      	cmp	r3, #8
 80100d4:	d114      	bne.n	8010100 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 80100d6:	887b      	ldrh	r3, [r7, #2]
 80100d8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80100dc:	b29b      	uxth	r3, r3
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	18d3      	adds	r3, r2, r3
 80100e2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 80100e4:	68fa      	ldr	r2, [r7, #12]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6819      	ldr	r1, [r3, #0]
 80100ea:	f64f 738f 	movw	r3, #65423	; 0xff8f
 80100ee:	400b      	ands	r3, r1
 80100f0:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	68fa      	ldr	r2, [r7, #12]
 80100f6:	6811      	ldr	r1, [r2, #0]
 80100f8:	883a      	ldrh	r2, [r7, #0]
 80100fa:	430a      	orrs	r2, r1
 80100fc:	601a      	str	r2, [r3, #0]
 80100fe:	e019      	b.n	8010134 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8010100:	887b      	ldrh	r3, [r7, #2]
 8010102:	f1a3 0304 	sub.w	r3, r3, #4
 8010106:	b29b      	uxth	r3, r3
 8010108:	ea4f 0353 	mov.w	r3, r3, lsr #1
 801010c:	b29b      	uxth	r3, r3
 801010e:	68fa      	ldr	r2, [r7, #12]
 8010110:	18d3      	adds	r3, r2, r3
 8010112:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 8010114:	68fa      	ldr	r2, [r7, #12]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6819      	ldr	r1, [r3, #0]
 801011a:	f648 73ff 	movw	r3, #36863	; 0x8fff
 801011e:	400b      	ands	r3, r1
 8010120:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	68fa      	ldr	r2, [r7, #12]
 8010126:	6811      	ldr	r1, [r2, #0]
 8010128:	883a      	ldrh	r2, [r7, #0]
 801012a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 801012e:	b292      	uxth	r2, r2
 8010130:	430a      	orrs	r2, r1
 8010132:	601a      	str	r2, [r3, #0]
  }
}
 8010134:	f107 0714 	add.w	r7, r7, #20
 8010138:	46bd      	mov	sp, r7
 801013a:	bc80      	pop	{r7}
 801013c:	4770      	bx	lr
 801013e:	bf00      	nop

08010140 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 8010140:	b480      	push	{r7}
 8010142:	b083      	sub	sp, #12
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	683a      	ldr	r2, [r7, #0]
 801014e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8010150:	f107 070c 	add.w	r7, r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	bc80      	pop	{r7}
 8010158:	4770      	bx	lr
 801015a:	bf00      	nop

0801015c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 801015c:	b480      	push	{r7}
 801015e:	b083      	sub	sp, #12
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	683a      	ldr	r2, [r7, #0]
 801016a:	639a      	str	r2, [r3, #56]	; 0x38
}
 801016c:	f107 070c 	add.w	r7, r7, #12
 8010170:	46bd      	mov	sp, r7
 8010172:	bc80      	pop	{r7}
 8010174:	4770      	bx	lr
 8010176:	bf00      	nop

08010178 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 8010178:	b480      	push	{r7}
 801017a:	b083      	sub	sp, #12
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	683a      	ldr	r2, [r7, #0]
 8010186:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8010188:	f107 070c 	add.w	r7, r7, #12
 801018c:	46bd      	mov	sp, r7
 801018e:	bc80      	pop	{r7}
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop

08010194 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
 801019c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80101a4:	f107 070c 	add.w	r7, r7, #12
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bc80      	pop	{r7}
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop

080101b0 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80101b0:	b480      	push	{r7}
 80101b2:	b085      	sub	sp, #20
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80101bc:	f04f 0300 	mov.w	r3, #0
 80101c0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	8b1b      	ldrh	r3, [r3, #24]
 80101c6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 80101c8:	89fb      	ldrh	r3, [r7, #14]
 80101ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101ce:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 80101d0:	89fa      	ldrh	r2, [r7, #14]
 80101d2:	887b      	ldrh	r3, [r7, #2]
 80101d4:	4313      	orrs	r3, r2
 80101d6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	89fa      	ldrh	r2, [r7, #14]
 80101dc:	831a      	strh	r2, [r3, #24]
}
 80101de:	f107 0714 	add.w	r7, r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bc80      	pop	{r7}
 80101e6:	4770      	bx	lr

080101e8 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	460b      	mov	r3, r1
 80101f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80101f4:	f04f 0300 	mov.w	r3, #0
 80101f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	8b1b      	ldrh	r3, [r3, #24]
 80101fe:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 8010200:	89fb      	ldrh	r3, [r7, #14]
 8010202:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010206:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8010208:	887b      	ldrh	r3, [r7, #2]
 801020a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801020e:	b29a      	uxth	r2, r3
 8010210:	89fb      	ldrh	r3, [r7, #14]
 8010212:	4313      	orrs	r3, r2
 8010214:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	89fa      	ldrh	r2, [r7, #14]
 801021a:	831a      	strh	r2, [r3, #24]
}
 801021c:	f107 0714 	add.w	r7, r7, #20
 8010220:	46bd      	mov	sp, r7
 8010222:	bc80      	pop	{r7}
 8010224:	4770      	bx	lr
 8010226:	bf00      	nop

08010228 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8010228:	b480      	push	{r7}
 801022a:	b085      	sub	sp, #20
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	460b      	mov	r3, r1
 8010232:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010234:	f04f 0300 	mov.w	r3, #0
 8010238:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	8b9b      	ldrh	r3, [r3, #28]
 801023e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 8010240:	89fb      	ldrh	r3, [r7, #14]
 8010242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010246:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8010248:	89fa      	ldrh	r2, [r7, #14]
 801024a:	887b      	ldrh	r3, [r7, #2]
 801024c:	4313      	orrs	r3, r2
 801024e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	89fa      	ldrh	r2, [r7, #14]
 8010254:	839a      	strh	r2, [r3, #28]
}
 8010256:	f107 0714 	add.w	r7, r7, #20
 801025a:	46bd      	mov	sp, r7
 801025c:	bc80      	pop	{r7}
 801025e:	4770      	bx	lr

08010260 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801026c:	f04f 0300 	mov.w	r3, #0
 8010270:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	8b9b      	ldrh	r3, [r3, #28]
 8010276:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 8010278:	89fb      	ldrh	r3, [r7, #14]
 801027a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801027e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8010280:	887b      	ldrh	r3, [r7, #2]
 8010282:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010286:	b29a      	uxth	r2, r3
 8010288:	89fb      	ldrh	r3, [r7, #14]
 801028a:	4313      	orrs	r3, r2
 801028c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	89fa      	ldrh	r2, [r7, #14]
 8010292:	839a      	strh	r2, [r3, #28]
}
 8010294:	f107 0714 	add.w	r7, r7, #20
 8010298:	46bd      	mov	sp, r7
 801029a:	bc80      	pop	{r7}
 801029c:	4770      	bx	lr
 801029e:	bf00      	nop

080102a0 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80102a0:	b480      	push	{r7}
 80102a2:	b085      	sub	sp, #20
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
 80102a8:	460b      	mov	r3, r1
 80102aa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80102ac:	f04f 0300 	mov.w	r3, #0
 80102b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	8b1b      	ldrh	r3, [r3, #24]
 80102b6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 80102b8:	89fb      	ldrh	r3, [r7, #14]
 80102ba:	f023 0308 	bic.w	r3, r3, #8
 80102be:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 80102c0:	89fa      	ldrh	r2, [r7, #14]
 80102c2:	887b      	ldrh	r3, [r7, #2]
 80102c4:	4313      	orrs	r3, r2
 80102c6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	89fa      	ldrh	r2, [r7, #14]
 80102cc:	831a      	strh	r2, [r3, #24]
}
 80102ce:	f107 0714 	add.w	r7, r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bc80      	pop	{r7}
 80102d6:	4770      	bx	lr

080102d8 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80102d8:	b480      	push	{r7}
 80102da:	b085      	sub	sp, #20
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	460b      	mov	r3, r1
 80102e2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80102e4:	f04f 0300 	mov.w	r3, #0
 80102e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	8b1b      	ldrh	r3, [r3, #24]
 80102ee:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 80102f0:	89fb      	ldrh	r3, [r7, #14]
 80102f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80102f6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 80102f8:	887b      	ldrh	r3, [r7, #2]
 80102fa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80102fe:	b29a      	uxth	r2, r3
 8010300:	89fb      	ldrh	r3, [r7, #14]
 8010302:	4313      	orrs	r3, r2
 8010304:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	89fa      	ldrh	r2, [r7, #14]
 801030a:	831a      	strh	r2, [r3, #24]
}
 801030c:	f107 0714 	add.w	r7, r7, #20
 8010310:	46bd      	mov	sp, r7
 8010312:	bc80      	pop	{r7}
 8010314:	4770      	bx	lr
 8010316:	bf00      	nop

08010318 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8010318:	b480      	push	{r7}
 801031a:	b085      	sub	sp, #20
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	460b      	mov	r3, r1
 8010322:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010324:	f04f 0300 	mov.w	r3, #0
 8010328:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	8b9b      	ldrh	r3, [r3, #28]
 801032e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8010330:	89fb      	ldrh	r3, [r7, #14]
 8010332:	f023 0308 	bic.w	r3, r3, #8
 8010336:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8010338:	89fa      	ldrh	r2, [r7, #14]
 801033a:	887b      	ldrh	r3, [r7, #2]
 801033c:	4313      	orrs	r3, r2
 801033e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	89fa      	ldrh	r2, [r7, #14]
 8010344:	839a      	strh	r2, [r3, #28]
}
 8010346:	f107 0714 	add.w	r7, r7, #20
 801034a:	46bd      	mov	sp, r7
 801034c:	bc80      	pop	{r7}
 801034e:	4770      	bx	lr

08010350 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8010350:	b480      	push	{r7}
 8010352:	b085      	sub	sp, #20
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	460b      	mov	r3, r1
 801035a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801035c:	f04f 0300 	mov.w	r3, #0
 8010360:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	8b9b      	ldrh	r3, [r3, #28]
 8010366:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8010368:	89fb      	ldrh	r3, [r7, #14]
 801036a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801036e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8010370:	887b      	ldrh	r3, [r7, #2]
 8010372:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010376:	b29a      	uxth	r2, r3
 8010378:	89fb      	ldrh	r3, [r7, #14]
 801037a:	4313      	orrs	r3, r2
 801037c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	89fa      	ldrh	r2, [r7, #14]
 8010382:	839a      	strh	r2, [r3, #28]
}
 8010384:	f107 0714 	add.w	r7, r7, #20
 8010388:	46bd      	mov	sp, r7
 801038a:	bc80      	pop	{r7}
 801038c:	4770      	bx	lr
 801038e:	bf00      	nop

08010390 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010390:	b480      	push	{r7}
 8010392:	b085      	sub	sp, #20
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	460b      	mov	r3, r1
 801039a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801039c:	f04f 0300 	mov.w	r3, #0
 80103a0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	8b1b      	ldrh	r3, [r3, #24]
 80103a6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 80103a8:	89fb      	ldrh	r3, [r7, #14]
 80103aa:	f023 0304 	bic.w	r3, r3, #4
 80103ae:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 80103b0:	89fa      	ldrh	r2, [r7, #14]
 80103b2:	887b      	ldrh	r3, [r7, #2]
 80103b4:	4313      	orrs	r3, r2
 80103b6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	89fa      	ldrh	r2, [r7, #14]
 80103bc:	831a      	strh	r2, [r3, #24]
}
 80103be:	f107 0714 	add.w	r7, r7, #20
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bc80      	pop	{r7}
 80103c6:	4770      	bx	lr

080103c8 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b085      	sub	sp, #20
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80103d4:	f04f 0300 	mov.w	r3, #0
 80103d8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	8b1b      	ldrh	r3, [r3, #24]
 80103de:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 80103e0:	89fb      	ldrh	r3, [r7, #14]
 80103e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80103e6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 80103e8:	887b      	ldrh	r3, [r7, #2]
 80103ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80103ee:	b29a      	uxth	r2, r3
 80103f0:	89fb      	ldrh	r3, [r7, #14]
 80103f2:	4313      	orrs	r3, r2
 80103f4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	89fa      	ldrh	r2, [r7, #14]
 80103fa:	831a      	strh	r2, [r3, #24]
}
 80103fc:	f107 0714 	add.w	r7, r7, #20
 8010400:	46bd      	mov	sp, r7
 8010402:	bc80      	pop	{r7}
 8010404:	4770      	bx	lr
 8010406:	bf00      	nop

08010408 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010408:	b480      	push	{r7}
 801040a:	b085      	sub	sp, #20
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	460b      	mov	r3, r1
 8010412:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010414:	f04f 0300 	mov.w	r3, #0
 8010418:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	8b9b      	ldrh	r3, [r3, #28]
 801041e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 8010420:	89fb      	ldrh	r3, [r7, #14]
 8010422:	f023 0304 	bic.w	r3, r3, #4
 8010426:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8010428:	89fa      	ldrh	r2, [r7, #14]
 801042a:	887b      	ldrh	r3, [r7, #2]
 801042c:	4313      	orrs	r3, r2
 801042e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	89fa      	ldrh	r2, [r7, #14]
 8010434:	839a      	strh	r2, [r3, #28]
}
 8010436:	f107 0714 	add.w	r7, r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	bc80      	pop	{r7}
 801043e:	4770      	bx	lr

08010440 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	460b      	mov	r3, r1
 801044a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 801044c:	f04f 0300 	mov.w	r3, #0
 8010450:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	8b9b      	ldrh	r3, [r3, #28]
 8010456:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 8010458:	89fb      	ldrh	r3, [r7, #14]
 801045a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801045e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8010460:	887b      	ldrh	r3, [r7, #2]
 8010462:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010466:	b29a      	uxth	r2, r3
 8010468:	89fb      	ldrh	r3, [r7, #14]
 801046a:	4313      	orrs	r3, r2
 801046c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	89fa      	ldrh	r2, [r7, #14]
 8010472:	839a      	strh	r2, [r3, #28]
}
 8010474:	f107 0714 	add.w	r7, r7, #20
 8010478:	46bd      	mov	sp, r7
 801047a:	bc80      	pop	{r7}
 801047c:	4770      	bx	lr
 801047e:	bf00      	nop

08010480 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8010480:	b480      	push	{r7}
 8010482:	b085      	sub	sp, #20
 8010484:	af00      	add	r7, sp, #0
 8010486:	6078      	str	r0, [r7, #4]
 8010488:	460b      	mov	r3, r1
 801048a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 801048c:	f04f 0300 	mov.w	r3, #0
 8010490:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	8b1b      	ldrh	r3, [r3, #24]
 8010496:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 8010498:	89fb      	ldrh	r3, [r7, #14]
 801049a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801049e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 80104a0:	89fa      	ldrh	r2, [r7, #14]
 80104a2:	887b      	ldrh	r3, [r7, #2]
 80104a4:	4313      	orrs	r3, r2
 80104a6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	89fa      	ldrh	r2, [r7, #14]
 80104ac:	831a      	strh	r2, [r3, #24]
}
 80104ae:	f107 0714 	add.w	r7, r7, #20
 80104b2:	46bd      	mov	sp, r7
 80104b4:	bc80      	pop	{r7}
 80104b6:	4770      	bx	lr

080104b8 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80104b8:	b480      	push	{r7}
 80104ba:	b085      	sub	sp, #20
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	460b      	mov	r3, r1
 80104c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8b1b      	ldrh	r3, [r3, #24]
 80104ce:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 80104d0:	89fb      	ldrh	r3, [r7, #14]
 80104d2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80104d6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80104da:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 80104dc:	887b      	ldrh	r3, [r7, #2]
 80104de:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	89fb      	ldrh	r3, [r7, #14]
 80104e6:	4313      	orrs	r3, r2
 80104e8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	89fa      	ldrh	r2, [r7, #14]
 80104ee:	831a      	strh	r2, [r3, #24]
}
 80104f0:	f107 0714 	add.w	r7, r7, #20
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bc80      	pop	{r7}
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop

080104fc <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b085      	sub	sp, #20
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	460b      	mov	r3, r1
 8010506:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010508:	f04f 0300 	mov.w	r3, #0
 801050c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8b9b      	ldrh	r3, [r3, #28]
 8010512:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 8010514:	89fb      	ldrh	r3, [r7, #14]
 8010516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801051a:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 801051c:	89fa      	ldrh	r2, [r7, #14]
 801051e:	887b      	ldrh	r3, [r7, #2]
 8010520:	4313      	orrs	r3, r2
 8010522:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	89fa      	ldrh	r2, [r7, #14]
 8010528:	839a      	strh	r2, [r3, #28]
}
 801052a:	f107 0714 	add.w	r7, r7, #20
 801052e:	46bd      	mov	sp, r7
 8010530:	bc80      	pop	{r7}
 8010532:	4770      	bx	lr

08010534 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 8010534:	b480      	push	{r7}
 8010536:	b085      	sub	sp, #20
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8010540:	f04f 0300 	mov.w	r3, #0
 8010544:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	8b9b      	ldrh	r3, [r3, #28]
 801054a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 801054c:	89fb      	ldrh	r3, [r7, #14]
 801054e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8010552:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8010556:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8010558:	887b      	ldrh	r3, [r7, #2]
 801055a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801055e:	b29a      	uxth	r2, r3
 8010560:	89fb      	ldrh	r3, [r7, #14]
 8010562:	4313      	orrs	r3, r2
 8010564:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	89fa      	ldrh	r2, [r7, #14]
 801056a:	839a      	strh	r2, [r3, #28]
}
 801056c:	f107 0714 	add.w	r7, r7, #20
 8010570:	46bd      	mov	sp, r7
 8010572:	bc80      	pop	{r7}
 8010574:	4770      	bx	lr
 8010576:	bf00      	nop

08010578 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	460b      	mov	r3, r1
 8010582:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010584:	f04f 0300 	mov.w	r3, #0
 8010588:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	8c1b      	ldrh	r3, [r3, #32]
 801058e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 8010590:	89fb      	ldrh	r3, [r7, #14]
 8010592:	f023 0302 	bic.w	r3, r3, #2
 8010596:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 8010598:	89fa      	ldrh	r2, [r7, #14]
 801059a:	887b      	ldrh	r3, [r7, #2]
 801059c:	4313      	orrs	r3, r2
 801059e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	89fa      	ldrh	r2, [r7, #14]
 80105a4:	841a      	strh	r2, [r3, #32]
}
 80105a6:	f107 0714 	add.w	r7, r7, #20
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bc80      	pop	{r7}
 80105ae:	4770      	bx	lr

080105b0 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b085      	sub	sp, #20
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	460b      	mov	r3, r1
 80105ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80105bc:	f04f 0300 	mov.w	r3, #0
 80105c0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	8c1b      	ldrh	r3, [r3, #32]
 80105c6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 80105c8:	89fb      	ldrh	r3, [r7, #14]
 80105ca:	f023 0308 	bic.w	r3, r3, #8
 80105ce:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 80105d0:	89fa      	ldrh	r2, [r7, #14]
 80105d2:	887b      	ldrh	r3, [r7, #2]
 80105d4:	4313      	orrs	r3, r2
 80105d6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	89fa      	ldrh	r2, [r7, #14]
 80105dc:	841a      	strh	r2, [r3, #32]
}
 80105de:	f107 0714 	add.w	r7, r7, #20
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bc80      	pop	{r7}
 80105e6:	4770      	bx	lr

080105e8 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
 80105f0:	460b      	mov	r3, r1
 80105f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80105f4:	f04f 0300 	mov.w	r3, #0
 80105f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	8c1b      	ldrh	r3, [r3, #32]
 80105fe:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 8010600:	89fb      	ldrh	r3, [r7, #14]
 8010602:	f023 0320 	bic.w	r3, r3, #32
 8010606:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8010608:	887b      	ldrh	r3, [r7, #2]
 801060a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801060e:	b29a      	uxth	r2, r3
 8010610:	89fb      	ldrh	r3, [r7, #14]
 8010612:	4313      	orrs	r3, r2
 8010614:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	89fa      	ldrh	r2, [r7, #14]
 801061a:	841a      	strh	r2, [r3, #32]
}
 801061c:	f107 0714 	add.w	r7, r7, #20
 8010620:	46bd      	mov	sp, r7
 8010622:	bc80      	pop	{r7}
 8010624:	4770      	bx	lr
 8010626:	bf00      	nop

08010628 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 8010628:	b480      	push	{r7}
 801062a:	b085      	sub	sp, #20
 801062c:	af00      	add	r7, sp, #0
 801062e:	6078      	str	r0, [r7, #4]
 8010630:	460b      	mov	r3, r1
 8010632:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010634:	f04f 0300 	mov.w	r3, #0
 8010638:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	8c1b      	ldrh	r3, [r3, #32]
 801063e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 8010640:	89fb      	ldrh	r3, [r7, #14]
 8010642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010646:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8010648:	887b      	ldrh	r3, [r7, #2]
 801064a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801064e:	b29a      	uxth	r2, r3
 8010650:	89fb      	ldrh	r3, [r7, #14]
 8010652:	4313      	orrs	r3, r2
 8010654:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	89fa      	ldrh	r2, [r7, #14]
 801065a:	841a      	strh	r2, [r3, #32]
}
 801065c:	f107 0714 	add.w	r7, r7, #20
 8010660:	46bd      	mov	sp, r7
 8010662:	bc80      	pop	{r7}
 8010664:	4770      	bx	lr
 8010666:	bf00      	nop

08010668 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	460b      	mov	r3, r1
 8010672:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 8010674:	f04f 0300 	mov.w	r3, #0
 8010678:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	8c1b      	ldrh	r3, [r3, #32]
 801067e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8010680:	89fb      	ldrh	r3, [r7, #14]
 8010682:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010686:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8010688:	887b      	ldrh	r3, [r7, #2]
 801068a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801068e:	b29a      	uxth	r2, r3
 8010690:	89fb      	ldrh	r3, [r7, #14]
 8010692:	4313      	orrs	r3, r2
 8010694:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	89fa      	ldrh	r2, [r7, #14]
 801069a:	841a      	strh	r2, [r3, #32]
}
 801069c:	f107 0714 	add.w	r7, r7, #20
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bc80      	pop	{r7}
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop

080106a8 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b085      	sub	sp, #20
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
 80106b0:	460b      	mov	r3, r1
 80106b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80106b4:	f04f 0300 	mov.w	r3, #0
 80106b8:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	8c1b      	ldrh	r3, [r3, #32]
 80106be:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80106c0:	89fb      	ldrh	r3, [r7, #14]
 80106c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80106c6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 80106c8:	887b      	ldrh	r3, [r7, #2]
 80106ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	89fb      	ldrh	r3, [r7, #14]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	89fa      	ldrh	r2, [r7, #14]
 80106da:	841a      	strh	r2, [r3, #32]
}
 80106dc:	f107 0714 	add.w	r7, r7, #20
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bc80      	pop	{r7}
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop

080106e8 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b085      	sub	sp, #20
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
 80106f0:	460b      	mov	r3, r1
 80106f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 80106f4:	f04f 0300 	mov.w	r3, #0
 80106f8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	8c1b      	ldrh	r3, [r3, #32]
 80106fe:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8010700:	89fb      	ldrh	r3, [r7, #14]
 8010702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010706:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8010708:	887b      	ldrh	r3, [r7, #2]
 801070a:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801070e:	b29a      	uxth	r2, r3
 8010710:	89fb      	ldrh	r3, [r7, #14]
 8010712:	4313      	orrs	r3, r2
 8010714:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	89fa      	ldrh	r2, [r7, #14]
 801071a:	841a      	strh	r2, [r3, #32]
}
 801071c:	f107 0714 	add.w	r7, r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	bc80      	pop	{r7}
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop

08010728 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8010728:	b480      	push	{r7}
 801072a:	b085      	sub	sp, #20
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
 8010730:	4613      	mov	r3, r2
 8010732:	460a      	mov	r2, r1
 8010734:	807a      	strh	r2, [r7, #2]
 8010736:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8010738:	f04f 0300 	mov.w	r3, #0
 801073c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 801073e:	887b      	ldrh	r3, [r7, #2]
 8010740:	f04f 0201 	mov.w	r2, #1
 8010744:	fa02 f303 	lsl.w	r3, r2, r3
 8010748:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	8c1b      	ldrh	r3, [r3, #32]
 801074e:	b29a      	uxth	r2, r3
 8010750:	89fb      	ldrh	r3, [r7, #14]
 8010752:	ea6f 0303 	mvn.w	r3, r3
 8010756:	b29b      	uxth	r3, r3
 8010758:	4013      	ands	r3, r2
 801075a:	b29a      	uxth	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	8c1b      	ldrh	r3, [r3, #32]
 8010764:	b29a      	uxth	r2, r3
 8010766:	8839      	ldrh	r1, [r7, #0]
 8010768:	887b      	ldrh	r3, [r7, #2]
 801076a:	fa01 f303 	lsl.w	r3, r1, r3
 801076e:	b29b      	uxth	r3, r3
 8010770:	4313      	orrs	r3, r2
 8010772:	b29a      	uxth	r2, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	841a      	strh	r2, [r3, #32]
}
 8010778:	f107 0714 	add.w	r7, r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	bc80      	pop	{r7}
 8010780:	4770      	bx	lr
 8010782:	bf00      	nop

08010784 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8010784:	b480      	push	{r7}
 8010786:	b085      	sub	sp, #20
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	4613      	mov	r3, r2
 801078e:	460a      	mov	r2, r1
 8010790:	807a      	strh	r2, [r7, #2]
 8010792:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 8010794:	f04f 0300 	mov.w	r3, #0
 8010798:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 801079a:	887b      	ldrh	r3, [r7, #2]
 801079c:	f04f 0204 	mov.w	r2, #4
 80107a0:	fa02 f303 	lsl.w	r3, r2, r3
 80107a4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	8c1b      	ldrh	r3, [r3, #32]
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	89fb      	ldrh	r3, [r7, #14]
 80107ae:	ea6f 0303 	mvn.w	r3, r3
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	4013      	ands	r3, r2
 80107b6:	b29a      	uxth	r2, r3
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	8c1b      	ldrh	r3, [r3, #32]
 80107c0:	b29a      	uxth	r2, r3
 80107c2:	8839      	ldrh	r1, [r7, #0]
 80107c4:	887b      	ldrh	r3, [r7, #2]
 80107c6:	fa01 f303 	lsl.w	r3, r1, r3
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4313      	orrs	r3, r2
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	841a      	strh	r2, [r3, #32]
}
 80107d4:	f107 0714 	add.w	r7, r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	bc80      	pop	{r7}
 80107dc:	4770      	bx	lr
 80107de:	bf00      	nop

080107e0 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b082      	sub	sp, #8
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
 80107e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80107ea:	683b      	ldr	r3, [r7, #0]
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d10f      	bne.n	8010812 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80107f2:	683b      	ldr	r3, [r7, #0]
 80107f4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 80107f6:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80107f8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 80107fa:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80107fc:	891b      	ldrh	r3, [r3, #8]
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f000 fcc4 	bl	801118c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	88db      	ldrh	r3, [r3, #6]
 8010808:	6878      	ldr	r0, [r7, #4]
 801080a:	4619      	mov	r1, r3
 801080c:	f000 f8ec 	bl	80109e8 <TIM_SetIC1Prescaler>
 8010810:	e036      	b.n	8010880 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8010812:	683b      	ldr	r3, [r7, #0]
 8010814:	881b      	ldrh	r3, [r3, #0]
 8010816:	2b04      	cmp	r3, #4
 8010818:	d10f      	bne.n	801083a <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 801081e:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010820:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 8010822:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010824:	891b      	ldrh	r3, [r3, #8]
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f000 fcf0 	bl	801120c <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	88db      	ldrh	r3, [r3, #6]
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	4619      	mov	r1, r3
 8010834:	f000 f8f4 	bl	8010a20 <TIM_SetIC2Prescaler>
 8010838:	e022      	b.n	8010880 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	881b      	ldrh	r3, [r3, #0]
 801083e:	2b08      	cmp	r3, #8
 8010840:	d10f      	bne.n	8010862 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010846:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8010848:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801084a:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 801084c:	891b      	ldrh	r3, [r3, #8]
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 fd2a 	bl	80112a8 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	88db      	ldrh	r3, [r3, #6]
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	4619      	mov	r1, r3
 801085c:	f000 f8fe 	bl	8010a5c <TIM_SetIC3Prescaler>
 8010860:	e00e      	b.n	8010880 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010862:	683b      	ldr	r3, [r7, #0]
 8010864:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 8010866:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8010868:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 801086a:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 801086c:	891b      	ldrh	r3, [r3, #8]
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f000 fd60 	bl	8011334 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	88db      	ldrh	r3, [r3, #6]
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	4619      	mov	r1, r3
 801087c:	f000 f90a 	bl	8010a94 <TIM_SetIC4Prescaler>
  }
}
 8010880:	f107 0708 	add.w	r7, r7, #8
 8010884:	46bd      	mov	sp, r7
 8010886:	bd80      	pop	{r7, pc}

08010888 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8010888:	b480      	push	{r7}
 801088a:	b083      	sub	sp, #12
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f04f 0200 	mov.w	r2, #0
 8010896:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f04f 0200 	mov.w	r2, #0
 801089e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f04f 0201 	mov.w	r2, #1
 80108a6:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f04f 0200 	mov.w	r2, #0
 80108ae:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f04f 0200 	mov.w	r2, #0
 80108b6:	811a      	strh	r2, [r3, #8]
}
 80108b8:	f107 070c 	add.w	r7, r7, #12
 80108bc:	46bd      	mov	sp, r7
 80108be:	bc80      	pop	{r7}
 80108c0:	4770      	bx	lr
 80108c2:	bf00      	nop

080108c4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
 80108cc:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 80108ce:	f04f 0300 	mov.w	r3, #0
 80108d2:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 80108d4:	f04f 0301 	mov.w	r3, #1
 80108d8:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	885b      	ldrh	r3, [r3, #2]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d103      	bne.n	80108ea <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80108e2:	f04f 0302 	mov.w	r3, #2
 80108e6:	81fb      	strh	r3, [r7, #14]
 80108e8:	e002      	b.n	80108f0 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 80108ea:	f04f 0300 	mov.w	r3, #0
 80108ee:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	889b      	ldrh	r3, [r3, #4]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d103      	bne.n	8010900 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80108f8:	f04f 0302 	mov.w	r3, #2
 80108fc:	81bb      	strh	r3, [r7, #12]
 80108fe:	e002      	b.n	8010906 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8010900:	f04f 0301 	mov.w	r3, #1
 8010904:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	881b      	ldrh	r3, [r3, #0]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d11c      	bne.n	8010948 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	8859      	ldrh	r1, [r3, #2]
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8010916:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8010918:	891b      	ldrh	r3, [r3, #8]
 801091a:	6878      	ldr	r0, [r7, #4]
 801091c:	f000 fc36 	bl	801118c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	88db      	ldrh	r3, [r3, #6]
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	4619      	mov	r1, r3
 8010928:	f000 f85e 	bl	80109e8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 801092c:	683b      	ldr	r3, [r7, #0]
 801092e:	891b      	ldrh	r3, [r3, #8]
 8010930:	89f9      	ldrh	r1, [r7, #14]
 8010932:	89ba      	ldrh	r2, [r7, #12]
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f000 fc69 	bl	801120c <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	88db      	ldrh	r3, [r3, #6]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	4619      	mov	r1, r3
 8010942:	f000 f86d 	bl	8010a20 <TIM_SetIC2Prescaler>
 8010946:	e01b      	b.n	8010980 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	8859      	ldrh	r1, [r3, #2]
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 8010950:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8010952:	891b      	ldrh	r3, [r3, #8]
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f000 fc59 	bl	801120c <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	88db      	ldrh	r3, [r3, #6]
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	4619      	mov	r1, r3
 8010962:	f000 f85d 	bl	8010a20 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	891b      	ldrh	r3, [r3, #8]
 801096a:	89f9      	ldrh	r1, [r7, #14]
 801096c:	89ba      	ldrh	r2, [r7, #12]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 fc0c 	bl	801118c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	88db      	ldrh	r3, [r3, #6]
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	4619      	mov	r1, r3
 801097c:	f000 f834 	bl	80109e8 <TIM_SetIC1Prescaler>
  }
}
 8010980:	f107 0710 	add.w	r7, r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8010994:	4618      	mov	r0, r3
 8010996:	f107 070c 	add.w	r7, r7, #12
 801099a:	46bd      	mov	sp, r7
 801099c:	bc80      	pop	{r7}
 801099e:	4770      	bx	lr

080109a0 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b083      	sub	sp, #12
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80109ac:	4618      	mov	r0, r3
 80109ae:	f107 070c 	add.w	r7, r7, #12
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bc80      	pop	{r7}
 80109b6:	4770      	bx	lr

080109b8 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b083      	sub	sp, #12
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80109c4:	4618      	mov	r0, r3
 80109c6:	f107 070c 	add.w	r7, r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	bc80      	pop	{r7}
 80109ce:	4770      	bx	lr

080109d0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 80109d0:	b480      	push	{r7}
 80109d2:	b083      	sub	sp, #12
 80109d4:	af00      	add	r7, sp, #0
 80109d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80109dc:	4618      	mov	r0, r3
 80109de:	f107 070c 	add.w	r7, r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bc80      	pop	{r7}
 80109e6:	4770      	bx	lr

080109e8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80109e8:	b480      	push	{r7}
 80109ea:	b083      	sub	sp, #12
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	460b      	mov	r3, r1
 80109f2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	8b1b      	ldrh	r3, [r3, #24]
 80109f8:	b29b      	uxth	r3, r3
 80109fa:	f023 030c 	bic.w	r3, r3, #12
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	8b1b      	ldrh	r3, [r3, #24]
 8010a08:	b29a      	uxth	r2, r3
 8010a0a:	887b      	ldrh	r3, [r7, #2]
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	b29a      	uxth	r2, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	831a      	strh	r2, [r3, #24]
}
 8010a14:	f107 070c 	add.w	r7, r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bc80      	pop	{r7}
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop

08010a20 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b083      	sub	sp, #12
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	460b      	mov	r3, r1
 8010a2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	8b1b      	ldrh	r3, [r3, #24]
 8010a30:	b29b      	uxth	r3, r3
 8010a32:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	8b1b      	ldrh	r3, [r3, #24]
 8010a40:	b29a      	uxth	r2, r3
 8010a42:	887b      	ldrh	r3, [r7, #2]
 8010a44:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	4313      	orrs	r3, r2
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	831a      	strh	r2, [r3, #24]
}
 8010a52:	f107 070c 	add.w	r7, r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bc80      	pop	{r7}
 8010a5a:	4770      	bx	lr

08010a5c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8010a5c:	b480      	push	{r7}
 8010a5e:	b083      	sub	sp, #12
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	460b      	mov	r3, r1
 8010a66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	8b9b      	ldrh	r3, [r3, #28]
 8010a6c:	b29b      	uxth	r3, r3
 8010a6e:	f023 030c 	bic.w	r3, r3, #12
 8010a72:	b29a      	uxth	r2, r3
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	8b9b      	ldrh	r3, [r3, #28]
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	887b      	ldrh	r3, [r7, #2]
 8010a80:	4313      	orrs	r3, r2
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	839a      	strh	r2, [r3, #28]
}
 8010a88:	f107 070c 	add.w	r7, r7, #12
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bc80      	pop	{r7}
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop

08010a94 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8010a94:	b480      	push	{r7}
 8010a96:	b083      	sub	sp, #12
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	8b9b      	ldrh	r3, [r3, #28]
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	8b9b      	ldrh	r3, [r3, #28]
 8010ab4:	b29a      	uxth	r2, r3
 8010ab6:	887b      	ldrh	r3, [r7, #2]
 8010ab8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8010abc:	b29b      	uxth	r3, r3
 8010abe:	4313      	orrs	r3, r2
 8010ac0:	b29a      	uxth	r2, r3
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	839a      	strh	r2, [r3, #28]
}
 8010ac6:	f107 070c 	add.w	r7, r7, #12
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bc80      	pop	{r7}
 8010ace:	4770      	bx	lr

08010ad0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	881a      	ldrh	r2, [r3, #0]
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	885b      	ldrh	r3, [r3, #2]
 8010ae2:	4313      	orrs	r3, r2
 8010ae4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8010aea:	4313      	orrs	r3, r2
 8010aec:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8010af2:	4313      	orrs	r3, r2
 8010af4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8010afa:	4313      	orrs	r3, r2
 8010afc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8010b02:	4313      	orrs	r3, r2
 8010b04:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8010b0a:	4313      	orrs	r3, r2
 8010b0c:	b29a      	uxth	r2, r3
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8010b14:	f107 070c 	add.w	r7, r7, #12
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bc80      	pop	{r7}
 8010b1c:	4770      	bx	lr
 8010b1e:	bf00      	nop

08010b20 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f04f 0200 	mov.w	r2, #0
 8010b2e:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f04f 0200 	mov.w	r2, #0
 8010b36:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	f04f 0200 	mov.w	r2, #0
 8010b3e:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f04f 0200 	mov.w	r2, #0
 8010b46:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	f04f 0200 	mov.w	r2, #0
 8010b4e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f04f 0200 	mov.w	r2, #0
 8010b56:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f04f 0200 	mov.w	r2, #0
 8010b5e:	819a      	strh	r2, [r3, #12]
}
 8010b60:	f107 070c 	add.w	r7, r7, #12
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bc80      	pop	{r7}
 8010b68:	4770      	bx	lr
 8010b6a:	bf00      	nop

08010b6c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8010b6c:	b480      	push	{r7}
 8010b6e:	b083      	sub	sp, #12
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	460b      	mov	r3, r1
 8010b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010b78:	78fb      	ldrb	r3, [r7, #3]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d00c      	beq.n	8010b98 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010b84:	b29b      	uxth	r3, r3
 8010b86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010b8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010b8e:	b29a      	uxth	r2, r3
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8010b96:	e00b      	b.n	8010bb0 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	ea4f 4343 	mov.w	r3, r3, lsl #17
 8010ba4:	ea4f 4353 	mov.w	r3, r3, lsr #17
 8010ba8:	b29a      	uxth	r2, r3
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 8010bb0:	f107 070c 	add.w	r7, r7, #12
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	bc80      	pop	{r7}
 8010bb8:	4770      	bx	lr
 8010bba:	bf00      	nop

08010bbc <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	460b      	mov	r3, r1
 8010bc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010bc8:	78fb      	ldrb	r3, [r7, #3]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d008      	beq.n	8010be0 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	889b      	ldrh	r3, [r3, #4]
 8010bd2:	b29b      	uxth	r3, r3
 8010bd4:	f043 0304 	orr.w	r3, r3, #4
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	809a      	strh	r2, [r3, #4]
 8010bde:	e007      	b.n	8010bf0 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	889b      	ldrh	r3, [r3, #4]
 8010be4:	b29b      	uxth	r3, r3
 8010be6:	f023 0304 	bic.w	r3, r3, #4
 8010bea:	b29a      	uxth	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	809a      	strh	r2, [r3, #4]
  }
}
 8010bf0:	f107 070c 	add.w	r7, r7, #12
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	bc80      	pop	{r7}
 8010bf8:	4770      	bx	lr
 8010bfa:	bf00      	nop

08010bfc <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8010bfc:	b480      	push	{r7}
 8010bfe:	b083      	sub	sp, #12
 8010c00:	af00      	add	r7, sp, #0
 8010c02:	6078      	str	r0, [r7, #4]
 8010c04:	460b      	mov	r3, r1
 8010c06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8010c08:	78fb      	ldrb	r3, [r7, #3]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d008      	beq.n	8010c20 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	889b      	ldrh	r3, [r3, #4]
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	f043 0301 	orr.w	r3, r3, #1
 8010c18:	b29a      	uxth	r2, r3
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	809a      	strh	r2, [r3, #4]
 8010c1e:	e007      	b.n	8010c30 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	889b      	ldrh	r3, [r3, #4]
 8010c24:	b29b      	uxth	r3, r3
 8010c26:	f023 0301 	bic.w	r3, r3, #1
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	809a      	strh	r2, [r3, #4]
  }
}
 8010c30:	f107 070c 	add.w	r7, r7, #12
 8010c34:	46bd      	mov	sp, r7
 8010c36:	bc80      	pop	{r7}
 8010c38:	4770      	bx	lr
 8010c3a:	bf00      	nop

08010c3c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8010c3c:	b480      	push	{r7}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	4613      	mov	r3, r2
 8010c46:	460a      	mov	r2, r1
 8010c48:	807a      	strh	r2, [r7, #2]
 8010c4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8010c4c:	787b      	ldrb	r3, [r7, #1]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d008      	beq.n	8010c64 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	899b      	ldrh	r3, [r3, #12]
 8010c56:	b29a      	uxth	r2, r3
 8010c58:	887b      	ldrh	r3, [r7, #2]
 8010c5a:	4313      	orrs	r3, r2
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	819a      	strh	r2, [r3, #12]
 8010c62:	e00a      	b.n	8010c7a <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	899b      	ldrh	r3, [r3, #12]
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	887b      	ldrh	r3, [r7, #2]
 8010c6c:	ea6f 0303 	mvn.w	r3, r3
 8010c70:	b29b      	uxth	r3, r3
 8010c72:	4013      	ands	r3, r2
 8010c74:	b29a      	uxth	r2, r3
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	819a      	strh	r2, [r3, #12]
  }
}
 8010c7a:	f107 070c 	add.w	r7, r7, #12
 8010c7e:	46bd      	mov	sp, r7
 8010c80:	bc80      	pop	{r7}
 8010c82:	4770      	bx	lr

08010c84 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 8010c84:	b480      	push	{r7}
 8010c86:	b083      	sub	sp, #12
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	887a      	ldrh	r2, [r7, #2]
 8010c94:	829a      	strh	r2, [r3, #20]
}
 8010c96:	f107 070c 	add.w	r7, r7, #12
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bc80      	pop	{r7}
 8010c9e:	4770      	bx	lr

08010ca0 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 8010ca0:	b480      	push	{r7}
 8010ca2:	b085      	sub	sp, #20
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8010cac:	f04f 0300 	mov.w	r3, #0
 8010cb0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	8a1b      	ldrh	r3, [r3, #16]
 8010cb6:	b29a      	uxth	r2, r3
 8010cb8:	887b      	ldrh	r3, [r7, #2]
 8010cba:	4013      	ands	r3, r2
 8010cbc:	b29b      	uxth	r3, r3
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d003      	beq.n	8010cca <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8010cc2:	f04f 0301 	mov.w	r3, #1
 8010cc6:	73fb      	strb	r3, [r7, #15]
 8010cc8:	e002      	b.n	8010cd0 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8010cca:	f04f 0300 	mov.w	r3, #0
 8010cce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	f107 0714 	add.w	r7, r7, #20
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bc80      	pop	{r7}
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop

08010ce0 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	460b      	mov	r3, r1
 8010cea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 8010cec:	887b      	ldrh	r3, [r7, #2]
 8010cee:	ea6f 0303 	mvn.w	r3, r3
 8010cf2:	b29a      	uxth	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	821a      	strh	r2, [r3, #16]
}
 8010cf8:	f107 070c 	add.w	r7, r7, #12
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bc80      	pop	{r7}
 8010d00:	4770      	bx	lr
 8010d02:	bf00      	nop

08010d04 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	6078      	str	r0, [r7, #4]
 8010d0c:	460b      	mov	r3, r1
 8010d0e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8010d10:	f04f 0300 	mov.w	r3, #0
 8010d14:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8010d16:	f04f 0300 	mov.w	r3, #0
 8010d1a:	81bb      	strh	r3, [r7, #12]
 8010d1c:	f04f 0300 	mov.w	r3, #0
 8010d20:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8a1b      	ldrh	r3, [r3, #16]
 8010d26:	b29a      	uxth	r2, r3
 8010d28:	887b      	ldrh	r3, [r7, #2]
 8010d2a:	4013      	ands	r3, r2
 8010d2c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	899b      	ldrh	r3, [r3, #12]
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	887b      	ldrh	r3, [r7, #2]
 8010d36:	4013      	ands	r3, r2
 8010d38:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8010d3a:	89bb      	ldrh	r3, [r7, #12]
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d006      	beq.n	8010d4e <TIM_GetITStatus+0x4a>
 8010d40:	897b      	ldrh	r3, [r7, #10]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d003      	beq.n	8010d4e <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 8010d46:	f04f 0301 	mov.w	r3, #1
 8010d4a:	73fb      	strb	r3, [r7, #15]
 8010d4c:	e002      	b.n	8010d54 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 8010d4e:	f04f 0300 	mov.w	r3, #0
 8010d52:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	f107 0714 	add.w	r7, r7, #20
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bc80      	pop	{r7}
 8010d60:	4770      	bx	lr
 8010d62:	bf00      	nop

08010d64 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8010d64:	b480      	push	{r7}
 8010d66:	b083      	sub	sp, #12
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8010d70:	887b      	ldrh	r3, [r7, #2]
 8010d72:	ea6f 0303 	mvn.w	r3, r3
 8010d76:	b29a      	uxth	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	821a      	strh	r2, [r3, #16]
}
 8010d7c:	f107 070c 	add.w	r7, r7, #12
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bc80      	pop	{r7}
 8010d84:	4770      	bx	lr
 8010d86:	bf00      	nop

08010d88 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	4613      	mov	r3, r2
 8010d92:	460a      	mov	r2, r1
 8010d94:	807a      	strh	r2, [r7, #2]
 8010d96:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 8010d98:	887a      	ldrh	r2, [r7, #2]
 8010d9a:	883b      	ldrh	r3, [r7, #0]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	b29a      	uxth	r2, r3
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 8010da6:	f107 070c 	add.w	r7, r7, #12
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bc80      	pop	{r7}
 8010dae:	4770      	bx	lr

08010db0 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8010db0:	b480      	push	{r7}
 8010db2:	b083      	sub	sp, #12
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	6078      	str	r0, [r7, #4]
 8010db8:	4613      	mov	r3, r2
 8010dba:	460a      	mov	r2, r1
 8010dbc:	807a      	strh	r2, [r7, #2]
 8010dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8010dc0:	787b      	ldrb	r3, [r7, #1]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d008      	beq.n	8010dd8 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	899b      	ldrh	r3, [r3, #12]
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	887b      	ldrh	r3, [r7, #2]
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	819a      	strh	r2, [r3, #12]
 8010dd6:	e00a      	b.n	8010dee <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	899b      	ldrh	r3, [r3, #12]
 8010ddc:	b29a      	uxth	r2, r3
 8010dde:	887b      	ldrh	r3, [r7, #2]
 8010de0:	ea6f 0303 	mvn.w	r3, r3
 8010de4:	b29b      	uxth	r3, r3
 8010de6:	4013      	ands	r3, r2
 8010de8:	b29a      	uxth	r2, r3
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	819a      	strh	r2, [r3, #12]
  }
}
 8010dee:	f107 070c 	add.w	r7, r7, #12
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bc80      	pop	{r7}
 8010df6:	4770      	bx	lr

08010df8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	460b      	mov	r3, r1
 8010e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8010e04:	78fb      	ldrb	r3, [r7, #3]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d008      	beq.n	8010e1c <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	889b      	ldrh	r3, [r3, #4]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	f043 0308 	orr.w	r3, r3, #8
 8010e14:	b29a      	uxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	809a      	strh	r2, [r3, #4]
 8010e1a:	e007      	b.n	8010e2c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	889b      	ldrh	r3, [r3, #4]
 8010e20:	b29b      	uxth	r3, r3
 8010e22:	f023 0308 	bic.w	r3, r3, #8
 8010e26:	b29a      	uxth	r2, r3
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	809a      	strh	r2, [r3, #4]
  }
}
 8010e2c:	f107 070c 	add.w	r7, r7, #12
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bc80      	pop	{r7}
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop

08010e38 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	891b      	ldrh	r3, [r3, #8]
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	f023 0307 	bic.w	r3, r3, #7
 8010e4a:	b29a      	uxth	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	811a      	strh	r2, [r3, #8]
}
 8010e50:	f107 070c 	add.w	r7, r7, #12
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bc80      	pop	{r7}
 8010e58:	4770      	bx	lr
 8010e5a:	bf00      	nop

08010e5c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	460b      	mov	r3, r1
 8010e66:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 8010e68:	887b      	ldrh	r3, [r7, #2]
 8010e6a:	6878      	ldr	r0, [r7, #4]
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	f000 f87d 	bl	8010f6c <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	891b      	ldrh	r3, [r3, #8]
 8010e76:	b29b      	uxth	r3, r3
 8010e78:	f043 0307 	orr.w	r3, r3, #7
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	811a      	strh	r2, [r3, #8]
}
 8010e82:	f107 0708 	add.w	r7, r7, #8
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop

08010e8c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b084      	sub	sp, #16
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	60f8      	str	r0, [r7, #12]
 8010e94:	8179      	strh	r1, [r7, #10]
 8010e96:	813a      	strh	r2, [r7, #8]
 8010e98:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8010e9a:	897b      	ldrh	r3, [r7, #10]
 8010e9c:	2b60      	cmp	r3, #96	; 0x60
 8010e9e:	d108      	bne.n	8010eb2 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8010ea0:	893a      	ldrh	r2, [r7, #8]
 8010ea2:	88fb      	ldrh	r3, [r7, #6]
 8010ea4:	68f8      	ldr	r0, [r7, #12]
 8010ea6:	4611      	mov	r1, r2
 8010ea8:	f04f 0201 	mov.w	r2, #1
 8010eac:	f000 f9ae 	bl	801120c <TI2_Config>
 8010eb0:	e007      	b.n	8010ec2 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 8010eb2:	893a      	ldrh	r2, [r7, #8]
 8010eb4:	88fb      	ldrh	r3, [r7, #6]
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	4611      	mov	r1, r2
 8010eba:	f04f 0201 	mov.w	r2, #1
 8010ebe:	f000 f965 	bl	801118c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 8010ec2:	897b      	ldrh	r3, [r7, #10]
 8010ec4:	68f8      	ldr	r0, [r7, #12]
 8010ec6:	4619      	mov	r1, r3
 8010ec8:	f000 f850 	bl	8010f6c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	891b      	ldrh	r3, [r3, #8]
 8010ed0:	b29b      	uxth	r3, r3
 8010ed2:	f043 0307 	orr.w	r3, r3, #7
 8010ed6:	b29a      	uxth	r2, r3
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	811a      	strh	r2, [r3, #8]
}
 8010edc:	f107 0710 	add.w	r7, r7, #16
 8010ee0:	46bd      	mov	sp, r7
 8010ee2:	bd80      	pop	{r7, pc}

08010ee4 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8010ee4:	b580      	push	{r7, lr}
 8010ee6:	b086      	sub	sp, #24
 8010ee8:	af00      	add	r7, sp, #0
 8010eea:	60f8      	str	r0, [r7, #12]
 8010eec:	8179      	strh	r1, [r7, #10]
 8010eee:	813a      	strh	r2, [r7, #8]
 8010ef0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 8010ef2:	f04f 0300 	mov.w	r3, #0
 8010ef6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8010ef8:	8979      	ldrh	r1, [r7, #10]
 8010efa:	893a      	ldrh	r2, [r7, #8]
 8010efc:	88fb      	ldrh	r3, [r7, #6]
 8010efe:	68f8      	ldr	r0, [r7, #12]
 8010f00:	f000 f8a4 	bl	801104c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	891b      	ldrh	r3, [r3, #8]
 8010f08:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 8010f0a:	8afb      	ldrh	r3, [r7, #22]
 8010f0c:	f023 0307 	bic.w	r3, r3, #7
 8010f10:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 8010f12:	8afb      	ldrh	r3, [r7, #22]
 8010f14:	f043 0307 	orr.w	r3, r3, #7
 8010f18:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8010f1a:	8afb      	ldrh	r3, [r7, #22]
 8010f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f20:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 8010f22:	8afb      	ldrh	r3, [r7, #22]
 8010f24:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8010f28:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	8afa      	ldrh	r2, [r7, #22]
 8010f2e:	811a      	strh	r2, [r3, #8]
}
 8010f30:	f107 0718 	add.w	r7, r7, #24
 8010f34:	46bd      	mov	sp, r7
 8010f36:	bd80      	pop	{r7, pc}

08010f38 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b084      	sub	sp, #16
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	60f8      	str	r0, [r7, #12]
 8010f40:	8179      	strh	r1, [r7, #10]
 8010f42:	813a      	strh	r2, [r7, #8]
 8010f44:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 8010f46:	8979      	ldrh	r1, [r7, #10]
 8010f48:	893a      	ldrh	r2, [r7, #8]
 8010f4a:	88fb      	ldrh	r3, [r7, #6]
 8010f4c:	68f8      	ldr	r0, [r7, #12]
 8010f4e:	f000 f87d 	bl	801104c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	891b      	ldrh	r3, [r3, #8]
 8010f56:	b29b      	uxth	r3, r3
 8010f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010f5c:	b29a      	uxth	r2, r3
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	811a      	strh	r2, [r3, #8]
}
 8010f62:	f107 0710 	add.w	r7, r7, #16
 8010f66:	46bd      	mov	sp, r7
 8010f68:	bd80      	pop	{r7, pc}
 8010f6a:	bf00      	nop

08010f6c <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8010f6c:	b480      	push	{r7}
 8010f6e:	b085      	sub	sp, #20
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	460b      	mov	r3, r1
 8010f76:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8010f78:	f04f 0300 	mov.w	r3, #0
 8010f7c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	891b      	ldrh	r3, [r3, #8]
 8010f82:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 8010f84:	89fb      	ldrh	r3, [r7, #14]
 8010f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010f8a:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8010f8c:	89fa      	ldrh	r2, [r7, #14]
 8010f8e:	887b      	ldrh	r3, [r7, #2]
 8010f90:	4313      	orrs	r3, r2
 8010f92:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	89fa      	ldrh	r2, [r7, #14]
 8010f98:	811a      	strh	r2, [r3, #8]
}
 8010f9a:	f107 0714 	add.w	r7, r7, #20
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bc80      	pop	{r7}
 8010fa2:	4770      	bx	lr

08010fa4 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	460b      	mov	r3, r1
 8010fae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	889b      	ldrh	r3, [r3, #4]
 8010fb4:	b29b      	uxth	r3, r3
 8010fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fba:	b29a      	uxth	r2, r3
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	889b      	ldrh	r3, [r3, #4]
 8010fc4:	b29a      	uxth	r2, r3
 8010fc6:	887b      	ldrh	r3, [r7, #2]
 8010fc8:	4313      	orrs	r3, r2
 8010fca:	b29a      	uxth	r2, r3
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	809a      	strh	r2, [r3, #4]
}
 8010fd0:	f107 070c 	add.w	r7, r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bc80      	pop	{r7}
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop

08010fdc <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	6078      	str	r0, [r7, #4]
 8010fe4:	460b      	mov	r3, r1
 8010fe6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	891b      	ldrh	r3, [r3, #8]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	f023 0307 	bic.w	r3, r3, #7
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	891b      	ldrh	r3, [r3, #8]
 8010ffc:	b29a      	uxth	r2, r3
 8010ffe:	887b      	ldrh	r3, [r7, #2]
 8011000:	4313      	orrs	r3, r2
 8011002:	b29a      	uxth	r2, r3
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	811a      	strh	r2, [r3, #8]
}
 8011008:	f107 070c 	add.w	r7, r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	bc80      	pop	{r7}
 8011010:	4770      	bx	lr
 8011012:	bf00      	nop

08011014 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8011014:	b480      	push	{r7}
 8011016:	b083      	sub	sp, #12
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
 801101c:	460b      	mov	r3, r1
 801101e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	891b      	ldrh	r3, [r3, #8]
 8011024:	b29b      	uxth	r3, r3
 8011026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801102a:	b29a      	uxth	r2, r3
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	891b      	ldrh	r3, [r3, #8]
 8011034:	b29a      	uxth	r2, r3
 8011036:	887b      	ldrh	r3, [r7, #2]
 8011038:	4313      	orrs	r3, r2
 801103a:	b29a      	uxth	r2, r3
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	811a      	strh	r2, [r3, #8]
}
 8011040:	f107 070c 	add.w	r7, r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	bc80      	pop	{r7}
 8011048:	4770      	bx	lr
 801104a:	bf00      	nop

0801104c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 801104c:	b480      	push	{r7}
 801104e:	b087      	sub	sp, #28
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	8179      	strh	r1, [r7, #10]
 8011056:	813a      	strh	r2, [r7, #8]
 8011058:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 801105a:	f04f 0300 	mov.w	r3, #0
 801105e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	891b      	ldrh	r3, [r3, #8]
 8011064:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8011066:	8afb      	ldrh	r3, [r7, #22]
 8011068:	b2db      	uxtb	r3, r3
 801106a:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 801106c:	88fb      	ldrh	r3, [r7, #6]
 801106e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011072:	b29a      	uxth	r2, r3
 8011074:	893b      	ldrh	r3, [r7, #8]
 8011076:	4313      	orrs	r3, r2
 8011078:	b29a      	uxth	r2, r3
 801107a:	897b      	ldrh	r3, [r7, #10]
 801107c:	4313      	orrs	r3, r2
 801107e:	b29a      	uxth	r2, r3
 8011080:	8afb      	ldrh	r3, [r7, #22]
 8011082:	4313      	orrs	r3, r2
 8011084:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	8afa      	ldrh	r2, [r7, #22]
 801108a:	811a      	strh	r2, [r3, #8]
}
 801108c:	f107 071c 	add.w	r7, r7, #28
 8011090:	46bd      	mov	sp, r7
 8011092:	bc80      	pop	{r7}
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop

08011098 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8011098:	b480      	push	{r7}
 801109a:	b087      	sub	sp, #28
 801109c:	af00      	add	r7, sp, #0
 801109e:	60f8      	str	r0, [r7, #12]
 80110a0:	8179      	strh	r1, [r7, #10]
 80110a2:	813a      	strh	r2, [r7, #8]
 80110a4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 80110a6:	f04f 0300 	mov.w	r3, #0
 80110aa:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 80110ac:	f04f 0300 	mov.w	r3, #0
 80110b0:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 80110b2:	f04f 0300 	mov.w	r3, #0
 80110b6:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	891b      	ldrh	r3, [r3, #8]
 80110bc:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	8b1b      	ldrh	r3, [r3, #24]
 80110c2:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80110c4:	68fb      	ldr	r3, [r7, #12]
 80110c6:	8c1b      	ldrh	r3, [r3, #32]
 80110c8:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 80110ca:	8afb      	ldrh	r3, [r7, #22]
 80110cc:	f023 0307 	bic.w	r3, r3, #7
 80110d0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 80110d2:	8afa      	ldrh	r2, [r7, #22]
 80110d4:	897b      	ldrh	r3, [r7, #10]
 80110d6:	4313      	orrs	r3, r2
 80110d8:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 80110da:	8abb      	ldrh	r3, [r7, #20]
 80110dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110e0:	f023 0303 	bic.w	r3, r3, #3
 80110e4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 80110e6:	8abb      	ldrh	r3, [r7, #20]
 80110e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80110ec:	f043 0301 	orr.w	r3, r3, #1
 80110f0:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 80110f2:	8a7b      	ldrh	r3, [r7, #18]
 80110f4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80110f8:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 80110fa:	88fb      	ldrh	r3, [r7, #6]
 80110fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011100:	b29a      	uxth	r2, r3
 8011102:	893b      	ldrh	r3, [r7, #8]
 8011104:	4313      	orrs	r3, r2
 8011106:	b29a      	uxth	r2, r3
 8011108:	8a7b      	ldrh	r3, [r7, #18]
 801110a:	4313      	orrs	r3, r2
 801110c:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	8afa      	ldrh	r2, [r7, #22]
 8011112:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	8aba      	ldrh	r2, [r7, #20]
 8011118:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	8a7a      	ldrh	r2, [r7, #18]
 801111e:	841a      	strh	r2, [r3, #32]
}
 8011120:	f107 071c 	add.w	r7, r7, #28
 8011124:	46bd      	mov	sp, r7
 8011126:	bc80      	pop	{r7}
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop

0801112c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 801112c:	b480      	push	{r7}
 801112e:	b083      	sub	sp, #12
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	460b      	mov	r3, r1
 8011136:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8011138:	78fb      	ldrb	r3, [r7, #3]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d008      	beq.n	8011150 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	889b      	ldrh	r3, [r3, #4]
 8011142:	b29b      	uxth	r3, r3
 8011144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011148:	b29a      	uxth	r2, r3
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	809a      	strh	r2, [r3, #4]
 801114e:	e007      	b.n	8011160 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	889b      	ldrh	r3, [r3, #4]
 8011154:	b29b      	uxth	r3, r3
 8011156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801115a:	b29a      	uxth	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	809a      	strh	r2, [r3, #4]
  }
}
 8011160:	f107 070c 	add.w	r7, r7, #12
 8011164:	46bd      	mov	sp, r7
 8011166:	bc80      	pop	{r7}
 8011168:	4770      	bx	lr
 801116a:	bf00      	nop

0801116c <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 801116c:	b480      	push	{r7}
 801116e:	b083      	sub	sp, #12
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]
 8011174:	460b      	mov	r3, r1
 8011176:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	887a      	ldrh	r2, [r7, #2]
 801117c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 8011180:	f107 070c 	add.w	r7, r7, #12
 8011184:	46bd      	mov	sp, r7
 8011186:	bc80      	pop	{r7}
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop

0801118c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801118c:	b480      	push	{r7}
 801118e:	b087      	sub	sp, #28
 8011190:	af00      	add	r7, sp, #0
 8011192:	60f8      	str	r0, [r7, #12]
 8011194:	8179      	strh	r1, [r7, #10]
 8011196:	813a      	strh	r2, [r7, #8]
 8011198:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 801119a:	f04f 0300 	mov.w	r3, #0
 801119e:	82fb      	strh	r3, [r7, #22]
 80111a0:	f04f 0300 	mov.w	r3, #0
 80111a4:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	8c1b      	ldrh	r3, [r3, #32]
 80111aa:	b29b      	uxth	r3, r3
 80111ac:	f023 0301 	bic.w	r3, r3, #1
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	8b1b      	ldrh	r3, [r3, #24]
 80111ba:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	8c1b      	ldrh	r3, [r3, #32]
 80111c0:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 80111c2:	8afb      	ldrh	r3, [r7, #22]
 80111c4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80111c8:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80111ca:	88fb      	ldrh	r3, [r7, #6]
 80111cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	893b      	ldrh	r3, [r7, #8]
 80111d4:	4313      	orrs	r3, r2
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	8afb      	ldrh	r3, [r7, #22]
 80111da:	4313      	orrs	r3, r2
 80111dc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80111de:	8abb      	ldrh	r3, [r7, #20]
 80111e0:	f023 030a 	bic.w	r3, r3, #10
 80111e4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80111e6:	897a      	ldrh	r2, [r7, #10]
 80111e8:	8abb      	ldrh	r3, [r7, #20]
 80111ea:	4313      	orrs	r3, r2
 80111ec:	b29b      	uxth	r3, r3
 80111ee:	f043 0301 	orr.w	r3, r3, #1
 80111f2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	8afa      	ldrh	r2, [r7, #22]
 80111f8:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	8aba      	ldrh	r2, [r7, #20]
 80111fe:	841a      	strh	r2, [r3, #32]
}
 8011200:	f107 071c 	add.w	r7, r7, #28
 8011204:	46bd      	mov	sp, r7
 8011206:	bc80      	pop	{r7}
 8011208:	4770      	bx	lr
 801120a:	bf00      	nop

0801120c <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 801120c:	b480      	push	{r7}
 801120e:	b087      	sub	sp, #28
 8011210:	af00      	add	r7, sp, #0
 8011212:	60f8      	str	r0, [r7, #12]
 8011214:	8179      	strh	r1, [r7, #10]
 8011216:	813a      	strh	r2, [r7, #8]
 8011218:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 801121a:	f04f 0300 	mov.w	r3, #0
 801121e:	82fb      	strh	r3, [r7, #22]
 8011220:	f04f 0300 	mov.w	r3, #0
 8011224:	82bb      	strh	r3, [r7, #20]
 8011226:	f04f 0300 	mov.w	r3, #0
 801122a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	8c1b      	ldrh	r3, [r3, #32]
 8011230:	b29b      	uxth	r3, r3
 8011232:	f023 0310 	bic.w	r3, r3, #16
 8011236:	b29a      	uxth	r2, r3
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	8b1b      	ldrh	r3, [r3, #24]
 8011240:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	8c1b      	ldrh	r3, [r3, #32]
 8011246:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8011248:	897b      	ldrh	r3, [r7, #10]
 801124a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 801124e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8011250:	8afb      	ldrh	r3, [r7, #22]
 8011252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011256:	ea4f 5303 	mov.w	r3, r3, lsl #20
 801125a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 801125e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8011260:	88fb      	ldrh	r3, [r7, #6]
 8011262:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011266:	b29a      	uxth	r2, r3
 8011268:	8afb      	ldrh	r3, [r7, #22]
 801126a:	4313      	orrs	r3, r2
 801126c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 801126e:	893b      	ldrh	r3, [r7, #8]
 8011270:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011274:	b29a      	uxth	r2, r3
 8011276:	8afb      	ldrh	r3, [r7, #22]
 8011278:	4313      	orrs	r3, r2
 801127a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801127c:	8abb      	ldrh	r3, [r7, #20]
 801127e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8011282:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 8011284:	8a7a      	ldrh	r2, [r7, #18]
 8011286:	8abb      	ldrh	r3, [r7, #20]
 8011288:	4313      	orrs	r3, r2
 801128a:	b29b      	uxth	r3, r3
 801128c:	f043 0310 	orr.w	r3, r3, #16
 8011290:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	8afa      	ldrh	r2, [r7, #22]
 8011296:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	8aba      	ldrh	r2, [r7, #20]
 801129c:	841a      	strh	r2, [r3, #32]
}
 801129e:	f107 071c 	add.w	r7, r7, #28
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bc80      	pop	{r7}
 80112a6:	4770      	bx	lr

080112a8 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b087      	sub	sp, #28
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	8179      	strh	r1, [r7, #10]
 80112b2:	813a      	strh	r2, [r7, #8]
 80112b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80112b6:	f04f 0300 	mov.w	r3, #0
 80112ba:	82fb      	strh	r3, [r7, #22]
 80112bc:	f04f 0300 	mov.w	r3, #0
 80112c0:	82bb      	strh	r3, [r7, #20]
 80112c2:	f04f 0300 	mov.w	r3, #0
 80112c6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	8c1b      	ldrh	r3, [r3, #32]
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	8b9b      	ldrh	r3, [r3, #28]
 80112dc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	8c1b      	ldrh	r3, [r3, #32]
 80112e2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80112e4:	897b      	ldrh	r3, [r7, #10]
 80112e6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 80112ea:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 80112ec:	8afb      	ldrh	r3, [r7, #22]
 80112ee:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80112f2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80112f4:	88fb      	ldrh	r3, [r7, #6]
 80112f6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80112fa:	b29a      	uxth	r2, r3
 80112fc:	893b      	ldrh	r3, [r7, #8]
 80112fe:	4313      	orrs	r3, r2
 8011300:	b29a      	uxth	r2, r3
 8011302:	8afb      	ldrh	r3, [r7, #22]
 8011304:	4313      	orrs	r3, r2
 8011306:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8011308:	8abb      	ldrh	r3, [r7, #20]
 801130a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 801130e:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8011310:	8a7a      	ldrh	r2, [r7, #18]
 8011312:	8abb      	ldrh	r3, [r7, #20]
 8011314:	4313      	orrs	r3, r2
 8011316:	b29b      	uxth	r3, r3
 8011318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801131c:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	8afa      	ldrh	r2, [r7, #22]
 8011322:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8011324:	68fb      	ldr	r3, [r7, #12]
 8011326:	8aba      	ldrh	r2, [r7, #20]
 8011328:	841a      	strh	r2, [r3, #32]
}
 801132a:	f107 071c 	add.w	r7, r7, #28
 801132e:	46bd      	mov	sp, r7
 8011330:	bc80      	pop	{r7}
 8011332:	4770      	bx	lr

08011334 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8011334:	b480      	push	{r7}
 8011336:	b087      	sub	sp, #28
 8011338:	af00      	add	r7, sp, #0
 801133a:	60f8      	str	r0, [r7, #12]
 801133c:	8179      	strh	r1, [r7, #10]
 801133e:	813a      	strh	r2, [r7, #8]
 8011340:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8011342:	f04f 0300 	mov.w	r3, #0
 8011346:	82fb      	strh	r3, [r7, #22]
 8011348:	f04f 0300 	mov.w	r3, #0
 801134c:	82bb      	strh	r3, [r7, #20]
 801134e:	f04f 0300 	mov.w	r3, #0
 8011352:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	8c1b      	ldrh	r3, [r3, #32]
 8011358:	b29b      	uxth	r3, r3
 801135a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801135e:	b29a      	uxth	r2, r3
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8011364:	68fb      	ldr	r3, [r7, #12]
 8011366:	8b9b      	ldrh	r3, [r3, #28]
 8011368:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	8c1b      	ldrh	r3, [r3, #32]
 801136e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8011370:	897b      	ldrh	r3, [r7, #10]
 8011372:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011376:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 8011378:	8afb      	ldrh	r3, [r7, #22]
 801137a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801137e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8011382:	ea4f 5313 	mov.w	r3, r3, lsr #20
 8011386:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8011388:	893b      	ldrh	r3, [r7, #8]
 801138a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 801138e:	b29a      	uxth	r2, r3
 8011390:	8afb      	ldrh	r3, [r7, #22]
 8011392:	4313      	orrs	r3, r2
 8011394:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8011396:	88fb      	ldrh	r3, [r7, #6]
 8011398:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801139c:	b29a      	uxth	r2, r3
 801139e:	8afb      	ldrh	r3, [r7, #22]
 80113a0:	4313      	orrs	r3, r2
 80113a2:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80113a4:	8abb      	ldrh	r3, [r7, #20]
 80113a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80113aa:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80113ae:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80113b2:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 80113b4:	8a7a      	ldrh	r2, [r7, #18]
 80113b6:	8abb      	ldrh	r3, [r7, #20]
 80113b8:	4313      	orrs	r3, r2
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80113c0:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	8afa      	ldrh	r2, [r7, #22]
 80113c6:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	8aba      	ldrh	r2, [r7, #20]
 80113cc:	841a      	strh	r2, [r3, #32]
}
 80113ce:	f107 071c 	add.w	r7, r7, #28
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bc80      	pop	{r7}
 80113d6:	4770      	bx	lr

080113d8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b082      	sub	sp, #8
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80113e0:	687a      	ldr	r2, [r7, #4]
 80113e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113e6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d10c      	bne.n	8011408 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80113ee:	f04f 0010 	mov.w	r0, #16
 80113f2:	f04f 0101 	mov.w	r1, #1
 80113f6:	f7fb f8e1 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80113fa:	f04f 0010 	mov.w	r0, #16
 80113fe:	f04f 0100 	mov.w	r1, #0
 8011402:	f7fb f8db 	bl	800c5bc <RCC_APB2PeriphResetCmd>
 8011406:	e062      	b.n	80114ce <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 8011408:	687a      	ldr	r2, [r7, #4]
 801140a:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 801140e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011412:	429a      	cmp	r2, r3
 8011414:	d10c      	bne.n	8011430 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8011416:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 801141a:	f04f 0101 	mov.w	r1, #1
 801141e:	f7fb f8a3 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8011422:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8011426:	f04f 0100 	mov.w	r1, #0
 801142a:	f7fb f89d 	bl	800c568 <RCC_APB1PeriphResetCmd>
 801142e:	e04e      	b.n	80114ce <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8011436:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801143a:	429a      	cmp	r2, r3
 801143c:	d10c      	bne.n	8011458 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 801143e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8011442:	f04f 0101 	mov.w	r1, #1
 8011446:	f7fb f88f 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 801144a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 801144e:	f04f 0100 	mov.w	r1, #0
 8011452:	f7fb f889 	bl	800c568 <RCC_APB1PeriphResetCmd>
 8011456:	e03a      	b.n	80114ce <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 8011458:	687a      	ldr	r2, [r7, #4]
 801145a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 801145e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011462:	429a      	cmp	r2, r3
 8011464:	d10c      	bne.n	8011480 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 8011466:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 801146a:	f04f 0101 	mov.w	r1, #1
 801146e:	f7fb f87b 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 8011472:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8011476:	f04f 0100 	mov.w	r1, #0
 801147a:	f7fb f875 	bl	800c568 <RCC_APB1PeriphResetCmd>
 801147e:	e026      	b.n	80114ce <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 8011480:	687a      	ldr	r2, [r7, #4]
 8011482:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8011486:	f2c4 0300 	movt	r3, #16384	; 0x4000
 801148a:	429a      	cmp	r2, r3
 801148c:	d10c      	bne.n	80114a8 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 801148e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8011492:	f04f 0101 	mov.w	r1, #1
 8011496:	f7fb f867 	bl	800c568 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 801149a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801149e:	f04f 0100 	mov.w	r1, #0
 80114a2:	f7fb f861 	bl	800c568 <RCC_APB1PeriphResetCmd>
 80114a6:	e012      	b.n	80114ce <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 80114a8:	687a      	ldr	r2, [r7, #4]
 80114aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80114ae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80114b2:	429a      	cmp	r2, r3
 80114b4:	d10b      	bne.n	80114ce <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 80114b6:	f04f 0020 	mov.w	r0, #32
 80114ba:	f04f 0101 	mov.w	r1, #1
 80114be:	f7fb f87d 	bl	800c5bc <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 80114c2:	f04f 0020 	mov.w	r0, #32
 80114c6:	f04f 0100 	mov.w	r1, #0
 80114ca:	f7fb f877 	bl	800c5bc <RCC_APB2PeriphResetCmd>
    }
  }
}
 80114ce:	f107 0708 	add.w	r7, r7, #8
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop

080114d8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b08a      	sub	sp, #40	; 0x28
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
 80114e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80114e2:	f04f 0300 	mov.w	r3, #0
 80114e6:	627b      	str	r3, [r7, #36]	; 0x24
 80114e8:	f04f 0300 	mov.w	r3, #0
 80114ec:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80114ee:	f04f 0300 	mov.w	r3, #0
 80114f2:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80114f4:	f04f 0300 	mov.w	r3, #0
 80114f8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	8a1b      	ldrh	r3, [r3, #16]
 80114fe:	b29b      	uxth	r3, r3
 8011500:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8011502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011504:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8011508:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	88db      	ldrh	r3, [r3, #6]
 801150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011510:	4313      	orrs	r3, r2
 8011512:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8011514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011516:	b29a      	uxth	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	899b      	ldrh	r3, [r3, #12]
 8011520:	b29b      	uxth	r3, r3
 8011522:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8011524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011526:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801152a:	f023 030c 	bic.w	r3, r3, #12
 801152e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	889a      	ldrh	r2, [r3, #4]
 8011534:	683b      	ldr	r3, [r7, #0]
 8011536:	891b      	ldrh	r3, [r3, #8]
 8011538:	4313      	orrs	r3, r2
 801153a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8011540:	4313      	orrs	r3, r2
 8011542:	b29b      	uxth	r3, r3
 8011544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011546:	4313      	orrs	r3, r2
 8011548:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 801154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801154c:	b29a      	uxth	r2, r3
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	8a9b      	ldrh	r3, [r3, #20]
 8011556:	b29b      	uxth	r3, r3
 8011558:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 801155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801155c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011560:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	899b      	ldrh	r3, [r3, #12]
 8011566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011568:	4313      	orrs	r3, r2
 801156a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 801156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8011574:	f107 0308 	add.w	r3, r7, #8
 8011578:	4618      	mov	r0, r3
 801157a:	f7fa fd55 	bl	800c028 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 801157e:	687a      	ldr	r2, [r7, #4]
 8011580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011584:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011588:	429a      	cmp	r2, r3
 801158a:	d006      	beq.n	801159a <USART_Init+0xc2>
 801158c:	687a      	ldr	r2, [r7, #4]
 801158e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8011592:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8011596:	429a      	cmp	r2, r3
 8011598:	d102      	bne.n	80115a0 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	623b      	str	r3, [r7, #32]
 801159e:	e001      	b.n	80115a4 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	899b      	ldrh	r3, [r3, #12]
 80115a8:	b29b      	uxth	r3, r3
 80115aa:	b29b      	uxth	r3, r3
 80115ac:	b21b      	sxth	r3, r3
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	da0f      	bge.n	80115d2 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80115b2:	6a3a      	ldr	r2, [r7, #32]
 80115b4:	4613      	mov	r3, r2
 80115b6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80115ba:	189b      	adds	r3, r3, r2
 80115bc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80115c0:	189a      	adds	r2, r3, r2
 80115c2:	683b      	ldr	r3, [r7, #0]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80115ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80115ce:	61fb      	str	r3, [r7, #28]
 80115d0:	e00e      	b.n	80115f0 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80115d2:	6a3a      	ldr	r2, [r7, #32]
 80115d4:	4613      	mov	r3, r2
 80115d6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80115da:	189b      	adds	r3, r3, r2
 80115dc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80115e0:	189a      	adds	r2, r3, r2
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80115ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80115ee:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 80115f0:	69fa      	ldr	r2, [r7, #28]
 80115f2:	f248 531f 	movw	r3, #34079	; 0x851f
 80115f6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80115fa:	fba3 1302 	umull	r1, r3, r3, r2
 80115fe:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011602:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011606:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8011608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160a:	ea4f 1313 	mov.w	r3, r3, lsr #4
 801160e:	f04f 0264 	mov.w	r2, #100	; 0x64
 8011612:	fb02 f303 	mul.w	r3, r2, r3
 8011616:	69fa      	ldr	r2, [r7, #28]
 8011618:	1ad3      	subs	r3, r2, r3
 801161a:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	899b      	ldrh	r3, [r3, #12]
 8011620:	b29b      	uxth	r3, r3
 8011622:	b29b      	uxth	r3, r3
 8011624:	b21b      	sxth	r3, r3
 8011626:	2b00      	cmp	r3, #0
 8011628:	da12      	bge.n	8011650 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 801162a:	69bb      	ldr	r3, [r7, #24]
 801162c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8011630:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8011634:	f248 531f 	movw	r3, #34079	; 0x851f
 8011638:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 801163c:	fba3 1302 	umull	r1, r3, r3, r2
 8011640:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011644:	f003 0307 	and.w	r3, r3, #7
 8011648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801164a:	4313      	orrs	r3, r2
 801164c:	627b      	str	r3, [r7, #36]	; 0x24
 801164e:	e011      	b.n	8011674 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8011656:	f103 0232 	add.w	r2, r3, #50	; 0x32
 801165a:	f248 531f 	movw	r3, #34079	; 0x851f
 801165e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 8011662:	fba3 1302 	umull	r1, r3, r3, r2
 8011666:	ea4f 1353 	mov.w	r3, r3, lsr #5
 801166a:	f003 030f 	and.w	r3, r3, #15
 801166e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011670:	4313      	orrs	r3, r2
 8011672:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	b29a      	uxth	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	811a      	strh	r2, [r3, #8]
}
 801167c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8011692:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f04f 0200 	mov.w	r2, #0
 801169a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f04f 0200 	mov.w	r2, #0
 80116a2:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f04f 0200 	mov.w	r2, #0
 80116aa:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f04f 020c 	mov.w	r2, #12
 80116b2:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f04f 0200 	mov.w	r2, #0
 80116ba:	819a      	strh	r2, [r3, #12]
}
 80116bc:	f107 070c 	add.w	r7, r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bc80      	pop	{r7}
 80116c4:	4770      	bx	lr
 80116c6:	bf00      	nop

080116c8 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 80116d2:	f04f 0300 	mov.w	r3, #0
 80116d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	8a1b      	ldrh	r3, [r3, #16]
 80116dc:	b29b      	uxth	r3, r3
 80116de:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80116e6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	881a      	ldrh	r2, [r3, #0]
 80116ec:	683b      	ldr	r3, [r7, #0]
 80116ee:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 80116f0:	4313      	orrs	r3, r2
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	889b      	ldrh	r3, [r3, #4]
 80116f8:	4313      	orrs	r3, r2
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	88db      	ldrh	r3, [r3, #6]
 8011700:	4313      	orrs	r3, r2
 8011702:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8011704:	68fa      	ldr	r2, [r7, #12]
 8011706:	4313      	orrs	r3, r2
 8011708:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	b29a      	uxth	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	821a      	strh	r2, [r3, #16]
}
 8011712:	f107 0714 	add.w	r7, r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	bc80      	pop	{r7}
 801171a:	4770      	bx	lr

0801171c <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 801171c:	b480      	push	{r7}
 801171e:	b083      	sub	sp, #12
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f04f 0200 	mov.w	r2, #0
 801172a:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	f04f 0200 	mov.w	r2, #0
 8011732:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f04f 0200 	mov.w	r2, #0
 801173a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f04f 0200 	mov.w	r2, #0
 8011742:	80da      	strh	r2, [r3, #6]
}
 8011744:	f107 070c 	add.w	r7, r7, #12
 8011748:	46bd      	mov	sp, r7
 801174a:	bc80      	pop	{r7}
 801174c:	4770      	bx	lr
 801174e:	bf00      	nop

08011750 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	460b      	mov	r3, r1
 801175a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d008      	beq.n	8011774 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	899b      	ldrh	r3, [r3, #12]
 8011766:	b29b      	uxth	r3, r3
 8011768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801176c:	b29a      	uxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	819a      	strh	r2, [r3, #12]
 8011772:	e007      	b.n	8011784 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	899b      	ldrh	r3, [r3, #12]
 8011778:	b29b      	uxth	r3, r3
 801177a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801177e:	b29a      	uxth	r2, r3
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	819a      	strh	r2, [r3, #12]
  }
}
 8011784:	f107 070c 	add.w	r7, r7, #12
 8011788:	46bd      	mov	sp, r7
 801178a:	bc80      	pop	{r7}
 801178c:	4770      	bx	lr
 801178e:	bf00      	nop

08011790 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
 8011798:	460b      	mov	r3, r1
 801179a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	8b1b      	ldrh	r3, [r3, #24]
 80117a0:	b29b      	uxth	r3, r3
 80117a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80117a6:	b29a      	uxth	r2, r3
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	8b1b      	ldrh	r3, [r3, #24]
 80117b0:	b29a      	uxth	r2, r3
 80117b2:	78fb      	ldrb	r3, [r7, #3]
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	4313      	orrs	r3, r2
 80117b8:	b29a      	uxth	r2, r3
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	831a      	strh	r2, [r3, #24]
}
 80117be:	f107 070c 	add.w	r7, r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bc80      	pop	{r7}
 80117c6:	4770      	bx	lr

080117c8 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b083      	sub	sp, #12
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	460b      	mov	r3, r1
 80117d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80117d4:	78fb      	ldrb	r3, [r7, #3]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00a      	beq.n	80117f0 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	899b      	ldrh	r3, [r3, #12]
 80117de:	b29b      	uxth	r3, r3
 80117e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80117e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	819a      	strh	r2, [r3, #12]
 80117ee:	e009      	b.n	8011804 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	899b      	ldrh	r3, [r3, #12]
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80117fa:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80117fe:	b29a      	uxth	r2, r3
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	819a      	strh	r2, [r3, #12]
  }
}  
 8011804:	f107 070c 	add.w	r7, r7, #12
 8011808:	46bd      	mov	sp, r7
 801180a:	bc80      	pop	{r7}
 801180c:	4770      	bx	lr
 801180e:	bf00      	nop

08011810 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	460b      	mov	r3, r1
 801181a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 801181c:	78fb      	ldrb	r3, [r7, #3]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d008      	beq.n	8011834 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	8a9b      	ldrh	r3, [r3, #20]
 8011826:	b29b      	uxth	r3, r3
 8011828:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801182c:	b29a      	uxth	r2, r3
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	829a      	strh	r2, [r3, #20]
 8011832:	e007      	b.n	8011844 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	8a9b      	ldrh	r3, [r3, #20]
 8011838:	b29b      	uxth	r3, r3
 801183a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	829a      	strh	r2, [r3, #20]
  }
}
 8011844:	f107 070c 	add.w	r7, r7, #12
 8011848:	46bd      	mov	sp, r7
 801184a:	bc80      	pop	{r7}
 801184c:	4770      	bx	lr
 801184e:	bf00      	nop

08011850 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8011850:	b480      	push	{r7}
 8011852:	b083      	sub	sp, #12
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	460b      	mov	r3, r1
 801185a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 801185c:	887b      	ldrh	r3, [r7, #2]
 801185e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 8011862:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 8011866:	b29a      	uxth	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	809a      	strh	r2, [r3, #4]
}
 801186c:	f107 070c 	add.w	r7, r7, #12
 8011870:	46bd      	mov	sp, r7
 8011872:	bc80      	pop	{r7}
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop

08011878 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8011878:	b480      	push	{r7}
 801187a:	b083      	sub	sp, #12
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	889b      	ldrh	r3, [r3, #4]
 8011884:	b29b      	uxth	r3, r3
 8011886:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 801188a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 801188e:	b29b      	uxth	r3, r3
}
 8011890:	4618      	mov	r0, r3
 8011892:	f107 070c 	add.w	r7, r7, #12
 8011896:	46bd      	mov	sp, r7
 8011898:	bc80      	pop	{r7}
 801189a:	4770      	bx	lr

0801189c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	460b      	mov	r3, r1
 80118a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	8a1b      	ldrh	r3, [r3, #16]
 80118ac:	b29b      	uxth	r3, r3
 80118ae:	f023 030f 	bic.w	r3, r3, #15
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	8a1b      	ldrh	r3, [r3, #16]
 80118bc:	b29a      	uxth	r2, r3
 80118be:	78fb      	ldrb	r3, [r7, #3]
 80118c0:	b29b      	uxth	r3, r3
 80118c2:	4313      	orrs	r3, r2
 80118c4:	b29a      	uxth	r2, r3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	821a      	strh	r2, [r3, #16]
}
 80118ca:	f107 070c 	add.w	r7, r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bc80      	pop	{r7}
 80118d2:	4770      	bx	lr

080118d4 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80118d4:	b480      	push	{r7}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 80118e0:	78fb      	ldrb	r3, [r7, #3]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d008      	beq.n	80118f8 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	899b      	ldrh	r3, [r3, #12]
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	f043 0302 	orr.w	r3, r3, #2
 80118f0:	b29a      	uxth	r2, r3
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	819a      	strh	r2, [r3, #12]
 80118f6:	e007      	b.n	8011908 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	899b      	ldrh	r3, [r3, #12]
 80118fc:	b29b      	uxth	r3, r3
 80118fe:	f023 0302 	bic.w	r3, r3, #2
 8011902:	b29a      	uxth	r2, r3
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	819a      	strh	r2, [r3, #12]
  }
}
 8011908:	f107 070c 	add.w	r7, r7, #12
 801190c:	46bd      	mov	sp, r7
 801190e:	bc80      	pop	{r7}
 8011910:	4770      	bx	lr
 8011912:	bf00      	nop

08011914 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	460b      	mov	r3, r1
 801191e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	899b      	ldrh	r3, [r3, #12]
 8011924:	b29b      	uxth	r3, r3
 8011926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801192a:	b29a      	uxth	r2, r3
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	899b      	ldrh	r3, [r3, #12]
 8011934:	b29a      	uxth	r2, r3
 8011936:	887b      	ldrh	r3, [r7, #2]
 8011938:	4313      	orrs	r3, r2
 801193a:	b29a      	uxth	r2, r3
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	819a      	strh	r2, [r3, #12]
}
 8011940:	f107 070c 	add.w	r7, r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	bc80      	pop	{r7}
 8011948:	4770      	bx	lr
 801194a:	bf00      	nop

0801194c <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	460b      	mov	r3, r1
 8011956:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	8a1b      	ldrh	r3, [r3, #16]
 801195c:	b29b      	uxth	r3, r3
 801195e:	f023 0320 	bic.w	r3, r3, #32
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	8a1b      	ldrh	r3, [r3, #16]
 801196c:	b29a      	uxth	r2, r3
 801196e:	887b      	ldrh	r3, [r7, #2]
 8011970:	4313      	orrs	r3, r2
 8011972:	b29a      	uxth	r2, r3
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	821a      	strh	r2, [r3, #16]
}
 8011978:	f107 070c 	add.w	r7, r7, #12
 801197c:	46bd      	mov	sp, r7
 801197e:	bc80      	pop	{r7}
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop

08011984 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011984:	b480      	push	{r7}
 8011986:	b083      	sub	sp, #12
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	460b      	mov	r3, r1
 801198e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8011990:	78fb      	ldrb	r3, [r7, #3]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d008      	beq.n	80119a8 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	8a1b      	ldrh	r3, [r3, #16]
 801199a:	b29b      	uxth	r3, r3
 801199c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80119a0:	b29a      	uxth	r2, r3
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	821a      	strh	r2, [r3, #16]
 80119a6:	e007      	b.n	80119b8 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	8a1b      	ldrh	r3, [r3, #16]
 80119ac:	b29b      	uxth	r3, r3
 80119ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80119b2:	b29a      	uxth	r2, r3
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	821a      	strh	r2, [r3, #16]
  }
}
 80119b8:	f107 070c 	add.w	r7, r7, #12
 80119bc:	46bd      	mov	sp, r7
 80119be:	bc80      	pop	{r7}
 80119c0:	4770      	bx	lr
 80119c2:	bf00      	nop

080119c4 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	899b      	ldrh	r3, [r3, #12]
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	f043 0301 	orr.w	r3, r3, #1
 80119d6:	b29a      	uxth	r2, r3
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	819a      	strh	r2, [r3, #12]
}
 80119dc:	f107 070c 	add.w	r7, r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bc80      	pop	{r7}
 80119e4:	4770      	bx	lr
 80119e6:	bf00      	nop

080119e8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80119e8:	b480      	push	{r7}
 80119ea:	b083      	sub	sp, #12
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	6078      	str	r0, [r7, #4]
 80119f0:	460b      	mov	r3, r1
 80119f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80119f4:	78fb      	ldrb	r3, [r7, #3]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d008      	beq.n	8011a0c <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	8a9b      	ldrh	r3, [r3, #20]
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	f043 0308 	orr.w	r3, r3, #8
 8011a04:	b29a      	uxth	r2, r3
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	829a      	strh	r2, [r3, #20]
 8011a0a:	e007      	b.n	8011a1c <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	8a9b      	ldrh	r3, [r3, #20]
 8011a10:	b29b      	uxth	r3, r3
 8011a12:	f023 0308 	bic.w	r3, r3, #8
 8011a16:	b29a      	uxth	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	829a      	strh	r2, [r3, #20]
  }
}
 8011a1c:	f107 070c 	add.w	r7, r7, #12
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bc80      	pop	{r7}
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop

08011a28 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	460b      	mov	r3, r1
 8011a32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	8b1b      	ldrh	r3, [r3, #24]
 8011a38:	b29b      	uxth	r3, r3
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	8b1b      	ldrh	r3, [r3, #24]
 8011a46:	b29a      	uxth	r2, r3
 8011a48:	78fb      	ldrb	r3, [r7, #3]
 8011a4a:	b29b      	uxth	r3, r3
 8011a4c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 8011a50:	b29b      	uxth	r3, r3
 8011a52:	4313      	orrs	r3, r2
 8011a54:	b29a      	uxth	r2, r3
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	831a      	strh	r2, [r3, #24]
}
 8011a5a:	f107 070c 	add.w	r7, r7, #12
 8011a5e:	46bd      	mov	sp, r7
 8011a60:	bc80      	pop	{r7}
 8011a62:	4770      	bx	lr

08011a64 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b083      	sub	sp, #12
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	460b      	mov	r3, r1
 8011a6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011a70:	78fb      	ldrb	r3, [r7, #3]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d008      	beq.n	8011a88 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	8a9b      	ldrh	r3, [r3, #20]
 8011a7a:	b29b      	uxth	r3, r3
 8011a7c:	f043 0320 	orr.w	r3, r3, #32
 8011a80:	b29a      	uxth	r2, r3
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	829a      	strh	r2, [r3, #20]
 8011a86:	e007      	b.n	8011a98 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	8a9b      	ldrh	r3, [r3, #20]
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	f023 0320 	bic.w	r3, r3, #32
 8011a92:	b29a      	uxth	r2, r3
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	829a      	strh	r2, [r3, #20]
  }
}
 8011a98:	f107 070c 	add.w	r7, r7, #12
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bc80      	pop	{r7}
 8011aa0:	4770      	bx	lr
 8011aa2:	bf00      	nop

08011aa4 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011aa4:	b480      	push	{r7}
 8011aa6:	b083      	sub	sp, #12
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	460b      	mov	r3, r1
 8011aae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8011ab0:	78fb      	ldrb	r3, [r7, #3]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d008      	beq.n	8011ac8 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	8a9b      	ldrh	r3, [r3, #20]
 8011aba:	b29b      	uxth	r3, r3
 8011abc:	f043 0310 	orr.w	r3, r3, #16
 8011ac0:	b29a      	uxth	r2, r3
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	829a      	strh	r2, [r3, #20]
 8011ac6:	e007      	b.n	8011ad8 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	8a9b      	ldrh	r3, [r3, #20]
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	f023 0310 	bic.w	r3, r3, #16
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	829a      	strh	r2, [r3, #20]
  }
}
 8011ad8:	f107 070c 	add.w	r7, r7, #12
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bc80      	pop	{r7}
 8011ae0:	4770      	bx	lr
 8011ae2:	bf00      	nop

08011ae4 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b083      	sub	sp, #12
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	460b      	mov	r3, r1
 8011aee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	8a9b      	ldrh	r3, [r3, #20]
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	f023 0304 	bic.w	r3, r3, #4
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	8a9b      	ldrh	r3, [r3, #20]
 8011b04:	b29a      	uxth	r2, r3
 8011b06:	887b      	ldrh	r3, [r7, #2]
 8011b08:	4313      	orrs	r3, r2
 8011b0a:	b29a      	uxth	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	829a      	strh	r2, [r3, #20]
}
 8011b10:	f107 070c 	add.w	r7, r7, #12
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bc80      	pop	{r7}
 8011b18:	4770      	bx	lr
 8011b1a:	bf00      	nop

08011b1c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b083      	sub	sp, #12
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	460b      	mov	r3, r1
 8011b26:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8011b28:	78fb      	ldrb	r3, [r7, #3]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d008      	beq.n	8011b40 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	8a9b      	ldrh	r3, [r3, #20]
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	f043 0302 	orr.w	r3, r3, #2
 8011b38:	b29a      	uxth	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	829a      	strh	r2, [r3, #20]
 8011b3e:	e007      	b.n	8011b50 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	8a9b      	ldrh	r3, [r3, #20]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	f023 0302 	bic.w	r3, r3, #2
 8011b4a:	b29a      	uxth	r2, r3
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	829a      	strh	r2, [r3, #20]
  }
}
 8011b50:	f107 070c 	add.w	r7, r7, #12
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bc80      	pop	{r7}
 8011b58:	4770      	bx	lr
 8011b5a:	bf00      	nop

08011b5c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 8011b5c:	b480      	push	{r7}
 8011b5e:	b083      	sub	sp, #12
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	6078      	str	r0, [r7, #4]
 8011b64:	4613      	mov	r3, r2
 8011b66:	460a      	mov	r2, r1
 8011b68:	807a      	strh	r2, [r7, #2]
 8011b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8011b6c:	787b      	ldrb	r3, [r7, #1]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d008      	beq.n	8011b84 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	8a9b      	ldrh	r3, [r3, #20]
 8011b76:	b29a      	uxth	r2, r3
 8011b78:	887b      	ldrh	r3, [r7, #2]
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	b29a      	uxth	r2, r3
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	829a      	strh	r2, [r3, #20]
 8011b82:	e00a      	b.n	8011b9a <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	8a9b      	ldrh	r3, [r3, #20]
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	887b      	ldrh	r3, [r7, #2]
 8011b8c:	ea6f 0303 	mvn.w	r3, r3
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	4013      	ands	r3, r2
 8011b94:	b29a      	uxth	r2, r3
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	829a      	strh	r2, [r3, #20]
  }
}
 8011b9a:	f107 070c 	add.w	r7, r7, #12
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bc80      	pop	{r7}
 8011ba2:	4770      	bx	lr

08011ba4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8011ba4:	b480      	push	{r7}
 8011ba6:	b087      	sub	sp, #28
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
 8011bac:	4613      	mov	r3, r2
 8011bae:	460a      	mov	r2, r1
 8011bb0:	807a      	strh	r2, [r7, #2]
 8011bb2:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8011bb4:	f04f 0300 	mov.w	r3, #0
 8011bb8:	613b      	str	r3, [r7, #16]
 8011bba:	f04f 0300 	mov.w	r3, #0
 8011bbe:	60fb      	str	r3, [r7, #12]
 8011bc0:	f04f 0300 	mov.w	r3, #0
 8011bc4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8011bc6:	f04f 0300 	mov.w	r3, #0
 8011bca:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8011bd0:	887b      	ldrh	r3, [r7, #2]
 8011bd2:	b2db      	uxtb	r3, r3
 8011bd4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8011bdc:	887b      	ldrh	r3, [r7, #2]
 8011bde:	f003 031f 	and.w	r3, r3, #31
 8011be2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f04f 0201 	mov.w	r2, #1
 8011bea:	fa02 f303 	lsl.w	r3, r2, r3
 8011bee:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8011bf0:	693b      	ldr	r3, [r7, #16]
 8011bf2:	2b01      	cmp	r3, #1
 8011bf4:	d104      	bne.n	8011c00 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 8011bf6:	697b      	ldr	r3, [r7, #20]
 8011bf8:	f103 030c 	add.w	r3, r3, #12
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	e00b      	b.n	8011c18 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8011c00:	693b      	ldr	r3, [r7, #16]
 8011c02:	2b02      	cmp	r3, #2
 8011c04:	d104      	bne.n	8011c10 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	f103 0310 	add.w	r3, r3, #16
 8011c0c:	617b      	str	r3, [r7, #20]
 8011c0e:	e003      	b.n	8011c18 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	f103 0314 	add.w	r3, r3, #20
 8011c16:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8011c18:	787b      	ldrb	r3, [r7, #1]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d006      	beq.n	8011c2c <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	697a      	ldr	r2, [r7, #20]
 8011c22:	6811      	ldr	r1, [r2, #0]
 8011c24:	68ba      	ldr	r2, [r7, #8]
 8011c26:	430a      	orrs	r2, r1
 8011c28:	601a      	str	r2, [r3, #0]
 8011c2a:	e007      	b.n	8011c3c <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8011c2c:	697b      	ldr	r3, [r7, #20]
 8011c2e:	697a      	ldr	r2, [r7, #20]
 8011c30:	6811      	ldr	r1, [r2, #0]
 8011c32:	68ba      	ldr	r2, [r7, #8]
 8011c34:	ea6f 0202 	mvn.w	r2, r2
 8011c38:	400a      	ands	r2, r1
 8011c3a:	601a      	str	r2, [r3, #0]
  }
}
 8011c3c:	f107 071c 	add.w	r7, r7, #28
 8011c40:	46bd      	mov	sp, r7
 8011c42:	bc80      	pop	{r7}
 8011c44:	4770      	bx	lr
 8011c46:	bf00      	nop

08011c48 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8011c48:	b480      	push	{r7}
 8011c4a:	b085      	sub	sp, #20
 8011c4c:	af00      	add	r7, sp, #0
 8011c4e:	6078      	str	r0, [r7, #4]
 8011c50:	460b      	mov	r3, r1
 8011c52:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8011c54:	f04f 0300 	mov.w	r3, #0
 8011c58:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	887b      	ldrh	r3, [r7, #2]
 8011c62:	4013      	ands	r3, r2
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d003      	beq.n	8011c72 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8011c6a:	f04f 0301 	mov.w	r3, #1
 8011c6e:	73fb      	strb	r3, [r7, #15]
 8011c70:	e002      	b.n	8011c78 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8011c72:	f04f 0300 	mov.w	r3, #0
 8011c76:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8011c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f107 0714 	add.w	r7, r7, #20
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bc80      	pop	{r7}
 8011c84:	4770      	bx	lr
 8011c86:	bf00      	nop

08011c88 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b083      	sub	sp, #12
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	460b      	mov	r3, r1
 8011c92:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 8011c94:	887b      	ldrh	r3, [r7, #2]
 8011c96:	ea6f 0303 	mvn.w	r3, r3
 8011c9a:	b29a      	uxth	r2, r3
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	801a      	strh	r2, [r3, #0]
}
 8011ca0:	f107 070c 	add.w	r7, r7, #12
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	bc80      	pop	{r7}
 8011ca8:	4770      	bx	lr
 8011caa:	bf00      	nop

08011cac <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8011cac:	b480      	push	{r7}
 8011cae:	b087      	sub	sp, #28
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8011cb8:	f04f 0300 	mov.w	r3, #0
 8011cbc:	60fb      	str	r3, [r7, #12]
 8011cbe:	f04f 0300 	mov.w	r3, #0
 8011cc2:	617b      	str	r3, [r7, #20]
 8011cc4:	f04f 0300 	mov.w	r3, #0
 8011cc8:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8011cca:	f04f 0300 	mov.w	r3, #0
 8011cce:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8011cd0:	887b      	ldrh	r3, [r7, #2]
 8011cd2:	b2db      	uxtb	r3, r3
 8011cd4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8011cd8:	b2db      	uxtb	r3, r3
 8011cda:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8011cdc:	887b      	ldrh	r3, [r7, #2]
 8011cde:	f003 031f 	and.w	r3, r3, #31
 8011ce2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	f04f 0201 	mov.w	r2, #1
 8011cea:	fa02 f303 	lsl.w	r3, r2, r3
 8011cee:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2b01      	cmp	r3, #1
 8011cf4:	d106      	bne.n	8011d04 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	4013      	ands	r3, r2
 8011d00:	617b      	str	r3, [r7, #20]
 8011d02:	e00f      	b.n	8011d24 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	2b02      	cmp	r3, #2
 8011d08:	d106      	bne.n	8011d18 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	8a1b      	ldrh	r3, [r3, #16]
 8011d0e:	b29b      	uxth	r3, r3
 8011d10:	697a      	ldr	r2, [r7, #20]
 8011d12:	4013      	ands	r3, r2
 8011d14:	617b      	str	r3, [r7, #20]
 8011d16:	e005      	b.n	8011d24 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	8a9b      	ldrh	r3, [r3, #20]
 8011d1c:	b29b      	uxth	r3, r3
 8011d1e:	697a      	ldr	r2, [r7, #20]
 8011d20:	4013      	ands	r3, r2
 8011d22:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8011d24:	887b      	ldrh	r3, [r7, #2]
 8011d26:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f04f 0201 	mov.w	r2, #1
 8011d34:	fa02 f303 	lsl.w	r3, r2, r3
 8011d38:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	881b      	ldrh	r3, [r3, #0]
 8011d3e:	b29b      	uxth	r3, r3
 8011d40:	68fa      	ldr	r2, [r7, #12]
 8011d42:	4013      	ands	r3, r2
 8011d44:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8011d46:	697b      	ldr	r3, [r7, #20]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d006      	beq.n	8011d5a <USART_GetITStatus+0xae>
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d003      	beq.n	8011d5a <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 8011d52:	f04f 0301 	mov.w	r3, #1
 8011d56:	74fb      	strb	r3, [r7, #19]
 8011d58:	e002      	b.n	8011d60 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 8011d5a:	f04f 0300 	mov.w	r3, #0
 8011d5e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8011d60:	7cfb      	ldrb	r3, [r7, #19]
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	f107 071c 	add.w	r7, r7, #28
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	bc80      	pop	{r7}
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop

08011d70 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8011d70:	b480      	push	{r7}
 8011d72:	b085      	sub	sp, #20
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	460b      	mov	r3, r1
 8011d7a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8011d7c:	f04f 0300 	mov.w	r3, #0
 8011d80:	81fb      	strh	r3, [r7, #14]
 8011d82:	f04f 0300 	mov.w	r3, #0
 8011d86:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8011d88:	887b      	ldrh	r3, [r7, #2]
 8011d8a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8011d8e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8011d90:	89fb      	ldrh	r3, [r7, #14]
 8011d92:	f04f 0201 	mov.w	r2, #1
 8011d96:	fa02 f303 	lsl.w	r3, r2, r3
 8011d9a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8011d9c:	89bb      	ldrh	r3, [r7, #12]
 8011d9e:	ea6f 0303 	mvn.w	r3, r3
 8011da2:	b29a      	uxth	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	801a      	strh	r2, [r3, #0]
}
 8011da8:	f107 0714 	add.w	r7, r7, #20
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bc80      	pop	{r7}
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop

08011db4 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 8011db8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011dbc:	f04f 0101 	mov.w	r1, #1
 8011dc0:	f7fa fbd2 	bl	800c568 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 8011dc4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8011dc8:	f04f 0100 	mov.w	r1, #0
 8011dcc:	f7fa fbcc 	bl	800c568 <RCC_APB1PeriphResetCmd>
}
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop

08011dd4 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b085      	sub	sp, #20
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8011ddc:	f04f 0300 	mov.w	r3, #0
 8011de0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 8011de2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011de6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011dea:	685b      	ldr	r3, [r3, #4]
 8011dec:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 8011df0:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 8011df2:	68fa      	ldr	r2, [r7, #12]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	4313      	orrs	r3, r2
 8011df8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 8011dfa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011dfe:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011e02:	68fa      	ldr	r2, [r7, #12]
 8011e04:	605a      	str	r2, [r3, #4]
}
 8011e06:	f107 0714 	add.w	r7, r7, #20
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bc80      	pop	{r7}
 8011e0e:	4770      	bx	lr

08011e10 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b085      	sub	sp, #20
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	4603      	mov	r3, r0
 8011e18:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 8011e1a:	f04f 0300 	mov.w	r3, #0
 8011e1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 8011e20:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011e24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011e2e:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 8011e30:	79fb      	ldrb	r3, [r7, #7]
 8011e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	4313      	orrs	r3, r2
 8011e3a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 8011e3c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011e40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011e44:	68fa      	ldr	r2, [r7, #12]
 8011e46:	605a      	str	r2, [r3, #4]
}
 8011e48:	f107 0714 	add.w	r7, r7, #20
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bc80      	pop	{r7}
 8011e50:	4770      	bx	lr
 8011e52:	bf00      	nop

08011e54 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 8011e54:	b480      	push	{r7}
 8011e56:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 8011e58:	f248 03a4 	movw	r3, #32932	; 0x80a4
 8011e5c:	f2c4 2305 	movt	r3, #16901	; 0x4205
 8011e60:	f04f 0201 	mov.w	r2, #1
 8011e64:	601a      	str	r2, [r3, #0]
}
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bc80      	pop	{r7}
 8011e6a:	4770      	bx	lr

08011e6c <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b083      	sub	sp, #12
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	4603      	mov	r3, r0
 8011e74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 8011e76:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011e7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011e7e:	79fa      	ldrb	r2, [r7, #7]
 8011e80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8011e84:	601a      	str	r2, [r3, #0]
}
 8011e86:	f107 070c 	add.w	r7, r7, #12
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bc80      	pop	{r7}
 8011e8e:	4770      	bx	lr

08011e90 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 8011e90:	b480      	push	{r7}
 8011e92:	b083      	sub	sp, #12
 8011e94:	af00      	add	r7, sp, #0
 8011e96:	4603      	mov	r3, r0
 8011e98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 8011e9a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011e9e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011ea2:	79fa      	ldrb	r2, [r7, #7]
 8011ea4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8011ea8:	b2d2      	uxtb	r2, r2
 8011eaa:	601a      	str	r2, [r3, #0]
}
 8011eac:	f107 070c 	add.w	r7, r7, #12
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bc80      	pop	{r7}
 8011eb4:	4770      	bx	lr
 8011eb6:	bf00      	nop

08011eb8 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b083      	sub	sp, #12
 8011ebc:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 8011ebe:	f04f 0300 	mov.w	r3, #0
 8011ec2:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 8011ec4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011ec8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011ecc:	689b      	ldr	r3, [r3, #8]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d003      	beq.n	8011eda <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 8011ed2:	f04f 0301 	mov.w	r3, #1
 8011ed6:	71fb      	strb	r3, [r7, #7]
 8011ed8:	e002      	b.n	8011ee0 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 8011eda:	f04f 0300 	mov.w	r3, #0
 8011ede:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 8011ee0:	79fb      	ldrb	r3, [r7, #7]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f107 070c 	add.w	r7, r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bc80      	pop	{r7}
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop

08011ef0 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 8011ef4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8011ef8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8011efc:	f04f 0200 	mov.w	r2, #0
 8011f00:	609a      	str	r2, [r3, #8]
}
 8011f02:	46bd      	mov	sp, r7
 8011f04:	bc80      	pop	{r7}
 8011f06:	4770      	bx	lr
 8011f08:	6c6c6568 	.word	0x6c6c6568
 8011f0c:	0000006f 	.word	0x0000006f
 8011f10:	00000000 	.word	0x00000000

08011f14 <ASCII16x24_Table>:
	...
 8011f44:	01800000 01800180 01800180 01800180     ................
 8011f54:	01800180 01800180 01800180 00000000     ................
 8011f64:	01800180 00000000 00000000 00000000     ................
 8011f74:	00000000 00cc00cc 00cc00cc 00cc00cc     ................
	...
 8011fb0:	0c600c60 06300c60 1ffe0630 06301ffe     `.`.`.0.0.....0.
 8011fc0:	03180738 1ffe1ffe 03180318 018c018c     8...............
 8011fd0:	0000018c 00800000 0ff803e0 1c8c0e9c     ................
 8011fe0:	008c188c 01f80098 0e8007e0 188c1c80     ................
 8011ff0:	189c188c 0ff00cb8 008003e0 00000080     ................
	...
 8012008:	180e0000 0c110c1b 06110611 03110311     ................
 8012018:	018e019b 6cc038c0 44604460 44304430     .....8.l`D`D0D0D
 8012028:	6c184418 0000380c 00000000 01e00000     .D.l.8..........
 8012038:	073803f0 06180618 01f00330 00f800f0     ..8.....0.......
 8012048:	330e319c 1c061e06 3f061c06 21f073fc     .1.3.......?.s.!
	...
 8012068:	000c000c 000c000c 000c000c 00000000     ................
	...
 8012094:	02000000 01800300 00c000c0 00600060     ............`.`.
 80120a4:	00300030 00300030 00300030 00300030     0.0.0.0.0.0.0.0.
 80120b4:	00600060 00c000c0 03000180 00000200     `.`.............
 80120c4:	00200000 00c00060 01800180 03000300     .. .`...........
 80120d4:	06000600 06000600 06000600 06000600     ................
 80120e4:	03000300 01800180 006000c0 00000020     ..........`. ...
	...
 8012100:	00c000c0 07f806d8 033001e0 00000738     ..........0.8...
	...
 8012130:	01800180 01800180 3ffc0180 01803ffc     ...........?.?..
 8012140:	01800180 01800180 00000000 00000000     ................
	...
 8012174:	01800000 01000180 00800100 00000000     ................
	...
 801219c:	07e007e0 00000000 00000000 00000000     ................
	...
 80121d4:	00c00000 000000c0 00000000 00000000     ................
 80121e4:	0c000000 06000c00 06000600 03000300     ................
 80121f4:	03800300 01800180 00c00180 00c000c0     ................
 8012204:	00600060 00000000 00000000 00000000     `.`.............
 8012214:	03e00000 0e3807f0 180c0c18 180c180c     ......8.........
 8012224:	180c180c 180c180c 180c180c 0e380c18     ..............8.
 8012234:	03e007f0 00000000 00000000 00000000     ................
 8012244:	01000000 01c00180 019801f0 01800188     ................
 8012254:	01800180 01800180 01800180 01800180     ................
 8012264:	01800180 00000000 00000000 00000000     ................
 8012274:	03e00000 0c180ff8 180c180c 18001800     ................
 8012284:	06000c00 01800300 006000c0 00180030     ..........`.0...
 8012294:	1ffc1ffc 00000000 00000000 00000000     ................
 80122a4:	01e00000 0e1807f8 0c0c0c0c 06000c00     ................
 80122b4:	07c003c0 18000c00 180c1800 0c18180c     ................
 80122c4:	03e007f8 00000000 00000000 00000000     ................
 80122d4:	0c000000 0f000e00 0d800f00 0c600cc0     ..............`.
 80122e4:	0c300c60 0c0c0c18 3ffc3ffc 0c000c00     `.0......?.?....
 80122f4:	0c000c00 00000000 00000000 00000000     ................
 8012304:	0ff80000 00180ff8 000c0018 07fc03ec     ................
 8012314:	1c000e1c 18001800 180c1800 0e180c1c     ................
 8012324:	03e007f8 00000000 00000000 00000000     ................
 8012334:	07c00000 1c380ff0 00181818 03cc000c     ......8.........
 8012344:	0e3c0fec 180c1c1c 180c180c 0e381c18     ..<...........8.
 8012354:	03e007f0 00000000 00000000 00000000     ................
 8012364:	1ffc0000 0c001ffc 06000600 03800300     ................
 8012374:	01c00180 00e000c0 00600060 00300070     ........`.`.p.0.
 8012384:	00300030 00000000 00000000 00000000     0.0.............
 8012394:	03e00000 0e3807f0 0c180c18 06380c18     ......8.......8.
 80123a4:	07f007f0 180c0c18 180c180c 0c38180c     ..............8.
 80123b4:	03e00ff8 00000000 00000000 00000000     ................
 80123c4:	03e00000 0e3807f0 180c0c1c 180c180c     ......8.........
 80123d4:	1e381c1c 19e01bf8 0c001800 0e1c0c00     ..8.............
 80123e4:	01f007f8 00000000 00000000 00000000     ................
	...
 8012400:	01800180 00000000 00000000 00000000     ................
 8012410:	00000000 01800180 00000000 00000000     ................
	...
 8012430:	01800180 00000000 00000000 00000000     ................
 8012440:	00000000 01800180 01000100 00000080     ................
	...
 8012464:	1c001000 03e00f80 001800f8 03e000f8     ................
 8012474:	1c000f80 00001000 00000000 00000000     ................
	...
 8012494:	00001ff8 00000000 00001ff8 00000000     ................
	...
 80124c4:	00380008 07c001f0 18001f00 07c01f00     ..8.............
 80124d4:	003801f0 00000008 00000000 00000000     ..8.............
 80124e4:	03e00000 0c180ff8 180c180c 0c001800     ................
 80124f4:	03000600 00c00180 00c000c0 00000000     ................
 8012504:	00c000c0 00000000 00000000 00000000     ................
 8012514:	00000000 181807e0 29c22004 44114a22     ......... .)"J.D
 8012524:	44094409 22094409 0ce21311 20044002     .D.D.D.".....@. 
 8012534:	07e01818 00000000 00000000 00000000     ................
 8012544:	03800000 06c00380 06c006c0 0c600c60     ............`.`.
 8012554:	18301830 3ff81830 701c3ff8 600c600c     0.0.0..?.?.p.`.`
 8012564:	c006c006 00000000 00000000 00000000     ................
 8012574:	03fc0000 0c0c0ffc 180c180c 0c0c180c     ................
 8012584:	0ffc07fc 300c180c 300c300c 180c300c     .......0.0.0.0..
 8012594:	07fc1ffc 00000000 00000000 00000000     ................
 80125a4:	07c00000 38381ff0 700c301c 00066006     ......88.0.p.`..
 80125b4:	00060006 00060006 60060006 301c700c     ...........`.p.0
 80125c4:	07e01ff0 00000000 00000000 00000000     ................
 80125d4:	03fe0000 0e060ffe 18061806 30063006     .............0.0
 80125e4:	30063006 30063006 18063006 0e061806     .0.0.0.0.0......
 80125f4:	03fe0ffe 00000000 00000000 00000000     ................
 8012604:	3ffc0000 000c3ffc 000c000c 000c000c     ...?.?..........
 8012614:	1ffc1ffc 000c000c 000c000c 000c000c     ................
 8012624:	3ffc3ffc 00000000 00000000 00000000     .?.?............
 8012634:	3ff80000 00183ff8 00180018 00180018     ...?.?..........
 8012644:	1ff81ff8 00180018 00180018 00180018     ................
 8012654:	00180018 00000000 00000000 00000000     ................
 8012664:	0fe00000 783c3ff8 e006600e 0003c007     .....?<x.`......
 8012674:	fe030003 c003fe03 c006c007 f03cc00e     ..............<.
 8012684:	0fe03ff8 00000000 00000000 00000000     .?..............
 8012694:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 80126a4:	3ffc3ffc 300c300c 300c300c 300c300c     .?.?.0.0.0.0.0.0
 80126b4:	300c300c 00000000 00000000 00000000     .0.0............
 80126c4:	01800000 01800180 01800180 01800180     ................
 80126d4:	01800180 01800180 01800180 01800180     ................
 80126e4:	01800180 00000000 00000000 00000000     ................
 80126f4:	06000000 06000600 06000600 06000600     ................
 8012704:	06000600 06000600 06180600 07380618     ..............8.
 8012714:	01e003f0 00000000 00000000 00000000     ................
 8012724:	30060000 0c061806 03060606 00c60186     ...0............
 8012734:	00760066 018e00de 06060306 18060c06     f.v.............
 8012744:	60063006 00000000 00000000 00000000     .0.`............
 8012754:	00180000 00180018 00180018 00180018     ................
 8012764:	00180018 00180018 00180018 00180018     ................
 8012774:	1ff81ff8 00000000 00000000 00000000     ................
 8012784:	e00e0000 f01ef01e d836f01e d836d836     ..........6.6.6.
 8012794:	cc66d836 cc66cc66 c6c6c6c6 c6c6c6c6     6.f.f.f.........
 80127a4:	c386c386 00000000 00000000 00000000     ................
 80127b4:	300c0000 303c301c 306c303c 30cc306c     ...0.0<0<0l0l0.0
 80127c4:	318c30cc 330c330c 360c360c 3c0c3c0c     .0.1.3.3.6.6.<.<
 80127d4:	300c380c 00000000 00000000 00000000     .8.0............
 80127e4:	07e00000 381c1ff8 6006700e c003c003     .......8.p.`....
 80127f4:	c003c003 c003c003 6006c003 381c700e     ...........`.p.8
 8012804:	07e01ff8 00000000 00000000 00000000     ................
 8012814:	0ffc0000 380c1ffc 300c300c 300c300c     .......8.0.0.0.0
 8012824:	1ffc180c 000c07fc 000c000c 000c000c     ................
 8012834:	000c000c 00000000 00000000 00000000     ................
 8012844:	07e00000 381c1ff8 6006700e c003e003     .......8.p.`....
 8012854:	c003c003 c003c003 6306e007 3c1c3f0e     ...........c.?.<
 8012864:	f7e03ff8 0000c000 00000000 00000000     .?..............
 8012874:	0ffe0000 38061ffe 30063006 38063006     .......8.0.0.0.8
 8012884:	07fe1ffe 06060306 18060c06 30061806     ...............0
 8012894:	60063006 00000000 00000000 00000000     .0.`............
 80128a4:	03e00000 0c1c0ff8 180c180c 001c000c     ................
 80128b4:	0fe003f8 38001e00 30063006 1c1c300e     .......8.0.0.0..
 80128c4:	07e00ff8 00000000 00000000 00000000     ................
 80128d4:	7ffe0000 01807ffe 01800180 01800180     ................
 80128e4:	01800180 01800180 01800180 01800180     ................
 80128f4:	01800180 00000000 00000000 00000000     ................
 8012904:	300c0000 300c300c 300c300c 300c300c     ...0.0.0.0.0.0.0
 8012914:	300c300c 300c300c 300c300c 1818300c     .0.0.0.0.0.0.0..
 8012924:	07e01ff8 00000000 00000000 00000000     ................
 8012934:	60030000 30063006 180c3006 180c180c     ...`.0.0.0......
 8012944:	0c180c18 06300e38 07700630 03600360     ....8.0.0.p.`.`.
 8012954:	01c001c0 00000000 00000000 00000000     ................
 8012964:	60030000 61c361c3 336661c3 33663366     ...`.a.a.af3f3f3
 8012974:	33663366 1b6c3366 1b6c1b6c 1e3c1a2c     f3f3f3l.l.l.,.<.
 8012984:	0e380e38 00000000 00000000 00000000     8.8.............
 8012994:	e00f0000 3018700c 0c701830 07c00e60     .....p.00.p.`...
 80129a4:	03800380 06e003c0 1c300c70 300c1818     ........p.0....0
 80129b4:	e007600e 00000000 00000000 00000000     .`..............
 80129c4:	c0030000 300c6006 1838381c 06600c30     .....`.0.88.0.`.
 80129d4:	03c007e0 01800180 01800180 01800180     ................
 80129e4:	01800180 00000000 00000000 00000000     ................
 80129f4:	7ffc0000 60007ffc 18003000 06000c00     .......`.0......
 8012a04:	01800300 006000c0 00180030 0006000c     ......`.0.......
 8012a14:	7ffe7ffe 00000000 00000000 00000000     ................
 8012a24:	03e00000 006003e0 00600060 00600060     ......`.`.`.`.`.
 8012a34:	00600060 00600060 00600060 00600060     `.`.`.`.`.`.`.`.
 8012a44:	00600060 00600060 03e00060 000003e0     `.`.`.`.`.......
 8012a54:	00300000 00600030 00600060 00c000c0     ..0.0.`.`.`.....
 8012a64:	01c000c0 01800180 03000180 03000300     ................
 8012a74:	06000600 00000000 00000000 00000000     ................
 8012a84:	03e00000 030003e0 03000300 03000300     ................
 8012a94:	03000300 03000300 03000300 03000300     ................
 8012aa4:	03000300 03000300 03e00300 000003e0     ................
 8012ab4:	00000000 01c001c0 03600360 06300360     ........`.`.`.0.
 8012ac4:	0c180630 00000c18 00000000 00000000     0...............
	...
 8012b04:	ffff0000 0000ffff 00000000 00000000     ................
 8012b14:	000c0000 000c000c 000c000c 0000000c     ................
	...
 8012b50:	07f803f0 0c0c0c1c 0ff00f00 0c0c0cf8     ................
 8012b60:	0f1c0c0c 18f00ff8 00000000 00000000     ................
 8012b70:	00000000 00180000 00180018 00180018     ................
 8012b80:	0ff803d8 18180c38 18181818 18181818     ....8...........
 8012b90:	0c381818 03d80ff8 00000000 00000000     ..8.............
	...
 8012bb0:	07f003c0 0c180e30 00180018 00180018     ....0...........
 8012bc0:	0e300c18 03c007f0 00000000 00000000     ..0.............
 8012bd0:	00000000 18000000 18001800 18001800     ................
 8012be0:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 8012bf0:	1c301818 1bc01ff0 00000000 00000000     ..0.............
	...
 8012c10:	0ff003c0 18180c30 1ff81ff8 00180018     ....0...........
 8012c20:	1c301838 07c00ff0 00000000 00000000     8.0.............
 8012c30:	00000000 0f800000 00c00fc0 00c000c0     ................
 8012c40:	07f007f0 00c000c0 00c000c0 00c000c0     ................
 8012c50:	00c000c0 00c000c0 00000000 00000000     ................
	...
 8012c70:	0ff80de0 0c0c0e18 0c0c0c0c 0c0c0c0c     ................
 8012c80:	0e180c0c 0de00ff8 0c0c0c00 07f8061c     ................
 8012c90:	000001f0 00180000 00180018 00180018     ................
 8012ca0:	0ff807d8 18181c38 18181818 18181818     ....8...........
 8012cb0:	18181818 18181818 00000000 00000000     ................
 8012cc0:	00000000 00c00000 000000c0 00000000     ................
 8012cd0:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8012ce0:	00c000c0 00c000c0 00000000 00000000     ................
 8012cf0:	00000000 00c00000 000000c0 00000000     ................
 8012d00:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8012d10:	00c000c0 00c000c0 00c000c0 00f800c0     ................
 8012d20:	00000078 000c0000 000c000c 000c000c     x...............
 8012d30:	060c0c0c 018c030c 006c00cc 019c00fc     ..........l.....
 8012d40:	030c038c 0c0c060c 00000000 00000000     ................
 8012d50:	00000000 00c00000 00c000c0 00c000c0     ................
 8012d60:	00c000c0 00c000c0 00c000c0 00c000c0     ................
 8012d70:	00c000c0 00c000c0 00000000 00000000     ................
	...
 8012d90:	7eff3c7c c183e3c7 c183c183 c183c183     |<.~............
 8012da0:	c183c183 c183c183 00000000 00000000     ................
	...
 8012dc0:	0ff80798 18181c38 18181818 18181818     ....8...........
 8012dd0:	18181818 18181818 00000000 00000000     ................
	...
 8012df0:	0ff003c0 18180c30 18181818 18181818     ....0...........
 8012e00:	0c301818 03c00ff0 00000000 00000000     ..0.............
	...
 8012e20:	0ff803d8 18180c38 18181818 18181818     ....8...........
 8012e30:	0c381818 03d80ff8 00180018 00180018     ..8.............
 8012e40:	00000018 00000000 00000000 00000000     ................
 8012e50:	1ff01bc0 18181c30 18181818 18181818     ....0...........
 8012e60:	1c301818 1bc01ff0 18001800 18001800     ..0.............
 8012e70:	00001800 00000000 00000000 00000000     ................
 8012e80:	03f007b0 00300070 00300030 00300030     ....p.0.0.0.0.0.
 8012e90:	00300030 00300030 00000000 00000000     0.0.0.0.........
	...
 8012eb0:	03f003e0 0c180e38 03f00038 0c0007c0     ....8...8.......
 8012ec0:	0e380c18 03e007f0 00000000 00000000     ..8.............
	...
 8012ed8:	00c00080 00c000c0 07f007f0 00c000c0     ................
 8012ee8:	00c000c0 00c000c0 00c000c0 078007c0     ................
	...
 8012f10:	18181818 18181818 18181818 18181818     ................
 8012f20:	1c381818 19e01ff0 00000000 00000000     ..8.............
	...
 8012f40:	0c18180c 0c180c18 06300630 03600630     ........0.0.0.`.
 8012f50:	03600360 01c001c0 00000000 00000000     `.`.............
	...
 8012f70:	41c141c1 636361c3 63636363 36363636     .A.A.acccccc6666
 8012f80:	1c1c3636 1c1c1c1c 00000000 00000000     66..............
	...
 8012fa0:	1c38381c 06600c30 03600360 03600360     .88.0.`.`.`.`.`.
 8012fb0:	0c300660 381c1c38 00000000 00000000     `.0.8..8........
	...
 8012fd0:	18303018 18701830 0c600c60 06c00ce0     .00.0.p.`.`.....
 8012fe0:	038006c0 03800380 01800180 00f001c0     ................
 8012ff0:	00000070 00000000 00000000 00000000     p...............
 8013000:	1ffc1ffc 06000c00 01800300 006000c0     ..............`.
 8013010:	00180030 1ffc1ffc 00000000 00000000     0...............
 8013020:	00000000 03000000 00c00180 00c000c0     ................
 8013030:	00c000c0 006000c0 00300060 00400060     ......`.`.0.`.@.
 8013040:	00c000c0 00c000c0 00c000c0 03000180     ................
 8013050:	00000000 01800000 01800180 01800180     ................
 8013060:	01800180 01800180 01800180 01800180     ................
 8013070:	01800180 01800180 01800180 01800180     ................
 8013080:	00000180 00600000 01c000c0 01800180     ......`.........
 8013090:	01800180 03000180 06000300 01000300     ................
 80130a0:	01800180 01800180 01800180 006000c0     ..............`.
	...
 80130c4:	1ff810f0 00000f08 00000000 00000000     ................
	...

080130e4 <ASCII12x12_Table>:
	...
 80130fc:	20000000 20002000 20002000 20002000     ... . . . . . . 
 801310c:	20000000 00000000 50000000 50005000     ... .......P.P.P
	...
 801312c:	09000000 12000900 12007f00 12007f00     ................
 801313c:	24002400 00000000 38001000 50005400     .$.$.......8.T.P
 801314c:	38005000 54001400 38005400 00001000     .P.8...T.T.8....
 801315c:	30800000 49004900 32c04a00 09200520     ...0.I.I.J.2 . .
 801316c:	10c00920 00000000 0c000000 12001200      ...............
 801317c:	18001400 23002500 1d802300 00000000     .....%.#.#......
 801318c:	40000000 40004000 00000000 00000000     ...@.@.@........
	...
 80131a4:	08000000 10001000 20002000 20002000     ......... . . . 
 80131b4:	20002000 10001000 40000000 20002000     . . .......@. . 
 80131c4:	10001000 10001000 10001000 20002000     ............. . 
 80131d4:	20000000 20007000 00005000 00000000     ... .p. .P......
	...
 80131f0:	08000000 7f000800 08000800 00000000     ................
	...
 8013214:	20000000 40002000 00000000 00000000     ... . .@........
 8013224:	00000000 00007000 00000000 00000000     .....p..........
	...
 8013244:	20000000 00000000 10000000 10001000     ... ............
 8013254:	20002000 20002000 40004000 00000000     . . . . .@.@....
 8013264:	10000000 44002800 44004400 44004400     .....(.D.D.D.D.D
 8013274:	10002800 00000000 10000000 50003000     .(...........0.P
 8013284:	10001000 10001000 10001000 00000000     ................
 8013294:	30000000 44004800 08000400 20001000     ...0.H.D....... 
 80132a4:	7c004000 00000000 30000000 04004800     .@.|.......0.H..
 80132b4:	10000800 44000800 30004800 00000000     .......D.H.0....
 80132c4:	08000000 18001800 28002800 7c004800     .........(.(.H.|
 80132d4:	08000800 00000000 3c000000 40002000     ...........<. .@
 80132e4:	48007000 44000400 30004800 00000000     .p.H...D.H.0....
 80132f4:	18000000 40002400 68005000 44004400     .....$.@.P.h.D.D
 8013304:	10002800 00000000 7c000000 08000400     .(.........|....
 8013314:	10001000 20001000 20002000 00000000     ....... . . ....
 8013324:	10000000 44002800 10002800 44002800     .....(.D.(...(.D
 8013334:	10002800 00000000 10000000 44002800     .(...........(.D
 8013344:	2c004400 04001400 30004800 00000000     .D.,.....H.0....
 8013354:	00000000 20000000 00000000 00000000     ....... ........
 8013364:	20000000 00000000 00000000 20000000     ... ........... 
	...
 801337c:	20000000 40002000 00000000 08000400     ... . .@........
 801338c:	40003000 08003000 00000400 00000000     .0.@.0..........
 801339c:	00000000 7c000000 00000000 00007c00     .......|.....|..
	...
 80133b8:	20004000 04001800 20001800 00004000     .@. ....... .@..
 80133c8:	00000000 38000000 44006400 08000400     .......8.d.D....
 80133d8:	10001000 10000000 00000000 0f800000     ................
 80133e8:	2ea01040 512051a0 51205120 4dc05320     @....Q Q Q Q S.M
 80133f8:	10402020 08000000 14001400 22001400       @............"
 8013408:	22003e00 41004100 00000000 3c000000     .>.".A.A.......<
 8013418:	22002200 3c002200 22002200 3c002200     .".".".<.".".".<
 8013428:	00000000 0e000000 21001100 20002000     ...........!. . 
 8013438:	21002000 0e001100 00000000 3c000000     . .!...........<
 8013448:	21002200 21002100 21002100 3c002200     .".!.!.!.!.!.".<
 8013458:	00000000 3e000000 20002000 3e002000     .......>. . . .>
 8013468:	20002000 3e002000 00000000 3e000000     . . . .>.......>
 8013478:	20002000 3c002000 20002000 20002000     . . . .<. . . . 
 8013488:	00000000 0e000000 21001100 27002000     ...........!. .'
 8013498:	21002100 0e001100 00000000 21000000     .!.!...........!
 80134a8:	21002100 3f002100 21002100 21002100     .!.!.!.?.!.!.!.!
 80134b8:	00000000 20000000 20002000 20002000     ....... . . . . 
 80134c8:	20002000 20002000 00000000 08000000     . . . . ........
 80134d8:	08000800 08000800 48000800 30004800     ...........H.H.0
 80134e8:	00000000 22000000 28002400 38002800     .......".$.(.(.8
 80134f8:	24002800 22002400 00000000 20000000     .(.$.$."....... 
 8013508:	20002000 20002000 20002000 3e002000     . . . . . . . .>
 8013518:	00000000 20800000 31803180 2a803180     ....... .1.1.1.*
 8013528:	2a802a80 24802a80 00000000 21000000     .*.*.*.$.......!
 8013538:	31003100 29002900 23002500 21002300     .1.1.).).%.#.#.!
 8013548:	00000000 0c000000 21001200 21002100     ...........!.!.!
 8013558:	21002100 0c001200 00000000 3c000000     .!.!...........<
 8013568:	22002200 3c002200 20002000 20002000     .".".".<. . . . 
 8013578:	00000000 0c000000 21001200 21002100     ...........!.!.!
 8013588:	21002100 0d001600 00000100 3e000000     .!.!...........>
 8013598:	21002100 3e002100 22002400 20802100     .!.!.!.>.$.".!. 
 80135a8:	00000000 1c000000 22002200 1c002000     .........".". ..
 80135b8:	22000200 1c002200 00000000 3e000000     ...".".........>
 80135c8:	08000800 08000800 08000800 08000800     ................
 80135d8:	00000000 21000000 21002100 21002100     .......!.!.!.!.!
 80135e8:	21002100 0c001200 00000000 41000000     .!.!...........A
 80135f8:	22004100 22002200 14001400 08001400     .A."."."........
 8013608:	00000000 44400000 2a404a40 2a802a80     ......@D@J@*.*.*
 8013618:	2a802a80 11002a80 00000000 41000000     .*.*.*.........A
 8013628:	14002200 08001400 14001400 41002200     ."...........".A
 8013638:	00000000 41000000 22002200 08001400     .......A."."....
 8013648:	08000800 08000800 00000000 7e000000     ...............~
 8013658:	04000200 10000800 20001000 7e004000     ........... .@.~
 8013668:	00000000 30000000 20002000 20002000     .......0. . . . 
 8013678:	20002000 20002000 20002000 40000000     . . . . . . ...@
 8013688:	20004000 20002000 20002000 10001000     .@. . . . . ....
 8013698:	00000000 60000000 20002000 20002000     .......`. . . . 
 80136a8:	20002000 20002000 20002000 10000000     . . . . . . ....
 80136b8:	28002800 44002800 00000000 00000000     .(.(.(.D........
	...
 80136e0:	7e000000 20004000 00000000 00000000     ...~.@. ........
	...
 8013700:	38000000 04004400 44003c00 3c004400     ...8.D...<.D.D.<
 8013710:	00000000 40000000 58004000 44006400     .......@.@.X.d.D
 8013720:	44004400 58006400 00000000 00000000     .D.D.d.X........
 8013730:	30000000 40004800 40004000 30004800     ...0.H.@.@.@.H.0
 8013740:	00000000 04000000 34000400 44004c00     ...........4.L.D
 8013750:	44004400 34004c00 00000000 00000000     .D.D.L.4........
 8013760:	38000000 44004400 40007c00 38004400     ...8.D.D.|.@.D.8
 8013770:	00000000 60000000 e0004000 40004000     .......`.@...@.@
 8013780:	40004000 40004000 00000000 00000000     .@.@.@.@........
 8013790:	34000000 44004c00 44004400 34004c00     ...4.L.D.D.D.L.4
 80137a0:	44000400 40000000 58004000 44006400     ...D...@.@.X.d.D
 80137b0:	44004400 44004400 00000000 40000000     .D.D.D.D.......@
 80137c0:	40000000 40004000 40004000 40004000     ...@.@.@.@.@.@.@
 80137d0:	00000000 40000000 40000000 40004000     .......@...@.@.@
 80137e0:	40004000 40004000 40004000 40000000     .@.@.@.@.@.@...@
 80137f0:	48004000 60005000 50005000 48004800     .@.H.P.`.P.P.H.H
 8013800:	00000000 40000000 40004000 40004000     .......@.@.@.@.@
 8013810:	40004000 40004000 00000000 00000000     .@.@.@.@........
 8013820:	52000000 49006d00 49004900 49004900     ...R.m.I.I.I.I.I
	...
 8013838:	58000000 44006400 44004400 44004400     ...X.d.D.D.D.D.D
	...
 8013850:	38000000 44004400 44004400 38004400     ...8.D.D.D.D.D.8
	...
 8013868:	58000000 44006400 44004400 58006400     ...X.d.D.D.D.d.X
 8013878:	40004000 00000000 34000000 44004c00     .@.@.......4.L.D
 8013888:	44004400 34004c00 04000400 00000000     .D.D.L.4........
 8013898:	50000000 40006000 40004000 40004000     ...P.`.@.@.@.@.@
	...
 80138b0:	30000000 40004800 08003000 30004800     ...0.H.@.0...H.0
 80138c0:	00000000 40000000 e0004000 40004000     .......@.@...@.@
 80138d0:	40004000 60004000 00000000 00000000     .@.@.@.`........
 80138e0:	44000000 44004400 44004400 34004c00     ...D.D.D.D.D.L.4
	...
 80138f8:	44000000 28004400 28002800 10002800     ...D.D.(.(.(.(..
	...
 8013910:	49000000 55004900 55005500 22005500     ...I.I.U.U.U.U."
	...
 8013928:	44000000 28002800 28001000 44002800     ...D.(.(...(.(.D
	...
 8013940:	44000000 28004400 28002800 10001000     ...D.D.(.(.(....
 8013950:	10001000 00000000 78000000 10000800     ...........x....
 8013960:	20002000 78004000 00000000 10000000     . . .@.x........
 8013970:	20002000 20002000 20004000 20002000     . . . . .@. . . 
 8013980:	20002000 20000000 20002000 20002000     . . ... . . . . 
 8013990:	20002000 20002000 20002000 40000000     . . . . . . ...@
 80139a0:	20002000 20002000 20001000 20002000     . . . . ... . . 
 80139b0:	20002000 00000000 00000000 58007400     . . .........t.X
	...
 80139d0:	50007000 50005000 50005000 70005000     .p.P.P.P.P.P.P.p
 80139e0:	00000000                                ....

080139e4 <ASCII8x12_Table>:
	...
 8013a00:	00100000 00100010 00100010 00000010     ................
 8013a10:	00000010 00000000 00280000 00280028     ..........(.(.(.
	...
 8013a30:	00140000 003e0014 00280014 0028007c     ......>...(.|.(.
 8013a40:	00000028 00000000 00380010 00500054     (.........8.T.P.
 8013a50:	00140038 00540014 00100038 00000000     8.....T.8.......
 8013a60:	00440000 00a800a8 00140050 002a001a     ..D.....P.....*.
 8013a70:	00000024 00000000 00200000 00500050     $......... .P.P.
 8013a80:	00e80020 00980098 00000060 00000000      .......`.......
 8013a90:	00800000 00800080 00000000 00000000     ................
	...
 8013aa8:	00400000 00800080 00800080 00800080     ..@.............
 8013ab8:	00800080 00000000 00800000 00400040     ............@.@.
 8013ac8:	00400040 00400040 00400040 00000000     @.@.@.@.@.@.....
 8013ad8:	00400000 004000e0 000000a0 00000000     ..@...@.........
	...
 8013af4:	00200000 00f80020 00200020 00000000     .. . ... . .....
	...
 8013b18:	00400040 00000000 00000000 00000000     @.@.............
 8013b28:	00000000 000000c0 00000000 00000000     ................
	...
 8013b48:	00000040 00000000 00200000 00200020     @......... . . .
 8013b58:	00400040 00800080 00000080 00000000     @.@.............
 8013b68:	00600000 00900090 00900090 00900090     ..`.............
 8013b78:	00000060 00000000 00200000 00a00060     `......... .`...
 8013b88:	00200020 00200020 00000020 00000000      . . . . .......
 8013b98:	00600000 00100090 00200010 00800040     ..`....... .@...
 8013ba8:	000000f0 00000000 00600000 00100090     ..........`.....
 8013bb8:	00100060 00900010 00000060 00000000     `.......`.......
 8013bc8:	00100000 00500030 00900050 001000f8     ....0.P.P.......
 8013bd8:	00000010 00000000 00700000 00800040     ..........p.@...
 8013be8:	001000e0 00900010 00000060 00000000     ........`.......
 8013bf8:	00600000 00800090 00d000a0 00900090     ..`.............
 8013c08:	00000060 00000000 00f00000 00200010     `............. .
 8013c18:	00200020 00400040 00000040 00000000      . .@.@.@.......
 8013c28:	00600000 00900090 00900060 00900090     ..`.....`.......
 8013c38:	00000060 00000000 00600000 00900090     `.........`.....
 8013c48:	005000b0 00900010 00000060 00000000     ..P.....`.......
 8013c58:	00000000 00400000 00000000 00000000     ......@.........
 8013c68:	00000040 00000000 00000000 00400000     @.............@.
	...
 8013c80:	00400040 00000000 00000000 00100000     @.@.............
 8013c90:	00800060 00100060 00000000 00000000     `...`...........
	...
 8013ca8:	000000f0 000000f0 00000000 00000000     ................
 8013cb8:	00000000 00800000 00100060 00800060     ........`...`...
	...
 8013cd0:	00600000 00100090 00400020 00000040     ..`..... .@.@...
 8013ce0:	00000040 00000000 001c0000 005b0022     @...........".[.
 8013cf0:	00a500a5 00a500a5 0041009e 00000000     ..........A.....
 8013d00:	00200000 00500050 00500050 00880070     .. .P.P.P.P.p...
 8013d10:	00000088 00000000 00f00000 00880088     ................
 8013d20:	008800f0 00880088 000000f0 00000000     ................
 8013d30:	00380000 00840044 00800080 00440084     ..8.D.........D.
 8013d40:	00000038 00000000 00e00000 00880090     8...............
 8013d50:	00880088 00900088 000000e0 00000000     ................
 8013d60:	00f80000 00800080 008000f8 00800080     ................
 8013d70:	000000f8 00000000 00780000 00400040     ..........x.@.@.
 8013d80:	00400070 00400040 00000040 00000000     p.@.@.@.@.......
 8013d90:	00380000 00840044 009c0080 00440084     ..8.D.........D.
 8013da0:	00000038 00000000 00880000 00880088     8...............
 8013db0:	008800f8 00880088 00000088 00000000     ................
 8013dc0:	00800000 00800080 00800080 00800080     ................
 8013dd0:	00000080 00000000 00100000 00100010     ................
 8013de0:	00100010 00900090 00000060 00000000     ........`.......
 8013df0:	00880000 00a00090 00a000e0 00900090     ................
 8013e00:	00000088 00000000 00800000 00800080     ................
 8013e10:	00800080 00800080 000000f0 00000000     ................
 8013e20:	00820000 00c600c6 00aa00aa 00aa00aa     ................
 8013e30:	00000092 00000000 00840000 00a400c4     ................
 8013e40:	009400a4 008c0094 00000084 00000000     ................
 8013e50:	00300000 00840048 00840084 00480084     ..0.H.........H.
 8013e60:	00000030 00000000 00f00000 00880088     0...............
 8013e70:	00f00088 00800080 00000080 00000000     ................
 8013e80:	00300000 00840048 00840084 00580084     ..0.H.........X.
 8013e90:	00040034 00000000 00780000 00440044     4.........x.D.D.
 8013ea0:	00500078 00440048 00000042 00000000     x.P.H.D.B.......
 8013eb0:	00700000 00800088 00080070 00880088     ..p.....p.......
 8013ec0:	00000070 00000000 00f80000 00200020     p........... . .
 8013ed0:	00200020 00200020 00000020 00000000      . . . . .......
 8013ee0:	00840000 00840084 00840084 00480084     ..............H.
 8013ef0:	00000030 00000000 00880000 00500088     0.............P.
 8013f00:	00500050 00500050 00000020 00000000     P.P.P.P. .......
 8013f10:	00920000 00aa00aa 00aa00aa 00aa00aa     ................
 8013f20:	00000044 00000000 00840000 00480048     D...........H.H.
 8013f30:	00300030 00480048 00000084 00000000     0.0.H.H.........
 8013f40:	00880000 00500050 00200020 00200020     ....P.P. . . . .
 8013f50:	00000020 00000000 00f80000 00100008      ...............
 8013f60:	00200020 00800040 000000f8 00000000      . .@...........
 8013f70:	00c00000 00800080 00800080 00800080     ................
 8013f80:	00800080 00000000 00800000 00400080     ..............@.
 8013f90:	00400040 00200040 00000020 00000000     @.@.@. . .......
 8013fa0:	00c00000 00400040 00400040 00400040     ....@.@.@.@.@.@.
 8013fb0:	00400040 00000000 00400000 00a000a0     @.@.......@.....
 8013fc0:	000000a0 00000000 00000000 00000000     ................
	...
 8013fe0:	00f80000 00000000 00800000 00000040     ............@...
	...
 8014004:	00e00000 00700010 00900090 00000070     ......p.....p...
 8014014:	00000000 00800000 00a00080 009000d0     ................
 8014024:	00d00090 000000a0 00000000 00000000     ................
 8014034:	00600000 00800090 00900080 00000060     ..`.........`...
 8014044:	00000000 00100000 00500010 009000b0     ..........P.....
 8014054:	00b00090 00000050 00000000 00000000     ....P...........
 8014064:	00600000 00f00090 00900080 00000060     ..`.........`...
 8014074:	00000000 00c00000 00c00080 00800080     ................
 8014084:	00800080 00000080 00000000 00000000     ................
 8014094:	00500000 009000b0 00b00090 00100050     ..P.........P...
 80140a4:	00000000 00800000 00a00080 009000d0     ................
 80140b4:	00900090 00000090 00000000 00800000     ................
 80140c4:	00800000 00800080 00800080 00000080     ................
 80140d4:	00000000 00800000 00800000 00800080     ................
 80140e4:	00800080 00800080 00000000 00800000     ................
 80140f4:	00900080 00c000a0 009000a0 00000090     ................
 8014104:	00000000 00800000 00800080 00800080     ................
 8014114:	00800080 00000080 00000000 00000000     ................
 8014124:	00a60000 009200da 00920092 00000092     ................
	...
 801413c:	00a00000 009000d0 00900090 00000090     ................
	...
 8014154:	00600000 00900090 00900090 00000060     ..`.........`...
	...
 801416c:	00a00000 009000d0 00d00090 008000a0     ................
	...
 8014184:	00500000 009000b0 00b00090 00100050     ..P.........P...
	...
 801419c:	00a00000 008000c0 00800080 00000080     ................
	...
 80141b4:	00e00000 00400090 00900020 00000060     ......@. ...`...
 80141c4:	00000000 00800000 00c00080 00800080     ................
 80141d4:	00800080 000000c0 00000000 00000000     ................
 80141e4:	00900000 00900090 00b00090 00000050     ............P...
	...
 80141fc:	00880000 00500088 00500050 00000020     ......P.P.P. ...
	...
 8014214:	00920000 00aa00aa 00aa00aa 00000044     ............D...
	...
 801422c:	00880000 00200050 00500020 00000088     ....P. . .P.....
	...
 8014244:	00880000 00500050 00200050 00200020     ....P.P.P. . . .
	...
 801425c:	00f00000 00200010 00800040 000000f0     ...... .@.......
 801426c:	00000000 00c00000 00800080 00000080     ................
 801427c:	00800080 00800080 00000000 00800000     ................
 801428c:	00800080 00800080 00800080 00800080     ................
 801429c:	00000000 00c00000 00400040 00200040     ........@.@.@. .
 80142ac:	00400040 00400040 00000000 00000000     @.@.@.@.........
 80142bc:	00000000 00b000e8 00000000 00000000     ................
	...
 80142d4:	00a000e0 00a000a0 00a000a0 000000e0     ................

080142e4 <ASCII8x8_Table>:
	...
 80142f4:	00400040 00400040 00400040 00400000     @.@.@.@.@.@...@.
 8014304:	00a000a0 000000a0 00000000 00000000     ................
 8014314:	00240000 00fe0024 00fc0048 00480048     ..$.$...H...H.H.
 8014324:	00540038 00380050 00140014 00380054     8.T.P.8.....T.8.
 8014334:	00a80044 005000a8 001a0014 0024002a     D.....P.....*.$.
 8014344:	00280010 00100028 004c0074 0030004c     ..(.(...t.L.L.0.
 8014354:	00100010 00000010 00000000 00000000     ................
 8014364:	00100008 00100010 00100010 00080010     ................
 8014374:	00080010 00080008 00080008 00100008     ................
 8014384:	00000000 00180024 0018003c 00000024     ....$...<...$...
 8014394:	00000000 00100010 0010007c 00000010     ........|.......
	...
 80143ac:	00080000 00100008 00000000 00000000     ................
 80143bc:	0000003c 00000000 00000000 00000000     <...............
 80143cc:	00000000 00180018 00080008 00100008     ................
 80143dc:	00200010 00200020 00240018 00240024     .. . . ...$.$.$.
 80143ec:	00240024 00180024 00180008 00080028     $.$.$.......(...
 80143fc:	00080008 00080008 00440038 00040000     ........8.D.....
 801440c:	00100008 007c0020 00240018 00180004     .... .|...$.....
 801441c:	00040004 00180024 000c0004 00240014     ....$.........$.
 801442c:	007e0044 00040004 0020003c 00380020     D.~.....<. . .8.
 801443c:	00040004 00180024 00240018 00380020     ....$.....$. .8.
 801444c:	00240024 00180024 0004003c 00080008     $.$.$...<.......
 801445c:	00100008 00100010 00240018 00180024     ..........$.$...
 801446c:	00240024 00180024 00240018 00240024     $.$.$.....$.$.$.
 801447c:	0004001c 00180024 00000000 00000010     ....$...........
 801448c:	00100000 00000000 00000000 00000008     ................
 801449c:	00080000 00000010 00000000 00180004     ................
 80144ac:	00180020 00000004 00000000 003c0000      .............<.
 80144bc:	003c0000 00000000 00000000 00180020     ..<......... ...
 80144cc:	00180004 00000020 00240018 00080004     .... .....$.....
 80144dc:	00100010 00100000 0042003c 00a50099     ........<.B.....
 80144ec:	009d00a5 00380042 00440038 00440044     ....B.8.8.D.D.D.
 80144fc:	0044007c 00440044 00440078 00780044     |.D.D.D.x.D.D.x.
 801450c:	00440044 00780044 0022001c 00400042     D.D.D.x...".B.@.
 801451c:	00420040 001c0022 00480070 00440044     @.B."...p.H.D.D.
 801452c:	00440044 00700048 0040007c 007c0040     D.D.H.p.|.@.@.|.
 801453c:	00400040 007c0040 0020003c 00380020     @.@.@.|.<. . .8.
 801454c:	00200020 00200020 0022001c 00400042      . . . ...".B.@.
 801455c:	0042004e 001c0022 00440044 007c0044     N.B."...D.D.D.|.
 801456c:	00440044 00440044 00100010 00100010     D.D.D.D.........
 801457c:	00100010 00100010 00040004 00040004     ................
 801458c:	00240004 00180024 00480044 00700050     ..$.$...D.H.P.p.
 801459c:	00480050 00440048 00200020 00200020     P.H.H.D. . . . .
 80145ac:	00200020 003c0020 00c60082 00aa00c6      . . .<.........
 80145bc:	00aa00aa 009200aa 00620042 00520052     ........B.b.R.R.
 80145cc:	004a004a 00420046 00240018 00420042     J.J.F.B...$.B.B.
 80145dc:	00420042 00180024 00440078 00440044     B.B.$...x.D.D.D.
 80145ec:	00400078 00400040 00240018 00420042     x.@.@.@...$.B.B.
 80145fc:	00420042 001a002c 00440078 00780044     B.B.,...x.D.D.x.
 801460c:	00480050 00420044 00440038 00380040     P.H.D.B.8.D.@.8.
 801461c:	00440004 00380044 0010007c 00100010     ..D.D.8.|.......
 801462c:	00100010 00100010 00420042 00420042     ........B.B.B.B.
 801463c:	00420042 00180024 00440044 00280028     B.B.$...D.D.(.(.
 801464c:	00280028 00100028 00aa0092 00aa00aa     (.(.(...........
 801465c:	00aa00aa 004400aa 00240042 00180024     ......D.B.$.$...
 801466c:	00240018 00420024 00280044 00100028     ..$.$.B.D.(.(...
 801467c:	00100010 00100010 0004007c 00100008     ........|.......
 801468c:	00200010 007c0040 0010001c 00100010     .. .@.|.........
 801469c:	00100010 001c0010 00100010 00080008     ................
 80146ac:	00080008 00040004 0004001c 00040004     ................
 80146bc:	00040004 001c0004 00280010 00000044     ..........(.D...
	...
 80146e4:	00100020 00000010 00000000 00000000      ...............
 80146f4:	00000000 00040018 0024001c 001c0024     ..........$.$...
 8014704:	00200020 00340028 00240024 00280034      . .(.4.$.$.4.(.
 8014714:	00000000 00240018 00200020 00180024     ......$. . .$...
 8014724:	00040004 002c0014 00240024 0014002c     ......,.$.$.,...
 8014734:	00000000 00240018 0020003c 00180024     ......$.<. .$...
 8014744:	00180000 00100010 00100018 00100010     ................
 8014754:	00180000 00240024 00040018 00180024     ....$.$.....$...
 8014764:	00200020 00340028 00240024 00240024      . .(.4.$.$.$.$.
 8014774:	00000010 00100010 00100010 00100010     ................
 8014784:	00000008 00080008 00080008 00100028     ............(...
 8014794:	00200020 00280024 00280030 00240024      . .$.(.0.(.$.$.
 80147a4:	00100010 00100010 00100010 00100010     ................
 80147b4:	00000000 00da00a6 00920092 00920092     ................
 80147c4:	00000000 00340028 00240024 00240024     ....(.4.$.$.$.$.
 80147d4:	00000000 00240018 00240024 00180024     ......$.$.$.$...
 80147e4:	00280000 00240034 00200038 00200020     ..(.4.$.8. . . .
 80147f4:	00140000 0024002c 0004001c 00040004     ....,.$.........
 8014804:	00000000 0030002c 00200020 00200020     ....,.0. . . . .
 8014814:	00000000 00240018 00080010 00180024     ......$.....$...
 8014824:	00100000 00100038 00100010 00180010     ....8...........
 8014834:	00000000 00240024 00240024 0014002c     ....$.$.$.$.,...
 8014844:	00000000 00440044 00280028 00100028     ....D.D.(.(.(...
 8014854:	00000000 00aa0092 00aa00aa 004400aa     ..............D.
 8014864:	00000000 00280044 00100010 00440028     ....D.(.....(.D.
 8014874:	00280000 00280028 00100010 00100010     ..(.(.(.........
 8014884:	00000000 0004003c 00100008 003c0020     ....<....... .<.
 8014894:	00080000 00100010 00100020 00080010     ........ .......
 80148a4:	00100010 00100010 00100010 00100010     ................
 80148b4:	00100000 00080008 00080004 00100008     ................
 80148c4:	00000000 00600000 000c0092 00000000     ......`.........
 80148d4:	00ff00ff 00ff00ff 00ff00ff 00ff00ff     ................

080148e4 <GPIO_PIN>:
 80148e4:	20001000 80004000                       ... .@..

080148ec <GPIO_CLK>:
 80148ec:	00000008 00000008 00000008 00000008     ................

080148fc <BUTTON_PIN>:
 80148fc:	00000001                                ....

08014900 <BUTTON_CLK>:
 8014900:	00000001                                ....

08014904 <BUTTON_EXTI_LINE>:
 8014904:	00000001                                ....

08014908 <BUTTON_PORT_SOURCE>:
 8014908:	00000000                                ....

0801490c <BUTTON_PIN_SOURCE>:
 801490c:	00000000                                ....

08014910 <BUTTON_IRQn>:
 8014910:	00000006                                ....

08014914 <__EH_FRAME_BEGIN__>:
 8014914:	00000000                                ....

08014918 <_init>:
 8014918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801491a:	bf00      	nop
 801491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801491e:	bc08      	pop	{r3}
 8014920:	469e      	mov	lr, r3
 8014922:	4770      	bx	lr

08014924 <_fini>:
 8014924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014926:	bf00      	nop
 8014928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801492a:	bc08      	pop	{r3}
 801492c:	469e      	mov	lr, r3
 801492e:	4770      	bx	lr
