
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f3ac  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  0800f534  0800f534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  0800f538  0800f538  00017538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000003c  20000000  0800f53c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .jcr          00000004  2000003c  0800f578  0001803c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000040  0800f57c  00018040  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000060  0800f57c  00018060  2**0
                  ALLOC
  8 .ARM.attributes 0000002f  00000000  00000000  00018040  2**0
                  CONTENTS, READONLY
  9 .debug_line   00008964  00000000  00000000  0001806f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00010b72  00000000  00000000  000209d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e67  00000000  00000000  00031545  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001648  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001420  00000000  00000000  000359f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000822a  00000000  00000000  00036e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006809  00000000  00000000  0003f042  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000030  00000000  00000000  0004584b  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000045ac  00000000  00000000  0004587c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 0440 	movw	r4, #64	; 0x40
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f24f 5018 	movw	r0, #62744	; 0xf518
 80001a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f24f 5018 	movw	r0, #62744	; 0xf518
 80001c4:	f240 0144 	movw	r1, #68	; 0x44
 80001c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 003c 	movw	r0, #60	; 0x3c
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop
 80001f0:	0800f53c 	.word	0x0800f53c
 80001f4:	20000000 	.word	0x20000000
 80001f8:	2000003c 	.word	0x2000003c
 80001fc:	20000040 	.word	0x20000040
 8000200:	20000060 	.word	0x20000060

08000204 <__libc_init_array>:
 8000204:	b570      	push	{r4, r5, r6, lr}
 8000206:	f24f 5634 	movw	r6, #62772	; 0xf534
 800020a:	f24f 5534 	movw	r5, #62772	; 0xf534
 800020e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000212:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000216:	1b76      	subs	r6, r6, r5
 8000218:	10b6      	asrs	r6, r6, #2
 800021a:	d006      	beq.n	800022a <__libc_init_array+0x26>
 800021c:	2400      	movs	r4, #0
 800021e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000222:	3401      	adds	r4, #1
 8000224:	4798      	blx	r3
 8000226:	42a6      	cmp	r6, r4
 8000228:	d1f9      	bne.n	800021e <__libc_init_array+0x1a>
 800022a:	f24f 5638 	movw	r6, #62776	; 0xf538
 800022e:	f24f 5534 	movw	r5, #62772	; 0xf534
 8000232:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000236:	f6c0 0500 	movt	r5, #2048	; 0x800
 800023a:	1b76      	subs	r6, r6, r5
 800023c:	f00f f96e 	bl	800f51c <_init>
 8000240:	10b6      	asrs	r6, r6, #2
 8000242:	d006      	beq.n	8000252 <__libc_init_array+0x4e>
 8000244:	2400      	movs	r4, #0
 8000246:	f855 3b04 	ldr.w	r3, [r5], #4
 800024a:	3401      	adds	r4, #1
 800024c:	4798      	blx	r3
 800024e:	42a6      	cmp	r6, r4
 8000250:	d1f9      	bne.n	8000246 <__libc_init_array+0x42>
 8000252:	bd70      	pop	{r4, r5, r6, pc}

08000254 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000256:	f000 b804 	b.w	8000262 <LoopCopyDataInit>

0800025a <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800025a:	4b10      	ldr	r3, [pc, #64]	; (800029c <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 800025c:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800025e:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000260:	3104      	adds	r1, #4

08000262 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 8000266:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000268:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800026a:	f4ff aff6 	bcc.w	800025a <CopyDataInit>
  ldr  r2, =_sbss
 800026e:	4a0e      	ldr	r2, [pc, #56]	; (80002a8 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 8000270:	f000 b803 	b.w	800027a <LoopFillZerobss>

08000274 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000274:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000276:	f842 3b04 	str.w	r3, [r2], #4

0800027a <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800027a:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <LoopFillZerobss+0x32>)
  cmp  r2, r3
 800027c:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800027e:	f4ff aff9 	bcc.w	8000274 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 8000282:	480b      	ldr	r0, [pc, #44]	; (80002b0 <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 8000284:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8000286:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 800028a:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800028c:	f000 f818 	bl	80002c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000290:	f7ff ffb8 	bl	8000204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000294:	f000 f810 	bl	80002b8 <main>
  bx  lr    
 8000298:	4770      	bx	lr
 800029a:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800029c:	0800f53c 	.word	0x0800f53c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002a4:	2000003c 	.word	0x2000003c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80002a8:	20000040 	.word	0x20000040
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002ac:	20000060 	.word	0x20000060
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 80002b0:	e000ed88 	.word	0xe000ed88

080002b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b4:	f7ff bffe 	b.w	80002b4 <ADC_IRQHandler>

080002b8 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	while(1);
 80002bc:	e7fe      	b.n	80002bc <main+0x4>
 80002be:	bf00      	nop

080002c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002cc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80002d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	f042 0201 	orr.w	r2, r2, #1
 80002da:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002e4:	f04f 0200 	mov.w	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80002ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80002f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80002f6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80002fa:	6812      	ldr	r2, [r2, #0]
 80002fc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8000300:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000304:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000306:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800030a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800030e:	f243 0210 	movw	r2, #12304	; 0x3010
 8000312:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000316:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000318:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800031c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000320:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000324:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000328:	6812      	ldr	r2, [r2, #0]
 800032a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800032e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000330:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000334:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000338:	f04f 0200 	mov.w	r2, #0
 800033c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800033e:	f000 f8c1 	bl	80004c4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000342:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000346:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800034a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800034e:	609a      	str	r2, [r3, #8]
#endif
}
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop

08000354 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000354:	b480      	push	{r7}
 8000356:	b087      	sub	sp, #28
 8000358:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800035a:	f04f 0300 	mov.w	r3, #0
 800035e:	613b      	str	r3, [r7, #16]
 8000360:	f04f 0300 	mov.w	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
 8000366:	f04f 0302 	mov.w	r3, #2
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	f04f 0300 	mov.w	r3, #0
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	f04f 0302 	mov.w	r3, #2
 8000376:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000378:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800037c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	f003 030c 	and.w	r3, r3, #12
 8000386:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	2b04      	cmp	r3, #4
 800038c:	d00d      	beq.n	80003aa <SystemCoreClockUpdate+0x56>
 800038e:	2b08      	cmp	r3, #8
 8000390:	d015      	beq.n	80003be <SystemCoreClockUpdate+0x6a>
 8000392:	2b00      	cmp	r3, #0
 8000394:	d169      	bne.n	800046a <SystemCoreClockUpdate+0x116>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000396:	f240 0304 	movw	r3, #4
 800039a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800039e:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 80003a2:	f2c0 02f4 	movt	r2, #244	; 0xf4
 80003a6:	601a      	str	r2, [r3, #0]
      break;
 80003a8:	e069      	b.n	800047e <SystemCoreClockUpdate+0x12a>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003aa:	f240 0304 	movw	r3, #4
 80003ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80003b2:	f44f 5290 	mov.w	r2, #4608	; 0x1200
 80003b6:	f2c0 027a 	movt	r2, #122	; 0x7a
 80003ba:	601a      	str	r2, [r3, #0]
      break;
 80003bc:	e05f      	b.n	800047e <SystemCoreClockUpdate+0x12a>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80003be:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003cc:	ea4f 5393 	mov.w	r3, r3, lsr #22
 80003d0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80003d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80003e0:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d014      	beq.n	8000412 <SystemCoreClockUpdate+0xbe>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80003e8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80003ec:	f2c0 037a 	movt	r3, #122	; 0x7a
 80003f0:	687a      	ldr	r2, [r7, #4]
 80003f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80003f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fe:	6859      	ldr	r1, [r3, #4]
 8000400:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000404:	400b      	ands	r3, r1
 8000406:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800040a:	fb03 f302 	mul.w	r3, r3, r2
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	e013      	b.n	800043a <SystemCoreClockUpdate+0xe6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000412:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000416:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	fbb3 f2f2 	udiv	r2, r3, r2
 8000420:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000424:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000428:	6859      	ldr	r1, [r3, #4]
 800042a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800042e:	400b      	ands	r3, r1
 8000430:	ea4f 1393 	mov.w	r3, r3, lsr #6
 8000434:	fb03 f302 	mul.w	r3, r3, r2
 8000438:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800043a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800043e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000442:	685b      	ldr	r3, [r3, #4]
 8000444:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000448:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800044c:	f103 0301 	add.w	r3, r3, #1
 8000450:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000454:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000456:	697a      	ldr	r2, [r7, #20]
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	fbb2 f2f3 	udiv	r2, r2, r3
 800045e:	f240 0304 	movw	r3, #4
 8000462:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000466:	601a      	str	r2, [r3, #0]
      break;
 8000468:	e009      	b.n	800047e <SystemCoreClockUpdate+0x12a>
    default:
      SystemCoreClock = HSI_VALUE;
 800046a:	f240 0304 	movw	r3, #4
 800046e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000472:	f44f 5210 	mov.w	r2, #9216	; 0x2400
 8000476:	f2c0 02f4 	movt	r2, #244	; 0xf4
 800047a:	601a      	str	r2, [r3, #0]
      break;
 800047c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800047e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000482:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800048c:	ea4f 1213 	mov.w	r2, r3, lsr #4
 8000490:	f240 0308 	movw	r3, #8
 8000494:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000498:	5c9b      	ldrb	r3, [r3, r2]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800049e:	f240 0304 	movw	r3, #4
 80004a2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	693b      	ldr	r3, [r7, #16]
 80004aa:	fa22 f203 	lsr.w	r2, r2, r3
 80004ae:	f240 0304 	movw	r3, #4
 80004b2:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80004b6:	601a      	str	r2, [r3, #0]
}
 80004b8:	f107 071c 	add.w	r7, r7, #28
 80004bc:	46bd      	mov	sp, r7
 80004be:	bc80      	pop	{r7}
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004ca:	f04f 0300 	mov.w	r3, #0
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	f04f 0300 	mov.w	r3, #0
 80004d4:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004d6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004de:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004e2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004e6:	6812      	ldr	r2, [r2, #0]
 80004e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80004ec:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80004ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fc:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f103 0301 	add.w	r3, r3, #1
 8000504:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d103      	bne.n	8000514 <SetSysClock+0x50>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000512:	d1ec      	bne.n	80004ee <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000514:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000518:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d003      	beq.n	800052e <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 8000526:	f04f 0301 	mov.w	r3, #1
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	e002      	b.n	8000534 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800052e:	f04f 0300 	mov.w	r3, #0
 8000532:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	2b01      	cmp	r3, #1
 8000538:	f040 8082 	bne.w	8000640 <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800053c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000540:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000544:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000548:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800054c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800054e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000552:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 8000554:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000558:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800055c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8000560:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800056a:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800056c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000570:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000574:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000578:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800057c:	6892      	ldr	r2, [r2, #8]
 800057e:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000580:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000584:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000588:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800058c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000590:	6892      	ldr	r2, [r2, #8]
 8000592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000596:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000598:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800059c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005a8:	6892      	ldr	r2, [r2, #8]
 80005aa:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80005ae:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80005b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b8:	f245 4208 	movw	r2, #21512	; 0x5408
 80005bc:	f2c0 7240 	movt	r2, #1856	; 0x740
 80005c0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005ca:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005ce:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005d2:	6812      	ldr	r2, [r2, #0]
 80005d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80005d8:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005da:	bf00      	nop
 80005dc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d0f6      	beq.n	80005dc <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80005ee:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80005f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005f6:	f240 6205 	movw	r2, #1541	; 0x605
 80005fa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000600:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000604:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000608:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800060c:	6892      	ldr	r2, [r2, #8]
 800060e:	f022 0203 	bic.w	r2, r2, #3
 8000612:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000614:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000618:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800061c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000620:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000624:	6892      	ldr	r2, [r2, #8]
 8000626:	f042 0202 	orr.w	r2, r2, #2
 800062a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800062c:	bf00      	nop
 800062e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000632:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f003 030c 	and.w	r3, r3, #12
 800063c:	2b08      	cmp	r3, #8
 800063e:	d1f6      	bne.n	800062e <SetSysClock+0x16a>

/******************************************************************************/
/*                        I2S clock configuration                             */
/******************************************************************************/
  /* PLLI2S clock used as I2S clock source */
  RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 8000640:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000644:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000648:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800064c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000650:	6892      	ldr	r2, [r2, #8]
 8000652:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000656:	609a      	str	r2, [r3, #8]

  /* Configure PLLI2S */
  RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 8000658:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800065c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000660:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8000664:	f2c5 0200 	movt	r2, #20480	; 0x5000
 8000668:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Enable PLLI2S */
  RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 800066c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000670:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000674:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000678:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000682:	601a      	str	r2, [r3, #0]

  /* Wait till PLLI2S is ready */
  while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 8000684:	bf00      	nop
 8000686:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800068a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0f6      	beq.n	8000686 <SetSysClock+0x1c2>
  {
  }
}
 8000698:	f107 070c 	add.w	r7, r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop

080006a4 <STM_EVAL_LEDInit>:
  *     @arg LED5
  *     @arg LED6
  * @retval None
  */
void STM_EVAL_LEDInit(Led_TypeDef Led)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	4603      	mov	r3, r0
 80006ac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStructure;
  
  /* Enable the GPIO_LED Clock */
  RCC_AHB1PeriphClockCmd(GPIO_CLK[Led], ENABLE);
 80006ae:	79fa      	ldrb	r2, [r7, #7]
 80006b0:	f24f 43f0 	movw	r3, #62704	; 0xf4f0
 80006b4:	f6c0 0300 	movt	r3, #2048	; 0x800
 80006b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006bc:	4618      	mov	r0, r3
 80006be:	f04f 0101 	mov.w	r1, #1
 80006c2:	f009 f8f1 	bl	80098a8 <RCC_AHB1PeriphClockCmd>

  /* Configure the GPIO_LED pin */
  GPIO_InitStructure.GPIO_Pin = GPIO_PIN[Led];
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	f24f 43e8 	movw	r3, #62696	; 0xf4e8
 80006cc:	f6c0 0300 	movt	r3, #2048	; 0x800
 80006d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80006d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80006d6:	f04f 0301 	mov.w	r3, #1
 80006da:	733b      	strb	r3, [r7, #12]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	73bb      	strb	r3, [r7, #14]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80006e2:	f04f 0301 	mov.w	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80006e8:	f04f 0302 	mov.w	r3, #2
 80006ec:	737b      	strb	r3, [r7, #13]
  GPIO_Init(GPIO_PORT[Led], &GPIO_InitStructure);
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	f240 0318 	movw	r3, #24
 80006f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80006f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	4619      	mov	r1, r3
 8000704:	f006 fe8a 	bl	800741c <GPIO_Init>
}
 8000708:	f107 0710 	add.w	r7, r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <STM_EVAL_LEDOn>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDOn(Led_TypeDef Led)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRL = GPIO_PIN[Led];
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	f240 0318 	movw	r3, #24
 8000720:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000724:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000728:	79f9      	ldrb	r1, [r7, #7]
 800072a:	f24f 43e8 	movw	r3, #62696	; 0xf4e8
 800072e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000732:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8000736:	8313      	strh	r3, [r2, #24]
}
 8000738:	f107 070c 	add.w	r7, r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <STM_EVAL_LEDOff>:
  *     @arg LED5
  *     @arg LED6 
  * @retval None
  */
void STM_EVAL_LEDOff(Led_TypeDef Led)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->BSRRH = GPIO_PIN[Led];  
 800074e:	79fa      	ldrb	r2, [r7, #7]
 8000750:	f240 0318 	movw	r3, #24
 8000754:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000758:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800075c:	79f9      	ldrb	r1, [r7, #7]
 800075e:	f24f 43e8 	movw	r3, #62696	; 0xf4e8
 8000762:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000766:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800076a:	8353      	strh	r3, [r2, #26]
}
 800076c:	f107 070c 	add.w	r7, r7, #12
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop

08000778 <STM_EVAL_LEDToggle>:
  *     @arg LED5
  *     @arg LED6  
  * @retval None
  */
void STM_EVAL_LEDToggle(Led_TypeDef Led)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
  GPIO_PORT[Led]->ODR ^= GPIO_PIN[Led];
 8000782:	79fa      	ldrb	r2, [r7, #7]
 8000784:	f240 0318 	movw	r3, #24
 8000788:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800078c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000790:	79f9      	ldrb	r1, [r7, #7]
 8000792:	f240 0318 	movw	r3, #24
 8000796:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800079a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800079e:	6959      	ldr	r1, [r3, #20]
 80007a0:	79f8      	ldrb	r0, [r7, #7]
 80007a2:	f24f 43e8 	movw	r3, #62696	; 0xf4e8
 80007a6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007aa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80007ae:	404b      	eors	r3, r1
 80007b0:	6153      	str	r3, [r2, #20]
}
 80007b2:	f107 070c 	add.w	r7, r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <STM_EVAL_PBInit>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void STM_EVAL_PBInit(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4602      	mov	r2, r0
 80007c4:	460b      	mov	r3, r1
 80007c6:	71fa      	strb	r2, [r7, #7]
 80007c8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStructure;
  EXTI_InitTypeDef EXTI_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  /* Enable the BUTTON Clock */
  RCC_AHB1PeriphClockCmd(BUTTON_CLK[Button], ENABLE);
 80007ca:	79fa      	ldrb	r2, [r7, #7]
 80007cc:	f24f 5304 	movw	r3, #62724	; 0xf504
 80007d0:	f6c0 0300 	movt	r3, #2048	; 0x800
 80007d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d8:	4618      	mov	r0, r3
 80007da:	f04f 0101 	mov.w	r1, #1
 80007de:	f009 f863 	bl	80098a8 <RCC_AHB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80007e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80007e6:	f04f 0101 	mov.w	r1, #1
 80007ea:	f009 f905 	bl	80099f8 <RCC_APB2PeriphClockCmd>

  /* Configure Button pin as input */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
 80007ee:	f04f 0300 	mov.w	r3, #0
 80007f2:	773b      	strb	r3, [r7, #28]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80007f4:	f04f 0300 	mov.w	r3, #0
 80007f8:	77fb      	strb	r3, [r7, #31]
  GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 80007fa:	79fa      	ldrb	r2, [r7, #7]
 80007fc:	f24f 5300 	movw	r3, #62720	; 0xf500
 8000800:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000804:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000808:	61bb      	str	r3, [r7, #24]
  GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	f240 0328 	movw	r3, #40	; 0x28
 8000810:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8000814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000818:	4618      	mov	r0, r3
 800081a:	f107 0318 	add.w	r3, r7, #24
 800081e:	4619      	mov	r1, r3
 8000820:	f006 fdfc 	bl	800741c <GPIO_Init>

  if (Button_Mode == BUTTON_MODE_EXTI)
 8000824:	79bb      	ldrb	r3, [r7, #6]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d13a      	bne.n	80008a0 <STM_EVAL_PBInit+0xe4>
  {
    /* Connect Button EXTI Line to Button GPIO Pin */
    SYSCFG_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	f24f 530c 	movw	r3, #62732	; 0xf50c
 8000830:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000834:	5c9a      	ldrb	r2, [r3, r2]
 8000836:	79f9      	ldrb	r1, [r7, #7]
 8000838:	f24f 5310 	movw	r3, #62736	; 0xf510
 800083c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000840:	5c5b      	ldrb	r3, [r3, r1]
 8000842:	4610      	mov	r0, r2
 8000844:	4619      	mov	r1, r3
 8000846:	f00c f967 	bl	800cb18 <SYSCFG_EXTILineConfig>

    /* Configure Button EXTI line */
    EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 800084a:	79fa      	ldrb	r2, [r7, #7]
 800084c:	f24f 5308 	movw	r3, #62728	; 0xf508
 8000850:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000854:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000858:	613b      	str	r3, [r7, #16]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	753b      	strb	r3, [r7, #20]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;  
 8000860:	f04f 0308 	mov.w	r3, #8
 8000864:	757b      	strb	r3, [r7, #21]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8000866:	f04f 0301 	mov.w	r3, #1
 800086a:	75bb      	strb	r3, [r7, #22]
    EXTI_Init(&EXTI_InitStructure);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4618      	mov	r0, r3
 8000872:	f005 f903 	bl	8005a7c <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 8000876:	79fa      	ldrb	r2, [r7, #7]
 8000878:	f24f 5314 	movw	r3, #62740	; 0xf514
 800087c:	f6c0 0300 	movt	r3, #2048	; 0x800
 8000880:	5c9b      	ldrb	r3, [r3, r2]
 8000882:	733b      	strb	r3, [r7, #12]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
 8000884:	f04f 030f 	mov.w	r3, #15
 8000888:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
 800088a:	f04f 030f 	mov.w	r3, #15
 800088e:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000890:	f04f 0301 	mov.w	r3, #1
 8000894:	73fb      	strb	r3, [r7, #15]

    NVIC_Init(&NVIC_InitStructure); 
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f836 	bl	800090c <NVIC_Init>
  }
}
 80008a0:	f107 0720 	add.w	r7, r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <STM_EVAL_PBGetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t STM_EVAL_PBGetState(Button_TypeDef Button)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80008b2:	79fa      	ldrb	r2, [r7, #7]
 80008b4:	f240 0328 	movw	r3, #40	; 0x28
 80008b8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80008bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80008c0:	79f9      	ldrb	r1, [r7, #7]
 80008c2:	f24f 5300 	movw	r3, #62720	; 0xf500
 80008c6:	f6c0 0300 	movt	r3, #2048	; 0x800
 80008ca:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	f006 fe85 	bl	80075e0 <GPIO_ReadInputDataBit>
 80008d6:	4603      	mov	r3, r0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	f107 0708 	add.w	r7, r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop

080008e4 <NVIC_PriorityGroupConfig>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80008ec:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80008f0:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
 80008fa:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80008fe:	60da      	str	r2, [r3, #12]
}
 8000900:	f107 070c 	add.w	r7, r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	bc80      	pop	{r7}
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000914:	f04f 0300 	mov.w	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	f04f 0300 	mov.w	r3, #0
 800091e:	73bb      	strb	r3, [r7, #14]
 8000920:	f04f 030f 	mov.w	r3, #15
 8000924:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d045      	beq.n	80009ba <NVIC_Init+0xae>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800092e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000932:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	ea6f 0303 	mvn.w	r3, r3
 800093c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000940:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8000944:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000946:	7bfb      	ldrb	r3, [r7, #15]
 8000948:	f1c3 0304 	rsb	r3, r3, #4
 800094c:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 800094e:	7b7a      	ldrb	r2, [r7, #13]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	fa42 f303 	asr.w	r3, r2, r3
 8000956:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	461a      	mov	r2, r3
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	789a      	ldrb	r2, [r3, #2]
 800096a:	7b7b      	ldrb	r3, [r7, #13]
 800096c:	4013      	ands	r3, r2
 800096e:	b2da      	uxtb	r2, r3
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	4313      	orrs	r3, r2
 8000974:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800097c:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800097e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000982:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	7812      	ldrb	r2, [r2, #0]
 800098a:	189b      	adds	r3, r3, r2
 800098c:	7bfa      	ldrb	r2, [r7, #15]
 800098e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000992:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000996:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	7812      	ldrb	r2, [r2, #0]
 800099e:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80009a2:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	7809      	ldrb	r1, [r1, #0]
 80009a8:	f001 011f 	and.w	r1, r1, #31
 80009ac:	f04f 0001 	mov.w	r0, #1
 80009b0:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009b8:	e014      	b.n	80009e4 <NVIC_Init+0xd8>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009ba:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 80009be:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	ea4f 1252 	mov.w	r2, r2, lsr #5
 80009ca:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	7809      	ldrb	r1, [r1, #0]
 80009d0:	f001 011f 	and.w	r1, r1, #31
 80009d4:	f04f 0001 	mov.w	r0, #1
 80009d8:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80009dc:	f102 0220 	add.w	r2, r2, #32
 80009e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80009e4:	f107 0714 	add.w	r7, r7, #20
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <NVIC_SetVectorTable>:
  *     @arg NVIC_VectTab_FLASH: Vector Table in internal FLASH.
  * @param  Offset: Vector Table base offset field. This value must be a multiple of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
 80009fa:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80009fe:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a02:	683a      	ldr	r2, [r7, #0]
 8000a04:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8000a08:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000a0c:	6879      	ldr	r1, [r7, #4]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	609a      	str	r2, [r3, #8]
}
 8000a12:	f107 070c 	add.w	r7, r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT: Low Power Sleep on Exit.
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4602      	mov	r2, r0
 8000a24:	460b      	mov	r3, r1
 8000a26:	71fa      	strb	r2, [r7, #7]
 8000a28:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 8000a2a:	79bb      	ldrb	r3, [r7, #6]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d00c      	beq.n	8000a4a <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
 8000a30:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000a34:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a38:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a3c:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000a40:	6911      	ldr	r1, [r2, #16]
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	430a      	orrs	r2, r1
 8000a46:	611a      	str	r2, [r3, #16]
 8000a48:	e00d      	b.n	8000a66 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 8000a4a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000a4e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a52:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8000a56:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000a5a:	6911      	ldr	r1, [r2, #16]
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	ea6f 0202 	mvn.w	r2, r2
 8000a62:	400a      	ands	r2, r1
 8000a64:	611a      	str	r2, [r3, #16]
  }
}
 8000a66:	f107 070c 	add.w	r7, r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b04      	cmp	r3, #4
 8000a7c:	d10c      	bne.n	8000a98 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000a7e:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a82:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000a86:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000a8a:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	f042 0204 	orr.w	r2, r2, #4
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	e00b      	b.n	8000ab0 <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000a98:	f24e 0310 	movw	r3, #57360	; 0xe010
 8000a9c:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000aa0:	f24e 0210 	movw	r2, #57360	; 0xe010
 8000aa4:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	f022 0204 	bic.w	r2, r2, #4
 8000aae:	601a      	str	r2, [r3, #0]
  }
}
 8000ab0:	f107 070c 	add.w	r7, r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <ADC_DeInit>:
  *         values.
  * @param  None
  * @retval None
  */
void ADC_DeInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* Enable all ADCs reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
 8000ac0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ac4:	f04f 0101 	mov.w	r1, #1
 8000ac8:	f009 f868 	bl	8009b9c <RCC_APB2PeriphResetCmd>
  
  /* Release all ADCs from reset state */
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
 8000acc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ad0:	f04f 0100 	mov.w	r1, #0
 8000ad4:	f009 f862 	bl	8009b9c <RCC_APB2PeriphResetCmd>
}
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop

08000adc <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000ae6:	f04f 0300 	mov.w	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000aec:	f04f 0300 	mov.w	r3, #0
 8000af0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b02:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	791b      	ldrb	r3, [r3, #4]
 8000b08:	ea4f 2203 	mov.w	r2, r3, lsl #8
                                   ADC_InitStruct->ADC_Resolution);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
  tmpreg1 &= CR1_CLEAR_MASK;
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000b10:	4313      	orrs	r3, r2
 8000b12:	68fa      	ldr	r2, [r7, #12]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	60fb      	str	r3, [r7, #12]
                                   ADC_InitStruct->ADC_Resolution);
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000b24:	68fa      	ldr	r2, [r7, #12]
 8000b26:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
 8000b2a:	f2cc 03ff 	movt	r3, #49407	; 0xc0ff
 8000b2e:	4013      	ands	r3, r2
 8000b30:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b3a:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000b40:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	795b      	ldrb	r3, [r3, #5]
 8000b46:	ea4f 0343 	mov.w	r3, r3, lsl #1
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	68fa      	ldr	r2, [r7, #12]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	60fb      	str	r3, [r7, #12]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68fa      	ldr	r2, [r7, #12]
 8000b56:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5c:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000b64:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	7d1b      	ldrb	r3, [r3, #20]
 8000b6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	7afb      	ldrb	r3, [r7, #11]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000b76:	7afb      	ldrb	r3, [r7, #11]
 8000b78:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b88:	f107 0714 	add.w	r7, r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f04f 0200 	mov.w	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f04f 0200 	mov.w	r2, #0
 8000baa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f04f 0200 	mov.w	r2, #0
 8000bb2:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f04f 0200 	mov.w	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f04f 0200 	mov.w	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0201 	mov.w	r2, #1
 8000bd2:	751a      	strb	r2, [r3, #20]
}
 8000bd4:	f107 070c 	add.w	r7, r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <ADC_CommonInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
  *         that contains the configuration information for  All ADCs peripherals.
  * @retval None
  */
void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b085      	sub	sp, #20
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0;
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
  assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
  /*---------------------------- ADC CCR Configuration -----------------*/
  /* Get the ADC CCR value */
  tmpreg1 = ADC->CCR;
 8000bee:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000bf2:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	60fb      	str	r3, [r7, #12]
  
  /* Clear MULTI, DELAY, DMA and ADCPRE bits */
  tmpreg1 &= CR_CLEAR_MASK;
 8000bfa:	68fa      	ldr	r2, [r7, #12]
 8000bfc:	f243 03e0 	movw	r3, #12512	; 0x30e0
 8000c00:	f6cf 73fc 	movt	r3, #65532	; 0xfffc
 8000c04:	4013      	ands	r3, r2
 8000c06:	60fb      	str	r3, [r7, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681a      	ldr	r2, [r3, #0]
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c10:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	689b      	ldr	r3, [r3, #8]
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
                        ADC_CommonInitStruct->ADC_Prescaler | 
 8000c16:	431a      	orrs	r2, r3
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	68db      	ldr	r3, [r3, #12]
     and DMA access mode for multimode */
  /* Set MULTI bits according to ADC_Mode value */
  /* Set ADCPRE bits according to ADC_Prescaler value */
  /* Set DMA bits according to ADC_DMAAccessMode value */
  /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
  tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
                        ADC_CommonInitStruct->ADC_Prescaler | 
                        ADC_CommonInitStruct->ADC_DMAAccessMode | 
                        ADC_CommonInitStruct->ADC_TwoSamplingDelay);
                        
  /* Write to ADC CCR */
  ADC->CCR = tmpreg1;
 8000c24:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000c28:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	605a      	str	r2, [r3, #4]
}
 8000c30:	f107 0714 	add.w	r7, r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bc80      	pop	{r7}
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <ADC_CommonStructInit>:
  * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_Prescaler member */
  ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f04f 0200 	mov.w	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]

  /* Initialize the ADC_DMAAccessMode member */
  ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f04f 0200 	mov.w	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_TwoSamplingDelay member */
  ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	60da      	str	r2, [r3, #12]
}
 8000c64:	f107 070c 	add.w	r7, r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop

08000c70 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d006      	beq.n	8000c90 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	f043 0201 	orr.w	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	e005      	b.n	8000c9c <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f023 0201 	bic.w	r2, r3, #1
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
  }
}
 8000c9c:	f107 070c 	add.w	r7, r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <ADC_AnalogWatchdogCmd>:
  *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000cb2:	f04f 0300 	mov.w	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	60fb      	str	r3, [r7, #12]
  
  /* Clear AWDEN, JAWDEN and AWDSGL bits */
  tmpreg &= CR1_AWDMode_RESET;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000cc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cc8:	60fb      	str	r3, [r7, #12]
  
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
 8000cca:	68fa      	ldr	r2, [r7, #12]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	605a      	str	r2, [r3, #4]
}
 8000cd8:	f107 0714 	add.w	r7, r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <ADC_AnalogWatchdogThresholdsConfig>:
  *          This parameter must be a 12-bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	460a      	mov	r2, r1
 8000cf0:	807a      	strh	r2, [r7, #2]
 8000cf2:	803b      	strh	r3, [r7, #0]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
 8000cf4:	887a      	ldrh	r2, [r7, #2]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
 8000cfa:	883a      	ldrh	r2, [r7, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d00:	f107 070c 	add.w	r7, r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop

08000d0c <ADC_AnalogWatchdogSingleChannelConfig>:
  *            @arg ADC_Channel_17: ADC Channel17 selected
  *            @arg ADC_Channel_18: ADC Channel18 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  
  /* Get the old register value */
  tmpreg = ADCx->CR1;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_RESET;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f023 031f 	bic.w	r3, r3, #31
 8000d2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	68fa      	ldr	r2, [r7, #12]
 8000d38:	605a      	str	r2, [r3, #4]
}
 8000d3a:	f107 0714 	add.w	r7, r7, #20
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor and Vrefint channels.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00c      	beq.n	8000d6e <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 8000d54:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000d58:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d5c:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8000d60:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000d64:	6852      	ldr	r2, [r2, #4]
 8000d66:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	e00b      	b.n	8000d86 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 8000d6e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000d72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000d76:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8000d7a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000d7e:	6852      	ldr	r2, [r2, #4]
 8000d80:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000d84:	605a      	str	r2, [r3, #4]
  }
}
 8000d86:	f107 070c 	add.w	r7, r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <ADC_VBATCmd>:
  * @param  NewState: new state of the VBAT channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_VBATCmd(FunctionalState NewState)                             
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00c      	beq.n	8000dba <ADC_VBATCmd+0x2a>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 8000da0:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000da4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000da8:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8000dac:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000db0:	6852      	ldr	r2, [r2, #4]
 8000db2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	e00b      	b.n	8000dd2 <ADC_VBATCmd+0x42>
  }
  else
  {
    /* Disable the VBAT channel*/
    ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 8000dba:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8000dbe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8000dc2:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 8000dc6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8000dca:	6852      	ldr	r2, [r2, #4]
 8000dcc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8000dd0:	605a      	str	r2, [r3, #4]
  }
}
 8000dd2:	f107 070c 	add.w	r7, r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	70f9      	strb	r1, [r7, #3]
 8000de6:	70ba      	strb	r2, [r7, #2]
 8000de8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000dea:	f04f 0300 	mov.w	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000df6:	78fb      	ldrb	r3, [r7, #3]
 8000df8:	2b09      	cmp	r3, #9
 8000dfa:	d927      	bls.n	8000e4c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 8000e02:	78fa      	ldrb	r2, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e0a:	189b      	adds	r3, r3, r2
 8000e0c:	f1a3 031e 	sub.w	r3, r3, #30
 8000e10:	f04f 0207 	mov.w	r2, #7
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	ea6f 0303 	mvn.w	r3, r3
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000e26:	7879      	ldrb	r1, [r7, #1]
 8000e28:	78fa      	ldrb	r2, [r7, #3]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e30:	189b      	adds	r3, r3, r2
 8000e32:	f1a3 031e 	sub.w	r3, r3, #30
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e3c:	68fa      	ldr	r2, [r7, #12]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	e022      	b.n	8000e92 <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	691b      	ldr	r3, [r3, #16]
 8000e50:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8000e52:	78fa      	ldrb	r2, [r7, #3]
 8000e54:	4613      	mov	r3, r2
 8000e56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e5a:	189b      	adds	r3, r3, r2
 8000e5c:	f04f 0207 	mov.w	r2, #7
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	ea6f 0303 	mvn.w	r3, r3
 8000e6c:	68fa      	ldr	r2, [r7, #12]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e72:	7879      	ldrb	r1, [r7, #1]
 8000e74:	78fa      	ldrb	r2, [r7, #3]
 8000e76:	4613      	mov	r3, r2
 8000e78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e7c:	189b      	adds	r3, r3, r2
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e84:	68fa      	ldr	r2, [r7, #12]
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68fa      	ldr	r2, [r7, #12]
 8000e90:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e92:	78bb      	ldrb	r3, [r7, #2]
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d827      	bhi.n	8000ee8 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 8000e9e:	78bb      	ldrb	r3, [r7, #2]
 8000ea0:	f103 32ff 	add.w	r2, r3, #4294967295
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000eaa:	189b      	adds	r3, r3, r2
 8000eac:	f04f 021f 	mov.w	r2, #31
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	ea6f 0303 	mvn.w	r3, r3
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000ec2:	78f9      	ldrb	r1, [r7, #3]
 8000ec4:	78bb      	ldrb	r3, [r7, #2]
 8000ec6:	f103 32ff 	add.w	r2, r3, #4294967295
 8000eca:	4613      	mov	r3, r2
 8000ecc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000ed0:	189b      	adds	r3, r3, r2
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ed8:	68fa      	ldr	r2, [r7, #12]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68fa      	ldr	r2, [r7, #12]
 8000ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8000ee6:	e051      	b.n	8000f8c <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000ee8:	78bb      	ldrb	r3, [r7, #2]
 8000eea:	2b0c      	cmp	r3, #12
 8000eec:	d827      	bhi.n	8000f3e <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000ef4:	78ba      	ldrb	r2, [r7, #2]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000efc:	189b      	adds	r3, r3, r2
 8000efe:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8000f02:	f04f 021f 	mov.w	r2, #31
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	ea6f 0303 	mvn.w	r3, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	4013      	ands	r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000f18:	78f9      	ldrb	r1, [r7, #3]
 8000f1a:	78ba      	ldrb	r2, [r7, #2]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f22:	189b      	adds	r3, r3, r2
 8000f24:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
 8000f28:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68fa      	ldr	r2, [r7, #12]
 8000f3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3c:	e026      	b.n	8000f8c <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f42:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000f44:	78ba      	ldrb	r2, [r7, #2]
 8000f46:	4613      	mov	r3, r2
 8000f48:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f4c:	189b      	adds	r3, r3, r2
 8000f4e:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8000f52:	f04f 021f 	mov.w	r2, #31
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	ea6f 0303 	mvn.w	r3, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	4013      	ands	r3, r2
 8000f66:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000f68:	78f9      	ldrb	r1, [r7, #3]
 8000f6a:	78ba      	ldrb	r2, [r7, #2]
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8000f72:	189b      	adds	r3, r3, r2
 8000f74:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
 8000f78:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7c:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f7e:	68fa      	ldr	r2, [r7, #12]
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68fa      	ldr	r2, [r7, #12]
 8000f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8000f8c:	f107 0714 	add.w	r7, r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	609a      	str	r2, [r3, #8]
}
 8000fac:	f107 070c 	add.w	r7, r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start regular conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000fc0:	f04f 0300 	mov.w	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	689b      	ldr	r3, [r3, #8]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
 8000fd2:	f04f 0301 	mov.w	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e002      	b.n	8000fe0 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the SWSTART bit status */
  return  bitstatus;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f107 0714 	add.w	r7, r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ADC_EOCOnEachRegularChannelCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ffc:	78fb      	ldrb	r3, [r7, #3]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <ADC_EOCOnEachRegularChannelCmd+0x20>
  {
    /* Enable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	e005      	b.n	800101c <ADC_EOCOnEachRegularChannelCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC EOC rising on each regular channel conversion */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
  }
}
 800101c:	f107 070c 	add.w	r7, r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <ADC_ContinuousModeCmd>:
  * @param  NewState: new state of the selected ADC continuous conversion mode
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001034:	78fb      	ldrb	r3, [r7, #3]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d006      	beq.n	8001048 <ADC_ContinuousModeCmd+0x20>
  {
    /* Enable the selected ADC continuous conversion mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f043 0202 	orr.w	r2, r3, #2
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	e005      	b.n	8001054 <ADC_ContinuousModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC continuous conversion mode */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	f023 0202 	bic.w	r2, r3, #2
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	609a      	str	r2, [r3, #8]
  }
}
 8001054:	f107 070c 	add.w	r7, r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel count value.
  *          This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_RESET;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001084:	60fb      	str	r3, [r7, #12]
  
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
 8001086:	78fb      	ldrb	r3, [r7, #3]
 8001088:	f103 33ff 	add.w	r3, r3, #4294967295
 800108c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	ea4f 3343 	mov.w	r3, r3, lsl #13
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	605a      	str	r2, [r3, #4]
}
 80010a0:	f107 0714 	add.w	r7, r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <ADC_DiscModeCmd>:
  *         regular group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d006      	beq.n	80010cc <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	e005      	b.n	80010d8 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]
  }
}
 80010d8:	f107 070c 	add.w	r7, r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	b29b      	uxth	r3, r3
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	f107 070c 	add.w	r7, r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop

08001100 <ADC_GetMultiModeConversionValue>:
  * @note   In triple mode, the value returned by this function is as following
  *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2.
  *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3.           
  */
uint32_t ADC_GetMultiModeConversionValue(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* Return the multi mode conversion value */
  return (*(__IO uint32_t *) CDR_ADDRESS);
 8001104:	f242 3308 	movw	r3, #8968	; 0x2308
 8001108:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800110c:	681b      	ldr	r3, [r3, #0]
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop

08001118 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d006      	beq.n	8001138 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	e005      	b.n	8001144 <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	609a      	str	r2, [r3, #8]
  }
}
 8001144:	f107 070c 	add.w	r7, r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop

08001150 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC DMA request after last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d006      	beq.n	8001170 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	e005      	b.n	800117c <ADC_DMARequestAfterLastTransferCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
  }
}
 800117c:	f107 070c 	add.w	r7, r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <ADC_MultiModeDMARequestAfterLastTransferCmd>:
  *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
  *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
  * @retval None
  */
void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <ADC_MultiModeDMARequestAfterLastTransferCmd+0x2a>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 8001198:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 800119c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011a0:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80011a4:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011a8:	6852      	ldr	r2, [r2, #4]
 80011aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	e00b      	b.n	80011ca <ADC_MultiModeDMARequestAfterLastTransferCmd+0x42>
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 80011b2:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 80011b6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 80011ba:	f44f 520c 	mov.w	r2, #8960	; 0x2300
 80011be:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80011c2:	6852      	ldr	r2, [r2, #4]
 80011c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011c8:	605a      	str	r2, [r3, #4]
  }
}
 80011ca:	f107 070c 	add.w	r7, r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <ADC_InjectedChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b087      	sub	sp, #28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	70f9      	strb	r1, [r7, #3]
 80011de:	70ba      	strb	r2, [r7, #2]
 80011e0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 80011e2:	f04f 0300 	mov.w	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80011f4:	78fb      	ldrb	r3, [r7, #3]
 80011f6:	2b09      	cmp	r3, #9
 80011f8:	d927      	bls.n	800124a <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 8001200:	78fa      	ldrb	r2, [r7, #3]
 8001202:	4613      	mov	r3, r2
 8001204:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001208:	189b      	adds	r3, r3, r2
 800120a:	f1a3 031e 	sub.w	r3, r3, #30
 800120e:	f04f 0207 	mov.w	r2, #7
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	ea6f 0303 	mvn.w	r3, r3
 800121e:	697a      	ldr	r2, [r7, #20]
 8001220:	4013      	ands	r3, r2
 8001222:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 8001224:	7879      	ldrb	r1, [r7, #1]
 8001226:	78fa      	ldrb	r2, [r7, #3]
 8001228:	4613      	mov	r3, r2
 800122a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800122e:	189b      	adds	r3, r3, r2
 8001230:	f1a3 031e 	sub.w	r3, r3, #30
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800123a:	697a      	ldr	r2, [r7, #20]
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	4313      	orrs	r3, r2
 8001240:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	e022      	b.n	8001290 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 8001250:	78fa      	ldrb	r2, [r7, #3]
 8001252:	4613      	mov	r3, r2
 8001254:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001258:	189b      	adds	r3, r3, r2
 800125a:	f04f 0207 	mov.w	r2, #7
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	613b      	str	r3, [r7, #16]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	ea6f 0303 	mvn.w	r3, r3
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	4013      	ands	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8001270:	7879      	ldrb	r1, [r7, #1]
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	4613      	mov	r3, r2
 8001276:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800127a:	189b      	adds	r3, r3, r2
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	613b      	str	r3, [r7, #16]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4313      	orrs	r3, r2
 8001288:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001294:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800129c:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80012a0:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	ea6f 0303 	mvn.w	r3, r3
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	78bb      	ldrb	r3, [r7, #2]
 80012ae:	18d3      	adds	r3, r2, r3
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f103 0303 	add.w	r3, r3, #3
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	461a      	mov	r2, r3
 80012ba:	4613      	mov	r3, r2
 80012bc:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012c0:	189b      	adds	r3, r3, r2
 80012c2:	f04f 021f 	mov.w	r2, #31
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	ea6f 0303 	mvn.w	r3, r3
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 80012d8:	78f9      	ldrb	r1, [r7, #3]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	ea6f 0303 	mvn.w	r3, r3
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	78bb      	ldrb	r3, [r7, #2]
 80012e6:	18d3      	adds	r3, r2, r3
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f103 0303 	add.w	r3, r3, #3
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	461a      	mov	r2, r3
 80012f2:	4613      	mov	r3, r2
 80012f4:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80012f8:	189b      	adds	r3, r3, r2
 80012fa:	fa01 f303 	lsl.w	r3, r1, r3
 80012fe:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800130e:	f107 071c 	add.w	r7, r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *          This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001334:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old injected sequence length JL bits */
  tmpreg1 &= JSQR_JL_RESET;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800133c:	60fb      	str	r3, [r7, #12]
  
  /* Set the injected sequence length JL bits */
  tmpreg2 = Length - 1; 
 800133e:	78fb      	ldrb	r3, [r7, #3]
 8001340:	f103 33ff 	add.w	r3, r3, #4294967295
 8001344:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800134c:	68fa      	ldr	r2, [r7, #12]
 800134e:	4313      	orrs	r3, r2
 8001350:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68fa      	ldr	r2, [r7, #12]
 8001356:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001358:	f107 0714 	add.w	r7, r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop

08001364 <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *          This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	4613      	mov	r3, r2
 800136e:	460a      	mov	r2, r1
 8001370:	70fa      	strb	r2, [r7, #3]
 8001372:	803b      	strh	r3, [r7, #0]
    __IO uint32_t tmp = 0;
 8001374:	f04f 0300 	mov.w	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));
  
  tmp = (uint32_t)ADCx;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
 800137e:	78fa      	ldrb	r2, [r7, #3]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	18d3      	adds	r3, r2, r3
 8001384:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
 *(__IO uint32_t *) tmp = (uint32_t)Offset;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	883a      	ldrh	r2, [r7, #0]
 800138a:	601a      	str	r2, [r3, #0]
}
 800138c:	f107 0714 	add.w	r7, r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop

08001398 <ADC_ExternalTrigInjectedConvConfig>:
  *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
  *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected                          
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	60fb      	str	r3, [r7, #12]
  
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_RESET;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80013b4:	60fb      	str	r3, [r7, #12]
  
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	609a      	str	r2, [r3, #8]
}
 80013c4:	f107 0714 	add.w	r7, r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <ADC_ExternalTrigInjectedConvEdgeConfig>:
  *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
  *                                                               and falling edge
  * @retval None
  */
void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEdge)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	60fb      	str	r3, [r7, #12]
  /* Clear the old external trigger edge for injected group */
  tmpreg &= CR2_JEXTEN_RESET;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80013ec:	60fb      	str	r3, [r7, #12]
  /* Set the new external trigger edge for injected group */
  tmpreg |= ADC_ExternalTrigInjecConvEdge;
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	609a      	str	r2, [r3, #8]
}
 80013fc:	f107 0714 	add.w	r7, r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop

08001408 <ADC_SoftwareStartInjectedConv>:
  * @brief  Enables the selected ADC software start conversion of the injected channels.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC conversion for injected group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
}
 800141c:	f107 070c 	add.w	r7, r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop

08001428 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001430:	f04f 0300 	mov.w	r3, #0
 8001434:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
 8001442:	f04f 0301 	mov.w	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e002      	b.n	8001450 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
 800144a:	f04f 0300 	mov.w	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	f107 0714 	add.w	r7, r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop

08001460 <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d006      	beq.n	8001480 <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	e005      	b.n	800148c <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	605a      	str	r2, [r3, #4]
  }
}
 800148c:	f107 070c 	add.w	r7, r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop

08001498 <ADC_InjectedDiscModeCmd>:
  *         group channel.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	460b      	mov	r3, r1
 80014a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014a4:	78fb      	ldrb	r3, [r7, #3]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d006      	beq.n	80014b8 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	e005      	b.n	80014c4 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]
  }
}
 80014c4:	f107 070c 	add.w	r7, r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop

080014d0 <ADC_GetInjectedConversionValue>:
  *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_OFFSET;
 80014e6:	78fa      	ldrb	r2, [r7, #3]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	18d3      	adds	r3, r2, r3
 80014ec:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80014f0:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp); 
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	f107 0714 	add.w	r7, r7, #20
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	4613      	mov	r3, r2
 800150e:	460a      	mov	r2, r1
 8001510:	807a      	strh	r2, [r7, #2]
 8001512:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 800151a:	887b      	ldrh	r3, [r7, #2]
 800151c:	b2db      	uxtb	r3, r3
 800151e:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f04f 0201 	mov.w	r2, #1
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <ADC_ITConfig+0x3c>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	431a      	orrs	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	e007      	b.n	8001550 <ADC_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	ea6f 0303 	mvn.w	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]
  }
}
 8001550:	f107 0714 	add.w	r7, r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop

0800155c <ADC_GetFlagStatus>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                                                 
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	78fb      	ldrb	r3, [r7, #3]
 8001574:	4013      	ands	r3, r2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 800157a:	f04f 0301 	mov.w	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e002      	b.n	8001588 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8001588:	7bfb      	ldrb	r3, [r7, #15]
}
 800158a:	4618      	mov	r0, r3
 800158c:	f107 0714 	add.w	r7, r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop

08001598 <ADC_ClearFlag>:
  *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
  *            @arg ADC_FLAG_OVR: Overrun flag                          
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	460b      	mov	r3, r1
 80015a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));

  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
 80015a4:	78fb      	ldrb	r3, [r7, #3]
 80015a6:	ea6f 0203 	mvn.w	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	601a      	str	r2, [r3, #0]
}
 80015ae:	f107 070c 	add.w	r7, r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr

080015b8 <ADC_GetITStatus>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                        
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	460b      	mov	r3, r1
 80015c2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));

  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
 80015d6:	887b      	ldrh	r3, [r7, #2]
 80015d8:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	613b      	str	r3, [r7, #16]

  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	887b      	ldrh	r3, [r7, #2]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	f04f 0101 	mov.w	r1, #1
 80015ec:	fa01 f303 	lsl.w	r3, r1, r3
 80015f0:	4013      	ands	r3, r2
 80015f2:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	4013      	ands	r3, r2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <ADC_GetITStatus+0x56>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <ADC_GetITStatus+0x56>
  {
    /* ADC_IT is set */
    bitstatus = SET;
 8001606:	f04f 0301 	mov.w	r3, #1
 800160a:	75fb      	strb	r3, [r7, #23]
 800160c:	e002      	b.n	8001614 <ADC_GetITStatus+0x5c>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
 800160e:	f04f 0300 	mov.w	r3, #0
 8001612:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	f107 071c 	add.w	r7, r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	bc80      	pop	{r7}
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop

08001624 <ADC_ClearITPendingBit>:
  *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  *            @arg ADC_IT_OVR: Overrun interrupt mask                         
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT)); 
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800163c:	b29b      	uxth	r3, r3
 800163e:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	ea6f 0203 	mvn.w	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	601a      	str	r2, [r3, #0]
}                    
 800164a:	f107 0714 	add.w	r7, r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <CAN_DeInit>:
  * @brief  Deinitializes the CAN peripheral registers to their default reset values.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval None.
  */
void CAN_DeInit(CAN_TypeDef* CANx)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
 
  if (CANx == CAN1)
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001662:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001666:	429a      	cmp	r2, r3
 8001668:	d10c      	bne.n	8001684 <CAN_DeInit+0x30>
  {
    /* Enable CAN1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
 800166a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800166e:	f04f 0101 	mov.w	r1, #1
 8001672:	f008 fa69 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    /* Release CAN1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
 8001676:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800167a:	f04f 0100 	mov.w	r1, #0
 800167e:	f008 fa63 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 8001682:	e00b      	b.n	800169c <CAN_DeInit+0x48>
  }
  else
  {  
    /* Enable CAN2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
 8001684:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001688:	f04f 0101 	mov.w	r1, #1
 800168c:	f008 fa5c 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    /* Release CAN2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
 8001690:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001694:	f04f 0100 	mov.w	r1, #0
 8001698:	f008 fa56 	bl	8009b48 <RCC_APB1PeriphResetCmd>
  }
}
 800169c:	f107 0708 	add.w	r7, r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <CAN_Init>:
  *         the configuration information for the CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f023 0202 	bic.w	r2, r3, #2
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80016d2:	e003      	b.n	80016dc <CAN_Init+0x38>
  {
    wait_ack++;
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	f103 0301 	add.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 0301 	and.w	r3, r3, #1
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d104      	bne.n	80016f2 <CAN_Init+0x4e>
 80016e8:	68ba      	ldr	r2, [r7, #8]
 80016ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d1f0      	bne.n	80016d4 <CAN_Init+0x30>
  {
    wait_ack++;
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d103      	bne.n	8001706 <CAN_Init+0x62>
  {
    InitStatus = CAN_InitStatus_Failed;
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
 8001704:	e0a7      	b.n	8001856 <CAN_Init+0x1b2>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	799b      	ldrb	r3, [r3, #6]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d106      	bne.n	800171c <CAN_Init+0x78>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
 800171a:	e005      	b.n	8001728 <CAN_Init+0x84>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	79db      	ldrb	r3, [r3, #7]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <CAN_Init+0x9a>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e005      	b.n	800174a <CAN_Init+0xa6>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	7a1b      	ldrb	r3, [r3, #8]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d106      	bne.n	8001760 <CAN_Init+0xbc>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f043 0220 	orr.w	r2, r3, #32
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e005      	b.n	800176c <CAN_Init+0xc8>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 0220 	bic.w	r2, r3, #32
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	7a5b      	ldrb	r3, [r3, #9]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <CAN_Init+0xde>
    {
      CANx->MCR |= CAN_MCR_NART;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f043 0210 	orr.w	r2, r3, #16
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	e005      	b.n	800178e <CAN_Init+0xea>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f023 0210 	bic.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	7a9b      	ldrb	r3, [r3, #10]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d106      	bne.n	80017a4 <CAN_Init+0x100>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f043 0208 	orr.w	r2, r3, #8
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e005      	b.n	80017b0 <CAN_Init+0x10c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f023 0208 	bic.w	r2, r3, #8
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	7adb      	ldrb	r3, [r3, #11]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <CAN_Init+0x122>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f043 0204 	orr.w	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	e005      	b.n	80017d2 <CAN_Init+0x12e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0204 	bic.w	r2, r3, #4
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	789b      	ldrb	r3, [r3, #2]
 80017d6:	ea4f 7283 	mov.w	r2, r3, lsl #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	78db      	ldrb	r3, [r3, #3]
 80017de:	ea4f 6303 	mov.w	r3, r3, lsl #24
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 80017e2:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	791b      	ldrb	r3, [r3, #4]
 80017e8:	ea4f 4303 	mov.w	r3, r3, lsl #16
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 80017ec:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	795b      	ldrb	r3, [r3, #5]
 80017f2:	ea4f 5303 	mov.w	r3, r3, lsl #20
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 80017f6:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	f103 33ff 	add.w	r3, r3, #4294967295

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8001800:	431a      	orrs	r2, r3
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	61da      	str	r2, [r3, #28]
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f023 0201 	bic.w	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8001812:	f04f 0300 	mov.w	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8001818:	e003      	b.n	8001822 <CAN_Init+0x17e>
   {
     wait_ack++;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	f103 0301 	add.w	r3, r3, #1
 8001820:	60bb      	str	r3, [r7, #8]
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;

   /* Wait the acknowledge */
   wait_ack = 0;

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d004      	beq.n	800183a <CAN_Init+0x196>
 8001830:	68ba      	ldr	r2, [r7, #8]
 8001832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001836:	429a      	cmp	r2, r3
 8001838:	d1ef      	bne.n	800181a <CAN_Init+0x176>
   {
     wait_ack++;
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <CAN_Init+0x1ac>
    {
      InitStatus = CAN_InitStatus_Failed;
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	e002      	b.n	8001856 <CAN_Init+0x1b2>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8001850:	f04f 0301 	mov.w	r3, #1
 8001854:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	f107 0714 	add.w	r7, r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <CAN_FilterInit>:
  * @param  CAN_FilterInitStruct: pointer to a CAN_FilterInitTypeDef structure that
  *         contains the configuration information.
  * @retval None
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7a9b      	ldrb	r3, [r3, #10]
 8001876:	f04f 0201 	mov.w	r2, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8001880:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001884:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001888:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800188c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001890:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 800189c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80018a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80018a4:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80018a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80018ac:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	ea6f 0202 	mvn.w	r2, r2
 80018b6:	400a      	ands	r2, r1
 80018b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	7b1b      	ldrb	r3, [r3, #12]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d133      	bne.n	800192c <CAN_FilterInit+0xc8>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 80018c4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80018c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80018cc:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80018d0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80018d4:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	ea6f 0202 	mvn.w	r2, r2
 80018de:	400a      	ands	r2, r1
 80018e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80018e4:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80018e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	88c9      	ldrh	r1, [r1, #6]
 80018f4:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	8849      	ldrh	r1, [r1, #2]
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 80018fc:	4301      	orrs	r1, r0
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 80018fe:	f102 0248 	add.w	r2, r2, #72	; 0x48
 8001902:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001906:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800190a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	8889      	ldrh	r1, [r1, #4]
 8001916:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 800191a:	6879      	ldr	r1, [r7, #4]
 800191c:	8809      	ldrh	r1, [r1, #0]
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800191e:	4301      	orrs	r1, r0
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001920:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001924:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001928:	18d3      	adds	r3, r2, r3
 800192a:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	7b1b      	ldrb	r3, [r3, #12]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d131      	bne.n	8001998 <CAN_FilterInit+0x134>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8001934:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001938:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800193c:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001940:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001944:	f8d2 120c 	ldr.w	r1, [r2, #524]	; 0x20c
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	430a      	orrs	r2, r1
 800194c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8001950:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001954:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	7a92      	ldrb	r2, [r2, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	8809      	ldrh	r1, [r1, #0]
 8001960:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	8849      	ldrh	r1, [r1, #2]
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8001968:	4301      	orrs	r1, r0
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 800196a:	f102 0248 	add.w	r2, r2, #72	; 0x48
 800196e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8001972:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001976:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7a9b      	ldrb	r3, [r3, #10]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	8889      	ldrh	r1, [r1, #4]
 8001982:	ea4f 4001 	mov.w	r0, r1, lsl #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8001986:	6879      	ldr	r1, [r7, #4]
 8001988:	88c9      	ldrh	r1, [r1, #6]
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 800198a:	4301      	orrs	r1, r0
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 800198c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8001990:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8001994:	18d3      	adds	r3, r2, r3
 8001996:	6059      	str	r1, [r3, #4]
       ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7adb      	ldrb	r3, [r3, #11]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d110      	bne.n	80019c2 <CAN_FilterInit+0x15e>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 80019a0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80019a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019a8:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80019ac:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80019b0:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	ea6f 0202 	mvn.w	r2, r2
 80019ba:	400a      	ands	r2, r1
 80019bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80019c0:	e00d      	b.n	80019de <CAN_FilterInit+0x17a>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 80019c2:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80019c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019ca:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80019ce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80019d2:	f8d2 1204 	ldr.w	r1, [r2, #516]	; 0x204
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	430a      	orrs	r2, r1
 80019da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	891b      	ldrh	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <CAN_FilterInit+0x1a2>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 80019e6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80019ea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80019ee:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 80019f2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80019f6:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	ea6f 0202 	mvn.w	r2, r2
 8001a00:	400a      	ands	r2, r1
 8001a02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	891b      	ldrh	r3, [r3, #8]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d10d      	bne.n	8001a2a <CAN_FilterInit+0x1c6>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8001a0e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001a12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a16:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001a1a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001a1e:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 8001a22:	68fa      	ldr	r2, [r7, #12]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7b5b      	ldrb	r3, [r3, #13]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d10d      	bne.n	8001a4e <CAN_FilterInit+0x1ea>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8001a32:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001a36:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a3a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001a3e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001a42:	f8d2 121c 	ldr.w	r1, [r2, #540]	; 0x21c
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001a4e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001a52:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001a56:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001a5a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001a5e:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001a6a:	f107 0714 	add.w	r7, r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <CAN_StructInit>:
  * @brief  Fills each CAN_InitStruct member with its default value.
  * @param  CAN_InitStruct: pointer to a CAN_InitTypeDef structure which ill be initialized.
  * @retval None
  */
void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Reset CAN init structure parameters values */
  
  /* Initialize the time triggered communication mode */
  CAN_InitStruct->CAN_TTCM = DISABLE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	719a      	strb	r2, [r3, #6]
  
  /* Initialize the automatic bus-off management */
  CAN_InitStruct->CAN_ABOM = DISABLE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f04f 0200 	mov.w	r2, #0
 8001a8a:	71da      	strb	r2, [r3, #7]
  
  /* Initialize the automatic wake-up mode */
  CAN_InitStruct->CAN_AWUM = DISABLE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	721a      	strb	r2, [r3, #8]
  
  /* Initialize the no automatic retransmission */
  CAN_InitStruct->CAN_NART = DISABLE;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	725a      	strb	r2, [r3, #9]
  
  /* Initialize the receive FIFO locked mode */
  CAN_InitStruct->CAN_RFLM = DISABLE;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	729a      	strb	r2, [r3, #10]
  
  /* Initialize the transmit FIFO priority */
  CAN_InitStruct->CAN_TXFP = DISABLE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	72da      	strb	r2, [r3, #11]
  
  /* Initialize the CAN_Mode member */
  CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	709a      	strb	r2, [r3, #2]
  
  /* Initialize the CAN_SJW member */
  CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	70da      	strb	r2, [r3, #3]
  
  /* Initialize the CAN_BS1 member */
  CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f04f 0203 	mov.w	r2, #3
 8001ac2:	711a      	strb	r2, [r3, #4]
  
  /* Initialize the CAN_BS2 member */
  CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f04f 0202 	mov.w	r2, #2
 8001aca:	715a      	strb	r2, [r3, #5]
  
  /* Initialize the CAN_Prescaler member */
  CAN_InitStruct->CAN_Prescaler = 1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f04f 0201 	mov.w	r2, #1
 8001ad2:	801a      	strh	r2, [r3, #0]
}
 8001ad4:	f107 070c 	add.w	r7, r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bc80      	pop	{r7}
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <CAN_SlaveStartBank>:
  * @brief  Select the start bank filter for slave CAN.
  * @param  CAN_BankNumber: Select the start slave bank filter from 1..27.
  * @retval None
  */
void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
  
  /* Enter Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8001aea:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001aee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001af2:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001af6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001afa:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Select the start slave bank */
  CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
 8001b06:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001b0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b0e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001b12:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001b16:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001b1a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001b1e:	f022 020e 	bic.w	r2, r2, #14
 8001b22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
 8001b26:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001b2a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b2e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001b32:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001b36:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8001b3a:	79fa      	ldrb	r2, [r7, #7]
 8001b3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8001b40:	430a      	orrs	r2, r1
 8001b42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  
  /* Leave Initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8001b46:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8001b4a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8001b4e:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8001b52:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8001b56:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001b62:	f107 070c 	add.w	r7, r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <CAN_DBGFreeze>:
  *          during debug. Reception FIFOs can still be accessed/controlled normally) 
  *          or DISABLE (CAN is working during debug).
  * @retval None
  */
void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	460b      	mov	r3, r1
 8001b76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <CAN_DBGFreeze+0x20>
  {
    /* Enable Debug Freeze  */
    CANx->MCR |= MCR_DBF;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	e005      	b.n	8001b98 <CAN_DBGFreeze+0x2c>
  }
  else
  {
    /* Disable Debug Freeze */
    CANx->MCR &= ~MCR_DBF;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	601a      	str	r2, [r3, #0]
  }
}
 8001b98:	f107 070c 	add.w	r7, r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bc80      	pop	{r7}
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop

08001ba4 <CAN_TTComModeCmd>:
  *         data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] 
  *         in data byte 7. 
  * @retval None
  */
void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d01e      	beq.n	8001bf4 <CAN_TTComModeCmd+0x50>
  {
    /* Enable the TTCM mode */
    CANx->MCR |= CAN_MCR_TTCM;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	601a      	str	r2, [r3, #0]

    /* Set TGT bits */
    CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001bc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001bd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 8001bf2:	e01d      	b.n	8001c30 <CAN_TTComModeCmd+0x8c>
  }
  else
  {
    /* Disable the TTCM mode */
    CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Reset TGT bits */
    CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8001c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001c16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8001c26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
  }
}
 8001c30:	f107 070c 	add.w	r7, r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop

08001c3c <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <CAN_Transmit+0x24>
  {
    transmit_mailbox = 0;
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e016      	b.n	8001c8e <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <CAN_Transmit+0x38>
  {
    transmit_mailbox = 1;
 8001c6c:	f04f 0301 	mov.w	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	e00c      	b.n	8001c8e <CAN_Transmit+0x52>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <CAN_Transmit+0x4c>
  {
    transmit_mailbox = 2;
 8001c80:	f04f 0302 	mov.w	r3, #2
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e002      	b.n	8001c8e <CAN_Transmit+0x52>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 8001c88:	f04f 0304 	mov.w	r3, #4
 8001c8c:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8001c8e:	7bfb      	ldrb	r3, [r7, #15]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	f000 80ba 	beq.w	8001e0a <CAN_Transmit+0x1ce>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	f102 0218 	add.w	r2, r2, #24
 8001ca0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001ca4:	188a      	adds	r2, r1, r2
 8001ca6:	6812      	ldr	r2, [r2, #0]
 8001ca8:	f002 0201 	and.w	r2, r2, #1
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	f103 0318 	add.w	r3, r3, #24
 8001cb2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001cb6:	18cb      	adds	r3, r1, r3
 8001cb8:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	7a1b      	ldrb	r3, [r3, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <CAN_Transmit+0xb8>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001cc2:	7bfb      	ldrb	r3, [r7, #15]
 8001cc4:	7bfa      	ldrb	r2, [r7, #15]
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	f102 0218 	add.w	r2, r2, #24
 8001ccc:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001cd0:	188a      	adds	r2, r1, r2
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	683a      	ldr	r2, [r7, #0]
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	ea4f 5042 	mov.w	r0, r2, lsl #21
                                                  TxMessage->RTR);
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	7a52      	ldrb	r2, [r2, #9]
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
    if (TxMessage->IDE == CAN_Id_Standard)
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001ce0:	4302      	orrs	r2, r0
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	f103 0318 	add.w	r3, r3, #24
 8001cea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001cee:	18cb      	adds	r3, r1, r3
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	e01a      	b.n	8001d2a <CAN_Transmit+0xee>
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001cf4:	7bfb      	ldrb	r3, [r7, #15]
 8001cf6:	7bfa      	ldrb	r2, [r7, #15]
 8001cf8:	6879      	ldr	r1, [r7, #4]
 8001cfa:	f102 0218 	add.w	r2, r2, #24
 8001cfe:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001d02:	188a      	adds	r2, r1, r2
 8001d04:	6811      	ldr	r1, [r2, #0]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	6852      	ldr	r2, [r2, #4]
 8001d0a:	ea4f 00c2 	mov.w	r0, r2, lsl #3
                                                  TxMessage->IDE | \
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	7a12      	ldrb	r2, [r2, #8]
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001d12:	4310      	orrs	r0, r2
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	7a52      	ldrb	r2, [r2, #9]
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
                                                  TxMessage->IDE | \
 8001d18:	4302      	orrs	r2, r0
                                                  TxMessage->RTR);
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	f103 0318 	add.w	r3, r3, #24
 8001d22:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d26:	18cb      	adds	r3, r1, r3
 8001d28:	601a      	str	r2, [r3, #0]
                                                  TxMessage->IDE | \
                                                  TxMessage->RTR);
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	7a9b      	ldrb	r3, [r3, #10]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f102 0218 	add.w	r2, r2, #24
 8001d42:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001d46:	188a      	adds	r2, r1, r2
 8001d48:	6852      	ldr	r2, [r2, #4]
 8001d4a:	f022 020f 	bic.w	r2, r2, #15
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	f103 0318 	add.w	r3, r3, #24
 8001d54:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d58:	18cb      	adds	r3, r1, r3
 8001d5a:	605a      	str	r2, [r3, #4]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	6879      	ldr	r1, [r7, #4]
 8001d62:	f102 0218 	add.w	r2, r2, #24
 8001d66:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001d6a:	188a      	adds	r2, r1, r2
 8001d6c:	6851      	ldr	r1, [r2, #4]
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	7a92      	ldrb	r2, [r2, #10]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	f103 0318 	add.w	r3, r3, #24
 8001d7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d7e:	18cb      	adds	r3, r1, r3
 8001d80:	605a      	str	r2, [r3, #4]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	683a      	ldr	r2, [r7, #0]
 8001d86:	7b92      	ldrb	r2, [r2, #14]
 8001d88:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001d8c:	683a      	ldr	r2, [r7, #0]
 8001d8e:	7b52      	ldrb	r2, [r2, #13]
 8001d90:	ea4f 4202 	mov.w	r2, r2, lsl #16
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001d94:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	7b12      	ldrb	r2, [r2, #12]
 8001d9a:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 8001d9e:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	7ad2      	ldrb	r2, [r2, #11]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001da4:	430a      	orrs	r2, r1
    TxMessage->DLC &= (uint8_t)0x0000000F;
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001da6:	6879      	ldr	r1, [r7, #4]
 8001da8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001dac:	18cb      	adds	r3, r1, r3
 8001dae:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001db2:	601a      	str	r2, [r3, #0]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	7c92      	ldrb	r2, [r2, #18]
 8001dba:	ea4f 6102 	mov.w	r1, r2, lsl #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	7c52      	ldrb	r2, [r2, #17]
 8001dc2:	ea4f 4202 	mov.w	r2, r2, lsl #16
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001dc6:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	7c12      	ldrb	r2, [r2, #16]
 8001dcc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001dd0:	4311      	orrs	r1, r2
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	7bd2      	ldrb	r2, [r2, #15]
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 8001dd6:	430a      	orrs	r2, r1
    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
                                             ((uint32_t)TxMessage->Data[2] << 16) |
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
                                             ((uint32_t)TxMessage->Data[0]));
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001dde:	18cb      	adds	r3, r1, r3
 8001de0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001de4:	605a      	str	r2, [r3, #4]
                                             ((uint32_t)TxMessage->Data[6] << 16) |
                                             ((uint32_t)TxMessage->Data[5] << 8) |
                                             ((uint32_t)TxMessage->Data[4]));
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	6879      	ldr	r1, [r7, #4]
 8001dec:	f102 0218 	add.w	r2, r2, #24
 8001df0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001df4:	188a      	adds	r2, r1, r2
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	f042 0201 	orr.w	r2, r2, #1
 8001dfc:	6879      	ldr	r1, [r7, #4]
 8001dfe:	f103 0318 	add.w	r3, r3, #24
 8001e02:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e06:	18cb      	adds	r3, r1, r3
 8001e08:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f107 0714 	add.w	r7, r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <CAN_TransmitStatus>:
  * @param  TransmitMailbox: the number of the mailbox that is used for transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, 
  *         CAN_TxStatus_Failed in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d00c      	beq.n	8001e4a <CAN_TransmitStatus+0x32>
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d013      	beq.n	8001e5c <CAN_TransmitStatus+0x44>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11a      	bne.n	8001e6e <CAN_TransmitStatus+0x56>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	f04f 0303 	mov.w	r3, #3
 8001e40:	f2c0 4300 	movt	r3, #1024	; 0x400
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
      break;
 8001e48:	e015      	b.n	8001e76 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e52:	f6c0 0300 	movt	r3, #2048	; 0x800
 8001e56:	4013      	ands	r3, r2
 8001e58:	60fb      	str	r3, [r7, #12]
      break;
 8001e5a:	e00c      	b.n	8001e76 <CAN_TransmitStatus+0x5e>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	f04f 0300 	mov.w	r3, #0
 8001e64:	f2c1 0303 	movt	r3, #4099	; 0x1003
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
      break;
 8001e6c:	e003      	b.n	8001e76 <CAN_TransmitStatus+0x5e>
    default:
      state = CAN_TxStatus_Failed;
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	60fb      	str	r3, [r7, #12]
      break;
 8001e74:	bf00      	nop
  }
  switch (state)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e7c:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d02f      	beq.n	8001ee4 <CAN_TransmitStatus+0xcc>
 8001e84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e88:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d80e      	bhi.n	8001eae <CAN_TransmitStatus+0x96>
 8001e90:	f04f 0201 	mov.w	r2, #1
 8001e94:	f2c0 4200 	movt	r2, #1024	; 0x400
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d01f      	beq.n	8001edc <CAN_TransmitStatus+0xc4>
 8001e9c:	f04f 0203 	mov.w	r2, #3
 8001ea0:	f2c0 4200 	movt	r2, #1024	; 0x400
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d025      	beq.n	8001ef4 <CAN_TransmitStatus+0xdc>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <CAN_TransmitStatus+0xbc>
 8001eac:	e02e      	b.n	8001f0c <CAN_TransmitStatus+0xf4>
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f2c1 0201 	movt	r2, #4097	; 0x1001
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d018      	beq.n	8001eec <CAN_TransmitStatus+0xd4>
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f2c1 0203 	movt	r2, #4099	; 0x1003
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d01e      	beq.n	8001f04 <CAN_TransmitStatus+0xec>
 8001ec6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001eca:	f6c0 0200 	movt	r2, #2048	; 0x800
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d014      	beq.n	8001efc <CAN_TransmitStatus+0xe4>
 8001ed2:	e01b      	b.n	8001f0c <CAN_TransmitStatus+0xf4>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8001ed4:	f04f 0302 	mov.w	r3, #2
 8001ed8:	60fb      	str	r3, [r7, #12]
      break;
 8001eda:	e01b      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
      break;
 8001ee2:	e017      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
      break;
 8001eea:	e013      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8001eec:	f04f 0300 	mov.w	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
      break;
 8001ef2:	e00f      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 8001ef4:	f04f 0301 	mov.w	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      break;
 8001efa:	e00b      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8001efc:	f04f 0301 	mov.w	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]
      break;
 8001f02:	e007      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8001f04:	f04f 0301 	mov.w	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
      break;
 8001f0a:	e003      	b.n	8001f14 <CAN_TransmitStatus+0xfc>
    default: state = CAN_TxStatus_Failed;
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
      break;
 8001f12:	bf00      	nop
  }
  return (uint8_t) state;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	b2db      	uxtb	r3, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f107 0714 	add.w	r7, r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <CAN_CancelTransmit>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  Mailbox: Mailbox number.
  * @retval None
  */
void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
  /* abort transmission */
  switch (Mailbox)
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d00a      	beq.n	8001f4c <CAN_CancelTransmit+0x28>
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d00f      	beq.n	8001f5a <CAN_CancelTransmit+0x36>
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d114      	bne.n	8001f68 <CAN_CancelTransmit+0x44>
  {
    case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	609a      	str	r2, [r3, #8]
      break;
 8001f4a:	e00e      	b.n	8001f6a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	609a      	str	r2, [r3, #8]
      break;
 8001f58:	e007      	b.n	8001f6a <CAN_CancelTransmit+0x46>
    case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	609a      	str	r2, [r3, #8]
      break;
 8001f66:	e000      	b.n	8001f6a <CAN_CancelTransmit+0x46>
    default:
      break;
 8001f68:	bf00      	nop
  }
}
 8001f6a:	f107 070c 	add.w	r7, r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001f82:	7afb      	ldrb	r3, [r7, #11]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	f103 031b 	add.w	r3, r3, #27
 8001f8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001f8e:	18d3      	adds	r3, r2, r3
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7a1b      	ldrb	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10c      	bne.n	8001fc0 <CAN_Receive+0x4c>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8001fa6:	7afb      	ldrb	r3, [r7, #11]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	f103 031b 	add.w	r3, r3, #27
 8001fae:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001fb2:	18d3      	adds	r3, r2, r3
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	ea4f 5253 	mov.w	r2, r3, lsr #21
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	e00b      	b.n	8001fd8 <CAN_Receive+0x64>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	68fa      	ldr	r2, [r7, #12]
 8001fc4:	f103 031b 	add.w	r3, r3, #27
 8001fc8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001fcc:	18d3      	adds	r3, r2, r3
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	f103 031b 	add.w	r3, r3, #27
 8001fe0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001fe4:	18d3      	adds	r3, r2, r3
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8001ff4:	7afb      	ldrb	r3, [r7, #11]
 8001ff6:	68fa      	ldr	r2, [r7, #12]
 8001ff8:	f103 031b 	add.w	r3, r3, #27
 8001ffc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002000:	18d3      	adds	r3, r2, r3
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	b2da      	uxtb	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8002010:	7afb      	ldrb	r3, [r7, #11]
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	f103 031b 	add.w	r3, r3, #27
 8002018:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800201c:	18d3      	adds	r3, r2, r3
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002024:	b2da      	uxtb	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800202a:	7afb      	ldrb	r3, [r7, #11]
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002032:	18d3      	adds	r3, r2, r3
 8002034:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8002040:	7afb      	ldrb	r3, [r7, #11]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002048:	18d3      	adds	r3, r2, r3
 800204a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8002054:	b2da      	uxtb	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 800205a:	7afb      	ldrb	r3, [r7, #11]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002062:	18d3      	adds	r3, r2, r3
 8002064:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800206e:	b2da      	uxtb	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800207c:	18d3      	adds	r3, r2, r3
 800207e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002096:	18d3      	adds	r3, r2, r3
 8002098:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 80020a4:	7afb      	ldrb	r3, [r7, #11]
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020ac:	18d3      	adds	r3, r2, r3
 80020ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 80020be:	7afb      	ldrb	r3, [r7, #11]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020c6:	18d3      	adds	r3, r2, r3
 80020c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80020e0:	18d3      	adds	r3, r2, r3
 80020e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	ea4f 6313 	mov.w	r3, r3, lsr #24
 80020ec:	b2da      	uxtb	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80020f2:	7afb      	ldrb	r3, [r7, #11]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <CAN_Receive+0x192>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	60da      	str	r2, [r3, #12]
 8002104:	e005      	b.n	8002112 <CAN_Receive+0x19e>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	f043 0220 	orr.w	r2, r3, #32
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	611a      	str	r2, [r3, #16]
  }
}
 8002112:	f107 0714 	add.w	r7, r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <CAN_FIFORelease>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: FIFO to release, CAN_FIFO0 or CAN_FIFO1.
  * @retval None
  */
void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d106      	bne.n	800213c <CAN_FIFORelease+0x20>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f043 0220 	orr.w	r2, r3, #32
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	e005      	b.n	8002148 <CAN_FIFORelease+0x2c>
  }
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f043 0220 	orr.w	r2, r3, #32
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
  }
}
 8002148:	f107 070c 	add.w	r7, r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop

08002154 <CAN_MessagePending>:
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @param  FIFONumber: Receive FIFO number, CAN_FIFO0 or CAN_FIFO1.
  * @retval NbMessage : which is the number of pending message.
  */
uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
  uint8_t message_pending=0;
 8002160:	f04f 0300 	mov.w	r3, #0
 8002164:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  if (FIFONumber == CAN_FIFO0)
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d106      	bne.n	800217a <CAN_MessagePending+0x26>
  {
    message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	73fb      	strb	r3, [r7, #15]
 8002178:	e00c      	b.n	8002194 <CAN_MessagePending+0x40>
  }
  else if (FIFONumber == CAN_FIFO1)
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d106      	bne.n	800218e <CAN_MessagePending+0x3a>
  {
    message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e002      	b.n	8002194 <CAN_MessagePending+0x40>
  }
  else
  {
    message_pending = 0;
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  }
  return message_pending;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	f107 0714 	add.w	r7, r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop

080021a4 <CAN_OperatingModeRequest>:
  * @retval status of the requested mode which can be 
  *         - CAN_ModeStatus_Failed:  CAN failed entering the specific mode 
  *         - CAN_ModeStatus_Success: CAN Succeed entering the specific mode 
  */
uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	460b      	mov	r3, r1
 80021ae:	70fb      	strb	r3, [r7, #3]
  uint8_t status = CAN_ModeStatus_Failed;
 80021b0:	f04f 0300 	mov.w	r3, #0
 80021b4:	73fb      	strb	r3, [r7, #15]
  
  /* Timeout for INAK or also for SLAK bits*/
  uint32_t timeout = INAK_TIMEOUT; 
 80021b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ba:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));

  if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d123      	bne.n	800220a <CAN_OperatingModeRequest+0x66>
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	f043 0201 	orr.w	r2, r3, #1
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80021d2:	e003      	b.n	80021dc <CAN_OperatingModeRequest+0x38>
    {
      timeout--;
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80021da:	60bb      	str	r3, [r7, #8]
  {
    /* Request initialisation */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d002      	beq.n	80021ee <CAN_OperatingModeRequest+0x4a>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f2      	bne.n	80021d4 <CAN_OperatingModeRequest+0x30>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d003      	beq.n	8002202 <CAN_OperatingModeRequest+0x5e>
    {
      status = CAN_ModeStatus_Failed;
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
 8002200:	e052      	b.n	80022a8 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 8002202:	f04f 0301 	mov.w	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e04e      	b.n	80022a8 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d121      	bne.n	8002254 <CAN_OperatingModeRequest+0xb0>
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f023 0203 	bic.w	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 800221c:	e003      	b.n	8002226 <CAN_OperatingModeRequest+0x82>
    {
      timeout--;
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	f103 33ff 	add.w	r3, r3, #4294967295
 8002224:	60bb      	str	r3, [r7, #8]
  {
    /* Request leave initialisation and sleep mode  and enter Normal mode */
    CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0303 	and.w	r3, r3, #3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <CAN_OperatingModeRequest+0x94>
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f2      	bne.n	800221e <CAN_OperatingModeRequest+0x7a>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != 0)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <CAN_OperatingModeRequest+0xa8>
    {
      status = CAN_ModeStatus_Failed;
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e02d      	b.n	80022a8 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800224c:	f04f 0301 	mov.w	r3, #1
 8002250:	73fb      	strb	r3, [r7, #15]
 8002252:	e029      	b.n	80022a8 <CAN_OperatingModeRequest+0x104>
    }
  }
  else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d123      	bne.n	80022a2 <CAN_OperatingModeRequest+0xfe>
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	f043 0202 	orr.w	r2, r3, #2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 800226a:	e003      	b.n	8002274 <CAN_OperatingModeRequest+0xd0>
    {
      timeout--;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002272:	60bb      	str	r3, [r7, #8]
  {
    /* Request Sleep mode */
    CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);

    /* Wait the acknowledge */
    while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d002      	beq.n	8002286 <CAN_OperatingModeRequest+0xe2>
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d1f2      	bne.n	800226c <CAN_OperatingModeRequest+0xc8>
    {
      timeout--;
    }
    if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d003      	beq.n	800229a <CAN_OperatingModeRequest+0xf6>
    {
      status = CAN_ModeStatus_Failed;
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
 8002298:	e006      	b.n	80022a8 <CAN_OperatingModeRequest+0x104>
    }
    else
    {
      status = CAN_ModeStatus_Success;
 800229a:	f04f 0301 	mov.w	r3, #1
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e002      	b.n	80022a8 <CAN_OperatingModeRequest+0x104>
    }
  }
  else
  {
    status = CAN_ModeStatus_Failed;
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	73fb      	strb	r3, [r7, #15]
  }

  return  (uint8_t) status;
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	f107 0714 	add.w	r7, r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <CAN_Sleep>:
  * @brief  Enters the Sleep (low power) mode.
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed otherwise.
  */
uint8_t CAN_Sleep(CAN_TypeDef* CANx)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint8_t sleepstatus = CAN_Sleep_Failed;
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Request Sleep mode */
   CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f023 0303 	bic.w	r3, r3, #3
 80022ce:	f043 0202 	orr.w	r2, r3, #2
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
   
  /* Sleep mode status */
  if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d102      	bne.n	80022e8 <CAN_Sleep+0x30>
  {
    /* Sleep mode not entered */
    sleepstatus =  CAN_Sleep_Ok;
 80022e2:	f04f 0301 	mov.w	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
  }
  /* return sleep mode status */
   return (uint8_t)sleepstatus;
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	f107 0714 	add.w	r7, r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop

080022f8 <CAN_WakeUp>:
  * @brief  Wakes up the CAN peripheral from sleep mode .
  * @param  CANx: where x can be 1 or 2 to select the CAN peripheral.
  * @retval CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed otherwise.
  */
uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_slak = SLAK_TIMEOUT;
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	60fb      	str	r3, [r7, #12]
  uint8_t wakeupstatus = CAN_WakeUp_Failed;
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f023 0202 	bic.w	r2, r3, #2
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	601a      	str	r2, [r3, #0]
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002318:	e003      	b.n	8002322 <CAN_WakeUp+0x2a>
  {
   wait_slak--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002320:	60fb      	str	r3, [r7, #12]
    
  /* Wake up request */
  CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
    
  /* Sleep mode status */
  while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d002      	beq.n	8002334 <CAN_WakeUp+0x3c>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1f2      	bne.n	800231a <CAN_WakeUp+0x22>
  {
   wait_slak--;
  }
  if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <CAN_WakeUp+0x4e>
  {
   /* wake up done : Sleep mode exited */
    wakeupstatus = CAN_WakeUp_Ok;
 8002340:	f04f 0301 	mov.w	r3, #1
 8002344:	72fb      	strb	r3, [r7, #11]
  }
  /* return wakeup status */
  return (uint8_t)wakeupstatus;
 8002346:	7afb      	ldrb	r3, [r7, #11]
}
 8002348:	4618      	mov	r0, r3
 800234a:	f107 0714 	add.w	r7, r7, #20
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <CAN_GetLastErrorCode>:
  *          - CAN_ERRORCODE_BitDominantErr: Bit Dominant Error
  *          - CAN_ERRORCODE_CRCErr: CRC Error
  *          - CAN_ERRORCODE_SoftwareSetErr: Software Set Error  
  */
uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint8_t errorcode=0;
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the error code*/
  errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800236c:	73fb      	strb	r3, [r7, #15]
  
  /* Return the error code*/
  return errorcode;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002370:	4618      	mov	r0, r3
 8002372:	f107 0714 	add.w	r7, r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <CAN_GetReceiveErrorCounter>:
  *         error passive state.  
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.  
  * @retval CAN Receive Error Counter. 
  */
uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 8002384:	f04f 0300 	mov.w	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the Receive Error Counter*/
  counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Return the Receive Error Counter*/
  return counter;
 8002394:	7bfb      	ldrb	r3, [r7, #15]
}
 8002396:	4618      	mov	r0, r3
 8002398:	f107 0714 	add.w	r7, r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop

080023a4 <CAN_GetLSBTransmitErrorCounter>:
  * @brief  Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC).
  * @param  CANx: where x can be 1 or 2 to to select the CAN peripheral.
  * @retval LSB of the 9-bit CAN Transmit Error Counter. 
  */
uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint8_t counter=0;
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  
  /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80023ba:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80023be:	73fb      	strb	r3, [r7, #15]
  
  /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
  return counter;
 80023c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	f107 0714 	add.w	r7, r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bc80      	pop	{r7}
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop

080023d0 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	4613      	mov	r3, r2
 80023dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d006      	beq.n	80023f2 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	695a      	ldr	r2, [r3, #20]
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	615a      	str	r2, [r3, #20]
 80023f0:	e007      	b.n	8002402 <CAN_ITConfig+0x32>
  }
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	695a      	ldr	r2, [r3, #20]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	ea6f 0303 	mvn.w	r3, r3
 80023fc:	401a      	ands	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	615a      	str	r2, [r3, #20]
  }
}
 8002402:	f107 0714 	add.w	r7, r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <CAN_GetFlagStatus>:
  *            @arg CAN_FLAG_BOF: Bus-Off Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag      
  * @retval The new state of CAN_FLAG (SET or RESET).
  */
FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
  

  if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d011      	beq.n	800244a <CAN_GetFlagStatus+0x3e>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	4013      	ands	r3, r2
 800242e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002432:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <CAN_GetFlagStatus+0x36>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 800243a:	f04f 0301 	mov.w	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e059      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e055      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d011      	beq.n	8002478 <CAN_GetFlagStatus+0x6c>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4013      	ands	r3, r2
 800245c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002460:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <CAN_GetFlagStatus+0x64>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002468:	f04f 0301 	mov.w	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
 800246e:	e042      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	73fb      	strb	r3, [r7, #15]
 8002476:	e03e      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d011      	beq.n	80024a6 <CAN_GetFlagStatus+0x9a>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	4013      	ands	r3, r2
 800248a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800248e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <CAN_GetFlagStatus+0x92>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 8002496:	f04f 0301 	mov.w	r3, #1
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e02b      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e027      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
  }
  else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d011      	beq.n	80024d4 <CAN_GetFlagStatus+0xc8>
  { 
    /* Check the status of the specified CAN flag */
    if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4013      	ands	r3, r2
 80024b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <CAN_GetFlagStatus+0xc0>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80024c4:	f04f 0301 	mov.w	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e014      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e010      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
  }
  else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
  { 
    /* Check the status of the specified CAN flag */
    if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	4013      	ands	r3, r2
 80024dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <CAN_GetFlagStatus+0xe4>
    { 
      /* CAN_FLAG is set */
      bitstatus = SET;
 80024e8:	f04f 0301 	mov.w	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	e002      	b.n	80024f6 <CAN_GetFlagStatus+0xea>
    }
    else
    { 
      /* CAN_FLAG is reset */
      bitstatus = RESET;
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Return the CAN_FLAG status */
  return  bitstatus;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	f107 0714 	add.w	r7, r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <CAN_ClearFlag>:
  *            @arg CAN_FLAG_SLAK: Sleep acknowledge Flag    
  *            @arg CAN_FLAG_LEC: Last error code Flag        
  * @retval None
  */
void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t flagtmp=0;
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
  
  if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	f04f 0370 	mov.w	r3, #112	; 0x70
 800251a:	f2c3 03f0 	movt	r3, #12528	; 0x30f0
 800251e:	429a      	cmp	r2, r3
 8002520:	d104      	bne.n	800252c <CAN_ClearFlag+0x28>
  {
    /* Clear the selected CAN flags */
    CANx->ESR = (uint32_t)RESET;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	619a      	str	r2, [r3, #24]
 800252a:	e023      	b.n	8002574 <CAN_ClearFlag+0x70>
  }
  else /* MSR or TSR or RF0R or RF1R */
  {
    flagtmp = CAN_FLAG & 0x000FFFFF;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002532:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002536:	60fb      	str	r3, [r7, #12]

    if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <CAN_ClearFlag+0x46>
    {
      /* Receive Flags */
      CANx->RF0R = (uint32_t)(flagtmp);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	60da      	str	r2, [r3, #12]
 8002548:	e014      	b.n	8002574 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <CAN_ClearFlag+0x58>
    {
      /* Receive Flags */
      CANx->RF1R = (uint32_t)(flagtmp);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	611a      	str	r2, [r3, #16]
 800255a:	e00b      	b.n	8002574 <CAN_ClearFlag+0x70>
    }
    else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <CAN_ClearFlag+0x6a>
    {
      /* Transmit Flags */
      CANx->TSR = (uint32_t)(flagtmp);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	e002      	b.n	8002574 <CAN_ClearFlag+0x70>
    }
    else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
    {
      /* Operating mode Flags */
      CANx->MSR = (uint32_t)(flagtmp);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	605a      	str	r2, [r3, #4]
    }
  }
}
 8002574:	f107 0714 	add.w	r7, r7, #20
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop

08002580 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 80c4 	beq.w	8002726 <CAN_GetITStatus+0x1a6>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d06b      	beq.n	800267c <CAN_GetITStatus+0xfc>
 80025a4:	2b40      	cmp	r3, #64	; 0x40
 80025a6:	d80f      	bhi.n	80025c8 <CAN_GetITStatus+0x48>
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d03f      	beq.n	800262c <CAN_GetITStatus+0xac>
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d804      	bhi.n	80025ba <CAN_GetITStatus+0x3a>
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d025      	beq.n	8002600 <CAN_GetITStatus+0x80>
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d02f      	beq.n	8002618 <CAN_GetITStatus+0x98>
 80025b8:	e0b1      	b.n	800271e <CAN_GetITStatus+0x19e>
 80025ba:	2b10      	cmp	r3, #16
 80025bc:	d04a      	beq.n	8002654 <CAN_GetITStatus+0xd4>
 80025be:	2b20      	cmp	r3, #32
 80025c0:	d052      	beq.n	8002668 <CAN_GetITStatus+0xe8>
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d03c      	beq.n	8002640 <CAN_GetITStatus+0xc0>
 80025c6:	e0aa      	b.n	800271e <CAN_GetITStatus+0x19e>
 80025c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025cc:	f000 8092 	beq.w	80026f4 <CAN_GetITStatus+0x174>
 80025d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d4:	d809      	bhi.n	80025ea <CAN_GetITStatus+0x6a>
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025da:	d077      	beq.n	80026cc <CAN_GetITStatus+0x14c>
 80025dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025e0:	d07e      	beq.n	80026e0 <CAN_GetITStatus+0x160>
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d067      	beq.n	80026b8 <CAN_GetITStatus+0x138>
 80025e8:	e099      	b.n	800271e <CAN_GetITStatus+0x19e>
 80025ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ee:	d04f      	beq.n	8002690 <CAN_GetITStatus+0x110>
 80025f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025f4:	d056      	beq.n	80026a4 <CAN_GetITStatus+0x124>
 80025f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fa:	f000 8085 	beq.w	8002708 <CAN_GetITStatus+0x188>
 80025fe:	e08e      	b.n	800271e <CAN_GetITStatus+0x19e>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4618      	mov	r0, r3
 8002606:	f240 1101 	movw	r1, #257	; 0x101
 800260a:	f2c0 0101 	movt	r1, #1
 800260e:	f000 f911 	bl	8002834 <CheckITStatus>
 8002612:	4603      	mov	r3, r0
 8002614:	73fb      	strb	r3, [r7, #15]
        break;
 8002616:	e089      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	f04f 0103 	mov.w	r1, #3
 8002622:	f000 f907 	bl	8002834 <CheckITStatus>
 8002626:	4603      	mov	r3, r0
 8002628:	73fb      	strb	r3, [r7, #15]
        break;
 800262a:	e07f      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	4618      	mov	r0, r3
 8002632:	f04f 0108 	mov.w	r1, #8
 8002636:	f000 f8fd 	bl	8002834 <CheckITStatus>
 800263a:	4603      	mov	r3, r0
 800263c:	73fb      	strb	r3, [r7, #15]
        break;
 800263e:	e075      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4618      	mov	r0, r3
 8002646:	f04f 0110 	mov.w	r1, #16
 800264a:	f000 f8f3 	bl	8002834 <CheckITStatus>
 800264e:	4603      	mov	r3, r0
 8002650:	73fb      	strb	r3, [r7, #15]
        break;
 8002652:	e06b      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	4618      	mov	r0, r3
 800265a:	f04f 0103 	mov.w	r1, #3
 800265e:	f000 f8e9 	bl	8002834 <CheckITStatus>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]
        break;
 8002666:	e061      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	4618      	mov	r0, r3
 800266e:	f04f 0108 	mov.w	r1, #8
 8002672:	f000 f8df 	bl	8002834 <CheckITStatus>
 8002676:	4603      	mov	r3, r0
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e057      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	4618      	mov	r0, r3
 8002682:	f04f 0110 	mov.w	r1, #16
 8002686:	f000 f8d5 	bl	8002834 <CheckITStatus>
 800268a:	4603      	mov	r3, r0
 800268c:	73fb      	strb	r3, [r7, #15]
        break;
 800268e:	e04d      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f04f 0108 	mov.w	r1, #8
 800269a:	f000 f8cb 	bl	8002834 <CheckITStatus>
 800269e:	4603      	mov	r3, r0
 80026a0:	73fb      	strb	r3, [r7, #15]
        break;
 80026a2:	e043      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f04f 0110 	mov.w	r1, #16
 80026ae:	f000 f8c1 	bl	8002834 <CheckITStatus>
 80026b2:	4603      	mov	r3, r0
 80026b4:	73fb      	strb	r3, [r7, #15]
        break;
 80026b6:	e039      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	4618      	mov	r0, r3
 80026be:	f04f 0101 	mov.w	r1, #1
 80026c2:	f000 f8b7 	bl	8002834 <CheckITStatus>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
        break;
 80026ca:	e02f      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f04f 0102 	mov.w	r1, #2
 80026d6:	f000 f8ad 	bl	8002834 <CheckITStatus>
 80026da:	4603      	mov	r3, r0
 80026dc:	73fb      	strb	r3, [r7, #15]
        break;
 80026de:	e025      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f04f 0104 	mov.w	r1, #4
 80026ea:	f000 f8a3 	bl	8002834 <CheckITStatus>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]
        break;
 80026f2:	e01b      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f04f 0170 	mov.w	r1, #112	; 0x70
 80026fe:	f000 f899 	bl	8002834 <CheckITStatus>
 8002702:	4603      	mov	r3, r0
 8002704:	73fb      	strb	r3, [r7, #15]
        break;
 8002706:	e011      	b.n	800272c <CAN_GetITStatus+0x1ac>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	4618      	mov	r0, r3
 800270e:	f04f 0104 	mov.w	r1, #4
 8002712:	f000 f88f 	bl	8002834 <CheckITStatus>
 8002716:	4603      	mov	r3, r0
 8002718:	73fb      	strb	r3, [r7, #15]
        break;
 800271a:	bf00      	nop
 800271c:	e006      	b.n	800272c <CAN_GetITStatus+0x1ac>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	73fb      	strb	r3, [r7, #15]
        break;
 8002724:	e002      	b.n	800272c <CAN_GetITStatus+0x1ac>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 800272c:	7bfb      	ldrb	r3, [r7, #15]
}
 800272e:	4618      	mov	r0, r3
 8002730:	f107 0710 	add.w	r7, r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <CAN_ClearITPendingBit>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt 
  * @retval None
  */
void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_CLEAR_IT(CAN_IT));

  switch (CAN_IT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002748:	d04c      	beq.n	80027e4 <CAN_ClearITPendingBit+0xac>
 800274a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800274e:	d80d      	bhi.n	800276c <CAN_ClearITPendingBit+0x34>
 8002750:	2b08      	cmp	r3, #8
 8002752:	d02e      	beq.n	80027b2 <CAN_ClearITPendingBit+0x7a>
 8002754:	2b08      	cmp	r3, #8
 8002756:	d804      	bhi.n	8002762 <CAN_ClearITPendingBit+0x2a>
 8002758:	2b01      	cmp	r3, #1
 800275a:	d01e      	beq.n	800279a <CAN_ClearITPendingBit+0x62>
 800275c:	2b04      	cmp	r3, #4
 800275e:	d023      	beq.n	80027a8 <CAN_ClearITPendingBit+0x70>
 8002760:	e061      	b.n	8002826 <CAN_ClearITPendingBit+0xee>
 8002762:	2b20      	cmp	r3, #32
 8002764:	d02a      	beq.n	80027bc <CAN_ClearITPendingBit+0x84>
 8002766:	2b40      	cmp	r3, #64	; 0x40
 8002768:	d02d      	beq.n	80027c6 <CAN_ClearITPendingBit+0x8e>
 800276a:	e05c      	b.n	8002826 <CAN_ClearITPendingBit+0xee>
 800276c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002770:	d047      	beq.n	8002802 <CAN_ClearITPendingBit+0xca>
 8002772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002776:	d806      	bhi.n	8002786 <CAN_ClearITPendingBit+0x4e>
 8002778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800277c:	d037      	beq.n	80027ee <CAN_ClearITPendingBit+0xb6>
 800277e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002782:	d039      	beq.n	80027f8 <CAN_ClearITPendingBit+0xc0>
 8002784:	e04f      	b.n	8002826 <CAN_ClearITPendingBit+0xee>
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d021      	beq.n	80027d0 <CAN_ClearITPendingBit+0x98>
 800278c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002790:	d023      	beq.n	80027da <CAN_ClearITPendingBit+0xa2>
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002796:	d03d      	beq.n	8002814 <CAN_ClearITPendingBit+0xdc>
 8002798:	e045      	b.n	8002826 <CAN_ClearITPendingBit+0xee>
  {
    case CAN_IT_TME:
      /* Clear CAN_TSR_RQCPx (rc_w1)*/
      CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	f240 1301 	movw	r3, #257	; 0x101
 80027a0:	f2c0 0301 	movt	r3, #1
 80027a4:	6093      	str	r3, [r2, #8]
      break;
 80027a6:	e03f      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF0:
      /* Clear CAN_RF0R_FULL0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FULL0; 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f04f 0208 	mov.w	r2, #8
 80027ae:	60da      	str	r2, [r3, #12]
      break;
 80027b0:	e03a      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV0:
      /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
      CANx->RF0R = CAN_RF0R_FOVR0; 
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f04f 0210 	mov.w	r2, #16
 80027b8:	60da      	str	r2, [r3, #12]
      break;
 80027ba:	e035      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FF1:
      /* Clear CAN_RF1R_FULL1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FULL1;  
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f04f 0208 	mov.w	r2, #8
 80027c2:	611a      	str	r2, [r3, #16]
      break;
 80027c4:	e030      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_FOV1:
      /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
      CANx->RF1R = CAN_RF1R_FOVR1; 
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f04f 0210 	mov.w	r2, #16
 80027cc:	611a      	str	r2, [r3, #16]
      break;
 80027ce:	e02b      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_WKU:
      /* Clear CAN_MSR_WKUI (rc_w1)*/
      CANx->MSR = CAN_MSR_WKUI;  
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f04f 0208 	mov.w	r2, #8
 80027d6:	605a      	str	r2, [r3, #4]
      break;
 80027d8:	e026      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_SLK:
      /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
      CANx->MSR = CAN_MSR_SLAKI;   
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f04f 0210 	mov.w	r2, #16
 80027e0:	605a      	str	r2, [r3, #4]
      break;
 80027e2:	e021      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EWG:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f04f 0204 	mov.w	r2, #4
 80027ea:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
      break;
 80027ec:	e01c      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_EPV:
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f04f 0204 	mov.w	r2, #4
 80027f4:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
      break;
 80027f6:	e017      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_BOF:
      /* Clear CAN_MSR_ERRI (rc_w1) */ 
      CANx->MSR = CAN_MSR_ERRI; 
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f04f 0204 	mov.w	r2, #4
 80027fe:	605a      	str	r2, [r3, #4]
       /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
       break;
 8002800:	e012      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_LEC:
      /*  Clear LEC bits */
      CANx->ESR = RESET; 
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f04f 0204 	mov.w	r2, #4
 8002810:	605a      	str	r2, [r3, #4]
      break;
 8002812:	e009      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    case CAN_IT_ERR:
      /*Clear LEC bits */
      CANx->ESR = RESET; 
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	619a      	str	r2, [r3, #24]
      /* Clear CAN_MSR_ERRI (rc_w1) */
      CANx->MSR = CAN_MSR_ERRI; 
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f04f 0204 	mov.w	r2, #4
 8002822:	605a      	str	r2, [r3, #4]
       /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
       break;
 8002824:	e000      	b.n	8002828 <CAN_ClearITPendingBit+0xf0>
    default:
       break;
 8002826:	bf00      	nop
   }
}
 8002828:	f107 070c 	add.w	r7, r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop

08002834 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	4013      	ands	r3, r2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <CheckITStatus+0x22>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800284e:	f04f 0301 	mov.w	r3, #1
 8002852:	73fb      	strb	r3, [r7, #15]
 8002854:	e002      	b.n	800285c <CheckITStatus+0x28>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8002856:	f04f 0300 	mov.w	r3, #0
 800285a:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 800285c:	7bfb      	ldrb	r3, [r7, #15]
}
 800285e:	4618      	mov	r0, r3
 8002860:	f107 0714 	add.w	r7, r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop

0800286c <CRC_ResetDR>:
  * @brief  Resets the CRC Data register (DR).
  * @param  None
  * @retval None
  */
void CRC_ResetDR(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  /* Reset CRC generator */
  CRC->CR = CRC_CR_RESET;
 8002870:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002874:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002878:	f04f 0201 	mov.w	r2, #1
 800287c:	609a      	str	r2, [r3, #8]
}
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr

08002884 <CRC_CalcCRC>:
  * @brief  Computes the 32-bit CRC of a given data word(32-bit).
  * @param  Data: data word(32-bit) to compute its CRC
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcCRC(uint32_t Data)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  CRC->DR = Data;
 800288c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002890:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	601a      	str	r2, [r3, #0]
  
  return (CRC->DR);
 8002898:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800289c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028a0:	681b      	ldr	r3, [r3, #0]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	f107 070c 	add.w	r7, r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <CRC_CalcBlockCRC>:
  * @param  pBuffer: pointer to the buffer containing the data to be computed
  * @param  BufferLength: length of the buffer to be computed					
  * @retval 32-bit CRC
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t index = 0;
 80028ba:	f04f 0300 	mov.w	r3, #0
 80028be:	60fb      	str	r3, [r7, #12]
  
  for(index = 0; index < BufferLength; index++)
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	e00e      	b.n	80028e6 <CRC_CalcBlockCRC+0x36>
  {
    CRC->DR = pBuffer[index];
 80028c8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028cc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	188a      	adds	r2, r1, r2
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	601a      	str	r2, [r3, #0]
  */
uint32_t CRC_CalcBlockCRC(uint32_t pBuffer[], uint32_t BufferLength)
{
  uint32_t index = 0;
  
  for(index = 0; index < BufferLength; index++)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f103 0301 	add.w	r3, r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d3ec      	bcc.n	80028c8 <CRC_CalcBlockCRC+0x18>
  {
    CRC->DR = pBuffer[index];
  }
  return (CRC->DR);
 80028ee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80028f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	f107 0714 	add.w	r7, r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr

08002904 <CRC_GetCRC>:
  * @brief  Returns the current CRC value.
  * @param  None
  * @retval 32-bit CRC
  */
uint32_t CRC_GetCRC(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return (CRC->DR);
 8002908:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800290c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002910:	681b      	ldr	r3, [r3, #0]
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop

0800291c <CRC_SetIDRegister>:
  * @brief  Stores a 8-bit data in the Independent Data(ID) register.
  * @param  IDValue: 8-bit value to be stored in the ID register 					
  * @retval None
  */
void CRC_SetIDRegister(uint8_t IDValue)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  CRC->IDR = IDValue;
 8002926:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800292a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800292e:	79fa      	ldrb	r2, [r7, #7]
 8002930:	711a      	strb	r2, [r3, #4]
}
 8002932:	f107 070c 	add.w	r7, r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <CRC_GetIDRegister>:
  * @brief  Returns the 8-bit data stored in the Independent Data(ID) register
  * @param  None
  * @retval 8-bit value of the ID register 
  */
uint8_t CRC_GetIDRegister(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return (CRC->IDR);
 8002940:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002944:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8002948:	791b      	ldrb	r3, [r3, #4]
 800294a:	b2db      	uxtb	r3, r3
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <CRYP_DeInit>:
  * @brief  Deinitializes the CRYP peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void CRYP_DeInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Enable CRYP reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, ENABLE);
 8002958:	f04f 0010 	mov.w	r0, #16
 800295c:	f04f 0101 	mov.w	r1, #1
 8002960:	f007 f89e 	bl	8009aa0 <RCC_AHB2PeriphResetCmd>

  /* Release CRYP from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_CRYP, DISABLE);
 8002964:	f04f 0010 	mov.w	r0, #16
 8002968:	f04f 0100 	mov.w	r1, #0
 800296c:	f007 f898 	bl	8009aa0 <RCC_AHB2PeriphResetCmd>
}
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop

08002974 <CRYP_Init>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure that contains
  *         the configuration information for the CRYP peripheral.
  * @retval None
  */
void CRYP_Init(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  assert_param(IS_CRYP_ALGOMODE(CRYP_InitStruct->CRYP_AlgoMode));
  assert_param(IS_CRYP_DATATYPE(CRYP_InitStruct->CRYP_DataType));
  assert_param(IS_CRYP_ALGODIR(CRYP_InitStruct->CRYP_AlgoDir));

  /* Select Algorithm mode*/  
  CRYP->CR &= ~CRYP_CR_ALGOMODE;
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002984:	f04f 0200 	mov.w	r2, #0
 8002988:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800298c:	6812      	ldr	r2, [r2, #0]
 800298e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8002992:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoMode;
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80029a4:	6811      	ldr	r1, [r2, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	8852      	ldrh	r2, [r2, #2]
 80029aa:	430a      	orrs	r2, r1
 80029ac:	601a      	str	r2, [r3, #0]

  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80029b6:	f04f 0200 	mov.w	r2, #0
 80029ba:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80029c4:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80029ce:	f04f 0200 	mov.w	r2, #0
 80029d2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80029d6:	6811      	ldr	r1, [r2, #0]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	8892      	ldrh	r2, [r2, #4]
 80029dc:	430a      	orrs	r2, r1
 80029de:	601a      	str	r2, [r3, #0]

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	885b      	ldrh	r3, [r3, #2]
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d00b      	beq.n	8002a00 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	885b      	ldrh	r3, [r3, #2]
  /* Select dataType */ 
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
 80029ec:	2b28      	cmp	r3, #40	; 0x28
 80029ee:	d007      	beq.n	8002a00 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR &= ~CRYP_CR_DATATYPE;
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
 80029f4:	2b30      	cmp	r3, #48	; 0x30
 80029f6:	d003      	beq.n	8002a00 <CRYP_Init+0x8c>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	885b      	ldrh	r3, [r3, #2]
  CRYP->CR |= CRYP_InitStruct->CRYP_DataType;

  /* select Key size (used only with AES algorithm) */
  if ((CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_ECB) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CBC) ||
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_CTR) ||
 80029fc:	2b38      	cmp	r3, #56	; 0x38
 80029fe:	d118      	bne.n	8002a32 <CRYP_Init+0xbe>
      (CRYP_InitStruct->CRYP_AlgoMode == CRYP_AlgoMode_AES_Key))
  {
    assert_param(IS_CRYP_KEYSIZE(CRYP_InitStruct->CRYP_KeySize));
    CRYP->CR &= ~CRYP_CR_KEYSIZE;
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a16:	601a      	str	r2, [r3, #0]
    CRYP->CR |= CRYP_InitStruct->CRYP_KeySize; /* Key size and value must be 
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002a28:	6811      	ldr	r1, [r2, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	88d2      	ldrh	r2, [r2, #6]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
                                                  configured once the key has 
                                                  been prepared */
  }

  /* Select data Direction */ 
  CRYP->CR &= ~CRYP_CR_ALGODIR;
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	f022 0204 	bic.w	r2, r2, #4
 8002a48:	601a      	str	r2, [r3, #0]
  CRYP->CR |= CRYP_InitStruct->CRYP_AlgoDir;
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002a52:	f04f 0200 	mov.w	r2, #0
 8002a56:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	8812      	ldrh	r2, [r2, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	601a      	str	r2, [r3, #0]
}
 8002a64:	f107 070c 	add.w	r7, r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop

08002a70 <CRYP_StructInit>:
  * @param  CRYP_InitStruct: pointer to a CRYP_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void CRYP_StructInit(CRYP_InitTypeDef* CRYP_InitStruct)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Initialize the CRYP_AlgoDir member */
  CRYP_InitStruct->CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	801a      	strh	r2, [r3, #0]

  /* initialize the CRYP_AlgoMode member */
  CRYP_InitStruct->CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	805a      	strh	r2, [r3, #2]

  /* initialize the CRYP_DataType member */
  CRYP_InitStruct->CRYP_DataType = CRYP_DataType_32b;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the CRYP_KeySize member */
  CRYP_InitStruct->CRYP_KeySize = CRYP_KeySize_128b;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	80da      	strh	r2, [r3, #6]
}
 8002a98:	f107 070c 	add.w	r7, r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop

08002aa4 <CRYP_KeyInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure that
  *         contains the configuration information for the CRYP Keys.
  * @retval None
  */
void CRYP_KeyInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Key Initialisation */
  CRYP->K0LR = CRYP_KeyInitStruct->CRYP_Key0Left;
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_KeyInitStruct->CRYP_Key0Right;
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6852      	ldr	r2, [r2, #4]
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_KeyInitStruct->CRYP_Key1Left;
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	6892      	ldr	r2, [r2, #8]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_KeyInitStruct->CRYP_Key1Right;
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_KeyInitStruct->CRYP_Key2Left;
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6912      	ldr	r2, [r2, #16]
 8002af0:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_KeyInitStruct->CRYP_Key2Right;
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6952      	ldr	r2, [r2, #20]
 8002afe:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_KeyInitStruct->CRYP_Key3Left;
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6992      	ldr	r2, [r2, #24]
 8002b0c:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_KeyInitStruct->CRYP_Key3Right;
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	69d2      	ldr	r2, [r2, #28]
 8002b1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b1c:	f107 070c 	add.w	r7, r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <CRYP_KeyStructInit>:
  * @param  CRYP_KeyInitStruct: pointer to a CRYP_KeyInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void CRYP_KeyStructInit(CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  CRYP_KeyInitStruct->CRYP_Key0Left  = 0;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]
  CRYP_KeyInitStruct->CRYP_Key0Right = 0;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	605a      	str	r2, [r3, #4]
  CRYP_KeyInitStruct->CRYP_Key1Left  = 0;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	609a      	str	r2, [r3, #8]
  CRYP_KeyInitStruct->CRYP_Key1Right = 0;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	60da      	str	r2, [r3, #12]
  CRYP_KeyInitStruct->CRYP_Key2Left  = 0;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  CRYP_KeyInitStruct->CRYP_Key2Right = 0;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f04f 0200 	mov.w	r2, #0
 8002b5e:	615a      	str	r2, [r3, #20]
  CRYP_KeyInitStruct->CRYP_Key3Left  = 0;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	619a      	str	r2, [r3, #24]
  CRYP_KeyInitStruct->CRYP_Key3Right = 0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	61da      	str	r2, [r3, #28]
}
 8002b70:	f107 070c 	add.w	r7, r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop

08002b7c <CRYP_IVInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef structure that contains
  *         the configuration information for the CRYP Initialization Vectors(IV).
  * @retval None
  */
void CRYP_IVInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  CRYP->IV0LR = CRYP_IVInitStruct->CRYP_IV0Left;
 8002b84:	f04f 0300 	mov.w	r3, #0
 8002b88:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_IVInitStruct->CRYP_IV0Right;
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6852      	ldr	r2, [r2, #4]
 8002b9e:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_IVInitStruct->CRYP_IV1Left;
 8002ba0:	f04f 0300 	mov.w	r3, #0
 8002ba4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	6892      	ldr	r2, [r2, #8]
 8002bac:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_IVInitStruct->CRYP_IV1Right;
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8002bbc:	f107 070c 	add.w	r7, r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop

08002bc8 <CRYP_IVStructInit>:
  * @param  CRYP_IVInitStruct: pointer to a CRYP_IVInitTypeDef Initialization 
  *         Vectors(IV) structure which will be initialized.
  * @retval None
  */
void CRYP_IVStructInit(CRYP_IVInitTypeDef* CRYP_IVInitStruct)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  CRYP_IVInitStruct->CRYP_IV0Left  = 0;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f04f 0200 	mov.w	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
  CRYP_IVInitStruct->CRYP_IV0Right = 0;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	605a      	str	r2, [r3, #4]
  CRYP_IVInitStruct->CRYP_IV1Left  = 0;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  CRYP_IVInitStruct->CRYP_IV1Right = 0;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f04f 0200 	mov.w	r2, #0
 8002bee:	60da      	str	r2, [r3, #12]
}
 8002bf0:	f107 070c 	add.w	r7, r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop

08002bfc <CRYP_FIFOFlush>:
  * @note   The FIFOs must be flushed only when BUSY flag is reset.  
  * @param  None
  * @retval None
  */
void CRYP_FIFOFlush(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  /* Reset the read and write pointers of the FIFOs */
  CRYP->CR |= CRYP_CR_FFLUSH;
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop

08002c20 <CRYP_Cmd>:
  * @param  NewState: new state of the CRYP peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_Cmd(FunctionalState NewState)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00c      	beq.n	8002c4a <CRYP_Cmd+0x2a>
  {
    /* Enable the Cryptographic processor */
    CRYP->CR |= CRYP_CR_CRYPEN;
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e00b      	b.n	8002c62 <CRYP_Cmd+0x42>
  }
  else
  {
    /* Disable the Cryptographic processor */
    CRYP->CR &= ~CRYP_CR_CRYPEN;
 8002c4a:	f04f 0300 	mov.w	r3, #0
 8002c4e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c60:	601a      	str	r2, [r3, #0]
  }
}
 8002c62:	f107 070c 	add.w	r7, r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <CRYP_DataIn>:
  *         the FIFO must be flushed (using CRYP_FIFOFlush() function).  
  * @param  Data: data to write in Data Input register
  * @retval None
  */
void CRYP_DataIn(uint32_t Data)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  CRYP->DR = Data;
 8002c74:	f04f 0300 	mov.w	r3, #0
 8002c78:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	f107 070c 	add.w	r7, r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bc80      	pop	{r7}
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop

08002c8c <CRYP_DataOut>:
  * @brief  Returns the last data entered into the output FIFO.
  * @param  None
  * @retval Last data entered into the output FIFO.
  */
uint32_t CRYP_DataOut(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return CRYP->DOUT;
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002c98:	68db      	ldr	r3, [r3, #12]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop

08002ca4 <CRYP_SaveContext>:
  *         contains the configuration information for the CRYP Keys.  
  * @retval None
  */
ErrorStatus CRYP_SaveContext(CRYP_Context* CRYP_ContextSave,
                             CRYP_KeyInitTypeDef* CRYP_KeyInitStruct)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  __IO uint32_t timeout = 0;
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	60bb      	str	r3, [r7, #8]
  uint32_t ckeckmask = 0, bitstatus;    
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  ErrorStatus status = ERROR;
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	74fb      	strb	r3, [r7, #19]

  /* Stop DMA transfers on the IN FIFO by clearing the DIEN bit in the CRYP_DMACR */
  CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DIEN;
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002cd0:	6912      	ldr	r2, [r2, #16]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	611a      	str	r2, [r3, #16]
    
  /* Wait until both the IN and OUT FIFOs are empty  
    (IFEM=1 and OFNE=0 in the CRYP_SR register) and the 
     BUSY bit is cleared. */

  if ((CRYP->CR & (uint32_t)(CRYP_CR_ALGOMODE_TDES_ECB | CRYP_CR_ALGOMODE_TDES_CBC)) != (uint32_t)0 )/* TDES */
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <CRYP_SaveContext+0x4e>
  { 
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY ;
 8002cea:	f04f 0311 	mov.w	r3, #17
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	e002      	b.n	8002cf8 <CRYP_SaveContext+0x54>
  }
  else /* AES or DES */
  {
    ckeckmask =  CRYP_SR_IFEM | CRYP_SR_BUSY | CRYP_SR_OFNE;
 8002cf2:	f04f 0315 	mov.w	r3, #21
 8002cf6:	617b      	str	r3, [r7, #20]
  }           
   
  do 
  {
    bitstatus = CRYP->SR & ckeckmask;
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
    timeout++;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f103 0301 	add.w	r3, r3, #1
 8002d0e:	60bb      	str	r3, [r7, #8]
  }
  while ((timeout != MAX_TIMEOUT) && (bitstatus != CRYP_SR_IFEM));
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d002      	beq.n	8002d20 <CRYP_SaveContext+0x7c>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d1eb      	bne.n	8002cf8 <CRYP_SaveContext+0x54>
     
  if ((CRYP->SR & ckeckmask) != CRYP_SR_IFEM)
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d28:	685a      	ldr	r2, [r3, #4]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d003      	beq.n	8002d3a <CRYP_SaveContext+0x96>
  {
    status = ERROR;
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	74fb      	strb	r3, [r7, #19]
 8002d38:	e05f      	b.n	8002dfa <CRYP_SaveContext+0x156>
  {      
    /* Stop DMA transfers on the OUT FIFO by 
       - writing the DOEN bit to 0 in the CRYP_DMACR register 
       - and clear the CRYPEN bit. */

    CRYP->DMACR &= ~(uint32_t)CRYP_DMACR_DOEN;
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002d4a:	6912      	ldr	r2, [r2, #16]
 8002d4c:	f022 0202 	bic.w	r2, r2, #2
 8002d50:	611a      	str	r2, [r3, #16]
    CRYP->CR &= ~(uint32_t)CRYP_CR_CRYPEN;
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d68:	601a      	str	r2, [r3, #0]

    /* Save the current configuration (bits [9:2] in the CRYP_CR register) */
    CRYP_ContextSave->CR_bits9to2  = CRYP->CR & (CRYP_CR_KEYSIZE  | 
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 727f 	and.w	r2, r3, #1020	; 0x3fc
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	601a      	str	r2, [r3, #0]
                                                 CRYP_CR_DATATYPE | 
                                                 CRYP_CR_ALGOMODE |
                                                 CRYP_CR_ALGODIR); 

    /* and, if not in ECB mode, the initialization vectors. */
    CRYP_ContextSave->CRYP_IV0LR = CRYP->IV0LR;
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	605a      	str	r2, [r3, #4]
    CRYP_ContextSave->CRYP_IV0RR = CRYP->IV0RR;
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002d92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	609a      	str	r2, [r3, #8]
    CRYP_ContextSave->CRYP_IV1LR = CRYP->IV1LR;
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002da0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	60da      	str	r2, [r3, #12]
    CRYP_ContextSave->CRYP_IV1RR = CRYP->IV1RR;
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002dae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	611a      	str	r2, [r3, #16]

    /* save The key value */
    CRYP_ContextSave->CRYP_K0LR = CRYP_KeyInitStruct->CRYP_Key0Left; 
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	615a      	str	r2, [r3, #20]
    CRYP_ContextSave->CRYP_K0RR = CRYP_KeyInitStruct->CRYP_Key0Right; 
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
    CRYP_ContextSave->CRYP_K1LR = CRYP_KeyInitStruct->CRYP_Key1Left; 
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	61da      	str	r2, [r3, #28]
    CRYP_ContextSave->CRYP_K1RR = CRYP_KeyInitStruct->CRYP_Key1Right; 
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	621a      	str	r2, [r3, #32]
    CRYP_ContextSave->CRYP_K2LR = CRYP_KeyInitStruct->CRYP_Key2Left; 
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	691a      	ldr	r2, [r3, #16]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	625a      	str	r2, [r3, #36]	; 0x24
    CRYP_ContextSave->CRYP_K2RR = CRYP_KeyInitStruct->CRYP_Key2Right; 
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	629a      	str	r2, [r3, #40]	; 0x28
    CRYP_ContextSave->CRYP_K3LR = CRYP_KeyInitStruct->CRYP_Key3Left; 
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	62da      	str	r2, [r3, #44]	; 0x2c
    CRYP_ContextSave->CRYP_K3RR = CRYP_KeyInitStruct->CRYP_Key3Right; 
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30

   /* When needed, save the DMA status (pointers for IN and OUT messages, 
      number of remaining bytes, etc.) */
     
    status = SUCCESS;
 8002df4:	f04f 0301 	mov.w	r3, #1
 8002df8:	74fb      	strb	r3, [r7, #19]
  }

   return status;
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f107 071c 	add.w	r7, r7, #28
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr

08002e08 <CRYP_RestoreContext>:
  * @note   The data that were saved during context saving must be rewrited into
  *         the IN FIFO.
  * @retval None
  */
void CRYP_RestoreContext(CRYP_Context* CRYP_ContextRestore)  
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]

  /* Configure the processor with the saved configuration */
  CRYP->CR = CRYP_ContextRestore->CR_bits9to2;
 8002e10:	f04f 0300 	mov.w	r3, #0
 8002e14:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	601a      	str	r2, [r3, #0]

  /* restore The key value */
  CRYP->K0LR = CRYP_ContextRestore->CRYP_K0LR; 
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6952      	ldr	r2, [r2, #20]
 8002e2a:	621a      	str	r2, [r3, #32]
  CRYP->K0RR = CRYP_ContextRestore->CRYP_K0RR;
 8002e2c:	f04f 0300 	mov.w	r3, #0
 8002e30:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	6992      	ldr	r2, [r2, #24]
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24
  CRYP->K1LR = CRYP_ContextRestore->CRYP_K1LR;
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	69d2      	ldr	r2, [r2, #28]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28
  CRYP->K1RR = CRYP_ContextRestore->CRYP_K1RR;
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	6a12      	ldr	r2, [r2, #32]
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
  CRYP->K2LR = CRYP_ContextRestore->CRYP_K2LR;
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e62:	631a      	str	r2, [r3, #48]	; 0x30
  CRYP->K2RR = CRYP_ContextRestore->CRYP_K2RR;
 8002e64:	f04f 0300 	mov.w	r3, #0
 8002e68:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002e70:	635a      	str	r2, [r3, #52]	; 0x34
  CRYP->K3LR = CRYP_ContextRestore->CRYP_K3LR;
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e7e:	639a      	str	r2, [r3, #56]	; 0x38
  CRYP->K3RR = CRYP_ContextRestore->CRYP_K3RR;
 8002e80:	f04f 0300 	mov.w	r3, #0
 8002e84:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* and the initialization vectors. */
  CRYP->IV0LR = CRYP_ContextRestore->CRYP_IV0LR;
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6852      	ldr	r2, [r2, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	; 0x40
  CRYP->IV0RR = CRYP_ContextRestore->CRYP_IV0RR;
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6892      	ldr	r2, [r2, #8]
 8002ea8:	645a      	str	r2, [r3, #68]	; 0x44
  CRYP->IV1LR = CRYP_ContextRestore->CRYP_IV1LR;
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	68d2      	ldr	r2, [r2, #12]
 8002eb6:	649a      	str	r2, [r3, #72]	; 0x48
  CRYP->IV1RR = CRYP_ContextRestore->CRYP_IV1RR;
 8002eb8:	f04f 0300 	mov.w	r3, #0
 8002ebc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6912      	ldr	r2, [r2, #16]
 8002ec4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the cryptographic processor */
  CRYP->CR |= CRYP_CR_CRYPEN;
 8002ec6:	f04f 0300 	mov.w	r3, #0
 8002eca:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002edc:	601a      	str	r2, [r3, #0]
}
 8002ede:	f107 070c 	add.w	r7, r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <CRYP_DMACmd>:
  * @param  NewState: new state of the selected CRYP DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_DMACmd(uint8_t CRYP_DMAReq, FunctionalState NewState)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	71fa      	strb	r2, [r7, #7]
 8002ef4:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_DMAREQ(CRYP_DMAReq));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ef6:	79bb      	ldrb	r3, [r7, #6]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00c      	beq.n	8002f16 <CRYP_DMACmd+0x2e>
  {
    /* Enable the selected CRYP DMA request */
    CRYP->DMACR |= CRYP_DMAReq;
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002f0c:	6911      	ldr	r1, [r2, #16]
 8002f0e:	79fa      	ldrb	r2, [r7, #7]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	611a      	str	r2, [r3, #16]
 8002f14:	e00e      	b.n	8002f34 <CRYP_DMACmd+0x4c>
  }
  else
  {
    /* Disable the selected CRYP DMA request */
    CRYP->DMACR &= (uint8_t)~CRYP_DMAReq;
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002f1e:	f04f 0200 	mov.w	r2, #0
 8002f22:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002f26:	6911      	ldr	r1, [r2, #16]
 8002f28:	79fa      	ldrb	r2, [r7, #7]
 8002f2a:	ea6f 0202 	mvn.w	r2, r2
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	400a      	ands	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]
  }
}
 8002f34:	f107 070c 	add.w	r7, r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop

08002f40 <CRYP_ITConfig>:
  * @param  NewState: new state of the specified CRYP interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void CRYP_ITConfig(uint8_t CRYP_IT, FunctionalState NewState)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	71fa      	strb	r2, [r7, #7]
 8002f4c:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_CRYP_CONFIG_IT(CRYP_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002f4e:	79bb      	ldrb	r3, [r7, #6]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00c      	beq.n	8002f6e <CRYP_ITConfig+0x2e>
  {
    /* Enable the selected CRYP interrupt */
    CRYP->IMSCR |= CRYP_IT;
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002f64:	6951      	ldr	r1, [r2, #20]
 8002f66:	79fa      	ldrb	r2, [r7, #7]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	615a      	str	r2, [r3, #20]
 8002f6c:	e00e      	b.n	8002f8c <CRYP_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected CRYP interrupt */
    CRYP->IMSCR &= (uint8_t)~CRYP_IT;
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8002f7e:	6951      	ldr	r1, [r2, #20]
 8002f80:	79fa      	ldrb	r2, [r7, #7]
 8002f82:	ea6f 0202 	mvn.w	r2, r2
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	400a      	ands	r2, r1
 8002f8a:	615a      	str	r2, [r3, #20]
  }
}
 8002f8c:	f107 070c 	add.w	r7, r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop

08002f98 <CRYP_GetITStatus>:
  *            @arg CRYP_IT_INI: Input FIFO interrupt
  *            @arg CRYP_IT_OUTI: Output FIFO interrupt
  * @retval The new state of CRYP_IT (SET or RESET).
  */
ITStatus CRYP_GetITStatus(uint8_t CRYP_IT)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CRYP_GET_IT(CRYP_IT));

  /* Check the status of the specified CRYP interrupt */
  if ((CRYP->MISR &  CRYP_IT) != (uint8_t)RESET)
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <CRYP_GetITStatus+0x2a>
  {
    /* CRYP_IT is set */
    bitstatus = SET;
 8002fba:	f04f 0301 	mov.w	r3, #1
 8002fbe:	73fb      	strb	r3, [r7, #15]
 8002fc0:	e002      	b.n	8002fc8 <CRYP_GetITStatus+0x30>
  }
  else
  {
    /* CRYP_IT is reset */
    bitstatus = RESET;
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CRYP_IT status */
  return bitstatus;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f107 0714 	add.w	r7, r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bc80      	pop	{r7}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <CRYP_GetFlagStatus>:
  *            @arg CRYP_FLAG_OUTRIS: Output FIFO raw interrupt flag.
  *            @arg CRYP_FLAG_INRIS: Input FIFO raw interrupt flag.
  * @retval The new state of CRYP_FLAG (SET or RESET).
  */
FlagStatus CRYP_GetFlagStatus(uint8_t CRYP_FLAG)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8002fe2:	f04f 0300 	mov.w	r3, #0
 8002fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_CRYP_GET_FLAG(CRYP_FLAG));

  /* check if the FLAG is in RISR register */
  if ((CRYP_FLAG & FLAG_MASK) != 0x00) 
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d006      	beq.n	8003006 <CRYP_GetFlagStatus+0x2e>
  {
    tempreg = CRYP->RISR;
 8002ff8:	f04f 0300 	mov.w	r3, #0
 8002ffc:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	60bb      	str	r3, [r7, #8]
 8003004:	e005      	b.n	8003012 <CRYP_GetFlagStatus+0x3a>
  }
  else  /* The FLAG is in SR register */
  {
    tempreg = CRYP->SR;
 8003006:	f04f 0300 	mov.w	r3, #0
 800300a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	60bb      	str	r3, [r7, #8]
  }


  /* Check the status of the specified CRYP flag */
  if ((tempreg & CRYP_FLAG ) != (uint8_t)RESET)
 8003012:	79fa      	ldrb	r2, [r7, #7]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <CRYP_GetFlagStatus+0x4c>
  {
    /* CRYP_FLAG is set */
    bitstatus = SET;
 800301c:	f04f 0301 	mov.w	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
 8003022:	e002      	b.n	800302a <CRYP_GetFlagStatus+0x52>
  }
  else
  {
    /* CRYP_FLAG is reset */
    bitstatus = RESET;
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the CRYP_FLAG status */
  return  bitstatus;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	f107 0714 	add.w	r7, r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr

08003038 <CRYP_AES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_ECB(uint8_t Mode, uint8_t* Key, uint16_t Keysize,
                         uint8_t* Input, uint32_t Ilength, uint8_t* Output)
{
 8003038:	b590      	push	{r4, r7, lr}
 800303a:	b0bb      	sub	sp, #236	; 0xec
 800303c:	af00      	add	r7, sp, #0
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	4603      	mov	r3, r0
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	4613      	mov	r3, r2
 8003048:	81bb      	strh	r3, [r7, #12]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 800304a:	f04f 0300 	mov.w	r3, #0
 800304e:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  ErrorStatus status = SUCCESS;
 8003058:	f04f 0301 	mov.w	r3, #1
 800305c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
  uint32_t keyaddr    = (uint32_t)Key;
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  uint32_t inputaddr  = (uint32_t)Input;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t outputaddr = (uint32_t)Output;
 800306c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003070:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t i = 0;
 8003074:	f04f 0300 	mov.w	r3, #0
 8003078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fd51 	bl	8002b28 <CRYP_KeyStructInit>

  switch(Keysize)
 8003086:	89bb      	ldrh	r3, [r7, #12]
 8003088:	2bc0      	cmp	r3, #192	; 0xc0
 800308a:	d050      	beq.n	800312e <CRYP_AES_ECB+0xf6>
 800308c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003090:	f000 80bd 	beq.w	800320e <CRYP_AES_ECB+0x1d6>
 8003094:	2b80      	cmp	r3, #128	; 0x80
 8003096:	f040 8130 	bne.w	80032fa <CRYP_AES_ECB+0x2c2>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80030a0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030ae:	ba1c      	rev	r4, r3
 80030b0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
  return(result);
 80030b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b8:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 80030ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030be:	f103 0304 	add.w	r3, r3, #4
 80030c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80030c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80030d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d4:	ba1c      	rev	r4, r3
 80030d6:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
  return(result);
 80030da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80030e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030e4:	f103 0304 	add.w	r3, r3, #4
 80030e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80030ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030fa:	ba1c      	rev	r4, r3
 80030fc:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
  return(result);
 8003100:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003104:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003106:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800310a:	f103 0304 	add.w	r3, r3, #4
 800310e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003112:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003120:	ba1c      	rev	r4, r3
 8003122:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
  return(result);
 8003126:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800312a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800312c:	e0e6      	b.n	80032fc <CRYP_AES_ECB+0x2c4>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800312e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003132:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003134:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003142:	ba1c      	rev	r4, r3
 8003144:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
  return(result);
 8003148:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800314c:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 800314e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003152:	f103 0304 	add.w	r3, r3, #4
 8003156:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800315a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003168:	ba1c      	rev	r4, r3
 800316a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
  return(result);
 800316e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003178:	f103 0304 	add.w	r3, r3, #4
 800317c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003180:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800318a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800318e:	ba1c      	rev	r4, r3
 8003190:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
  return(result);
 8003194:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800319a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800319e:	f103 0304 	add.w	r3, r3, #4
 80031a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80031a6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80031b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80031b4:	ba1c      	rev	r4, r3
 80031b6:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
  return(result);
 80031ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80031c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031c4:	f103 0304 	add.w	r3, r3, #4
 80031c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80031cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031da:	ba1c      	rev	r4, r3
 80031dc:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
  return(result);
 80031e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031e4:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80031e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031ea:	f103 0304 	add.w	r3, r3, #4
 80031ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80031f2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003200:	ba1c      	rev	r4, r3
 8003202:	f8c7 4080 	str.w	r4, [r7, #128]	; 0x80
  return(result);
 8003206:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 800320c:	e076      	b.n	80032fc <CRYP_AES_ECB+0x2c4>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 800320e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003212:	87fb      	strh	r3, [r7, #62]	; 0x3e
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8003214:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	67fb      	str	r3, [r7, #124]	; 0x7c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800321e:	ba1c      	rev	r4, r3
 8003220:	67bc      	str	r4, [r7, #120]	; 0x78
  return(result);
 8003222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003224:	61bb      	str	r3, [r7, #24]
    keyaddr+=4;
 8003226:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800322a:	f103 0304 	add.w	r3, r3, #4
 800322e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8003232:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	677b      	str	r3, [r7, #116]	; 0x74
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800323a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800323c:	ba1c      	rev	r4, r3
 800323e:	673c      	str	r4, [r7, #112]	; 0x70
  return(result);
 8003240:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003242:	61fb      	str	r3, [r7, #28]
    keyaddr+=4;
 8003244:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003248:	f103 0304 	add.w	r3, r3, #4
 800324c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003250:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325a:	ba1c      	rev	r4, r3
 800325c:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 800325e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003260:	623b      	str	r3, [r7, #32]
    keyaddr+=4;
 8003262:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003266:	f103 0304 	add.w	r3, r3, #4
 800326a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800326e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003278:	ba1c      	rev	r4, r3
 800327a:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800327c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003280:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003284:	f103 0304 	add.w	r3, r3, #4
 8003288:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800328c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003296:	ba1c      	rev	r4, r3
 8003298:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 800329a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800329c:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 800329e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032a2:	f103 0304 	add.w	r3, r3, #4
 80032a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80032aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	ba1c      	rev	r4, r3
 80032b6:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80032b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 80032bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032c0:	f103 0304 	add.w	r3, r3, #4
 80032c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80032c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032d2:	ba1c      	rev	r4, r3
 80032d4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80032d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032d8:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 80032da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032de:	f103 0304 	add.w	r3, r3, #4
 80032e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80032e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f0:	ba1c      	rev	r4, r3
 80032f2:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80032f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f6:	637b      	str	r3, [r7, #52]	; 0x34
    break;
 80032f8:	e000      	b.n	80032fc <CRYP_AES_ECB+0x2c4>
    default:
    break;
 80032fa:	bf00      	nop
  }

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d138      	bne.n	8003374 <CRYP_AES_ECB+0x33c>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 8003302:	f7ff fc7b 	bl	8002bfc <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003306:	f04f 0304 	mov.w	r3, #4
 800330a:	873b      	strh	r3, [r7, #56]	; 0x38
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 800330c:	f04f 0338 	mov.w	r3, #56	; 0x38
 8003310:	877b      	strh	r3, [r7, #58]	; 0x3a
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	87bb      	strh	r3, [r7, #60]	; 0x3c
    CRYP_Init(&AES_CRYP_InitStructure);
 8003318:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fb29 	bl	8002974 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003322:	f107 0318 	add.w	r3, r7, #24
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fbbc 	bl	8002aa4 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 800332c:	f04f 0001 	mov.w	r0, #1
 8003330:	f7ff fc76 	bl	8002c20 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003334:	f04f 0010 	mov.w	r0, #16
 8003338:	f7ff fe4e 	bl	8002fd8 <CRYP_GetFlagStatus>
 800333c:	4603      	mov	r3, r0
 800333e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f103 0301 	add.w	r3, r3, #1
 8003348:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d003      	beq.n	800335a <CRYP_AES_ECB+0x322>
 8003352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1ec      	bne.n	8003334 <CRYP_AES_ECB+0x2fc>

    if (busystatus != RESET)
 800335a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <CRYP_AES_ECB+0x334>
   {
       status = ERROR;
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800336a:	e00b      	b.n	8003384 <CRYP_AES_ECB+0x34c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 800336c:	f04f 0304 	mov.w	r3, #4
 8003370:	873b      	strh	r3, [r7, #56]	; 0x38
 8003372:	e007      	b.n	8003384 <CRYP_AES_ECB+0x34c>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {

    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003374:	f107 0318 	add.w	r3, r7, #24
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff fb93 	bl	8002aa4 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_ECB;
 8003384:	f04f 0320 	mov.w	r3, #32
 8003388:	877b      	strh	r3, [r7, #58]	; 0x3a
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800338a:	f04f 0380 	mov.w	r3, #128	; 0x80
 800338e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&AES_CRYP_InitStructure);
 8003390:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff faed 	bl	8002974 <CRYP_Init>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 800339a:	f7ff fc2f 	bl	8002bfc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800339e:	f04f 0001 	mov.w	r0, #1
 80033a2:	f7ff fc3d 	bl	8002c20 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80033ae:	e084      	b.n	80034ba <CRYP_AES_ECB+0x482>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80033b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f7ff fc58 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80033bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033c0:	f103 0304 	add.w	r3, r3, #4
 80033c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80033c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fc4c 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80033d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d8:	f103 0304 	add.w	r3, r3, #4
 80033dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80033e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7ff fc40 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80033ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033f0:	f103 0304 	add.w	r3, r3, #4
 80033f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fc34 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8003404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003408:	f103 0304 	add.w	r3, r3, #4
 800340c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Wait until the complete message has been processed */
    counter = 0;
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003416:	f04f 0010 	mov.w	r0, #16
 800341a:	f7ff fddd 	bl	8002fd8 <CRYP_GetFlagStatus>
 800341e:	4603      	mov	r3, r0
 8003420:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      counter++;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f103 0301 	add.w	r3, r3, #1
 800342a:	617b      	str	r3, [r7, #20]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003432:	d003      	beq.n	800343c <CRYP_AES_ECB+0x404>
 8003434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1ec      	bne.n	8003416 <CRYP_AES_ECB+0x3de>

    if (busystatus != RESET)
 800343c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d004      	beq.n	800344e <CRYP_AES_ECB+0x416>
   {
       status = ERROR;
 8003444:	f04f 0300 	mov.w	r3, #0
 8003448:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800344c:	e02f      	b.n	80034ae <CRYP_AES_ECB+0x476>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800344e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8003452:	f7ff fc1b 	bl	8002c8c <CRYP_DataOut>
 8003456:	4603      	mov	r3, r0
 8003458:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800345a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800345e:	f103 0304 	add.w	r3, r3, #4
 8003462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003466:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800346a:	f7ff fc0f 	bl	8002c8c <CRYP_DataOut>
 800346e:	4603      	mov	r3, r0
 8003470:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003476:	f103 0304 	add.w	r3, r3, #4
 800347a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 800347e:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 8003482:	f7ff fc03 	bl	8002c8c <CRYP_DataOut>
 8003486:	4603      	mov	r3, r0
 8003488:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800348a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800348e:	f103 0304 	add.w	r3, r3, #4
 8003492:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
      *(uint32_t*)(outputaddr) = CRYP_DataOut(); 
 8003496:	f8d7 40dc 	ldr.w	r4, [r7, #220]	; 0xdc
 800349a:	f7ff fbf7 	bl	8002c8c <CRYP_DataOut>
 800349e:	4603      	mov	r3, r0
 80034a0:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80034a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034a6:	f103 0304 	add.w	r3, r3, #4
 80034aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 80034ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034b2:	f103 0310 	add.w	r3, r3, #16
 80034b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034ba:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80034be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d204      	bcs.n	80034d0 <CRYP_AES_ECB+0x498>
 80034c6:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f47f af70 	bne.w	80033b0 <CRYP_AES_ECB+0x378>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80034d0:	f04f 0000 	mov.w	r0, #0
 80034d4:	f7ff fba4 	bl	8002c20 <CRYP_Cmd>

  return status; 
 80034d8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
}
 80034dc:	4618      	mov	r0, r3
 80034de:	f107 07ec 	add.w	r7, r7, #236	; 0xec
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd90      	pop	{r4, r7, pc}
 80034e6:	bf00      	nop

080034e8 <CRYP_AES_CBC>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CBC(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key,
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b0c7      	sub	sp, #284	; 0x11c
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	f107 0408 	add.w	r4, r7, #8
 80034f2:	6021      	str	r1, [r4, #0]
 80034f4:	f107 0104 	add.w	r1, r7, #4
 80034f8:	600a      	str	r2, [r1, #0]
 80034fa:	461a      	mov	r2, r3
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	f103 33ff 	add.w	r3, r3, #4294967295
 8003504:	4601      	mov	r1, r0
 8003506:	7019      	strb	r1, [r3, #0]
 8003508:	f107 030c 	add.w	r3, r7, #12
 800350c:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 800350e:	f04f 0200 	mov.w	r2, #0
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8003520:	f04f 0301 	mov.w	r3, #1
 8003524:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8003528:	f107 0304 	add.w	r3, r7, #4
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8003532:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003536:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 800353a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800353e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8003542:	f107 0308 	add.w	r3, r7, #8
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8003554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fae5 	bl	8002b28 <CRYP_KeyStructInit>

  switch(Keysize)
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	2bc0      	cmp	r3, #192	; 0xc0
 8003566:	d051      	beq.n	800360c <CRYP_AES_CBC+0x124>
 8003568:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356c:	f000 80bf 	beq.w	80036ee <CRYP_AES_CBC+0x206>
 8003570:	2b80      	cmp	r3, #128	; 0x80
 8003572:	f040 8149 	bne.w	8003808 <CRYP_AES_CBC+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800357e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003588:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800358c:	ba1c      	rev	r4, r3
 800358e:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8003592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003596:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003598:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800359c:	f103 0304 	add.w	r3, r3, #4
 80035a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80035a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035b2:	ba1c      	rev	r4, r3
 80035b4:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 80035b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80035bc:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80035be:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035c2:	f103 0304 	add.w	r3, r3, #4
 80035c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80035ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035d8:	ba1c      	rev	r4, r3
 80035da:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 80035de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80035e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035e8:	f103 0304 	add.w	r3, r3, #4
 80035ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80035f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80035fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035fe:	ba1c      	rev	r4, r3
 8003600:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8003604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003608:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 800360a:	e0fe      	b.n	800380a <CRYP_AES_CBC+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 800360c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003610:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003614:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003622:	ba1c      	rev	r4, r3
 8003624:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8003628:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800362c:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800362e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003632:	f103 0304 	add.w	r3, r3, #4
 8003636:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800363a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003644:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003648:	ba1c      	rev	r4, r3
 800364a:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 800364e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003652:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003654:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003658:	f103 0304 	add.w	r3, r3, #4
 800365c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003660:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800366e:	ba1c      	rev	r4, r3
 8003670:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8003674:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003678:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 800367a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800367e:	f103 0304 	add.w	r3, r3, #4
 8003682:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003686:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003690:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003694:	ba1c      	rev	r4, r3
 8003696:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 800369a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80036a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036a4:	f103 0304 	add.w	r3, r3, #4
 80036a8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80036ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80036b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036ba:	ba1c      	rev	r4, r3
 80036bc:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 80036c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80036c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036ca:	f103 0304 	add.w	r3, r3, #4
 80036ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80036d2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036e0:	ba1c      	rev	r4, r3
 80036e2:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 80036e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ea:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 80036ec:	e08d      	b.n	800380a <CRYP_AES_CBC+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 80036ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 80036f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003700:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003704:	ba1c      	rev	r4, r3
 8003706:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 800370a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003710:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003714:	f103 0304 	add.w	r3, r3, #4
 8003718:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 800371c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800372a:	ba1c      	rev	r4, r3
 800372c:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8003730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003734:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003736:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800373a:	f103 0304 	add.w	r3, r3, #4
 800373e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003742:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003750:	ba1c      	rev	r4, r3
 8003752:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8003756:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800375a:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 800375c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003760:	f103 0304 	add.w	r3, r3, #4
 8003764:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003768:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003776:	ba1c      	rev	r4, r3
 8003778:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 800377c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003780:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003782:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003786:	f103 0304 	add.w	r3, r3, #4
 800378a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 800378e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800379c:	ba1c      	rev	r4, r3
 800379e:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 80037a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a6:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 80037a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037ac:	f103 0304 	add.w	r3, r3, #4
 80037b0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80037b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80037be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037c2:	ba1c      	rev	r4, r3
 80037c4:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 80037c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037c8:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 80037ca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037ce:	f103 0304 	add.w	r3, r3, #4
 80037d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80037d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e0:	ba1c      	rev	r4, r3
 80037e2:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80037e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 80037e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037ec:	f103 0304 	add.w	r3, r3, #4
 80037f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80037f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037fe:	ba1c      	rev	r4, r3
 8003800:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8003802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003804:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8003806:	e000      	b.n	800380a <CRYP_AES_CBC+0x322>
    default:
    break;
 8003808:	bf00      	nop
  }

  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003814:	ba1c      	rev	r4, r3
 8003816:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8003818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800381a:	461a      	mov	r2, r3
 800381c:	f107 0314 	add.w	r3, r7, #20
 8003820:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8003822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003826:	f103 0304 	add.w	r3, r3, #4
 800382a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 800382e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003838:	ba1c      	rev	r4, r3
 800383a:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800383c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800383e:	461a      	mov	r2, r3
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8003846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384a:	f103 0304 	add.w	r3, r3, #4
 800384e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8003852:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800385a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800385c:	ba1c      	rev	r4, r3
 800385e:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	461a      	mov	r2, r3
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 800386a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800386e:	f103 0304 	add.w	r3, r3, #4
 8003872:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8003876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800387e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003880:	ba1c      	rev	r4, r3
 8003882:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	461a      	mov	r2, r3
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	60da      	str	r2, [r3, #12]


  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 800388e:	f107 0310 	add.w	r3, r7, #16
 8003892:	f103 33ff 	add.w	r3, r3, #4294967295
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d142      	bne.n	8003922 <CRYP_AES_CBC+0x43a>
  {
    /* Flush IN/OUT FIFOs */
    CRYP_FIFOFlush();
 800389c:	f7ff f9ae 	bl	8002bfc <CRYP_FIFOFlush>

    /* Crypto Init for Key preparation for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 80038a0:	f04f 0304 	mov.w	r3, #4
 80038a4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_Key;
 80038a8:	f04f 0338 	mov.w	r3, #56	; 0x38
 80038ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_32b;
 80038b0:	f04f 0300 	mov.w	r3, #0
 80038b4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

    CRYP_Init(&AES_CRYP_InitStructure);
 80038b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff f859 	bl	8002974 <CRYP_Init>

    /* Key Initialisation */
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 80038c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7ff f8ec 	bl	8002aa4 <CRYP_KeyInit>

    /* Enable Crypto processor */
    CRYP_Cmd(ENABLE);
 80038cc:	f04f 0001 	mov.w	r0, #1
 80038d0:	f7ff f9a6 	bl	8002c20 <CRYP_Cmd>

    /* wait until the Busy flag is RESET */
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80038d4:	f04f 0010 	mov.w	r0, #16
 80038d8:	f7ff fb7e 	bl	8002fd8 <CRYP_GetFlagStatus>
 80038dc:	4603      	mov	r3, r0
 80038de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 80038e2:	f107 0310 	add.w	r3, r7, #16
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f103 0201 	add.w	r2, r3, #1
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80038f2:	f107 0310 	add.w	r3, r7, #16
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038fc:	d003      	beq.n	8003906 <CRYP_AES_CBC+0x41e>
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1e6      	bne.n	80038d4 <CRYP_AES_CBC+0x3ec>

    if (busystatus != RESET)
 8003906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <CRYP_AES_CBC+0x430>
   {
       status = ERROR;
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003916:	e00d      	b.n	8003934 <CRYP_AES_CBC+0x44c>
    }
    else
    {
      /* Crypto Init for decryption process */  
      AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003918:	f04f 0304 	mov.w	r3, #4
 800391c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003920:	e008      	b.n	8003934 <CRYP_AES_CBC+0x44c>
    }
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff f8bc 	bl	8002aa4 <CRYP_KeyInit>

    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CBC;
 8003934:	f04f 0328 	mov.w	r3, #40	; 0x28
 8003938:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800393c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003940:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8003944:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f813 	bl	8002974 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff f912 	bl	8002b7c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8003958:	f7ff f950 	bl	8002bfc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 800395c:	f04f 0001 	mov.w	r0, #1
 8003960:	f7ff f95e 	bl	8002c20 <CRYP_Cmd>


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003964:	f04f 0300 	mov.w	r3, #0
 8003968:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800396c:	e08c      	b.n	8003a88 <CRYP_AES_CBC+0x5a0>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800396e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff f979 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 800397a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800397e:	f103 0304 	add.w	r3, r3, #4
 8003982:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003986:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff f96d 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8003992:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003996:	f103 0304 	add.w	r3, r3, #4
 800399a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800399e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff f961 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80039aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039ae:	f103 0304 	add.w	r3, r3, #4
 80039b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80039b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4618      	mov	r0, r3
 80039be:	f7ff f955 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80039c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80039c6:	f103 0304 	add.w	r3, r3, #4
 80039ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f107 0310 	add.w	r3, r7, #16
 80039d6:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80039d8:	f04f 0010 	mov.w	r0, #16
 80039dc:	f7ff fafc 	bl	8002fd8 <CRYP_GetFlagStatus>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 80039e6:	f107 0310 	add.w	r3, r7, #16
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f103 0201 	add.w	r2, r3, #1
 80039f0:	f107 0310 	add.w	r3, r7, #16
 80039f4:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 80039f6:	f107 0310 	add.w	r3, r7, #16
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d003      	beq.n	8003a0a <CRYP_AES_CBC+0x522>
 8003a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e6      	bne.n	80039d8 <CRYP_AES_CBC+0x4f0>

    if (busystatus != RESET)
 8003a0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <CRYP_AES_CBC+0x534>
   {
       status = ERROR;
 8003a12:	f04f 0300 	mov.w	r3, #0
 8003a16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003a1a:	e02f      	b.n	8003a7c <CRYP_AES_CBC+0x594>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a1c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003a20:	f7ff f934 	bl	8002c8c <CRYP_DataOut>
 8003a24:	4603      	mov	r3, r0
 8003a26:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a2c:	f103 0304 	add.w	r3, r3, #4
 8003a30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a34:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003a38:	f7ff f928 	bl	8002c8c <CRYP_DataOut>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a44:	f103 0304 	add.w	r3, r3, #4
 8003a48:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a4c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003a50:	f7ff f91c 	bl	8002c8c <CRYP_DataOut>
 8003a54:	4603      	mov	r3, r0
 8003a56:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5c:	f103 0304 	add.w	r3, r3, #4
 8003a60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003a64:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003a68:	f7ff f910 	bl	8002c8c <CRYP_DataOut>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a74:	f103 0304 	add.w	r3, r3, #4
 8003a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);


  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003a7c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003a80:	f103 0310 	add.w	r3, r3, #16
 8003a84:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a88:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003a8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d204      	bcs.n	8003a9e <CRYP_AES_CBC+0x5b6>
 8003a94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af68 	bne.w	800396e <CRYP_AES_CBC+0x486>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003a9e:	f04f 0000 	mov.w	r0, #0
 8003aa2:	f7ff f8bd 	bl	8002c20 <CRYP_Cmd>

  return status;
 8003aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd90      	pop	{r4, r7, pc}

08003ab4 <CRYP_AES_CTR>:
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_AES_CTR(uint8_t Mode, uint8_t InitVectors[16], uint8_t *Key, 
                         uint16_t Keysize, uint8_t *Input, uint32_t Ilength,
                         uint8_t *Output)
{
 8003ab4:	b590      	push	{r4, r7, lr}
 8003ab6:	b0c7      	sub	sp, #284	; 0x11c
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	f107 0408 	add.w	r4, r7, #8
 8003abe:	6021      	str	r1, [r4, #0]
 8003ac0:	f107 0104 	add.w	r1, r7, #4
 8003ac4:	600a      	str	r2, [r1, #0]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f107 0310 	add.w	r3, r7, #16
 8003acc:	f103 33ff 	add.w	r3, r3, #4294967295
 8003ad0:	4601      	mov	r1, r0
 8003ad2:	7019      	strb	r1, [r3, #0]
 8003ad4:	f107 030c 	add.w	r3, r7, #12
 8003ad8:	801a      	strh	r2, [r3, #0]
  CRYP_InitTypeDef AES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef AES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef AES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	f107 0310 	add.w	r3, r7, #16
 8003ae2:	601a      	str	r2, [r3, #0]
  uint32_t busystatus = 0;
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  ErrorStatus status = SUCCESS;
 8003aec:	f04f 0301 	mov.w	r3, #1
 8003af0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  uint32_t keyaddr    = (uint32_t)Key;
 8003af4:	f107 0304 	add.w	r3, r7, #4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t inputaddr  = (uint32_t)Input;
 8003afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003b02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  uint32_t outputaddr = (uint32_t)Output;
 8003b06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003b0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8003b0e:	f107 0308 	add.w	r3, r7, #8
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i = 0;
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&AES_CRYP_KeyInitStructure);
 8003b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe ffff 	bl	8002b28 <CRYP_KeyStructInit>

  switch(Keysize)
 8003b2a:	f107 030c 	add.w	r3, r7, #12
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	2bc0      	cmp	r3, #192	; 0xc0
 8003b32:	d051      	beq.n	8003bd8 <CRYP_AES_CTR+0x124>
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b38:	f000 80bf 	beq.w	8003cba <CRYP_AES_CTR+0x206>
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	f040 8149 	bne.w	8003dd4 <CRYP_AES_CTR+0x320>
  {
    case 128:
    AES_CRYP_InitStructure.CRYP_KeySize = CRYP_KeySize_128b;
 8003b42:	f04f 0300 	mov.w	r3, #0
 8003b46:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003b4a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003b58:	ba1c      	rev	r4, r3
 8003b5a:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
  return(result);
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b62:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003b64:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b68:	f103 0304 	add.w	r3, r3, #4
 8003b6c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003b70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003b7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003b7e:	ba1c      	rev	r4, r3
 8003b80:	f8c7 40ec 	str.w	r4, [r7, #236]	; 0xec
  return(result);
 8003b84:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003b88:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8003b8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b8e:	f103 0304 	add.w	r3, r3, #4
 8003b92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003b96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ba0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003ba4:	ba1c      	rev	r4, r3
 8003ba6:	f8c7 40e4 	str.w	r4, [r7, #228]	; 0xe4
  return(result);
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bae:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8003bb0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bb4:	f103 0304 	add.w	r3, r3, #4
 8003bb8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003bbc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003bc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bca:	ba1c      	rev	r4, r3
 8003bcc:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
  return(result);
 8003bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bd4:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8003bd6:	e0fe      	b.n	8003dd6 <CRYP_AES_CTR+0x322>
    case 192:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_192b;
 8003bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bdc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003be0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003bee:	ba1c      	rev	r4, r3
 8003bf0:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
  return(result);
 8003bf4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003bfe:	f103 0304 	add.w	r3, r3, #4
 8003c02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003c06:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003c10:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c14:	ba1c      	rev	r4, r3
 8003c16:	f8c7 40cc 	str.w	r4, [r7, #204]	; 0xcc
  return(result);
 8003c1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003c20:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c24:	f103 0304 	add.w	r3, r3, #4
 8003c28:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003c2c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c3a:	ba1c      	rev	r4, r3
 8003c3c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
  return(result);
 8003c40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c44:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003c46:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c4a:	f103 0304 	add.w	r3, r3, #4
 8003c4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003c52:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003c5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c60:	ba1c      	rev	r4, r3
 8003c62:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
  return(result);
 8003c66:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003c6a:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8003c6c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c70:	f103 0304 	add.w	r3, r3, #4
 8003c74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003c78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003c82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003c86:	ba1c      	rev	r4, r3
 8003c88:	f8c7 40b4 	str.w	r4, [r7, #180]	; 0xb4
  return(result);
 8003c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003c90:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8003c92:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003c96:	f103 0304 	add.w	r3, r3, #4
 8003c9a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003c9e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003cac:	ba1c      	rev	r4, r3
 8003cae:	f8c7 40ac 	str.w	r4, [r7, #172]	; 0xac
  return(result);
 8003cb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cb6:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8003cb8:	e08d      	b.n	8003dd6 <CRYP_AES_CTR+0x322>
    case 256:
    AES_CRYP_InitStructure.CRYP_KeySize  = CRYP_KeySize_256b;
 8003cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cbe:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    AES_CRYP_KeyInitStructure.CRYP_Key0Left = __REV(*(uint32_t*)(keyaddr));
 8003cc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003ccc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003cd0:	ba1c      	rev	r4, r3
 8003cd2:	f8c7 40a4 	str.w	r4, [r7, #164]	; 0xa4
  return(result);
 8003cd6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cda:	627b      	str	r3, [r7, #36]	; 0x24
    keyaddr+=4;
 8003cdc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003ce0:	f103 0304 	add.w	r3, r3, #4
 8003ce4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key0Right= __REV(*(uint32_t*)(keyaddr));
 8003ce8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cf6:	ba1c      	rev	r4, r3
 8003cf8:	f8c7 409c 	str.w	r4, [r7, #156]	; 0x9c
  return(result);
 8003cfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003d00:	62bb      	str	r3, [r7, #40]	; 0x28
    keyaddr+=4;
 8003d02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d06:	f103 0304 	add.w	r3, r3, #4
 8003d0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8003d0e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d1c:	ba1c      	rev	r4, r3
 8003d1e:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
  return(result);
 8003d22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    keyaddr+=4;
 8003d28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d2c:	f103 0304 	add.w	r3, r3, #4
 8003d30:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8003d34:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d42:	ba1c      	rev	r4, r3
 8003d44:	f8c7 408c 	str.w	r4, [r7, #140]	; 0x8c
  return(result);
 8003d48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d4c:	633b      	str	r3, [r7, #48]	; 0x30
    keyaddr+=4;
 8003d4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d52:	f103 0304 	add.w	r3, r3, #4
 8003d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 8003d5a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d68:	ba1c      	rev	r4, r3
 8003d6a:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 8003d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d72:	637b      	str	r3, [r7, #52]	; 0x34
    keyaddr+=4;
 8003d74:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d78:	f103 0304 	add.w	r3, r3, #4
 8003d7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 8003d80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003d8e:	ba1c      	rev	r4, r3
 8003d90:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 8003d92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003d94:	63bb      	str	r3, [r7, #56]	; 0x38
    keyaddr+=4;
 8003d96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003d9a:	f103 0304 	add.w	r3, r3, #4
 8003d9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 8003da2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dac:	ba1c      	rev	r4, r3
 8003dae:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 8003db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db2:	63fb      	str	r3, [r7, #60]	; 0x3c
    keyaddr+=4;
 8003db4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003db8:	f103 0304 	add.w	r3, r3, #4
 8003dbc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    AES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 8003dc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dca:	ba1c      	rev	r4, r3
 8003dcc:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 8003dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dd0:	643b      	str	r3, [r7, #64]	; 0x40
    break;
 8003dd2:	e000      	b.n	8003dd6 <CRYP_AES_CTR+0x322>
    default:
    break;
 8003dd4:	bf00      	nop
  }
  /* CRYP Initialization Vectors */
  AES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003dde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003de0:	ba1c      	rev	r4, r3
 8003de2:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 8003de4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003de6:	461a      	mov	r2, r3
 8003de8:	f107 0314 	add.w	r3, r7, #20
 8003dec:	601a      	str	r2, [r3, #0]
  ivaddr+=4;
 8003dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003df2:	f103 0304 	add.w	r3, r3, #4
 8003df6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8003dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e04:	ba1c      	rev	r4, r3
 8003e06:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8003e08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	605a      	str	r2, [r3, #4]
  ivaddr+=4;
 8003e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e16:	f103 0304 	add.w	r3, r3, #4
 8003e1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Left = __REV(*(uint32_t*)(ivaddr));
 8003e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003e26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003e28:	ba1c      	rev	r4, r3
 8003e2a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8003e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f107 0314 	add.w	r3, r7, #20
 8003e34:	609a      	str	r2, [r3, #8]
  ivaddr+=4;
 8003e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e3a:	f103 0304 	add.w	r3, r3, #4
 8003e3e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  AES_CRYP_IVInitStructure.CRYP_IV1Right= __REV(*(uint32_t*)(ivaddr));
 8003e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8003e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e4c:	ba1c      	rev	r4, r3
 8003e4e:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8003e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e52:	461a      	mov	r2, r3
 8003e54:	f107 0314 	add.w	r3, r7, #20
 8003e58:	60da      	str	r2, [r3, #12]

  /* Key Initialisation */
  CRYP_KeyInit(&AES_CRYP_KeyInitStructure);
 8003e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe fe20 	bl	8002aa4 <CRYP_KeyInit>

  /*------------------ AES Decryption ------------------*/
  if(Mode == MODE_DECRYPT) /* AES decryption */
 8003e64:	f107 0310 	add.w	r3, r7, #16
 8003e68:	f103 33ff 	add.w	r3, r3, #4294967295
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d104      	bne.n	8003e7c <CRYP_AES_CTR+0x3c8>
  {
    /* Crypto Init for decryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8003e72:	f04f 0304 	mov.w	r3, #4
 8003e76:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e7a:	e003      	b.n	8003e84 <CRYP_AES_CTR+0x3d0>
  }
  /*------------------ AES Encryption ------------------*/
  else /* AES encryption */
  {
    /* Crypto Init for Encryption process */
    AES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  AES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_AES_CTR;
 8003e84:	f04f 0330 	mov.w	r3, #48	; 0x30
 8003e88:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  AES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8003e8c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8003e90:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&AES_CRYP_InitStructure);
 8003e94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7fe fd6b 	bl	8002974 <CRYP_Init>

  /* CRYP Initialization Vectors */
  CRYP_IVInit(&AES_CRYP_IVInitStructure);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fe6a 	bl	8002b7c <CRYP_IVInit>

  /* Flush IN/OUT FIFOs */
  CRYP_FIFOFlush();
 8003ea8:	f7fe fea8 	bl	8002bfc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8003eac:	f04f 0001 	mov.w	r0, #1
 8003eb0:	f7fe feb6 	bl	8002c20 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003ebc:	e08c      	b.n	8003fd8 <CRYP_AES_CTR+0x524>
  {

    /* Write the Input block in the IN FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003ebe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fe fed1 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8003eca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ece:	f103 0304 	add.w	r3, r3, #4
 8003ed2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003ed6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7fe fec5 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8003ee2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ee6:	f103 0304 	add.w	r3, r3, #4
 8003eea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003eee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fe feb9 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8003efa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003efe:	f103 0304 	add.w	r3, r3, #4
 8003f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8003f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f7fe fead 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8003f12:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003f16:	f103 0304 	add.w	r3, r3, #4
 8003f1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    /* Wait until the complete message has been processed */
    counter = 0;
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f107 0310 	add.w	r3, r7, #16
 8003f26:	601a      	str	r2, [r3, #0]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 8003f28:	f04f 0010 	mov.w	r0, #16
 8003f2c:	f7ff f854 	bl	8002fd8 <CRYP_GetFlagStatus>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      counter++;
 8003f36:	f107 0310 	add.w	r3, r7, #16
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f103 0201 	add.w	r2, r3, #1
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	601a      	str	r2, [r3, #0]
    }while ((counter != AESBUSY_TIMEOUT) && (busystatus != RESET));
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d003      	beq.n	8003f5a <CRYP_AES_CTR+0x4a6>
 8003f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1e6      	bne.n	8003f28 <CRYP_AES_CTR+0x474>

    if (busystatus != RESET)
 8003f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <CRYP_AES_CTR+0x4b8>
   {
       status = ERROR;
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8003f6a:	e02f      	b.n	8003fcc <CRYP_AES_CTR+0x518>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003f6c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003f70:	f7fe fe8c 	bl	8002c8c <CRYP_DataOut>
 8003f74:	4603      	mov	r3, r0
 8003f76:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7c:	f103 0304 	add.w	r3, r3, #4
 8003f80:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003f84:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003f88:	f7fe fe80 	bl	8002c8c <CRYP_DataOut>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003f90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f94:	f103 0304 	add.w	r3, r3, #4
 8003f98:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003f9c:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003fa0:	f7fe fe74 	bl	8002c8c <CRYP_DataOut>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003fa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fac:	f103 0304 	add.w	r3, r3, #4
 8003fb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8003fb4:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8003fb8:	f7fe fe68 	bl	8002c8c <CRYP_DataOut>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8003fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc4:	f103 0304 	add.w	r3, r3, #4
 8003fc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=16)
 8003fcc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003fd0:	f103 0310 	add.w	r3, r3, #16
 8003fd4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003fd8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8003fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d204      	bcs.n	8003fee <CRYP_AES_CTR+0x53a>
 8003fe4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f af68 	bne.w	8003ebe <CRYP_AES_CTR+0x40a>
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
      outputaddr+=4;
    }
  }
  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8003fee:	f04f 0000 	mov.w	r0, #0
 8003ff2:	f7fe fe15 	bl	8002c20 <CRYP_Cmd>

  return status;
 8003ff6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <CRYP_DES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_ECB(uint8_t Mode, uint8_t Key[8], uint8_t *Input, 
                         uint32_t Ilength, uint8_t *Output)
{
 8004004:	b590      	push	{r4, r7, lr}
 8004006:	b09b      	sub	sp, #108	; 0x6c
 8004008:	af00      	add	r7, sp, #0
 800400a:	60b9      	str	r1, [r7, #8]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8004014:	f04f 0300 	mov.w	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	657b      	str	r3, [r7, #84]	; 0x54
  ErrorStatus status = SUCCESS;
 8004020:	f04f 0301 	mov.w	r3, #1
 8004024:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t keyaddr    = (uint32_t)Key;
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	653b      	str	r3, [r7, #80]	; 0x50
  uint32_t inputaddr  = (uint32_t)Input;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t outputaddr = (uint32_t)Output;
 8004030:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004032:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i = 0;
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	65bb      	str	r3, [r7, #88]	; 0x58

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 800403a:	f107 0318 	add.w	r3, r7, #24
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fd72 	bl	8002b28 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if( Mode == MODE_ENCRYPT ) /* DES encryption */
 8004044:	7bfb      	ldrb	r3, [r7, #15]
 8004046:	2b01      	cmp	r3, #1
 8004048:	d103      	bne.n	8004052 <CRYP_DES_ECB+0x4e>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	873b      	strh	r3, [r7, #56]	; 0x38
 8004050:	e002      	b.n	8004058 <CRYP_DES_ECB+0x54>
  }
  else/* if( Mode == MODE_DECRYPT )*/ /* DES decryption */
  {      
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 8004052:	f04f 0304 	mov.w	r3, #4
 8004056:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_ECB;
 8004058:	f04f 0310 	mov.w	r3, #16
 800405c:	877b      	strh	r3, [r7, #58]	; 0x3a
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 800405e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004062:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&DES_CRYP_InitStructure);
 8004064:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004068:	4618      	mov	r0, r3
 800406a:	f7fe fc83 	bl	8002974 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 800406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004076:	ba1c      	rev	r4, r3
 8004078:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800407a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800407c:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 800407e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004080:	f103 0304 	add.w	r3, r3, #4
 8004084:	653b      	str	r3, [r7, #80]	; 0x50
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 8004086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800408c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408e:	ba1c      	rev	r4, r3
 8004090:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8004092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004094:	627b      	str	r3, [r7, #36]	; 0x24
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004096:	f107 0318 	add.w	r3, r7, #24
 800409a:	4618      	mov	r0, r3
 800409c:	f7fe fd02 	bl	8002aa4 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 80040a0:	f7fe fdac 	bl	8002bfc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 80040a4:	f04f 0001 	mov.w	r0, #1
 80040a8:	f7fe fdba 	bl	8002c20 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80040ac:	f04f 0300 	mov.w	r3, #0
 80040b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80040b2:	e043      	b.n	800413c <CRYP_DES_ECB+0x138>
  {

    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80040b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7fe fdd7 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80040be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c0:	f103 0304 	add.w	r3, r3, #4
 80040c4:	663b      	str	r3, [r7, #96]	; 0x60
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 80040c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4618      	mov	r0, r3
 80040cc:	f7fe fdce 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 80040d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d2:	f103 0304 	add.w	r3, r3, #4
 80040d6:	663b      	str	r3, [r7, #96]	; 0x60

/* Wait until the complete message has been processed */
    counter = 0;
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80040de:	f04f 0010 	mov.w	r0, #16
 80040e2:	f7fe ff79 	bl	8002fd8 <CRYP_GetFlagStatus>
 80040e6:	4603      	mov	r3, r0
 80040e8:	657b      	str	r3, [r7, #84]	; 0x54
      counter++;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f103 0301 	add.w	r3, r3, #1
 80040f0:	617b      	str	r3, [r7, #20]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f8:	d002      	beq.n	8004100 <CRYP_DES_ECB+0xfc>
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1ee      	bne.n	80040de <CRYP_DES_ECB+0xda>

    if (busystatus != RESET)
 8004100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004102:	2b00      	cmp	r3, #0
 8004104:	d004      	beq.n	8004110 <CRYP_DES_ECB+0x10c>
   {
       status = ERROR;
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800410e:	e011      	b.n	8004134 <CRYP_DES_ECB+0x130>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004110:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004112:	f7fe fdbb 	bl	8002c8c <CRYP_DataOut>
 8004116:	4603      	mov	r3, r0
 8004118:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800411a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800411c:	f103 0304 	add.w	r3, r3, #4
 8004120:	65fb      	str	r3, [r7, #92]	; 0x5c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004122:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004124:	f7fe fdb2 	bl	8002c8c <CRYP_DataOut>
 8004128:	4603      	mov	r3, r0
 800412a:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800412c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800412e:	f103 0304 	add.w	r3, r3, #4
 8004132:	65fb      	str	r3, [r7, #92]	; 0x5c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004134:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004136:	f103 0308 	add.w	r3, r3, #8
 800413a:	65bb      	str	r3, [r7, #88]	; 0x58
 800413c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d203      	bcs.n	800414c <CRYP_DES_ECB+0x148>
 8004144:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1b3      	bne.n	80040b4 <CRYP_DES_ECB+0xb0>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 800414c:	f04f 0000 	mov.w	r0, #0
 8004150:	f7fe fd66 	bl	8002c20 <CRYP_Cmd>

  return status; 
 8004154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004158:	4618      	mov	r0, r3
 800415a:	f107 076c 	add.w	r7, r7, #108	; 0x6c
 800415e:	46bd      	mov	sp, r7
 8004160:	bd90      	pop	{r4, r7, pc}
 8004162:	bf00      	nop

08004164 <CRYP_DES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_DES_CBC(uint8_t Mode, uint8_t Key[8], uint8_t InitVectors[8],
                         uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 8004164:	b590      	push	{r4, r7, lr}
 8004166:	b0a3      	sub	sp, #140	; 0x8c
 8004168:	af00      	add	r7, sp, #0
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	4603      	mov	r3, r0
 8004172:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef DES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef DES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef DES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8004180:	f04f 0301 	mov.w	r3, #1
 8004184:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8004192:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004196:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t i = 0;
 800419c:	f04f 0300 	mov.w	r3, #0
 80041a0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&DES_CRYP_KeyInitStructure);
 80041a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7fe fcbe 	bl	8002b28 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* DES encryption */
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d104      	bne.n	80041bc <CRYP_DES_CBC+0x58>
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Encrypt;
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80041ba:	e003      	b.n	80041c4 <CRYP_DES_CBC+0x60>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* DES decryption */
  {
     DES_CRYP_InitStructure.CRYP_AlgoDir  = CRYP_AlgoDir_Decrypt;
 80041bc:	f04f 0304 	mov.w	r3, #4
 80041c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }

  DES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_DES_CBC;
 80041c4:	f04f 0318 	mov.w	r3, #24
 80041c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  DES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 80041cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80041d0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
  CRYP_Init(&DES_CRYP_InitStructure);
 80041d4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041d8:	4618      	mov	r0, r3
 80041da:	f7fe fbcb 	bl	8002974 <CRYP_Init>

  /* Key Initialisation */
  DES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 80041de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80041e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041e6:	ba1c      	rev	r4, r3
 80041e8:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80041ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80041ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f0:	f103 0304 	add.w	r3, r3, #4
 80041f4:	673b      	str	r3, [r7, #112]	; 0x70
  DES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 80041f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041fe:	ba1c      	rev	r4, r3
 8004200:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8004202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004204:	633b      	str	r3, [r7, #48]	; 0x30
  CRYP_KeyInit(& DES_CRYP_KeyInitStructure);
 8004206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420a:	4618      	mov	r0, r3
 800420c:	f7fe fc4a 	bl	8002aa4 <CRYP_KeyInit>

  /* Initialization Vectors */
  DES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004218:	ba1c      	rev	r4, r3
 800421a:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 800421c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800421e:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004222:	f103 0304 	add.w	r3, r3, #4
 8004226:	66fb      	str	r3, [r7, #108]	; 0x6c
  DES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800422e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004230:	ba1c      	rev	r4, r3
 8004232:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8004234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004236:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&DES_CRYP_IVInitStructure);
 8004238:	f107 0314 	add.w	r3, r7, #20
 800423c:	4618      	mov	r0, r3
 800423e:	f7fe fc9d 	bl	8002b7c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004242:	f7fe fcdb 	bl	8002bfc <CRYP_FIFOFlush>
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004246:	f04f 0001 	mov.w	r0, #1
 800424a:	f7fe fce9 	bl	8002c20 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	67bb      	str	r3, [r7, #120]	; 0x78
 8004254:	e049      	b.n	80042ea <CRYP_DES_CBC+0x186>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004256:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4618      	mov	r0, r3
 800425e:	f7fe fd05 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8004262:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004266:	f103 0304 	add.w	r3, r3, #4
 800426a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800426e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fe fcf9 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 800427a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800427e:	f103 0304 	add.w	r3, r3, #4
 8004282:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800428c:	f04f 0010 	mov.w	r0, #16
 8004290:	f7fe fea2 	bl	8002fd8 <CRYP_GetFlagStatus>
 8004294:	4603      	mov	r3, r0
 8004296:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f103 0301 	add.w	r3, r3, #1
 800429e:	613b      	str	r3, [r7, #16]
    }while ((counter != DESBUSY_TIMEOUT) && (busystatus != RESET));
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a6:	d002      	beq.n	80042ae <CRYP_DES_CBC+0x14a>
 80042a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ee      	bne.n	800428c <CRYP_DES_CBC+0x128>

    if (busystatus != RESET)
 80042ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <CRYP_DES_CBC+0x15a>
   {
       status = ERROR;
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80042bc:	e011      	b.n	80042e2 <CRYP_DES_CBC+0x17e>
    }
    else
    {
      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80042be:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80042c0:	f7fe fce4 	bl	8002c8c <CRYP_DataOut>
 80042c4:	4603      	mov	r3, r0
 80042c6:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80042c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042ca:	f103 0304 	add.w	r3, r3, #4
 80042ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80042d0:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80042d2:	f7fe fcdb 	bl	8002c8c <CRYP_DataOut>
 80042d6:	4603      	mov	r3, r0
 80042d8:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80042da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042dc:	f103 0304 	add.w	r3, r3, #4
 80042e0:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();
  
  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80042e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042e4:	f103 0308 	add.w	r3, r3, #8
 80042e8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ea:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d203      	bcs.n	80042fc <CRYP_DES_CBC+0x198>
 80042f4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ac      	bne.n	8004256 <CRYP_DES_CBC+0xf2>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80042fc:	f04f 0000 	mov.w	r0, #0
 8004300:	f7fe fc8e 	bl	8002c20 <CRYP_Cmd>

  return status; 
 8004304:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8004308:	4618      	mov	r0, r3
 800430a:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 800430e:	46bd      	mov	sp, r7
 8004310:	bd90      	pop	{r4, r7, pc}
 8004312:	bf00      	nop

08004314 <CRYP_TDES_ECB>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
                          uint32_t Ilength, uint8_t *Output)
{
 8004314:	b590      	push	{r4, r7, lr}
 8004316:	b0a3      	sub	sp, #140	; 0x8c
 8004318:	af00      	add	r7, sp, #0
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4603      	mov	r3, r0
 8004322:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  __IO uint32_t counter = 0;
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	677b      	str	r3, [r7, #116]	; 0x74
  ErrorStatus status = SUCCESS;
 8004330:	f04f 0301 	mov.w	r3, #1
 8004334:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint32_t keyaddr    = (uint32_t)Key;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t inputaddr  = (uint32_t)Input;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t outputaddr = (uint32_t)Output;
 8004342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004346:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t i = 0;
 8004348:	f04f 0300 	mov.w	r3, #0
 800434c:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800434e:	f107 0318 	add.w	r3, r7, #24
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fbe8 	bl	8002b28 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d103      	bne.n	8004366 <CRYP_TDES_ECB+0x52>
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	873b      	strh	r3, [r7, #56]	; 0x38
 8004364:	e002      	b.n	800436c <CRYP_TDES_ECB+0x58>
  }
  else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
  {
     TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004366:	f04f 0304 	mov.w	r3, #4
 800436a:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	877b      	strh	r3, [r7, #58]	; 0x3a
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004372:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004376:	87bb      	strh	r3, [r7, #60]	; 0x3c
  CRYP_Init(&TDES_CRYP_InitStructure);
 8004378:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800437c:	4618      	mov	r0, r3
 800437e:	f7fe faf9 	bl	8002974 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	66fb      	str	r3, [r7, #108]	; 0x6c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800438a:	ba1c      	rev	r4, r3
 800438c:	66bc      	str	r4, [r7, #104]	; 0x68
  return(result);
 800438e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004390:	623b      	str	r3, [r7, #32]
  keyaddr+=4;
 8004392:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004394:	f103 0304 	add.w	r3, r3, #4
 8004398:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800439a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	667b      	str	r3, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043a2:	ba1c      	rev	r4, r3
 80043a4:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 80043a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043a8:	627b      	str	r3, [r7, #36]	; 0x24
  keyaddr+=4;
 80043aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043ac:	f103 0304 	add.w	r3, r3, #4
 80043b0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80043b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043ba:	ba1c      	rev	r4, r3
 80043bc:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 80043be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043c0:	62bb      	str	r3, [r7, #40]	; 0x28
  keyaddr+=4;
 80043c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043c4:	f103 0304 	add.w	r3, r3, #4
 80043c8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80043ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	657b      	str	r3, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d2:	ba1c      	rev	r4, r3
 80043d4:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80043d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 80043da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043dc:	f103 0304 	add.w	r3, r3, #4
 80043e0:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80043e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ea:	ba1c      	rev	r4, r3
 80043ec:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80043ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 80043f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043f4:	f103 0304 	add.w	r3, r3, #4
 80043f8:	673b      	str	r3, [r7, #112]	; 0x70
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 80043fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004402:	ba1c      	rev	r4, r3
 8004404:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8004406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004408:	637b      	str	r3, [r7, #52]	; 0x34
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800440a:	f107 0318 	add.w	r3, r7, #24
 800440e:	4618      	mov	r0, r3
 8004410:	f7fe fb48 	bl	8002aa4 <CRYP_KeyInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004414:	f7fe fbf2 	bl	8002bfc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004418:	f04f 0001 	mov.w	r0, #1
 800441c:	f7fe fc00 	bl	8002c20 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004420:	f04f 0300 	mov.w	r3, #0
 8004424:	67bb      	str	r3, [r7, #120]	; 0x78
 8004426:	e049      	b.n	80044bc <CRYP_TDES_ECB+0x1a8>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004428:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fc1c 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8004434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004438:	f103 0304 	add.w	r3, r3, #4
 800443c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004440:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f7fe fc10 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 800444c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004450:	f103 0304 	add.w	r3, r3, #4
 8004454:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Wait until the complete message has been processed */
    counter = 0;
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 800445e:	f04f 0010 	mov.w	r0, #16
 8004462:	f7fe fdb9 	bl	8002fd8 <CRYP_GetFlagStatus>
 8004466:	4603      	mov	r3, r0
 8004468:	677b      	str	r3, [r7, #116]	; 0x74
      counter++;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f103 0301 	add.w	r3, r3, #1
 8004470:	617b      	str	r3, [r7, #20]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d002      	beq.n	8004480 <CRYP_TDES_ECB+0x16c>
 800447a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ee      	bne.n	800445e <CRYP_TDES_ECB+0x14a>

    if (busystatus != RESET)
 8004480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <CRYP_TDES_ECB+0x17c>
    {
       status = ERROR;
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800448e:	e011      	b.n	80044b4 <CRYP_TDES_ECB+0x1a0>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 8004490:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8004492:	f7fe fbfb 	bl	8002c8c <CRYP_DataOut>
 8004496:	4603      	mov	r3, r0
 8004498:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 800449a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800449c:	f103 0304 	add.w	r3, r3, #4
 80044a0:	67fb      	str	r3, [r7, #124]	; 0x7c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80044a2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 80044a4:	f7fe fbf2 	bl	8002c8c <CRYP_DataOut>
 80044a8:	4603      	mov	r3, r0
 80044aa:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80044ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ae:	f103 0304 	add.w	r3, r3, #4
 80044b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 80044b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044b6:	f103 0308 	add.w	r3, r3, #8
 80044ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80044bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d203      	bcs.n	80044cc <CRYP_TDES_ECB+0x1b8>
 80044c4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ad      	bne.n	8004428 <CRYP_TDES_ECB+0x114>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 80044cc:	f04f 0000 	mov.w	r0, #0
 80044d0:	f7fe fba6 	bl	8002c20 <CRYP_Cmd>

  return status; 
 80044d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80044d8:	4618      	mov	r0, r3
 80044da:	f107 078c 	add.w	r7, r7, #140	; 0x8c
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd90      	pop	{r4, r7, pc}
 80044e2:	bf00      	nop

080044e4 <CRYP_TDES_CBC>:
  *          - SUCCESS: Operation done
  *          - ERROR: Operation failed
  */
ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
                          uint8_t *Input, uint32_t Ilength, uint8_t *Output)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b0ab      	sub	sp, #172	; 0xac
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
 80044f0:	4603      	mov	r3, r0
 80044f2:	73fb      	strb	r3, [r7, #15]
  CRYP_InitTypeDef TDES_CRYP_InitStructure;
  CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
  CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
  __IO uint32_t counter = 0;
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  ErrorStatus status = SUCCESS;
 8004502:	f04f 0301 	mov.w	r3, #1
 8004506:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t keyaddr    = (uint32_t)Key;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  uint32_t inputaddr  = (uint32_t)Input;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  uint32_t outputaddr = (uint32_t)Output;
 8004516:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800451a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t ivaddr     = (uint32_t)InitVectors;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t i = 0;
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  /* Crypto structures initialisation*/
  CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
 800452c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe faf9 	bl	8002b28 <CRYP_KeyStructInit>

  /* Crypto Init for Encryption process */
  if(Mode == MODE_ENCRYPT) /* TDES encryption */
 8004536:	7bfb      	ldrb	r3, [r7, #15]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d104      	bne.n	8004546 <CRYP_TDES_CBC+0x62>
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004544:	e003      	b.n	800454e <CRYP_TDES_CBC+0x6a>
  }
  else
  {
    TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
 8004546:	f04f 0304 	mov.w	r3, #4
 800454a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  }
  TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
 800454e:	f04f 0308 	mov.w	r3, #8
 8004552:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
 8004556:	f04f 0380 	mov.w	r3, #128	; 0x80
 800455a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  CRYP_Init(&TDES_CRYP_InitStructure);
 800455e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe fa06 	bl	8002974 <CRYP_Init>

  /* Key Initialisation */
  TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
 8004568:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004572:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004576:	ba1c      	rev	r4, r3
 8004578:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
  return(result);
 800457c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004580:	62fb      	str	r3, [r7, #44]	; 0x2c
  keyaddr+=4;
 8004582:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004586:	f103 0304 	add.w	r3, r3, #4
 800458a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
 800458e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800459c:	ba1c      	rev	r4, r3
 800459e:	67fc      	str	r4, [r7, #124]	; 0x7c
  return(result);
 80045a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
  keyaddr+=4;
 80045a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045a8:	f103 0304 	add.w	r3, r3, #4
 80045ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
 80045b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	67bb      	str	r3, [r7, #120]	; 0x78
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80045b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ba:	ba1c      	rev	r4, r3
 80045bc:	677c      	str	r4, [r7, #116]	; 0x74
  return(result);
 80045be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045c0:	637b      	str	r3, [r7, #52]	; 0x34
  keyaddr+=4;
 80045c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045c6:	f103 0304 	add.w	r3, r3, #4
 80045ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
 80045ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	673b      	str	r3, [r7, #112]	; 0x70
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045d8:	ba1c      	rev	r4, r3
 80045da:	66fc      	str	r4, [r7, #108]	; 0x6c
  return(result);
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	63bb      	str	r3, [r7, #56]	; 0x38
  keyaddr+=4;
 80045e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045e4:	f103 0304 	add.w	r3, r3, #4
 80045e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
 80045ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80045f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045f6:	ba1c      	rev	r4, r3
 80045f8:	667c      	str	r4, [r7, #100]	; 0x64
  return(result);
 80045fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  keyaddr+=4;
 80045fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004602:	f103 0304 	add.w	r3, r3, #4
 8004606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
 800460a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	663b      	str	r3, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8004612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004614:	ba1c      	rev	r4, r3
 8004616:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 8004618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
  CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
 800461c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004620:	4618      	mov	r0, r3
 8004622:	f7fe fa3f 	bl	8002aa4 <CRYP_KeyInit>

  /* Initialization Vectors */
  TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
 8004626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	65bb      	str	r3, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800462e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004630:	ba1c      	rev	r4, r3
 8004632:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8004634:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004636:	617b      	str	r3, [r7, #20]
  ivaddr+=4;
 8004638:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800463c:	f103 0304 	add.w	r3, r3, #4
 8004640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
 8004644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 800464c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800464e:	ba1c      	rev	r4, r3
 8004650:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8004652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004654:	61bb      	str	r3, [r7, #24]
  CRYP_IVInit(&TDES_CRYP_IVInitStructure);
 8004656:	f107 0314 	add.w	r3, r7, #20
 800465a:	4618      	mov	r0, r3
 800465c:	f7fe fa8e 	bl	8002b7c <CRYP_IVInit>

  /* Flush IN/OUT FIFO */
  CRYP_FIFOFlush();
 8004660:	f7fe facc 	bl	8002bfc <CRYP_FIFOFlush>

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);
 8004664:	f04f 0001 	mov.w	r0, #1
 8004668:	f7fe fada 	bl	8002c20 <CRYP_Cmd>

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004674:	e054      	b.n	8004720 <CRYP_TDES_CBC+0x23c>
  {
    /* Write the Input block in the Input FIFO */
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 8004676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f7fe faf5 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 8004682:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004686:	f103 0304 	add.w	r3, r3, #4
 800468a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    CRYP_DataIn(*(uint32_t*)(inputaddr));
 800468e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fe fae9 	bl	8002c6c <CRYP_DataIn>
    inputaddr+=4;
 800469a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800469e:	f103 0304 	add.w	r3, r3, #4
 80046a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    /* Wait until the complete message has been processed */
    counter = 0;
 80046a6:	f04f 0300 	mov.w	r3, #0
 80046aa:	613b      	str	r3, [r7, #16]
    do
    {
      busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
 80046ac:	f04f 0010 	mov.w	r0, #16
 80046b0:	f7fe fc92 	bl	8002fd8 <CRYP_GetFlagStatus>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      counter++;
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f103 0301 	add.w	r3, r3, #1
 80046c0:	613b      	str	r3, [r7, #16]
    }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c8:	d003      	beq.n	80046d2 <CRYP_TDES_CBC+0x1ee>
 80046ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ec      	bne.n	80046ac <CRYP_TDES_CBC+0x1c8>

    if (busystatus != RESET)
 80046d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d004      	beq.n	80046e4 <CRYP_TDES_CBC+0x200>
   {
       status = ERROR;
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80046e2:	e017      	b.n	8004714 <CRYP_TDES_CBC+0x230>
    }
    else
    {

      /* Read the Output block from the Output FIFO */
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80046e4:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80046e8:	f7fe fad0 	bl	8002c8c <CRYP_DataOut>
 80046ec:	4603      	mov	r3, r0
 80046ee:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 80046f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046f4:	f103 0304 	add.w	r3, r3, #4
 80046f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      *(uint32_t*)(outputaddr) = CRYP_DataOut();
 80046fc:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8004700:	f7fe fac4 	bl	8002c8c <CRYP_DataOut>
 8004704:	4603      	mov	r3, r0
 8004706:	6023      	str	r3, [r4, #0]
      outputaddr+=4;
 8004708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800470c:	f103 0304 	add.w	r3, r3, #4
 8004710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  CRYP_FIFOFlush();

  /* Enable Crypto processor */
  CRYP_Cmd(ENABLE);

  for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
 8004714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004718:	f103 0308 	add.w	r3, r3, #8
 800471c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004720:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8004724:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004728:	429a      	cmp	r2, r3
 800472a:	d203      	bcs.n	8004734 <CRYP_TDES_CBC+0x250>
 800472c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1a0      	bne.n	8004676 <CRYP_TDES_CBC+0x192>
      outputaddr+=4;
    }
  }

  /* Disable Crypto */
  CRYP_Cmd(DISABLE);
 8004734:	f04f 0000 	mov.w	r0, #0
 8004738:	f7fe fa72 	bl	8002c20 <CRYP_Cmd>

  return status; 
 800473c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8004740:	4618      	mov	r0, r3
 8004742:	f107 07ac 	add.w	r7, r7, #172	; 0xac
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	bf00      	nop

0800474c <DAC_DeInit>:
  * @brief  Deinitializes the DAC peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void DAC_DeInit(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  /* Enable DAC reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
 8004750:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004754:	f04f 0101 	mov.w	r1, #1
 8004758:	f005 f9f6 	bl	8009b48 <RCC_APB1PeriphResetCmd>
  /* Release DAC from reset state */
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
 800475c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8004760:	f04f 0100 	mov.w	r1, #0
 8004764:	f005 f9f0 	bl	8009b48 <RCC_APB1PeriphResetCmd>
}
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop

0800476c <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that contains
  *         the configuration information for the  specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));

/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8004782:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004786:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004794:	fa02 f303 	lsl.w	r3, r2, r3
 8004798:	ea6f 0303 	mvn.w	r3, r3
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4013      	ands	r3, r2
 80047a0:	60fb      	str	r3, [r7, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	689b      	ldr	r3, [r3, #8]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80047b0:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
     wave generation, mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80047b6:	4313      	orrs	r3, r2
 80047b8:	60bb      	str	r3, [r7, #8]
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | \
             DAC_InitStruct->DAC_OutputBuffer);
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	fa02 f303 	lsl.w	r3, r2, r3
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80047c8:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80047cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	f107 0714 	add.w	r7, r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop

080047e0 <DAC_StructInit>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
/*--------------- Reset DAC init structure parameters values -----------------*/
  /* Initialize the DAC_Trigger member */
  DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
  /* Initialize the DAC_WaveGeneration member */
  DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	605a      	str	r2, [r3, #4]
  /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
  DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	609a      	str	r2, [r3, #8]
  /* Initialize the DAC_OutputBuffer member */
  DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f04f 0200 	mov.w	r2, #0
 8004806:	60da      	str	r2, [r3, #12]
}
 8004808:	f107 070c 	add.w	r7, r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <DAC_Cmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   When the DAC channel is enabled the trigger source can no more be modified.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	460b      	mov	r3, r1
 800481e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004820:	78fb      	ldrb	r3, [r7, #3]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <DAC_Cmd+0x34>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 8004826:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800482a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800482e:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004832:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004836:	6811      	ldr	r1, [r2, #0]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	f04f 0001 	mov.w	r0, #1
 800483e:	fa00 f202 	lsl.w	r2, r0, r2
 8004842:	430a      	orrs	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	e011      	b.n	800486c <DAC_Cmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= (~(DAC_CR_EN1 << DAC_Channel));
 8004848:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800484c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004850:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004854:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004858:	6811      	ldr	r1, [r2, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	f04f 0001 	mov.w	r0, #1
 8004860:	fa00 f202 	lsl.w	r2, r0, r2
 8004864:	ea6f 0202 	mvn.w	r2, r2
 8004868:	400a      	ands	r2, r1
 800486a:	601a      	str	r2, [r3, #0]
  }
}
 800486c:	f107 070c 	add.w	r7, r7, #12
 8004870:	46bd      	mov	sp, r7
 8004872:	bc80      	pop	{r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop

08004878 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	460b      	mov	r3, r1
 8004882:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004884:	78fb      	ldrb	r3, [r7, #3]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d012      	beq.n	80048b0 <DAC_SoftwareTriggerCmd+0x38>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 800488a:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 800488e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004892:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004896:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800489a:	6851      	ldr	r1, [r2, #4]
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	ea4f 1212 	mov.w	r2, r2, lsr #4
 80048a2:	f04f 0001 	mov.w	r0, #1
 80048a6:	fa00 f202 	lsl.w	r2, r0, r2
 80048aa:	430a      	orrs	r2, r1
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	e013      	b.n	80048d8 <DAC_SoftwareTriggerCmd+0x60>
  }
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 80048b0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80048b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048b8:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 80048bc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80048c0:	6851      	ldr	r1, [r2, #4]
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	ea4f 1212 	mov.w	r2, r2, lsr #4
 80048c8:	f04f 0001 	mov.w	r0, #1
 80048cc:	fa00 f202 	lsl.w	r2, r0, r2
 80048d0:	ea6f 0202 	mvn.w	r2, r2
 80048d4:	400a      	ands	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }
}
 80048d8:	f107 070c 	add.w	r7, r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop

080048e4 <DAC_DualSoftwareTriggerCmd>:
  * @param  NewState: new state of the DAC channels software triggers.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00c      	beq.n	800490e <DAC_DualSoftwareTriggerCmd+0x2a>
  {
    /* Enable software trigger for both DAC channels */
    DAC->SWTRIGR |= DUAL_SWTRIG_SET;
 80048f4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80048f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80048fc:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004900:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004904:	6852      	ldr	r2, [r2, #4]
 8004906:	f042 0203 	orr.w	r2, r2, #3
 800490a:	605a      	str	r2, [r3, #4]
 800490c:	e00b      	b.n	8004926 <DAC_DualSoftwareTriggerCmd+0x42>
  }
  else
  {
    /* Disable software trigger for both DAC channels */
    DAC->SWTRIGR &= DUAL_SWTRIG_RESET;
 800490e:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004912:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004916:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 800491a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800491e:	6852      	ldr	r2, [r2, #4]
 8004920:	f022 0203 	bic.w	r2, r2, #3
 8004924:	605a      	str	r2, [r3, #4]
  }
}
 8004926:	f107 070c 	add.w	r7, r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <DAC_WaveGenerationCmd>:
  * @param  NewState: new state of the selected DAC channel wave generation.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void DAC_WaveGenerationCmd(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	4613      	mov	r3, r2
 800493c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_WAVE(DAC_Wave)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800493e:	79fb      	ldrb	r3, [r7, #7]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00f      	beq.n	8004964 <DAC_WaveGenerationCmd+0x34>
  {
    /* Enable the selected wave generation for the selected DAC channel */
    DAC->CR |= DAC_Wave << DAC_Channel;
 8004944:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004948:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800494c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004950:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004954:	6811      	ldr	r1, [r2, #0]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	68b8      	ldr	r0, [r7, #8]
 800495a:	fa00 f202 	lsl.w	r2, r0, r2
 800495e:	430a      	orrs	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
 8004962:	e010      	b.n	8004986 <DAC_WaveGenerationCmd+0x56>
  }
  else
  {
    /* Disable the selected wave generation for the selected DAC channel */
    DAC->CR &= ~(DAC_Wave << DAC_Channel);
 8004964:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004968:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800496c:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004970:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004974:	6811      	ldr	r1, [r2, #0]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	68b8      	ldr	r0, [r7, #8]
 800497a:	fa00 f202 	lsl.w	r2, r0, r2
 800497e:	ea6f 0202 	mvn.w	r2, r2
 8004982:	400a      	ands	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
  }
}
 8004986:	f107 0714 	add.w	r7, r7, #20
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80049a2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80049a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049aa:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	18d3      	adds	r3, r2, r3
 80049b2:	f103 0308 	add.w	r3, r3, #8
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	887a      	ldrh	r2, [r7, #2]
 80049bc:	601a      	str	r2, [r3, #0]
}
 80049be:	f107 0714 	add.w	r7, r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <DAC_SetChannel2Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel2Data(uint32_t DAC_Align, uint16_t Data)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	460b      	mov	r3, r1
 80049d2:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE;
 80049da:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80049de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80049e2:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R2_OFFSET + DAC_Align;
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	18d3      	adds	r3, r2, r3
 80049ea:	f103 0314 	add.w	r3, r3, #20
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel2 selected data holding register */
  *(__IO uint32_t *)tmp = Data;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	f107 0714 	add.w	r7, r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <DAC_SetDualChannelData>:
  * @note   In dual mode, a unique register access is required to write in both
  *          DAC channels at the same time.
  * @retval None
  */
void DAC_SetDualChannelData(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	4613      	mov	r3, r2
 8004a0a:	460a      	mov	r2, r1
 8004a0c:	807a      	strh	r2, [r7, #2]
 8004a0e:	803b      	strh	r3, [r7, #0]
  uint32_t data = 0, tmp = 0;
 8004a10:	f04f 0300 	mov.w	r3, #0
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	f04f 0300 	mov.w	r3, #0
 8004a1a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data1));
  assert_param(IS_DAC_DATA(Data2));
  
  /* Calculate and set dual DAC data holding register value */
  if (DAC_Align == DAC_Align_8b_R)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b08      	cmp	r3, #8
 8004a20:	d106      	bne.n	8004a30 <DAC_SetDualChannelData+0x30>
  {
    data = ((uint32_t)Data2 << 8) | Data1; 
 8004a22:	887b      	ldrh	r3, [r7, #2]
 8004a24:	ea4f 2203 	mov.w	r2, r3, lsl #8
 8004a28:	883b      	ldrh	r3, [r7, #0]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e005      	b.n	8004a3c <DAC_SetDualChannelData+0x3c>
  }
  else
  {
    data = ((uint32_t)Data2 << 16) | Data1;
 8004a30:	887b      	ldrh	r3, [r7, #2]
 8004a32:	ea4f 4203 	mov.w	r2, r3, lsl #16
 8004a36:	883b      	ldrh	r3, [r7, #0]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]
  }
  
  tmp = (uint32_t)DAC_BASE;
 8004a3c:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004a40:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a44:	60bb      	str	r3, [r7, #8]
  tmp += DHR12RD_OFFSET + DAC_Align;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	18d3      	adds	r3, r2, r3
 8004a4c:	f103 0320 	add.w	r3, r3, #32
 8004a50:	60bb      	str	r3, [r7, #8]

  /* Set the dual DAC selected data holding register */
  *(__IO uint32_t *)tmp = data;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]
}
 8004a58:	f107 0714 	add.w	r7, r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bc80      	pop	{r7}
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop

08004a64 <DAC_GetDataOutputValue>:
  *            @arg DAC_Channel_1: DAC Channel1 selected
  *            @arg DAC_Channel_2: DAC Channel2 selected
  * @retval The selected DAC channel data output value.
  */
uint16_t DAC_GetDataOutputValue(uint32_t DAC_Channel)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  
  tmp = (uint32_t) DAC_BASE ;
 8004a72:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004a76:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004a7a:	60fb      	str	r3, [r7, #12]
  tmp += DOR_OFFSET + ((uint32_t)DAC_Channel >> 2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	ea4f 0293 	mov.w	r2, r3, lsr #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	18d3      	adds	r3, r2, r3
 8004a86:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004a8a:	60fb      	str	r3, [r7, #12]
  
  /* Returns the DAC channel data output register value */
  return (uint16_t) (*(__IO uint32_t*) tmp);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	f107 0714 	add.w	r7, r7, #20
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop

08004aa0 <DAC_DMACmd>:
  * @note   The DAC channel2 is mapped on DMA1 Stream 6 channel7 which must be
  *          already configured.    
  * @retval None
  */
void DAC_DMACmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	460b      	mov	r3, r1
 8004aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004aac:	78fb      	ldrb	r3, [r7, #3]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d010      	beq.n	8004ad4 <DAC_DMACmd+0x34>
  {
    /* Enable the selected DAC channel DMA request */
    DAC->CR |= (DAC_CR_DMAEN1 << DAC_Channel);
 8004ab2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004ab6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004aba:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004abe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ac2:	6811      	ldr	r1, [r2, #0]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004aca:	fa00 f202 	lsl.w	r2, r0, r2
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	601a      	str	r2, [r3, #0]
 8004ad2:	e011      	b.n	8004af8 <DAC_DMACmd+0x58>
  }
  else
  {
    /* Disable the selected DAC channel DMA request */
    DAC->CR &= (~(DAC_CR_DMAEN1 << DAC_Channel));
 8004ad4:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004ad8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004adc:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004ae0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004ae4:	6811      	ldr	r1, [r2, #0]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004aec:	fa00 f202 	lsl.w	r2, r0, r2
 8004af0:	ea6f 0202 	mvn.w	r2, r2
 8004af4:	400a      	ands	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
  }
}
 8004af8:	f107 070c 	add.w	r7, r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop

08004b04 <DAC_ITConfig>:
  * @param  NewState: new state of the specified DAC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */ 
void DAC_ITConfig(uint32_t DAC_Channel, uint32_t DAC_IT, FunctionalState NewState)  
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_DAC_IT(DAC_IT)); 

  if (NewState != DISABLE)
 8004b12:	79fb      	ldrb	r3, [r7, #7]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00f      	beq.n	8004b38 <DAC_ITConfig+0x34>
  {
    /* Enable the selected DAC interrupts */
    DAC->CR |=  (DAC_IT << DAC_Channel);
 8004b18:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004b1c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b20:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004b24:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b28:	6811      	ldr	r1, [r2, #0]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	68b8      	ldr	r0, [r7, #8]
 8004b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b32:	430a      	orrs	r2, r1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e010      	b.n	8004b5a <DAC_ITConfig+0x56>
  }
  else
  {
    /* Disable the selected DAC interrupts */
    DAC->CR &= (~(uint32_t)(DAC_IT << DAC_Channel));
 8004b38:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004b3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b40:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
 8004b44:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8004b48:	6811      	ldr	r1, [r2, #0]
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	68b8      	ldr	r0, [r7, #8]
 8004b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b52:	ea6f 0202 	mvn.w	r2, r2
 8004b56:	400a      	ands	r2, r1
 8004b58:	601a      	str	r2, [r3, #0]
  }
}
 8004b5a:	f107 0714 	add.w	r7, r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bc80      	pop	{r7}
 8004b62:	4770      	bx	lr

08004b64 <DAC_GetFlagStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_FLAG (SET or RESET).
  */
FlagStatus DAC_GetFlagStatus(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8004b6e:	f04f 0300 	mov.w	r3, #0
 8004b72:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Check the status of the specified DAC flag */
  if ((DAC->SR & (DAC_FLAG << DAC_Channel)) != (uint8_t)RESET)
 8004b74:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004b78:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004b7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	fa01 f303 	lsl.w	r3, r1, r3
 8004b86:	4013      	ands	r3, r2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d003      	beq.n	8004b94 <DAC_GetFlagStatus+0x30>
  {
    /* DAC_FLAG is set */
    bitstatus = SET;
 8004b8c:	f04f 0301 	mov.w	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e002      	b.n	8004b9a <DAC_GetFlagStatus+0x36>
  }
  else
  {
    /* DAC_FLAG is reset */
    bitstatus = RESET;
 8004b94:	f04f 0300 	mov.w	r3, #0
 8004b98:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_FLAG status */
  return  bitstatus;
 8004b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f107 0714 	add.w	r7, r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <DAC_ClearFlag>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearFlag(uint32_t DAC_Channel, uint32_t DAC_FLAG)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_FLAG(DAC_FLAG));

  /* Clear the selected DAC flags */
  DAC->SR = (DAC_FLAG << DAC_Channel);
 8004bb2:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004bb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8004bc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004bc4:	f107 070c 	add.w	r7, r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop

08004bd0 <DAC_GetITStatus>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).
  * @retval The new state of DAC_IT (SET or RESET).
  */
ITStatus DAC_GetITStatus(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8004bda:	f04f 0300 	mov.w	r3, #0
 8004bde:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8004be0:	f04f 0300 	mov.w	r3, #0
 8004be4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT));

  /* Get the DAC_IT enable bit status */
  enablestatus = (DAC->CR & (DAC_IT << DAC_Channel)) ;
 8004be6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004bea:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6839      	ldr	r1, [r7, #0]
 8004bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	60bb      	str	r3, [r7, #8]
  
  /* Check the status of the specified DAC interrupt */
  if (((DAC->SR & (DAC_IT << DAC_Channel)) != (uint32_t)RESET) && enablestatus)
 8004bfc:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004c00:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0e:	4013      	ands	r3, r2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d006      	beq.n	8004c22 <DAC_GetITStatus+0x52>
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <DAC_GetITStatus+0x52>
  {
    /* DAC_IT is set */
    bitstatus = SET;
 8004c1a:	f04f 0301 	mov.w	r3, #1
 8004c1e:	73fb      	strb	r3, [r7, #15]
 8004c20:	e002      	b.n	8004c28 <DAC_GetITStatus+0x58>
  }
  else
  {
    /* DAC_IT is reset */
    bitstatus = RESET;
 8004c22:	f04f 0300 	mov.w	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DAC_IT status */
  return  bitstatus;
 8004c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f107 0714 	add.w	r7, r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <DAC_ClearITPendingBit>:
  * @note   The DMA underrun occurs when a second external trigger arrives before the 
  *         acknowledgement for the first external trigger is received (first request).                           
  * @retval None
  */
void DAC_ClearITPendingBit(uint32_t DAC_Channel, uint32_t DAC_IT)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_DAC_IT(DAC_IT)); 

  /* Clear the selected DAC interrupt pending bits */
  DAC->SR = (DAC_IT << DAC_Channel);
 8004c42:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004c46:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6839      	ldr	r1, [r7, #0]
 8004c4e:	fa01 f202 	lsl.w	r2, r1, r2
 8004c52:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004c54:	f107 070c 	add.w	r7, r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bc80      	pop	{r7}
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop

08004c60 <DBGMCU_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @param  None
  * @retval Device revision identifier
  */
uint32_t DBGMCU_GetREVID(void)
{
 8004c60:	b480      	push	{r7}
 8004c62:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE >> 16);
 8004c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c68:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop

08004c7c <DBGMCU_GetDEVID>:
  * @brief  Returns the device identifier.
  * @param  None
  * @retval Device identifier
  */
uint32_t DBGMCU_GetDEVID(void)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
   return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
 8004c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c84:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 8004c8e:	ea4f 5313 	mov.w	r3, r3, lsr #20
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bc80      	pop	{r7}
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop

08004c9c <DBGMCU_Config>:
  * @param  NewState: new state of the specified low power mode in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <DBGMCU_Config+0x2c>
  {
    DBGMCU->CR |= DBGMCU_Periph;
 8004cae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cb2:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cba:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004cbe:	6851      	ldr	r1, [r2, #4]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	e00d      	b.n	8004ce4 <DBGMCU_Config+0x48>
  }
  else
  {
    DBGMCU->CR &= ~DBGMCU_Periph;
 8004cc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ccc:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004cd0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004cd4:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004cd8:	6851      	ldr	r1, [r2, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	ea6f 0202 	mvn.w	r2, r2
 8004ce0:	400a      	ands	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }
}
 8004ce4:	f107 070c 	add.w	r7, r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop

08004cf0 <DBGMCU_APB1PeriphConfig>:
  *     @arg DBGMCU_CAN1_STOP: Debug CAN2 stopped when Core is halted        
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00c      	beq.n	8004d1c <DBGMCU_APB1PeriphConfig+0x2c>
  {
    DBGMCU->APB1FZ |= DBGMCU_Periph;
 8004d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d06:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d0e:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004d12:	6891      	ldr	r1, [r2, #8]
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	e00d      	b.n	8004d38 <DBGMCU_APB1PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB1FZ &= ~DBGMCU_Periph;
 8004d1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d20:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d28:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004d2c:	6891      	ldr	r1, [r2, #8]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	ea6f 0202 	mvn.w	r2, r2
 8004d34:	400a      	ands	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  }
}
 8004d38:	f107 070c 	add.w	r7, r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bc80      	pop	{r7}
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop

08004d44 <DBGMCU_APB2PeriphConfig>:
  * @param  NewState: new state of the specified peripheral in Debug mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00c      	beq.n	8004d70 <DBGMCU_APB2PeriphConfig+0x2c>
  {
    DBGMCU->APB2FZ |= DBGMCU_Periph;
 8004d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d5a:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d62:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004d66:	68d1      	ldr	r1, [r2, #12]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	60da      	str	r2, [r3, #12]
 8004d6e:	e00d      	b.n	8004d8c <DBGMCU_APB2PeriphConfig+0x48>
  }
  else
  {
    DBGMCU->APB2FZ &= ~DBGMCU_Periph;
 8004d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d74:	f2ce 0304 	movt	r3, #57348	; 0xe004
 8004d78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d7c:	f2ce 0204 	movt	r2, #57348	; 0xe004
 8004d80:	68d1      	ldr	r1, [r2, #12]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	ea6f 0202 	mvn.w	r2, r2
 8004d88:	400a      	ands	r2, r1
 8004d8a:	60da      	str	r2, [r3, #12]
  }
}
 8004d8c:	f107 070c 	add.w	r7, r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop

08004d98 <DCMI_DeInit>:
  * @brief  Deinitializes the DCMI registers to their default reset values.
  * @param  None
  * @retval None
  */
void DCMI_DeInit(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  DCMI->CR = 0x0;
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
  DCMI->IER = 0x0;
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004db2:	f04f 0200 	mov.w	r2, #0
 8004db6:	60da      	str	r2, [r3, #12]
  DCMI->ICR = 0x1F;
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004dc0:	f04f 021f 	mov.w	r2, #31
 8004dc4:	615a      	str	r2, [r3, #20]
  DCMI->ESCR = 0x0;
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004dce:	f04f 0200 	mov.w	r2, #0
 8004dd2:	619a      	str	r2, [r3, #24]
  DCMI->ESUR = 0x0;
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	61da      	str	r2, [r3, #28]
  DCMI->CWSTRTR = 0x0;
 8004de2:	f04f 0300 	mov.w	r3, #0
 8004de6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004dea:	f04f 0200 	mov.w	r2, #0
 8004dee:	621a      	str	r2, [r3, #32]
  DCMI->CWSIZER = 0x0;
 8004df0:	f04f 0300 	mov.w	r3, #0
 8004df4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bc80      	pop	{r7}
 8004e02:	4770      	bx	lr

08004e04 <DCMI_Init>:
  * @param  DCMI_InitStruct: pointer to a DCMI_InitTypeDef structure that contains 
  *         the configuration information for the DCMI.
  * @retval None
  */
void DCMI_Init(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b085      	sub	sp, #20
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  uint32_t temp = 0x0;
 8004e0c:	f04f 0300 	mov.w	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DCMI_CAPTURE_RATE(DCMI_InitStruct->DCMI_CaptureRate));
  assert_param(IS_DCMI_EXTENDED_DATA(DCMI_InitStruct->DCMI_ExtendedDataMode));

  /* The DCMI configuration registers should be programmed correctly before 
  enabling the CR_ENABLE Bit and the CR_CAPTURE Bit */
  DCMI->CR &= ~(DCMI_CR_ENABLE | DCMI_CR_CAPTURE);
 8004e12:	f04f 0300 	mov.w	r3, #0
 8004e16:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004e22:	6812      	ldr	r2, [r2, #0]
 8004e24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]
   
  /* Reset the old DCMI configuration */
  temp = DCMI->CR;
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
  
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f423 637e 	bic.w	r3, r3, #4064	; 0xfe0
 8004e40:	f023 0312 	bic.w	r3, r3, #18
 8004e44:	60fb      	str	r3, [r7, #12]
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	881a      	ldrh	r2, [r3, #0]
                     DCMI_InitStruct->DCMI_SynchroMode |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	885b      	ldrh	r3, [r3, #2]
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	b29a      	uxth	r2, r3
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	889b      	ldrh	r3, [r3, #4]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004e56:	4313      	orrs	r3, r2
 8004e58:	b29a      	uxth	r2, r3
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	88db      	ldrh	r3, [r3, #6]
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	b29a      	uxth	r2, r3
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	891b      	ldrh	r3, [r3, #8]
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004e66:	4313      	orrs	r3, r2
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	895b      	ldrh	r3, [r3, #10]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	b29a      	uxth	r2, r3
                     DCMI_InitStruct->DCMI_ExtendedDataMode);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	899b      	ldrh	r3, [r3, #12]
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
                     DCMI_InitStruct->DCMI_SynchroMode |
                     DCMI_InitStruct->DCMI_PCKPolarity |
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
 8004e76:	4313      	orrs	r3, r2
 8004e78:	b29b      	uxth	r3, r3
  temp &= ~((uint32_t)DCMI_CR_CM     | DCMI_CR_ESS   | DCMI_CR_PCKPOL |
                      DCMI_CR_HSPOL  | DCMI_CR_VSPOL | DCMI_CR_FCRC_0 | 
                      DCMI_CR_FCRC_1 | DCMI_CR_EDM_0 | DCMI_CR_EDM_1); 
                  
  /* Sets the new configuration of the DCMI peripheral */
  temp |= ((uint32_t)DCMI_InitStruct->DCMI_CaptureMode |
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
                     DCMI_InitStruct->DCMI_VSPolarity |
                     DCMI_InitStruct->DCMI_HSPolarity |
                     DCMI_InitStruct->DCMI_CaptureRate |
                     DCMI_InitStruct->DCMI_ExtendedDataMode);

  DCMI->CR = temp;                              
 8004e80:	f04f 0300 	mov.w	r3, #0
 8004e84:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	601a      	str	r2, [r3, #0]
}
 8004e8c:	f107 0714 	add.w	r7, r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <DCMI_StructInit>:
  * @param  DCMI_InitStruct : pointer to a DCMI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void DCMI_StructInit(DCMI_InitTypeDef* DCMI_InitStruct)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  DCMI_InitStruct->DCMI_CaptureMode = DCMI_CaptureMode_Continuous;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	801a      	strh	r2, [r3, #0]
  DCMI_InitStruct->DCMI_SynchroMode = DCMI_SynchroMode_Hardware;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	805a      	strh	r2, [r3, #2]
  DCMI_InitStruct->DCMI_PCKPolarity = DCMI_PCKPolarity_Falling;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	809a      	strh	r2, [r3, #4]
  DCMI_InitStruct->DCMI_VSPolarity = DCMI_VSPolarity_Low;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f04f 0200 	mov.w	r2, #0
 8004ebe:	80da      	strh	r2, [r3, #6]
  DCMI_InitStruct->DCMI_HSPolarity = DCMI_HSPolarity_Low;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	811a      	strh	r2, [r3, #8]
  DCMI_InitStruct->DCMI_CaptureRate = DCMI_CaptureRate_All_Frame;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f04f 0200 	mov.w	r2, #0
 8004ece:	815a      	strh	r2, [r3, #10]
  DCMI_InitStruct->DCMI_ExtendedDataMode = DCMI_ExtendedDataMode_8b;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	819a      	strh	r2, [r3, #12]
}
 8004ed8:	f107 070c 	add.w	r7, r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr
 8004ee2:	bf00      	nop

08004ee4 <DCMI_CROPConfig>:
  * @param  DCMI_CROPInitStruct:  pointer to a DCMI_CROPInitTypeDef structure that 
  *         contains the configuration information for the DCMI peripheral CROP mode.
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	8852      	ldrh	r2, [r2, #2]
 8004ef8:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_CROPConfig(DCMI_CROPInitTypeDef* DCMI_CROPInitStruct)
{  
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
 8004f02:	430a      	orrs	r2, r1
 8004f04:	621a      	str	r2, [r3, #32]
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	88d2      	ldrh	r2, [r2, #6]
 8004f12:	4611      	mov	r1, r2
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	8892      	ldrh	r2, [r2, #4]
 8004f18:	ea4f 4202 	mov.w	r2, r2, lsl #16
  /* Sets the CROP window coordinates */
  DCMI->CWSTRTR = (uint32_t)((uint32_t)DCMI_CROPInitStruct->DCMI_HorizontalOffsetCount |
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalStartLine << 16));

  /* Sets the CROP window size */
  DCMI->CWSIZER = (uint32_t)(DCMI_CROPInitStruct->DCMI_CaptureCount |
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	625a      	str	r2, [r3, #36]	; 0x24
                  ((uint32_t)DCMI_CROPInitStruct->DCMI_VerticalLineCount << 16));
}
 8004f20:	f107 070c 	add.w	r7, r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop

08004f2c <DCMI_CROPCmd>:
  * @param  NewState: new state of the DCMI Crop feature. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CROPCmd(FunctionalState NewState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 8004f36:	79fb      	ldrb	r3, [r7, #7]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <DCMI_CROPCmd+0x2a>
  {
    /* Enable the DCMI Crop feature */
    DCMI->CR |= (uint32_t)DCMI_CR_CROP;
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	f042 0204 	orr.w	r2, r2, #4
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	e00b      	b.n	8004f6e <DCMI_CROPCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Crop feature */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CROP;
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	f022 0204 	bic.w	r2, r2, #4
 8004f6c:	601a      	str	r2, [r3, #0]
  }
}
 8004f6e:	f107 070c 	add.w	r7, r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bc80      	pop	{r7}
 8004f76:	4770      	bx	lr

08004f78 <DCMI_SetEmbeddedSynchroCodes>:
  * @param  DCMI_CodesInitTypeDef: pointer to a DCMI_CodesInitTypeDef structure that
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8004f80:	f04f 0300 	mov.w	r3, #0
 8004f84:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	7812      	ldrb	r2, [r2, #0]
 8004f8c:	4611      	mov	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	7852      	ldrb	r2, [r2, #1]
 8004f92:	ea4f 2202 	mov.w	r2, r2, lsl #8
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8004f96:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
 8004f98:	687a      	ldr	r2, [r7, #4]
 8004f9a:	7892      	ldrb	r2, [r2, #2]
 8004f9c:	ea4f 4202 	mov.w	r2, r2, lsl #16
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
 8004fa0:	4311      	orrs	r1, r2
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	78d2      	ldrb	r2, [r2, #3]
 8004fa6:	ea4f 6202 	mov.w	r2, r2, lsl #24
  *         contains the embedded synchronization codes for the DCMI peripheral.
  * @retval None
  */
void DCMI_SetEmbeddedSynchroCodes(DCMI_CodesInitTypeDef* DCMI_CodesInitStruct)
{
  DCMI->ESCR = (uint32_t)(DCMI_CodesInitStruct->DCMI_FrameStartCode |
 8004faa:	430a      	orrs	r2, r1
 8004fac:	619a      	str	r2, [r3, #24]
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineStartCode << 8)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_LineEndCode << 16)|
                          ((uint32_t)DCMI_CodesInitStruct->DCMI_FrameEndCode << 24));
}
 8004fae:	f107 070c 	add.w	r7, r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <DCMI_JPEGCmd>:
  * @param  NewState: new state of the DCMI JPEG format. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_JPEGCmd(FunctionalState NewState)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
 
  if (NewState != DISABLE)
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00c      	beq.n	8004fe2 <DCMI_JPEGCmd+0x2a>
  {
    /* Enable the DCMI JPEG format */
    DCMI->CR |= (uint32_t)DCMI_CR_JPEG;
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	f042 0208 	orr.w	r2, r2, #8
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e00b      	b.n	8004ffa <DCMI_JPEGCmd+0x42>
  }
  else
  {
    /* Disable the DCMI JPEG format */
    DCMI->CR &= ~(uint32_t)DCMI_CR_JPEG;
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f022 0208 	bic.w	r2, r2, #8
 8004ff8:	601a      	str	r2, [r3, #0]
  }
}
 8004ffa:	f107 070c 	add.w	r7, r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr

08005004 <DCMI_Cmd>:
  * @param  NewState: new state of the DCMI interface. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_Cmd(FunctionalState NewState)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	4603      	mov	r3, r0
 800500c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d00c      	beq.n	800502e <DCMI_Cmd+0x2a>
  {
    /* Enable the DCMI by setting ENABLE bit */
    DCMI->CR |= (uint32_t)DCMI_CR_ENABLE;
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005024:	6812      	ldr	r2, [r2, #0]
 8005026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	e00b      	b.n	8005046 <DCMI_Cmd+0x42>
  }
  else
  {
    /* Disable the DCMI by clearing ENABLE bit */
    DCMI->CR &= ~(uint32_t)DCMI_CR_ENABLE;
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800503e:	6812      	ldr	r2, [r2, #0]
 8005040:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005044:	601a      	str	r2, [r3, #0]
  }
}
 8005046:	f107 070c 	add.w	r7, r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr

08005050 <DCMI_CaptureCmd>:
  * @param  NewState: new state of the DCMI capture. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_CaptureCmd(FunctionalState NewState)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	4603      	mov	r3, r0
 8005058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00c      	beq.n	800507a <DCMI_CaptureCmd+0x2a>
  {
    /* Enable the DCMI Capture */
    DCMI->CR |= (uint32_t)DCMI_CR_CAPTURE;
 8005060:	f04f 0300 	mov.w	r3, #0
 8005064:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005068:	f04f 0200 	mov.w	r2, #0
 800506c:	f2c5 0205 	movt	r2, #20485	; 0x5005
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	e00b      	b.n	8005092 <DCMI_CaptureCmd+0x42>
  }
  else
  {
    /* Disable the DCMI Capture */
    DCMI->CR &= ~(uint32_t)DCMI_CR_CAPTURE;
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005082:	f04f 0200 	mov.w	r2, #0
 8005086:	f2c5 0205 	movt	r2, #20485	; 0x5005
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
  }
}
 8005092:	f107 070c 	add.w	r7, r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	bc80      	pop	{r7}
 800509a:	4770      	bx	lr

0800509c <DCMI_ReadData>:
  * @brief  Reads the data stored in the DR register.
  * @param  None 
  * @retval Data register value
  */
uint32_t DCMI_ReadData(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return DCMI->DR;
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bc80      	pop	{r7}
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop

080050b4 <DCMI_ITConfig>:
  * @param  NewState: new state of the specified DCMI interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DCMI_ITConfig(uint16_t DCMI_IT, FunctionalState NewState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	4602      	mov	r2, r0
 80050bc:	460b      	mov	r3, r1
 80050be:	80fa      	strh	r2, [r7, #6]
 80050c0:	717b      	strb	r3, [r7, #5]
  /* Check the parameters */
  assert_param(IS_DCMI_CONFIG_IT(DCMI_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80050c2:	797b      	ldrb	r3, [r7, #5]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00c      	beq.n	80050e2 <DCMI_ITConfig+0x2e>
  {
    /* Enable the Interrupt sources */
    DCMI->IER |= DCMI_IT;
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80050d0:	f04f 0200 	mov.w	r2, #0
 80050d4:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80050d8:	68d1      	ldr	r1, [r2, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	430a      	orrs	r2, r1
 80050de:	60da      	str	r2, [r3, #12]
 80050e0:	e00e      	b.n	8005100 <DCMI_ITConfig+0x4c>
  }
  else
  {
    /* Disable the Interrupt sources */
    DCMI->IER &= (uint16_t)(~DCMI_IT);
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80050ea:	f04f 0200 	mov.w	r2, #0
 80050ee:	f2c5 0205 	movt	r2, #20485	; 0x5005
 80050f2:	68d1      	ldr	r1, [r2, #12]
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	ea6f 0202 	mvn.w	r2, r2
 80050fa:	b292      	uxth	r2, r2
 80050fc:	400a      	ands	r2, r1
 80050fe:	60da      	str	r2, [r3, #12]
  }  
}
 8005100:	f107 070c 	add.w	r7, r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	bc80      	pop	{r7}
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop

0800510c <DCMI_GetFlagStatus>:
  *            @arg DCMI_FLAG_VSYNC: VSYNC flag mask
  *            @arg DCMI_FLAG_FNE: Fifo not empty flag mask
  * @retval The new state of DCMI_FLAG (SET or RESET).
  */
FlagStatus DCMI_GetFlagStatus(uint16_t DCMI_FLAG)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	4603      	mov	r3, r0
 8005114:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8005116:	f04f 0300 	mov.w	r3, #0
 800511a:	75fb      	strb	r3, [r7, #23]
  uint32_t dcmireg, tempreg = 0;
 800511c:	f04f 0300 	mov.w	r3, #0
 8005120:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_DCMI_GET_FLAG(DCMI_FLAG));
  
  /* Get the DCMI register index */
  dcmireg = (((uint16_t)DCMI_FLAG) >> 12);
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	ea4f 3313 	mov.w	r3, r3, lsr #12
 8005128:	b29b      	uxth	r3, r3
 800512a:	60fb      	str	r3, [r7, #12]
  
  if (dcmireg == 0x01) /* The FLAG is in RISR register */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d106      	bne.n	8005140 <DCMI_GetFlagStatus+0x34>
  {
    tempreg= DCMI->RISR;
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e00f      	b.n	8005160 <DCMI_GetFlagStatus+0x54>
  }
  else if (dcmireg == 0x02) /* The FLAG is in SR register */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b02      	cmp	r3, #2
 8005144:	d106      	bne.n	8005154 <DCMI_GetFlagStatus+0x48>
  {
    tempreg = DCMI->SR;
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	e005      	b.n	8005160 <DCMI_GetFlagStatus+0x54>
  }
  else /* The FLAG is in MISR register */
  {
    tempreg = DCMI->MISR;
 8005154:	f04f 0300 	mov.w	r3, #0
 8005158:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	613b      	str	r3, [r7, #16]
  }
  
  if ((tempreg & DCMI_FLAG) != (uint16_t)RESET )
 8005160:	88fa      	ldrh	r2, [r7, #6]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4013      	ands	r3, r2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d003      	beq.n	8005172 <DCMI_GetFlagStatus+0x66>
  {
    bitstatus = SET;
 800516a:	f04f 0301 	mov.w	r3, #1
 800516e:	75fb      	strb	r3, [r7, #23]
 8005170:	e002      	b.n	8005178 <DCMI_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
 8005172:	f04f 0300 	mov.w	r3, #0
 8005176:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the DCMI_FLAG status */
  return  bitstatus;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
}
 800517a:	4618      	mov	r0, r3
 800517c:	f107 071c 	add.w	r7, r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	bc80      	pop	{r7}
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop

08005188 <DCMI_ClearFlag>:
  *            @arg DCMI_FLAG_VSYNCRI: VSYNC Raw flag mask
  *            @arg DCMI_FLAG_LINERI: Line Raw flag mask
  * @retval None
  */
void DCMI_ClearFlag(uint16_t DCMI_FLAG)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_DCMI_CLEAR_FLAG(DCMI_FLAG));
  
  /* Clear the flag by writing in the ICR register 1 in the corresponding 
  Flag position*/
  
  DCMI->ICR = DCMI_FLAG;
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	f2c5 0305 	movt	r3, #20485	; 0x5005
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	615a      	str	r2, [r3, #20]
}
 800519e:	f107 070c 	add.w	r7, r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bc80      	pop	{r7}
 80051a6:	4770      	bx	lr

080051a8 <DCMI_GetITStatus>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval The new state of DCMI_IT (SET or RESET).
  */
ITStatus DCMI_GetITStatus(uint16_t DCMI_IT)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	80fb      	strh	r3, [r7, #6]
  ITStatus bitstatus = RESET;
 80051b2:	f04f 0300 	mov.w	r3, #0
 80051b6:	73fb      	strb	r3, [r7, #15]
  uint32_t itstatus = 0;
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DCMI_GET_IT(DCMI_IT));
  
  itstatus = DCMI->MISR & DCMI_IT; /* Only masked interrupts are checked */
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	f2c5 0305 	movt	r3, #20485	; 0x5005
 80051c6:	691a      	ldr	r2, [r3, #16]
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	4013      	ands	r3, r2
 80051cc:	60bb      	str	r3, [r7, #8]
  
  if ((itstatus != (uint16_t)RESET))
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <DCMI_GetITStatus+0x34>
  {
    bitstatus = SET;
 80051d4:	f04f 0301 	mov.w	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
 80051da:	e002      	b.n	80051e2 <DCMI_GetITStatus+0x3a>
  }
  else
  {
    bitstatus = RESET;
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	f107 0714 	add.w	r7, r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <DCMI_ClearITPendingBit>:
  *            @arg DCMI_IT_VSYNC: VSYNC interrupt mask
  *            @arg DCMI_IT_LINE: Line interrupt mask
  * @retval None
  */
void DCMI_ClearITPendingBit(uint16_t DCMI_IT)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* Clear the interrupt pending Bit by writing in the ICR register 1 in the 
  corresponding pending Bit position*/
  
  DCMI->ICR = DCMI_IT;
 80051fa:	f04f 0300 	mov.w	r3, #0
 80051fe:	f2c5 0305 	movt	r3, #20485	; 0x5005
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	615a      	str	r2, [r3, #20]
}
 8005206:	f107 070c 	add.w	r7, r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	bc80      	pop	{r7}
 800520e:	4770      	bx	lr

08005210 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f023 0201 	bic.w	r2, r3, #1
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f04f 0200 	mov.w	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f04f 0221 	mov.w	r2, #33	; 0x21
 8005252:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	f246 0310 	movw	r3, #24592	; 0x6010
 800525a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800525e:	429a      	cmp	r2, r3
 8005260:	d107      	bne.n	8005272 <DMA_DeInit+0x62>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005262:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005266:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800526a:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	e0eb      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream1)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	f246 0328 	movw	r3, #24616	; 0x6028
 8005278:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800527c:	429a      	cmp	r2, r3
 800527e:	d107      	bne.n	8005290 <DMA_DeInit+0x80>
  {
    /* Reset interrupt pending bits for DMA1 Stream1 */
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8005280:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005284:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005288:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800528c:	609a      	str	r2, [r3, #8]
 800528e:	e0dc      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream2)
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	f246 0340 	movw	r3, #24640	; 0x6040
 8005296:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800529a:	429a      	cmp	r2, r3
 800529c:	d107      	bne.n	80052ae <DMA_DeInit+0x9e>
  {
    /* Reset interrupt pending bits for DMA1 Stream2 */
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 800529e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80052a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052a6:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80052aa:	609a      	str	r2, [r3, #8]
 80052ac:	e0cd      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream3)
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	f246 0358 	movw	r3, #24664	; 0x6058
 80052b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d107      	bne.n	80052cc <DMA_DeInit+0xbc>
  {
    /* Reset interrupt pending bits for DMA1 Stream3 */
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 80052bc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80052c0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052c4:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80052c8:	609a      	str	r2, [r3, #8]
 80052ca:	e0be      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream4)
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	f246 0370 	movw	r3, #24688	; 0x6070
 80052d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d109      	bne.n	80052ee <DMA_DeInit+0xde>
  {
    /* Reset interrupt pending bits for DMA1 Stream4 */
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 80052da:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80052de:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052e2:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80052e6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80052ea:	60da      	str	r2, [r3, #12]
 80052ec:	e0ad      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream5)
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	f246 0388 	movw	r3, #24712	; 0x6088
 80052f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d109      	bne.n	8005310 <DMA_DeInit+0x100>
  {
    /* Reset interrupt pending bits for DMA1 Stream5 */
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 80052fc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005300:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005304:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005308:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	e09c      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream6)
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	f246 03a0 	movw	r3, #24736	; 0x60a0
 8005316:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800531a:	429a      	cmp	r2, r3
 800531c:	d109      	bne.n	8005332 <DMA_DeInit+0x122>
  {
    /* Reset interrupt pending bits for DMA1 Stream6 */
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800531e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005322:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800532e:	60da      	str	r2, [r3, #12]
 8005330:	e08b      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA1_Stream7)
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	f246 03b8 	movw	r3, #24760	; 0x60b8
 8005338:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800533c:	429a      	cmp	r2, r3
 800533e:	d107      	bne.n	8005350 <DMA_DeInit+0x140>
  {
    /* Reset interrupt pending bits for DMA1 Stream7 */
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8005340:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005344:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005348:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800534c:	60da      	str	r2, [r3, #12]
 800534e:	e07c      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream0)
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	f246 4310 	movw	r3, #25616	; 0x6410
 8005356:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800535a:	429a      	cmp	r2, r3
 800535c:	d107      	bne.n	800536e <DMA_DeInit+0x15e>
  {
    /* Reset interrupt pending bits for DMA2 Stream0 */
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 800535e:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005362:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005366:	f04f 023d 	mov.w	r2, #61	; 0x3d
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	e06d      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream1)
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	f246 4328 	movw	r3, #25640	; 0x6428
 8005374:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005378:	429a      	cmp	r2, r3
 800537a:	d107      	bne.n	800538c <DMA_DeInit+0x17c>
  {
    /* Reset interrupt pending bits for DMA2 Stream1 */
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 800537c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005380:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005384:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005388:	609a      	str	r2, [r3, #8]
 800538a:	e05e      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream2)
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	f246 4340 	movw	r3, #25664	; 0x6440
 8005392:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005396:	429a      	cmp	r2, r3
 8005398:	d107      	bne.n	80053aa <DMA_DeInit+0x19a>
  {
    /* Reset interrupt pending bits for DMA2 Stream2 */
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800539a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800539e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053a2:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80053a6:	609a      	str	r2, [r3, #8]
 80053a8:	e04f      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream3)
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	f246 4358 	movw	r3, #25688	; 0x6458
 80053b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d107      	bne.n	80053c8 <DMA_DeInit+0x1b8>
  {
    /* Reset interrupt pending bits for DMA2 Stream3 */
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 80053b8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80053bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053c0:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 80053c4:	609a      	str	r2, [r3, #8]
 80053c6:	e040      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream4)
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	f246 4370 	movw	r3, #25712	; 0x6470
 80053ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d109      	bne.n	80053ea <DMA_DeInit+0x1da>
  {
    /* Reset interrupt pending bits for DMA2 Stream4 */
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 80053d6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80053da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053de:	f04f 023d 	mov.w	r2, #61	; 0x3d
 80053e2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80053e6:	60da      	str	r2, [r3, #12]
 80053e8:	e02f      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream5)
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	f246 4388 	movw	r3, #25736	; 0x6488
 80053f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d109      	bne.n	800540c <DMA_DeInit+0x1fc>
  {
    /* Reset interrupt pending bits for DMA2 Stream5 */
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80053f8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80053fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005400:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005404:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	e01e      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else if (DMAy_Streamx == DMA2_Stream6)
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	f246 43a0 	movw	r3, #25760	; 0x64a0
 8005412:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005416:	429a      	cmp	r2, r3
 8005418:	d109      	bne.n	800542e <DMA_DeInit+0x21e>
  {
    /* Reset interrupt pending bits for DMA2 Stream6 */
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800541a:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800541e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f2c2 023d 	movt	r2, #8253	; 0x203d
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e00d      	b.n	800544a <DMA_DeInit+0x23a>
  }
  else 
  {
    if (DMAy_Streamx == DMA2_Stream7)
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	f246 43b8 	movw	r3, #25784	; 0x64b8
 8005434:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005438:	429a      	cmp	r2, r3
 800543a:	d106      	bne.n	800544a <DMA_DeInit+0x23a>
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800543c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005444:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005448:	60da      	str	r2, [r3, #12]
    }
  }
}
 800544a:	f107 070c 	add.w	r7, r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr

08005454 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	f248 033f 	movw	r3, #32831	; 0x803f
 8005470:	f2cf 031c 	movt	r3, #61468	; 0xf01c
 8005474:	4013      	ands	r3, r2
 8005476:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005486:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	69db      	ldr	r3, [r3, #28]
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005492:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800549e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80054aa:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b0:	4313      	orrs	r3, r2
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0307 	bic.w	r3, r3, #7
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	4313      	orrs	r3, r2
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	691a      	ldr	r2, [r3, #16]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	60da      	str	r2, [r3, #12]
}
 80054fa:	f107 0714 	add.w	r7, r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <DMA_StructInit>:
  * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /*-------------- Reset DMA init structure parameters values ----------------*/
  /* Initialize the DMA_Channel member */
  DMA_InitStruct->DMA_Channel = 0;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA_PeripheralBaseAddr member */
  DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA_Memory0BaseAddr member */
  DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	609a      	str	r2, [r3, #8]

  /* Initialize the DMA_DIR member */
  DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	60da      	str	r2, [r3, #12]

  /* Initialize the DMA_BufferSize member */
  DMA_InitStruct->DMA_BufferSize = 0;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	611a      	str	r2, [r3, #16]

  /* Initialize the DMA_PeripheralInc member */
  DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f04f 0200 	mov.w	r2, #0
 800553a:	615a      	str	r2, [r3, #20]

  /* Initialize the DMA_MemoryInc member */
  DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f04f 0200 	mov.w	r2, #0
 8005542:	619a      	str	r2, [r3, #24]

  /* Initialize the DMA_PeripheralDataSize member */
  DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	61da      	str	r2, [r3, #28]

  /* Initialize the DMA_MemoryDataSize member */
  DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA_Mode member */
  DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f04f 0200 	mov.w	r2, #0
 800555a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the DMA_Priority member */
  DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	629a      	str	r2, [r3, #40]	; 0x28

  /* Initialize the DMA_FIFOMode member */
  DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the DMA_FIFOThreshold member */
  DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the DMA_MemoryBurst member */
  DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA_PeripheralBurst member */
  DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005584:	f107 070c 	add.w	r7, r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e005      	b.n	80055bc <DMA_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f023 0201 	bic.w	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	601a      	str	r2, [r3, #0]
  }
}
 80055bc:	f107 070c 	add.w	r7, r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bc80      	pop	{r7}
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop

080055c8 <DMA_PeriphIncOffsetSizeConfig>:
  *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
  *                                         fixed to 4 (32-bit aligned addresses). 
  * @retval None
  */
void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));

  /* Check the needed Peripheral increment offset */
  if(DMA_Pincos != DMA_PINCOS_Psize)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d006      	beq.n	80055e6 <DMA_PeriphIncOffsetSizeConfig+0x1e>
  {
    /* Configure DMA_SxCR_PINCOS bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	e005      	b.n	80055f2 <DMA_PeriphIncOffsetSizeConfig+0x2a>
  }
  else
  {
    /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	601a      	str	r2, [r3, #0]
  }
}
 80055f2:	f107 070c 	add.w	r7, r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bc80      	pop	{r7}
 80055fa:	4770      	bx	lr

080055fc <DMA_FlowControllerConfig>:
  *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
  *                                          is the peripheral.    
  * @retval None
  */
void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));

  /* Check the needed flow controller  */
  if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d006      	beq.n	800561a <DMA_FlowControllerConfig+0x1e>
  {
    /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f043 0220 	orr.w	r2, r3, #32
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	e005      	b.n	8005626 <DMA_FlowControllerConfig+0x2a>
  }
  else
  {
    /* Clear the PFCTRL bit: Memory is the flow controller */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f023 0220 	bic.w	r2, r3, #32
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	601a      	str	r2, [r3, #0]
  }
}
 8005626:	f107 070c 	add.w	r7, r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr

08005630 <DMA_SetCurrDataCounter>:
  *         DMAy_SxPAR register is considered as Peripheral.
  *      
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Write the number of data units to be transferred */
  DMAy_Streamx->NDTR = (uint16_t)Counter;
 800563c:	887a      	ldrh	r2, [r7, #2]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	605a      	str	r2, [r3, #4]
}
 8005642:	f107 070c 	add.w	r7, r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	bc80      	pop	{r7}
 800564a:	4770      	bx	lr

0800564c <DMA_GetCurrDataCounter>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The number of remaining data units in the current DMAy Streamx transfer.
  */
uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Return the number of remaining data units for DMAy Streamx */
  return ((uint16_t)(DMAy_Streamx->NDTR));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	b29b      	uxth	r3, r3
}
 800565a:	4618      	mov	r0, r3
 800565c:	f107 070c 	add.w	r7, r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	bc80      	pop	{r7}
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop

08005668 <DMA_DoubleBufferModeConfig>:
  *   
  * @retval None
  */
void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
                                uint32_t DMA_CurrentMemory)
{  
 8005668:	b480      	push	{r7}
 800566a:	b085      	sub	sp, #20
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));

  if (DMA_CurrentMemory != DMA_Memory_0)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d006      	beq.n	8005688 <DMA_DoubleBufferModeConfig+0x20>
  {
    /* Set Memory 1 as current memory address */
    DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e005      	b.n	8005694 <DMA_DoubleBufferModeConfig+0x2c>
  }
  else
  {
    /* Set Memory 0 as current memory address */
    DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Write to DMAy Streamx M1AR */
  DMAy_Streamx->M1AR = Memory1BaseAddr;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	611a      	str	r2, [r3, #16]
}
 800569a:	f107 0714 	add.w	r7, r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr

080056a4 <DMA_DoubleBufferModeCmd>:
  * @param  NewState: new state of the DMAy Streamx double buffer mode. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{  
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	460b      	mov	r3, r1
 80056ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Configure the Double Buffer mode */
  if (NewState != DISABLE)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <DMA_DoubleBufferModeCmd+0x20>
  {
    /* Enable the Double buffer mode */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	601a      	str	r2, [r3, #0]
 80056c2:	e005      	b.n	80056d0 <DMA_DoubleBufferModeCmd+0x2c>
  }
  else
  {
    /* Disable the Double buffer mode */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	601a      	str	r2, [r3, #0]
  }
}
 80056d0:	f107 070c 	add.w	r7, r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop

080056dc <DMA_MemoryTargetConfig>:
  *  
  * @retval None
  */
void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
                           uint32_t DMA_MemoryTarget)
{
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
    
  /* Check the Memory target to be configured */
  if (DMA_MemoryTarget != DMA_Memory_0)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <DMA_MemoryTargetConfig+0x1a>
  {
    /* Write to DMAy Streamx M1AR */
    DMAy_Streamx->M1AR = MemoryBaseAddr;    
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	611a      	str	r2, [r3, #16]
 80056f4:	e002      	b.n	80056fc <DMA_MemoryTargetConfig+0x20>
  }  
  else
  {
    /* Write to DMAy Streamx M0AR */
    DMAy_Streamx->M0AR = MemoryBaseAddr;  
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	60da      	str	r2, [r3, #12]
  }
}
 80056fc:	f107 0714 	add.w	r7, r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop

08005708 <DMA_GetCurrentMemoryTarget>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *          to 7 to select the DMA Stream.
  * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
  */
uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Get the current memory target */
  if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <DMA_GetCurrentMemoryTarget+0x22>
  {
    /* Current memory buffer used is Memory 1 */
    tmp = 1;
 8005722:	f04f 0301 	mov.w	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e002      	b.n	8005730 <DMA_GetCurrentMemoryTarget+0x28>
  }  
  else
  {
    /* Current memory buffer used is Memory 0 */
    tmp = 0;    
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
  }
  return tmp;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	f107 0714 	add.w	r7, r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop

08005740 <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8005748:	f04f 0300 	mov.w	r3, #0
 800574c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <DMA_GetCmdStatus+0x24>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 800575c:	f04f 0301 	mov.w	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	e002      	b.n	800576a <DMA_GetCmdStatus+0x2a>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8005764:	f04f 0300 	mov.w	r3, #0
 8005768:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	f107 0714 	add.w	r7, r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	bc80      	pop	{r7}
 8005776:	4770      	bx	lr

08005778 <DMA_GetFIFOStatus>:
  *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
  *           - DMA_FIFOStatus_Empty: when FIFO is empty
  *           - DMA_FIFOStatus_Full: when FIFO is full
  */
uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8005780:	f04f 0300 	mov.w	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  
  /* Get the FIFO level bits */
  tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800578e:	60fb      	str	r3, [r7, #12]
  
  return tmpreg;
 8005790:	68fb      	ldr	r3, [r7, #12]
}
 8005792:	4618      	mov	r0, r3
 8005794:	f107 0714 	add.w	r7, r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop

080057a0 <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	f246 430f 	movw	r3, #25615	; 0x640f
 80057bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d805      	bhi.n	80057d0 <DMA_GetFlagStatus+0x30>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80057c4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80057c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	e004      	b.n	80057da <DMA_GetFlagStatus+0x3a>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80057d0:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80057d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80057d8:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <DMA_GetFlagStatus+0x4c>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e002      	b.n	80057f2 <DMA_GetFlagStatus+0x52>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	f640 737d 	movw	r3, #3965	; 0xf7d
 80057f8:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 80057fc:	4013      	ands	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	4013      	ands	r3, r2
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <DMA_GetFlagStatus+0x72>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 800580a:	f04f 0301 	mov.w	r3, #1
 800580e:	75fb      	strb	r3, [r7, #23]
 8005810:	e002      	b.n	8005818 <DMA_GetFlagStatus+0x78>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8005818:	7dfb      	ldrb	r3, [r7, #23]
}
 800581a:	4618      	mov	r0, r3
 800581c:	f107 071c 	add.w	r7, r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop

08005828 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	f246 430f 	movw	r3, #25615	; 0x640f
 8005838:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800583c:	429a      	cmp	r2, r3
 800583e:	d805      	bhi.n	800584c <DMA_ClearFlag+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8005840:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005844:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e004      	b.n	8005856 <DMA_ClearFlag+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800584c:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8005850:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005854:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d008      	beq.n	8005872 <DMA_ClearFlag+0x4a>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005866:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800586a:	4013      	ands	r3, r2
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	60d3      	str	r3, [r2, #12]
 8005870:	e007      	b.n	8005882 <DMA_ClearFlag+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005878:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 800587c:	4013      	ands	r3, r2
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	6093      	str	r3, [r2, #8]
  }    
}
 8005882:	f107 0714 	add.w	r7, r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	bc80      	pop	{r7}
 800588a:	4770      	bx	lr

0800588c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00f      	beq.n	80058c4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80058a4:	79fb      	ldrb	r3, [r7, #7]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d006      	beq.n	80058b8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	615a      	str	r2, [r3, #20]
 80058b6:	e005      	b.n	80058c4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d015      	beq.n	80058f6 <DMA_ITConfig+0x6a>
  {
    if (NewState != DISABLE)
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	f003 031e 	and.w	r3, r3, #30
 80058da:	431a      	orrs	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e009      	b.n	80058f6 <DMA_ITConfig+0x6a>
    }
    else
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f003 031e 	and.w	r3, r3, #30
 80058ec:	ea6f 0303 	mvn.w	r3, r3
 80058f0:	401a      	ands	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	601a      	str	r2, [r3, #0]
    }    
  }
}
 80058f6:	f107 0714 	add.w	r7, r7, #20
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bc80      	pop	{r7}
 80058fe:	4770      	bx	lr

08005900 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8005910:	f04f 0300 	mov.w	r3, #0
 8005914:	60fb      	str	r3, [r7, #12]
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	f246 430f 	movw	r3, #25615	; 0x640f
 8005922:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005926:	429a      	cmp	r2, r3
 8005928:	d805      	bhi.n	8005936 <DMA_GetITStatus+0x36>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800592a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800592e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e004      	b.n	8005940 <DMA_GetITStatus+0x40>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8005936:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800593a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800593e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	f640 733c 	movw	r3, #3900	; 0xf3c
 8005946:	f6c0 733c 	movt	r3, #3900	; 0xf3c
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <DMA_GetITStatus+0x68>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8005956:	f003 031e 	and.w	r3, r3, #30
 800595a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4013      	ands	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]
 8005966:	e004      	b.n	8005972 <DMA_GetITStatus+0x72>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d003      	beq.n	8005984 <DMA_GetITStatus+0x84>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e002      	b.n	800598a <DMA_GetITStatus+0x8a>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005990:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005994:	4013      	ands	r3, r2
 8005996:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d006      	beq.n	80059b0 <DMA_GetITStatus+0xb0>
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <DMA_GetITStatus+0xb0>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80059a8:	f04f 0301 	mov.w	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
 80059ae:	e002      	b.n	80059b6 <DMA_GetITStatus+0xb6>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80059b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	f107 071c 	add.w	r7, r7, #28
 80059be:	46bd      	mov	sp, r7
 80059c0:	bc80      	pop	{r7}
 80059c2:	4770      	bx	lr

080059c4 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	f246 430f 	movw	r3, #25615	; 0x640f
 80059d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059d8:	429a      	cmp	r2, r3
 80059da:	d805      	bhi.n	80059e8 <DMA_ClearITPendingBit+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80059dc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80059e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059e4:	60fb      	str	r3, [r7, #12]
 80059e6:	e004      	b.n	80059f2 <DMA_ClearITPendingBit+0x2e>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80059e8:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80059ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80059f0:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d008      	beq.n	8005a0e <DMA_ClearITPendingBit+0x4a>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005a02:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005a06:	4013      	ands	r3, r2
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	60d3      	str	r3, [r2, #12]
 8005a0c:	e007      	b.n	8005a1e <DMA_ClearITPendingBit+0x5a>
  }
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	f640 737d 	movw	r3, #3965	; 0xf7d
 8005a14:	f6c0 737d 	movt	r3, #3965	; 0xf7d
 8005a18:	4013      	ands	r3, r2
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	6093      	str	r3, [r2, #8]
  }   
}
 8005a1e:	f107 0714 	add.w	r7, r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bc80      	pop	{r7}
 8005a26:	4770      	bx	lr

08005a28 <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
 8005a2c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a30:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
 8005a3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a3e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000;
 8005a48:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000;
 8005a56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a5e:	f04f 0200 	mov.w	r2, #0
 8005a62:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x007FFFFF;
 8005a64:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a68:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a70:	f2c0 027f 	movt	r2, #127	; 0x7f
 8005a74:	615a      	str	r2, [r3, #20]
}
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr

08005a7c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8005a84:	f04f 0300 	mov.w	r3, #0
 8005a88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8005a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005a8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005a92:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	799b      	ldrb	r3, [r3, #6]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d078      	beq.n	8005b8e <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8005a9c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005aa0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005aa4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005aa8:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005aac:	6811      	ldr	r1, [r2, #0]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	6812      	ldr	r2, [r2, #0]
 8005ab2:	ea6f 0202 	mvn.w	r2, r2
 8005ab6:	400a      	ands	r2, r1
 8005ab8:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8005aba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005abe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005ac2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005ac6:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005aca:	6851      	ldr	r1, [r2, #4]
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6812      	ldr	r2, [r2, #0]
 8005ad0:	ea6f 0202 	mvn.w	r2, r2
 8005ad4:	400a      	ands	r2, r1
 8005ad6:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	18d3      	adds	r3, r2, r3
 8005ae0:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	6811      	ldr	r1, [r2, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6812      	ldr	r2, [r2, #0]
 8005aec:	430a      	orrs	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005af0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005af4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005af8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005afc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b00:	6891      	ldr	r1, [r2, #8]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	6812      	ldr	r2, [r2, #0]
 8005b06:	ea6f 0202 	mvn.w	r2, r2
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8005b0e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b12:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b16:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005b1a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b1e:	68d1      	ldr	r1, [r2, #12]
 8005b20:	687a      	ldr	r2, [r7, #4]
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	ea6f 0202 	mvn.w	r2, r2
 8005b28:	400a      	ands	r2, r1
 8005b2a:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	795b      	ldrb	r3, [r3, #5]
 8005b30:	2b10      	cmp	r3, #16
 8005b32:	d11a      	bne.n	8005b6a <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8005b34:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b38:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b3c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005b40:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b44:	6891      	ldr	r1, [r2, #8]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8005b4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b52:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b56:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005b5a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b5e:	68d1      	ldr	r1, [r2, #12]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	60da      	str	r2, [r3, #12]
 8005b68:	e01f      	b.n	8005baa <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8005b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b72:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	795b      	ldrb	r3, [r3, #5]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	18d3      	adds	r3, r2, r3
 8005b7c:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6811      	ldr	r1, [r2, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e00d      	b.n	8005baa <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	791b      	ldrb	r3, [r3, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	18d3      	adds	r3, r2, r3
 8005b96:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	6811      	ldr	r1, [r2, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6812      	ldr	r2, [r2, #0]
 8005ba2:	ea6f 0202 	mvn.w	r2, r2
 8005ba6:	400a      	ands	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]
  }
}
 8005baa:	f107 0714 	add.w	r7, r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bc80      	pop	{r7}
 8005bb2:	4770      	bx	lr

08005bb4 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f04f 0200 	mov.w	r2, #0
 8005bca:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f04f 020c 	mov.w	r2, #12
 8005bd2:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	719a      	strb	r2, [r3, #6]
}
 8005bdc:	f107 070c 	add.w	r7, r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bc80      	pop	{r7}
 8005be4:	4770      	bx	lr
 8005be6:	bf00      	nop

08005be8 <EXTI_GenerateSWInterrupt>:
  *         will be generated.
  *         This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
 8005bf0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005bf4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005bf8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005bfc:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005c00:	6911      	ldr	r1, [r2, #16]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	611a      	str	r2, [r3, #16]
}
 8005c08:	f107 070c 	add.w	r7, r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bc80      	pop	{r7}
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop

08005c14 <EXTI_GetFlagStatus>:
  * @param  EXTI_Line: specifies the EXTI line flag to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8005c1c:	f04f 0300 	mov.w	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 8005c22:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c26:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c2a:	695a      	ldr	r2, [r3, #20]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4013      	ands	r3, r2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8005c34:	f04f 0301 	mov.w	r3, #1
 8005c38:	73fb      	strb	r3, [r7, #15]
 8005c3a:	e002      	b.n	8005c42 <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	f107 0714 	add.w	r7, r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bc80      	pop	{r7}
 8005c4e:	4770      	bx	lr

08005c50 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005c58:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c5c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	615a      	str	r2, [r3, #20]
}
 8005c64:	f107 070c 	add.w	r7, r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop

08005c70 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8005c78:	f04f 0300 	mov.w	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8005c84:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c88:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4013      	ands	r3, r2
 8005c92:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8005c94:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005c98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005c9c:	695a      	ldr	r2, [r3, #20]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <EXTI_GetITStatus+0x44>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d003      	beq.n	8005cb4 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
 8005cac:	f04f 0301 	mov.w	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
 8005cb2:	e002      	b.n	8005cba <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f107 0714 	add.w	r7, r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr

08005cc8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8005cd0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	615a      	str	r2, [r3, #20]
}
 8005cdc:	f107 070c 	add.w	r7, r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop

08005ce8 <FLASH_SetLatency>:
  *            @arg FLASH_Latency_6: FLASH Six Latency cycles
  *            @arg FLASH_Latency_7: FLASH Seven Latency cycles      
  * @retval None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
  *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
 8005cf0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cf4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]
}
 8005cfe:	f107 070c 	add.w	r7, r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr

08005d08 <FLASH_PrefetchBufferCmd>:
  * @param  NewState: new state of the Prefetch Buffer.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_PrefetchBufferCmd(FunctionalState NewState)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Enable or disable the Prefetch Buffer */
  if(NewState != DISABLE)
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00c      	beq.n	8005d32 <FLASH_PrefetchBufferCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8005d18:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d20:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005d24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	e00b      	b.n	8005d4a <FLASH_PrefetchBufferCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_PRFTEN);
 8005d32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d3a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005d3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d48:	601a      	str	r2, [r3, #0]
  }
}
 8005d4a:	f107 070c 	add.w	r7, r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <FLASH_InstructionCacheCmd>:
  * @param  NewState: new state of the Instruction Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_InstructionCacheCmd(FunctionalState NewState)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00c      	beq.n	8005d7e <FLASH_InstructionCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_ICEN;
 8005d64:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d68:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d6c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005d70:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	e00b      	b.n	8005d96 <FLASH_InstructionCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_ICEN);
 8005d7e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005d82:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005d86:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005d8a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005d8e:	6812      	ldr	r2, [r2, #0]
 8005d90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d94:	601a      	str	r2, [r3, #0]
  }
}
 8005d96:	f107 070c 	add.w	r7, r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <FLASH_DataCacheCmd>:
  * @param  NewState: new state of the Data Cache.
  *          This parameter  can be: ENABLE or DISABLE.
  * @retval None
  */
void FLASH_DataCacheCmd(FunctionalState NewState)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if(NewState != DISABLE)
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00c      	beq.n	8005dca <FLASH_DataCacheCmd+0x2a>
  {
    FLASH->ACR |= FLASH_ACR_DCEN;
 8005db0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005db4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005db8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005dbc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dc6:	601a      	str	r2, [r3, #0]
 8005dc8:	e00b      	b.n	8005de2 <FLASH_DataCacheCmd+0x42>
  }
  else
  {
    FLASH->ACR &= (~FLASH_ACR_DCEN);
 8005dca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005dce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005dd2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005dd6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005dda:	6812      	ldr	r2, [r2, #0]
 8005ddc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de0:	601a      	str	r2, [r3, #0]
  }
}
 8005de2:	f107 070c 	add.w	r7, r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bc80      	pop	{r7}
 8005dea:	4770      	bx	lr

08005dec <FLASH_InstructionCacheReset>:
  * @note   This function must be used only when the Instruction Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_InstructionCacheReset(void)
{
 8005dec:	b480      	push	{r7}
 8005dee:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_ICRST;
 8005df0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005df4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005df8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005dfc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop

08005e10 <FLASH_DataCacheReset>:
  * @note   This function must be used only when the Data Cache is disabled.  
  * @param  None
  * @retval None
  */
void FLASH_DataCacheReset(void)
{
 8005e10:	b480      	push	{r7}
 8005e12:	af00      	add	r7, sp, #0
  FLASH->ACR |= FLASH_ACR_DCRST;
 8005e14:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e18:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e1c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005e20:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e2a:	601a      	str	r2, [r3, #0]
}
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bc80      	pop	{r7}
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop

08005e34 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8005e34:	b480      	push	{r7}
 8005e36:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8005e38:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e3c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	da11      	bge.n	8005e6a <FLASH_Unlock+0x36>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8005e46:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e4a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e4e:	f240 1223 	movw	r2, #291	; 0x123
 8005e52:	f2c4 5267 	movt	r2, #17767	; 0x4567
 8005e56:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8005e58:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e60:	f648 12ab 	movw	r2, #35243	; 0x89ab
 8005e64:	f6cc 52ef 	movt	r2, #52719	; 0xcdef
 8005e68:	605a      	str	r2, [r3, #4]
  }  
}
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005e74:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005e7c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005e80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005e84:	6912      	ldr	r2, [r2, #16]
 8005e86:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005e8a:	611a      	str	r2, [r3, #16]
}
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8005ea0:	f04f 0300 	mov.w	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8005ea6:	f04f 0308 	mov.w	r3, #8
 8005eaa:	72fb      	strb	r3, [r7, #11]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <FLASH_EraseSector+0x26>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e010      	b.n	8005edc <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_2)
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d103      	bne.n	8005ec8 <FLASH_EraseSector+0x34>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	e009      	b.n	8005edc <FLASH_EraseSector+0x48>
  }
  else if(VoltageRange == VoltageRange_3)
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d103      	bne.n	8005ed6 <FLASH_EraseSector+0x42>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e002      	b.n	8005edc <FLASH_EraseSector+0x48>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ed6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005eda:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005edc:	f000 fbec 	bl	80066b8 <FLASH_WaitForLastOperation>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE)
 8005ee4:	7afb      	ldrb	r3, [r7, #11]
 8005ee6:	2b08      	cmp	r3, #8
 8005ee8:	d159      	bne.n	8005f9e <FLASH_EraseSector+0x10a>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8005eea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005eee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005ef2:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005ef6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005efa:	6912      	ldr	r2, [r2, #16]
 8005efc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005f00:	611a      	str	r2, [r3, #16]
    FLASH->CR |= tmp_psize;
 8005f02:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f0a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005f0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f12:	6911      	ldr	r1, [r2, #16]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK;
 8005f1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f1e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f22:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005f26:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f2a:	6912      	ldr	r2, [r2, #16]
 8005f2c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005f30:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8005f32:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f36:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f3a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005f3e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f42:	6911      	ldr	r1, [r2, #16]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	f042 0202 	orr.w	r2, r2, #2
 8005f4c:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8005f4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f52:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f56:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005f5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f5e:	6912      	ldr	r2, [r2, #16]
 8005f60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f64:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8005f66:	f000 fba7 	bl	80066b8 <FLASH_WaitForLastOperation>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8005f6e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f76:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005f7a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f7e:	6912      	ldr	r2, [r2, #16]
 8005f80:	f022 0202 	bic.w	r2, r2, #2
 8005f84:	611a      	str	r2, [r3, #16]
    FLASH->CR &= SECTOR_MASK; 
 8005f86:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f8a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005f8e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8005f92:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8005f96:	6912      	ldr	r2, [r2, #16]
 8005f98:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8005f9c:	611a      	str	r2, [r3, #16]
  }
  /* Return the Erase Status */
  return status;
 8005f9e:	7afb      	ldrb	r3, [r7, #11]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f107 0710 	add.w	r7, r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop

08005fac <FLASH_EraseAllSectors>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp_psize = 0x0;
 8005fb6:	f04f 0300 	mov.w	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE;
 8005fbc:	f04f 0308 	mov.w	r3, #8
 8005fc0:	72fb      	strb	r3, [r7, #11]
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8005fc2:	f000 fb79 	bl	80066b8 <FLASH_WaitForLastOperation>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8005fca:	79fb      	ldrb	r3, [r7, #7]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d103      	bne.n	8005fd8 <FLASH_EraseAllSectors+0x2c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
 8005fd6:	e010      	b.n	8005ffa <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_2)
 8005fd8:	79fb      	ldrb	r3, [r7, #7]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d103      	bne.n	8005fe6 <FLASH_EraseAllSectors+0x3a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005fde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e009      	b.n	8005ffa <FLASH_EraseAllSectors+0x4e>
  }
  else if(VoltageRange == VoltageRange_3)
 8005fe6:	79fb      	ldrb	r3, [r7, #7]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d103      	bne.n	8005ff4 <FLASH_EraseAllSectors+0x48>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e002      	b.n	8005ffa <FLASH_EraseAllSectors+0x4e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005ff4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005ff8:	60fb      	str	r3, [r7, #12]
  }  
  if(status == FLASH_COMPLETE)
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d13f      	bne.n	8006080 <FLASH_EraseAllSectors+0xd4>
  {
    /* if the previous operation is completed, proceed to erase all sectors */
     FLASH->CR &= CR_PSIZE_MASK;
 8006000:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006004:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006008:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800600c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006010:	6912      	ldr	r2, [r2, #16]
 8006012:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006016:	611a      	str	r2, [r3, #16]
     FLASH->CR |= tmp_psize;
 8006018:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800601c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006020:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006024:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006028:	6911      	ldr	r1, [r2, #16]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	430a      	orrs	r2, r1
 800602e:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_MER;
 8006030:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006034:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006038:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800603c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006040:	6912      	ldr	r2, [r2, #16]
 8006042:	f042 0204 	orr.w	r2, r2, #4
 8006046:	611a      	str	r2, [r3, #16]
     FLASH->CR |= FLASH_CR_STRT;
 8006048:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800604c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006050:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006054:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006058:	6912      	ldr	r2, [r2, #16]
 800605a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800605e:	611a      	str	r2, [r3, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006060:	f000 fb2a 	bl	80066b8 <FLASH_WaitForLastOperation>
 8006064:	4603      	mov	r3, r0
 8006066:	72fb      	strb	r3, [r7, #11]

    /* if the erase operation is completed, disable the MER Bit */
    FLASH->CR &= (~FLASH_CR_MER);
 8006068:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800606c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006070:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006074:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006078:	6912      	ldr	r2, [r2, #16]
 800607a:	f022 0204 	bic.w	r2, r2, #4
 800607e:	611a      	str	r2, [r3, #16]

  }   
  /* Return the Erase Status */
  return status;
 8006080:	7afb      	ldrb	r3, [r7, #11]
}
 8006082:	4618      	mov	r0, r3
 8006084:	f107 0710 	add.w	r7, r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <FLASH_ProgramDoubleWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	e9c7 2300 	strd	r2, r3, [r7]
  FLASH_Status status = FLASH_COMPLETE;
 8006098:	f04f 0308 	mov.w	r3, #8
 800609c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800609e:	f000 fb0b 	bl	80066b8 <FLASH_WaitForLastOperation>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]
  
  if(status == FLASH_COMPLETE)
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d138      	bne.n	800611e <FLASH_ProgramDoubleWord+0x92>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80060ac:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060b4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80060bc:	6912      	ldr	r2, [r2, #16]
 80060be:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80060c2:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80060c4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060cc:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80060d4:	6912      	ldr	r2, [r2, #16]
 80060d6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80060da:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80060dc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80060e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80060e4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80060e8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80060ec:	6912      	ldr	r2, [r2, #16]
 80060ee:	f042 0201 	orr.w	r2, r2, #1
 80060f2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint64_t*)Address = Data;
 80060f4:	68f9      	ldr	r1, [r7, #12]
 80060f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060fa:	e9c1 2300 	strd	r2, r3, [r1]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80060fe:	f000 fadb 	bl	80066b8 <FLASH_WaitForLastOperation>
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8006106:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800610a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800610e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006112:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006116:	6912      	ldr	r2, [r2, #16]
 8006118:	f022 0201 	bic.w	r2, r2, #1
 800611c:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 800611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006120:	4618      	mov	r0, r3
 8006122:	f107 0718 	add.w	r7, r7, #24
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop

0800612c <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE;
 8006136:	f04f 0308 	mov.w	r3, #8
 800613a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 800613c:	f000 fabc 	bl	80066b8 <FLASH_WaitForLastOperation>
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b08      	cmp	r3, #8
 8006148:	d136      	bne.n	80061b8 <FLASH_ProgramWord+0x8c>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 800614a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800614e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006152:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006156:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800615a:	6912      	ldr	r2, [r2, #16]
 800615c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006160:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8006162:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006166:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800616a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800616e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006172:	6912      	ldr	r2, [r2, #16]
 8006174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006178:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 800617a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800617e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006182:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006186:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800618a:	6912      	ldr	r2, [r2, #16]
 800618c:	f042 0201 	orr.w	r2, r2, #1
 8006190:	611a      	str	r2, [r3, #16]
  
    *(__IO uint32_t*)Address = Data;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006198:	f000 fa8e 	bl	80066b8 <FLASH_WaitForLastOperation>
 800619c:	4603      	mov	r3, r0
 800619e:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80061a0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061a8:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80061ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80061b0:	6912      	ldr	r2, [r2, #16]
 80061b2:	f022 0201 	bic.w	r2, r2, #1
 80061b6:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	f107 0710 	add.w	r7, r7, #16
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <FLASH_ProgramHalfWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	460b      	mov	r3, r1
 80061ce:	807b      	strh	r3, [r7, #2]
  FLASH_Status status = FLASH_COMPLETE;
 80061d0:	f04f 0308 	mov.w	r3, #8
 80061d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80061d6:	f000 fa6f 	bl	80066b8 <FLASH_WaitForLastOperation>
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 80061de:	7bfb      	ldrb	r3, [r7, #15]
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d136      	bne.n	8006252 <FLASH_ProgramHalfWord+0x8e>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 80061e4:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80061e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061ec:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80061f0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80061f4:	6912      	ldr	r2, [r2, #16]
 80061f6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80061fa:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80061fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006200:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006204:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006208:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800620c:	6912      	ldr	r2, [r2, #16]
 800620e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006212:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 8006214:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006218:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800621c:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006220:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006224:	6912      	ldr	r2, [r2, #16]
 8006226:	f042 0201 	orr.w	r2, r2, #1
 800622a:	611a      	str	r2, [r3, #16]
  
    *(__IO uint16_t*)Address = Data;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	801a      	strh	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 8006232:	f000 fa41 	bl	80066b8 <FLASH_WaitForLastOperation>
 8006236:	4603      	mov	r3, r0
 8006238:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 800623a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800623e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006242:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8006246:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800624a:	6912      	ldr	r2, [r2, #16]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	611a      	str	r2, [r3, #16]
  } 
  /* Return the Program Status */
  return status;
 8006252:	7bfb      	ldrb	r3, [r7, #15]
}
 8006254:	4618      	mov	r0, r3
 8006256:	f107 0710 	add.w	r7, r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop

08006260 <FLASH_ProgramByte>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800626c:	f04f 0308 	mov.w	r3, #8
 8006270:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006272:	f000 fa21 	bl	80066b8 <FLASH_WaitForLastOperation>
 8006276:	4603      	mov	r3, r0
 8006278:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b08      	cmp	r3, #8
 800627e:	d134      	bne.n	80062ea <FLASH_ProgramByte+0x8a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8006280:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006284:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006288:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800628c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006290:	6912      	ldr	r2, [r2, #16]
 8006292:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006296:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_PSIZE_BYTE;
 8006298:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800629c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062a0:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80062a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80062a8:	6912      	ldr	r2, [r2, #16]
 80062aa:	611a      	str	r2, [r3, #16]
    FLASH->CR |= FLASH_CR_PG;
 80062ac:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062b4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80062b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80062bc:	6912      	ldr	r2, [r2, #16]
 80062be:	f042 0201 	orr.w	r2, r2, #1
 80062c2:	611a      	str	r2, [r3, #16]
  
    *(__IO uint8_t*)Address = Data;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	78fa      	ldrb	r2, [r7, #3]
 80062c8:	701a      	strb	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation();
 80062ca:	f000 f9f5 	bl	80066b8 <FLASH_WaitForLastOperation>
 80062ce:	4603      	mov	r3, r0
 80062d0:	73fb      	strb	r3, [r7, #15]

    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80062d2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80062d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80062da:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80062de:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80062e2:	6912      	ldr	r2, [r2, #16]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	611a      	str	r2, [r3, #16]
  } 

  /* Return the Program Status */
  return status;
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	f107 0710 	add.w	r7, r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop

080062f8 <FLASH_OB_Unlock>:
  * @brief  Unlocks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Unlock(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80062fc:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006300:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	f003 0301 	and.w	r3, r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d011      	beq.n	8006334 <FLASH_OB_Unlock+0x3c>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 8006310:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006314:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006318:	f642 223b 	movw	r2, #10811	; 0x2a3b
 800631c:	f6c0 0219 	movt	r2, #2073	; 0x819
 8006320:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 8006322:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006326:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800632a:	f646 627f 	movw	r2, #28287	; 0x6e7f
 800632e:	f6c4 425d 	movt	r2, #19549	; 0x4c5d
 8006332:	609a      	str	r2, [r3, #8]
  }  
}
 8006334:	46bd      	mov	sp, r7
 8006336:	bc80      	pop	{r7}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop

0800633c <FLASH_OB_Lock>:
  * @brief  Locks the FLASH Option Control Registers access.
  * @param  None
  * @retval None
  */
void FLASH_OB_Lock(void)
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8006340:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006344:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006348:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800634c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006350:	6952      	ldr	r2, [r2, #20]
 8006352:	f042 0201 	orr.w	r2, r2, #1
 8006356:	615a      	str	r2, [r3, #20]
}
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop

08006360 <FLASH_OB_WRPConfig>:
  * @param  Newstate: new state of the Write Protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None  
  */
void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
{ 
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	70fb      	strb	r3, [r7, #3]
  FLASH_Status status = FLASH_COMPLETE;
 800636c:	f04f 0308 	mov.w	r3, #8
 8006370:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(OB_WRP));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  status = FLASH_WaitForLastOperation();
 8006372:	f000 f9a1 	bl	80066b8 <FLASH_WaitForLastOperation>
 8006376:	4603      	mov	r3, r0
 8006378:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b08      	cmp	r3, #8
 800637e:	d124      	bne.n	80063ca <FLASH_OB_WRPConfig+0x6a>
  { 
    if(NewState != DISABLE)
 8006380:	78fb      	ldrb	r3, [r7, #3]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d012      	beq.n	80063ac <FLASH_OB_WRPConfig+0x4c>
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
 8006386:	f643 4316 	movw	r3, #15382	; 0x3c16
 800638a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800638e:	f643 4216 	movw	r2, #15382	; 0x3c16
 8006392:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006396:	8812      	ldrh	r2, [r2, #0]
 8006398:	b291      	uxth	r1, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	b292      	uxth	r2, r2
 800639e:	ea6f 0202 	mvn.w	r2, r2
 80063a2:	b292      	uxth	r2, r2
 80063a4:	400a      	ands	r2, r1
 80063a6:	b292      	uxth	r2, r2
 80063a8:	801a      	strh	r2, [r3, #0]
 80063aa:	e00e      	b.n	80063ca <FLASH_OB_WRPConfig+0x6a>
    }
    else
    {
      *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
 80063ac:	f643 4316 	movw	r3, #15382	; 0x3c16
 80063b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063b4:	f643 4216 	movw	r2, #15382	; 0x3c16
 80063b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80063bc:	8812      	ldrh	r2, [r2, #0]
 80063be:	b291      	uxth	r1, r2
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	b292      	uxth	r2, r2
 80063c4:	430a      	orrs	r2, r1
 80063c6:	b292      	uxth	r2, r2
 80063c8:	801a      	strh	r2, [r3, #0]
    }
  }
}
 80063ca:	f107 0710 	add.w	r7, r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop

080063d4 <FLASH_OB_RDPConfig>:
  * !!!Warning!!! When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval None
  */
void FLASH_OB_RDPConfig(uint8_t OB_RDP)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  FLASH_Status status = FLASH_COMPLETE;
 80063de:	f04f 0308 	mov.w	r3, #8
 80063e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_OB_RDP(OB_RDP));

  status = FLASH_WaitForLastOperation();
 80063e4:	f000 f968 	bl	80066b8 <FLASH_WaitForLastOperation>
 80063e8:	4603      	mov	r3, r0
 80063ea:	73fb      	strb	r3, [r7, #15]

  if(status == FLASH_COMPLETE)
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d105      	bne.n	80063fe <FLASH_OB_RDPConfig+0x2a>
  {
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
 80063f2:	f643 4315 	movw	r3, #15381	; 0x3c15
 80063f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80063fa:	79fa      	ldrb	r2, [r7, #7]
 80063fc:	701a      	strb	r2, [r3, #0]

  }
}
 80063fe:	f107 0710 	add.w	r7, r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop

08006408 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval None
  */
void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	4613      	mov	r3, r2
 8006410:	4602      	mov	r2, r0
 8006412:	71fa      	strb	r2, [r7, #7]
 8006414:	460a      	mov	r2, r1
 8006416:	71ba      	strb	r2, [r7, #6]
 8006418:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 800641a:	f04f 03ff 	mov.w	r3, #255	; 0xff
 800641e:	73fb      	strb	r3, [r7, #15]
  FLASH_Status status = FLASH_COMPLETE; 
 8006420:	f04f 0308 	mov.w	r3, #8
 8006424:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 8006426:	f000 f947 	bl	80066b8 <FLASH_WaitForLastOperation>
 800642a:	4603      	mov	r3, r0
 800642c:	73bb      	strb	r3, [r7, #14]
  
  if(status == FLASH_COMPLETE)
 800642e:	7bbb      	ldrb	r3, [r7, #14]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d117      	bne.n	8006464 <FLASH_OB_UserConfig+0x5c>
  { 
    /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
 8006434:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006438:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	f003 030f 	and.w	r3, r3, #15
 8006444:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
 8006446:	f643 4314 	movw	r3, #15380	; 0x3c14
 800644a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800644e:	79b9      	ldrb	r1, [r7, #6]
 8006450:	7bfa      	ldrb	r2, [r7, #15]
 8006452:	430a      	orrs	r2, r1
 8006454:	b2d1      	uxtb	r1, r2
 8006456:	797a      	ldrb	r2, [r7, #5]
 8006458:	430a      	orrs	r2, r1
 800645a:	b2d1      	uxtb	r1, r2
 800645c:	79fa      	ldrb	r2, [r7, #7]
 800645e:	430a      	orrs	r2, r1
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	701a      	strb	r2, [r3, #0]
  }  
}
 8006464:	f107 0710 	add.w	r7, r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <FLASH_OB_BORConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval None
  */
void FLASH_OB_BORConfig(uint8_t OB_BOR)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR(OB_BOR));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8006476:	f643 4314 	movw	r3, #15380	; 0x3c14
 800647a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800647e:	f643 4214 	movw	r2, #15380	; 0x3c14
 8006482:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8006486:	7812      	ldrb	r2, [r2, #0]
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	f022 020c 	bic.w	r2, r2, #12
 800648e:	b2d2      	uxtb	r2, r2
 8006490:	701a      	strb	r2, [r3, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
 8006492:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006496:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800649a:	f643 4214 	movw	r2, #15380	; 0x3c14
 800649e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80064a2:	7812      	ldrb	r2, [r2, #0]
 80064a4:	b2d1      	uxtb	r1, r2
 80064a6:	79fa      	ldrb	r2, [r7, #7]
 80064a8:	430a      	orrs	r2, r1
 80064aa:	b2d2      	uxtb	r2, r2
 80064ac:	701a      	strb	r2, [r3, #0]

}
 80064ae:	f107 070c 	add.w	r7, r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bc80      	pop	{r7}
 80064b6:	4770      	bx	lr

080064b8 <FLASH_OB_Launch>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_OB_Launch(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
  FLASH_Status status = FLASH_COMPLETE;
 80064be:	f04f 0308 	mov.w	r3, #8
 80064c2:	71fb      	strb	r3, [r7, #7]

  /* Set the OPTSTRT bit in OPTCR register */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
 80064c4:	f643 4314 	movw	r3, #15380	; 0x3c14
 80064c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80064cc:	f643 4214 	movw	r2, #15380	; 0x3c14
 80064d0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80064d4:	7812      	ldrb	r2, [r2, #0]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	f042 0202 	orr.w	r2, r2, #2
 80064dc:	b2d2      	uxtb	r2, r2
 80064de:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation();
 80064e0:	f000 f8ea 	bl	80066b8 <FLASH_WaitForLastOperation>
 80064e4:	4603      	mov	r3, r0
 80064e6:	71fb      	strb	r3, [r7, #7]

  return status;
 80064e8:	79fb      	ldrb	r3, [r7, #7]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	f107 0708 	add.w	r7, r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <FLASH_OB_GetUser>:
  * @param  None
  * @retval The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
uint8_t FLASH_OB_GetUser(void)
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)(FLASH->OPTCR >> 5);
 80064f8:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064fc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8006506:	b2db      	uxtb	r3, r3
}
 8006508:	4618      	mov	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <FLASH_OB_GetWRP>:
  * @brief  Returns the FLASH Write Protection Option Bytes value.
  * @param  None
  * @retval The FLASH Write Protection  Option Bytes value
  */
uint16_t FLASH_OB_GetWRP(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8006514:	f643 4316 	movw	r3, #15382	; 0x3c16
 8006518:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
}
 8006520:	4618      	mov	r0, r3
 8006522:	46bd      	mov	sp, r7
 8006524:	bc80      	pop	{r7}
 8006526:	4770      	bx	lr

08006528 <FLASH_OB_GetRDP>:
  * @retval FLASH ReadOut Protection Status:
  *           - SET, when OB_RDP_Level_1 or OB_RDP_Level_2 is set
  *           - RESET, when OB_RDP_Level_0 is set
  */
FlagStatus FLASH_OB_GetRDP(void)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
  FlagStatus readstatus = RESET;
 800652e:	f04f 0300 	mov.w	r3, #0
 8006532:	71fb      	strb	r3, [r7, #7]

  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
 8006534:	f643 4315 	movw	r3, #15381	; 0x3c15
 8006538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2baa      	cmp	r3, #170	; 0xaa
 8006542:	d003      	beq.n	800654c <FLASH_OB_GetRDP+0x24>
  {
    readstatus = SET;
 8006544:	f04f 0301 	mov.w	r3, #1
 8006548:	71fb      	strb	r3, [r7, #7]
 800654a:	e002      	b.n	8006552 <FLASH_OB_GetRDP+0x2a>
  }
  else
  {
    readstatus = RESET;
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	71fb      	strb	r3, [r7, #7]
  }
  return readstatus;
 8006552:	79fb      	ldrb	r3, [r7, #7]
}
 8006554:	4618      	mov	r0, r3
 8006556:	f107 070c 	add.w	r7, r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	bc80      	pop	{r7}
 800655e:	4770      	bx	lr

08006560 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
uint8_t FLASH_OB_GetBOR(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8006564:	f643 4314 	movw	r3, #15380	; 0x3c14
 8006568:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b2db      	uxtb	r3, r3
 8006570:	f003 030c 	and.w	r3, r3, #12
 8006574:	b2db      	uxtb	r3, r3
}
 8006576:	4618      	mov	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop

08006580 <FLASH_ITConfig>:
  *            @arg FLASH_IT_ERR: FLASH Error Interrupt
  *            @arg FLASH_IT_EOP: FLASH end of operation Interrupt
  * @retval None 
  */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_IT(FLASH_IT)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if(NewState != DISABLE)
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00c      	beq.n	80065ac <FLASH_ITConfig+0x2c>
  {
    /* Enable the interrupt sources */
    FLASH->CR |= FLASH_IT;
 8006592:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006596:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800659a:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 800659e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065a2:	6911      	ldr	r1, [r2, #16]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	611a      	str	r2, [r3, #16]
 80065aa:	e00d      	b.n	80065c8 <FLASH_ITConfig+0x48>
  }
  else
  {
    /* Disable the interrupt sources */
    FLASH->CR &= ~(uint32_t)FLASH_IT;
 80065ac:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065b4:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 80065b8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80065bc:	6911      	ldr	r1, [r2, #16]
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	ea6f 0202 	mvn.w	r2, r2
 80065c4:	400a      	ands	r2, r1
 80065c6:	611a      	str	r2, [r3, #16]
  }
}
 80065c8:	f107 070c 	add.w	r7, r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop

080065d4 <FLASH_GetFlagStatus>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_BSY: FLASH Busy flag
  * @retval The new state of FLASH_FLAG (SET or RESET).
  */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80065dc:	f04f 0300 	mov.w	r3, #0
 80065e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));

  if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 80065e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4013      	ands	r3, r2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d003      	beq.n	80065fc <FLASH_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 80065f4:	f04f 0301 	mov.w	r3, #1
 80065f8:	73fb      	strb	r3, [r7, #15]
 80065fa:	e002      	b.n	8006602 <FLASH_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the new state of FLASH_FLAG (SET or RESET) */
  return bitstatus; 
 8006602:	7bfb      	ldrb	r3, [r7, #15]
}
 8006604:	4618      	mov	r0, r3
 8006606:	f107 0714 	add.w	r7, r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	bc80      	pop	{r7}
 800660e:	4770      	bx	lr

08006610 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGPERR: FLASH Programming Parallelism error flag
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8006618:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800661c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	60da      	str	r2, [r3, #12]
}
 8006624:	f107 070c 	add.w	r7, r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop

08006630 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE;
 8006636:	f04f 0308 	mov.w	r3, #8
 800663a:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800663c:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006640:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <FLASH_GetStatus+0x26>
  {
    flashstatus = FLASH_BUSY;
 800664e:	f04f 0301 	mov.w	r3, #1
 8006652:	71fb      	strb	r3, [r7, #7]
 8006654:	e029      	b.n	80066aa <FLASH_GetStatus+0x7a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 8006656:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800665a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	f003 0310 	and.w	r3, r3, #16
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <FLASH_GetStatus+0x40>
    { 
      flashstatus = FLASH_ERROR_WRP;
 8006668:	f04f 0305 	mov.w	r3, #5
 800666c:	71fb      	strb	r3, [r7, #7]
 800666e:	e01c      	b.n	80066aa <FLASH_GetStatus+0x7a>
    }
    else 
    {
      if((FLASH->SR & (uint32_t)0xEF) != (uint32_t)0x00)
 8006670:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006674:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <FLASH_GetStatus+0x5a>
      {
        flashstatus = FLASH_ERROR_PROGRAM; 
 8006682:	f04f 0306 	mov.w	r3, #6
 8006686:	71fb      	strb	r3, [r7, #7]
 8006688:	e00f      	b.n	80066aa <FLASH_GetStatus+0x7a>
      }
      else
      {
        if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 800668a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800668e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d003      	beq.n	80066a4 <FLASH_GetStatus+0x74>
        {
          flashstatus = FLASH_ERROR_OPERATION;
 800669c:	f04f 0307 	mov.w	r3, #7
 80066a0:	71fb      	strb	r3, [r7, #7]
 80066a2:	e002      	b.n	80066aa <FLASH_GetStatus+0x7a>
        }
        else
        {
          flashstatus = FLASH_COMPLETE;
 80066a4:	f04f 0308 	mov.w	r3, #8
 80066a8:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80066aa:	79fb      	ldrb	r3, [r7, #7]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	f107 070c 	add.w	r7, r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <FLASH_WaitForLastOperation>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PROGRAM,
  *                       FLASH_ERROR_WRP, FLASH_ERROR_OPERATION or FLASH_COMPLETE.
  */
FLASH_Status FLASH_WaitForLastOperation(void)
{ 
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE;
 80066be:	f04f 0308 	mov.w	r3, #8
 80066c2:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80066c4:	f7ff ffb4 	bl	8006630 <FLASH_GetStatus>
 80066c8:	4603      	mov	r3, r0
 80066ca:	71fb      	strb	r3, [r7, #7]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80066cc:	e003      	b.n	80066d6 <FLASH_WaitForLastOperation+0x1e>
  {
    status = FLASH_GetStatus();
 80066ce:	f7ff ffaf 	bl	8006630 <FLASH_GetStatus>
 80066d2:	4603      	mov	r3, r0
 80066d4:	71fb      	strb	r3, [r7, #7]
  status = FLASH_GetStatus();

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY)
 80066d6:	79fb      	ldrb	r3, [r7, #7]
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d0f7      	beq.n	80066ce <FLASH_WaitForLastOperation+0x16>
  {
    status = FLASH_GetStatus();
  }
  /* Return the operation status */
  return status;
 80066de:	79fb      	ldrb	r3, [r7, #7]
 80066e0:	b2db      	uxtb	r3, r3
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	f107 0708 	add.w	r7, r7, #8
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <FSMC_NORSRAMDeInit>:
  *            @arg FSMC_Bank1_NORSRAM3: FSMC Bank1 NOR/SRAM3 
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @retval None
  */
void FSMC_NORSRAMDeInit(uint32_t FSMC_Bank)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  
  /* FSMC_Bank1_NORSRAM1 */
  if(FSMC_Bank == FSMC_Bank1_NORSRAM1)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d107      	bne.n	800670a <FSMC_NORSRAMDeInit+0x1e>
  {
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030DB;    
 80066fa:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	f243 01db 	movw	r1, #12507	; 0x30db
 8006704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006708:	e006      	b.n	8006718 <FSMC_NORSRAMDeInit+0x2c>
  }
  /* FSMC_Bank1_NORSRAM2,  FSMC_Bank1_NORSRAM3 or FSMC_Bank1_NORSRAM4 */
  else
  {   
    FSMC_Bank1->BTCR[FSMC_Bank] = 0x000030D2; 
 800670a:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	f243 01d2 	movw	r1, #12498	; 0x30d2
 8006714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  FSMC_Bank1->BTCR[FSMC_Bank + 1] = 0x0FFFFFFF;
 8006718:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f103 0201 	add.w	r2, r3, #1
 8006722:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006726:	4603      	mov	r3, r0
 8006728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  FSMC_Bank1E->BWTR[FSMC_Bank] = 0x0FFFFFFF;  
 800672c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006730:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800673a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800673e:	f107 070c 	add.w	r7, r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <FSMC_NORSRAMInit>:
  *         that contains the configuration information for the FSMC NOR/SRAM 
  *         specified Banks.                       
  * @retval None
  */
void FSMC_NORSRAMInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{ 
 8006748:	b490      	push	{r4, r7}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006750:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681a      	ldr	r2, [r3, #0]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6859      	ldr	r1, [r3, #4]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
 8006760:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
 8006766:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
 800676c:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
 8006772:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
 8006778:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_DataAddressMux |
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
 800677e:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a1b      	ldr	r3, [r3, #32]
            FSMC_NORSRAMInitStruct->FSMC_MemoryType |
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
 8006784:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth |
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
 800678a:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode |
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
 8006790:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
 8006796:	4319      	orrs	r1, r3
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity |
            FSMC_NORSRAMInitStruct->FSMC_WrapMode |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
 800679c:	4319      	orrs	r1, r3
  assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision));
  assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode)); 
  
  /* Bank1 NOR/SRAM control register configuration */ 
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800679e:	4603      	mov	r3, r0
 80067a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive |
            FSMC_NORSRAMInitStruct->FSMC_WriteOperation |
            FSMC_NORSRAMInitStruct->FSMC_WaitSignal |
            FSMC_NORSRAMInitStruct->FSMC_ExtendedMode |
            FSMC_NORSRAMInitStruct->FSMC_WriteBurst;
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d10f      	bne.n	80067cc <FSMC_NORSRAMInit+0x84>
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
 80067ac:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	f04f 4420 	mov.w	r4, #2684354560	; 0xa0000000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6819      	ldr	r1, [r3, #0]
 80067bc:	4623      	mov	r3, r4
 80067be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067c2:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80067c6:	4603      	mov	r3, r0
 80067c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 80067cc:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f103 0201 	add.w	r2, r3, #1
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067dc:	6819      	ldr	r1, [r3, #0]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	ea4f 1303 	mov.w	r3, r3, lsl #4
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
 80067e8:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
 80067f4:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006800:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	ea4f 5303 	mov.w	r3, r3, lsl #20
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
 800680c:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	ea4f 6303 	mov.w	r3, r3, lsl #24
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
 8006818:	4319      	orrs	r1, r3
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800681e:	699b      	ldr	r3, [r3, #24]
            (uint32_t)FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime << 4) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime << 8) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration << 16) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision << 20) |
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
 8006820:	4319      	orrs	r1, r3
  if(FSMC_NORSRAMInitStruct->FSMC_MemoryType == FSMC_MemoryType_NOR)
  {
    FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank] |= (uint32_t)BCR_FACCEN_SET;
  }
  /* Bank1 NOR/SRAM timing register configuration */
  FSMC_Bank1->BTCR[FSMC_NORSRAMInitStruct->FSMC_Bank+1] = 
 8006822:	4603      	mov	r3, r0
 8006824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            (FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency << 24) |
             FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode;
            
    
  /* Bank1 NOR/SRAM timing register for write configuration, if extended mode is used */
  if(FSMC_NORSRAMInitStruct->FSMC_ExtendedMode == FSMC_ExtendedMode_Enable)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006830:	d127      	bne.n	8006882 <FSMC_NORSRAMInit+0x13a>
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 8006832:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006836:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	6812      	ldr	r2, [r2, #0]
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006842:	6808      	ldr	r0, [r1, #0]
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006848:	6849      	ldr	r1, [r1, #4]
 800684a:	ea4f 1101 	mov.w	r1, r1, lsl #4
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
 800684e:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006854:	6889      	ldr	r1, [r1, #8]
 8006856:	ea4f 2101 	mov.w	r1, r1, lsl #8
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
 800685a:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 800685c:	6879      	ldr	r1, [r7, #4]
 800685e:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006860:	6909      	ldr	r1, [r1, #16]
 8006862:	ea4f 5101 	mov.w	r1, r1, lsl #20
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
 8006866:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 800686c:	6949      	ldr	r1, [r1, #20]
 800686e:	ea4f 6101 	mov.w	r1, r1, lsl #24
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
 8006872:	4308      	orrs	r0, r1
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8006878:	6989      	ldr	r1, [r1, #24]
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
              (uint32_t)FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime << 4 )|
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime << 8) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision << 20) |
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
 800687a:	4301      	orrs	r1, r0
    assert_param(IS_FSMC_ADDRESS_HOLD_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime));
    assert_param(IS_FSMC_DATASETUP_TIME(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime));
    assert_param(IS_FSMC_CLK_DIV(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision));
    assert_param(IS_FSMC_DATA_LATENCY(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency));
    assert_param(IS_FSMC_ACCESS_MODE(FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode));
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 
 800687c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006880:	e009      	b.n	8006896 <FSMC_NORSRAMInit+0x14e>
              (FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency << 24) |
               FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode;
  }
  else
  {
    FSMC_Bank1E->BWTR[FSMC_NORSRAMInitStruct->FSMC_Bank] = 0x0FFFFFFF;
 8006882:	f44f 7382 	mov.w	r3, #260	; 0x104
 8006886:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	6812      	ldr	r2, [r2, #0]
 800688e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
}
 8006896:	f107 0708 	add.w	r7, r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bc90      	pop	{r4, r7}
 800689e:	4770      	bx	lr

080068a0 <FSMC_NORSRAMStructInit>:
  * @param  FSMC_NORSRAMInitStruct: pointer to a FSMC_NORSRAMInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void FSMC_NORSRAMStructInit(FSMC_NORSRAMInitTypeDef* FSMC_NORSRAMInitStruct)
{  
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Reset NOR/SRAM Init structure parameters values */
  FSMC_NORSRAMInitStruct->FSMC_Bank = FSMC_Bank1_NORSRAM1;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_DataAddressMux = FSMC_DataAddressMux_Enable;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f04f 0202 	mov.w	r2, #2
 80068b6:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_MemoryType = FSMC_MemoryType_SRAM;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f04f 0200 	mov.w	r2, #0
 80068de:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WrapMode = FSMC_WrapMode_Disable;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	61da      	str	r2, [r3, #28]
  FSMC_NORSRAMInitStruct->FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f04f 0200 	mov.w	r2, #0
 80068ee:	621a      	str	r2, [r3, #32]
  FSMC_NORSRAMInitStruct->FSMC_WriteOperation = FSMC_WriteOperation_Enable;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24
  FSMC_NORSRAMInitStruct->FSMC_WaitSignal = FSMC_WaitSignal_Enable;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
  FSMC_NORSRAMInitStruct->FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f04f 0200 	mov.w	r2, #0
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c
  FSMC_NORSRAMInitStruct->FSMC_WriteBurst = FSMC_WriteBurst_Disable;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006914:	f04f 020f 	mov.w	r2, #15
 8006918:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	f04f 020f 	mov.w	r2, #15
 8006922:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006928:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800692c:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006932:	f04f 020f 	mov.w	r2, #15
 8006936:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_CLKDivision = 0xF;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693c:	f04f 020f 	mov.w	r2, #15
 8006940:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_DataLatency = 0xF;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006946:	f04f 020f 	mov.w	r2, #15
 800694a:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_ReadWriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A; 
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressSetupTime = 0xF;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	f04f 020f 	mov.w	r2, #15
 800695e:	601a      	str	r2, [r3, #0]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AddressHoldTime = 0xF;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006964:	f04f 020f 	mov.w	r2, #15
 8006968:	605a      	str	r2, [r3, #4]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataSetupTime = 0xFF;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8006972:	609a      	str	r2, [r3, #8]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_BusTurnAroundDuration = 0xF;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006978:	f04f 020f 	mov.w	r2, #15
 800697c:	60da      	str	r2, [r3, #12]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_CLKDivision = 0xF;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	f04f 020f 	mov.w	r2, #15
 8006986:	611a      	str	r2, [r3, #16]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_DataLatency = 0xF;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	f04f 020f 	mov.w	r2, #15
 8006990:	615a      	str	r2, [r3, #20]
  FSMC_NORSRAMInitStruct->FSMC_WriteTimingStruct->FSMC_AccessMode = FSMC_AccessMode_A;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006996:	f04f 0200 	mov.w	r2, #0
 800699a:	619a      	str	r2, [r3, #24]
}
 800699c:	f107 070c 	add.w	r7, r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bc80      	pop	{r7}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop

080069a8 <FSMC_NORSRAMCmd>:
  *            @arg FSMC_Bank1_NORSRAM4: FSMC Bank1 NOR/SRAM4 
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NORSRAMCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	460b      	mov	r3, r1
 80069b2:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NORSRAM_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00d      	beq.n	80069d6 <FSMC_NORSRAMCmd+0x2e>
  {
    /* Enable the selected NOR/SRAM Bank by setting the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] |= BCR_MBKEN_SET;
 80069ba:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80069be:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	f043 0101 	orr.w	r1, r3, #1
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	4603      	mov	r3, r0
 80069d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80069d4:	e00f      	b.n	80069f6 <FSMC_NORSRAMCmd+0x4e>
  }
  else
  {
    /* Disable the selected NOR/SRAM Bank by clearing the PBKEN bit in the BCRx register */
    FSMC_Bank1->BTCR[FSMC_Bank] &= BCR_MBKEN_RESET;
 80069d6:	f04f 4020 	mov.w	r0, #2684354560	; 0xa0000000
 80069da:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069e4:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80069e8:	f2c0 030f 	movt	r3, #15
 80069ec:	4013      	ands	r3, r2
 80069ee:	6879      	ldr	r1, [r7, #4]
 80069f0:	4602      	mov	r2, r0
 80069f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  }
}
 80069f6:	f107 070c 	add.w	r7, r7, #12
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr

08006a00 <FSMC_NANDDeInit>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND 
  * @retval None
  */
void FSMC_NANDDeInit(uint32_t FSMC_Bank)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b10      	cmp	r3, #16
 8006a0c:	d11c      	bne.n	8006a48 <FSMC_NANDDeInit+0x48>
  {
    /* Set the FSMC_Bank2 registers to their reset values */
    FSMC_Bank2->PCR2 = 0x00000018;
 8006a0e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006a12:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a16:	f04f 0218 	mov.w	r2, #24
 8006a1a:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->SR2 = 0x00000040;
 8006a1c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006a20:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a24:	f04f 0240 	mov.w	r2, #64	; 0x40
 8006a28:	605a      	str	r2, [r3, #4]
    FSMC_Bank2->PMEM2 = 0xFCFCFCFC;
 8006a2a:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006a2e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a32:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006a36:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = 0xFCFCFCFC;  
 8006a38:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006a3c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a40:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006a44:	60da      	str	r2, [r3, #12]
 8006a46:	e01b      	b.n	8006a80 <FSMC_NANDDeInit+0x80>
  }
  /* FSMC_Bank3_NAND */  
  else
  {
    /* Set the FSMC_Bank3 registers to their reset values */
    FSMC_Bank3->PCR3 = 0x00000018;
 8006a48:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a4c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a50:	f04f 0218 	mov.w	r2, #24
 8006a54:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->SR3 = 0x00000040;
 8006a56:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a5a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a5e:	f04f 0240 	mov.w	r2, #64	; 0x40
 8006a62:	605a      	str	r2, [r3, #4]
    FSMC_Bank3->PMEM3 = 0xFCFCFCFC;
 8006a64:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a68:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a6c:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006a70:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = 0xFCFCFCFC; 
 8006a72:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006a76:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006a7a:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006a7e:	60da      	str	r2, [r3, #12]
  }  
}
 8006a80:	f107 070c 	add.w	r7, r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bc80      	pop	{r7}
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop

08006a8c <FSMC_NANDInit>:
  * @param  FSMC_NANDInitStruct : pointer to a FSMC_NANDInitTypeDef structure that
  *         contains the configuration information for the FSMC NAND specified Banks.                       
  * @retval None
  */
void FSMC_NANDInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b087      	sub	sp, #28
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmppcr = 0x00000000, tmppmem = 0x00000000, tmppatt = 0x00000000; 
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	f04f 0300 	mov.w	r3, #0
 8006a9e:	613b      	str	r3, [r7, #16]
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685a      	ldr	r2, [r3, #4]
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
 8006aae:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68db      	ldr	r3, [r3, #12]
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
 8006ab4:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
 8006aba:	431a      	orrs	r2, r3
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	ea4f 2343 	mov.w	r3, r3, lsl #9
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
 8006ac4:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	ea4f 3343 	mov.w	r3, r3, lsl #13
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
            PCR_MEMORYTYPE_NAND |
            FSMC_NANDInitStruct->FSMC_MemoryDataWidth |
            FSMC_NANDInitStruct->FSMC_ECC |
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
 8006ace:	4313      	orrs	r3, r2
  assert_param(IS_FSMC_WAIT_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the tmppcr value according to FSMC_NANDInitStruct parameters */
  tmppcr = (uint32_t)FSMC_NANDInitStruct->FSMC_Waitfeature |
 8006ad0:	f043 0308 	orr.w	r3, r3, #8
 8006ad4:	617b      	str	r3, [r7, #20]
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69db      	ldr	r3, [r3, #28]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	ea4f 2303 	mov.w	r3, r3, lsl #8
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006ae6:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006af2:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	ea4f 6303 	mov.w	r3, r3, lsl #24
            FSMC_NANDInitStruct->FSMC_ECCPageSize |
            (FSMC_NANDInitStruct->FSMC_TCLRSetupTime << 9 )|
            (FSMC_NANDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set tmppmem value according to FSMC_CommonSpaceTimingStructure parameters */
  tmppmem = (uint32_t)FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	681a      	ldr	r2, [r3, #0]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	ea4f 2303 	mov.w	r3, r3, lsl #8
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006b12:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a1b      	ldr	r3, [r3, #32]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	ea4f 4303 	mov.w	r3, r3, lsl #16
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006b1e:	431a      	orrs	r2, r3
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a1b      	ldr	r3, [r3, #32]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	ea4f 6303 	mov.w	r3, r3, lsl #24
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set tmppatt value according to FSMC_AttributeSpaceTimingStructure parameters */
  tmppatt = (uint32_t)FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
            (FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);
  
  if(FSMC_NANDInitStruct->FSMC_Bank == FSMC_Bank2_NAND)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b10      	cmp	r3, #16
 8006b34:	d112      	bne.n	8006b5c <FSMC_NANDInit+0xd0>
  {
    /* FSMC_Bank2_NAND registers configuration */
    FSMC_Bank2->PCR2 = tmppcr;
 8006b36:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006b3a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	601a      	str	r2, [r3, #0]
    FSMC_Bank2->PMEM2 = tmppmem;
 8006b42:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006b46:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	609a      	str	r2, [r3, #8]
    FSMC_Bank2->PATT2 = tmppatt;
 8006b4e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006b52:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	60da      	str	r2, [r3, #12]
 8006b5a:	e011      	b.n	8006b80 <FSMC_NANDInit+0xf4>
  }
  else
  {
    /* FSMC_Bank3_NAND registers configuration */
    FSMC_Bank3->PCR3 = tmppcr;
 8006b5c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b60:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	601a      	str	r2, [r3, #0]
    FSMC_Bank3->PMEM3 = tmppmem;
 8006b68:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b6c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	609a      	str	r2, [r3, #8]
    FSMC_Bank3->PATT3 = tmppatt;
 8006b74:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006b78:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006b7c:	68fa      	ldr	r2, [r7, #12]
 8006b7e:	60da      	str	r2, [r3, #12]
  }
}
 8006b80:	f107 071c 	add.w	r7, r7, #28
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop

08006b8c <FSMC_NANDStructInit>:
  * @param  FSMC_NANDInitStruct: pointer to a FSMC_NANDInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void FSMC_NANDStructInit(FSMC_NANDInitTypeDef* FSMC_NANDInitStruct)
{ 
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Reset NAND Init structure parameters values */
  FSMC_NANDInitStruct->FSMC_Bank = FSMC_Bank2_NAND;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f04f 0210 	mov.w	r2, #16
 8006b9a:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f04f 0200 	mov.w	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_8b;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f04f 0200 	mov.w	r2, #0
 8006baa:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_ECC = FSMC_ECC_Disable;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_ECCPageSize = FSMC_ECCPageSize_256Bytes;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f04f 0200 	mov.w	r2, #0
 8006bba:	611a      	str	r2, [r3, #16]
  FSMC_NANDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f04f 0200 	mov.w	r2, #0
 8006bc2:	615a      	str	r2, [r3, #20]
  FSMC_NANDInitStruct->FSMC_TARSetupTime = 0x0;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f04f 0200 	mov.w	r2, #0
 8006bca:	619a      	str	r2, [r3, #24]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	69db      	ldr	r3, [r3, #28]
 8006bd0:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006bd4:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006bde:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006be8:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	69db      	ldr	r3, [r3, #28]
 8006bee:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006bf2:	60da      	str	r2, [r3, #12]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006bfc:	601a      	str	r2, [r3, #0]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006c06:	605a      	str	r2, [r3, #4]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006c10:	609a      	str	r2, [r3, #8]
  FSMC_NANDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	  
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006c1a:	60da      	str	r2, [r3, #12]
}
 8006c1c:	f107 070c 	add.w	r7, r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop

08006c28 <FSMC_NANDCmd>:
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @param  NewState: new state of the FSMC_Bank. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01c      	beq.n	8006c74 <FSMC_NANDCmd+0x4c>
  {
    /* Enable the selected NAND Bank by setting the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b10      	cmp	r3, #16
 8006c3e:	d10c      	bne.n	8006c5a <FSMC_NANDCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_PBKEN_SET;
 8006c40:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006c44:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006c48:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006c4c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006c50:	6812      	ldr	r2, [r2, #0]
 8006c52:	f042 0204 	orr.w	r2, r2, #4
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	e02e      	b.n	8006cb8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_PBKEN_SET;
 8006c5a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006c5e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006c62:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006c66:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006c6a:	6812      	ldr	r2, [r2, #0]
 8006c6c:	f042 0204 	orr.w	r2, r2, #4
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e021      	b.n	8006cb8 <FSMC_NANDCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank by clearing the PBKEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b10      	cmp	r3, #16
 8006c78:	d10f      	bne.n	8006c9a <FSMC_NANDCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_PBKEN_RESET;
 8006c7a:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006c7e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006c82:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006c86:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006c8a:	6819      	ldr	r1, [r3, #0]
 8006c8c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006c90:	f2c0 030f 	movt	r3, #15
 8006c94:	400b      	ands	r3, r1
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	e00e      	b.n	8006cb8 <FSMC_NANDCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_PBKEN_RESET;
 8006c9a:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006c9e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006ca2:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ca6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006caa:	6819      	ldr	r1, [r3, #0]
 8006cac:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006cb0:	f2c0 030f 	movt	r3, #15
 8006cb4:	400b      	ands	r3, r1
 8006cb6:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006cb8:	f107 070c 	add.w	r7, r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop

08006cc4 <FSMC_NANDECCCmd>:
  * @param  NewState: new state of the FSMC NAND ECC feature.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_NANDECCCmd(uint32_t FSMC_Bank, FunctionalState NewState)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  assert_param(IS_FSMC_NAND_BANK(FSMC_Bank));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d01c      	beq.n	8006d10 <FSMC_NANDECCCmd+0x4c>
  {
    /* Enable the selected NAND Bank ECC function by setting the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b10      	cmp	r3, #16
 8006cda:	d10c      	bne.n	8006cf6 <FSMC_NANDECCCmd+0x32>
    {
      FSMC_Bank2->PCR2 |= PCR_ECCEN_SET;
 8006cdc:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006ce0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006ce4:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006ce8:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cf2:	601a      	str	r2, [r3, #0]
 8006cf4:	e02e      	b.n	8006d54 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 |= PCR_ECCEN_SET;
 8006cf6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006cfa:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006cfe:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006d02:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	e021      	b.n	8006d54 <FSMC_NANDECCCmd+0x90>
    }
  }
  else
  {
    /* Disable the selected NAND Bank ECC function by clearing the ECCEN bit in the PCRx register */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b10      	cmp	r3, #16
 8006d14:	d10f      	bne.n	8006d36 <FSMC_NANDECCCmd+0x72>
    {
      FSMC_Bank2->PCR2 &= PCR_ECCEN_RESET;
 8006d16:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006d1a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006d1e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006d22:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006d26:	6819      	ldr	r1, [r3, #0]
 8006d28:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8006d2c:	f2c0 030f 	movt	r3, #15
 8006d30:	400b      	ands	r3, r1
 8006d32:	6013      	str	r3, [r2, #0]
 8006d34:	e00e      	b.n	8006d54 <FSMC_NANDECCCmd+0x90>
    }
    else
    {
      FSMC_Bank3->PCR3 &= PCR_ECCEN_RESET;
 8006d36:	f04f 0280 	mov.w	r2, #128	; 0x80
 8006d3a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006d3e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d42:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	f64f 73bf 	movw	r3, #65471	; 0xffbf
 8006d4c:	f2c0 030f 	movt	r3, #15
 8006d50:	400b      	ands	r3, r1
 8006d52:	6013      	str	r3, [r2, #0]
    }
  }
}
 8006d54:	f107 070c 	add.w	r7, r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bc80      	pop	{r7}
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop

08006d60 <FSMC_GetECC>:
  *            @arg FSMC_Bank2_NAND: FSMC Bank2 NAND 
  *            @arg FSMC_Bank3_NAND: FSMC Bank3 NAND
  * @retval The Error Correction Code (ECC) value.
  */
uint32_t FSMC_GetECC(uint32_t FSMC_Bank)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b085      	sub	sp, #20
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t eccval = 0x00000000;
 8006d68:	f04f 0300 	mov.w	r3, #0
 8006d6c:	60fb      	str	r3, [r7, #12]
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b10      	cmp	r3, #16
 8006d72:	d106      	bne.n	8006d82 <FSMC_GetECC+0x22>
  {
    /* Get the ECCR2 register value */
    eccval = FSMC_Bank2->ECCR2;
 8006d74:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006d78:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e005      	b.n	8006d8e <FSMC_GetECC+0x2e>
  }
  else
  {
    /* Get the ECCR3 register value */
    eccval = FSMC_Bank3->ECCR3;
 8006d82:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006d86:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	60fb      	str	r3, [r7, #12]
  }
  /* Return the error correction code value */
  return(eccval);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	f107 0714 	add.w	r7, r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bc80      	pop	{r7}
 8006d9a:	4770      	bx	lr

08006d9c <FSMC_PCCARDDeInit>:
  * @brief  Deinitializes the FSMC PCCARD Bank registers to their default reset values.
  * @param  None                       
  * @retval None
  */
void FSMC_PCCARDDeInit(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* Set the FSMC_Bank4 registers to their reset values */
  FSMC_Bank4->PCR4 = 0x00000018; 
 8006da0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006da4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006da8:	f04f 0218 	mov.w	r2, #24
 8006dac:	601a      	str	r2, [r3, #0]
  FSMC_Bank4->SR4 = 0x00000000;	
 8006dae:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006db2:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
  FSMC_Bank4->PMEM4 = 0xFCFCFCFC;
 8006dbc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006dc0:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006dc4:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006dc8:	609a      	str	r2, [r3, #8]
  FSMC_Bank4->PATT4 = 0xFCFCFCFC;
 8006dca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006dce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006dd2:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006dd6:	60da      	str	r2, [r3, #12]
  FSMC_Bank4->PIO4 = 0xFCFCFCFC;
 8006dd8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006ddc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006de0:	f04f 32fc 	mov.w	r2, #4244438268	; 0xfcfcfcfc
 8006de4:	611a      	str	r2, [r3, #16]
}
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <FSMC_PCCARDInit>:
  * @param  FSMC_PCCARDInitStruct : pointer to a FSMC_PCCARDInitTypeDef structure
  *         that contains the configuration information for the FSMC PCCARD Bank.                       
  * @retval None
  */
void FSMC_PCCARDInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8006df4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006df8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6811      	ldr	r1, [r2, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	6852      	ldr	r2, [r2, #4]
 8006e04:	ea4f 2242 	mov.w	r2, r2, lsl #9
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
 8006e08:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	6892      	ldr	r2, [r2, #8]
 8006e0e:	ea4f 3242 	mov.w	r2, r2, lsl #13
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
 8006e12:	430a      	orrs	r2, r1
 8006e14:	f042 0210 	orr.w	r2, r2, #16
  assert_param(IS_FSMC_WAIT_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime));
  assert_param(IS_FSMC_HOLD_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime));
  assert_param(IS_FSMC_HIZ_TIME(FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime));
  
  /* Set the PCR4 register value according to FSMC_PCCARDInitStruct parameters */
  FSMC_Bank4->PCR4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_Waitfeature |
 8006e18:	601a      	str	r2, [r3, #0]
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006e1a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006e1e:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	68d2      	ldr	r2, [r2, #12]
 8006e26:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	68d2      	ldr	r2, [r2, #12]
 8006e2c:	6852      	ldr	r2, [r2, #4]
 8006e2e:	ea4f 2202 	mov.w	r2, r2, lsl #8
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006e32:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	68d2      	ldr	r2, [r2, #12]
 8006e38:	6892      	ldr	r2, [r2, #8]
 8006e3a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e3e:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
 8006e40:	687a      	ldr	r2, [r7, #4]
 8006e42:	68d2      	ldr	r2, [r2, #12]
 8006e44:	68d2      	ldr	r2, [r2, #12]
 8006e46:	ea4f 6202 	mov.w	r2, r2, lsl #24
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e4a:	430a      	orrs	r2, r1
                     FSMC_MemoryDataWidth_16b |  
                     (FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime << 9) |
                     (FSMC_PCCARDInitStruct->FSMC_TARSetupTime << 13);
            
  /* Set PMEM4 register value according to FSMC_CommonSpaceTimingStructure parameters */
  FSMC_Bank4->PMEM4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime |
 8006e4c:	609a      	str	r2, [r3, #8]
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006e4e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006e52:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6912      	ldr	r2, [r2, #16]
 8006e5a:	6811      	ldr	r1, [r2, #0]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e5c:	687a      	ldr	r2, [r7, #4]
 8006e5e:	6912      	ldr	r2, [r2, #16]
 8006e60:	6852      	ldr	r2, [r2, #4]
 8006e62:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006e66:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	6912      	ldr	r2, [r2, #16]
 8006e6c:	6892      	ldr	r2, [r2, #8]
 8006e6e:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e72:	4311      	orrs	r1, r2
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	6912      	ldr	r2, [r2, #16]
 8006e78:	68d2      	ldr	r2, [r2, #12]
 8006e7a:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e7e:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime << 24); 
            
  /* Set PATT4 register value according to FSMC_AttributeSpaceTimingStructure parameters */
  FSMC_Bank4->PATT4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime |
 8006e80:	60da      	str	r2, [r3, #12]
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006e82:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006e86:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6952      	ldr	r2, [r2, #20]
 8006e8e:	6811      	ldr	r1, [r2, #0]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	6952      	ldr	r2, [r2, #20]
 8006e94:	6852      	ldr	r2, [r2, #4]
 8006e96:	ea4f 2202 	mov.w	r2, r2, lsl #8
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006e9a:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6952      	ldr	r2, [r2, #20]
 8006ea0:	6892      	ldr	r2, [r2, #8]
 8006ea2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
 8006ea6:	4311      	orrs	r1, r2
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	6952      	ldr	r2, [r2, #20]
 8006eac:	68d2      	ldr	r2, [r2, #12]
 8006eae:	ea4f 6202 	mov.w	r2, r2, lsl #24
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
 8006eb2:	430a      	orrs	r2, r1
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                      (FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime << 24);	
            
  /* Set PIO4 register value according to FSMC_IOSpaceTimingStructure parameters */
  FSMC_Bank4->PIO4 = (uint32_t)FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime |
 8006eb4:	611a      	str	r2, [r3, #16]
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime << 8) |
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime << 16)|
                     (FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime << 24);             
}
 8006eb6:	f107 070c 	add.w	r7, r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <FSMC_PCCARDStructInit>:
  * @param  FSMC_PCCARDInitStruct: pointer to a FSMC_PCCARDInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void FSMC_PCCARDStructInit(FSMC_PCCARDInitTypeDef* FSMC_PCCARDInitStruct)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* Reset PCCARD Init structure parameters values */
  FSMC_PCCARDInitStruct->FSMC_Waitfeature = FSMC_Waitfeature_Disable;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f04f 0200 	mov.w	r2, #0
 8006ece:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_TCLRSetupTime = 0x0;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_TARSetupTime = 0x0;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006ee8:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006ef2:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006efc:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_CommonSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f06:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f10:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f1a:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	691b      	ldr	r3, [r3, #16]
 8006f20:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f24:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_AttributeSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;	
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	691b      	ldr	r3, [r3, #16]
 8006f2a:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f2e:	60da      	str	r2, [r3, #12]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_SetupTime = 0xFC;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f38:	601a      	str	r2, [r3, #0]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_WaitSetupTime = 0xFC;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f42:	605a      	str	r2, [r3, #4]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HoldSetupTime = 0xFC;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f4c:	609a      	str	r2, [r3, #8]
  FSMC_PCCARDInitStruct->FSMC_IOSpaceTimingStruct->FSMC_HiZSetupTime = 0xFC;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f04f 02fc 	mov.w	r2, #252	; 0xfc
 8006f56:	60da      	str	r2, [r3, #12]
}
 8006f58:	f107 070c 	add.w	r7, r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bc80      	pop	{r7}
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop

08006f64 <FSMC_PCCARDCmd>:
  * @param  NewState: new state of the PCCARD Memory Bank.  
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_PCCARDCmd(FunctionalState NewState)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006f6e:	79fb      	ldrb	r3, [r7, #7]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00c      	beq.n	8006f8e <FSMC_PCCARDCmd+0x2a>
  {
    /* Enable the PCCARD Bank by setting the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 |= PCR_PBKEN_SET;
 8006f74:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006f78:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006f7c:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8006f80:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006f84:	6812      	ldr	r2, [r2, #0]
 8006f86:	f042 0204 	orr.w	r2, r2, #4
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e00e      	b.n	8006fac <FSMC_PCCARDCmd+0x48>
  }
  else
  {
    /* Disable the PCCARD Bank by clearing the PBKEN bit in the PCR4 register */
    FSMC_Bank4->PCR4 &= PCR_PBKEN_RESET;
 8006f8e:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8006f92:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006f96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8006f9a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006f9e:	6819      	ldr	r1, [r3, #0]
 8006fa0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006fa4:	f2c0 030f 	movt	r3, #15
 8006fa8:	400b      	ands	r3, r1
 8006faa:	6013      	str	r3, [r2, #0]
  }
}
 8006fac:	f107 070c 	add.w	r7, r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bc80      	pop	{r7}
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop

08006fb8 <FSMC_ITConfig>:
  * @param  NewState: new state of the specified FSMC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void FSMC_ITConfig(uint32_t FSMC_Bank, uint32_t FSMC_IT, FunctionalState NewState)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));	
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006fc6:	79fb      	ldrb	r3, [r7, #7]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d02d      	beq.n	8007028 <FSMC_ITConfig+0x70>
  {
    /* Enable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b10      	cmp	r3, #16
 8006fd0:	d10c      	bne.n	8006fec <FSMC_ITConfig+0x34>
    {
      FSMC_Bank2->SR2 |= FSMC_IT;
 8006fd2:	f04f 0360 	mov.w	r3, #96	; 0x60
 8006fd6:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006fda:	f04f 0260 	mov.w	r2, #96	; 0x60
 8006fde:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8006fe2:	6851      	ldr	r1, [r2, #4]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	430a      	orrs	r2, r1
 8006fe8:	605a      	str	r2, [r3, #4]
 8006fea:	e050      	b.n	800708e <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ff2:	d10c      	bne.n	800700e <FSMC_ITConfig+0x56>
    {
      FSMC_Bank3->SR3 |= FSMC_IT;
 8006ff4:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006ff8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8006ffc:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007000:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007004:	6851      	ldr	r1, [r2, #4]
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	430a      	orrs	r2, r1
 800700a:	605a      	str	r2, [r3, #4]
 800700c:	e03f      	b.n	800708e <FSMC_ITConfig+0xd6>
    }
    /* Enable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 |= FSMC_IT;    
 800700e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007012:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007016:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800701a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800701e:	6851      	ldr	r1, [r2, #4]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
 8007026:	e032      	b.n	800708e <FSMC_ITConfig+0xd6>
    }
  }
  else
  {
    /* Disable the selected FSMC_Bank2 interrupts */
    if(FSMC_Bank == FSMC_Bank2_NAND)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b10      	cmp	r3, #16
 800702c:	d10e      	bne.n	800704c <FSMC_ITConfig+0x94>
    {
      
      FSMC_Bank2->SR2 &= (uint32_t)~FSMC_IT;
 800702e:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007032:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007036:	f04f 0260 	mov.w	r2, #96	; 0x60
 800703a:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800703e:	6851      	ldr	r1, [r2, #4]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	ea6f 0202 	mvn.w	r2, r2
 8007046:	400a      	ands	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
 800704a:	e020      	b.n	800708e <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank3 interrupts */
    else if (FSMC_Bank == FSMC_Bank3_NAND)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007052:	d10e      	bne.n	8007072 <FSMC_ITConfig+0xba>
    {
      FSMC_Bank3->SR3 &= (uint32_t)~FSMC_IT;
 8007054:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007058:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800705c:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007060:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007064:	6851      	ldr	r1, [r2, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	ea6f 0202 	mvn.w	r2, r2
 800706c:	400a      	ands	r2, r1
 800706e:	605a      	str	r2, [r3, #4]
 8007070:	e00d      	b.n	800708e <FSMC_ITConfig+0xd6>
    }
    /* Disable the selected FSMC_Bank4 interrupts */
    else
    {
      FSMC_Bank4->SR4 &= (uint32_t)~FSMC_IT;    
 8007072:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007076:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800707a:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800707e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007082:	6851      	ldr	r1, [r2, #4]
 8007084:	68ba      	ldr	r2, [r7, #8]
 8007086:	ea6f 0202 	mvn.w	r2, r2
 800708a:	400a      	ands	r2, r1
 800708c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800708e:	f107 0714 	add.w	r7, r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr

08007098 <FSMC_GetFlagStatus>:
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  *            @arg FSMC_FLAG_FEMPT: Fifo empty Flag. 
  * @retval The new state of FSMC_FLAG (SET or RESET).
  */
FlagStatus FSMC_GetFlagStatus(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsr = 0x00000000;
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_FLAG(FSMC_FLAG));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d106      	bne.n	80070c2 <FSMC_GetFlagStatus+0x2a>
  {
    tmpsr = FSMC_Bank2->SR2;
 80070b4:	f04f 0360 	mov.w	r3, #96	; 0x60
 80070b8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	60bb      	str	r3, [r7, #8]
 80070c0:	e010      	b.n	80070e4 <FSMC_GetFlagStatus+0x4c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070c8:	d106      	bne.n	80070d8 <FSMC_GetFlagStatus+0x40>
  {
    tmpsr = FSMC_Bank3->SR3;
 80070ca:	f04f 0380 	mov.w	r3, #128	; 0x80
 80070ce:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	60bb      	str	r3, [r7, #8]
 80070d6:	e005      	b.n	80070e4 <FSMC_GetFlagStatus+0x4c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80070d8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80070dc:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	60bb      	str	r3, [r7, #8]
  } 
  
  /* Get the flag status */
  if ((tmpsr & FSMC_FLAG) != (uint16_t)RESET )
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	4013      	ands	r3, r2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <FSMC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 80070ee:	f04f 0301 	mov.w	r3, #1
 80070f2:	73fb      	strb	r3, [r7, #15]
 80070f4:	e002      	b.n	80070fc <FSMC_GetFlagStatus+0x64>
  }
  else
  {
    bitstatus = RESET;
 80070f6:	f04f 0300 	mov.w	r3, #0
 80070fa:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	f107 0714 	add.w	r7, r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop

0800710c <FSMC_ClearFlag>:
  *            @arg FSMC_FLAG_Level: Level detection Flag.
  *            @arg FSMC_FLAG_FallingEdge: Falling edge detection Flag.
  * @retval None
  */
void FSMC_ClearFlag(uint32_t FSMC_Bank, uint32_t FSMC_FLAG)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
 /* Check the parameters */
  assert_param(IS_FSMC_GETFLAG_BANK(FSMC_Bank));
  assert_param(IS_FSMC_CLEAR_FLAG(FSMC_FLAG)) ;
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b10      	cmp	r3, #16
 800711a:	d10e      	bne.n	800713a <FSMC_ClearFlag+0x2e>
  {
    FSMC_Bank2->SR2 &= ~FSMC_FLAG; 
 800711c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007120:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007124:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007128:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800712c:	6851      	ldr	r1, [r2, #4]
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	ea6f 0202 	mvn.w	r2, r2
 8007134:	400a      	ands	r2, r1
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	e020      	b.n	800717c <FSMC_ClearFlag+0x70>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007140:	d10e      	bne.n	8007160 <FSMC_ClearFlag+0x54>
  {
    FSMC_Bank3->SR3 &= ~FSMC_FLAG;
 8007142:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007146:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800714a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800714e:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007152:	6851      	ldr	r1, [r2, #4]
 8007154:	683a      	ldr	r2, [r7, #0]
 8007156:	ea6f 0202 	mvn.w	r2, r2
 800715a:	400a      	ands	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
 800715e:	e00d      	b.n	800717c <FSMC_ClearFlag+0x70>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~FSMC_FLAG;
 8007160:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8007164:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007168:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 800716c:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007170:	6851      	ldr	r1, [r2, #4]
 8007172:	683a      	ldr	r2, [r7, #0]
 8007174:	ea6f 0202 	mvn.w	r2, r2
 8007178:	400a      	ands	r2, r1
 800717a:	605a      	str	r2, [r3, #4]
  }
}
 800717c:	f107 070c 	add.w	r7, r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	bc80      	pop	{r7}
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop

08007188 <FSMC_GetITStatus>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt. 
  * @retval The new state of FSMC_IT (SET or RESET).
  */
ITStatus FSMC_GetITStatus(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsr = 0x0, itstatus = 0x0, itenable = 0x0; 
 8007198:	f04f 0300 	mov.w	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	f04f 0300 	mov.w	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	f04f 0300 	mov.w	r3, #0
 80071a8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_GET_IT(FSMC_IT));
  
  if(FSMC_Bank == FSMC_Bank2_NAND)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b10      	cmp	r3, #16
 80071ae:	d106      	bne.n	80071be <FSMC_GetITStatus+0x36>
  {
    tmpsr = FSMC_Bank2->SR2;
 80071b0:	f04f 0360 	mov.w	r3, #96	; 0x60
 80071b4:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	613b      	str	r3, [r7, #16]
 80071bc:	e010      	b.n	80071e0 <FSMC_GetITStatus+0x58>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071c4:	d106      	bne.n	80071d4 <FSMC_GetITStatus+0x4c>
  {
    tmpsr = FSMC_Bank3->SR3;
 80071c6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80071ca:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	613b      	str	r3, [r7, #16]
 80071d2:	e005      	b.n	80071e0 <FSMC_GetITStatus+0x58>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    tmpsr = FSMC_Bank4->SR4;
 80071d4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 80071d8:	f2ca 0300 	movt	r3, #40960	; 0xa000
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	613b      	str	r3, [r7, #16]
  } 
  
  itstatus = tmpsr & FSMC_IT;
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
  
  itenable = tmpsr & (FSMC_IT >> 3);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	ea4f 02d3 	mov.w	r2, r3, lsr #3
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	4013      	ands	r3, r2
 80071f2:	60bb      	str	r3, [r7, #8]
  if ((itstatus != (uint32_t)RESET)  && (itenable != (uint32_t)RESET))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d006      	beq.n	8007208 <FSMC_GetITStatus+0x80>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <FSMC_GetITStatus+0x80>
  {
    bitstatus = SET;
 8007200:	f04f 0301 	mov.w	r3, #1
 8007204:	75fb      	strb	r3, [r7, #23]
 8007206:	e002      	b.n	800720e <FSMC_GetITStatus+0x86>
  }
  else
  {
    bitstatus = RESET;
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus; 
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	f107 071c 	add.w	r7, r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	bc80      	pop	{r7}
 800721a:	4770      	bx	lr

0800721c <FSMC_ClearITPendingBit>:
  *            @arg FSMC_IT_Level: Level edge detection interrupt.
  *            @arg FSMC_IT_FallingEdge: Falling edge detection interrupt.
  * @retval None
  */
void FSMC_ClearITPendingBit(uint32_t FSMC_Bank, uint32_t FSMC_IT)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_IT_BANK(FSMC_Bank));
  assert_param(IS_FSMC_IT(FSMC_IT));
    
  if(FSMC_Bank == FSMC_Bank2_NAND)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b10      	cmp	r3, #16
 800722a:	d110      	bne.n	800724e <FSMC_ClearITPendingBit+0x32>
  {
    FSMC_Bank2->SR2 &= ~(FSMC_IT >> 3); 
 800722c:	f04f 0360 	mov.w	r3, #96	; 0x60
 8007230:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007234:	f04f 0260 	mov.w	r2, #96	; 0x60
 8007238:	f2ca 0200 	movt	r2, #40960	; 0xa000
 800723c:	6851      	ldr	r1, [r2, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8007244:	ea6f 0202 	mvn.w	r2, r2
 8007248:	400a      	ands	r2, r1
 800724a:	605a      	str	r2, [r3, #4]
 800724c:	e024      	b.n	8007298 <FSMC_ClearITPendingBit+0x7c>
  }  
  else if(FSMC_Bank == FSMC_Bank3_NAND)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007254:	d110      	bne.n	8007278 <FSMC_ClearITPendingBit+0x5c>
  {
    FSMC_Bank3->SR3 &= ~(FSMC_IT >> 3);
 8007256:	f04f 0380 	mov.w	r3, #128	; 0x80
 800725a:	f2ca 0300 	movt	r3, #40960	; 0xa000
 800725e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8007262:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007266:	6851      	ldr	r1, [r2, #4]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 800726e:	ea6f 0202 	mvn.w	r2, r2
 8007272:	400a      	ands	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
 8007276:	e00f      	b.n	8007298 <FSMC_ClearITPendingBit+0x7c>
  }
  /* FSMC_Bank4_PCCARD*/
  else
  {
    FSMC_Bank4->SR4 &= ~(FSMC_IT >> 3);
 8007278:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 800727c:	f2ca 0300 	movt	r3, #40960	; 0xa000
 8007280:	f04f 02a0 	mov.w	r2, #160	; 0xa0
 8007284:	f2ca 0200 	movt	r2, #40960	; 0xa000
 8007288:	6851      	ldr	r1, [r2, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	ea4f 02d2 	mov.w	r2, r2, lsr #3
 8007290:	ea6f 0202 	mvn.w	r2, r2
 8007294:	400a      	ands	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }
}
 8007298:	f107 070c 	add.w	r7, r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	bc80      	pop	{r7}
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop

080072a4 <GPIO_DeInit>:
  * @note   By default, The GPIO pins are configured in input floating mode (except JTAG pins).
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if (GPIOx == GPIOA)
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d10c      	bne.n	80072d4 <GPIO_DeInit+0x30>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80072ba:	f04f 0001 	mov.w	r0, #1
 80072be:	f04f 0101 	mov.w	r1, #1
 80072c2:	f002 fbc3 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
 80072c6:	f04f 0001 	mov.w	r0, #1
 80072ca:	f04f 0100 	mov.w	r1, #0
 80072ce:	f002 fbbd 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 80072d2:	e09e      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOB)
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072da:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80072de:	429a      	cmp	r2, r3
 80072e0:	d10c      	bne.n	80072fc <GPIO_DeInit+0x58>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80072e2:	f04f 0002 	mov.w	r0, #2
 80072e6:	f04f 0101 	mov.w	r1, #1
 80072ea:	f002 fbaf 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
 80072ee:	f04f 0002 	mov.w	r0, #2
 80072f2:	f04f 0100 	mov.w	r1, #0
 80072f6:	f002 fba9 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 80072fa:	e08a      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOC)
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007302:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007306:	429a      	cmp	r2, r3
 8007308:	d10c      	bne.n	8007324 <GPIO_DeInit+0x80>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 800730a:	f04f 0004 	mov.w	r0, #4
 800730e:	f04f 0101 	mov.w	r1, #1
 8007312:	f002 fb9b 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
 8007316:	f04f 0004 	mov.w	r0, #4
 800731a:	f04f 0100 	mov.w	r1, #0
 800731e:	f002 fb95 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 8007322:	e076      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOD)
 8007324:	687a      	ldr	r2, [r7, #4]
 8007326:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800732a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800732e:	429a      	cmp	r2, r3
 8007330:	d10c      	bne.n	800734c <GPIO_DeInit+0xa8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8007332:	f04f 0008 	mov.w	r0, #8
 8007336:	f04f 0101 	mov.w	r1, #1
 800733a:	f002 fb87 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
 800733e:	f04f 0008 	mov.w	r0, #8
 8007342:	f04f 0100 	mov.w	r1, #0
 8007346:	f002 fb81 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 800734a:	e062      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOE)
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007352:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007356:	429a      	cmp	r2, r3
 8007358:	d10c      	bne.n	8007374 <GPIO_DeInit+0xd0>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800735a:	f04f 0010 	mov.w	r0, #16
 800735e:	f04f 0101 	mov.w	r1, #1
 8007362:	f002 fb73 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
 8007366:	f04f 0010 	mov.w	r0, #16
 800736a:	f04f 0100 	mov.w	r1, #0
 800736e:	f002 fb6d 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 8007372:	e04e      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOF)
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800737a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800737e:	429a      	cmp	r2, r3
 8007380:	d10c      	bne.n	800739c <GPIO_DeInit+0xf8>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
 8007382:	f04f 0020 	mov.w	r0, #32
 8007386:	f04f 0101 	mov.w	r1, #1
 800738a:	f002 fb5f 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
 800738e:	f04f 0020 	mov.w	r0, #32
 8007392:	f04f 0100 	mov.w	r1, #0
 8007396:	f002 fb59 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 800739a:	e03a      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOG)
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073a2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d10c      	bne.n	80073c4 <GPIO_DeInit+0x120>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80073aa:	f04f 0040 	mov.w	r0, #64	; 0x40
 80073ae:	f04f 0101 	mov.w	r1, #1
 80073b2:	f002 fb4b 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
 80073b6:	f04f 0040 	mov.w	r0, #64	; 0x40
 80073ba:	f04f 0100 	mov.w	r1, #0
 80073be:	f002 fb45 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 80073c2:	e026      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else if (GPIOx == GPIOH)
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80073ca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d10c      	bne.n	80073ec <GPIO_DeInit+0x148>
  {
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
 80073d2:	f04f 0080 	mov.w	r0, #128	; 0x80
 80073d6:	f04f 0101 	mov.w	r1, #1
 80073da:	f002 fb37 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
 80073de:	f04f 0080 	mov.w	r0, #128	; 0x80
 80073e2:	f04f 0100 	mov.w	r1, #0
 80073e6:	f002 fb31 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
 80073ea:	e012      	b.n	8007412 <GPIO_DeInit+0x16e>
  }
  else
  {
    if (GPIOx == GPIOI)
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d10b      	bne.n	8007412 <GPIO_DeInit+0x16e>
    {
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
 80073fa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80073fe:	f04f 0101 	mov.w	r1, #1
 8007402:	f002 fb23 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
 8007406:	f44f 7080 	mov.w	r0, #256	; 0x100
 800740a:	f04f 0100 	mov.w	r1, #0
 800740e:	f002 fb1d 	bl	8009a4c <RCC_AHB1PeriphResetCmd>
    }
  }
}
 8007412:	f107 0708 	add.w	r7, r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop

0800741c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	f04f 0300 	mov.w	r3, #0
 8007430:	613b      	str	r3, [r7, #16]
 8007432:	f04f 0300 	mov.w	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	e086      	b.n	800754e <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f04f 0201 	mov.w	r2, #1
 8007446:	fa02 f303 	lsl.w	r3, r2, r3
 800744a:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	4013      	ands	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8007456:	68fa      	ldr	r2, [r7, #12]
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d173      	bne.n	8007546 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007468:	f04f 0103 	mov.w	r1, #3
 800746c:	fa01 f303 	lsl.w	r3, r1, r3
 8007470:	ea6f 0303 	mvn.w	r3, r3
 8007474:	401a      	ands	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	791b      	ldrb	r3, [r3, #4]
 8007482:	4619      	mov	r1, r3
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800748a:	fa01 f303 	lsl.w	r3, r1, r3
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	791b      	ldrb	r3, [r3, #4]
 8007498:	2b01      	cmp	r3, #1
 800749a:	d003      	beq.n	80074a4 <GPIO_Init+0x88>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	791b      	ldrb	r3, [r3, #4]
 80074a0:	2b02      	cmp	r3, #2
 80074a2:	d134      	bne.n	800750e <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074ae:	f04f 0103 	mov.w	r1, #3
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	ea6f 0303 	mvn.w	r3, r3
 80074ba:	401a      	ands	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	689a      	ldr	r2, [r3, #8]
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	795b      	ldrb	r3, [r3, #5]
 80074c8:	4619      	mov	r1, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80074d0:	fa01 f303 	lsl.w	r3, r1, r3
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	f04f 0101 	mov.w	r1, #1
 80074e6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ea:	ea6f 0303 	mvn.w	r3, r3
 80074ee:	401a      	ands	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	799b      	ldrb	r3, [r3, #6]
 80074fc:	4619      	mov	r1, r3
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	b29b      	uxth	r3, r3
 8007502:	fa01 f303 	lsl.w	r3, r1, r3
 8007506:	b29b      	uxth	r3, r3
 8007508:	431a      	orrs	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	b29b      	uxth	r3, r3
 8007516:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800751a:	f04f 0103 	mov.w	r1, #3
 800751e:	fa01 f303 	lsl.w	r3, r1, r3
 8007522:	ea6f 0303 	mvn.w	r3, r3
 8007526:	401a      	ands	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68da      	ldr	r2, [r3, #12]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	79db      	ldrb	r3, [r3, #7]
 8007534:	4619      	mov	r1, r3
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	f103 0301 	add.w	r3, r3, #1
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2b0f      	cmp	r3, #15
 8007552:	f67f af75 	bls.w	8007440 <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8007556:	f107 071c 	add.w	r7, r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	bc80      	pop	{r7}
 800755e:	4770      	bx	lr

08007560 <GPIO_StructInit>:
  * @brief  Fills each GPIO_InitStruct member with its default value.
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800756e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f04f 0200 	mov.w	r2, #0
 8007576:	711a      	strb	r2, [r3, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f04f 0200 	mov.w	r2, #0
 800757e:	715a      	strb	r2, [r3, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	719a      	strb	r2, [r3, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f04f 0200 	mov.w	r2, #0
 800758e:	71da      	strb	r2, [r3, #7]
}
 8007590:	f107 070c 	add.w	r7, r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop

0800759c <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be locked.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0x00010000;
 80075a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 80075ae:	887a      	ldrh	r2, [r7, #2]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4313      	orrs	r3, r2
 80075b4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	61da      	str	r2, [r3, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 80075bc:	887a      	ldrh	r2, [r7, #2]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	61da      	str	r2, [r3, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60fb      	str	r3, [r7, #12]
}
 80075d4:	f107 0714 	add.w	r7, r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop

080075e0 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80075ec:	f04f 0300 	mov.w	r3, #0
 80075f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691a      	ldr	r2, [r3, #16]
 80075f6:	887b      	ldrh	r3, [r7, #2]
 80075f8:	4013      	ands	r3, r2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 80075fe:	f04f 0301 	mov.w	r3, #1
 8007602:	73fb      	strb	r3, [r7, #15]
 8007604:	e002      	b.n	800760c <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800760c:	7bfb      	ldrb	r3, [r7, #15]
}
 800760e:	4618      	mov	r0, r3
 8007610:	f107 0714 	add.w	r7, r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	bc80      	pop	{r7}
 8007618:	4770      	bx	lr
 800761a:	bf00      	nop

0800761c <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	b29b      	uxth	r3, r3
}
 800762a:	4618      	mov	r0, r3
 800762c:	f107 070c 	add.w	r7, r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	bc80      	pop	{r7}
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop

08007638 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *          This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007638:	b480      	push	{r7}
 800763a:	b085      	sub	sp, #20
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8007644:	f04f 0300 	mov.w	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	887b      	ldrh	r3, [r7, #2]
 8007650:	4013      	ands	r3, r2
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 8007656:	f04f 0301 	mov.w	r3, #1
 800765a:	73fb      	strb	r3, [r7, #15]
 800765c:	e002      	b.n	8007664 <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800765e:	f04f 0300 	mov.w	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007664:	7bfb      	ldrb	r3, [r7, #15]
}
 8007666:	4618      	mov	r0, r3
 8007668:	f107 0714 	add.w	r7, r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	bc80      	pop	{r7}
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop

08007674 <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	b29b      	uxth	r3, r3
}
 8007682:	4618      	mov	r0, r3
 8007684:	f107 070c 	add.w	r7, r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop

08007690 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	887a      	ldrh	r2, [r7, #2]
 80076a0:	831a      	strh	r2, [r3, #24]
}
 80076a2:	f107 070c 	add.w	r7, r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bc80      	pop	{r7}
 80076aa:	4770      	bx	lr

080076ac <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	887a      	ldrh	r2, [r7, #2]
 80076bc:	835a      	strh	r2, [r3, #26]
}
 80076be:	f107 070c 	add.w	r7, r7, #12
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bc80      	pop	{r7}
 80076c6:	4770      	bx	lr

080076c8 <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	460a      	mov	r2, r1
 80076d4:	807a      	strh	r2, [r7, #2]
 80076d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80076d8:	787b      	ldrb	r3, [r7, #1]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d003      	beq.n	80076e6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	887a      	ldrh	r2, [r7, #2]
 80076e2:	831a      	strh	r2, [r3, #24]
 80076e4:	e002      	b.n	80076ec <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	887a      	ldrh	r2, [r7, #2]
 80076ea:	835a      	strh	r2, [r3, #26]
  }
}
 80076ec:	f107 070c 	add.w	r7, r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bc80      	pop	{r7}
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop

080076f8 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8007704:	887a      	ldrh	r2, [r7, #2]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	615a      	str	r2, [r3, #20]
}
 800770a:	f107 070c 	add.w	r7, r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr

08007714 <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695a      	ldr	r2, [r3, #20]
 8007724:	887b      	ldrh	r3, [r7, #2]
 8007726:	405a      	eors	r2, r3
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	615a      	str	r2, [r3, #20]
}
 800772c:	f107 070c 	add.w	r7, r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	bc80      	pop	{r7}
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop

08007738 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	4613      	mov	r3, r2
 8007742:	460a      	mov	r2, r1
 8007744:	807a      	strh	r2, [r7, #2]
 8007746:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800774e:	f04f 0300 	mov.w	r3, #0
 8007752:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007754:	787a      	ldrb	r2, [r7, #1]
 8007756:	887b      	ldrh	r3, [r7, #2]
 8007758:	f003 0307 	and.w	r3, r3, #7
 800775c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007760:	fa02 f303 	lsl.w	r3, r2, r3
 8007764:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007766:	887b      	ldrh	r3, [r7, #2]
 8007768:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800776c:	b29b      	uxth	r3, r3
 800776e:	461a      	mov	r2, r3
 8007770:	887b      	ldrh	r3, [r7, #2]
 8007772:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 8007776:	b29b      	uxth	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f101 0108 	add.w	r1, r1, #8
 8007780:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8007784:	887b      	ldrh	r3, [r7, #2]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800778e:	f04f 000f 	mov.w	r0, #15
 8007792:	fa00 f303 	lsl.w	r3, r0, r3
 8007796:	ea6f 0303 	mvn.w	r3, r3
 800779a:	4019      	ands	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f102 0208 	add.w	r2, r2, #8
 80077a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80077a6:	887b      	ldrh	r3, [r7, #2]
 80077a8:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	461a      	mov	r2, r3
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f102 0208 	add.w	r2, r2, #8
 80077b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	4313      	orrs	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80077c0:	887b      	ldrh	r3, [r7, #2]
 80077c2:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f102 0208 	add.w	r2, r2, #8
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80077d6:	f107 0714 	add.w	r7, r7, #20
 80077da:	46bd      	mov	sp, r7
 80077dc:	bc80      	pop	{r7}
 80077de:	4770      	bx	lr

080077e0 <HASH_DeInit>:
  * @brief  Deinitializes the HASH peripheral registers to their default reset values
  * @param  None
  * @retval None
  */
void HASH_DeInit(void)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	af00      	add	r7, sp, #0
  /* Enable HASH reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, ENABLE);
 80077e4:	f04f 0020 	mov.w	r0, #32
 80077e8:	f04f 0101 	mov.w	r1, #1
 80077ec:	f002 f958 	bl	8009aa0 <RCC_AHB2PeriphResetCmd>
  /* Release HASH from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_HASH, DISABLE);
 80077f0:	f04f 0020 	mov.w	r0, #32
 80077f4:	f04f 0100 	mov.w	r1, #0
 80077f8:	f002 f952 	bl	8009aa0 <RCC_AHB2PeriphResetCmd>
}
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop

08007800 <HASH_Init>:
  * @note   The field HASH_HMACKeyType in HASH_InitTypeDef must be filled only 
  *          if the algorithm mode is HMAC.       
  * @retval None
  */
void HASH_Init(HASH_InitTypeDef* HASH_InitStruct)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  assert_param(IS_HASH_ALGOSELECTION(HASH_InitStruct->HASH_AlgoSelection));
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
 8007808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800780c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007810:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007814:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007818:	6812      	ldr	r2, [r2, #0]
 800781a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800781e:	601a      	str	r2, [r3, #0]
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007824:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800782c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007830:	6811      	ldr	r1, [r2, #0]
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6810      	ldr	r0, [r2, #0]
               HASH_InitStruct->HASH_DataType | \
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6892      	ldr	r2, [r2, #8]
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 800783a:	4310      	orrs	r0, r2
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	6852      	ldr	r2, [r2, #4]
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
               HASH_InitStruct->HASH_DataType | \
 8007840:	4302      	orrs	r2, r0
  assert_param(IS_HASH_DATATYPE(HASH_InitStruct->HASH_DataType));
  assert_param(IS_HASH_ALGOMODE(HASH_InitStruct->HASH_AlgoMode));
  
  /* Configure the Algorithm used, algorithm mode and the datatype */
  HASH->CR &= ~ (HASH_CR_ALGO | HASH_CR_DATATYPE | HASH_CR_MODE);
  HASH->CR |= (HASH_InitStruct->HASH_AlgoSelection | \
 8007842:	430a      	orrs	r2, r1
 8007844:	601a      	str	r2, [r3, #0]
               HASH_InitStruct->HASH_DataType | \
               HASH_InitStruct->HASH_AlgoMode);
  
  /* if algorithm mode is HMAC, set the Key */  
  if(HASH_InitStruct->HASH_AlgoMode == HASH_AlgoMode_HMAC) 
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b40      	cmp	r3, #64	; 0x40
 800784c:	d118      	bne.n	8007880 <HASH_Init+0x80>
  {
    assert_param(IS_HASH_HMAC_KEYTYPE(HASH_InitStruct->HASH_HMACKeyType));
    HASH->CR &= ~HASH_CR_LKEY;
 800784e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007852:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800785a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800785e:	6812      	ldr	r2, [r2, #0]
 8007860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007864:	601a      	str	r2, [r3, #0]
    HASH->CR |= HASH_InitStruct->HASH_HMACKeyType;
 8007866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800786a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800786e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007872:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007876:	6811      	ldr	r1, [r2, #0]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	68d2      	ldr	r2, [r2, #12]
 800787c:	430a      	orrs	r2, r1
 800787e:	601a      	str	r2, [r3, #0]
  }

  /* Reset the HASH processor core, so that the HASH will be ready to compute 
     the message digest of a new message */
  HASH->CR |= HASH_CR_INIT;  
 8007880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007884:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007888:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800788c:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	f042 0204 	orr.w	r2, r2, #4
 8007896:	601a      	str	r2, [r3, #0]
}
 8007898:	f107 070c 	add.w	r7, r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	bc80      	pop	{r7}
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop

080078a4 <HASH_StructInit>:
  *  @note  The default values set are : Processor mode is HASH, Algorithm selected is SHA1,
  *          Data type selected is 32b and HMAC Key Type is short key.  
  * @retval None
  */
void HASH_StructInit(HASH_InitTypeDef* HASH_InitStruct)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Initialize the HASH_AlgoSelection member */
  HASH_InitStruct->HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f04f 0200 	mov.w	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

  /* Initialize the HASH_AlgoMode member */
  HASH_InitStruct->HASH_AlgoMode = HASH_AlgoMode_HASH;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f04f 0200 	mov.w	r2, #0
 80078ba:	605a      	str	r2, [r3, #4]

  /* Initialize the HASH_DataType member */
  HASH_InitStruct->HASH_DataType = HASH_DataType_32b;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	609a      	str	r2, [r3, #8]

  /* Initialize the HASH_HMACKeyType member */
  HASH_InitStruct->HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f04f 0200 	mov.w	r2, #0
 80078ca:	60da      	str	r2, [r3, #12]
}
 80078cc:	f107 070c 	add.w	r7, r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bc80      	pop	{r7}
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop

080078d8 <HASH_Reset>:
  *         interrupt and HASH_FLAG_DCIS flag. 
  * @param  None
  * @retval None
  */
void HASH_Reset(void)
{
 80078d8:	b480      	push	{r7}
 80078da:	af00      	add	r7, sp, #0
  /* Reset the HASH processor core */
  HASH->CR |= HASH_CR_INIT;
 80078dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80078e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80078e8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	f042 0204 	orr.w	r2, r2, #4
 80078f2:	601a      	str	r2, [r3, #0]
}
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bc80      	pop	{r7}
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop

080078fc <HASH_SetLastWordValidBitsNbr>:
  * @note   The Number of valid bits must be set before to start the message 
  *         digest competition (in Hash and HMAC) and key treatment(in HMAC).    
  * @retval None
  */
void HASH_SetLastWordValidBitsNbr(uint16_t ValidNumber)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	4603      	mov	r3, r0
 8007904:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_VALIDBITSNUMBER(ValidNumber));
  
  /* Configure the Number of valid bits in last word of the message */
  HASH->STR &= ~(HASH_STR_NBW);
 8007906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800790a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800790e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007912:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007916:	6892      	ldr	r2, [r2, #8]
 8007918:	f022 021f 	bic.w	r2, r2, #31
 800791c:	609a      	str	r2, [r3, #8]
  HASH->STR |= ValidNumber;
 800791e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007922:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007926:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800792a:	f2c5 0206 	movt	r2, #20486	; 0x5006
 800792e:	6891      	ldr	r1, [r2, #8]
 8007930:	88fa      	ldrh	r2, [r7, #6]
 8007932:	430a      	orrs	r2, r1
 8007934:	609a      	str	r2, [r3, #8]
}
 8007936:	f107 070c 	add.w	r7, r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr

08007940 <HASH_DataIn>:
  * @brief  Writes data in the Data Input FIFO
  * @param  Data: new data of the message to be processed.
  * @retval None
  */
void HASH_DataIn(uint32_t Data)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Write in the DIN register a new data */
  HASH->DIN = Data;
 8007948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800794c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	605a      	str	r2, [r3, #4]
}
 8007954:	f107 070c 	add.w	r7, r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop

08007960 <HASH_GetInFIFOWordsNbr>:
  * @brief  Returns the number of words already pushed into the IN FIFO.
  * @param  None
  * @retval The value of words already pushed into the IN FIFO.
  */
uint8_t HASH_GetInFIFOWordsNbr(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  /* Return the value of NBW bits */
  return ((HASH->CR & HASH_CR_NBW) >> 8);
 8007964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007968:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007972:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8007976:	b2db      	uxtb	r3, r3
}
 8007978:	4618      	mov	r0, r3
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <HASH_GetDigest>:
  * @param  HASH_MessageDigest: pointer to a HASH_MsgDigest structure which will 
  *         hold the message digest result 
  * @retval None
  */
void HASH_GetDigest(HASH_MsgDigest* HASH_MessageDigest)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Get the data field */
  HASH_MessageDigest->Data[0] = HASH->HR[0];
 8007988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800798c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007990:	68da      	ldr	r2, [r3, #12]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	601a      	str	r2, [r3, #0]
  HASH_MessageDigest->Data[1] = HASH->HR[1];
 8007996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800799a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800799e:	691a      	ldr	r2, [r3, #16]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	605a      	str	r2, [r3, #4]
  HASH_MessageDigest->Data[2] = HASH->HR[2];
 80079a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079a8:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80079ac:	695a      	ldr	r2, [r3, #20]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	609a      	str	r2, [r3, #8]
  HASH_MessageDigest->Data[3] = HASH->HR[3];
 80079b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	60da      	str	r2, [r3, #12]
  HASH_MessageDigest->Data[4] = HASH->HR[4];
 80079c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079c4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80079c8:	69da      	ldr	r2, [r3, #28]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	611a      	str	r2, [r3, #16]
}
 80079ce:	f107 070c 	add.w	r7, r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr

080079d8 <HASH_StartDigest>:
  * @brief  Starts the message padding and calculation of the final message     
  * @param  None
  * @retval None
  */
void HASH_StartDigest(void)
{
 80079d8:	b480      	push	{r7}
 80079da:	af00      	add	r7, sp, #0
  /* Start the Digest calculation */
  HASH->STR |= HASH_STR_DCAL;
 80079dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079e0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 80079e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80079e8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 80079ec:	6892      	ldr	r2, [r2, #8]
 80079ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079f2:	609a      	str	r2, [r3, #8]
}
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bc80      	pop	{r7}
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop

080079fc <HASH_SaveContext>:
  * @param  HASH_ContextSave: pointer to a HASH_Context structure that contains
  *         the repository for current context.
  * @retval None
  */
void HASH_SaveContext(HASH_Context* HASH_ContextSave)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b085      	sub	sp, #20
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	73fb      	strb	r3, [r7, #15]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
 8007a0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a0e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007a12:	6a1a      	ldr	r2, [r3, #32]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	601a      	str	r2, [r3, #0]
  HASH_ContextSave->HASH_STR = HASH->STR;      
 8007a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a1c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]
  HASH_ContextSave->HASH_CR  = HASH->CR;     
 8007a26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a2a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	609a      	str	r2, [r3, #8]
  for(i=0; i<=50;i++)
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	73fb      	strb	r3, [r7, #15]
 8007a3a:	e014      	b.n	8007a66 <HASH_SaveContext+0x6a>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
 8007a3c:	7bf8      	ldrb	r0, [r7, #15]
 8007a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a42:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007a46:	7bfa      	ldrb	r2, [r7, #15]
 8007a48:	f102 023e 	add.w	r2, r2, #62	; 0x3e
 8007a4c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a50:	6879      	ldr	r1, [r7, #4]
 8007a52:	f100 0302 	add.w	r3, r0, #2
 8007a56:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8007a5a:	18cb      	adds	r3, r1, r3
 8007a5c:	605a      	str	r2, [r3, #4]
  
  /* save context registers */
  HASH_ContextSave->HASH_IMR = HASH->IMR;  
  HASH_ContextSave->HASH_STR = HASH->STR;      
  HASH_ContextSave->HASH_CR  = HASH->CR;     
  for(i=0; i<=50;i++)
 8007a5e:	7bfb      	ldrb	r3, [r7, #15]
 8007a60:	f103 0301 	add.w	r3, r3, #1
 8007a64:	73fb      	strb	r3, [r7, #15]
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	2b32      	cmp	r3, #50	; 0x32
 8007a6a:	d9e7      	bls.n	8007a3c <HASH_SaveContext+0x40>
  {
     HASH_ContextSave->HASH_CSR[i] = HASH->CSR[i];
  }   
}
 8007a6c:	f107 0714 	add.w	r7, r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bc80      	pop	{r7}
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop

08007a78 <HASH_RestoreContext>:
  * @param  HASH_ContextRestore: pointer to a HASH_Context structure that contains
  *         the repository for saved context.
  * @retval None
  */
void HASH_RestoreContext(HASH_Context* HASH_ContextRestore)  
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint8_t i = 0;
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	73fb      	strb	r3, [r7, #15]
  
  /* restore context registers */
  HASH->IMR = HASH_ContextRestore->HASH_IMR;   
 8007a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6812      	ldr	r2, [r2, #0]
 8007a92:	621a      	str	r2, [r3, #32]
  HASH->STR = HASH_ContextRestore->HASH_STR;     
 8007a94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a98:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6852      	ldr	r2, [r2, #4]
 8007aa0:	609a      	str	r2, [r3, #8]
  HASH->CR = HASH_ContextRestore->HASH_CR;
 8007aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa6:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007aaa:	687a      	ldr	r2, [r7, #4]
 8007aac:	6892      	ldr	r2, [r2, #8]
 8007aae:	601a      	str	r2, [r3, #0]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
 8007ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007abc:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	f042 0204 	orr.w	r2, r2, #4
 8007ac6:	601a      	str	r2, [r3, #0]
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
 8007ace:	e014      	b.n	8007afa <HASH_RestoreContext+0x82>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
 8007ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ad4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007ad8:	7bf8      	ldrb	r0, [r7, #15]
 8007ada:	7bfa      	ldrb	r2, [r7, #15]
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	f102 0202 	add.w	r2, r2, #2
 8007ae2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8007ae6:	188a      	adds	r2, r1, r2
 8007ae8:	6851      	ldr	r1, [r2, #4]
 8007aea:	f100 023e 	add.w	r2, r0, #62	; 0x3e
 8007aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Initialize the hash processor */
  HASH->CR |= HASH_CR_INIT; 
  
   /* continue restoring context registers */     
  for(i=0; i<=50;i++)
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
 8007af4:	f103 0301 	add.w	r3, r3, #1
 8007af8:	73fb      	strb	r3, [r7, #15]
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
 8007afc:	2b32      	cmp	r3, #50	; 0x32
 8007afe:	d9e7      	bls.n	8007ad0 <HASH_RestoreContext+0x58>
  {
     HASH->CSR[i] = HASH_ContextRestore->HASH_CSR[i];
  }   
}
 8007b00:	f107 0714 	add.w	r7, r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop

08007b0c <HASH_DMACmd>:
  * @param  NewState: new state of the selected HASH DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_DMACmd(FunctionalState NewState)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00c      	beq.n	8007b36 <HASH_DMACmd+0x2a>
  {
    /* Enable the HASH DMA request */
    HASH->CR |= HASH_CR_DMAE;
 8007b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b20:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b28:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007b2c:	6812      	ldr	r2, [r2, #0]
 8007b2e:	f042 0208 	orr.w	r2, r2, #8
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	e00b      	b.n	8007b4e <HASH_DMACmd+0x42>
  }
  else
  {
    /* Disable the HASH DMA request */
    HASH->CR &= ~HASH_CR_DMAE;
 8007b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b3a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b42:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007b46:	6812      	ldr	r2, [r2, #0]
 8007b48:	f022 0208 	bic.w	r2, r2, #8
 8007b4c:	601a      	str	r2, [r3, #0]
  }
}
 8007b4e:	f107 070c 	add.w	r7, r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bc80      	pop	{r7}
 8007b56:	4770      	bx	lr

08007b58 <HASH_ITConfig>:
  * @param  NewState: new state of the specified HASH interrupt.
  *           This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void HASH_ITConfig(uint8_t HASH_IT, FunctionalState NewState)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	4602      	mov	r2, r0
 8007b60:	460b      	mov	r3, r1
 8007b62:	71fa      	strb	r2, [r7, #7]
 8007b64:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007b66:	79bb      	ldrb	r3, [r7, #6]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00c      	beq.n	8007b86 <HASH_ITConfig+0x2e>
  {
    /* Enable the selected HASH interrupt */
    HASH->IMR |= HASH_IT;
 8007b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b70:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b78:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007b7c:	6a11      	ldr	r1, [r2, #32]
 8007b7e:	79fa      	ldrb	r2, [r7, #7]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	621a      	str	r2, [r3, #32]
 8007b84:	e00e      	b.n	8007ba4 <HASH_ITConfig+0x4c>
  }
  else
  {
    /* Disable the selected HASH interrupt */
    HASH->IMR &= (uint8_t) ~HASH_IT;
 8007b86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b8a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007b92:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8007b96:	6a11      	ldr	r1, [r2, #32]
 8007b98:	79fa      	ldrb	r2, [r7, #7]
 8007b9a:	ea6f 0202 	mvn.w	r2, r2
 8007b9e:	b2d2      	uxtb	r2, r2
 8007ba0:	400a      	ands	r2, r1
 8007ba2:	621a      	str	r2, [r3, #32]
  }
}
 8007ba4:	f107 070c 	add.w	r7, r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bc80      	pop	{r7}
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop

08007bb0 <HASH_GetFlagStatus>:
  *            @arg HASH_FLAG_DMAS: DMAS Status flag
  *            @arg HASH_FLAG_DINNE: Data Input register (DIN) not empty status flag
  * @retval The new state of HASH_FLAG (SET or RESET)
  */
FlagStatus HASH_GetFlagStatus(uint16_t HASH_FLAG)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tempreg = 0;
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HASH_GET_FLAG(HASH_FLAG));

  /* check if the FLAG is in CR register */
  if ((HASH_FLAG & HASH_FLAG_DINNE) != (uint16_t)RESET ) 
 8007bc6:	88fb      	ldrh	r3, [r7, #6]
 8007bc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d006      	beq.n	8007bde <HASH_GetFlagStatus+0x2e>
  {
    tempreg = HASH->CR;
 8007bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd4:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	60bb      	str	r3, [r7, #8]
 8007bdc:	e005      	b.n	8007bea <HASH_GetFlagStatus+0x3a>
  }
  else /* The FLAG is in SR register */
  {
    tempreg = HASH->SR;
 8007bde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007be2:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	60bb      	str	r3, [r7, #8]
  }

  /* Check the status of the specified HASH flag */
  if ((tempreg & HASH_FLAG) != (uint16_t)RESET)
 8007bea:	88fa      	ldrh	r2, [r7, #6]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4013      	ands	r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <HASH_GetFlagStatus+0x4c>
  {
    /* HASH is set */
    bitstatus = SET;
 8007bf4:	f04f 0301 	mov.w	r3, #1
 8007bf8:	73fb      	strb	r3, [r7, #15]
 8007bfa:	e002      	b.n	8007c02 <HASH_GetFlagStatus+0x52>
  }
  else
  {
    /* HASH_FLAG is reset */
    bitstatus = RESET;
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the HASH_FLAG status */
  return  bitstatus;
 8007c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	f107 0714 	add.w	r7, r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bc80      	pop	{r7}
 8007c0e:	4770      	bx	lr

08007c10 <HASH_ClearFlag>:
  *            @arg HASH_FLAG_DINIS: Data Input Flag
  *            @arg HASH_FLAG_DCIS: Digest Calculation Completion Flag                       
  * @retval None
  */
void HASH_ClearFlag(uint16_t HASH_FLAG)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	4603      	mov	r3, r0
 8007c18:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_HASH_CLEAR_FLAG(HASH_FLAG));
  
  /* Clear the selected HASH flags */
  HASH->SR = ~(uint32_t)HASH_FLAG;
 8007c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c1e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007c22:	88fa      	ldrh	r2, [r7, #6]
 8007c24:	ea6f 0202 	mvn.w	r2, r2
 8007c28:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007c2a:	f107 070c 	add.w	r7, r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bc80      	pop	{r7}
 8007c32:	4770      	bx	lr

08007c34 <HASH_GetITStatus>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval The new state of HASH_IT (SET or RESET).
  */
ITStatus HASH_GetITStatus(uint8_t HASH_IT)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8007c3e:	f04f 0300 	mov.w	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_HASH_GET_IT(HASH_IT));  


  /* Check the status of the specified HASH interrupt */
  tmpreg =  HASH->SR;
 8007c4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c4e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	60bb      	str	r3, [r7, #8]

  if (((HASH->IMR & tmpreg) & HASH_IT) != RESET)
 8007c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c5a:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007c5e:	6a1a      	ldr	r2, [r3, #32]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	401a      	ands	r2, r3
 8007c64:	79fb      	ldrb	r3, [r7, #7]
 8007c66:	4013      	ands	r3, r2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <HASH_GetITStatus+0x40>
  {
    /* HASH_IT is set */
    bitstatus = SET;
 8007c6c:	f04f 0301 	mov.w	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	e002      	b.n	8007c7a <HASH_GetITStatus+0x46>
  }
  else
  {
    /* HASH_IT is reset */
    bitstatus = RESET;
 8007c74:	f04f 0300 	mov.w	r3, #0
 8007c78:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the HASH_IT status */
  return bitstatus;
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f107 0714 	add.w	r7, r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bc80      	pop	{r7}
 8007c86:	4770      	bx	lr

08007c88 <HASH_ClearITPendingBit>:
  *            @arg HASH_IT_DINI: Data Input interrupt
  *            @arg HASH_IT_DCI: Digest Calculation Completion Interrupt
  * @retval None
  */
void HASH_ClearITPendingBit(uint8_t HASH_IT)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_HASH_IT(HASH_IT));

  /* Clear the selected HASH interrupt pending bit */
  HASH->SR = (uint8_t)~HASH_IT;
 8007c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c96:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8007c9a:	79fa      	ldrb	r2, [r7, #7]
 8007c9c:	ea6f 0202 	mvn.w	r2, r2
 8007ca0:	b2d2      	uxtb	r2, r2
 8007ca2:	625a      	str	r2, [r3, #36]	; 0x24
}
 8007ca4:	f107 070c 	add.w	r7, r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bc80      	pop	{r7}
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop

08007cb0 <HASH_MD5>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b09d      	sub	sp, #116	; 0x74
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007cbc:	f04f 0300 	mov.w	r3, #0
 8007cc0:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  __IO uint32_t counter = 0;
 8007cc8:	f04f 0300 	mov.w	r3, #0
 8007ccc:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8007cce:	f04f 0300 	mov.w	r3, #0
 8007cd2:	663b      	str	r3, [r7, #96]	; 0x60
  ErrorStatus status = SUCCESS;
 8007cd4:	f04f 0301 	mov.w	r3, #1
 8007cd8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  uint32_t inputaddr  = (uint32_t)Input;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t outputaddr = (uint32_t)Output;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	65fb      	str	r3, [r7, #92]	; 0x5c


  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	f003 0303 	and.w	r3, r3, #3
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8007cf6:	f7ff fd73 	bl	80077e0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8007cfa:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007d06:	f04f 0320 	mov.w	r3, #32
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&MD5_HASH_InitStructure);
 8007d0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fd75 	bl	8007800 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007d16:	8afb      	ldrh	r3, [r7, #22]
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fdee 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d26:	e00c      	b.n	8007d42 <HASH_MD5+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 8007d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff fe07 	bl	8007940 <HASH_DataIn>
    inputaddr+=4;
 8007d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d34:	f103 0304 	add.w	r3, r3, #4
 8007d38:	667b      	str	r3, [r7, #100]	; 0x64

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 8007d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3c:	f103 0304 	add.w	r3, r3, #4
 8007d40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d3ee      	bcc.n	8007d28 <HASH_MD5+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 8007d4a:	f7ff fe45 	bl	80079d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007d4e:	f04f 0008 	mov.w	r0, #8
 8007d52:	f7ff ff2d 	bl	8007bb0 <HASH_GetFlagStatus>
 8007d56:	4603      	mov	r3, r0
 8007d58:	663b      	str	r3, [r7, #96]	; 0x60
    counter++;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f103 0301 	add.w	r3, r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d68:	d002      	beq.n	8007d70 <HASH_MD5+0xc0>
 8007d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1ee      	bne.n	8007d4e <HASH_MD5+0x9e>

  if (busystatus != RESET)
 8007d70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d004      	beq.n	8007d80 <HASH_MD5+0xd0>
  {
     status = ERROR;
 8007d76:	f04f 0300 	mov.w	r3, #0
 8007d7a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8007d7e:	e030      	b.n	8007de2 <HASH_MD5+0x132>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&MD5_MessageDigest);
 8007d80:	f107 0318 	add.w	r3, r7, #24
 8007d84:	4618      	mov	r0, r3
 8007d86:	f7ff fdfb 	bl	8007980 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8007d8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d8c:	69ba      	ldr	r2, [r7, #24]
 8007d8e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007d90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d92:	ba14      	rev	r4, r2
 8007d94:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8007d96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d98:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d9c:	f103 0304 	add.w	r3, r3, #4
 8007da0:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8007da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007da8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007daa:	ba14      	rev	r4, r2
 8007dac:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 8007dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007db0:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007db4:	f103 0304 	add.w	r3, r3, #4
 8007db8:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8007dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dbc:	6a3a      	ldr	r2, [r7, #32]
 8007dbe:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007dc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc2:	ba14      	rev	r4, r2
 8007dc4:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 8007dc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc8:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8007dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dcc:	f103 0304 	add.w	r3, r3, #4
 8007dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
    *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 8007dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007dd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007dda:	ba14      	rev	r4, r2
 8007ddc:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 8007dde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007de0:	601a      	str	r2, [r3, #0]
  }
  return status; 
 8007de2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	f107 0774 	add.w	r7, r7, #116	; 0x74
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd90      	pop	{r4, r7, pc}

08007df0 <HMAC_MD5>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
                     uint32_t Ilen, uint8_t Output[16])
{
 8007df0:	b590      	push	{r4, r7, lr}
 8007df2:	b09f      	sub	sp, #124	; 0x7c
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef MD5_HASH_InitStructure;
  HASH_MsgDigest MD5_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8007dfe:	f04f 0300 	mov.w	r3, #0
 8007e02:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 8007e04:	f04f 0300 	mov.w	r3, #0
 8007e08:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	667b      	str	r3, [r7, #100]	; 0x64
  ErrorStatus status = SUCCESS;
 8007e1c:	f04f 0301 	mov.w	r3, #1
 8007e20:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t keyaddr    = (uint32_t)Key;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t inputaddr  = (uint32_t)Input;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	66bb      	str	r3, [r7, #104]	; 0x68
  uint32_t outputaddr = (uint32_t)Output;
 8007e2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e30:	663b      	str	r3, [r7, #96]	; 0x60

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	b29b      	uxth	r3, r3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f003 0303 	and.w	r3, r3, #3
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	833b      	strh	r3, [r7, #24]
   
  /* HASH peripheral initialization */
  HASH_DeInit();
 8007e56:	f7ff fcc3 	bl	80077e0 <HASH_DeInit>

  /* HASH Configuration */
  MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
 8007e5a:	f04f 0380 	mov.w	r3, #128	; 0x80
 8007e5e:	633b      	str	r3, [r7, #48]	; 0x30
  MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8007e60:	f04f 0340 	mov.w	r3, #64	; 0x40
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
  MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8007e66:	f04f 0320 	mov.w	r3, #32
 8007e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	2b40      	cmp	r3, #64	; 0x40
 8007e70:	d903      	bls.n	8007e7a <HMAC_MD5+0x8a>
  {
    /* HMAC long Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8007e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e78:	e002      	b.n	8007e80 <HMAC_MD5+0x90>
  }
  else
  {
    /* HMAC short Key */
    MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 8007e7a:	f04f 0300 	mov.w	r3, #0
 8007e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&MD5_HASH_InitStructure);
 8007e80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7ff fcbb 	bl	8007800 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007e8a:	8b3b      	ldrh	r3, [r7, #24]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7ff fd34 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8007e94:	f04f 0300 	mov.w	r3, #0
 8007e98:	677b      	str	r3, [r7, #116]	; 0x74
 8007e9a:	e00c      	b.n	8007eb6 <HMAC_MD5+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 8007e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7ff fd4d 	bl	8007940 <HASH_DataIn>
    keyaddr+=4;
 8007ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ea8:	f103 0304 	add.w	r3, r3, #4
 8007eac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8007eae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eb0:	f103 0304 	add.w	r3, r3, #4
 8007eb4:	677b      	str	r3, [r7, #116]	; 0x74
 8007eb6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d3ee      	bcc.n	8007e9c <HMAC_MD5+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }
  
  /* Start the HASH processor */
  HASH_StartDigest();
 8007ebe:	f7ff fd8b 	bl	80079d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007ec2:	f04f 0008 	mov.w	r0, #8
 8007ec6:	f7ff fe73 	bl	8007bb0 <HASH_GetFlagStatus>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	667b      	str	r3, [r7, #100]	; 0x64
    counter++;
 8007ece:	697b      	ldr	r3, [r7, #20]
 8007ed0:	f103 0301 	add.w	r3, r3, #1
 8007ed4:	617b      	str	r3, [r7, #20]
  }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007edc:	d002      	beq.n	8007ee4 <HMAC_MD5+0xf4>
 8007ede:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d1ee      	bne.n	8007ec2 <HMAC_MD5+0xd2>

  if (busystatus != RESET)
 8007ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d004      	beq.n	8007ef4 <HMAC_MD5+0x104>
  {
     status = ERROR;
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007ef2:	e0a2      	b.n	800803a <HMAC_MD5+0x24a>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 8007ef4:	8b7b      	ldrh	r3, [r7, #26]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f7ff fcff 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8007efe:	f04f 0300 	mov.w	r3, #0
 8007f02:	677b      	str	r3, [r7, #116]	; 0x74
 8007f04:	e00c      	b.n	8007f20 <HMAC_MD5+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 8007f06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7ff fd18 	bl	8007940 <HASH_DataIn>
      inputaddr+=4;
 8007f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f12:	f103 0304 	add.w	r3, r3, #4
 8007f16:	66bb      	str	r3, [r7, #104]	; 0x68
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 8007f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f1a:	f103 0304 	add.w	r3, r3, #4
 8007f1e:	677b      	str	r3, [r7, #116]	; 0x74
 8007f20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d3ee      	bcc.n	8007f06 <HMAC_MD5+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 8007f28:	f7ff fd56 	bl	80079d8 <HASH_StartDigest>

    /* wait until the Busy flag is RESET */
    counter =0;
 8007f2c:	f04f 0300 	mov.w	r3, #0
 8007f30:	617b      	str	r3, [r7, #20]
    do
    {
       busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007f32:	f04f 0008 	mov.w	r0, #8
 8007f36:	f7ff fe3b 	bl	8007bb0 <HASH_GetFlagStatus>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	667b      	str	r3, [r7, #100]	; 0x64
       counter++;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f103 0301 	add.w	r3, r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
    }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f4c:	d002      	beq.n	8007f54 <HMAC_MD5+0x164>
 8007f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d1ee      	bne.n	8007f32 <HMAC_MD5+0x142>

    if (busystatus != RESET)
 8007f54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d004      	beq.n	8007f64 <HMAC_MD5+0x174>
    {
      status = ERROR;
 8007f5a:	f04f 0300 	mov.w	r3, #0
 8007f5e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007f62:	e06a      	b.n	800803a <HMAC_MD5+0x24a>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8007f64:	8b3b      	ldrh	r3, [r7, #24]
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7ff fcc7 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	66fb      	str	r3, [r7, #108]	; 0x6c
      for(i=0; i<Keylen; i+=4)
 8007f72:	f04f 0300 	mov.w	r3, #0
 8007f76:	677b      	str	r3, [r7, #116]	; 0x74
 8007f78:	e00c      	b.n	8007f94 <HMAC_MD5+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 8007f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fcde 	bl	8007940 <HASH_DataIn>
        keyaddr+=4;
 8007f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f86:	f103 0304 	add.w	r3, r3, #4
 8007f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 8007f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f8e:	f103 0304 	add.w	r3, r3, #4
 8007f92:	677b      	str	r3, [r7, #116]	; 0x74
 8007f94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d3ee      	bcc.n	8007f7a <HMAC_MD5+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }
  
       /* Start the HASH processor */
       HASH_StartDigest();
 8007f9c:	f7ff fd1c 	bl	80079d8 <HASH_StartDigest>

       /* wait until the Busy flag is RESET */
       counter =0;
 8007fa0:	f04f 0300 	mov.w	r3, #0
 8007fa4:	617b      	str	r3, [r7, #20]
       do
       {
          busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8007fa6:	f04f 0008 	mov.w	r0, #8
 8007faa:	f7ff fe01 	bl	8007bb0 <HASH_GetFlagStatus>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	667b      	str	r3, [r7, #100]	; 0x64
          counter++;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f103 0301 	add.w	r3, r3, #1
 8007fb8:	617b      	str	r3, [r7, #20]
      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fc0:	d002      	beq.n	8007fc8 <HMAC_MD5+0x1d8>
 8007fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1ee      	bne.n	8007fa6 <HMAC_MD5+0x1b6>

      if (busystatus != RESET)
 8007fc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d004      	beq.n	8007fd8 <HMAC_MD5+0x1e8>
      {
         status = ERROR;
 8007fce:	f04f 0300 	mov.w	r3, #0
 8007fd2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8007fd6:	e030      	b.n	800803a <HMAC_MD5+0x24a>
      }
      else
      {
         /* Read the message digest */
         HASH_GetDigest(&MD5_MessageDigest);
 8007fd8:	f107 031c 	add.w	r3, r7, #28
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fccf 	bl	8007980 <HASH_GetDigest>
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
 8007fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8007fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007fea:	ba14      	rev	r4, r2
 8007fec:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 8007fee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ff0:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8007ff2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ff4:	f103 0304 	add.w	r3, r3, #4
 8007ff8:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
 8007ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ffc:	6a3a      	ldr	r2, [r7, #32]
 8007ffe:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008002:	ba14      	rev	r4, r2
 8008004:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 8008006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008008:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 800800a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800800c:	f103 0304 	add.w	r3, r3, #4
 8008010:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
 8008012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008016:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008018:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800801a:	ba14      	rev	r4, r2
 800801c:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 800801e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008020:	601a      	str	r2, [r3, #0]
         outputaddr+=4;
 8008022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008024:	f103 0304 	add.w	r3, r3, #4
 8008028:	663b      	str	r3, [r7, #96]	; 0x60
         *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
 800802a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800802c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800802e:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008030:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008032:	ba14      	rev	r4, r2
 8008034:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 8008036:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008038:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return status;  
 800803a:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 800803e:	4618      	mov	r0, r3
 8008040:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 8008044:	46bd      	mov	sp, r7
 8008046:	bd90      	pop	{r4, r7, pc}

08008048 <HASH_SHA1>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HASH_SHA1(uint8_t *Input, uint32_t Ilen, uint8_t Output[20])
{
 8008048:	b590      	push	{r4, r7, lr}
 800804a:	b09f      	sub	sp, #124	; 0x7c
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	60b9      	str	r1, [r7, #8]
 8008052:	607a      	str	r2, [r7, #4]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 8008054:	f04f 0300 	mov.w	r3, #0
 8008058:	82fb      	strh	r3, [r7, #22]
  uint32_t i = 0;
 800805a:	f04f 0300 	mov.w	r3, #0
 800805e:	677b      	str	r3, [r7, #116]	; 0x74
  __IO uint32_t counter = 0;
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
  uint32_t busystatus = 0;
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	66bb      	str	r3, [r7, #104]	; 0x68
  ErrorStatus status = SUCCESS;
 800806c:	f04f 0301 	mov.w	r3, #1
 8008070:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
  uint32_t inputaddr  = (uint32_t)Input;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t outputaddr = (uint32_t)Output;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	667b      	str	r3, [r7, #100]	; 0x64

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	b29b      	uxth	r3, r3
 8008080:	f003 0303 	and.w	r3, r3, #3
 8008084:	b29b      	uxth	r3, r3
 8008086:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800808a:	b29b      	uxth	r3, r3
 800808c:	82fb      	strh	r3, [r7, #22]

  /* HASH peripheral initialization */
  HASH_DeInit();
 800808e:	f7ff fba7 	bl	80077e0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 800809e:	f04f 0320 	mov.w	r3, #32
 80080a2:	637b      	str	r3, [r7, #52]	; 0x34
  HASH_Init(&SHA1_HASH_InitStructure);
 80080a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fba9 	bl	8007800 <HASH_Init>

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80080ae:	8afb      	ldrh	r3, [r7, #22]
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff fc22 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80080b8:	f04f 0300 	mov.w	r3, #0
 80080bc:	677b      	str	r3, [r7, #116]	; 0x74
 80080be:	e00c      	b.n	80080da <HASH_SHA1+0x92>
  {
    HASH_DataIn(*(uint32_t*)inputaddr);
 80080c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7ff fc3b 	bl	8007940 <HASH_DataIn>
    inputaddr+=4;
 80080ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080cc:	f103 0304 	add.w	r3, r3, #4
 80080d0:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Configure the number of valid bits in last word of the data */
  HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

  /* Write the Input block in the IN FIFO */
  for(i=0; i<Ilen; i+=4)
 80080d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080d4:	f103 0304 	add.w	r3, r3, #4
 80080d8:	677b      	str	r3, [r7, #116]	; 0x74
 80080da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d3ee      	bcc.n	80080c0 <HASH_SHA1+0x78>
    HASH_DataIn(*(uint32_t*)inputaddr);
    inputaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 80080e2:	f7ff fc79 	bl	80079d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80080e6:	f04f 0008 	mov.w	r0, #8
 80080ea:	f7ff fd61 	bl	8007bb0 <HASH_GetFlagStatus>
 80080ee:	4603      	mov	r3, r0
 80080f0:	66bb      	str	r3, [r7, #104]	; 0x68
    counter++;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f103 0301 	add.w	r3, r3, #1
 80080f8:	613b      	str	r3, [r7, #16]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008100:	d002      	beq.n	8008108 <HASH_SHA1+0xc0>
 8008102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1ee      	bne.n	80080e6 <HASH_SHA1+0x9e>

  if (busystatus != RESET)
 8008108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800810a:	2b00      	cmp	r3, #0
 800810c:	d004      	beq.n	8008118 <HASH_SHA1+0xd0>
  {
     status = ERROR;
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
 8008116:	e03c      	b.n	8008192 <HASH_SHA1+0x14a>
  }
  else
  {
    /* Read the message digest */
    HASH_GetDigest(&SHA1_MessageDigest);
 8008118:	f107 0318 	add.w	r3, r7, #24
 800811c:	4618      	mov	r0, r3
 800811e:	f7ff fc2f 	bl	8007980 <HASH_GetDigest>
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8008122:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	663a      	str	r2, [r7, #96]	; 0x60
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008128:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800812a:	ba14      	rev	r4, r2
 800812c:	65fc      	str	r4, [r7, #92]	; 0x5c
  return(result);
 800812e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008130:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8008132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008134:	f103 0304 	add.w	r3, r3, #4
 8008138:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 800813a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800813c:	69fa      	ldr	r2, [r7, #28]
 800813e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008142:	ba14      	rev	r4, r2
 8008144:	657c      	str	r4, [r7, #84]	; 0x54
  return(result);
 8008146:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008148:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800814a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800814c:	f103 0304 	add.w	r3, r3, #4
 8008150:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 8008152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008154:	6a3a      	ldr	r2, [r7, #32]
 8008156:	653a      	str	r2, [r7, #80]	; 0x50
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800815a:	ba14      	rev	r4, r2
 800815c:	64fc      	str	r4, [r7, #76]	; 0x4c
  return(result);
 800815e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008160:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 8008162:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008164:	f103 0304 	add.w	r3, r3, #4
 8008168:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 800816a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816e:	64ba      	str	r2, [r7, #72]	; 0x48
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008172:	ba14      	rev	r4, r2
 8008174:	647c      	str	r4, [r7, #68]	; 0x44
  return(result);
 8008176:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008178:	601a      	str	r2, [r3, #0]
    outputaddr+=4;
 800817a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817c:	f103 0304 	add.w	r3, r3, #4
 8008180:	667b      	str	r3, [r7, #100]	; 0x64
    *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 8008182:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008186:	643a      	str	r2, [r7, #64]	; 0x40
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008188:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800818a:	ba14      	rev	r4, r2
 800818c:	63fc      	str	r4, [r7, #60]	; 0x3c
  return(result);
 800818e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008190:	601a      	str	r2, [r3, #0]
  }
  return status;
 8008192:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
}
 8008196:	4618      	mov	r0, r3
 8008198:	f107 077c 	add.w	r7, r7, #124	; 0x7c
 800819c:	46bd      	mov	sp, r7
 800819e:	bd90      	pop	{r4, r7, pc}

080081a0 <HMAC_SHA1>:
  *          - SUCCESS: digest computation done
  *          - ERROR: digest computation failed
  */
ErrorStatus HMAC_SHA1(uint8_t *Key, uint32_t Keylen, uint8_t *Input,
                      uint32_t Ilen, uint8_t Output[20])
{
 80081a0:	b590      	push	{r4, r7, lr}
 80081a2:	b0a1      	sub	sp, #132	; 0x84
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
 80081ac:	603b      	str	r3, [r7, #0]
  HASH_InitTypeDef SHA1_HASH_InitStructure;
  HASH_MsgDigest SHA1_MessageDigest;
  __IO uint16_t nbvalidbitsdata = 0;
 80081ae:	f04f 0300 	mov.w	r3, #0
 80081b2:	837b      	strh	r3, [r7, #26]
  __IO uint16_t nbvalidbitskey = 0;
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	833b      	strh	r3, [r7, #24]
  uint32_t i = 0;
 80081ba:	f04f 0300 	mov.w	r3, #0
 80081be:	67fb      	str	r3, [r7, #124]	; 0x7c
  __IO uint32_t counter = 0;
 80081c0:	f04f 0300 	mov.w	r3, #0
 80081c4:	617b      	str	r3, [r7, #20]
  uint32_t busystatus = 0;
 80081c6:	f04f 0300 	mov.w	r3, #0
 80081ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  ErrorStatus status = SUCCESS;
 80081cc:	f04f 0301 	mov.w	r3, #1
 80081d0:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  uint32_t keyaddr    = (uint32_t)Key;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t inputaddr  = (uint32_t)Input;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t outputaddr = (uint32_t)Output;
 80081dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80081e0:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Number of valid bits in last word of the Input data */
  nbvalidbitsdata = 8 * (Ilen % 4);
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	b29b      	uxth	r3, r3
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	837b      	strh	r3, [r7, #26]

  /* Number of valid bits in last word of the Key */
  nbvalidbitskey = 8 * (Keylen % 4);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8008202:	b29b      	uxth	r3, r3
 8008204:	833b      	strh	r3, [r7, #24]

  /* HASH peripheral initialization */
  HASH_DeInit();
 8008206:	f7ff faeb 	bl	80077e0 <HASH_DeInit>

  /* HASH Configuration */
  SHA1_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_SHA1;
 800820a:	f04f 0300 	mov.w	r3, #0
 800820e:	633b      	str	r3, [r7, #48]	; 0x30
  SHA1_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
 8008210:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008214:	637b      	str	r3, [r7, #52]	; 0x34
  SHA1_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
 8008216:	f04f 0320 	mov.w	r3, #32
 800821a:	63bb      	str	r3, [r7, #56]	; 0x38
  if(Keylen > 64)
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d903      	bls.n	800822a <HMAC_SHA1+0x8a>
  {
    /* HMAC long Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
 8008222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008226:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008228:	e002      	b.n	8008230 <HMAC_SHA1+0x90>
  }
  else
  {
    /* HMAC short Key */
    SHA1_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  HASH_Init(&SHA1_HASH_InitStructure);
 8008230:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008234:	4618      	mov	r0, r3
 8008236:	f7ff fae3 	bl	8007800 <HASH_Init>

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 800823a:	8b3b      	ldrh	r3, [r7, #24]
 800823c:	b29b      	uxth	r3, r3
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fb5c 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 8008244:	f04f 0300 	mov.w	r3, #0
 8008248:	67fb      	str	r3, [r7, #124]	; 0x7c
 800824a:	e00c      	b.n	8008266 <HMAC_SHA1+0xc6>
  {
    HASH_DataIn(*(uint32_t*)keyaddr);
 800824c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff fb75 	bl	8007940 <HASH_DataIn>
    keyaddr+=4;
 8008256:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008258:	f103 0304 	add.w	r3, r3, #4
 800825c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Configure the number of valid bits in last word of the Key */
  HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

  /* Write the Key */
  for(i=0; i<Keylen; i+=4)
 800825e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008260:	f103 0304 	add.w	r3, r3, #4
 8008264:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008266:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	429a      	cmp	r2, r3
 800826c:	d3ee      	bcc.n	800824c <HMAC_SHA1+0xac>
    HASH_DataIn(*(uint32_t*)keyaddr);
    keyaddr+=4;
  }

  /* Start the HASH processor */
  HASH_StartDigest();
 800826e:	f7ff fbb3 	bl	80079d8 <HASH_StartDigest>

  /* wait until the Busy flag is RESET */
  do
  {
    busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008272:	f04f 0008 	mov.w	r0, #8
 8008276:	f7ff fc9b 	bl	8007bb0 <HASH_GetFlagStatus>
 800827a:	4603      	mov	r3, r0
 800827c:	66fb      	str	r3, [r7, #108]	; 0x6c
    counter++;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	f103 0301 	add.w	r3, r3, #1
 8008284:	617b      	str	r3, [r7, #20]
  }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828c:	d002      	beq.n	8008294 <HMAC_SHA1+0xf4>
 800828e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1ee      	bne.n	8008272 <HMAC_SHA1+0xd2>

  if (busystatus != RESET)
 8008294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008296:	2b00      	cmp	r3, #0
 8008298:	d004      	beq.n	80082a4 <HMAC_SHA1+0x104>
  {
     status = ERROR;
 800829a:	f04f 0300 	mov.w	r3, #0
 800829e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 80082a2:	e0ae      	b.n	8008402 <HMAC_SHA1+0x262>
  }
  else
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
 80082a4:	8b7b      	ldrh	r3, [r7, #26]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4618      	mov	r0, r3
 80082aa:	f7ff fb27 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80082ae:	f04f 0300 	mov.w	r3, #0
 80082b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082b4:	e00c      	b.n	80082d0 <HMAC_SHA1+0x130>
    {
      HASH_DataIn(*(uint32_t*)inputaddr);
 80082b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fb40 	bl	8007940 <HASH_DataIn>
      inputaddr+=4;
 80082c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082c2:	f103 0304 	add.w	r3, r3, #4
 80082c6:	673b      	str	r3, [r7, #112]	; 0x70
  {
    /* Configure the number of valid bits in last word of the Input data */
    HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);

    /* Write the Input block in the IN FIFO */
    for(i=0; i<Ilen; i+=4)
 80082c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082ca:	f103 0304 	add.w	r3, r3, #4
 80082ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082d0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d3ee      	bcc.n	80082b6 <HMAC_SHA1+0x116>
      HASH_DataIn(*(uint32_t*)inputaddr);
      inputaddr+=4;
    }

    /* Start the HASH processor */
    HASH_StartDigest();
 80082d8:	f7ff fb7e 	bl	80079d8 <HASH_StartDigest>


    /* wait until the Busy flag is RESET */
    counter =0;
 80082dc:	f04f 0300 	mov.w	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]
    do
    {
      busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 80082e2:	f04f 0008 	mov.w	r0, #8
 80082e6:	f7ff fc63 	bl	8007bb0 <HASH_GetFlagStatus>
 80082ea:	4603      	mov	r3, r0
 80082ec:	66fb      	str	r3, [r7, #108]	; 0x6c
      counter++;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f103 0301 	add.w	r3, r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
    }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082fc:	d002      	beq.n	8008304 <HMAC_SHA1+0x164>
 80082fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1ee      	bne.n	80082e2 <HMAC_SHA1+0x142>

    if (busystatus != RESET)
 8008304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d004      	beq.n	8008314 <HMAC_SHA1+0x174>
    {
      status = ERROR;
 800830a:	f04f 0300 	mov.w	r3, #0
 800830e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008312:	e076      	b.n	8008402 <HMAC_SHA1+0x262>
    }
    else
    {  
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
 8008314:	8b3b      	ldrh	r3, [r7, #24]
 8008316:	b29b      	uxth	r3, r3
 8008318:	4618      	mov	r0, r3
 800831a:	f7ff faef 	bl	80078fc <HASH_SetLastWordValidBitsNbr>

      /* Write the Key */
      keyaddr = (uint32_t)Key;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	677b      	str	r3, [r7, #116]	; 0x74
      for(i=0; i<Keylen; i+=4)
 8008322:	f04f 0300 	mov.w	r3, #0
 8008326:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008328:	e00c      	b.n	8008344 <HMAC_SHA1+0x1a4>
      {
        HASH_DataIn(*(uint32_t*)keyaddr);
 800832a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4618      	mov	r0, r3
 8008330:	f7ff fb06 	bl	8007940 <HASH_DataIn>
        keyaddr+=4;
 8008334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008336:	f103 0304 	add.w	r3, r3, #4
 800833a:	677b      	str	r3, [r7, #116]	; 0x74
      /* Configure the number of valid bits in last word of the Key */
      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);

      /* Write the Key */
      keyaddr = (uint32_t)Key;
      for(i=0; i<Keylen; i+=4)
 800833c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800833e:	f103 0304 	add.w	r3, r3, #4
 8008342:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008344:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	429a      	cmp	r2, r3
 800834a:	d3ee      	bcc.n	800832a <HMAC_SHA1+0x18a>
        HASH_DataIn(*(uint32_t*)keyaddr);
        keyaddr+=4;
      }

      /* Start the HASH processor */
      HASH_StartDigest();
 800834c:	f7ff fb44 	bl	80079d8 <HASH_StartDigest>

      /* wait until the Busy flag is RESET */
      counter =0;
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	617b      	str	r3, [r7, #20]
      do
      {
        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
 8008356:	f04f 0008 	mov.w	r0, #8
 800835a:	f7ff fc29 	bl	8007bb0 <HASH_GetFlagStatus>
 800835e:	4603      	mov	r3, r0
 8008360:	66fb      	str	r3, [r7, #108]	; 0x6c
        counter++;
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f103 0301 	add.w	r3, r3, #1
 8008368:	617b      	str	r3, [r7, #20]
      }while ((counter != SHA1BUSY_TIMEOUT) && (busystatus != RESET));
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008370:	d002      	beq.n	8008378 <HMAC_SHA1+0x1d8>
 8008372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1ee      	bne.n	8008356 <HMAC_SHA1+0x1b6>

      if (busystatus != RESET)
 8008378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837a:	2b00      	cmp	r3, #0
 800837c:	d004      	beq.n	8008388 <HMAC_SHA1+0x1e8>
      {
        status = ERROR;
 800837e:	f04f 0300 	mov.w	r3, #0
 8008382:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 8008386:	e03c      	b.n	8008402 <HMAC_SHA1+0x262>
      }
      else
      {
        /* Read the message digest */
        HASH_GetDigest(&SHA1_MessageDigest);
 8008388:	f107 031c 	add.w	r3, r7, #28
 800838c:	4618      	mov	r0, r3
 800838e:	f7ff faf7 	bl	8007980 <HASH_GetDigest>
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[0]);
 8008392:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008394:	69fa      	ldr	r2, [r7, #28]
 8008396:	667a      	str	r2, [r7, #100]	; 0x64
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 8008398:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800839a:	ba14      	rev	r4, r2
 800839c:	663c      	str	r4, [r7, #96]	; 0x60
  return(result);
 800839e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80083a0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 80083a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083a4:	f103 0304 	add.w	r3, r3, #4
 80083a8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[1]);
 80083aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	65fa      	str	r2, [r7, #92]	; 0x5c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80083b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80083b2:	ba14      	rev	r4, r2
 80083b4:	65bc      	str	r4, [r7, #88]	; 0x58
  return(result);
 80083b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80083b8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 80083ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083bc:	f103 0304 	add.w	r3, r3, #4
 80083c0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[2]);
 80083c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083c6:	657a      	str	r2, [r7, #84]	; 0x54
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80083c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80083ca:	ba14      	rev	r4, r2
 80083cc:	653c      	str	r4, [r7, #80]	; 0x50
  return(result);
 80083ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083d0:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 80083d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083d4:	f103 0304 	add.w	r3, r3, #4
 80083d8:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[3]);
 80083da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083de:	64fa      	str	r2, [r7, #76]	; 0x4c
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80083e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083e2:	ba14      	rev	r4, r2
 80083e4:	64bc      	str	r4, [r7, #72]	; 0x48
  return(result);
 80083e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083e8:	601a      	str	r2, [r3, #0]
        outputaddr+=4;
 80083ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083ec:	f103 0304 	add.w	r3, r3, #4
 80083f0:	66bb      	str	r3, [r7, #104]	; 0x68
        *(uint32_t*)(outputaddr)  = __REV(SHA1_MessageDigest.Data[4]);
 80083f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f6:	647a      	str	r2, [r7, #68]	; 0x44
 */
__attribute__( ( always_inline ) ) static __INLINE uint32_t __REV(uint32_t value)
{
  uint32_t result;
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 80083f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083fa:	ba14      	rev	r4, r2
 80083fc:	643c      	str	r4, [r7, #64]	; 0x40
  return(result);
 80083fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008400:	601a      	str	r2, [r3, #0]
      }
    }  
  }
  return status;  
 8008402:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
}
 8008406:	4618      	mov	r0, r3
 8008408:	f107 0784 	add.w	r7, r7, #132	; 0x84
 800840c:	46bd      	mov	sp, r7
 800840e:	bd90      	pop	{r4, r7, pc}

08008410 <I2C_DeInit>:
  * @brief  Deinitialize the I2Cx peripheral registers to their default reset values.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval None
  */
void I2C_DeInit(I2C_TypeDef* I2Cx)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  if (I2Cx == I2C1)
 8008418:	687a      	ldr	r2, [r7, #4]
 800841a:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
 800841e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008422:	429a      	cmp	r2, r3
 8008424:	d10c      	bne.n	8008440 <I2C_DeInit+0x30>
  {
    /* Enable I2C1 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8008426:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800842a:	f04f 0101 	mov.w	r1, #1
 800842e:	f001 fb8b 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    /* Release I2C1 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);    
 8008432:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8008436:	f04f 0100 	mov.w	r1, #0
 800843a:	f001 fb85 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800843e:	e026      	b.n	800848e <I2C_DeInit+0x7e>
  }
  else if (I2Cx == I2C2)
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8008446:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800844a:	429a      	cmp	r2, r3
 800844c:	d10c      	bne.n	8008468 <I2C_DeInit+0x58>
  {
    /* Enable I2C2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800844e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008452:	f04f 0101 	mov.w	r1, #1
 8008456:	f001 fb77 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    /* Release I2C2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);      
 800845a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800845e:	f04f 0100 	mov.w	r1, #0
 8008462:	f001 fb71 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 8008466:	e012      	b.n	800848e <I2C_DeInit+0x7e>
  }
  else 
  {
    if (I2Cx == I2C3)
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 800846e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008472:	429a      	cmp	r2, r3
 8008474:	d10b      	bne.n	800848e <I2C_DeInit+0x7e>
    {
      /* Enable I2C3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, ENABLE);
 8008476:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800847a:	f04f 0101 	mov.w	r1, #1
 800847e:	f001 fb63 	bl	8009b48 <RCC_APB1PeriphResetCmd>
      /* Release I2C3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C3, DISABLE);     
 8008482:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008486:	f04f 0100 	mov.w	r1, #0
 800848a:	f001 fb5d 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800848e:	f107 0708 	add.w	r7, r7, #8
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop

08008498 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that contains 
  *         the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b08a      	sub	sp, #40	; 0x28
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80084a2:	f04f 0300 	mov.w	r3, #0
 80084a6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80084a8:	f04f 0300 	mov.w	r3, #0
 80084ac:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80084ae:	f04f 0304 	mov.w	r3, #4
 80084b2:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80084b4:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80084b8:	f2c0 037a 	movt	r3, #122	; 0x7a
 80084bc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= (uint16_t)~((uint16_t)I2C_CR2_FREQ);
 80084c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80084c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80084ca:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80084cc:	f107 030c 	add.w	r3, r7, #12
 80084d0:	4618      	mov	r0, r3
 80084d2:	f001 f899 	bl	8009608 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80084da:	69fa      	ldr	r2, [r7, #28]
 80084dc:	f64d 6383 	movw	r3, #56963	; 0xde83
 80084e0:	f2c4 331b 	movt	r3, #17179	; 0x431b
 80084e4:	fba3 1302 	umull	r1, r3, r3, r2
 80084e8:	ea4f 4393 	mov.w	r3, r3, lsr #18
 80084ec:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 80084ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80084f2:	4313      	orrs	r3, r2
 80084f4:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084fa:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	881b      	ldrh	r3, [r3, #0]
 8008500:	b29b      	uxth	r3, r3
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	f248 63a0 	movw	r3, #34464	; 0x86a0
 800851a:	f2c0 0301 	movt	r3, #1
 800851e:	429a      	cmp	r2, r3
 8008520:	d818      	bhi.n	8008554 <I2C_Init+0xbc>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008530:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8008532:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008534:	2b03      	cmp	r3, #3
 8008536:	d802      	bhi.n	800853e <I2C_Init+0xa6>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8008538:	f04f 0304 	mov.w	r3, #4
 800853c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800853e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008540:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008542:	4313      	orrs	r3, r2
 8008544:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8008546:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008548:	f103 0301 	add.w	r3, r3, #1
 800854c:	b29a      	uxth	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	841a      	strh	r2, [r3, #32]
 8008552:	e04b      	b.n	80085ec <I2C_Init+0x154>
  /* Configure speed in fast mode */
  /* To use the I2C at 400 KHz (in fast mode), the PCLK1 frequency (I2C peripheral
     input clock) must be a multiple of 10 MHz */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	88da      	ldrh	r2, [r3, #6]
 8008558:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 800855c:	429a      	cmp	r2, r3
 800855e:	d10a      	bne.n	8008576 <I2C_Init+0xde>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	4613      	mov	r3, r2
 8008566:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800856a:	189b      	adds	r3, r3, r2
 800856c:	69fa      	ldr	r2, [r7, #28]
 800856e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008572:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008574:	e010      	b.n	8008598 <I2C_Init+0x100>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8008580:	189b      	adds	r3, r3, r2
 8008582:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8008586:	189b      	adds	r3, r3, r2
 8008588:	69fa      	ldr	r2, [r7, #28]
 800858a:	fbb2 f3f3 	udiv	r3, r2, r3
 800858e:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8008590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008596:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & I2C_CCR_CCR) == 0)
 8008598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800859a:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800859e:	ea4f 5313 	mov.w	r3, r3, lsr #20
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <I2C_Init+0x116>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80085a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80085a8:	f043 0301 	orr.w	r3, r3, #1
 80085ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | I2C_CCR_FS);
 80085ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80085b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085b2:	4313      	orrs	r3, r2
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085be:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80085c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80085c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80085c6:	fb02 f203 	mul.w	r2, r2, r3
 80085ca:	f644 53d3 	movw	r3, #19923	; 0x4dd3
 80085ce:	f2c1 0362 	movt	r3, #4194	; 0x1062
 80085d2:	fb83 1302 	smull	r1, r3, r3, r2
 80085d6:	ea4f 11a3 	mov.w	r1, r3, asr #6
 80085da:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80085de:	1acb      	subs	r3, r1, r3
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	f103 0301 	add.w	r3, r3, #1
 80085e6:	b29a      	uxth	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085f0:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= I2C_CR1_PE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	881b      	ldrh	r3, [r3, #0]
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	f043 0301 	orr.w	r3, r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_MASK;
 8008608:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800860a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800860e:	f023 030a 	bic.w	r3, r3, #10
 8008612:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	889a      	ldrh	r2, [r3, #4]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	895b      	ldrh	r3, [r3, #10]
 800861c:	4313      	orrs	r3, r2
 800861e:	b29a      	uxth	r2, r3
 8008620:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008622:	4313      	orrs	r3, r2
 8008624:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800862a:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	899a      	ldrh	r2, [r3, #12]
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	891b      	ldrh	r3, [r3, #8]
 8008634:	4313      	orrs	r3, r2
 8008636:	b29a      	uxth	r2, r3
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	811a      	strh	r2, [r3, #8]
}
 800863c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <I2C_StructInit>:
  * @brief  Fills each I2C_InitStruct member with its default value.
  * @param  I2C_InitStruct: pointer to an I2C_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2C_StructInit(I2C_InitTypeDef* I2C_InitStruct)
{
 8008644:	b480      	push	{r7}
 8008646:	b083      	sub	sp, #12
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
/*---------------- Reset I2C init structure parameters values ----------------*/
  /* initialize the I2C_ClockSpeed member */
  I2C_InitStruct->I2C_ClockSpeed = 5000;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008652:	601a      	str	r2, [r3, #0]
  /* Initialize the I2C_Mode member */
  I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f04f 0200 	mov.w	r2, #0
 800865a:	809a      	strh	r2, [r3, #4]
  /* Initialize the I2C_DutyCycle member */
  I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8008662:	80da      	strh	r2, [r3, #6]
  /* Initialize the I2C_OwnAddress1 member */
  I2C_InitStruct->I2C_OwnAddress1 = 0;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f04f 0200 	mov.w	r2, #0
 800866a:	811a      	strh	r2, [r3, #8]
  /* Initialize the I2C_Ack member */
  I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f04f 0200 	mov.w	r2, #0
 8008672:	815a      	strh	r2, [r3, #10]
  /* Initialize the I2C_AcknowledgedAddress member */
  I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800867a:	819a      	strh	r2, [r3, #12]
}
 800867c:	f107 070c 	add.w	r7, r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop

08008688 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d008      	beq.n	80086ac <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= I2C_CR1_PE;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f043 0301 	orr.w	r3, r3, #1
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	801a      	strh	r2, [r3, #0]
 80086aa:	e007      	b.n	80086bc <I2C_Cmd+0x34>
  }
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	881b      	ldrh	r3, [r3, #0]
 80086b0:	b29b      	uxth	r3, r3
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	801a      	strh	r2, [r3, #0]
  }
}
 80086bc:	f107 070c 	add.w	r7, r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bc80      	pop	{r7}
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop

080086c8 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d008      	beq.n	80086ec <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= I2C_CR1_START;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	801a      	strh	r2, [r3, #0]
 80086ea:	e007      	b.n	80086fc <I2C_GenerateSTART+0x34>
  }
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_START);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	881b      	ldrh	r3, [r3, #0]
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	801a      	strh	r2, [r3, #0]
  }
}
 80086fc:	f107 070c 	add.w	r7, r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	bc80      	pop	{r7}
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop

08008708 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d008      	beq.n	800872c <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= I2C_CR1_STOP;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	881b      	ldrh	r3, [r3, #0]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008724:	b29a      	uxth	r2, r3
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	801a      	strh	r2, [r3, #0]
 800872a:	e007      	b.n	800873c <I2C_GenerateSTOP+0x34>
  }
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_STOP);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	881b      	ldrh	r3, [r3, #0]
 8008730:	b29b      	uxth	r3, r3
 8008732:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008736:	b29a      	uxth	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	801a      	strh	r2, [r3, #0]
  }
}
 800873c:	f107 070c 	add.w	r7, r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop

08008748 <I2C_Send7bitAddress>:
  *            @arg I2C_Direction_Transmitter: Transmitter mode
  *            @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	4613      	mov	r3, r2
 8008752:	460a      	mov	r2, r1
 8008754:	70fa      	strb	r2, [r7, #3]
 8008756:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8008758:	78bb      	ldrb	r3, [r7, #2]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d004      	beq.n	8008768 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= I2C_OAR1_ADD0;
 800875e:	78fb      	ldrb	r3, [r7, #3]
 8008760:	f043 0301 	orr.w	r3, r3, #1
 8008764:	70fb      	strb	r3, [r7, #3]
 8008766:	e003      	b.n	8008770 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= (uint8_t)~((uint8_t)I2C_OAR1_ADD0);
 8008768:	78fb      	ldrb	r3, [r7, #3]
 800876a:	f023 0301 	bic.w	r3, r3, #1
 800876e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 8008770:	78fb      	ldrb	r3, [r7, #3]
 8008772:	b29a      	uxth	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	821a      	strh	r2, [r3, #16]
}
 8008778:	f107 070c 	add.w	r7, r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop

08008784 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d008      	beq.n	80087a8 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= I2C_CR1_ACK;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	881b      	ldrh	r3, [r3, #0]
 800879a:	b29b      	uxth	r3, r3
 800879c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	801a      	strh	r2, [r3, #0]
 80087a6:	e007      	b.n	80087b8 <I2C_AcknowledgeConfig+0x34>
  }
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ACK);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	801a      	strh	r2, [r3, #0]
  }
}
 80087b8:	f107 070c 	add.w	r7, r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <I2C_OwnAddress2Config>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Address: specifies the 7bit I2C own address2.
  * @retval None.
  */
void I2C_OwnAddress2Config(I2C_TypeDef* I2Cx, uint8_t Address)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
  uint16_t tmpreg = 0;
 80087d0:	f04f 0300 	mov.w	r3, #0
 80087d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Get the old register value */
  tmpreg = I2Cx->OAR2;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	899b      	ldrh	r3, [r3, #12]
 80087da:	81fb      	strh	r3, [r7, #14]

  /* Reset I2Cx Own address2 bit [7:1] */
  tmpreg &= (uint16_t)~((uint16_t)I2C_OAR2_ADD2);
 80087dc:	89fb      	ldrh	r3, [r7, #14]
 80087de:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80087e2:	81fb      	strh	r3, [r7, #14]

  /* Set I2Cx Own address2 */
  tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	89fb      	ldrh	r3, [r7, #14]
 80087f0:	4313      	orrs	r3, r2
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	81fb      	strh	r3, [r7, #14]

  /* Store the new register value */
  I2Cx->OAR2 = tmpreg;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	89fa      	ldrh	r2, [r7, #14]
 80087fa:	819a      	strh	r2, [r3, #12]
}
 80087fc:	f107 0714 	add.w	r7, r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop

08008808 <I2C_DualAddressCmd>:
  * @param  NewState: new state of the I2C dual addressing mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DualAddressCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d008      	beq.n	800882c <I2C_DualAddressCmd+0x24>
  {
    /* Enable dual addressing mode */
    I2Cx->OAR2 |= I2C_OAR2_ENDUAL;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	899b      	ldrh	r3, [r3, #12]
 800881e:	b29b      	uxth	r3, r3
 8008820:	f043 0301 	orr.w	r3, r3, #1
 8008824:	b29a      	uxth	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	819a      	strh	r2, [r3, #12]
 800882a:	e007      	b.n	800883c <I2C_DualAddressCmd+0x34>
  }
  else
  {
    /* Disable dual addressing mode */
    I2Cx->OAR2 &= (uint16_t)~((uint16_t)I2C_OAR2_ENDUAL);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	899b      	ldrh	r3, [r3, #12]
 8008830:	b29b      	uxth	r3, r3
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	b29a      	uxth	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	819a      	strh	r2, [r3, #12]
  }
}
 800883c:	f107 070c 	add.w	r7, r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	bc80      	pop	{r7}
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop

08008848 <I2C_GeneralCallCmd>:
  * @param  NewState: new state of the I2C General call.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_GeneralCallCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d008      	beq.n	800886c <I2C_GeneralCallCmd+0x24>
  {
    /* Enable generall call */
    I2Cx->CR1 |= I2C_CR1_ENGC;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	881b      	ldrh	r3, [r3, #0]
 800885e:	b29b      	uxth	r3, r3
 8008860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008864:	b29a      	uxth	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	801a      	strh	r2, [r3, #0]
 800886a:	e007      	b.n	800887c <I2C_GeneralCallCmd+0x34>
  }
  else
  {
    /* Disable generall call */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENGC);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	881b      	ldrh	r3, [r3, #0]
 8008870:	b29b      	uxth	r3, r3
 8008872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008876:	b29a      	uxth	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	801a      	strh	r2, [r3, #0]
  }
}
 800887c:	f107 070c 	add.w	r7, r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	bc80      	pop	{r7}
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop

08008888 <I2C_SoftwareResetCmd>:
  * @param  NewState: new state of the I2C software reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_SoftwareResetCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <I2C_SoftwareResetCmd+0x28>
  {
    /* Peripheral under reset */
    I2Cx->CR1 |= I2C_CR1_SWRST;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	801a      	strh	r2, [r3, #0]
 80088ae:	e009      	b.n	80088c4 <I2C_SoftwareResetCmd+0x3c>
  }
  else
  {
    /* Peripheral not under reset */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_SWRST);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 80088ba:	ea4f 4353 	mov.w	r3, r3, lsr #17
 80088be:	b29a      	uxth	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	801a      	strh	r2, [r3, #0]
  }
}
 80088c4:	f107 070c 	add.w	r7, r7, #12
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bc80      	pop	{r7}
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop

080088d0 <I2C_StretchClockCmd>:
  * @param  NewState: new state of the I2Cx Clock stretching.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_StretchClockCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80088d0:	b480      	push	{r7}
 80088d2:	b083      	sub	sp, #12
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
 80088d8:	460b      	mov	r3, r1
 80088da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState == DISABLE)
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d108      	bne.n	80088f4 <I2C_StretchClockCmd+0x24>
  {
    /* Enable the selected I2C Clock stretching */
    I2Cx->CR1 |= I2C_CR1_NOSTRETCH;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	881b      	ldrh	r3, [r3, #0]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	801a      	strh	r2, [r3, #0]
 80088f2:	e007      	b.n	8008904 <I2C_StretchClockCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C Clock stretching */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_NOSTRETCH);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	801a      	strh	r2, [r3, #0]
  }
}
 8008904:	f107 070c 	add.w	r7, r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	bc80      	pop	{r7}
 800890c:	4770      	bx	lr
 800890e:	bf00      	nop

08008910 <I2C_FastModeDutyCycleConfig>:
  *            @arg I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2
  *            @arg I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9
  * @retval None
  */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef* I2Cx, uint16_t I2C_DutyCycle)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DUTY_CYCLE(I2C_DutyCycle));
  if (I2C_DutyCycle != I2C_DutyCycle_16_9)
 800891c:	887b      	ldrh	r3, [r7, #2]
 800891e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008922:	d008      	beq.n	8008936 <I2C_FastModeDutyCycleConfig+0x26>
  {
    /* I2C fast mode Tlow/Thigh=2 */
    I2Cx->CCR &= I2C_DutyCycle_2;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	8b9b      	ldrh	r3, [r3, #28]
 8008928:	b29b      	uxth	r3, r3
 800892a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800892e:	b29a      	uxth	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	839a      	strh	r2, [r3, #28]
 8008934:	e007      	b.n	8008946 <I2C_FastModeDutyCycleConfig+0x36>
  }
  else
  {
    /* I2C fast mode Tlow/Thigh=16/9 */
    I2Cx->CCR |= I2C_DutyCycle_16_9;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	8b9b      	ldrh	r3, [r3, #28]
 800893a:	b29b      	uxth	r3, r3
 800893c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008940:	b29a      	uxth	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	839a      	strh	r2, [r3, #28]
  }
}
 8008946:	f107 070c 	add.w	r7, r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <I2C_NACKPositionConfig>:
  *          is intended to used in SMBUS mode. 
  *            
  * @retval None
  */
void I2C_NACKPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_NACKPosition)
{
 8008950:	b480      	push	{r7}
 8008952:	b083      	sub	sp, #12
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	460b      	mov	r3, r1
 800895a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_NACK_POSITION(I2C_NACKPosition));
  
  /* Check the input parameter */
  if (I2C_NACKPosition == I2C_NACKPosition_Next)
 800895c:	887b      	ldrh	r3, [r7, #2]
 800895e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008962:	d108      	bne.n	8008976 <I2C_NACKPositionConfig+0x26>
  {
    /* Next byte in shift register is the last received byte */
    I2Cx->CR1 |= I2C_NACKPosition_Next;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	b29b      	uxth	r3, r3
 800896a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	e007      	b.n	8008986 <I2C_NACKPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is the last received byte */
    I2Cx->CR1 &= I2C_NACKPosition_Current;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008980:	b29a      	uxth	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	801a      	strh	r2, [r3, #0]
  }
}
 8008986:	f107 070c 	add.w	r7, r7, #12
 800898a:	46bd      	mov	sp, r7
 800898c:	bc80      	pop	{r7}
 800898e:	4770      	bx	lr

08008990 <I2C_SMBusAlertConfig>:
  *            @arg I2C_SMBusAlert_Low: SMBAlert pin driven low
  *            @arg I2C_SMBusAlert_High: SMBAlert pin driven high
  * @retval None
  */
void I2C_SMBusAlertConfig(I2C_TypeDef* I2Cx, uint16_t I2C_SMBusAlert)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_SMBUS_ALERT(I2C_SMBusAlert));
  if (I2C_SMBusAlert == I2C_SMBusAlert_Low)
 800899c:	887b      	ldrh	r3, [r7, #2]
 800899e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089a2:	d108      	bne.n	80089b6 <I2C_SMBusAlertConfig+0x26>
  {
    /* Drive the SMBusAlert pin Low */
    I2Cx->CR1 |= I2C_SMBusAlert_Low;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	881b      	ldrh	r3, [r3, #0]
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	801a      	strh	r2, [r3, #0]
 80089b4:	e007      	b.n	80089c6 <I2C_SMBusAlertConfig+0x36>
  }
  else
  {
    /* Drive the SMBusAlert pin High  */
    I2Cx->CR1 &= I2C_SMBusAlert_High;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	801a      	strh	r2, [r3, #0]
  }
}
 80089c6:	f107 070c 	add.w	r7, r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr

080089d0 <I2C_ARPCmd>:
  * @param  NewState: new state of the I2Cx ARP. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ARPCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80089dc:	78fb      	ldrb	r3, [r7, #3]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d008      	beq.n	80089f4 <I2C_ARPCmd+0x24>
  {
    /* Enable the selected I2C ARP */
    I2Cx->CR1 |= I2C_CR1_ENARP;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	881b      	ldrh	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	f043 0310 	orr.w	r3, r3, #16
 80089ec:	b29a      	uxth	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	801a      	strh	r2, [r3, #0]
 80089f2:	e007      	b.n	8008a04 <I2C_ARPCmd+0x34>
  }
  else
  {
    /* Disable the selected I2C ARP */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENARP);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	881b      	ldrh	r3, [r3, #0]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	f023 0310 	bic.w	r3, r3, #16
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	801a      	strh	r2, [r3, #0]
  }
}
 8008a04:	f107 070c 	add.w	r7, r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bc80      	pop	{r7}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop

08008a10 <I2C_SendData>:
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	821a      	strh	r2, [r3, #16]
}
 8008a24:	f107 070c 	add.w	r7, r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bc80      	pop	{r7}
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop

08008a30 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	8a1b      	ldrh	r3, [r3, #16]
 8008a3c:	b29b      	uxth	r3, r3
 8008a3e:	b2db      	uxtb	r3, r3
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	f107 070c 	add.w	r7, r7, #12
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bc80      	pop	{r7}
 8008a4a:	4770      	bx	lr

08008a4c <I2C_TransmitPEC>:
  * @param  NewState: new state of the I2C PEC transmission.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_TransmitPEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <I2C_TransmitPEC+0x24>
  {
    /* Enable the selected I2C PEC transmission */
    I2Cx->CR1 |= I2C_CR1_PEC;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	881b      	ldrh	r3, [r3, #0]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	801a      	strh	r2, [r3, #0]
 8008a6e:	e007      	b.n	8008a80 <I2C_TransmitPEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC transmission */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_PEC);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a7a:	b29a      	uxth	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	801a      	strh	r2, [r3, #0]
  }
}
 8008a80:	f107 070c 	add.w	r7, r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop

08008a8c <I2C_PECPositionConfig>:
  *          is intended to used in I2C mode.
  *                
  * @retval None
  */
void I2C_PECPositionConfig(I2C_TypeDef* I2Cx, uint16_t I2C_PECPosition)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_PEC_POSITION(I2C_PECPosition));
  if (I2C_PECPosition == I2C_PECPosition_Next)
 8008a98:	887b      	ldrh	r3, [r7, #2]
 8008a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a9e:	d108      	bne.n	8008ab2 <I2C_PECPositionConfig+0x26>
  {
    /* Next byte in shift register is PEC */
    I2Cx->CR1 |= I2C_PECPosition_Next;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008aaa:	b29a      	uxth	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	801a      	strh	r2, [r3, #0]
 8008ab0:	e007      	b.n	8008ac2 <I2C_PECPositionConfig+0x36>
  }
  else
  {
    /* Current byte in shift register is PEC */
    I2Cx->CR1 &= I2C_PECPosition_Current;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	881b      	ldrh	r3, [r3, #0]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	801a      	strh	r2, [r3, #0]
  }
}
 8008ac2:	f107 070c 	add.w	r7, r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bc80      	pop	{r7}
 8008aca:	4770      	bx	lr

08008acc <I2C_CalculatePEC>:
  * @param  NewState: new state of the I2Cx PEC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_CalculatePEC(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d008      	beq.n	8008af0 <I2C_CalculatePEC+0x24>
  {
    /* Enable the selected I2C PEC calculation */
    I2Cx->CR1 |= I2C_CR1_ENPEC;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f043 0320 	orr.w	r3, r3, #32
 8008ae8:	b29a      	uxth	r2, r3
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	801a      	strh	r2, [r3, #0]
 8008aee:	e007      	b.n	8008b00 <I2C_CalculatePEC+0x34>
  }
  else
  {
    /* Disable the selected I2C PEC calculation */
    I2Cx->CR1 &= (uint16_t)~((uint16_t)I2C_CR1_ENPEC);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	881b      	ldrh	r3, [r3, #0]
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	f023 0320 	bic.w	r3, r3, #32
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	801a      	strh	r2, [r3, #0]
  }
}
 8008b00:	f107 070c 	add.w	r7, r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bc80      	pop	{r7}
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop

08008b0c <I2C_GetPEC>:
  * @brief  Returns the PEC value for the specified I2C.
  * @param  I2Cx: where x can be 1, 2 or 3 to select the I2C peripheral.
  * @retval The PEC value.
  */
uint8_t I2C_GetPEC(I2C_TypeDef* I2Cx)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the selected I2C PEC value */
  return ((I2Cx->SR2) >> 8);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	8b1b      	ldrh	r3, [r3, #24]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	b2db      	uxtb	r3, r3
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	f107 070c 	add.w	r7, r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bc80      	pop	{r7}
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop

08008b30 <I2C_DMACmd>:
  * @param  NewState: new state of the I2C DMA transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMACmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <I2C_DMACmd+0x24>
  {
    /* Enable the selected I2C DMA requests */
    I2Cx->CR2 |= I2C_CR2_DMAEN;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	889b      	ldrh	r3, [r3, #4]
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	809a      	strh	r2, [r3, #4]
 8008b52:	e007      	b.n	8008b64 <I2C_DMACmd+0x34>
  }
  else
  {
    /* Disable the selected I2C DMA requests */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_DMAEN);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	889b      	ldrh	r3, [r3, #4]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	809a      	strh	r2, [r3, #4]
  }
}
 8008b64:	f107 070c 	add.w	r7, r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bc80      	pop	{r7}
 8008b6c:	4770      	bx	lr
 8008b6e:	bf00      	nop

08008b70 <I2C_DMALastTransferCmd>:
  * @param  NewState: new state of the I2C DMA last transfer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_DMALastTransferCmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d008      	beq.n	8008b94 <I2C_DMALastTransferCmd+0x24>
  {
    /* Next DMA transfer is the last transfer */
    I2Cx->CR2 |= I2C_CR2_LAST;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	889b      	ldrh	r3, [r3, #4]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b8c:	b29a      	uxth	r2, r3
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	809a      	strh	r2, [r3, #4]
 8008b92:	e007      	b.n	8008ba4 <I2C_DMALastTransferCmd+0x34>
  }
  else
  {
    /* Next DMA transfer is not the last transfer */
    I2Cx->CR2 &= (uint16_t)~((uint16_t)I2C_CR2_LAST);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	889b      	ldrh	r3, [r3, #4]
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	809a      	strh	r2, [r3, #4]
  }
}
 8008ba4:	f107 070c 	add.w	r7, r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bc80      	pop	{r7}
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop

08008bb0 <I2C_ReadRegister>:
  *            @arg I2C_Register_CCR:   CCR register.
  *            @arg I2C_Register_TRISE: TRISE register.
  * @retval The value of the read register.
  */
uint16_t I2C_ReadRegister(I2C_TypeDef* I2Cx, uint8_t I2C_Register)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b085      	sub	sp, #20
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	460b      	mov	r3, r1
 8008bba:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
 8008bbc:	f04f 0300 	mov.w	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_REGISTER(I2C_Register));

  tmp = (uint32_t) I2Cx;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	60fb      	str	r3, [r7, #12]
  tmp += I2C_Register;
 8008bc6:	78fa      	ldrb	r2, [r7, #3]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	18d3      	adds	r3, r2, r3
 8008bcc:	60fb      	str	r3, [r7, #12]

  /* Return the selected register value */
  return (*(__IO uint16_t *) tmp);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	881b      	ldrh	r3, [r3, #0]
 8008bd2:	b29b      	uxth	r3, r3
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f107 0714 	add.w	r7, r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bc80      	pop	{r7}
 8008bde:	4770      	bx	lr

08008be0 <I2C_ITConfig>:
  * @param  NewState: new state of the specified I2C interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_ITConfig(I2C_TypeDef* I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	4613      	mov	r3, r2
 8008bea:	460a      	mov	r2, r1
 8008bec:	807a      	strh	r2, [r7, #2]
 8008bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_I2C_CONFIG_IT(I2C_IT));
  
  if (NewState != DISABLE)
 8008bf0:	787b      	ldrb	r3, [r7, #1]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d008      	beq.n	8008c08 <I2C_ITConfig+0x28>
  {
    /* Enable the selected I2C interrupts */
    I2Cx->CR2 |= I2C_IT;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	889b      	ldrh	r3, [r3, #4]
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	887b      	ldrh	r3, [r7, #2]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	809a      	strh	r2, [r3, #4]
 8008c06:	e00a      	b.n	8008c1e <I2C_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected I2C interrupts */
    I2Cx->CR2 &= (uint16_t)~I2C_IT;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	889b      	ldrh	r3, [r3, #4]
 8008c0c:	b29a      	uxth	r2, r3
 8008c0e:	887b      	ldrh	r3, [r7, #2]
 8008c10:	ea6f 0303 	mvn.w	r3, r3
 8008c14:	b29b      	uxth	r3, r3
 8008c16:	4013      	ands	r3, r2
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	809a      	strh	r2, [r3, #4]
  }
}
 8008c1e:	f107 070c 	add.w	r7, r7, #12
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bc80      	pop	{r7}
 8008c26:	4770      	bx	lr

08008c28 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  *           - SUCCESS: Last event is equal to the I2C_EVENT
  *           - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b087      	sub	sp, #28
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 8008c32:	f04f 0300 	mov.w	r3, #0
 8008c36:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	f04f 0300 	mov.w	r3, #0
 8008c42:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	8a9b      	ldrh	r3, [r3, #20]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	8b1b      	ldrh	r3, [r3, #24]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008c60:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	401a      	ands	r2, r3
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d103      	bne.n	8008c82 <I2C_CheckEvent+0x5a>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8008c7a:	f04f 0301 	mov.w	r3, #1
 8008c7e:	75fb      	strb	r3, [r7, #23]
 8008c80:	e002      	b.n	8008c88 <I2C_CheckEvent+0x60>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8008c82:	f04f 0300 	mov.w	r3, #0
 8008c86:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8008c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f107 071c 	add.w	r7, r7, #28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bc80      	pop	{r7}
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <I2C_GetLastEvent>:
  *         in stm32f4xx_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8008ca0:	f04f 0300 	mov.w	r3, #0
 8008ca4:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8008ca6:	f04f 0300 	mov.w	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]
 8008cac:	f04f 0300 	mov.w	r3, #0
 8008cb0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	8a9b      	ldrh	r3, [r3, #20]
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	8b1b      	ldrh	r3, [r3, #24]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_MASK;
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008cd4:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f107 071c 	add.w	r7, r7, #28
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bc80      	pop	{r7}
 8008ce2:	4770      	bx	lr

08008ce4 <I2C_GetFlagStatus>:
  *                                Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8008cee:	f04f 0300 	mov.w	r3, #0
 8008cf2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 8008cf4:	f04f 0300 	mov.w	r3, #0
 8008cf8:	613b      	str	r3, [r7, #16]
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	ea4f 7313 	mov.w	r3, r3, lsr #28
 8008d0a:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_MASK;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d12:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d004      	beq.n	8008d24 <I2C_GetFlagStatus+0x40>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	f103 0314 	add.w	r3, r3, #20
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	e007      	b.n	8008d34 <I2C_GetFlagStatus+0x50>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8008d2a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f103 0318 	add.w	r3, r3, #24
 8008d32:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d003      	beq.n	8008d48 <I2C_GetFlagStatus+0x64>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 8008d40:	f04f 0301 	mov.w	r3, #1
 8008d44:	75fb      	strb	r3, [r7, #23]
 8008d46:	e002      	b.n	8008d4e <I2C_GetFlagStatus+0x6a>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8008d48:	f04f 0300 	mov.w	r3, #0
 8008d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	f107 071c 	add.w	r7, r7, #28
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bc80      	pop	{r7}
 8008d5a:	4770      	bx	lr

08008d5c <I2C_ClearFlag>:
  *          register (I2C_SendData()).
  *  
  * @retval None
  */
void I2C_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8008d66:	f04f 0300 	mov.w	r3, #0
 8008d6a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_FLAG(I2C_FLAG));
  /* Get the I2C flag position */
  flagpos = I2C_FLAG & FLAG_MASK;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008d72:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	ea6f 0303 	mvn.w	r3, r3
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	829a      	strh	r2, [r3, #20]
}
 8008d82:	f107 0714 	add.w	r7, r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <I2C_GetITStatus>:
  *                              Address matched flag (Slave mode)"ENDAD"
  *            @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8008d96:	f04f 0300 	mov.w	r3, #0
 8008d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8008d9c:	f04f 0300 	mov.w	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_MASK) >> 16) & (I2Cx->CR2)) ;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008da8:	ea4f 4213 	mov.w	r2, r3, lsr #16
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	889b      	ldrh	r3, [r3, #4]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	4013      	ands	r3, r2
 8008db4:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_MASK;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008dbc:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	8a9b      	ldrh	r3, [r3, #20]
 8008dc2:	b29b      	uxth	r3, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d006      	beq.n	8008ddc <I2C_GetITStatus+0x50>
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d003      	beq.n	8008ddc <I2C_GetITStatus+0x50>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8008dd4:	f04f 0301 	mov.w	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]
 8008dda:	e002      	b.n	8008de2 <I2C_GetITStatus+0x56>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8008ddc:	f04f 0300 	mov.w	r3, #0
 8008de0:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	f107 0714 	add.w	r7, r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bc80      	pop	{r7}
 8008dee:	4770      	bx	lr

08008df0 <I2C_ClearITPendingBit>:
  *          I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *          I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 8008dfa:	f04f 0300 	mov.w	r3, #0
 8008dfe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));

  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_MASK;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea6f 0303 	mvn.w	r3, r3
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	829a      	strh	r2, [r3, #20]
}
 8008e16:	f107 0714 	add.w	r7, r7, #20
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bc80      	pop	{r7}
 8008e1e:	4770      	bx	lr

08008e20 <IWDG_WriteAccessCmd>:
  *            @arg IWDG_WriteAccess_Enable: Enable write access to IWDG_PR and IWDG_RLR registers
  *            @arg IWDG_WriteAccess_Disable: Disable write access to IWDG_PR and IWDG_RLR registers
  * @retval None
  */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	4603      	mov	r3, r0
 8008e28:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_WRITE_ACCESS(IWDG_WriteAccess));
  IWDG->KR = IWDG_WriteAccess;
 8008e2a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008e2e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008e32:	88fa      	ldrh	r2, [r7, #6]
 8008e34:	601a      	str	r2, [r3, #0]
}
 8008e36:	f107 070c 	add.w	r7, r7, #12
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bc80      	pop	{r7}
 8008e3e:	4770      	bx	lr

08008e40 <IWDG_SetPrescaler>:
  *            @arg IWDG_Prescaler_128: IWDG prescaler set to 128
  *            @arg IWDG_Prescaler_256: IWDG prescaler set to 256
  * @retval None
  */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_IWDG_PRESCALER(IWDG_Prescaler));
  IWDG->PR = IWDG_Prescaler;
 8008e4a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008e4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008e52:	79fa      	ldrb	r2, [r7, #7]
 8008e54:	605a      	str	r2, [r3, #4]
}
 8008e56:	f107 070c 	add.w	r7, r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bc80      	pop	{r7}
 8008e5e:	4770      	bx	lr

08008e60 <IWDG_SetReload>:
  * @param  Reload: specifies the IWDG Reload value.
  *          This parameter must be a number between 0 and 0x0FFF.
  * @retval None
  */
void IWDG_SetReload(uint16_t Reload)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	4603      	mov	r3, r0
 8008e68:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_IWDG_RELOAD(Reload));
  IWDG->RLR = Reload;
 8008e6a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008e6e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008e72:	88fa      	ldrh	r2, [r7, #6]
 8008e74:	609a      	str	r2, [r3, #8]
}
 8008e76:	f107 070c 	add.w	r7, r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bc80      	pop	{r7}
 8008e7e:	4770      	bx	lr

08008e80 <IWDG_ReloadCounter>:
  *         (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_ReloadCounter(void)
{
 8008e80:	b480      	push	{r7}
 8008e82:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_RELOAD;
 8008e84:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008e88:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008e8c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8008e90:	601a      	str	r2, [r3, #0]
}
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr

08008e98 <IWDG_Enable>:
  * @brief  Enables IWDG (write access to IWDG_PR and IWDG_RLR registers disabled).
  * @param  None
  * @retval None
  */
void IWDG_Enable(void)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	af00      	add	r7, sp, #0
  IWDG->KR = KR_KEY_ENABLE;
 8008e9c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008ea0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ea4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8008ea8:	601a      	str	r2, [r3, #0]
}
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bc80      	pop	{r7}
 8008eae:	4770      	bx	lr

08008eb0 <IWDG_GetFlagStatus>:
  *            @arg IWDG_FLAG_PVU: Prescaler Value Update on going
  *            @arg IWDG_FLAG_RVU: Reload Value Update on going
  * @retval The new state of IWDG_FLAG (SET or RESET).
  */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	80fb      	strh	r3, [r7, #6]
  FlagStatus bitstatus = RESET;
 8008eba:	f04f 0300 	mov.w	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_IWDG_FLAG(IWDG_FLAG));
  if ((IWDG->SR & IWDG_FLAG) != (uint32_t)RESET)
 8008ec0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008ec4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008ec8:	68da      	ldr	r2, [r3, #12]
 8008eca:	88fb      	ldrh	r3, [r7, #6]
 8008ecc:	4013      	ands	r3, r2
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <IWDG_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 8008ed2:	f04f 0301 	mov.w	r3, #1
 8008ed6:	73fb      	strb	r3, [r7, #15]
 8008ed8:	e002      	b.n	8008ee0 <IWDG_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8008eda:	f04f 0300 	mov.w	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 8008ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f107 0714 	add.w	r7, r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop

08008ef0 <PWR_DeInit>:
  * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
  * @param  None
  * @retval None
  */
void PWR_DeInit(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
 8008ef4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008ef8:	f04f 0101 	mov.w	r1, #1
 8008efc:	f000 fe24 	bl	8009b48 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
 8008f00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008f04:	f04f 0100 	mov.w	r1, #0
 8008f08:	f000 fe1e 	bl	8009b48 <RCC_APB1PeriphResetCmd>
}
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop

08008f10 <PWR_BackupAccessCmd>:
  * @param  NewState: new state of the access to the backup domain.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupAccessCmd(FunctionalState NewState)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
 8008f1a:	f04f 0320 	mov.w	r3, #32
 8008f1e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008f22:	79fa      	ldrb	r2, [r7, #7]
 8008f24:	601a      	str	r2, [r3, #0]
}
 8008f26:	f107 070c 	add.w	r7, r7, #12
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bc80      	pop	{r7}
 8008f2e:	4770      	bx	lr

08008f30 <PWR_PVDLevelConfig>:
  *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
  * @note   Refer to the electrical characteristics of you device datasheet for more details. 
  * @retval None
  */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
  
  tmpreg = PWR->CR;
 8008f3e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008f42:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60fb      	str	r3, [r7, #12]
  
  /* Clear PLS[7:5] bits */
  tmpreg &= CR_PLS_MASK;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8008f50:	60fb      	str	r3, [r7, #12]
  
  /* Set PLS[7:5] bits according to PWR_PVDLevel value */
  tmpreg |= PWR_PVDLevel;
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 8008f5a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008f5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	601a      	str	r2, [r3, #0]
}
 8008f66:	f107 0714 	add.w	r7, r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bc80      	pop	{r7}
 8008f6e:	4770      	bx	lr

08008f70 <PWR_PVDCmd>:
  * @param  NewState: new state of the PVD.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_PVDCmd(FunctionalState NewState)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	4603      	mov	r3, r0
 8008f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 8008f7a:	f04f 0310 	mov.w	r3, #16
 8008f7e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008f82:	79fa      	ldrb	r2, [r7, #7]
 8008f84:	601a      	str	r2, [r3, #0]
}
 8008f86:	f107 070c 	add.w	r7, r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bc80      	pop	{r7}
 8008f8e:	4770      	bx	lr

08008f90 <PWR_WakeUpPinCmd>:
  * @param  NewState: new state of the WakeUp Pin functionality.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_WakeUpPinCmd(FunctionalState NewState)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 8008f9a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
 8008f9e:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008fa2:	79fa      	ldrb	r2, [r7, #7]
 8008fa4:	601a      	str	r2, [r3, #0]
}
 8008fa6:	f107 070c 	add.w	r7, r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr

08008fb0 <PWR_BackupRegulatorCmd>:
  * @param  NewState: new state of the Backup Regulator.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_BackupRegulatorCmd(FunctionalState NewState)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 8008fba:	f04f 03a4 	mov.w	r3, #164	; 0xa4
 8008fbe:	f2c4 230e 	movt	r3, #16910	; 0x420e
 8008fc2:	79fa      	ldrb	r2, [r7, #7]
 8008fc4:	601a      	str	r2, [r3, #0]
}
 8008fc6:	f107 070c 	add.w	r7, r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <PWR_MainRegulatorModeConfig>:
  *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
  *                                                System frequency up to 144 MHz.    
  * @retval None
  */
void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b083      	sub	sp, #12
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));

  if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d10c      	bne.n	8008ff8 <PWR_MainRegulatorModeConfig+0x28>
  {
    PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 8008fde:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008fe2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8008fe6:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8008fea:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008fee:	6812      	ldr	r2, [r2, #0]
 8008ff0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008ff4:	601a      	str	r2, [r3, #0]
 8008ff6:	e00b      	b.n	8009010 <PWR_MainRegulatorModeConfig+0x40>
  }
  else
  {    
    PWR->CR |= PWR_Regulator_Voltage_Scale1;
 8008ff8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008ffc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009000:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009004:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800900e:	601a      	str	r2, [r3, #0]
  }
}
 8009010:	f107 070c 	add.w	r7, r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	bc80      	pop	{r7}
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop

0800901c <PWR_FlashPowerDownCmd>:
  * @param  NewState: new state of the Flash power mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void PWR_FlashPowerDownCmd(FunctionalState NewState)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 8009026:	f04f 0324 	mov.w	r3, #36	; 0x24
 800902a:	f2c4 230e 	movt	r3, #16910	; 0x420e
 800902e:	79fa      	ldrb	r2, [r7, #7]
 8009030:	601a      	str	r2, [r3, #0]
}
 8009032:	f107 070c 	add.w	r7, r7, #12
 8009036:	46bd      	mov	sp, r7
 8009038:	bc80      	pop	{r7}
 800903a:	4770      	bx	lr

0800903c <PWR_EnterSTOPMode>:
  *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
  *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
  * @retval None
  */
void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(PWR_Regulator));
  assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
  
  /* Select the regulator state in STOP mode ---------------------------------*/
  tmpreg = PWR->CR;
 800904e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009052:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	60fb      	str	r3, [r7, #12]
  /* Clear PDDS and LPDSR bits */
  tmpreg &= CR_DS_MASK;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f023 0303 	bic.w	r3, r3, #3
 8009060:	60fb      	str	r3, [r7, #12]
  
  /* Set LPDSR bit according to PWR_Regulator value */
  tmpreg |= PWR_Regulator;
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]
  
  /* Store the new value */
  PWR->CR = tmpreg;
 800906a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800906e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 8009076:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800907a:	f2ce 0300 	movt	r3, #57344	; 0xe000
 800907e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8009082:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009086:	6912      	ldr	r2, [r2, #16]
 8009088:	f042 0204 	orr.w	r2, r2, #4
 800908c:	611a      	str	r2, [r3, #16]
  
  /* Select STOP mode entry --------------------------------------------------*/
  if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 800908e:	78fb      	ldrb	r3, [r7, #3]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d101      	bne.n	8009098 <PWR_EnterSTOPMode+0x5c>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8009094:	bf30      	wfi
 8009096:	e000      	b.n	800909a <PWR_EnterSTOPMode+0x5e>
    Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
 8009098:	bf20      	wfe
  {
    /* Request Wait For Event */
    __WFE();
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 800909a:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 800909e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80090a2:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80090a6:	f2ce 0200 	movt	r2, #57344	; 0xe000
 80090aa:	6912      	ldr	r2, [r2, #16]
 80090ac:	f022 0204 	bic.w	r2, r2, #4
 80090b0:	611a      	str	r2, [r3, #16]
}
 80090b2:	f107 0714 	add.w	r7, r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bc80      	pop	{r7}
 80090ba:	4770      	bx	lr

080090bc <PWR_EnterSTANDBYMode>:
  *          - WKUP pin 1 (PA0) if enabled.       
  * @param  None
  * @retval None
  */
void PWR_EnterSTANDBYMode(void)
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  /* Clear Wakeup flag */
  PWR->CR |= PWR_CR_CWUF;
 80090c0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80090c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80090c8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80090cc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80090d0:	6812      	ldr	r2, [r2, #0]
 80090d2:	f042 0204 	orr.w	r2, r2, #4
 80090d6:	601a      	str	r2, [r3, #0]
  
  /* Select STANDBY mode */
  PWR->CR |= PWR_CR_PDDS;
 80090d8:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80090dc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80090e0:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80090e4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80090e8:	6812      	ldr	r2, [r2, #0]
 80090ea:	f042 0202 	orr.w	r2, r2, #2
 80090ee:	601a      	str	r2, [r3, #0]
  
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 80090f0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 80090f4:	f2ce 0300 	movt	r3, #57344	; 0xe000
 80090f8:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 80090fc:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8009100:	6912      	ldr	r2, [r2, #16]
 8009102:	f042 0204 	orr.w	r2, r2, #4
 8009106:	611a      	str	r2, [r3, #16]
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
 8009108:	bf30      	wfi
#if defined ( __CC_ARM   )
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
}
 800910a:	46bd      	mov	sp, r7
 800910c:	bc80      	pop	{r7}
 800910e:	4770      	bx	lr

08009110 <PWR_GetFlagStatus>:
  *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
  *                 scaling output selection is ready. 
  * @retval The new state of PWR_FLAG (SET or RESET).
  */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8009118:	f04f 0300 	mov.w	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
  
  if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 800911e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009122:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4013      	ands	r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <PWR_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 8009130:	f04f 0301 	mov.w	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	e002      	b.n	800913e <PWR_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 8009138:	f04f 0300 	mov.w	r3, #0
 800913c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the flag status */
  return bitstatus;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	f107 0714 	add.w	r7, r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	bc80      	pop	{r7}
 800914a:	4770      	bx	lr

0800914c <PWR_ClearFlag>:
  *            @arg PWR_FLAG_WU: Wake Up flag
  *            @arg PWR_FLAG_SB: StandBy flag
  * @retval None
  */
void PWR_ClearFlag(uint32_t PWR_FLAG)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
         
  PWR->CR |=  PWR_FLAG << 2;
 8009154:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8009158:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800915c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 8009160:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8009164:	6811      	ldr	r1, [r2, #0]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800916c:	430a      	orrs	r2, r1
 800916e:	601a      	str	r2, [r3, #0]
}
 8009170:	f107 070c 	add.w	r7, r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	bc80      	pop	{r7}
 8009178:	4770      	bx	lr
 800917a:	bf00      	nop

0800917c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009180:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009184:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009188:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800918c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009190:	6812      	ldr	r2, [r2, #0]
 8009192:	f042 0201 	orr.w	r2, r2, #1
 8009196:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009198:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800919c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80091a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091ae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80091b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80091b6:	6812      	ldr	r2, [r2, #0]
 80091b8:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80091bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80091c0:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80091c2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091c6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091ca:	f243 0210 	movw	r2, #12304	; 0x3010
 80091ce:	f2c2 4200 	movt	r2, #9216	; 0x2400
 80091d2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80091d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80091e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80091e4:	6812      	ldr	r2, [r2, #0]
 80091e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80091ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80091ec:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80091f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80091f4:	f04f 0200 	mov.w	r2, #0
 80091f8:	60da      	str	r2, [r3, #12]
}
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr

08009200 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 800920a:	f643 0302 	movw	r3, #14338	; 0x3802
 800920e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009212:	f04f 0200 	mov.w	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8009218:	f643 0302 	movw	r3, #14338	; 0x3802
 800921c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009220:	79fa      	ldrb	r2, [r7, #7]
 8009222:	701a      	strb	r2, [r3, #0]
}
 8009224:	f107 070c 	add.w	r7, r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	bc80      	pop	{r7}
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop

08009230 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8009236:	f04f 0300 	mov.w	r3, #0
 800923a:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 800923c:	f04f 0300 	mov.w	r3, #0
 8009240:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8009248:	f04f 0031 	mov.w	r0, #49	; 0x31
 800924c:	f000 fdd2 	bl	8009df4 <RCC_GetFlagStatus>
 8009250:	4603      	mov	r3, r0
 8009252:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	f103 0301 	add.w	r3, r3, #1
 800925a:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009262:	d002      	beq.n	800926a <RCC_WaitForHSEStartUp+0x3a>
 8009264:	79bb      	ldrb	r3, [r7, #6]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0ee      	beq.n	8009248 <RCC_WaitForHSEStartUp+0x18>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800926a:	f04f 0031 	mov.w	r0, #49	; 0x31
 800926e:	f000 fdc1 	bl	8009df4 <RCC_GetFlagStatus>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
 8009278:	f04f 0301 	mov.w	r3, #1
 800927c:	71fb      	strb	r3, [r7, #7]
 800927e:	e002      	b.n	8009286 <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
 8009280:	f04f 0300 	mov.w	r3, #0
 8009284:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8009286:	79fb      	ldrb	r3, [r7, #7]
}
 8009288:	4618      	mov	r0, r3
 800928a:	f107 0708 	add.w	r7, r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop

08009294 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *         This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
 800929e:	f04f 0300 	mov.w	r3, #0
 80092a2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));

  tmpreg = RCC->CR;
 80092a4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80092a8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	60fb      	str	r3, [r7, #12]

  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80092b8:	79fb      	ldrb	r3, [r7, #7]
 80092ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CR = tmpreg;
 80092c4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80092c8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	601a      	str	r2, [r3, #0]
}
 80092d0:	f107 0714 	add.w	r7, r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop

080092dc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80092ee:	79fa      	ldrb	r2, [r7, #7]
 80092f0:	601a      	str	r2, [r3, #0]
}
 80092f2:	f107 070c 	add.w	r7, r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bc80      	pop	{r7}
 80092fa:	4770      	bx	lr

080092fc <RCC_LSEConfig>:
  *            @arg RCC_LSE_ON: turn ON the LSE oscillator
  *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	4603      	mov	r3, r0
 8009304:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8009306:	f643 0370 	movw	r3, #14448	; 0x3870
 800930a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800930e:	f04f 0200 	mov.w	r2, #0
 8009312:	701a      	strb	r2, [r3, #0]

  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8009314:	f643 0370 	movw	r3, #14448	; 0x3870
 8009318:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]

  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch (RCC_LSE)
 8009322:	79fb      	ldrb	r3, [r7, #7]
 8009324:	2b01      	cmp	r3, #1
 8009326:	d002      	beq.n	800932e <RCC_LSEConfig+0x32>
 8009328:	2b04      	cmp	r3, #4
 800932a:	d008      	beq.n	800933e <RCC_LSEConfig+0x42>
 800932c:	e00f      	b.n	800934e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800932e:	f643 0370 	movw	r3, #14448	; 0x3870
 8009332:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009336:	f04f 0201 	mov.w	r2, #1
 800933a:	701a      	strb	r2, [r3, #0]
      break;
 800933c:	e008      	b.n	8009350 <RCC_LSEConfig+0x54>
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 800933e:	f643 0370 	movw	r3, #14448	; 0x3870
 8009342:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009346:	f04f 0205 	mov.w	r2, #5
 800934a:	701a      	strb	r2, [r3, #0]
      break;
 800934c:	e000      	b.n	8009350 <RCC_LSEConfig+0x54>
    default:
      break;
 800934e:	bf00      	nop
  }
}
 8009350:	f107 070c 	add.w	r7, r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	bc80      	pop	{r7}
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop

0800935c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles. 
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	4603      	mov	r3, r0
 8009364:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 8009366:	f44f 6368 	mov.w	r3, #3712	; 0xe80
 800936a:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800936e:	79fa      	ldrb	r2, [r7, #7]
 8009370:	601a      	str	r2, [r3, #0]
}
 8009372:	f107 070c 	add.w	r7, r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 800938a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800938e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	ea4f 1182 	mov.w	r1, r2, lsl #6
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	4311      	orrs	r1, r2
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80093a2:	f102 32ff 	add.w	r2, r2, #4294967295
 80093a6:	ea4f 4202 	mov.w	r2, r2, lsl #16
 80093aa:	4311      	orrs	r1, r2
 80093ac:	68fa      	ldr	r2, [r7, #12]
 80093ae:	4311      	orrs	r1, r2
                 (PLLQ << 24);
 80093b0:	69ba      	ldr	r2, [r7, #24]
 80093b2:	ea4f 6202 	mov.w	r2, r2, lsl #24
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 80093b6:	430a      	orrs	r2, r1
 80093b8:	605a      	str	r2, [r3, #4]
                 (PLLQ << 24);
}
 80093ba:	f107 0714 	add.w	r7, r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	bc80      	pop	{r7}
 80093c2:	4770      	bx	lr

080093c4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 80093ce:	f04f 0360 	mov.w	r3, #96	; 0x60
 80093d2:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80093d6:	79fa      	ldrb	r2, [r7, #7]
 80093d8:	601a      	str	r2, [r3, #0]
}
 80093da:	f107 070c 	add.w	r7, r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	bc80      	pop	{r7}
 80093e2:	4770      	bx	lr

080093e4 <RCC_PLLI2SConfig>:
  *         on the I2S clock frequency.
  *   
  * @retval None
  */
void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
  assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));

  RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 80093ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80093f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	ea4f 1182 	mov.w	r1, r2, lsl #6
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	ea4f 7202 	mov.w	r2, r2, lsl #28
 8009402:	430a      	orrs	r2, r1
 8009404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8009408:	f107 070c 	add.w	r7, r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop

08009414 <RCC_PLLI2SCmd>:
  * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
  * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLI2SCmd(FunctionalState NewState)
{
 8009414:	b480      	push	{r7}
 8009416:	b083      	sub	sp, #12
 8009418:	af00      	add	r7, sp, #0
 800941a:	4603      	mov	r3, r0
 800941c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 800941e:	f04f 0368 	mov.w	r3, #104	; 0x68
 8009422:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009426:	79fa      	ldrb	r2, [r7, #7]
 8009428:	601a      	str	r2, [r3, #0]
}
 800942a:	f107 070c 	add.w	r7, r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	bc80      	pop	{r7}
 8009432:	4770      	bx	lr

08009434 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 8009434:	b480      	push	{r7}
 8009436:	b083      	sub	sp, #12
 8009438:	af00      	add	r7, sp, #0
 800943a:	4603      	mov	r3, r0
 800943c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 800943e:	f04f 034c 	mov.w	r3, #76	; 0x4c
 8009442:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009446:	79fa      	ldrb	r2, [r7, #7]
 8009448:	601a      	str	r2, [r3, #0]
}
 800944a:	f107 070c 	add.w	r7, r7, #12
 800944e:	46bd      	mov	sp, r7
 8009450:	bc80      	pop	{r7}
 8009452:	4770      	bx	lr

08009454 <RCC_MCO1Config>:
  *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
  *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
  * @retval None
  */
void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
  assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  

  tmpreg = RCC->CFGR;
 8009464:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009468:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
  tmpreg &= CFGR_MCO1_RESET_MASK;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f023 63ec 	bic.w	r3, r3, #123731968	; 0x7600000
 8009476:	60fb      	str	r3, [r7, #12]

  /* Select MCO1 clock source and prescaler */
  tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	4313      	orrs	r3, r2
 800947e:	68fa      	ldr	r2, [r7, #12]
 8009480:	4313      	orrs	r3, r2
 8009482:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 8009484:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009488:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	609a      	str	r2, [r3, #8]
}
 8009490:	f107 0714 	add.w	r7, r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	bc80      	pop	{r7}
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop

0800949c <RCC_MCO2Config>:
  *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
  *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
  * @retval None
  */
void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80094a6:	f04f 0300 	mov.w	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
  assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
  
  tmpreg = RCC->CFGR;
 80094ac:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80094b0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094b4:	689b      	ldr	r3, [r3, #8]
 80094b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear MCO2 and MCO2PRE[2:0] bits */
  tmpreg &= CFGR_MCO2_RESET_MASK;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80094be:	60fb      	str	r3, [r7, #12]

  /* Select MCO2 clock source and prescaler */
  tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;  
 80094cc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80094d0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	609a      	str	r2, [r3, #8]
}
 80094d8:	f107 0714 	add.w	r7, r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	bc80      	pop	{r7}
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop

080094e4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 80094e4:	b480      	push	{r7}
 80094e6:	b085      	sub	sp, #20
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80094f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80094f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f023 0303 	bic.w	r3, r3, #3
 8009504:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800950e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009512:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009516:	68fa      	ldr	r2, [r7, #12]
 8009518:	609a      	str	r2, [r3, #8]
}
 800951a:	f107 0714 	add.w	r7, r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	bc80      	pop	{r7}
 8009522:	4770      	bx	lr

08009524 <RCC_GetSYSCLKSource>:
  *              - 0x00: HSI used as system clock
  *              - 0x04: HSE used as system clock
  *              - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8009528:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800952c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	b2db      	uxtb	r3, r3
 8009534:	f003 030c 	and.w	r3, r3, #12
 8009538:	b2db      	uxtb	r3, r3
}
 800953a:	4618      	mov	r0, r3
 800953c:	46bd      	mov	sp, r7
 800953e:	bc80      	pop	{r7}
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop

08009544 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8009544:	b480      	push	{r7}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800954c:	f04f 0300 	mov.w	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8009552:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009556:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009564:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4313      	orrs	r3, r2
 800956c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800956e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009572:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	609a      	str	r2, [r3, #8]
}
 800957a:	f107 0714 	add.w	r7, r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800958c:	f04f 0300 	mov.w	r3, #0
 8009590:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8009592:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009596:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80095ae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80095b2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	609a      	str	r2, [r3, #8]
}
 80095ba:	f107 0714 	add.w	r7, r7, #20
 80095be:	46bd      	mov	sp, r7
 80095c0:	bc80      	pop	{r7}
 80095c2:	4770      	bx	lr

080095c4 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80095cc:	f04f 0300 	mov.w	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 80095d2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80095d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80095e4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80095f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80095f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	609a      	str	r2, [r3, #8]
}
 80095fe:	f107 0714 	add.w	r7, r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	bc80      	pop	{r7}
 8009606:	4770      	bx	lr

08009608 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8009608:	b480      	push	{r7}
 800960a:	b089      	sub	sp, #36	; 0x24
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8009610:	f04f 0300 	mov.w	r3, #0
 8009614:	61bb      	str	r3, [r7, #24]
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	617b      	str	r3, [r7, #20]
 800961c:	f04f 0300 	mov.w	r3, #0
 8009620:	61fb      	str	r3, [r7, #28]
 8009622:	f04f 0302 	mov.w	r3, #2
 8009626:	613b      	str	r3, [r7, #16]
 8009628:	f04f 0300 	mov.w	r3, #0
 800962c:	60fb      	str	r3, [r7, #12]
 800962e:	f04f 0302 	mov.w	r3, #2
 8009632:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8009634:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009638:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	f003 030c 	and.w	r3, r3, #12
 8009642:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	2b04      	cmp	r3, #4
 8009648:	d00a      	beq.n	8009660 <RCC_GetClocksFreq+0x58>
 800964a:	2b08      	cmp	r3, #8
 800964c:	d00f      	beq.n	800966e <RCC_GetClocksFreq+0x66>
 800964e:	2b00      	cmp	r3, #0
 8009650:	d160      	bne.n	8009714 <RCC_GetClocksFreq+0x10c>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009652:	687a      	ldr	r2, [r7, #4]
 8009654:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8009658:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800965c:	6013      	str	r3, [r2, #0]
      break;
 800965e:	e060      	b.n	8009722 <RCC_GetClocksFreq+0x11a>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8009666:	f2c0 037a 	movt	r3, #122	; 0x7a
 800966a:	6013      	str	r3, [r2, #0]
      break;
 800966c:	e059      	b.n	8009722 <RCC_GetClocksFreq+0x11a>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800966e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009672:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800967c:	ea4f 5393 	mov.w	r3, r3, lsr #22
 8009680:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009682:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009686:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009690:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d014      	beq.n	80096c2 <RCC_GetClocksFreq+0xba>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8009698:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800969c:	f2c0 037a 	movt	r3, #122	; 0x7a
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80096a6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80096aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096ae:	6859      	ldr	r1, [r3, #4]
 80096b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096b4:	400b      	ands	r3, r1
 80096b6:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80096ba:	fb03 f302 	mul.w	r3, r3, r2
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	e013      	b.n	80096ea <RCC_GetClocksFreq+0xe2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80096c2:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 80096c6:	f2c0 03f4 	movt	r3, #244	; 0xf4
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	fbb3 f2f2 	udiv	r2, r3, r2
 80096d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80096d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096d8:	6859      	ldr	r1, [r3, #4]
 80096da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80096de:	400b      	ands	r3, r1
 80096e0:	ea4f 1393 	mov.w	r3, r3, lsr #6
 80096e4:	fb03 f302 	mul.w	r3, r3, r2
 80096e8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80096ea:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80096ee:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80096f8:	ea4f 4313 	mov.w	r3, r3, lsr #16
 80096fc:	f103 0301 	add.w	r3, r3, #1
 8009700:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009704:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	fbb2 f2f3 	udiv	r2, r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
      break;
 8009712:	e006      	b.n	8009722 <RCC_GetClocksFreq+0x11a>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 800971a:	f2c0 03f4 	movt	r3, #244	; 0xf4
 800971e:	6013      	str	r3, [r2, #0]
      break;
 8009720:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8009722:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009726:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009730:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	ea4f 1313 	mov.w	r3, r3, lsr #4
 8009738:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800973a:	f240 032c 	movw	r3, #44	; 0x2c
 800973e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8009742:	69ba      	ldr	r2, [r7, #24]
 8009744:	189b      	adds	r3, r3, r2
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	b2db      	uxtb	r3, r3
 800974a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	fa22 f203 	lsr.w	r2, r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800975a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800975e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009768:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	ea4f 2393 	mov.w	r3, r3, lsr #10
 8009770:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8009772:	f240 032c 	movw	r3, #44	; 0x2c
 8009776:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	189b      	adds	r3, r3, r2
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	b2db      	uxtb	r3, r3
 8009782:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685a      	ldr	r2, [r3, #4]
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	fa22 f203 	lsr.w	r2, r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8009792:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009796:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80097a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	ea4f 3353 	mov.w	r3, r3, lsr #13
 80097a8:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80097aa:	f240 032c 	movw	r3, #44	; 0x2c
 80097ae:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80097b2:	69ba      	ldr	r2, [r7, #24]
 80097b4:	189b      	adds	r3, r3, r2
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685a      	ldr	r2, [r3, #4]
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	fa22 f203 	lsr.w	r2, r2, r3
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	60da      	str	r2, [r3, #12]
}
 80097ca:	f107 0724 	add.w	r7, r7, #36	; 0x24
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bc80      	pop	{r7}
 80097d2:	4770      	bx	lr

080097d4 <RCC_RTCCLKConfig>:
  *         RTC clock source).
  *  
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80097dc:	f04f 0300 	mov.w	r3, #0
 80097e0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));

  if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ec:	d117      	bne.n	800981e <RCC_RTCCLKConfig+0x4a>
  { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
    tmpreg = RCC->CFGR;
 80097ee:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80097f2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	60fb      	str	r3, [r7, #12]

    /* Clear RTCPRE[4:0] bits */
    tmpreg &= ~RCC_CFGR_RTCPRE;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009800:	60fb      	str	r3, [r7, #12]

    /* Configure HSE division factor for RTC clock */
    tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

    /* Store the new value */
    RCC->CFGR = tmpreg;
 8009812:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009816:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	609a      	str	r2, [r3, #8]
  }
    
  /* Select the RTC clock source */
  RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 800981e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009822:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009826:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800982a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800982e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	ea4f 5202 	mov.w	r2, r2, lsl #20
 8009836:	ea4f 5212 	mov.w	r2, r2, lsr #20
 800983a:	430a      	orrs	r2, r1
 800983c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800983e:	f107 0714 	add.w	r7, r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	bc80      	pop	{r7}
 8009846:	4770      	bx	lr

08009848 <RCC_RTCCLKCmd>:
  *         using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8009852:	f640 633c 	movw	r3, #3644	; 0xe3c
 8009856:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800985a:	79fa      	ldrb	r2, [r7, #7]
 800985c:	601a      	str	r2, [r3, #0]
}
 800985e:	f107 070c 	add.w	r7, r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr

08009868 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 8009872:	f44f 6364 	mov.w	r3, #3648	; 0xe40
 8009876:	f2c4 2347 	movt	r3, #16967	; 0x4247
 800987a:	79fa      	ldrb	r2, [r7, #7]
 800987c:	601a      	str	r2, [r3, #0]
}
 800987e:	f107 070c 	add.w	r7, r7, #12
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <RCC_I2SCLKConfig>:
  *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
  *                                        used as I2S clock source
  * @retval None
  */
void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));

  *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 8009890:	f44f 73ae 	mov.w	r3, #348	; 0x15c
 8009894:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	601a      	str	r2, [r3, #0]
}
 800989c:	f107 070c 	add.w	r7, r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bc80      	pop	{r7}
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop

080098a8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80098b4:	78fb      	ldrb	r3, [r7, #3]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00c      	beq.n	80098d4 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80098ba:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80098be:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80098c2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80098c6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80098ca:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	631a      	str	r2, [r3, #48]	; 0x30
 80098d2:	e00d      	b.n	80098f0 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80098d4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80098d8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80098dc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80098e0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80098e4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80098e6:	687a      	ldr	r2, [r7, #4]
 80098e8:	ea6f 0202 	mvn.w	r2, r2
 80098ec:	400a      	ands	r2, r1
 80098ee:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80098f0:	f107 070c 	add.w	r7, r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bc80      	pop	{r7}
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop

080098fc <RCC_AHB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	460b      	mov	r3, r1
 8009906:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009908:	78fb      	ldrb	r3, [r7, #3]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00c      	beq.n	8009928 <RCC_AHB2PeriphClockCmd+0x2c>
  {
    RCC->AHB2ENR |= RCC_AHB2Periph;
 800990e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009912:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009916:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800991a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800991e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	430a      	orrs	r2, r1
 8009924:	635a      	str	r2, [r3, #52]	; 0x34
 8009926:	e00d      	b.n	8009944 <RCC_AHB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB2ENR &= ~RCC_AHB2Periph;
 8009928:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800992c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009930:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009934:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009938:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	ea6f 0202 	mvn.w	r2, r2
 8009940:	400a      	ands	r2, r1
 8009942:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8009944:	f107 070c 	add.w	r7, r7, #12
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop

08009950 <RCC_AHB3PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800995c:	78fb      	ldrb	r3, [r7, #3]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00c      	beq.n	800997c <RCC_AHB3PeriphClockCmd+0x2c>
  {
    RCC->AHB3ENR |= RCC_AHB3Periph;
 8009962:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009966:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800996a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800996e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009972:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	430a      	orrs	r2, r1
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
 800997a:	e00d      	b.n	8009998 <RCC_AHB3PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB3ENR &= ~RCC_AHB3Periph;
 800997c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009980:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009984:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009988:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800998c:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	ea6f 0202 	mvn.w	r2, r2
 8009994:	400a      	ands	r2, r1
 8009996:	639a      	str	r2, [r3, #56]	; 0x38
  }
}
 8009998:	f107 070c 	add.w	r7, r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	bc80      	pop	{r7}
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop

080099a4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80099b0:	78fb      	ldrb	r3, [r7, #3]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80099b6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80099c2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80099c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	430a      	orrs	r2, r1
 80099cc:	641a      	str	r2, [r3, #64]	; 0x40
 80099ce:	e00d      	b.n	80099ec <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80099d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80099d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80099d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80099dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80099e0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	ea6f 0202 	mvn.w	r2, r2
 80099e8:	400a      	ands	r2, r1
 80099ea:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 80099ec:	f107 070c 	add.w	r7, r7, #12
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bc80      	pop	{r7}
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop

080099f8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b083      	sub	sp, #12
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00c      	beq.n	8009a24 <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8009a0a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a0e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a12:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009a16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009a1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	430a      	orrs	r2, r1
 8009a20:	645a      	str	r2, [r3, #68]	; 0x44
 8009a22:	e00d      	b.n	8009a40 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8009a24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a28:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a2c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009a30:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009a34:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	ea6f 0202 	mvn.w	r2, r2
 8009a3c:	400a      	ands	r2, r1
 8009a3e:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8009a40:	f107 070c 	add.w	r7, r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bc80      	pop	{r7}
 8009a48:	4770      	bx	lr
 8009a4a:	bf00      	nop

08009a4c <RCC_AHB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	460b      	mov	r3, r1
 8009a56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d00c      	beq.n	8009a78 <RCC_AHB1PeriphResetCmd+0x2c>
  {
    RCC->AHB1RSTR |= RCC_AHB1Periph;
 8009a5e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a62:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a66:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009a6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009a6e:	6911      	ldr	r1, [r2, #16]
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	430a      	orrs	r2, r1
 8009a74:	611a      	str	r2, [r3, #16]
 8009a76:	e00d      	b.n	8009a94 <RCC_AHB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 8009a78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009a7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009a80:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009a84:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009a88:	6911      	ldr	r1, [r2, #16]
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	ea6f 0202 	mvn.w	r2, r2
 8009a90:	400a      	ands	r2, r1
 8009a92:	611a      	str	r2, [r3, #16]
  }
}
 8009a94:	f107 070c 	add.w	r7, r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bc80      	pop	{r7}
 8009a9c:	4770      	bx	lr
 8009a9e:	bf00      	nop

08009aa0 <RCC_AHB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00c      	beq.n	8009acc <RCC_AHB2PeriphResetCmd+0x2c>
  {
    RCC->AHB2RSTR |= RCC_AHB2Periph;
 8009ab2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ab6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009aba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009abe:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009ac2:	6951      	ldr	r1, [r2, #20]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	615a      	str	r2, [r3, #20]
 8009aca:	e00d      	b.n	8009ae8 <RCC_AHB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 8009acc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ad0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ad4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009ad8:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009adc:	6951      	ldr	r1, [r2, #20]
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	ea6f 0202 	mvn.w	r2, r2
 8009ae4:	400a      	ands	r2, r1
 8009ae6:	615a      	str	r2, [r3, #20]
  }
}
 8009ae8:	f107 070c 	add.w	r7, r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bc80      	pop	{r7}
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop

08009af4 <RCC_AHB3PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00c      	beq.n	8009b20 <RCC_AHB3PeriphResetCmd+0x2c>
  {
    RCC->AHB3RSTR |= RCC_AHB3Periph;
 8009b06:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b0a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b0e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b12:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b16:	6991      	ldr	r1, [r2, #24]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	619a      	str	r2, [r3, #24]
 8009b1e:	e00d      	b.n	8009b3c <RCC_AHB3PeriphResetCmd+0x48>
  }
  else
  {
    RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 8009b20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b28:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b30:	6991      	ldr	r1, [r2, #24]
 8009b32:	687a      	ldr	r2, [r7, #4]
 8009b34:	ea6f 0202 	mvn.w	r2, r2
 8009b38:	400a      	ands	r2, r1
 8009b3a:	619a      	str	r2, [r3, #24]
  }
}
 8009b3c:	f107 070c 	add.w	r7, r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bc80      	pop	{r7}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop

08009b48 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b083      	sub	sp, #12
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	460b      	mov	r3, r1
 8009b52:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009b54:	78fb      	ldrb	r3, [r7, #3]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00c      	beq.n	8009b74 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 8009b5a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b5e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b62:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b66:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b6a:	6a11      	ldr	r1, [r2, #32]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	621a      	str	r2, [r3, #32]
 8009b72:	e00d      	b.n	8009b90 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8009b74:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009b78:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009b7c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009b80:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009b84:	6a11      	ldr	r1, [r2, #32]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	ea6f 0202 	mvn.w	r2, r2
 8009b8c:	400a      	ands	r2, r1
 8009b8e:	621a      	str	r2, [r3, #32]
  }
}
 8009b90:	f107 070c 	add.w	r7, r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bc80      	pop	{r7}
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop

08009b9c <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009ba8:	78fb      	ldrb	r3, [r7, #3]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00c      	beq.n	8009bc8 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 8009bae:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bb2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009bb6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009bba:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009bbe:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	430a      	orrs	r2, r1
 8009bc4:	625a      	str	r2, [r3, #36]	; 0x24
 8009bc6:	e00d      	b.n	8009be4 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 8009bc8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009bcc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009bd0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009bd4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009bd8:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8009bda:	687a      	ldr	r2, [r7, #4]
 8009bdc:	ea6f 0202 	mvn.w	r2, r2
 8009be0:	400a      	ands	r2, r1
 8009be2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009be4:	f107 070c 	add.w	r7, r7, #12
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bc80      	pop	{r7}
 8009bec:	4770      	bx	lr
 8009bee:	bf00      	nop

08009bf0 <RCC_AHB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b083      	sub	sp, #12
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00c      	beq.n	8009c1c <RCC_AHB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB1LPENR |= RCC_AHB1Periph;
 8009c02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c06:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c0a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c0e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c12:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	430a      	orrs	r2, r1
 8009c18:	651a      	str	r2, [r3, #80]	; 0x50
 8009c1a:	e00d      	b.n	8009c38 <RCC_AHB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 8009c1c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c20:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c24:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c28:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c2c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	ea6f 0202 	mvn.w	r2, r2
 8009c34:	400a      	ands	r2, r1
 8009c36:	651a      	str	r2, [r3, #80]	; 0x50
  }
}
 8009c38:	f107 070c 	add.w	r7, r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bc80      	pop	{r7}
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop

08009c44 <RCC_AHB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	460b      	mov	r3, r1
 8009c4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009c50:	78fb      	ldrb	r3, [r7, #3]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00c      	beq.n	8009c70 <RCC_AHB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB2LPENR |= RCC_AHB2Periph;
 8009c56:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c5e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c62:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c66:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	430a      	orrs	r2, r1
 8009c6c:	655a      	str	r2, [r3, #84]	; 0x54
 8009c6e:	e00d      	b.n	8009c8c <RCC_AHB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 8009c70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009c74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009c78:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009c7c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009c80:	6d51      	ldr	r1, [r2, #84]	; 0x54
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	ea6f 0202 	mvn.w	r2, r2
 8009c88:	400a      	ands	r2, r1
 8009c8a:	655a      	str	r2, [r3, #84]	; 0x54
  }
}
 8009c8c:	f107 070c 	add.w	r7, r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr
 8009c96:	bf00      	nop

08009c98 <RCC_AHB3PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b083      	sub	sp, #12
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009ca4:	78fb      	ldrb	r3, [r7, #3]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d00c      	beq.n	8009cc4 <RCC_AHB3PeriphClockLPModeCmd+0x2c>
  {
    RCC->AHB3LPENR |= RCC_AHB3Periph;
 8009caa:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cae:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009cb2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009cb6:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009cba:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8009cc2:	e00d      	b.n	8009ce0 <RCC_AHB3PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 8009cc4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009cc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ccc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009cd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009cd4:	6d91      	ldr	r1, [r2, #88]	; 0x58
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	ea6f 0202 	mvn.w	r2, r2
 8009cdc:	400a      	ands	r2, r1
 8009cde:	659a      	str	r2, [r3, #88]	; 0x58
  }
}
 8009ce0:	f107 070c 	add.w	r7, r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bc80      	pop	{r7}
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop

08009cec <RCC_APB1PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009cf8:	78fb      	ldrb	r3, [r7, #3]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00c      	beq.n	8009d18 <RCC_APB1PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB1LPENR |= RCC_APB1Periph;
 8009cfe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d02:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d06:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009d0a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009d0e:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	661a      	str	r2, [r3, #96]	; 0x60
 8009d16:	e00d      	b.n	8009d34 <RCC_APB1PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB1LPENR &= ~RCC_APB1Periph;
 8009d18:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d1c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d20:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009d24:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009d28:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	ea6f 0202 	mvn.w	r2, r2
 8009d30:	400a      	ands	r2, r1
 8009d32:	661a      	str	r2, [r3, #96]	; 0x60
  }
}
 8009d34:	f107 070c 	add.w	r7, r7, #12
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bc80      	pop	{r7}
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop

08009d40 <RCC_APB2PeriphClockLPModeCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009d4c:	78fb      	ldrb	r3, [r7, #3]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00c      	beq.n	8009d6c <RCC_APB2PeriphClockLPModeCmd+0x2c>
  {
    RCC->APB2LPENR |= RCC_APB2Periph;
 8009d52:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d56:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d5a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009d5e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009d62:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	665a      	str	r2, [r3, #100]	; 0x64
 8009d6a:	e00d      	b.n	8009d88 <RCC_APB2PeriphClockLPModeCmd+0x48>
  }
  else
  {
    RCC->APB2LPENR &= ~RCC_APB2Periph;
 8009d6c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d70:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009d74:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009d78:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009d7c:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	ea6f 0202 	mvn.w	r2, r2
 8009d84:	400a      	ands	r2, r1
 8009d86:	665a      	str	r2, [r3, #100]	; 0x64
  }
}
 8009d88:	f107 070c 	add.w	r7, r7, #12
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bc80      	pop	{r7}
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop

08009d94 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b083      	sub	sp, #12
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	71fa      	strb	r2, [r7, #7]
 8009da0:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8009da2:	79bb      	ldrb	r3, [r7, #6]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00e      	beq.n	8009dc6 <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 8009da8:	f643 030d 	movw	r3, #14349	; 0x380d
 8009dac:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009db0:	f643 020d 	movw	r2, #14349	; 0x380d
 8009db4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009db8:	7812      	ldrb	r2, [r2, #0]
 8009dba:	b2d1      	uxtb	r1, r2
 8009dbc:	79fa      	ldrb	r2, [r7, #7]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	b2d2      	uxtb	r2, r2
 8009dc2:	701a      	strb	r2, [r3, #0]
 8009dc4:	e010      	b.n	8009de8 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 8009dc6:	f643 030d 	movw	r3, #14349	; 0x380d
 8009dca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009dce:	f643 020d 	movw	r2, #14349	; 0x380d
 8009dd2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009dd6:	7812      	ldrb	r2, [r2, #0]
 8009dd8:	b2d1      	uxtb	r1, r2
 8009dda:	79fa      	ldrb	r2, [r7, #7]
 8009ddc:	ea6f 0202 	mvn.w	r2, r2
 8009de0:	b2d2      	uxtb	r2, r2
 8009de2:	400a      	ands	r2, r1
 8009de4:	b2d2      	uxtb	r2, r2
 8009de6:	701a      	strb	r2, [r3, #0]
  }
}
 8009de8:	f107 070c 	add.w	r7, r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bc80      	pop	{r7}
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop

08009df4 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8009df4:	b480      	push	{r7}
 8009df6:	b087      	sub	sp, #28
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8009dfe:	f04f 0300 	mov.w	r3, #0
 8009e02:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8009e04:	f04f 0300 	mov.w	r3, #0
 8009e08:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8009e10:	79fb      	ldrb	r3, [r7, #7]
 8009e12:	ea4f 1353 	mov.w	r3, r3, lsr #5
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d106      	bne.n	8009e2e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
 8009e20:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e24:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	617b      	str	r3, [r7, #20]
 8009e2c:	e00f      	b.n	8009e4e <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b02      	cmp	r3, #2
 8009e32:	d106      	bne.n	8009e42 <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
 8009e34:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e38:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e3e:	617b      	str	r3, [r7, #20]
 8009e40:	e005      	b.n	8009e4e <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8009e42:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e46:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e4c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	f003 031f 	and.w	r3, r3, #31
 8009e54:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	697a      	ldr	r2, [r7, #20]
 8009e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e5e:	f003 0301 	and.w	r3, r3, #1
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d003      	beq.n	8009e70 <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
 8009e68:	f04f 0301 	mov.w	r3, #1
 8009e6c:	74fb      	strb	r3, [r7, #19]
 8009e6e:	e002      	b.n	8009e76 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8009e76:	7cfb      	ldrb	r3, [r7, #19]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f107 071c 	add.w	r7, r7, #28
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr

08009e84 <RCC_ClearFlag>:
  *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
 8009e84:	b480      	push	{r7}
 8009e86:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8009e88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009e8c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009e90:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8009e94:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8009e98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009e9a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8009e9e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bc80      	pop	{r7}
 8009ea4:	4770      	bx	lr
 8009ea6:	bf00      	nop

08009ea8 <RCC_GetITStatus>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 8009eb2:	f04f 0300 	mov.w	r3, #0
 8009eb6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8009eb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009ebc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009ec0:	68da      	ldr	r2, [r3, #12]
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	4013      	ands	r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d003      	beq.n	8009ed2 <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
 8009eca:	f04f 0301 	mov.w	r3, #1
 8009ece:	73fb      	strb	r3, [r7, #15]
 8009ed0:	e002      	b.n	8009ed8 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 8009ed2:	f04f 0300 	mov.w	r3, #0
 8009ed6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	f107 0714 	add.w	r7, r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bc80      	pop	{r7}
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop

08009ee8 <RCC_ClearITPendingBit>:
  *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
  *            @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 8009ef2:	f643 030e 	movw	r3, #14350	; 0x380e
 8009ef6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8009efa:	79fa      	ldrb	r2, [r7, #7]
 8009efc:	701a      	strb	r2, [r3, #0]
}
 8009efe:	f107 070c 	add.w	r7, r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bc80      	pop	{r7}
 8009f06:	4770      	bx	lr

08009f08 <RNG_DeInit>:
  * @brief  Deinitializes the RNG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void RNG_DeInit(void)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	af00      	add	r7, sp, #0
  /* Enable RNG reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
 8009f0c:	f04f 0040 	mov.w	r0, #64	; 0x40
 8009f10:	f04f 0101 	mov.w	r1, #1
 8009f14:	f7ff fdc4 	bl	8009aa0 <RCC_AHB2PeriphResetCmd>

  /* Release RNG from reset state */
  RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
 8009f18:	f04f 0040 	mov.w	r0, #64	; 0x40
 8009f1c:	f04f 0100 	mov.w	r1, #0
 8009f20:	f7ff fdbe 	bl	8009aa0 <RCC_AHB2PeriphResetCmd>
}
 8009f24:	bd80      	pop	{r7, pc}
 8009f26:	bf00      	nop

08009f28 <RNG_Cmd>:
  * @param  NewState: new state of the RNG peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_Cmd(FunctionalState NewState)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009f32:	79fb      	ldrb	r3, [r7, #7]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00c      	beq.n	8009f52 <RNG_Cmd+0x2a>
  {
    /* Enable the RNG */
    RNG->CR |= RNG_CR_RNGEN;
 8009f38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f3c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f44:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009f48:	6812      	ldr	r2, [r2, #0]
 8009f4a:	f042 0204 	orr.w	r2, r2, #4
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e00b      	b.n	8009f6a <RNG_Cmd+0x42>
  }
  else
  {
    /* Disable the RNG */
    RNG->CR &= ~RNG_CR_RNGEN;
 8009f52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f56:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f5e:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009f62:	6812      	ldr	r2, [r2, #0]
 8009f64:	f022 0204 	bic.w	r2, r2, #4
 8009f68:	601a      	str	r2, [r3, #0]
  }
}
 8009f6a:	f107 070c 	add.w	r7, r7, #12
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bc80      	pop	{r7}
 8009f72:	4770      	bx	lr

08009f74 <RNG_GetRandomNumber>:
  *         
  * @param  None
  * @retval 32-bit random number.
  */
uint32_t RNG_GetRandomNumber(void)
{
 8009f74:	b480      	push	{r7}
 8009f76:	af00      	add	r7, sp, #0
  /* Return the 32 bit random number from the DR register */
  return RNG->DR;
 8009f78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009f7c:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009f80:	689b      	ldr	r3, [r3, #8]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bc80      	pop	{r7}
 8009f88:	4770      	bx	lr
 8009f8a:	bf00      	nop

08009f8c <RNG_ITConfig>:
  * @param  NewState: new state of the RNG interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RNG_ITConfig(FunctionalState NewState)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b083      	sub	sp, #12
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	4603      	mov	r3, r0
 8009f94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00c      	beq.n	8009fb6 <RNG_ITConfig+0x2a>
  {
    /* Enable the RNG interrupt */
    RNG->CR |= RNG_CR_IE;
 8009f9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fa0:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009fa4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fa8:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009fac:	6812      	ldr	r2, [r2, #0]
 8009fae:	f042 0208 	orr.w	r2, r2, #8
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	e00b      	b.n	8009fce <RNG_ITConfig+0x42>
  }
  else
  {
    /* Disable the RNG interrupt */
    RNG->CR &= ~RNG_CR_IE;
 8009fb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fba:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009fc2:	f2c5 0206 	movt	r2, #20486	; 0x5006
 8009fc6:	6812      	ldr	r2, [r2, #0]
 8009fc8:	f022 0208 	bic.w	r2, r2, #8
 8009fcc:	601a      	str	r2, [r3, #0]
  }
}
 8009fce:	f107 070c 	add.w	r7, r7, #12
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bc80      	pop	{r7}
 8009fd6:	4770      	bx	lr

08009fd8 <RNG_GetFlagStatus>:
  *            @arg RNG_FLAG_CECS: Clock Error Current flag.
  *            @arg RNG_FLAG_SECS: Seed Error Current flag.
  * @retval The new state of RNG_FLAG (SET or RESET).
  */
FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
{
 8009fd8:	b480      	push	{r7}
 8009fda:	b085      	sub	sp, #20
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	71fb      	strb	r3, [r7, #7]
  FlagStatus bitstatus = RESET;
 8009fe2:	f04f 0300 	mov.w	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_FLAG(RNG_FLAG));

  /* Check the status of the specified RNG flag */
  if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
 8009fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009fec:	f2c5 0306 	movt	r3, #20486	; 0x5006
 8009ff0:	685a      	ldr	r2, [r3, #4]
 8009ff2:	79fb      	ldrb	r3, [r7, #7]
 8009ff4:	4013      	ands	r3, r2
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d003      	beq.n	800a002 <RNG_GetFlagStatus+0x2a>
  {
    /* RNG_FLAG is set */
    bitstatus = SET;
 8009ffa:	f04f 0301 	mov.w	r3, #1
 8009ffe:	73fb      	strb	r3, [r7, #15]
 800a000:	e002      	b.n	800a008 <RNG_GetFlagStatus+0x30>
  }
  else
  {
    /* RNG_FLAG is reset */
    bitstatus = RESET;
 800a002:	f04f 0300 	mov.w	r3, #0
 800a006:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_FLAG status */
  return  bitstatus;
 800a008:	7bfb      	ldrb	r3, [r7, #15]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	f107 0714 	add.w	r7, r7, #20
 800a010:	46bd      	mov	sp, r7
 800a012:	bc80      	pop	{r7}
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop

0800a018 <RNG_ClearFlag>:
  *         This flag is cleared only by reading the Random number data (using 
  *         RNG_GetRandomNumber() function).                           
  * @retval None
  */
void RNG_ClearFlag(uint8_t RNG_FLAG)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	4603      	mov	r3, r0
 800a020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
  /* Clear the selected RNG flags */
  RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
 800a022:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a026:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a02a:	79fa      	ldrb	r2, [r7, #7]
 800a02c:	ea4f 1202 	mov.w	r2, r2, lsl #4
 800a030:	ea6f 0202 	mvn.w	r2, r2
 800a034:	605a      	str	r2, [r3, #4]
}
 800a036:	f107 070c 	add.w	r7, r7, #12
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bc80      	pop	{r7}
 800a03e:	4770      	bx	lr

0800a040 <RNG_GetITStatus>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.                   
  * @retval The new state of RNG_IT (SET or RESET).
  */
ITStatus RNG_GetITStatus(uint8_t RNG_IT)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	4603      	mov	r3, r0
 800a048:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RNG_GET_IT(RNG_IT));

  /* Check the status of the specified RNG interrupt */
  if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
 800a050:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a054:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a058:	685a      	ldr	r2, [r3, #4]
 800a05a:	79fb      	ldrb	r3, [r7, #7]
 800a05c:	4013      	ands	r3, r2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <RNG_GetITStatus+0x2a>
  {
    /* RNG_IT is set */
    bitstatus = SET;
 800a062:	f04f 0301 	mov.w	r3, #1
 800a066:	73fb      	strb	r3, [r7, #15]
 800a068:	e002      	b.n	800a070 <RNG_GetITStatus+0x30>
  }
  else
  {
    /* RNG_IT is reset */
    bitstatus = RESET;
 800a06a:	f04f 0300 	mov.w	r3, #0
 800a06e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RNG_IT status */
  return bitstatus;
 800a070:	7bfb      	ldrb	r3, [r7, #15]
}
 800a072:	4618      	mov	r0, r3
 800a074:	f107 0714 	add.w	r7, r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	bc80      	pop	{r7}
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop

0800a080 <RNG_ClearITPendingBit>:
  *            @arg RNG_IT_CEI: Clock Error Interrupt.
  *            @arg RNG_IT_SEI: Seed Error Interrupt.
  * @retval None
  */
void RNG_ClearITPendingBit(uint8_t RNG_IT)
{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RNG_IT(RNG_IT));

  /* Clear the selected RNG interrupt pending bit */
  RNG->SR = (uint8_t)~RNG_IT;
 800a08a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a08e:	f2c5 0306 	movt	r3, #20486	; 0x5006
 800a092:	79fa      	ldrb	r2, [r7, #7]
 800a094:	ea6f 0202 	mvn.w	r2, r2
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	605a      	str	r2, [r3, #4]
}
 800a09c:	f107 070c 	add.w	r7, r7, #12
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bc80      	pop	{r7}
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop

0800a0a8 <RTC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are deinitialized
  *          - ERROR: RTC registers are not deinitialized
  */
ErrorStatus RTC_DeInit(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
  __IO uint32_t wutcounter = 0x00;
 800a0ae:	f04f 0300 	mov.w	r3, #0
 800a0b2:	607b      	str	r3, [r7, #4]
  uint32_t wutwfstatus = 0x00;
 800a0b4:	f04f 0300 	mov.w	r3, #0
 800a0b8:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 800a0ba:	f04f 0300 	mov.w	r3, #0
 800a0be:	73fb      	strb	r3, [r7, #15]
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a0c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a0c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a0c8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a0cc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a0ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a0d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a0d6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a0da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a0dc:	f000 f934 	bl	800a348 <RTC_EnterInitMode>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d103      	bne.n	800a0ee <RTC_DeInit+0x46>
  {
    status = ERROR;
 800a0e6:	f04f 0300 	mov.w	r3, #0
 800a0ea:	73fb      	strb	r3, [r7, #15]
 800a0ec:	e084      	b.n	800a1f8 <RTC_DeInit+0x150>
  }  
  else
  {
    /* Reset TR, DR and CR registers */
    RTC->TR = (uint32_t)0x00000000;
 800a0ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a0f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a0f6:	f04f 0200 	mov.w	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
    RTC->DR = (uint32_t)0x00002101;
 800a0fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a100:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a104:	f242 1201 	movw	r2, #8449	; 0x2101
 800a108:	605a      	str	r2, [r3, #4]
    /* Reset All CR bits except CR[2:0] */
    RTC->CR &= (uint32_t)0x00000007;
 800a10a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a10e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a112:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a116:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a11a:	6892      	ldr	r2, [r2, #8]
 800a11c:	f002 0207 	and.w	r2, r2, #7
 800a120:	609a      	str	r2, [r3, #8]
  
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800a122:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a126:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	60bb      	str	r3, [r7, #8]
      wutcounter++;  
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f103 0301 	add.w	r3, r3, #1
 800a138:	607b      	str	r3, [r7, #4]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a140:	d002      	beq.n	800a148 <RTC_DeInit+0xa0>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d0ec      	beq.n	800a122 <RTC_DeInit+0x7a>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800a148:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a14c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	f003 0304 	and.w	r3, r3, #4
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <RTC_DeInit+0xba>
    {
      status = ERROR;
 800a15a:	f04f 0300 	mov.w	r3, #0
 800a15e:	73fb      	strb	r3, [r7, #15]
 800a160:	e04a      	b.n	800a1f8 <RTC_DeInit+0x150>
    }
    else
    {
      /* Reset all RTC CR register bits */
      RTC->CR &= (uint32_t)0x00000000;
 800a162:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a166:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a170:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a174:	f04f 0200 	mov.w	r2, #0
 800a178:	609a      	str	r2, [r3, #8]
      RTC->WUTR = (uint32_t)0x0000FFFF;
 800a17a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a17e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a186:	615a      	str	r2, [r3, #20]
      RTC->PRER = (uint32_t)0x007F00FF;
 800a188:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a18c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a190:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a194:	f2c0 027f 	movt	r2, #127	; 0x7f
 800a198:	611a      	str	r2, [r3, #16]
      RTC->CALIBR = (uint32_t)0x00000000;
 800a19a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a19e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	619a      	str	r2, [r3, #24]
      RTC->ALRMAR = (uint32_t)0x00000000;        
 800a1a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1b0:	f04f 0200 	mov.w	r2, #0
 800a1b4:	61da      	str	r2, [r3, #28]
      RTC->ALRMBR = (uint32_t)0x00000000;
 800a1b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	621a      	str	r2, [r3, #32]
      
      /* Reset ISR register and exit initialization mode */
      RTC->ISR = (uint32_t)0x00000000;
 800a1c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	60da      	str	r2, [r3, #12]
      
      /* Reset Tamper and alternate functions configuration register */
      RTC->TAFCR = 0x00000000;
 800a1d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	641a      	str	r2, [r3, #64]	; 0x40
  
      if(RTC_WaitForSynchro() == ERROR)
 800a1e0:	f000 f90e 	bl	800a400 <RTC_WaitForSynchro>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <RTC_DeInit+0x14a>
      {
        status = ERROR;
 800a1ea:	f04f 0300 	mov.w	r3, #0
 800a1ee:	73fb      	strb	r3, [r7, #15]
 800a1f0:	e002      	b.n	800a1f8 <RTC_DeInit+0x150>
      }
      else
      {
        status = SUCCESS;      
 800a1f2:	f04f 0301 	mov.w	r3, #1
 800a1f6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800a1f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a1fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a200:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a204:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a206:	7bfb      	ldrb	r3, [r7, #15]
}
 800a208:	4618      	mov	r0, r3
 800a20a:	f107 0710 	add.w	r7, r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop

0800a214 <RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized  
  */
ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = ERROR;
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
  assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
  assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a222:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a226:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a22a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a22e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a230:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a234:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a238:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a23c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a23e:	f000 f883 	bl	800a348 <RTC_EnterInitMode>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <RTC_Init+0x3c>
  {
    status = ERROR;
 800a248:	f04f 0300 	mov.w	r3, #0
 800a24c:	73fb      	strb	r3, [r7, #15]
 800a24e:	e033      	b.n	800a2b8 <RTC_Init+0xa4>
  } 
  else
  {
    /* Clear RTC CR FMT Bit */
    RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 800a250:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a254:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a258:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a25c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a260:	6892      	ldr	r2, [r2, #8]
 800a262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a266:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 800a268:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a26c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a270:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a274:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a278:	6891      	ldr	r1, [r2, #8]
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6812      	ldr	r2, [r2, #0]
 800a27e:	430a      	orrs	r2, r1
 800a280:	609a      	str	r2, [r3, #8]
  
    /* Configure the RTC PRER */
    RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 800a282:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a286:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	6892      	ldr	r2, [r2, #8]
 800a28e:	611a      	str	r2, [r3, #16]
    RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 800a290:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a294:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a298:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a29c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a2a0:	6911      	ldr	r1, [r2, #16]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	6852      	ldr	r2, [r2, #4]
 800a2a6:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a2ae:	f000 f895 	bl	800a3dc <RTC_ExitInitMode>

    status = SUCCESS;    
 800a2b2:	f04f 0301 	mov.w	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a2b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a2bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a2c0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a2c4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f107 0710 	add.w	r7, r7, #16
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
 800a2d2:	bf00      	nop

0800a2d4 <RTC_StructInit>:
  * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  /* Initialize the RTC_HourFormat member */
  RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f04f 0200 	mov.w	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
    
  /* Initialize the RTC_AsynchPrediv member */
  RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f04f 027f 	mov.w	r2, #127	; 0x7f
 800a2ea:	605a      	str	r2, [r3, #4]

  /* Initialize the RTC_SynchPrediv member */
  RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a2f2:	609a      	str	r2, [r3, #8]
}
 800a2f4:	f107 070c 	add.w	r7, r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bc80      	pop	{r7}
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop

0800a300 <RTC_WriteProtectionCmd>:
  * @param  NewState: new state of the write protection.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_WriteProtectionCmd(FunctionalState NewState)
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800a30a:	79fb      	ldrb	r3, [r7, #7]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d007      	beq.n	800a320 <RTC_WriteProtectionCmd+0x20>
  {
    /* Enable the write protection for RTC registers */
    RTC->WPR = 0xFF;   
 800a310:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a314:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a318:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a31c:	625a      	str	r2, [r3, #36]	; 0x24
 800a31e:	e00d      	b.n	800a33c <RTC_WriteProtectionCmd+0x3c>
  }
  else
  {
    /* Disable the write protection for RTC registers */
    RTC->WPR = 0xCA;
 800a320:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a324:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a328:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a32c:	625a      	str	r2, [r3, #36]	; 0x24
    RTC->WPR = 0x53;    
 800a32e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a332:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a336:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a33a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a33c:	f107 070c 	add.w	r7, r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	bc80      	pop	{r7}
 800a344:	4770      	bx	lr
 800a346:	bf00      	nop

0800a348 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode  
  */
ErrorStatus RTC_EnterInitMode(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
  __IO uint32_t initcounter = 0x00;
 800a34e:	f04f 0300 	mov.w	r3, #0
 800a352:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800a354:	f04f 0300 	mov.w	r3, #0
 800a358:	73fb      	strb	r3, [r7, #15]
  uint32_t initstatus = 0x00;
 800a35a:	f04f 0300 	mov.w	r3, #0
 800a35e:	60bb      	str	r3, [r7, #8]
     
  /* Check if the Initialization mode is set */
  if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a360:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a364:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d12a      	bne.n	800a3c8 <RTC_EnterInitMode+0x80>
  {
    /* Set the Initialization mode */
    RTC->ISR = (uint32_t)RTC_INIT_MASK;
 800a372:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a376:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a37a:	f04f 32ff 	mov.w	r2, #4294967295
 800a37e:	60da      	str	r2, [r3, #12]
    
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    do
    {
      initstatus = RTC->ISR & RTC_ISR_INITF;
 800a380:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a384:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	60bb      	str	r3, [r7, #8]
      initcounter++;  
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f103 0301 	add.w	r3, r3, #1
 800a396:	607b      	str	r3, [r7, #4]
    } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a39e:	d002      	beq.n	800a3a6 <RTC_EnterInitMode+0x5e>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d0ec      	beq.n	800a380 <RTC_EnterInitMode+0x38>
    
    if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 800a3a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a3aa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d003      	beq.n	800a3c0 <RTC_EnterInitMode+0x78>
    {
      status = SUCCESS;
 800a3b8:	f04f 0301 	mov.w	r3, #1
 800a3bc:	73fb      	strb	r3, [r7, #15]
 800a3be:	e006      	b.n	800a3ce <RTC_EnterInitMode+0x86>
    }
    else
    {
      status = ERROR;
 800a3c0:	f04f 0300 	mov.w	r3, #0
 800a3c4:	73fb      	strb	r3, [r7, #15]
 800a3c6:	e002      	b.n	800a3ce <RTC_EnterInitMode+0x86>
    }        
  }
  else
  {
    status = SUCCESS;  
 800a3c8:	f04f 0301 	mov.w	r3, #1
 800a3cc:	73fb      	strb	r3, [r7, #15]
  } 
    
  return (status);  
 800a3ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f107 0714 	add.w	r7, r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <RTC_ExitInitMode>:
  *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
  * @param  None
  * @retval None
  */
void RTC_ExitInitMode(void)
{ 
 800a3dc:	b480      	push	{r7}
 800a3de:	af00      	add	r7, sp, #0
  /* Exit Initialization mode */
  RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 800a3e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a3e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a3e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a3ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a3f0:	68d2      	ldr	r2, [r2, #12]
 800a3f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a3f6:	60da      	str	r2, [r3, #12]
}
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop

0800a400 <RTC_WaitForSynchro>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are synchronised
  *          - ERROR: RTC registers are not synchronised
  */
ErrorStatus RTC_WaitForSynchro(void)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
  __IO uint32_t synchrocounter = 0;
 800a406:	f04f 0300 	mov.w	r3, #0
 800a40a:	607b      	str	r3, [r7, #4]
  ErrorStatus status = ERROR;
 800a40c:	f04f 0300 	mov.w	r3, #0
 800a410:	73fb      	strb	r3, [r7, #15]
  uint32_t synchrostatus = 0x00;
 800a412:	f04f 0300 	mov.w	r3, #0
 800a416:	60bb      	str	r3, [r7, #8]

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a418:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a41c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a420:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a424:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a426:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a42a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a42e:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a432:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Clear RSF flag */
  RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 800a434:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a438:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a43c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a440:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a444:	68d2      	ldr	r2, [r2, #12]
 800a446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a44a:	60da      	str	r2, [r3, #12]
    
  /* Wait the registers to be synchronised */
  do
  {
    synchrostatus = RTC->ISR & RTC_ISR_RSF;
 800a44c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a450:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	f003 0320 	and.w	r3, r3, #32
 800a45a:	60bb      	str	r3, [r7, #8]
    synchrocounter++;  
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f103 0301 	add.w	r3, r3, #1
 800a462:	607b      	str	r3, [r7, #4]
  } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a46a:	d002      	beq.n	800a472 <RTC_WaitForSynchro+0x72>
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d0ec      	beq.n	800a44c <RTC_WaitForSynchro+0x4c>
    
  if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 800a472:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a476:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	f003 0320 	and.w	r3, r3, #32
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <RTC_WaitForSynchro+0x8c>
  {
    status = SUCCESS;
 800a484:	f04f 0301 	mov.w	r3, #1
 800a488:	73fb      	strb	r3, [r7, #15]
 800a48a:	e002      	b.n	800a492 <RTC_WaitForSynchro+0x92>
  }
  else
  {
    status = ERROR;
 800a48c:	f04f 0300 	mov.w	r3, #0
 800a490:	73fb      	strb	r3, [r7, #15]
  }        

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a492:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a496:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a49a:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a49e:	625a      	str	r2, [r3, #36]	; 0x24
    
  return (status); 
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f107 0714 	add.w	r7, r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bc80      	pop	{r7}
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop

0800a4b0 <RTC_RefClockCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC reference clock detection is enabled
  *          - ERROR: RTC reference clock detection is disabled  
  */
ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
{ 
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800a4ba:	f04f 0300 	mov.w	r3, #0
 800a4be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a4c0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a4c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a4c8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a4cc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a4ce:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a4d2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a4d6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a4da:	625a      	str	r2, [r3, #36]	; 0x24
    
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a4dc:	f7ff ff34 	bl	800a348 <RTC_EnterInitMode>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d103      	bne.n	800a4ee <RTC_RefClockCmd+0x3e>
  {
    status = ERROR;
 800a4e6:	f04f 0300 	mov.w	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]
 800a4ec:	e020      	b.n	800a530 <RTC_RefClockCmd+0x80>
  } 
  else
  {  
    if (NewState != DISABLE)
 800a4ee:	79fb      	ldrb	r3, [r7, #7]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00c      	beq.n	800a50e <RTC_RefClockCmd+0x5e>
    {
      /* Enable the RTC reference clock detection */
      RTC->CR |= RTC_CR_REFCKON;   
 800a4f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a4f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a4fc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a500:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a504:	6892      	ldr	r2, [r2, #8]
 800a506:	f042 0210 	orr.w	r2, r2, #16
 800a50a:	609a      	str	r2, [r3, #8]
 800a50c:	e00b      	b.n	800a526 <RTC_RefClockCmd+0x76>
    }
    else
    {
      /* Disable the RTC reference clock detection */
      RTC->CR &= ~RTC_CR_REFCKON;    
 800a50e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a512:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a516:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a51a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a51e:	6892      	ldr	r2, [r2, #8]
 800a520:	f022 0210 	bic.w	r2, r2, #16
 800a524:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800a526:	f7ff ff59 	bl	800a3dc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800a52a:	f04f 0301 	mov.w	r3, #1
 800a52e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;  
 800a530:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a534:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a538:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a53c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status; 
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a540:	4618      	mov	r0, r3
 800a542:	f107 0710 	add.w	r7, r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop

0800a54c <RTC_BypassShadowCmd>:
  * @param  NewState: new state of the Bypass Shadow feature.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
*/
void RTC_BypassShadowCmd(FunctionalState NewState)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	4603      	mov	r3, r0
 800a554:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a556:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a55a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a55e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a562:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a564:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a568:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a56c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a570:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d00c      	beq.n	800a592 <RTC_BypassShadowCmd+0x46>
  {
    /* Set the BYPSHAD bit */
    RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800a578:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a57c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a580:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a584:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a588:	6892      	ldr	r2, [r2, #8]
 800a58a:	f042 0220 	orr.w	r2, r2, #32
 800a58e:	609a      	str	r2, [r3, #8]
 800a590:	e00b      	b.n	800a5aa <RTC_BypassShadowCmd+0x5e>
  }
  else
  {
    /* Reset the BYPSHAD bit */
    RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 800a592:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a596:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a59a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a59e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a5a2:	6892      	ldr	r2, [r2, #8]
 800a5a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800a5a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800a5aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a5ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a5b2:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a5b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a5b8:	f107 070c 	add.w	r7, r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop

0800a5c4 <RTC_SetTime>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Time register is configured
  *          - ERROR: RTC Time register is not configured
  */
ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800a5c4:	b590      	push	{r4, r7, lr}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a5ce:	f04f 0300 	mov.w	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800a5d4:	f04f 0300 	mov.w	r3, #0
 800a5d8:	72fb      	strb	r3, [r7, #11]
    
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  if (RTC_Format == RTC_Format_BIN)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10d      	bne.n	800a5fc <RTC_SetTime+0x38>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a5e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d119      	bne.n	800a626 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	f04f 0200 	mov.w	r2, #0
 800a5f8:	70da      	strb	r2, [r3, #3]
 800a5fa:	e014      	b.n	800a626 <RTC_SetTime+0x62>
    assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
    assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a5fc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a600:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d007      	beq.n	800a61e <RTC_SetTime+0x5a>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	781b      	ldrb	r3, [r3, #0]
 800a612:	4618      	mov	r0, r3
 800a614:	f001 fb1a 	bl	800bc4c <RTC_Bcd2ToByte>
 800a618:	4603      	mov	r3, r0
 800a61a:	60fb      	str	r3, [r7, #12]
 800a61c:	e003      	b.n	800a626 <RTC_SetTime+0x62>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
    } 
    else
    {
      RTC_TimeStruct->RTC_H12 = 0x00;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	f04f 0200 	mov.w	r2, #0
 800a624:	70da      	strb	r2, [r3, #3]
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d012      	beq.n	800a652 <RTC_SetTime+0x8e>
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	ea4f 4203 	mov.w	r2, r3, lsl #16
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	785b      	ldrb	r3, [r3, #1]
 800a638:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a63c:	431a      	orrs	r2, r3
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	789b      	ldrb	r3, [r3, #2]
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
             ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a642:	431a      	orrs	r2, r3
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	78db      	ldrb	r3, [r3, #3]
 800a648:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }
  
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a64c:	4313      	orrs	r3, r2
 800a64e:	60fb      	str	r3, [r7, #12]
 800a650:	e01e      	b.n	800a690 <RTC_SetTime+0xcc>
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fad6 	bl	800bc08 <RTC_ByteToBcd2>
 800a65c:	4603      	mov	r3, r0
 800a65e:	ea4f 4403 	mov.w	r4, r3, lsl #16
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	785b      	ldrb	r3, [r3, #1]
 800a666:	4618      	mov	r0, r3
 800a668:	f001 face 	bl	800bc08 <RTC_ByteToBcd2>
 800a66c:	4603      	mov	r3, r0
 800a66e:	ea4f 2303 	mov.w	r3, r3, lsl #8
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a672:	431c      	orrs	r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	789b      	ldrb	r3, [r3, #2]
 800a678:	4618      	mov	r0, r3
 800a67a:	f001 fac5 	bl	800bc08 <RTC_ByteToBcd2>
 800a67e:	4603      	mov	r3, r0
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 800a680:	ea44 0203 	orr.w	r2, r4, r3
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	78db      	ldrb	r3, [r3, #3]
 800a688:	ea4f 4303 	mov.w	r3, r3, lsl #16
             ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
             ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
  }  
  else
  {
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
                   ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
                   (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
  }  

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a690:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a694:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a698:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a69c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a69e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a6a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a6a6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a6aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a6ac:	f7ff fe4c 	bl	800a348 <RTC_EnterInitMode>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d103      	bne.n	800a6be <RTC_SetTime+0xfa>
  {
    status = ERROR;
 800a6b6:	f04f 0300 	mov.w	r3, #0
 800a6ba:	72fb      	strb	r3, [r7, #11]
 800a6bc:	e018      	b.n	800a6f0 <RTC_SetTime+0x12c>
  } 
  else
  {
    /* Set the RTC_TR register */
    RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a6be:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a6c2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800a6c6:	68f9      	ldr	r1, [r7, #12]
 800a6c8:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800a6cc:	f2c0 037f 	movt	r3, #127	; 0x7f
 800a6d0:	400b      	ands	r3, r1
 800a6d2:	6013      	str	r3, [r2, #0]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800a6d4:	f7ff fe82 	bl	800a3dc <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800a6d8:	f7ff fe92 	bl	800a400 <RTC_WaitForSynchro>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d103      	bne.n	800a6ea <RTC_SetTime+0x126>
    {
      status = ERROR;
 800a6e2:	f04f 0300 	mov.w	r3, #0
 800a6e6:	72fb      	strb	r3, [r7, #11]
 800a6e8:	e002      	b.n	800a6f0 <RTC_SetTime+0x12c>
    }
    else
    {
      status = SUCCESS;
 800a6ea:	f04f 0301 	mov.w	r3, #1
 800a6ee:	72fb      	strb	r3, [r7, #11]
    }
  
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800a6f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a6f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a6f8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a6fc:	625a      	str	r2, [r3, #36]	; 0x24
    
  return status;
 800a6fe:	7afb      	ldrb	r3, [r7, #11]
}
 800a700:	4618      	mov	r0, r3
 800a702:	f107 0714 	add.w	r7, r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	bd90      	pop	{r4, r7, pc}
 800a70a:	bf00      	nop

0800a70c <RTC_TimeStructInit>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Time = 00h:00min:00sec */
  RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f04f 0200 	mov.w	r2, #0
 800a71a:	70da      	strb	r2, [r3, #3]
  RTC_TimeStruct->RTC_Hours = 0;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f04f 0200 	mov.w	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = 0;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f04f 0200 	mov.w	r2, #0
 800a72a:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = 0; 
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f04f 0200 	mov.w	r2, #0
 800a732:	709a      	strb	r2, [r3, #2]
}
 800a734:	f107 070c 	add.w	r7, r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	bc80      	pop	{r7}
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop

0800a740 <RTC_GetTime>:
  * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
  *                        contain the returned current time configuration.     
  * @retval None
  */
void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a74a:	f04f 0300 	mov.w	r3, #0
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 800a750:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a754:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800a75e:	f2c0 037f 	movt	r3, #127	; 0x7f
 800a762:	4013      	ands	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]
  
  /* Fill the structure fields with the read parameters */
  RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800a76c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a770:	b2da      	uxtb	r2, r3
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	701a      	strb	r2, [r3, #0]
  RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800a77c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a780:	b2da      	uxtb	r2, r3
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	705a      	strb	r2, [r3, #1]
  RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a78e:	b2da      	uxtb	r2, r3
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	709a      	strb	r2, [r3, #2]
  RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a79a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d11a      	bne.n	800a7e0 <RTC_GetTime+0xa0>
  {
    /* Convert the structure parameters to Binary format */
    RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	781b      	ldrb	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 fa4c 	bl	800bc4c <RTC_Bcd2ToByte>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	701a      	strb	r2, [r3, #0]
    RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f001 fa43 	bl	800bc4c <RTC_Bcd2ToByte>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	705a      	strb	r2, [r3, #1]
    RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	789b      	ldrb	r3, [r3, #2]
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 fa3a 	bl	800bc4c <RTC_Bcd2ToByte>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	461a      	mov	r2, r3
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	709a      	strb	r2, [r3, #2]
  }
}
 800a7e0:	f107 0710 	add.w	r7, r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <RTC_GetSubSecond>:
  *         SSR register.
  * @param  None
  * @retval RTC current Calendar Subseconds value.
  */
uint32_t RTC_GetSubSecond(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0;
 800a7ee:	f04f 0300 	mov.w	r3, #0
 800a7f2:	607b      	str	r3, [r7, #4]
  
  /* Get subseconds values from the correspondent registers*/
  tmpreg = (uint32_t)(RTC->SSR);
 800a7f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a7f8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a7fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fe:	607b      	str	r3, [r7, #4]
  
  /* Read DR register to unfroze calendar registers */
  (void) (RTC->DR);
 800a800:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a804:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a808:	685b      	ldr	r3, [r3, #4]
  
  return (tmpreg);
 800a80a:	687b      	ldr	r3, [r7, #4]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	f107 070c 	add.w	r7, r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	bc80      	pop	{r7}
 800a816:	4770      	bx	lr

0800a818 <RTC_SetDate>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Date register is configured
  *          - ERROR: RTC Date register is not configured
  */
ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800a818:	b590      	push	{r4, r7, lr}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = ERROR;
 800a828:	f04f 0300 	mov.w	r3, #0
 800a82c:	72fb      	strb	r3, [r7, #11]
  
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d10f      	bne.n	800a854 <RTC_SetDate+0x3c>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	f003 0310 	and.w	r3, r3, #16
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d009      	beq.n	800a854 <RTC_SetDate+0x3c>
  {
    RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	785b      	ldrb	r3, [r3, #1]
 800a844:	f023 0310 	bic.w	r3, r3, #16
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	f103 030a 	add.w	r3, r3, #10
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	705a      	strb	r2, [r3, #1]
  }  
  if (RTC_Format == RTC_Format_BIN)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00d      	beq.n	800a876 <RTC_SetDate+0x5e>
    assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
  }
  else
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	785b      	ldrb	r3, [r3, #1]
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 f9f4 	bl	800bc4c <RTC_Bcd2ToByte>
 800a864:	4603      	mov	r3, r0
 800a866:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_MONTH(tmpreg));
    tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	789b      	ldrb	r3, [r3, #2]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f001 f9ed 	bl	800bc4c <RTC_Bcd2ToByte>
 800a872:	4603      	mov	r3, r0
 800a874:	60fb      	str	r3, [r7, #12]
    assert_param(IS_RTC_DATE(tmpreg));
  }
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d012      	beq.n	800a8a2 <RTC_SetDate+0x8a>
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	78db      	ldrb	r3, [r3, #3]
 800a880:	ea4f 4203 	mov.w	r2, r3, lsl #16
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	785b      	ldrb	r3, [r3, #1]
 800a888:	ea4f 2303 	mov.w	r3, r3, lsl #8
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800a88c:	431a      	orrs	r2, r3
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
              (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 800a892:	431a      	orrs	r2, r3
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	ea4f 3343 	mov.w	r3, r3, lsl #13
  assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 800a89c:	4313      	orrs	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
 800a8a0:	e01e      	b.n	800a8e0 <RTC_SetDate+0xc8>
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	78db      	ldrb	r3, [r3, #3]
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 f9ae 	bl	800bc08 <RTC_ByteToBcd2>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	785b      	ldrb	r3, [r3, #1]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f001 f9a6 	bl	800bc08 <RTC_ByteToBcd2>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a8c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	789b      	ldrb	r3, [r3, #2]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 f99d 	bl	800bc08 <RTC_ByteToBcd2>
 800a8ce:	4603      	mov	r3, r0
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 800a8d0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	ea4f 3343 	mov.w	r3, r3, lsl #13
              ((uint32_t)RTC_DateStruct->RTC_Date) | \
              (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]
              ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
              ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800a8e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8e8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800a8ec:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800a8ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a8f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a8f6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800a8fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800a8fc:	f7ff fd24 	bl	800a348 <RTC_EnterInitMode>
 800a900:	4603      	mov	r3, r0
 800a902:	2b00      	cmp	r3, #0
 800a904:	d103      	bne.n	800a90e <RTC_SetDate+0xf6>
  {
    status = ERROR;
 800a906:	f04f 0300 	mov.w	r3, #0
 800a90a:	72fb      	strb	r3, [r7, #11]
 800a90c:	e017      	b.n	800a93e <RTC_SetDate+0x126>
  } 
  else
  {
    /* Set the RTC_DR register */
    RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 800a90e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a912:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800a91c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800a920:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    RTC_ExitInitMode(); 
 800a922:	f7ff fd5b 	bl	800a3dc <RTC_ExitInitMode>

    if(RTC_WaitForSynchro() == ERROR)
 800a926:	f7ff fd6b 	bl	800a400 <RTC_WaitForSynchro>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d103      	bne.n	800a938 <RTC_SetDate+0x120>
    {
      status = ERROR;
 800a930:	f04f 0300 	mov.w	r3, #0
 800a934:	72fb      	strb	r3, [r7, #11]
 800a936:	e002      	b.n	800a93e <RTC_SetDate+0x126>
    }
    else
    {
      status = SUCCESS;
 800a938:	f04f 0301 	mov.w	r3, #1
 800a93c:	72fb      	strb	r3, [r7, #11]
    }
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800a93e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a942:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a946:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800a94a:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800a94c:	7afb      	ldrb	r3, [r7, #11]
}
 800a94e:	4618      	mov	r0, r3
 800a950:	f107 0714 	add.w	r7, r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	bd90      	pop	{r4, r7, pc}

0800a958 <RTC_DateStructInit>:
  * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
  *         initialized.
  * @retval None
  */
void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* Monday, January 01 xx00 */
  RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f04f 0201 	mov.w	r2, #1
 800a966:	701a      	strb	r2, [r3, #0]
  RTC_DateStruct->RTC_Date = 1;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f04f 0201 	mov.w	r2, #1
 800a96e:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_Month = RTC_Month_January;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f04f 0201 	mov.w	r2, #1
 800a976:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Year = 0;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	70da      	strb	r2, [r3, #3]
}
 800a980:	f107 070c 	add.w	r7, r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	bc80      	pop	{r7}
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop

0800a98c <RTC_GetDate>:
  * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
  *                        contain the returned current date configuration.     
  * @retval None
  */
void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a996:	f04f 0300 	mov.w	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  
  /* Get the RTC_TR register */
  tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 800a99c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800a9a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9aa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Fill the structure fields with the read parameters */
  RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a9b6:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800a9ba:	b2da      	uxtb	r2, r3
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	70da      	strb	r2, [r3, #3]
  RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800a9c6:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	705a      	strb	r2, [r3, #1]
  RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9d8:	b2da      	uxtb	r2, r3
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	709a      	strb	r2, [r3, #2]
  RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a9e4:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d11a      	bne.n	800aa2a <RTC_GetDate+0x9e>
  {
    /* Convert the structure parameters to Binary format */
    RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	78db      	ldrb	r3, [r3, #3]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f001 f927 	bl	800bc4c <RTC_Bcd2ToByte>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	461a      	mov	r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	70da      	strb	r2, [r3, #3]
    RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	785b      	ldrb	r3, [r3, #1]
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f001 f91e 	bl	800bc4c <RTC_Bcd2ToByte>
 800aa10:	4603      	mov	r3, r0
 800aa12:	461a      	mov	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	705a      	strb	r2, [r3, #1]
    RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	789b      	ldrb	r3, [r3, #2]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f001 f915 	bl	800bc4c <RTC_Bcd2ToByte>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	709a      	strb	r2, [r3, #2]
  }
}
 800aa2a:	f107 0710 	add.w	r7, r7, #16
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop

0800aa34 <RTC_SetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
  *                          contains the alarm configuration parameters.     
  * @retval None
  */
void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800aa34:	b590      	push	{r4, r7, lr}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	60f8      	str	r0, [r7, #12]
 800aa3c:	60b9      	str	r1, [r7, #8]
 800aa3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800aa40:	f04f 0300 	mov.w	r3, #0
 800aa44:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));

  if (RTC_Format == RTC_Format_BIN)
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d10d      	bne.n	800aa68 <RTC_SetAlarm+0x34>
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d12c      	bne.n	800aab8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f04f 0200 	mov.w	r2, #0
 800aa64:	70da      	strb	r2, [r3, #3]
 800aa66:	e027      	b.n	800aab8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
    }
  }
  else
  {
    if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aa6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d007      	beq.n	800aa8a <RTC_SetAlarm+0x56>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f001 f8e4 	bl	800bc4c <RTC_Bcd2ToByte>
 800aa84:	4603      	mov	r3, r0
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e003      	b.n	800aa92 <RTC_SetAlarm+0x5e>
      assert_param(IS_RTC_HOUR12(tmpreg));
      assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
    } 
    else
    {
      RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f04f 0200 	mov.w	r2, #0
 800aa90:	70da      	strb	r2, [r3, #3]
    }
    
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
    
    if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d107      	bne.n	800aaaa <RTC_SetAlarm+0x76>
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	7b1b      	ldrb	r3, [r3, #12]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f001 f8d4 	bl	800bc4c <RTC_Bcd2ToByte>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	e006      	b.n	800aab8 <RTC_SetAlarm+0x84>
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
    }
    else
    {
      tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	7b1b      	ldrb	r3, [r3, #12]
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 f8cc 	bl	800bc4c <RTC_Bcd2ToByte>
 800aab4:	4603      	mov	r3, r0
 800aab6:	617b      	str	r3, [r7, #20]
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
    }    
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d01d      	beq.n	800aafa <RTC_SetAlarm+0xc6>
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	ea4f 4203 	mov.w	r2, r3, lsl #16
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	785b      	ldrb	r3, [r3, #1]
 800aaca:	ea4f 2303 	mov.w	r3, r3, lsl #8
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800aace:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	789b      	ldrb	r3, [r3, #2]

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800aad4:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	78db      	ldrb	r3, [r3, #3]
 800aada:	ea4f 4303 	mov.w	r3, r3, lsl #16
  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 800aade:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	7b1b      	ldrb	r3, [r3, #12]
 800aae4:	ea4f 6303 	mov.w	r3, r3, lsl #24
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800aae8:	431a      	orrs	r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800aaee:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
  }

  /* Check the input parameters format */
  if (RTC_Format != RTC_Format_BIN)
  {
    tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e02f      	b.n	800ab5a <RTC_SetAlarm+0x126>
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 f882 	bl	800bc08 <RTC_ByteToBcd2>
 800ab04:	4603      	mov	r3, r0
 800ab06:	ea4f 4403 	mov.w	r4, r3, lsl #16
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	785b      	ldrb	r3, [r3, #1]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f001 f87a 	bl	800bc08 <RTC_ByteToBcd2>
 800ab14:	4603      	mov	r3, r0
 800ab16:	ea4f 2303 	mov.w	r3, r3, lsl #8
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800ab1a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	789b      	ldrb	r3, [r3, #2]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f001 f871 	bl	800bc08 <RTC_ByteToBcd2>
 800ab26:	4603      	mov	r3, r0
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 800ab28:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	78db      	ldrb	r3, [r3, #3]
 800ab30:	ea4f 4303 	mov.w	r3, r3, lsl #16
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 800ab34:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7b1b      	ldrb	r3, [r3, #12]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 f863 	bl	800bc08 <RTC_ByteToBcd2>
 800ab42:	4603      	mov	r3, r0
 800ab44:	ea4f 6303 	mov.w	r3, r3, lsl #24
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 800ab48:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	689b      	ldr	r3, [r3, #8]
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
              ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
              ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 800ab50:	431a      	orrs	r2, r3
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	685b      	ldr	r3, [r3, #4]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  }  
  else
  {
    tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 800ab56:	4313      	orrs	r3, r2
 800ab58:	617b      	str	r3, [r7, #20]
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
              ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
  } 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ab5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab62:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ab66:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ab68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab6c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab70:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ab74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (RTC_Alarm == RTC_Alarm_A)
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab7c:	d106      	bne.n	800ab8c <RTC_SetAlarm+0x158>
  {
    RTC->ALRMAR = (uint32_t)tmpreg;
 800ab7e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab82:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	61da      	str	r2, [r3, #28]
 800ab8a:	e005      	b.n	800ab98 <RTC_SetAlarm+0x164>
  }
  else
  {
    RTC->ALRMBR = (uint32_t)tmpreg;
 800ab8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	621a      	str	r2, [r3, #32]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;   
 800ab98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ab9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aba0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800aba4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aba6:	f107 071c 	add.w	r7, r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd90      	pop	{r4, r7, pc}
 800abae:	bf00      	nop

0800abb0 <RTC_AlarmStructInit>:
  * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b083      	sub	sp, #12
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  /* Alarm Time Settings : Time = 00h:00mn:00sec */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f04f 0200 	mov.w	r2, #0
 800abc6:	701a      	strb	r2, [r3, #0]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f04f 0200 	mov.w	r2, #0
 800abce:	705a      	strb	r2, [r3, #1]
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f04f 0200 	mov.w	r2, #0
 800abd6:	709a      	strb	r2, [r3, #2]

  /* Alarm Date Settings : Date = 1st day of the month */
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f04f 0200 	mov.w	r2, #0
 800abde:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f04f 0201 	mov.w	r2, #1
 800abe6:	731a      	strb	r2, [r3, #12]

  /* Alarm Masks Settings : Mask =  all fields are not masked */
  RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f04f 0200 	mov.w	r2, #0
 800abee:	605a      	str	r2, [r3, #4]
}
 800abf0:	f107 070c 	add.w	r7, r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bc80      	pop	{r7}
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop

0800abfc <RTC_GetAlarm>:
  * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
  *                          contains the output alarm configuration values.     
  * @retval None
  */
void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	60b9      	str	r1, [r7, #8]
 800ac06:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800ac08:	f04f 0300 	mov.w	r3, #0
 800ac0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));
  assert_param(IS_RTC_ALARM(RTC_Alarm)); 

  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac14:	d106      	bne.n	800ac24 <RTC_GetAlarm+0x28>
  {
    tmpreg = (uint32_t)(RTC->ALRMAR);
 800ac16:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ac1e:	69db      	ldr	r3, [r3, #28]
 800ac20:	617b      	str	r3, [r7, #20]
 800ac22:	e005      	b.n	800ac30 <RTC_GetAlarm+0x34>
  }
  else
  {
    tmpreg = (uint32_t)(RTC->ALRMBR);
 800ac24:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ac28:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	617b      	str	r3, [r7, #20]
  }

  /* Fill the structure with the read parameters */
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ac36:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ac3a:	b2da      	uxtb	r2, r3
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	701a      	strb	r2, [r3, #0]
                                                     RTC_ALRMAR_HU)) >> 16);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800ac46:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ac4a:	b2da      	uxtb	r2, r3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	705a      	strb	r2, [r3, #1]
                                                     RTC_ALRMAR_MNU)) >> 8);
  RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	709a      	strb	r2, [r3, #2]
                                                     RTC_ALRMAR_SU));
  RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac64:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800ac68:	b2da      	uxtb	r2, r3
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	70da      	strb	r2, [r3, #3]
  RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 24);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800ac74:	ea4f 6313 	mov.w	r3, r3, lsr #24
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	731a      	strb	r2, [r3, #12]
  RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	609a      	str	r2, [r3, #8]
  RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	605a      	str	r2, [r3, #4]

  if (RTC_Format == RTC_Format_BIN)
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d123      	bne.n	800ace0 <RTC_GetAlarm+0xe4>
  {
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 ffd5 	bl	800bc4c <RTC_Bcd2ToByte>
 800aca2:	4603      	mov	r3, r0
 800aca4:	461a      	mov	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	701a      	strb	r2, [r3, #0]
                                                        RTC_AlarmTime.RTC_Hours);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	785b      	ldrb	r3, [r3, #1]
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 ffcc 	bl	800bc4c <RTC_Bcd2ToByte>
 800acb4:	4603      	mov	r3, r0
 800acb6:	461a      	mov	r2, r3
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	705a      	strb	r2, [r3, #1]
                                                        RTC_AlarmTime.RTC_Minutes);
    RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	789b      	ldrb	r3, [r3, #2]
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 ffc3 	bl	800bc4c <RTC_Bcd2ToByte>
 800acc6:	4603      	mov	r3, r0
 800acc8:	461a      	mov	r2, r3
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	709a      	strb	r2, [r3, #2]
                                                        RTC_AlarmTime.RTC_Seconds);
    RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	7b1b      	ldrb	r3, [r3, #12]
 800acd2:	4618      	mov	r0, r3
 800acd4:	f000 ffba 	bl	800bc4c <RTC_Bcd2ToByte>
 800acd8:	4603      	mov	r3, r0
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	731a      	strb	r2, [r3, #12]
  }  
}
 800ace0:	f107 0718 	add.w	r7, r7, #24
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <RTC_AlarmCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Alarm is enabled/disabled
  *          - ERROR: RTC Alarm is not enabled/disabled  
  */
ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
{
 800ace8:	b480      	push	{r7}
 800acea:	b087      	sub	sp, #28
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	460b      	mov	r3, r1
 800acf2:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t alarmcounter = 0x00;
 800acf4:	f04f 0300 	mov.w	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
  uint32_t alarmstatus = 0x00;
 800acfa:	f04f 0300 	mov.w	r3, #0
 800acfe:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ad06:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad0a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad0e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800ad12:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800ad14:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad18:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad1c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ad20:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm state */
  if (NewState != DISABLE)
 800ad22:	78fb      	ldrb	r3, [r7, #3]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00f      	beq.n	800ad48 <RTC_AlarmCmd+0x60>
  {
    RTC->CR |= (uint32_t)RTC_Alarm;
 800ad28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad34:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ad38:	6891      	ldr	r1, [r2, #8]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	609a      	str	r2, [r3, #8]

    status = SUCCESS;    
 800ad40:	f04f 0301 	mov.w	r3, #1
 800ad44:	75fb      	strb	r3, [r7, #23]
 800ad46:	e034      	b.n	800adb2 <RTC_AlarmCmd+0xca>
  }
  else
  { 
    /* Disable the Alarm in RTC_CR register */
    RTC->CR &= (uint32_t)~RTC_Alarm;
 800ad48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad50:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ad54:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ad58:	6891      	ldr	r1, [r2, #8]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	ea6f 0202 	mvn.w	r2, r2
 800ad60:	400a      	ands	r2, r1
 800ad62:	609a      	str	r2, [r3, #8]
   
    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    do
    {
      alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 800ad64:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad68:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad6c:	68da      	ldr	r2, [r3, #12]
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ad74:	4013      	ands	r3, r2
 800ad76:	613b      	str	r3, [r7, #16]
      alarmcounter++;  
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f103 0301 	add.w	r3, r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
    } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad86:	d002      	beq.n	800ad8e <RTC_AlarmCmd+0xa6>
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d0ea      	beq.n	800ad64 <RTC_AlarmCmd+0x7c>
    
    if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 800ad8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ad92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800ad9e:	4013      	ands	r3, r2
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d103      	bne.n	800adac <RTC_AlarmCmd+0xc4>
    {
      status = ERROR;
 800ada4:	f04f 0300 	mov.w	r3, #0
 800ada8:	75fb      	strb	r3, [r7, #23]
 800adaa:	e002      	b.n	800adb2 <RTC_AlarmCmd+0xca>
    } 
    else
    {
      status = SUCCESS;
 800adac:	f04f 0301 	mov.w	r3, #1
 800adb0:	75fb      	strb	r3, [r7, #23]
    }        
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800adb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800adb6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800adba:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800adbe:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	f107 071c 	add.w	r7, r7, #28
 800adc8:	46bd      	mov	sp, r7
 800adca:	bc80      	pop	{r7}
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop

0800add0 <RTC_AlarmSubSecondConfig>:
  *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
  *                                          to activate alarm
  * @retval None
  */
void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_AlarmSubSecondMask)
{
 800add0:	b480      	push	{r7}
 800add2:	b087      	sub	sp, #28
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800addc:	f04f 0300 	mov.w	r3, #0
 800ade0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM(RTC_Alarm));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ade2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ade6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800adea:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800adee:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800adf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800adf4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800adf8:	f04f 0253 	mov.w	r2, #83	; 0x53
 800adfc:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Alarm A or Alarm B SubSecond registers */
  tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	4313      	orrs	r3, r2
 800ae04:	617b      	str	r3, [r7, #20]
  
  if (RTC_Alarm == RTC_Alarm_A)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae0c:	d106      	bne.n	800ae1c <RTC_AlarmSubSecondConfig+0x4c>
  {
    /* Configure the AlarmA SubSecond register */
    RTC->ALRMASSR = tmpreg;
 800ae0e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae12:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	645a      	str	r2, [r3, #68]	; 0x44
 800ae1a:	e005      	b.n	800ae28 <RTC_AlarmSubSecondConfig+0x58>
  }
  else
  {
    /* Configure the Alarm B SubSecond register */
    RTC->ALRMBSSR = tmpreg;
 800ae1c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae20:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800ae28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae30:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ae34:	625a      	str	r2, [r3, #36]	; 0x24

}
 800ae36:	f107 071c 	add.w	r7, r7, #28
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	bc80      	pop	{r7}
 800ae3e:	4770      	bx	lr

0800ae40 <RTC_GetAlarmSubSecond>:
  *     @arg RTC_Alarm_B: to select Alarm B
  * @param  None
  * @retval RTC Alarm Subseconds value.
  */
uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b085      	sub	sp, #20
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800ae48:	f04f 0300 	mov.w	r3, #0
 800ae4c:	60fb      	str	r3, [r7, #12]
  
  /* Get the RTC_ALRMxR register */
  if (RTC_Alarm == RTC_Alarm_A)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae54:	d10a      	bne.n	800ae6c <RTC_GetAlarmSubSecond+0x2c>
  {
    tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 800ae56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae60:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800ae64:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800ae68:	60fb      	str	r3, [r7, #12]
 800ae6a:	e009      	b.n	800ae80 <RTC_GetAlarmSubSecond+0x40>
  }
  else
  {
    tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 800ae6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ae74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae76:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800ae7a:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800ae7e:	60fb      	str	r3, [r7, #12]
  } 
  
  return (tmpreg);
 800ae80:	68fb      	ldr	r3, [r7, #12]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	f107 0714 	add.w	r7, r7, #20
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	bc80      	pop	{r7}
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop

0800ae90 <RTC_WakeUpClockConfig>:
  *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
  *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
  * @retval None
  */
void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800ae98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ae9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aea0:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800aea4:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800aea6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aeaa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aeae:	f04f 0253 	mov.w	r2, #83	; 0x53
 800aeb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the Wakeup Timer clock source bits in CR register */
  RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800aeb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aeb8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aebc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aec0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aec4:	6892      	ldr	r2, [r2, #8]
 800aec6:	f022 0207 	bic.w	r2, r2, #7
 800aeca:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  RTC->CR |= (uint32_t)RTC_WakeUpClock;
 800aecc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aed0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aed4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800aed8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800aedc:	6891      	ldr	r1, [r2, #8]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	430a      	orrs	r2, r1
 800aee2:	609a      	str	r2, [r3, #8]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800aee4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800aee8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800aeec:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800aef0:	625a      	str	r2, [r3, #36]	; 0x24
}
 800aef2:	f107 070c 	add.w	r7, r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bc80      	pop	{r7}
 800aefa:	4770      	bx	lr

0800aefc <RTC_SetWakeUpCounter>:
  * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
  *          This parameter can be a value from 0x0000 to 0xFFFF. 
  * @retval None
  */
void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800af04:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af08:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af0c:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800af10:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800af12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af1a:	f04f 0253 	mov.w	r2, #83	; 0x53
 800af1e:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Configure the Wakeup Timer counter */
  RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 800af20:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af24:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	615a      	str	r2, [r3, #20]
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800af2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af30:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af34:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800af38:	625a      	str	r2, [r3, #36]	; 0x24
}
 800af3a:	f107 070c 	add.w	r7, r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	bc80      	pop	{r7}
 800af42:	4770      	bx	lr

0800af44 <RTC_GetWakeUpCounter>:
  * @brief  Returns the RTC WakeUp timer counter value.
  * @param  None
  * @retval The RTC WakeUp Counter value.
  */
uint32_t RTC_GetWakeUpCounter(void)
{
 800af44:	b480      	push	{r7}
 800af46:	af00      	add	r7, sp, #0
  /* Get the counter value */
  return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 800af48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af4c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800af56:	ea4f 4313 	mov.w	r3, r3, lsr #16
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bc80      	pop	{r7}
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop

0800af64 <RTC_WakeUpCmd>:
  * @param  NewState: new state of the WakeUp timer.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
{
 800af64:	b480      	push	{r7}
 800af66:	b087      	sub	sp, #28
 800af68:	af00      	add	r7, sp, #0
 800af6a:	4603      	mov	r3, r0
 800af6c:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t wutcounter = 0x00;
 800af6e:	f04f 0300 	mov.w	r3, #0
 800af72:	60fb      	str	r3, [r7, #12]
  uint32_t wutwfstatus = 0x00;
 800af74:	f04f 0300 	mov.w	r3, #0
 800af78:	613b      	str	r3, [r7, #16]
  ErrorStatus status = ERROR;
 800af7a:	f04f 0300 	mov.w	r3, #0
 800af7e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800af80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af84:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af88:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800af8c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800af8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800af92:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800af96:	f04f 0253 	mov.w	r2, #83	; 0x53
 800af9a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800af9c:	79fb      	ldrb	r3, [r7, #7]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00f      	beq.n	800afc2 <RTC_WakeUpCmd+0x5e>
  {
    /* Enable the Wakeup Timer */
    RTC->CR |= (uint32_t)RTC_CR_WUTE;
 800afa2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afa6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afaa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800afae:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800afb2:	6892      	ldr	r2, [r2, #8]
 800afb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800afb8:	609a      	str	r2, [r3, #8]
    status = SUCCESS;    
 800afba:	f04f 0301 	mov.w	r3, #1
 800afbe:	75fb      	strb	r3, [r7, #23]
 800afc0:	e02e      	b.n	800b020 <RTC_WakeUpCmd+0xbc>
  }
  else
  {
    /* Disable the Wakeup Timer */
    RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 800afc2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afc6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afca:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800afce:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800afd2:	6892      	ldr	r2, [r2, #8]
 800afd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afd8:	609a      	str	r2, [r3, #8]
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    do
    {
      wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 800afda:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800afde:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f003 0304 	and.w	r3, r3, #4
 800afe8:	613b      	str	r3, [r7, #16]
      wutcounter++;  
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	f103 0301 	add.w	r3, r3, #1
 800aff0:	60fb      	str	r3, [r7, #12]
    } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aff8:	d002      	beq.n	800b000 <RTC_WakeUpCmd+0x9c>
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d0ec      	beq.n	800afda <RTC_WakeUpCmd+0x76>
    
    if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 800b000:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b004:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d103      	bne.n	800b01a <RTC_WakeUpCmd+0xb6>
    {
      status = ERROR;
 800b012:	f04f 0300 	mov.w	r3, #0
 800b016:	75fb      	strb	r3, [r7, #23]
 800b018:	e002      	b.n	800b020 <RTC_WakeUpCmd+0xbc>
    }
    else
    {
      status = SUCCESS;
 800b01a:	f04f 0301 	mov.w	r3, #1
 800b01e:	75fb      	strb	r3, [r7, #23]
    }    
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b020:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b024:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b028:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b02c:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b02e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b030:	4618      	mov	r0, r3
 800b032:	f107 071c 	add.w	r7, r7, #28
 800b036:	46bd      	mov	sp, r7
 800b038:	bc80      	pop	{r7}
 800b03a:	4770      	bx	lr

0800b03c <RTC_DayLightSavingConfig>:
  *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
  *            @arg RTC_StoreOperation_Set: BCK Bit Set
  * @retval None
  */
void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b046:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b04a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b04e:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b052:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b054:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b058:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b05c:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b060:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 800b062:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b066:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b06a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b06e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b072:	6892      	ldr	r2, [r2, #8]
 800b074:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b078:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 800b07a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b07e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b082:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b086:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b08a:	6891      	ldr	r1, [r2, #8]
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	4302      	orrs	r2, r0
 800b092:	430a      	orrs	r2, r1
 800b094:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b096:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b09a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b09e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b0a2:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b0a4:	f107 070c 	add.w	r7, r7, #12
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bc80      	pop	{r7}
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop

0800b0b0 <RTC_GetStoreOperation>:
  * @retval RTC Day Light Saving stored operation.
  *          - RTC_StoreOperation_Reset
  *          - RTC_StoreOperation_Set       
  */
uint32_t RTC_GetStoreOperation(void)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	af00      	add	r7, sp, #0
  return (RTC->CR & RTC_CR_BCK);
 800b0b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bc80      	pop	{r7}
 800b0c8:	4770      	bx	lr
 800b0ca:	bf00      	nop

0800b0cc <RTC_OutputConfig>:
  *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
  *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
  * @retval None
  */
void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b083      	sub	sp, #12
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT(RTC_Output));
  assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b0d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0da:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0de:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b0e2:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b0e4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0e8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0ec:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b0f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear the bits to be configured */
  RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 800b0f2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b0f6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b0fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b0fe:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b102:	6892      	ldr	r2, [r2, #8]
 800b104:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800b108:	609a      	str	r2, [r3, #8]

  /* Configure the output selection and polarity */
  RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 800b10a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b10e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b112:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b116:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b11a:	6891      	ldr	r1, [r2, #8]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4302      	orrs	r2, r0
 800b122:	430a      	orrs	r2, r1
 800b124:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b126:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b12a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b12e:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b132:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b134:	f107 070c 	add.w	r7, r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	bc80      	pop	{r7}
 800b13c:	4770      	bx	lr
 800b13e:	bf00      	nop

0800b140 <RTC_CoarseCalibConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are initialized
  *          - ERROR: RTC Coarse calibration are not initialized     
  */
ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b14a:	f04f 0300 	mov.w	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
  assert_param(IS_RTC_CALIB_VALUE(Value)); 

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b150:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b154:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b158:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b15c:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b15e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b162:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b166:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b16a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b16c:	f7ff f8ec 	bl	800a348 <RTC_EnterInitMode>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d103      	bne.n	800b17e <RTC_CoarseCalibConfig+0x3e>
  {
    status = ERROR;
 800b176:	f04f 0300 	mov.w	r3, #0
 800b17a:	73fb      	strb	r3, [r7, #15]
 800b17c:	e00c      	b.n	800b198 <RTC_CoarseCalibConfig+0x58>
  } 
  else
  {
    /* Set the coarse calibration value */
    RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 800b17e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b182:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b186:	6879      	ldr	r1, [r7, #4]
 800b188:	683a      	ldr	r2, [r7, #0]
 800b18a:	430a      	orrs	r2, r1
 800b18c:	619a      	str	r2, [r3, #24]
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800b18e:	f7ff f925 	bl	800a3dc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800b192:	f04f 0301 	mov.w	r3, #1
 800b196:	73fb      	strb	r3, [r7, #15]
  } 

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b198:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b19c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1a0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b1a4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f107 0710 	add.w	r7, r7, #16
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop

0800b1b4 <RTC_CoarseCalibCmd>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Coarse calibration are enabled/disabled
  *          - ERROR: RTC Coarse calibration are not enabled/disabled    
  */
ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	71fb      	strb	r3, [r7, #7]
  ErrorStatus status = ERROR;
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b1c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1c8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1cc:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b1d0:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b1d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b1da:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b1de:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Set Initialization mode */
  if (RTC_EnterInitMode() == ERROR)
 800b1e0:	f7ff f8b2 	bl	800a348 <RTC_EnterInitMode>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <RTC_CoarseCalibCmd+0x3e>
  {
    status =  ERROR;
 800b1ea:	f04f 0300 	mov.w	r3, #0
 800b1ee:	73fb      	strb	r3, [r7, #15]
 800b1f0:	e020      	b.n	800b234 <RTC_CoarseCalibCmd+0x80>
  }
  else
  {
    if (NewState != DISABLE)
 800b1f2:	79fb      	ldrb	r3, [r7, #7]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d00c      	beq.n	800b212 <RTC_CoarseCalibCmd+0x5e>
    {
      /* Enable the Coarse Calibration */
      RTC->CR |= (uint32_t)RTC_CR_DCE;
 800b1f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b1fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b200:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b204:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b208:	6892      	ldr	r2, [r2, #8]
 800b20a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b20e:	609a      	str	r2, [r3, #8]
 800b210:	e00b      	b.n	800b22a <RTC_CoarseCalibCmd+0x76>
    }
    else
    { 
      /* Disable the Coarse Calibration */
      RTC->CR &= (uint32_t)~RTC_CR_DCE;
 800b212:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b216:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b21a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b21e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b222:	6892      	ldr	r2, [r2, #8]
 800b224:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b228:	609a      	str	r2, [r3, #8]
    }
    /* Exit Initialization mode */
    RTC_ExitInitMode();
 800b22a:	f7ff f8d7 	bl	800a3dc <RTC_ExitInitMode>
    
    status = SUCCESS;
 800b22e:	f04f 0301 	mov.w	r3, #1
 800b232:	73fb      	strb	r3, [r7, #15]
  } 
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b234:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b238:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b23c:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b240:	625a      	str	r2, [r3, #36]	; 0x24
  
  return status;
 800b242:	7bfb      	ldrb	r3, [r7, #15]
}
 800b244:	4618      	mov	r0, r3
 800b246:	f107 0710 	add.w	r7, r7, #16
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop

0800b250 <RTC_CalibOutputCmd>:
  * @param  NewState: new state of the digital calibration Output.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_CalibOutputCmd(FunctionalState NewState)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b25a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b25e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b262:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b266:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b268:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b26c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b270:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b274:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (NewState != DISABLE)
 800b276:	79fb      	ldrb	r3, [r7, #7]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00c      	beq.n	800b296 <RTC_CalibOutputCmd+0x46>
  {
    /* Enable the RTC clock output */
    RTC->CR |= (uint32_t)RTC_CR_COE;
 800b27c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b280:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b284:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b288:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b28c:	6892      	ldr	r2, [r2, #8]
 800b28e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800b292:	609a      	str	r2, [r3, #8]
 800b294:	e00b      	b.n	800b2ae <RTC_CalibOutputCmd+0x5e>
  }
  else
  { 
    /* Disable the RTC clock output */
    RTC->CR &= (uint32_t)~RTC_CR_COE;
 800b296:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b29a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b29e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b2a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b2a6:	6892      	ldr	r2, [r2, #8]
 800b2a8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800b2ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b2ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2b2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2b6:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b2ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b2bc:	f107 070c 	add.w	r7, r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bc80      	pop	{r7}
 800b2c4:	4770      	bx	lr
 800b2c6:	bf00      	nop

0800b2c8 <RTC_CalibOutputConfig>:
  *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
  *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
  * @retval None
*/
void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b2d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2d8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b2dc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b2de:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2e6:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b2ea:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*clear flags before config*/
  RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 800b2ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b2f0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b2f4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b2f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b2fc:	6892      	ldr	r2, [r2, #8]
 800b2fe:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 800b302:	609a      	str	r2, [r3, #8]

  /* Configure the RTC_CR register */
  RTC->CR |= (uint32_t)RTC_CalibOutput;
 800b304:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b308:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b30c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b310:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b314:	6891      	ldr	r1, [r2, #8]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	430a      	orrs	r2, r1
 800b31a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800b31c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b320:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b324:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b328:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b32a:	f107 070c 	add.w	r7, r7, #12
 800b32e:	46bd      	mov	sp, r7
 800b330:	bc80      	pop	{r7}
 800b332:	4770      	bx	lr

0800b334 <RTC_SmoothCalibConfig>:
  *          - ERROR: RTC Calib registers are not configured
*/
ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
                                  uint32_t RTC_SmoothCalibPlusPulses,
                                  uint32_t RTC_SmouthCalibMinusPulsesValue)
{
 800b334:	b480      	push	{r7}
 800b336:	b087      	sub	sp, #28
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	607a      	str	r2, [r7, #4]
  ErrorStatus status = ERROR;
 800b340:	f04f 0300 	mov.w	r3, #0
 800b344:	75fb      	strb	r3, [r7, #23]
  uint32_t recalpfcount = 0;
 800b346:	f04f 0300 	mov.w	r3, #0
 800b34a:	613b      	str	r3, [r7, #16]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b34c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b350:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b354:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b358:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b35a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b35e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b362:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b366:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 800b368:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b36c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b376:	2b00      	cmp	r3, #0
 800b378:	d011      	beq.n	800b39e <RTC_SmoothCalibConfig+0x6a>
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800b37a:	e003      	b.n	800b384 <RTC_SmoothCalibConfig+0x50>
    {
      recalpfcount++;
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f103 0301 	add.w	r3, r3, #1
 800b382:	613b      	str	r3, [r7, #16]
  
  /* check if a calibration is pending*/
  if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
  {
    /* wait until the Calibration is completed*/
    while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 800b384:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b388:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d003      	beq.n	800b39e <RTC_SmoothCalibConfig+0x6a>
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b39c:	d1ee      	bne.n	800b37c <RTC_SmoothCalibConfig+0x48>
      recalpfcount++;
    }
  }

  /* check if the calibration pending is completed or if there is no calibration operation at all*/
  if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 800b39e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3a2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3a6:	68db      	ldr	r3, [r3, #12]
 800b3a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d10d      	bne.n	800b3cc <RTC_SmoothCalibConfig+0x98>
  {
    /* Configure the Smooth calibration settings */
    RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | (uint32_t)RTC_SmouthCalibMinusPulsesValue);
 800b3b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3b4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3b8:	68f9      	ldr	r1, [r7, #12]
 800b3ba:	68ba      	ldr	r2, [r7, #8]
 800b3bc:	4311      	orrs	r1, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = SUCCESS;
 800b3c4:	f04f 0301 	mov.w	r3, #1
 800b3c8:	75fb      	strb	r3, [r7, #23]
 800b3ca:	e002      	b.n	800b3d2 <RTC_SmoothCalibConfig+0x9e>
  }
  else
  {
    status = ERROR;
 800b3cc:	f04f 0300 	mov.w	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800b3d2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b3d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b3da:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b3de:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f107 071c 	add.w	r7, r7, #28
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bc80      	pop	{r7}
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop

0800b3f0 <RTC_TimeStampCmd>:
  * @param  NewState: new state of the TimeStamp.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
 800b3fc:	f04f 0300 	mov.w	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800b402:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b406:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b410:	f023 0308 	bic.w	r3, r3, #8
 800b414:	60fb      	str	r3, [r7, #12]

  /* Get the new configuration */
  if (NewState != DISABLE)
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d006      	beq.n	800b42a <RTC_TimeStampCmd+0x3a>
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4313      	orrs	r3, r2
 800b422:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b426:	60fb      	str	r3, [r7, #12]
 800b428:	e003      	b.n	800b432 <RTC_TimeStampCmd+0x42>
  }
  else
  {
    tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4313      	orrs	r3, r2
 800b430:	60fb      	str	r3, [r7, #12]
  }

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b432:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b436:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b43a:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b43e:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b440:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b444:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b448:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b44c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  RTC->CR = (uint32_t)tmpreg;
 800b44e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b452:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b456:	68fa      	ldr	r2, [r7, #12]
 800b458:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800b45a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b45e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b462:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b466:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b468:	f107 0714 	add.w	r7, r7, #20
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bc80      	pop	{r7}
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop

0800b474 <RTC_GetTimeStamp>:
  *                             contains the TimeStamp date values.     
  * @retval None
  */
void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
                                      RTC_DateTypeDef* RTC_StampDateStruct)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b086      	sub	sp, #24
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
  uint32_t tmptime = 0, tmpdate = 0;
 800b480:	f04f 0300 	mov.w	r3, #0
 800b484:	617b      	str	r3, [r7, #20]
 800b486:	f04f 0300 	mov.w	r3, #0
 800b48a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(RTC_Format));

  /* Get the TimeStamp time and date registers values */
  tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 800b48c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b490:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b496:	f647 737f 	movw	r3, #32639	; 0x7f7f
 800b49a:	f2c0 037f 	movt	r3, #127	; 0x7f
 800b49e:	4013      	ands	r3, r2
 800b4a0:	617b      	str	r3, [r7, #20]
  tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 800b4a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b4a6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b4b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b4b4:	613b      	str	r3, [r7, #16]

  /* Fill the Time structure fields with the read parameters */
  RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b4bc:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b4c0:	b2da      	uxtb	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	701a      	strb	r2, [r3, #0]
  RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 800b4cc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b4d0:	b2da      	uxtb	r2, r3
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	705a      	strb	r2, [r3, #1]
  RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4de:	b2da      	uxtb	r2, r3
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	709a      	strb	r2, [r3, #2]
  RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4ea:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800b4ee:	b2da      	uxtb	r2, r3
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	70da      	strb	r2, [r3, #3]

  /* Fill the Date structure fields with the read parameters */
  RTC_StampDateStruct->RTC_Year = 0;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f04f 0200 	mov.w	r2, #0
 800b4fa:	70da      	strb	r2, [r3, #3]
  RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 800b502:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800b506:	b2da      	uxtb	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	705a      	strb	r2, [r3, #1]
  RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b514:	b2da      	uxtb	r2, r3
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	709a      	strb	r2, [r3, #2]
  RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b520:	ea4f 3353 	mov.w	r3, r3, lsr #13
 800b524:	b2da      	uxtb	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (RTC_Format == RTC_Format_BIN)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d135      	bne.n	800b59c <RTC_GetTimeStamp+0x128>
  {
    /* Convert the Time structure parameters to Binary format */
    RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	781b      	ldrb	r3, [r3, #0]
 800b534:	4618      	mov	r0, r3
 800b536:	f000 fb89 	bl	800bc4c <RTC_Bcd2ToByte>
 800b53a:	4603      	mov	r3, r0
 800b53c:	461a      	mov	r2, r3
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	701a      	strb	r2, [r3, #0]
    RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	785b      	ldrb	r3, [r3, #1]
 800b546:	4618      	mov	r0, r3
 800b548:	f000 fb80 	bl	800bc4c <RTC_Bcd2ToByte>
 800b54c:	4603      	mov	r3, r0
 800b54e:	461a      	mov	r2, r3
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	705a      	strb	r2, [r3, #1]
    RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	789b      	ldrb	r3, [r3, #2]
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fb77 	bl	800bc4c <RTC_Bcd2ToByte>
 800b55e:	4603      	mov	r3, r0
 800b560:	461a      	mov	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	709a      	strb	r2, [r3, #2]

    /* Convert the Date structure parameters to Binary format */
    RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	785b      	ldrb	r3, [r3, #1]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f000 fb6e 	bl	800bc4c <RTC_Bcd2ToByte>
 800b570:	4603      	mov	r3, r0
 800b572:	461a      	mov	r2, r3
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	705a      	strb	r2, [r3, #1]
    RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	789b      	ldrb	r3, [r3, #2]
 800b57c:	4618      	mov	r0, r3
 800b57e:	f000 fb65 	bl	800bc4c <RTC_Bcd2ToByte>
 800b582:	4603      	mov	r3, r0
 800b584:	461a      	mov	r2, r3
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	709a      	strb	r2, [r3, #2]
    RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	781b      	ldrb	r3, [r3, #0]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 fb5c 	bl	800bc4c <RTC_Bcd2ToByte>
 800b594:	4603      	mov	r3, r0
 800b596:	461a      	mov	r2, r3
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	701a      	strb	r2, [r3, #0]
  }
}
 800b59c:	f107 0718 	add.w	r7, r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <RTC_GetTimeStampSubSecond>:
  * @brief  Get the RTC timestamp Subseconds value.
  * @param  None
  * @retval RTC current timestamp Subseconds value.
  */
uint32_t RTC_GetTimeStampSubSecond(void)
{
 800b5a4:	b480      	push	{r7}
 800b5a6:	af00      	add	r7, sp, #0
  /* Get timestamp subseconds values from the correspondent registers */
  return (uint32_t)(RTC->TSSSR);
 800b5a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5ac:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bc80      	pop	{r7}
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop

0800b5bc <RTC_TamperTriggerConfig>:
  *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
  *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
  * @retval None
  */
void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
  assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
 
  if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d110      	bne.n	800b5ee <RTC_TamperTriggerConfig+0x32>
  {  
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 800b5cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b5d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b5dc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b5e4:	ea6f 0202 	mvn.w	r2, r2
 800b5e8:	400a      	ands	r2, r1
 800b5ea:	641a      	str	r2, [r3, #64]	; 0x40
 800b5ec:	e00d      	b.n	800b60a <RTC_TamperTriggerConfig+0x4e>
  }
  else
  { 
    /* Configure the RTC_TAFCR register */
    RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 800b5ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b5f2:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b5f6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b5fa:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b5fe:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b600:	687a      	ldr	r2, [r7, #4]
 800b602:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b606:	430a      	orrs	r2, r1
 800b608:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800b60a:	f107 070c 	add.w	r7, r7, #12
 800b60e:	46bd      	mov	sp, r7
 800b610:	bc80      	pop	{r7}
 800b612:	4770      	bx	lr

0800b614 <RTC_TamperCmd>:
  * @param  NewState: new state of the tamper pin.
  *          This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
{
 800b614:	b480      	push	{r7}
 800b616:	b083      	sub	sp, #12
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER(RTC_Tamper));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00c      	beq.n	800b640 <RTC_TamperCmd+0x2c>
  {
    /* Enable the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_Tamper;
 800b626:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b62a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b62e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b632:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b636:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	430a      	orrs	r2, r1
 800b63c:	641a      	str	r2, [r3, #64]	; 0x40
 800b63e:	e00d      	b.n	800b65c <RTC_TamperCmd+0x48>
  }
  else
  {
    /* Disable the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 800b640:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b644:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b648:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b64c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b650:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	ea6f 0202 	mvn.w	r2, r2
 800b658:	400a      	ands	r2, r1
 800b65a:	641a      	str	r2, [r3, #64]	; 0x40
  }  
}
 800b65c:	f107 070c 	add.w	r7, r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	bc80      	pop	{r7}
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop

0800b668 <RTC_TamperFilterConfig>:
  *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
  *                                    samples at the active level 
  * @retval None
  */
void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
{
 800b668:	b480      	push	{r7}
 800b66a:	b083      	sub	sp, #12
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
   
  /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 800b670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b674:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b678:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b67c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b680:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b682:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800b686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 800b688:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b68c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b690:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b694:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b698:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	430a      	orrs	r2, r1
 800b69e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b6a0:	f107 070c 	add.w	r7, r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bc80      	pop	{r7}
 800b6a8:	4770      	bx	lr
 800b6aa:	bf00      	nop

0800b6ac <RTC_TamperSamplingFreqConfig>:
  *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
  *                                           with a frequency =  RTCCLK / 256  
  * @retval None
  */
void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
 
  /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 800b6b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6b8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6bc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b6c0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b6c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b6c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b6ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 800b6cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6d0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b6d4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b6d8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b6dc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	430a      	orrs	r2, r1
 800b6e2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b6e4:	f107 070c 	add.w	r7, r7, #12
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bc80      	pop	{r7}
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop

0800b6f0 <RTC_TamperPinsPrechargeDuration>:
  *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling during 4 RTCCLK cycle    
  *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling during 8 RTCCLK cycle
  * @retval None
  */
void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
   
  /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 800b6f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b6fc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b700:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b704:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b708:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b70a:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800b70e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure the RTC_TAFCR register */
  RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 800b710:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b714:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b718:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b71c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b720:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b722:	687a      	ldr	r2, [r7, #4]
 800b724:	430a      	orrs	r2, r1
 800b726:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b728:	f107 070c 	add.w	r7, r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bc80      	pop	{r7}
 800b730:	4770      	bx	lr
 800b732:	bf00      	nop

0800b734 <RTC_TimeStampOnTamperDetectionCmd>:
  * @param  NewState: new state of the timestamp on tamper event.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
{
 800b734:	b480      	push	{r7}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	4603      	mov	r3, r0
 800b73c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
   
  if (NewState != DISABLE)
 800b73e:	79fb      	ldrb	r3, [r7, #7]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00c      	beq.n	800b75e <RTC_TimeStampOnTamperDetectionCmd+0x2a>
  {
    /* Save timestamp on tamper detection event */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 800b744:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b748:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b74c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b750:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b754:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b756:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b75a:	641a      	str	r2, [r3, #64]	; 0x40
 800b75c:	e00b      	b.n	800b776 <RTC_TimeStampOnTamperDetectionCmd+0x42>
  }
  else
  {
    /* Tamper detection does not cause a timestamp to be saved */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 800b75e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b762:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b766:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b76a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b76e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b774:	641a      	str	r2, [r3, #64]	; 0x40
  }
}
 800b776:	f107 070c 	add.w	r7, r7, #12
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bc80      	pop	{r7}
 800b77e:	4770      	bx	lr

0800b780 <RTC_TamperPullUpCmd>:
  * @param  NewState: new state of tamper pull up.
  *   This parameter can be: ENABLE or DISABLE.                   
  * @retval None
  */
void RTC_TamperPullUpCmd(FunctionalState NewState)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	4603      	mov	r3, r0
 800b788:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
 if (NewState != DISABLE)
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00c      	beq.n	800b7aa <RTC_TamperPullUpCmd+0x2a>
  {
    /* Enable precharge of the selected Tamper pin */
    RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 800b790:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b794:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b798:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b79c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b7a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b7a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b7a6:	641a      	str	r2, [r3, #64]	; 0x40
 800b7a8:	e00b      	b.n	800b7c2 <RTC_TamperPullUpCmd+0x42>
  }
  else
  {
    /* Disable precharge of the selected Tamper pin */
    RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 800b7aa:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b7ae:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7b2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b7b6:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b7ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b7bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b7c0:	641a      	str	r2, [r3, #64]	; 0x40
  } 
}
 800b7c2:	f107 070c 	add.w	r7, r7, #12
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bc80      	pop	{r7}
 800b7ca:	4770      	bx	lr

0800b7cc <RTC_WriteBackupRegister>:
  *                          specify the register.
  * @param  Data: Data to be written in the specified RTC Backup data register.                     
  * @retval None
  */
void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800b7d6:	f04f 0300 	mov.w	r3, #0
 800b7da:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800b7dc:	f642 0350 	movw	r3, #10320	; 0x2850
 800b7e0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b7e4:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	18d3      	adds	r3, r2, r3
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	683a      	ldr	r2, [r7, #0]
 800b7f6:	601a      	str	r2, [r3, #0]
}
 800b7f8:	f107 0714 	add.w	r7, r7, #20
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bc80      	pop	{r7}
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop

0800b804 <RTC_ReadBackupRegister>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
  *                          specify the register.                   
  * @retval None
  */
uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
{
 800b804:	b480      	push	{r7}
 800b806:	b085      	sub	sp, #20
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800b80c:	f04f 0300 	mov.w	r3, #0
 800b810:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RTC_BKP(RTC_BKP_DR));

  tmp = RTC_BASE + 0x50;
 800b812:	f642 0350 	movw	r3, #10320	; 0x2850
 800b816:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b81a:	60fb      	str	r3, [r7, #12]
  tmp += (RTC_BKP_DR * 4);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	18d3      	adds	r3, r2, r3
 800b826:	60fb      	str	r3, [r7, #12]
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	f107 0714 	add.w	r7, r7, #20
 800b832:	46bd      	mov	sp, r7
 800b834:	bc80      	pop	{r7}
 800b836:	4770      	bx	lr

0800b838 <RTC_TamperPinSelection>:
  *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
  *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
  * @retval None
  */
void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 800b840:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b844:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b848:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b84c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b850:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b852:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b856:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 800b858:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b85c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b860:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b864:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b868:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	430a      	orrs	r2, r1
 800b86e:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b870:	f107 070c 	add.w	r7, r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	bc80      	pop	{r7}
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop

0800b87c <RTC_TimeStampPinSelection>:
  *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
  *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
  * @retval None
  */
void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 800b884:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b888:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b88c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b890:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b894:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b896:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b89a:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 800b89c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8a0:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8a4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b8a8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b8ac:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	430a      	orrs	r2, r1
 800b8b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b8b4:	f107 070c 	add.w	r7, r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bc80      	pop	{r7}
 800b8bc:	4770      	bx	lr
 800b8be:	bf00      	nop

0800b8c0 <RTC_OutputTypeConfig>:
  *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
  *                                    Push Pull mode.    
  * @retval None
  */
void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
  
  RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 800b8c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b8d4:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b8d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800b8da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b8de:	641a      	str	r2, [r3, #64]	; 0x40
  RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 800b8e0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b8e4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b8e8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800b8ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800b8f0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	430a      	orrs	r2, r1
 800b8f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 800b8f8:	f107 070c 	add.w	r7, r7, #12
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bc80      	pop	{r7}
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop

0800b904 <RTC_SynchroShiftConfig>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC Shift registers are configured
  *          - ERROR: RTC Shift registers are not configured
*/
ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	73fb      	strb	r3, [r7, #15]
  uint32_t shpfcount = 0;
 800b914:	f04f 0300 	mov.w	r3, #0
 800b918:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
  assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b91a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b91e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b922:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b926:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b928:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b92c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b930:	f04f 0253 	mov.w	r2, #83	; 0x53
 800b934:	625a      	str	r2, [r3, #36]	; 0x24
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 800b936:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b93a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f003 0308 	and.w	r3, r3, #8
 800b944:	2b00      	cmp	r3, #0
 800b946:	d011      	beq.n	800b96c <RTC_SynchroShiftConfig+0x68>
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800b948:	e003      	b.n	800b952 <RTC_SynchroShiftConfig+0x4e>
    {
      shpfcount++;
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	f103 0301 	add.w	r3, r3, #1
 800b950:	60bb      	str	r3, [r7, #8]
  
  /* Check if a Shift is pending*/
  if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
  {
    /* Wait until the shift is completed*/
    while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 800b952:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b956:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b95a:	68db      	ldr	r3, [r3, #12]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d003      	beq.n	800b96c <RTC_SynchroShiftConfig+0x68>
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b96a:	d1ee      	bne.n	800b94a <RTC_SynchroShiftConfig+0x46>
      shpfcount++;
    }
  }

  /* Check if the Shift pending is completed or if there is no Shift operation at all*/
  if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 800b96c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b970:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d121      	bne.n	800b9c2 <RTC_SynchroShiftConfig+0xbe>
  {
    /* check if the reference clock detection is disabled */
    if((RTC->CR & RTC_CR_REFCKON) == RESET)
 800b97e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b982:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	f003 0310 	and.w	r3, r3, #16
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d114      	bne.n	800b9ba <RTC_SynchroShiftConfig+0xb6>
    {
      /* Configure the Shift settings */
      RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 800b990:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b994:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b998:	6839      	ldr	r1, [r7, #0]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	430a      	orrs	r2, r1
 800b99e:	62da      	str	r2, [r3, #44]	; 0x2c
    
      if(RTC_WaitForSynchro() == ERROR)
 800b9a0:	f7fe fd2e 	bl	800a400 <RTC_WaitForSynchro>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d103      	bne.n	800b9b2 <RTC_SynchroShiftConfig+0xae>
      {
        status = ERROR;
 800b9aa:	f04f 0300 	mov.w	r3, #0
 800b9ae:	73fb      	strb	r3, [r7, #15]
 800b9b0:	e00a      	b.n	800b9c8 <RTC_SynchroShiftConfig+0xc4>
      }
      else
      {
        status = SUCCESS;
 800b9b2:	f04f 0301 	mov.w	r3, #1
 800b9b6:	73fb      	strb	r3, [r7, #15]
 800b9b8:	e006      	b.n	800b9c8 <RTC_SynchroShiftConfig+0xc4>
      }
    }
    else
    {
      status = ERROR;
 800b9ba:	f04f 0300 	mov.w	r3, #0
 800b9be:	73fb      	strb	r3, [r7, #15]
 800b9c0:	e002      	b.n	800b9c8 <RTC_SynchroShiftConfig+0xc4>
    }
  }
  else
  {
    status = ERROR;
 800b9c2:	f04f 0300 	mov.w	r3, #0
 800b9c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF;
 800b9c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b9cc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b9d0:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800b9d4:	625a      	str	r2, [r3, #36]	; 0x24
  
  return (ErrorStatus)(status);
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f107 0710 	add.w	r7, r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop

0800b9e4 <RTC_ITConfig>:
  * @param  NewState: new state of the specified RTC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b083      	sub	sp, #12
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RTC_CONFIG_IT(RTC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Disable the write protection for RTC registers */
  RTC->WPR = 0xCA;
 800b9f0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b9f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800b9f8:	f04f 02ca 	mov.w	r2, #202	; 0xca
 800b9fc:	625a      	str	r2, [r3, #36]	; 0x24
  RTC->WPR = 0x53;
 800b9fe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba02:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba06:	f04f 0253 	mov.w	r2, #83	; 0x53
 800ba0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (NewState != DISABLE)
 800ba0c:	78fb      	ldrb	r3, [r7, #3]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d01c      	beq.n	800ba4c <RTC_ITConfig+0x68>
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 800ba12:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba1a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba1e:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba22:	6891      	ldr	r1, [r2, #8]
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	f022 0204 	bic.w	r2, r2, #4
 800ba2a:	430a      	orrs	r2, r1
 800ba2c:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 800ba2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba32:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba36:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba3a:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba3e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	f002 0204 	and.w	r2, r2, #4
 800ba46:	430a      	orrs	r2, r1
 800ba48:	641a      	str	r2, [r3, #64]	; 0x40
 800ba4a:	e01f      	b.n	800ba8c <RTC_ITConfig+0xa8>
  }
  else
  {
    /* Configure the Interrupts in the RTC_CR register */
    RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 800ba4c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba50:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba54:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba58:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba5c:	6891      	ldr	r1, [r2, #8]
 800ba5e:	687a      	ldr	r2, [r7, #4]
 800ba60:	f022 0204 	bic.w	r2, r2, #4
 800ba64:	ea6f 0202 	mvn.w	r2, r2
 800ba68:	400a      	ands	r2, r1
 800ba6a:	609a      	str	r2, [r3, #8]
    /* Configure the Tamper Interrupt in the RTC_TAFCR */
    RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 800ba6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba70:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba74:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ba78:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800ba7c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	f002 0204 	and.w	r2, r2, #4
 800ba84:	ea6f 0202 	mvn.w	r2, r2
 800ba88:	400a      	ands	r2, r1
 800ba8a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  /* Enable the write protection for RTC registers */
  RTC->WPR = 0xFF; 
 800ba8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800ba90:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ba94:	f04f 02ff 	mov.w	r2, #255	; 0xff
 800ba98:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ba9a:	f107 070c 	add.w	r7, r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bc80      	pop	{r7}
 800baa2:	4770      	bx	lr

0800baa4 <RTC_GetFlagStatus>:
  *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
  *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
  * @retval The new state of RTC_FLAG (SET or RESET).
  */
FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b085      	sub	sp, #20
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800baac:	f04f 0300 	mov.w	r3, #0
 800bab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 800bab2:	f04f 0300 	mov.w	r3, #0
 800bab6:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
  
  /* Get all the flags */
  tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 800bab8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800babc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bac0:	68da      	ldr	r2, [r3, #12]
 800bac2:	f643 7377 	movw	r3, #16247	; 0x3f77
 800bac6:	4013      	ands	r3, r2
 800bac8:	60bb      	str	r3, [r7, #8]
  
  /* Return the status of the flag */
  if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 800baca:	68ba      	ldr	r2, [r7, #8]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4013      	ands	r3, r2
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d003      	beq.n	800badc <RTC_GetFlagStatus+0x38>
  {
    bitstatus = SET;
 800bad4:	f04f 0301 	mov.w	r3, #1
 800bad8:	73fb      	strb	r3, [r7, #15]
 800bada:	e002      	b.n	800bae2 <RTC_GetFlagStatus+0x3e>
  }
  else
  {
    bitstatus = RESET;
 800badc:	f04f 0300 	mov.w	r3, #0
 800bae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800bae2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	f107 0714 	add.w	r7, r7, #20
 800baea:	46bd      	mov	sp, r7
 800baec:	bc80      	pop	{r7}
 800baee:	4770      	bx	lr

0800baf0 <RTC_ClearFlag>:
  *            @arg RTC_FLAG_ALRAF: Alarm A flag
  *            @arg RTC_FLAG_RSF: Registers Synchronized flag
  * @retval None
  */
void RTC_ClearFlag(uint32_t RTC_FLAG)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b083      	sub	sp, #12
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));

  /* Clear the Flags in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));  
 800baf8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bafc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800bb06:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bb0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bb0e:	ea6f 0102 	mvn.w	r1, r2
 800bb12:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bb16:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bb1a:	68d2      	ldr	r2, [r2, #12]
 800bb1c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bb20:	430a      	orrs	r2, r1
 800bb22:	60da      	str	r2, [r3, #12]
}
 800bb24:	f107 070c 	add.w	r7, r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bc80      	pop	{r7}
 800bb2c:	4770      	bx	lr
 800bb2e:	bf00      	nop

0800bb30 <RTC_GetITStatus>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval The new state of RTC_IT (SET or RESET).
  */
ITStatus RTC_GetITStatus(uint32_t RTC_IT)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b087      	sub	sp, #28
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0, enablestatus = 0;
 800bb3e:	f04f 0300 	mov.w	r3, #0
 800bb42:	613b      	str	r3, [r7, #16]
 800bb44:	f04f 0300 	mov.w	r3, #0
 800bb48:	60fb      	str	r3, [r7, #12]
 
  /* Check the parameters */
  assert_param(IS_RTC_GET_IT(RTC_IT));
  
  /* Get the TAMPER Interrupt enable bit and pending bit */
  tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 800bb4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb4e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	613b      	str	r3, [r7, #16]
 
  /* Get the Interrupt enable Status */
  enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 800bb5a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb5e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb62:	689a      	ldr	r2, [r3, #8]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	401a      	ands	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	ea4f 31d3 	mov.w	r1, r3, lsr #15
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	400b      	ands	r3, r1
 800bb72:	4313      	orrs	r3, r2
 800bb74:	60fb      	str	r3, [r7, #12]
  
  /* Get the Interrupt pending bit */
  tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 800bb76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bb7a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bb7e:	68da      	ldr	r2, [r3, #12]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800bb86:	4013      	ands	r3, r2
 800bb88:	613b      	str	r3, [r7, #16]
  
  /* Get the status of the Interrupt */
  if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d00a      	beq.n	800bba6 <RTC_GetITStatus+0x76>
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	ea4f 4303 	mov.w	r3, r3, lsl #16
 800bb96:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d003      	beq.n	800bba6 <RTC_GetITStatus+0x76>
  {
    bitstatus = SET;
 800bb9e:	f04f 0301 	mov.w	r3, #1
 800bba2:	75fb      	strb	r3, [r7, #23]
 800bba4:	e002      	b.n	800bbac <RTC_GetITStatus+0x7c>
  }
  else
  {
    bitstatus = RESET;
 800bba6:	f04f 0300 	mov.w	r3, #0
 800bbaa:	75fb      	strb	r3, [r7, #23]
  }
  return bitstatus;
 800bbac:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f107 071c 	add.w	r7, r7, #28
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bc80      	pop	{r7}
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop

0800bbbc <RTC_ClearITPendingBit>:
  *            @arg RTC_IT_ALRA: Alarm A interrupt 
  *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
  * @retval None
  */
void RTC_ClearITPendingBit(uint32_t RTC_IT)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bbc4:	f04f 0300 	mov.w	r3, #0
 800bbc8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_CLEAR_IT(RTC_IT));

  /* Get the RTC_ISR Interrupt pending bits mask */
  tmpreg = (uint32_t)(RTC_IT >> 4);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800bbd0:	60fb      	str	r3, [r7, #12]

  /* Clear the interrupt pending bits in the RTC_ISR register */
  RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT))); 
 800bbd2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800bbd6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	ea4f 4202 	mov.w	r2, r2, lsl #16
 800bbe0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800bbe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bbe8:	ea6f 0102 	mvn.w	r1, r2
 800bbec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bbf0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 800bbf4:	68d2      	ldr	r2, [r2, #12]
 800bbf6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800bbfa:	430a      	orrs	r2, r1
 800bbfc:	60da      	str	r2, [r3, #12]
}
 800bbfe:	f107 0714 	add.w	r7, r7, #20
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bc80      	pop	{r7}
 800bc06:	4770      	bx	lr

0800bc08 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted.
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	4603      	mov	r3, r0
 800bc10:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0;
 800bc12:	f04f 0300 	mov.w	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]
  
  while (Value >= 10)
 800bc18:	e007      	b.n	800bc2a <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
 800bc1c:	f103 0301 	add.w	r3, r3, #1
 800bc20:	73fb      	strb	r3, [r7, #15]
    Value -= 10;
 800bc22:	79fb      	ldrb	r3, [r7, #7]
 800bc24:	f1a3 030a 	sub.w	r3, r3, #10
 800bc28:	71fb      	strb	r3, [r7, #7]
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint8_t bcdhigh = 0;
  
  while (Value >= 10)
 800bc2a:	79fb      	ldrb	r3, [r7, #7]
 800bc2c:	2b09      	cmp	r3, #9
 800bc2e:	d8f4      	bhi.n	800bc1a <RTC_ByteToBcd2+0x12>
  {
    bcdhigh++;
    Value -= 10;
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800bc36:	b2da      	uxtb	r2, r3
 800bc38:	79fb      	ldrb	r3, [r7, #7]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	b2db      	uxtb	r3, r3
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f107 0714 	add.w	r7, r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bc80      	pop	{r7}
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop

0800bc4c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted.
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	4603      	mov	r3, r0
 800bc54:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0;
 800bc56:	f04f 0300 	mov.w	r3, #0
 800bc5a:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800bc5c:	79fb      	ldrb	r3, [r7, #7]
 800bc5e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800bc62:	b2db      	uxtb	r3, r3
 800bc64:	461a      	mov	r2, r3
 800bc66:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800bc6a:	18d3      	adds	r3, r2, r3
 800bc6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bc70:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & (uint8_t)0x0F));
 800bc72:	79fb      	ldrb	r3, [r7, #7]
 800bc74:	f003 030f 	and.w	r3, r3, #15
 800bc78:	b2da      	uxtb	r2, r3
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
 800bc7c:	18d3      	adds	r3, r2, r3
 800bc7e:	b2db      	uxtb	r3, r3
}
 800bc80:	4618      	mov	r0, r3
 800bc82:	f107 0714 	add.w	r7, r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bc80      	pop	{r7}
 800bc8a:	4770      	bx	lr

0800bc8c <SDIO_DeInit>:
  * @brief  Deinitializes the SDIO peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void SDIO_DeInit(void)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, ENABLE);
 800bc90:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bc94:	f04f 0101 	mov.w	r1, #1
 800bc98:	f7fd ff80 	bl	8009b9c <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_SDIO, DISABLE);
 800bc9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bca0:	f04f 0100 	mov.w	r1, #0
 800bca4:	f7fd ff7a 	bl	8009b9c <RCC_APB2PeriphResetCmd>
}
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop

0800bcac <SDIO_Init>:
  * @param  SDIO_InitStruct : pointer to a SDIO_InitTypeDef structure 
  *         that contains the configuration information for the SDIO peripheral.
  * @retval None
  */
void SDIO_Init(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b085      	sub	sp, #20
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bcb4:	f04f 0300 	mov.w	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(SDIO_InitStruct->SDIO_BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(SDIO_InitStruct->SDIO_HardwareFlowControl)); 
   
/*---------------------------- SDIO CLKCR Configuration ------------------------*/  
  /* Get the SDIO CLKCR value */
  tmpreg = SDIO->CLKCR;
 800bcba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bcbe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	60fb      	str	r3, [r7, #12]
  
  /* Clear CLKDIV, PWRSAV, BYPASS, WIDBUS, NEGEDGE, HWFC_EN bits */
  tmpreg &= CLKCR_CLEAR_MASK;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f423 43fc 	bic.w	r3, r3, #32256	; 0x7e00
 800bccc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bcd0:	60fb      	str	r3, [r7, #12]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7d1b      	ldrb	r3, [r3, #20]
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	689b      	ldr	r3, [r3, #8]
 800bcdc:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800bce2:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
 800bcee:	431a      	orrs	r2, r3
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	691b      	ldr	r3, [r3, #16]
 800bcf4:	4313      	orrs	r3, r2
  /* Set PWRSAV bit according to SDIO_ClockPowerSave value */
  /* Set BYPASS bit according to SDIO_ClockBypass value */
  /* Set WIDBUS bits according to SDIO_BusWide value */
  /* Set NEGEDGE bits according to SDIO_ClockEdge value */
  /* Set HWFC_EN bits according to SDIO_HardwareFlowControl value */
  tmpreg |= (SDIO_InitStruct->SDIO_ClockDiv  | SDIO_InitStruct->SDIO_ClockPowerSave |
 800bcf6:	68fa      	ldr	r2, [r7, #12]
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	60fb      	str	r3, [r7, #12]
             SDIO_InitStruct->SDIO_ClockBypass | SDIO_InitStruct->SDIO_BusWide |
             SDIO_InitStruct->SDIO_ClockEdge | SDIO_InitStruct->SDIO_HardwareFlowControl); 
  
  /* Write to SDIO CLKCR */
  SDIO->CLKCR = tmpreg;
 800bcfc:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bd00:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	605a      	str	r2, [r3, #4]
}
 800bd08:	f107 0714 	add.w	r7, r7, #20
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bc80      	pop	{r7}
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop

0800bd14 <SDIO_StructInit>:
  * @param  SDIO_InitStruct: pointer to an SDIO_InitTypeDef structure which 
  *         will be initialized.
  * @retval None
  */
void SDIO_StructInit(SDIO_InitTypeDef* SDIO_InitStruct)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* SDIO_InitStruct members default value */
  SDIO_InitStruct->SDIO_ClockDiv = 0x00;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f04f 0200 	mov.w	r2, #0
 800bd22:	751a      	strb	r2, [r3, #20]
  SDIO_InitStruct->SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f04f 0200 	mov.w	r2, #0
 800bd2a:	601a      	str	r2, [r3, #0]
  SDIO_InitStruct->SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	f04f 0200 	mov.w	r2, #0
 800bd32:	605a      	str	r2, [r3, #4]
  SDIO_InitStruct->SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	f04f 0200 	mov.w	r2, #0
 800bd3a:	609a      	str	r2, [r3, #8]
  SDIO_InitStruct->SDIO_BusWide = SDIO_BusWide_1b;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f04f 0200 	mov.w	r2, #0
 800bd42:	60da      	str	r2, [r3, #12]
  SDIO_InitStruct->SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f04f 0200 	mov.w	r2, #0
 800bd4a:	611a      	str	r2, [r3, #16]
}
 800bd4c:	f107 070c 	add.w	r7, r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop

0800bd58 <SDIO_ClockCmd>:
  * @param  NewState: new state of the SDIO Clock. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_ClockCmd(FunctionalState NewState)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	4603      	mov	r3, r0
 800bd60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CLKCR_CLKEN_BB = (uint32_t)NewState;
 800bd62:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800bd66:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800bd6a:	79fa      	ldrb	r2, [r7, #7]
 800bd6c:	601a      	str	r2, [r3, #0]
}
 800bd6e:	f107 070c 	add.w	r7, r7, #12
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bc80      	pop	{r7}
 800bd76:	4770      	bx	lr

0800bd78 <SDIO_SetPowerState>:
  *            @arg SDIO_PowerState_OFF: SDIO Power OFF
  *            @arg SDIO_PowerState_ON: SDIO Power ON
  * @retval None
  */
void SDIO_SetPowerState(uint32_t SDIO_PowerState)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b083      	sub	sp, #12
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_POWER_STATE(SDIO_PowerState));
  
  SDIO->POWER = SDIO_PowerState;
 800bd80:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bd84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	601a      	str	r2, [r3, #0]
}
 800bd8c:	f107 070c 	add.w	r7, r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bc80      	pop	{r7}
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop

0800bd98 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(void)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	af00      	add	r7, sp, #0
  return (SDIO->POWER & (~PWR_PWRCTRL_MASK));
 800bd9c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bda0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f003 0303 	and.w	r3, r3, #3
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bc80      	pop	{r7}
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop

0800bdb4 <SDIO_SendCommand>:
  *         structure that contains the configuration information for the SDIO 
  *         command.
  * @retval None
  */
void SDIO_SendCommand(SDIO_CmdInitTypeDef *SDIO_CmdInitStruct)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bdbc:	f04f 0300 	mov.w	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_WAIT(SDIO_CmdInitStruct->SDIO_Wait));
  assert_param(IS_SDIO_CPSM(SDIO_CmdInitStruct->SDIO_CPSM));
  
/*---------------------------- SDIO ARG Configuration ------------------------*/
  /* Set the SDIO Argument value */
  SDIO->ARG = SDIO_CmdInitStruct->SDIO_Argument;
 800bdc2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bdc6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bdca:	687a      	ldr	r2, [r7, #4]
 800bdcc:	6812      	ldr	r2, [r2, #0]
 800bdce:	609a      	str	r2, [r3, #8]
  
/*---------------------------- SDIO CMD Configuration ------------------------*/  
  /* Get the SDIO CMD value */
  tmpreg = SDIO->CMD;
 800bdd0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bdd4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	60fb      	str	r3, [r7, #12]
  /* Clear CMDINDEX, WAITRESP, WAITINT, WAITPEND, CPSMEN bits */
  tmpreg &= CMD_CLEAR_MASK;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bde2:	f023 030f 	bic.w	r3, r3, #15
 800bde6:	60fb      	str	r3, [r7, #12]
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685a      	ldr	r2, [r3, #4]
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689b      	ldr	r3, [r3, #8]
 800bdf0:	431a      	orrs	r2, r3
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	691b      	ldr	r3, [r3, #16]
 800bdfc:	4313      	orrs	r3, r2
  tmpreg &= CMD_CLEAR_MASK;
  /* Set CMDINDEX bits according to SDIO_CmdIndex value */
  /* Set WAITRESP bits according to SDIO_Response value */
  /* Set WAITINT and WAITPEND bits according to SDIO_Wait value */
  /* Set CPSMEN bits according to SDIO_CPSM value */
  tmpreg |= (uint32_t)SDIO_CmdInitStruct->SDIO_CmdIndex | SDIO_CmdInitStruct->SDIO_Response
 800bdfe:	68fa      	ldr	r2, [r7, #12]
 800be00:	4313      	orrs	r3, r2
 800be02:	60fb      	str	r3, [r7, #12]
           | SDIO_CmdInitStruct->SDIO_Wait | SDIO_CmdInitStruct->SDIO_CPSM;
  
  /* Write to SDIO CMD */
  SDIO->CMD = tmpreg;
 800be04:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800be08:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	60da      	str	r2, [r3, #12]
}
 800be10:	f107 0714 	add.w	r7, r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	bc80      	pop	{r7}
 800be18:	4770      	bx	lr
 800be1a:	bf00      	nop

0800be1c <SDIO_CmdStructInit>:
  * @param  SDIO_CmdInitStruct: pointer to an SDIO_CmdInitTypeDef 
  *         structure which will be initialized.
  * @retval None
  */
void SDIO_CmdStructInit(SDIO_CmdInitTypeDef* SDIO_CmdInitStruct)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* SDIO_CmdInitStruct members default value */
  SDIO_CmdInitStruct->SDIO_Argument = 0x00;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f04f 0200 	mov.w	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
  SDIO_CmdInitStruct->SDIO_CmdIndex = 0x00;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f04f 0200 	mov.w	r2, #0
 800be32:	605a      	str	r2, [r3, #4]
  SDIO_CmdInitStruct->SDIO_Response = SDIO_Response_No;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f04f 0200 	mov.w	r2, #0
 800be3a:	609a      	str	r2, [r3, #8]
  SDIO_CmdInitStruct->SDIO_Wait = SDIO_Wait_No;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f04f 0200 	mov.w	r2, #0
 800be42:	60da      	str	r2, [r3, #12]
  SDIO_CmdInitStruct->SDIO_CPSM = SDIO_CPSM_Disable;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f04f 0200 	mov.w	r2, #0
 800be4a:	611a      	str	r2, [r3, #16]
}
 800be4c:	f107 070c 	add.w	r7, r7, #12
 800be50:	46bd      	mov	sp, r7
 800be52:	bc80      	pop	{r7}
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop

0800be58 <SDIO_GetCommandResponse>:
  * @brief  Returns command index of last command for which response received.
  * @param  None
  * @retval Returns the command index of the last command response received.
  */
uint8_t SDIO_GetCommandResponse(void)
{
 800be58:	b480      	push	{r7}
 800be5a:	af00      	add	r7, sp, #0
  return (uint8_t)(SDIO->RESPCMD);
 800be5c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800be60:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	b2db      	uxtb	r3, r3
}
 800be68:	4618      	mov	r0, r3
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bc80      	pop	{r7}
 800be6e:	4770      	bx	lr

0800be70 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4
  * @retval The Corresponding response register value.
  */
uint32_t SDIO_GetResponse(uint32_t SDIO_RESP)
{
 800be70:	b480      	push	{r7}
 800be72:	b085      	sub	sp, #20
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmp = 0;
 800be78:	f04f 0300 	mov.w	r3, #0
 800be7c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(SDIO_RESP));

  tmp = SDIO_RESP_ADDR + SDIO_RESP;
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	f642 4314 	movw	r3, #11284	; 0x2c14
 800be84:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800be88:	18d3      	adds	r3, r2, r3
 800be8a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp); 
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
}
 800be90:	4618      	mov	r0, r3
 800be92:	f107 0714 	add.w	r7, r7, #20
 800be96:	46bd      	mov	sp, r7
 800be98:	bc80      	pop	{r7}
 800be9a:	4770      	bx	lr

0800be9c <SDIO_DataConfig>:
  * @param  SDIO_DataInitStruct : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDIO command.
  * @retval None
  */
void SDIO_DataConfig(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800bea4:	f04f 0300 	mov.w	r3, #0
 800bea8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_MODE(SDIO_DataInitStruct->SDIO_TransferMode));
  assert_param(IS_SDIO_DPSM(SDIO_DataInitStruct->SDIO_DPSM));

/*---------------------------- SDIO DTIMER Configuration ---------------------*/
  /* Set the SDIO Data TimeOut value */
  SDIO->DTIMER = SDIO_DataInitStruct->SDIO_DataTimeOut;
 800beaa:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800beae:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800beb2:	687a      	ldr	r2, [r7, #4]
 800beb4:	6812      	ldr	r2, [r2, #0]
 800beb6:	625a      	str	r2, [r3, #36]	; 0x24

/*---------------------------- SDIO DLEN Configuration -----------------------*/
  /* Set the SDIO DataLength value */
  SDIO->DLEN = SDIO_DataInitStruct->SDIO_DataLength;
 800beb8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bebc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	6852      	ldr	r2, [r2, #4]
 800bec4:	629a      	str	r2, [r3, #40]	; 0x28

/*---------------------------- SDIO DCTRL Configuration ----------------------*/  
  /* Get the SDIO DCTRL value */
  tmpreg = SDIO->DCTRL;
 800bec6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800beca:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	60fb      	str	r3, [r7, #12]
  /* Clear DEN, DTMODE, DTDIR and DBCKSIZE bits */
  tmpreg &= DCTRL_CLEAR_MASK;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	f023 03f7 	bic.w	r3, r3, #247	; 0xf7
 800bed8:	60fb      	str	r3, [r7, #12]
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	689a      	ldr	r2, [r3, #8]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	431a      	orrs	r2, r3
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	431a      	orrs	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	695b      	ldr	r3, [r3, #20]
 800beee:	4313      	orrs	r3, r2
  tmpreg &= DCTRL_CLEAR_MASK;
  /* Set DEN bit according to SDIO_DPSM value */
  /* Set DTMODE bit according to SDIO_TransferMode value */
  /* Set DTDIR bit according to SDIO_TransferDir value */
  /* Set DBCKSIZE bits according to SDIO_DataBlockSize value */
  tmpreg |= (uint32_t)SDIO_DataInitStruct->SDIO_DataBlockSize | SDIO_DataInitStruct->SDIO_TransferDir
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]
           | SDIO_DataInitStruct->SDIO_TransferMode | SDIO_DataInitStruct->SDIO_DPSM;

  /* Write to SDIO DCTRL */
  SDIO->DCTRL = tmpreg;
 800bef6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800befa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bf02:	f107 0714 	add.w	r7, r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bc80      	pop	{r7}
 800bf0a:	4770      	bx	lr

0800bf0c <SDIO_DataStructInit>:
  * @param  SDIO_DataInitStruct: pointer to an SDIO_DataInitTypeDef structure 
  *         which will be initialized.
  * @retval None
  */
void SDIO_DataStructInit(SDIO_DataInitTypeDef* SDIO_DataInitStruct)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* SDIO_DataInitStruct members default value */
  SDIO_DataInitStruct->SDIO_DataTimeOut = 0xFFFFFFFF;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f04f 32ff 	mov.w	r2, #4294967295
 800bf1a:	601a      	str	r2, [r3, #0]
  SDIO_DataInitStruct->SDIO_DataLength = 0x00;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f04f 0200 	mov.w	r2, #0
 800bf22:	605a      	str	r2, [r3, #4]
  SDIO_DataInitStruct->SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	f04f 0200 	mov.w	r2, #0
 800bf2a:	609a      	str	r2, [r3, #8]
  SDIO_DataInitStruct->SDIO_TransferDir = SDIO_TransferDir_ToCard;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f04f 0200 	mov.w	r2, #0
 800bf32:	60da      	str	r2, [r3, #12]
  SDIO_DataInitStruct->SDIO_TransferMode = SDIO_TransferMode_Block;  
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f04f 0200 	mov.w	r2, #0
 800bf3a:	611a      	str	r2, [r3, #16]
  SDIO_DataInitStruct->SDIO_DPSM = SDIO_DPSM_Disable;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f04f 0200 	mov.w	r2, #0
 800bf42:	615a      	str	r2, [r3, #20]
}
 800bf44:	f107 070c 	add.w	r7, r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bc80      	pop	{r7}
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop

0800bf50 <SDIO_GetDataCounter>:
  * @brief  Returns number of remaining data bytes to be transferred.
  * @param  None
  * @retval Number of remaining data bytes to be transferred
  */
uint32_t SDIO_GetDataCounter(void)
{ 
 800bf50:	b480      	push	{r7}
 800bf52:	af00      	add	r7, sp, #0
  return SDIO->DCOUNT;
 800bf54:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bf58:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bf5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bc80      	pop	{r7}
 800bf64:	4770      	bx	lr
 800bf66:	bf00      	nop

0800bf68 <SDIO_ReadData>:
  * @brief  Read one data word from Rx FIFO.
  * @param  None
  * @retval Data received
  */
uint32_t SDIO_ReadData(void)
{ 
 800bf68:	b480      	push	{r7}
 800bf6a:	af00      	add	r7, sp, #0
  return SDIO->FIFO;
 800bf6c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bf70:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bf74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bc80      	pop	{r7}
 800bf7e:	4770      	bx	lr

0800bf80 <SDIO_WriteData>:
  * @brief  Write one data word to Tx FIFO.
  * @param  Data: 32-bit data word to write.
  * @retval None
  */
void SDIO_WriteData(uint32_t Data)
{ 
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  SDIO->FIFO = Data;
 800bf88:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bf8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bf90:	687a      	ldr	r2, [r7, #4]
 800bf92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800bf96:	f107 070c 	add.w	r7, r7, #12
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bc80      	pop	{r7}
 800bf9e:	4770      	bx	lr

0800bfa0 <SDIO_GetFIFOCount>:
  * @brief  Returns the number of words left to be written to or read from FIFO.	
  * @param  None
  * @retval Remaining number of words.
  */
uint32_t SDIO_GetFIFOCount(void)
{ 
 800bfa0:	b480      	push	{r7}
 800bfa2:	af00      	add	r7, sp, #0
  return SDIO->FIFOCNT;
 800bfa4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800bfa8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800bfac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bc80      	pop	{r7}
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop

0800bfb8 <SDIO_StartSDIOReadWait>:
  * @param  NewState: new state of the Start SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StartSDIOReadWait(FunctionalState NewState)
{ 
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTART_BB = (uint32_t) NewState;
 800bfc2:	f248 53a0 	movw	r3, #34208	; 0x85a0
 800bfc6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800bfca:	79fa      	ldrb	r2, [r7, #7]
 800bfcc:	601a      	str	r2, [r3, #0]
}
 800bfce:	f107 070c 	add.w	r7, r7, #12
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bc80      	pop	{r7}
 800bfd6:	4770      	bx	lr

0800bfd8 <SDIO_StopSDIOReadWait>:
  * @param  NewState: new state of the Stop SDIO Read Wait operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_StopSDIOReadWait(FunctionalState NewState)
{ 
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	4603      	mov	r3, r0
 800bfe0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_RWSTOP_BB = (uint32_t) NewState;
 800bfe2:	f248 53a4 	movw	r3, #34212	; 0x85a4
 800bfe6:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800bfea:	79fa      	ldrb	r2, [r7, #7]
 800bfec:	601a      	str	r2, [r3, #0]
}
 800bfee:	f107 070c 	add.w	r7, r7, #12
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bc80      	pop	{r7}
 800bff6:	4770      	bx	lr

0800bff8 <SDIO_SetSDIOReadWaitMode>:
  *            @arg SDIO_ReadWaitMode_CLK: Read Wait control by stopping SDIOCLK
  *            @arg SDIO_ReadWaitMode_DATA2: Read Wait control using SDIO_DATA2
  * @retval None
  */
void SDIO_SetSDIOReadWaitMode(uint32_t SDIO_ReadWaitMode)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_READWAIT_MODE(SDIO_ReadWaitMode));
  
  *(__IO uint32_t *) DCTRL_RWMOD_BB = SDIO_ReadWaitMode;
 800c000:	f248 53a8 	movw	r3, #34216	; 0x85a8
 800c004:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c008:	687a      	ldr	r2, [r7, #4]
 800c00a:	601a      	str	r2, [r3, #0]
}
 800c00c:	f107 070c 	add.w	r7, r7, #12
 800c010:	46bd      	mov	sp, r7
 800c012:	bc80      	pop	{r7}
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop

0800c018 <SDIO_SetSDIOOperation>:
  * @param  NewState: new state of SDIO specific operation. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SetSDIOOperation(FunctionalState NewState)
{ 
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_SDIOEN_BB = (uint32_t)NewState;
 800c022:	f248 53ac 	movw	r3, #34220	; 0x85ac
 800c026:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c02a:	79fa      	ldrb	r2, [r7, #7]
 800c02c:	601a      	str	r2, [r3, #0]
}
 800c02e:	f107 070c 	add.w	r7, r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	bc80      	pop	{r7}
 800c036:	4770      	bx	lr

0800c038 <SDIO_SendSDIOSuspendCmd>:
  * @param  NewState: new state of the SD I/O Mode suspend command.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendSDIOSuspendCmd(FunctionalState NewState)
{ 
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	4603      	mov	r3, r0
 800c040:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_SDIOSUSPEND_BB = (uint32_t)NewState;
 800c042:	f248 13ac 	movw	r3, #33196	; 0x81ac
 800c046:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c04a:	79fa      	ldrb	r2, [r7, #7]
 800c04c:	601a      	str	r2, [r3, #0]
}
 800c04e:	f107 070c 	add.w	r7, r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	bc80      	pop	{r7}
 800c056:	4770      	bx	lr

0800c058 <SDIO_CommandCompletionCmd>:
  * @param  NewState: new state of command completion signal. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CommandCompletionCmd(FunctionalState NewState)
{ 
 800c058:	b480      	push	{r7}
 800c05a:	b083      	sub	sp, #12
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	4603      	mov	r3, r0
 800c060:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ENCMDCOMPL_BB = (uint32_t)NewState;
 800c062:	f248 13b0 	movw	r3, #33200	; 0x81b0
 800c066:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c06a:	79fa      	ldrb	r2, [r7, #7]
 800c06c:	601a      	str	r2, [r3, #0]
}
 800c06e:	f107 070c 	add.w	r7, r7, #12
 800c072:	46bd      	mov	sp, r7
 800c074:	bc80      	pop	{r7}
 800c076:	4770      	bx	lr

0800c078 <SDIO_CEATAITCmd>:
  * @param  NewState: new state of CE-ATA interrupt. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_CEATAITCmd(FunctionalState NewState)
{ 
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	4603      	mov	r3, r0
 800c080:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_NIEN_BB = (uint32_t)((~((uint32_t)NewState)) & ((uint32_t)0x1));
 800c082:	f248 13b4 	movw	r3, #33204	; 0x81b4
 800c086:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c08a:	79fa      	ldrb	r2, [r7, #7]
 800c08c:	f002 0201 	and.w	r2, r2, #1
 800c090:	2a00      	cmp	r2, #0
 800c092:	bf14      	ite	ne
 800c094:	2200      	movne	r2, #0
 800c096:	2201      	moveq	r2, #1
 800c098:	601a      	str	r2, [r3, #0]
}
 800c09a:	f107 070c 	add.w	r7, r7, #12
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bc80      	pop	{r7}
 800c0a2:	4770      	bx	lr

0800c0a4 <SDIO_SendCEATACmd>:
  * @param  NewState: new state of CE-ATA command. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_SendCEATACmd(FunctionalState NewState)
{ 
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CMD_ATACMD_BB = (uint32_t)NewState;
 800c0ae:	f248 13b8 	movw	r3, #33208	; 0x81b8
 800c0b2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c0b6:	79fa      	ldrb	r2, [r7, #7]
 800c0b8:	601a      	str	r2, [r3, #0]
}
 800c0ba:	f107 070c 	add.w	r7, r7, #12
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr

0800c0c4 <SDIO_DMACmd>:
  * @param  NewState: new state of the selected SDIO DMA request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SDIO_DMACmd(FunctionalState NewState)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) DCTRL_DMAEN_BB = (uint32_t)NewState;
 800c0ce:	f248 538c 	movw	r3, #34188	; 0x858c
 800c0d2:	f2c4 2325 	movt	r3, #16933	; 0x4225
 800c0d6:	79fa      	ldrb	r2, [r7, #7]
 800c0d8:	601a      	str	r2, [r3, #0]
}
 800c0da:	f107 070c 	add.w	r7, r7, #12
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bc80      	pop	{r7}
 800c0e2:	4770      	bx	lr

0800c0e4 <SDIO_ITConfig>:
  * @param  NewState: new state of the specified SDIO interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None 
  */
void SDIO_ITConfig(uint32_t SDIO_IT, FunctionalState NewState)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SDIO_IT(SDIO_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d00c      	beq.n	800c110 <SDIO_ITConfig+0x2c>
  {
    /* Enable the SDIO interrupts */
    SDIO->MASK |= SDIO_IT;
 800c0f6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c0fa:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c0fe:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800c102:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c106:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	430a      	orrs	r2, r1
 800c10c:	63da      	str	r2, [r3, #60]	; 0x3c
 800c10e:	e00d      	b.n	800c12c <SDIO_ITConfig+0x48>
  }
  else
  {
    /* Disable the SDIO interrupts */
    SDIO->MASK &= ~SDIO_IT;
 800c110:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c114:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c118:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800c11c:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800c120:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	ea6f 0202 	mvn.w	r2, r2
 800c128:	400a      	ands	r2, r1
 800c12a:	63da      	str	r2, [r3, #60]	; 0x3c
  } 
}
 800c12c:	f107 070c 	add.w	r7, r7, #12
 800c130:	46bd      	mov	sp, r7
 800c132:	bc80      	pop	{r7}
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop

0800c138 <SDIO_GetFlagStatus>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval The new state of SDIO_FLAG (SET or RESET).
  */
FlagStatus SDIO_GetFlagStatus(uint32_t SDIO_FLAG)
{ 
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800c140:	f04f 0300 	mov.w	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_FLAG(SDIO_FLAG));
  
  if ((SDIO->STA & SDIO_FLAG) != (uint32_t)RESET)
 800c146:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c14a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c14e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4013      	ands	r3, r2
 800c154:	2b00      	cmp	r3, #0
 800c156:	d003      	beq.n	800c160 <SDIO_GetFlagStatus+0x28>
  {
    bitstatus = SET;
 800c158:	f04f 0301 	mov.w	r3, #1
 800c15c:	73fb      	strb	r3, [r7, #15]
 800c15e:	e002      	b.n	800c166 <SDIO_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800c160:	f04f 0300 	mov.w	r3, #0
 800c164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c166:	7bfb      	ldrb	r3, [r7, #15]
}
 800c168:	4618      	mov	r0, r3
 800c16a:	f107 0714 	add.w	r7, r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr

0800c174 <SDIO_ClearFlag>:
  *            @arg SDIO_FLAG_SDIOIT:   SD I/O interrupt received
  *            @arg SDIO_FLAG_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearFlag(uint32_t SDIO_FLAG)
{ 
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_FLAG(SDIO_FLAG));
   
  SDIO->ICR = SDIO_FLAG;
 800c17c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c180:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c188:	f107 070c 	add.w	r7, r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bc80      	pop	{r7}
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop

0800c194 <SDIO_GetITStatus>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61 interrupt
  * @retval The new state of SDIO_IT (SET or RESET).
  */
ITStatus SDIO_GetITStatus(uint32_t SDIO_IT)
{ 
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800c19c:	f04f 0300 	mov.w	r3, #0
 800c1a0:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_SDIO_GET_IT(SDIO_IT));
  if ((SDIO->STA & SDIO_IT) != (uint32_t)RESET)  
 800c1a2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c1a6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c1aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4013      	ands	r3, r2
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d003      	beq.n	800c1bc <SDIO_GetITStatus+0x28>
  {
    bitstatus = SET;
 800c1b4:	f04f 0301 	mov.w	r3, #1
 800c1b8:	73fb      	strb	r3, [r7, #15]
 800c1ba:	e002      	b.n	800c1c2 <SDIO_GetITStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f107 0714 	add.w	r7, r7, #20
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bc80      	pop	{r7}
 800c1ce:	4770      	bx	lr

0800c1d0 <SDIO_ClearITPendingBit>:
  *            @arg SDIO_IT_SDIOIT:   SD I/O interrupt received interrupt
  *            @arg SDIO_IT_CEATAEND: CE-ATA command completion signal received for CMD61
  * @retval None
  */
void SDIO_ClearITPendingBit(uint32_t SDIO_IT)
{ 
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SDIO_CLEAR_IT(SDIO_IT));
   
  SDIO->ICR = SDIO_IT;
 800c1d8:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800c1dc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38
}
 800c1e4:	f107 070c 	add.w	r7, r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	bc80      	pop	{r7}
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop

0800c1f0 <SPI_I2S_DeInit>:
  *         is managed by the I2S peripheral clock).
  *             
  * @retval None
  */
void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));

  if (SPIx == SPI1)
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800c1fe:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800c202:	429a      	cmp	r2, r3
 800c204:	d10c      	bne.n	800c220 <SPI_I2S_DeInit+0x30>
  {
    /* Enable SPI1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
 800c206:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c20a:	f04f 0101 	mov.w	r1, #1
 800c20e:	f7fd fcc5 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    /* Release SPI1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
 800c212:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c216:	f04f 0100 	mov.w	r1, #0
 800c21a:	f7fd fcbf 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800c21e:	e026      	b.n	800c26e <SPI_I2S_DeInit+0x7e>
  }
  else if (SPIx == SPI2)
 800c220:	687a      	ldr	r2, [r7, #4]
 800c222:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c226:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d10c      	bne.n	800c248 <SPI_I2S_DeInit+0x58>
  {
    /* Enable SPI2 reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
 800c22e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c232:	f04f 0101 	mov.w	r1, #1
 800c236:	f7fd fc87 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    /* Release SPI2 from reset state */
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
 800c23a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c23e:	f04f 0100 	mov.w	r1, #0
 800c242:	f7fd fc81 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800c246:	e012      	b.n	800c26e <SPI_I2S_DeInit+0x7e>
    }
  else
  {
    if (SPIx == SPI3)
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c24e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800c252:	429a      	cmp	r2, r3
 800c254:	d10b      	bne.n	800c26e <SPI_I2S_DeInit+0x7e>
    {
      /* Enable SPI3 reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
 800c256:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c25a:	f04f 0101 	mov.w	r1, #1
 800c25e:	f7fd fc73 	bl	8009b48 <RCC_APB1PeriphResetCmd>
      /* Release SPI3 from reset state */
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
 800c262:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c266:	f04f 0100 	mov.w	r1, #0
 800c26a:	f7fd fc6d 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    }
  }
}
 800c26e:	f107 0708 	add.w	r7, r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop

0800c278 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 800c278:	b480      	push	{r7}
 800c27a:	b085      	sub	sp, #20
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800c282:	f04f 0300 	mov.w	r3, #0
 800c286:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 800c28e:	89fb      	ldrh	r3, [r7, #14]
 800c290:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800c294:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	881a      	ldrh	r2, [r3, #0]
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	885b      	ldrh	r3, [r3, #2]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c2be:	4313      	orrs	r3, r2
 800c2c0:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	89fb      	ldrh	r3, [r7, #14]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	89fa      	ldrh	r2, [r7, #14]
 800c2dc:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	8b9b      	ldrh	r3, [r3, #28]
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	8a1a      	ldrh	r2, [r3, #16]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	821a      	strh	r2, [r3, #16]
}
 800c2f6:	f107 0714 	add.w	r7, r7, #20
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bc80      	pop	{r7}
 800c2fe:	4770      	bx	lr

0800c300 <I2S_Init>:
  *         to the value of the the source clock frequency (in Hz).
  *  
  * @retval None
  */
void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
{
 800c300:	b480      	push	{r7}
 800c302:	b08b      	sub	sp, #44	; 0x2c
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 800c30a:	f04f 0300 	mov.w	r3, #0
 800c30e:	837b      	strh	r3, [r7, #26]
 800c310:	f04f 0302 	mov.w	r3, #2
 800c314:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c316:	f04f 0300 	mov.w	r3, #0
 800c31a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c31c:	f04f 0301 	mov.w	r3, #1
 800c320:	847b      	strh	r3, [r7, #34]	; 0x22
  uint32_t tmp = 0, i2sclk = 0;
 800c322:	f04f 0300 	mov.w	r3, #0
 800c326:	61fb      	str	r3, [r7, #28]
 800c328:	f04f 0300 	mov.w	r3, #0
 800c32c:	617b      	str	r3, [r7, #20]
#ifndef I2S_EXTERNAL_CLOCK_VAL
  uint32_t pllm = 0, plln = 0, pllr = 0;
 800c32e:	f04f 0300 	mov.w	r3, #0
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	f04f 0300 	mov.w	r3, #0
 800c338:	60fb      	str	r3, [r7, #12]
 800c33a:	f04f 0300 	mov.w	r3, #0
 800c33e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  SPIx->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	8b9b      	ldrh	r3, [r3, #28]
 800c344:	b29b      	uxth	r3, r3
 800c346:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800c34a:	f023 031f 	bic.w	r3, r3, #31
 800c34e:	b29a      	uxth	r2, r3
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	839a      	strh	r2, [r3, #28]
  SPIx->I2SPR = 0x0002;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f04f 0202 	mov.w	r2, #2
 800c35a:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = SPIx->I2SCFGR;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	8b9b      	ldrh	r3, [r3, #28]
 800c360:	837b      	strh	r3, [r7, #26]
  
  /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
  if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	2b02      	cmp	r3, #2
 800c368:	d106      	bne.n	800c378 <I2S_Init+0x78>
  {
    i2sodd = (uint16_t)0;
 800c36a:	f04f 0300 	mov.w	r3, #0
 800c36e:	84bb      	strh	r3, [r7, #36]	; 0x24
    i2sdiv = (uint16_t)2;   
 800c370:	f04f 0302 	mov.w	r3, #2
 800c374:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c376:	e09a      	b.n	800c4ae <I2S_Init+0x1ae>
  }
  /* If the requested audio frequency is not the default, compute the prescaler */
  else
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	889b      	ldrh	r3, [r3, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d103      	bne.n	800c388 <I2S_Init+0x88>
    {
      /* Packet length is 16 bits */
      packetlength = 1;
 800c380:	f04f 0301 	mov.w	r3, #1
 800c384:	847b      	strh	r3, [r7, #34]	; 0x22
 800c386:	e002      	b.n	800c38e <I2S_Init+0x8e>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 2;
 800c388:	f04f 0302 	mov.w	r3, #2
 800c38c:	847b      	strh	r3, [r7, #34]	; 0x22
    /* Set the I2S clock to the external clock  value */
    i2sclk = I2S_EXTERNAL_CLOCK_VAL;

  #else /* There is no define for External I2S clock source */
    /* Set PLLI2S as I2S clock source */
    if ((RCC->CFGR & RCC_CFGR_I2SSRC) != 0)
 800c38e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c392:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00b      	beq.n	800c3b8 <I2S_Init+0xb8>
    {
      RCC->CFGR &= ~(uint32_t)RCC_CFGR_I2SSRC;
 800c3a0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3a4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3a8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800c3ac:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800c3b0:	6892      	ldr	r2, [r2, #8]
 800c3b2:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800c3b6:	609a      	str	r2, [r3, #8]
    }    
    
    /* Get the PLLI2SN value */
    plln = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6) & \
 800c3b8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3c0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800c3c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	ea4f 1393 	mov.w	r3, r3, lsr #6
 800c3ce:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800c3d2:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800c3d6:	60fb      	str	r3, [r7, #12]
                      (RCC_PLLI2SCFGR_PLLI2SN >> 6));
    
    /* Get the PLLI2SR value */
    pllr = (uint32_t)(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28) & \
 800c3d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3e4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c3e8:	ea4f 7313 	mov.w	r3, r3, lsr #28
 800c3ec:	f003 0307 	and.w	r3, r3, #7
 800c3f0:	60bb      	str	r3, [r7, #8]
                      (RCC_PLLI2SCFGR_PLLI2SR >> 28));
    
    /* Get the PLLM value */
    pllm = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);      
 800c3f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800c3f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c400:	613b      	str	r3, [r7, #16]
    
    /* Get the I2S source clock value */
    i2sclk = (uint32_t)(((HSE_VALUE / pllm) * plln) / pllr);
 800c402:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 800c406:	f2c0 037a 	movt	r3, #122	; 0x7a
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	fb02 f203 	mul.w	r2, r2, r3
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	fbb2 f3f3 	udiv	r3, r2, r3
 800c41c:	617b      	str	r3, [r7, #20]
  #endif /* I2S_EXTERNAL_CLOCK_VAL */
    
    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	88db      	ldrh	r3, [r3, #6]
 800c422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c426:	d113      	bne.n	800c450 <I2S_Init+0x150>
    {
      /* MCLK output is enabled */
      tmp = (uint16_t)(((((i2sclk / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	ea4f 2213 	mov.w	r2, r3, lsr #8
 800c42e:	4613      	mov	r3, r2
 800c430:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c434:	189b      	adds	r3, r3, r2
 800c436:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c43a:	461a      	mov	r2, r3
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	fbb2 f3f3 	udiv	r3, r2, r3
 800c444:	b29b      	uxth	r3, r3
 800c446:	f103 0305 	add.w	r3, r3, #5
 800c44a:	b29b      	uxth	r3, r3
 800c44c:	61fb      	str	r3, [r7, #28]
 800c44e:	e015      	b.n	800c47c <I2S_Init+0x17c>
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint16_t)(((((i2sclk / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 800c450:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c452:	ea4f 1343 	mov.w	r3, r3, lsl #5
 800c456:	697a      	ldr	r2, [r7, #20]
 800c458:	fbb2 f2f3 	udiv	r2, r2, r3
 800c45c:	4613      	mov	r3, r2
 800c45e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800c462:	189b      	adds	r3, r3, r2
 800c464:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c468:	461a      	mov	r2, r3
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	689b      	ldr	r3, [r3, #8]
 800c46e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c472:	b29b      	uxth	r3, r3
 800c474:	f103 0305 	add.w	r3, r3, #5
 800c478:	b29b      	uxth	r3, r3
 800c47a:	61fb      	str	r3, [r7, #28]
    }
    
    /* Remove the flatting point */
    tmp = tmp / 10;  
 800c47c:	69fa      	ldr	r2, [r7, #28]
 800c47e:	f64c 43cd 	movw	r3, #52429	; 0xcccd
 800c482:	f6cc 43cc 	movt	r3, #52428	; 0xcccc
 800c486:	fba3 1302 	umull	r1, r3, r3, r2
 800c48a:	ea4f 03d3 	mov.w	r3, r3, lsr #3
 800c48e:	61fb      	str	r3, [r7, #28]
      
    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 800c490:	69fb      	ldr	r3, [r7, #28]
 800c492:	b29b      	uxth	r3, r3
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	84bb      	strh	r3, [r7, #36]	; 0x24
   
    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 800c49a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c49c:	69fa      	ldr	r2, [r7, #28]
 800c49e:	1ad3      	subs	r3, r2, r3
 800c4a0:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800c4a4:	84fb      	strh	r3, [r7, #38]	; 0x26
   
    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint16_t) (i2sodd << 8);
 800c4a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a8:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800c4ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 800c4ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d902      	bls.n	800c4ba <I2S_Init+0x1ba>
 800c4b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4b6:	2bff      	cmp	r3, #255	; 0xff
 800c4b8:	d905      	bls.n	800c4c6 <I2S_Init+0x1c6>
  {
    /* Set the default values */
    i2sdiv = 2;
 800c4ba:	f04f 0302 	mov.w	r3, #2
 800c4be:	84fb      	strh	r3, [r7, #38]	; 0x26
    i2sodd = 0;
 800c4c0:	f04f 0300 	mov.w	r3, #0
 800c4c4:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	88da      	ldrh	r2, [r3, #6]
 800c4ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4d2:	4313      	orrs	r3, r2
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	841a      	strh	r2, [r3, #32]
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	881a      	ldrh	r2, [r3, #0]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	8859      	ldrh	r1, [r3, #2]
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	8898      	ldrh	r0, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	899b      	ldrh	r3, [r3, #12]
  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c4ea:	4303      	orrs	r3, r0
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	430b      	orrs	r3, r1
 800c4f0:	b29b      	uxth	r3, r3

  /* Write to SPIx I2SPR register the computed value */
  SPIx->I2SPR = (uint16_t)((uint16_t)i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	8b7b      	ldrh	r3, [r7, #26]
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c500:	837b      	strh	r3, [r7, #26]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  SPIx->I2SCFGR = tmpreg;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	8b7a      	ldrh	r2, [r7, #26]
 800c506:	839a      	strh	r2, [r3, #28]
}
 800c508:	f107 072c 	add.w	r7, r7, #44	; 0x2c
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bc80      	pop	{r7}
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop

0800c514 <SPI_StructInit>:
  * @brief  Fills each SPI_InitStruct member with its default value.
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure which will be initialized.
  * @retval None
  */
void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
/*--------------- Reset SPI init structure parameters values -----------------*/
  /* Initialize the SPI_Direction member */
  SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f04f 0200 	mov.w	r2, #0
 800c522:	801a      	strh	r2, [r3, #0]
  /* initialize the SPI_Mode member */
  SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f04f 0200 	mov.w	r2, #0
 800c52a:	805a      	strh	r2, [r3, #2]
  /* initialize the SPI_DataSize member */
  SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f04f 0200 	mov.w	r2, #0
 800c532:	809a      	strh	r2, [r3, #4]
  /* Initialize the SPI_CPOL member */
  SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	80da      	strh	r2, [r3, #6]
  /* Initialize the SPI_CPHA member */
  SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f04f 0200 	mov.w	r2, #0
 800c542:	811a      	strh	r2, [r3, #8]
  /* Initialize the SPI_NSS member */
  SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f04f 0200 	mov.w	r2, #0
 800c54a:	815a      	strh	r2, [r3, #10]
  /* Initialize the SPI_BaudRatePrescaler member */
  SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f04f 0200 	mov.w	r2, #0
 800c552:	819a      	strh	r2, [r3, #12]
  /* Initialize the SPI_FirstBit member */
  SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f04f 0200 	mov.w	r2, #0
 800c55a:	81da      	strh	r2, [r3, #14]
  /* Initialize the SPI_CRCPolynomial member */
  SPI_InitStruct->SPI_CRCPolynomial = 7;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f04f 0207 	mov.w	r2, #7
 800c562:	821a      	strh	r2, [r3, #16]
}
 800c564:	f107 070c 	add.w	r7, r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	bc80      	pop	{r7}
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop

0800c570 <I2S_StructInit>:
  * @brief  Fills each I2S_InitStruct member with its default value.
  * @param  I2S_InitStruct: pointer to a I2S_InitTypeDef structure which will be initialized.
  * @retval None
  */
void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
/*--------------- Reset I2S init structure parameters values -----------------*/
  /* Initialize the I2S_Mode member */
  I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f04f 0200 	mov.w	r2, #0
 800c57e:	801a      	strh	r2, [r3, #0]
  
  /* Initialize the I2S_Standard member */
  I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f04f 0200 	mov.w	r2, #0
 800c586:	805a      	strh	r2, [r3, #2]
  
  /* Initialize the I2S_DataFormat member */
  I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f04f 0200 	mov.w	r2, #0
 800c58e:	809a      	strh	r2, [r3, #4]
  
  /* Initialize the I2S_MCLKOutput member */
  I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	f04f 0200 	mov.w	r2, #0
 800c596:	80da      	strh	r2, [r3, #6]
  
  /* Initialize the I2S_AudioFreq member */
  I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f04f 0202 	mov.w	r2, #2
 800c59e:	609a      	str	r2, [r3, #8]
  
  /* Initialize the I2S_CPOL member */
  I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f04f 0200 	mov.w	r2, #0
 800c5a6:	819a      	strh	r2, [r3, #12]
}
 800c5a8:	f107 070c 	add.w	r7, r7, #12
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bc80      	pop	{r7}
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop

0800c5b4 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b083      	sub	sp, #12
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	460b      	mov	r3, r1
 800c5be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c5c0:	78fb      	ldrb	r3, [r7, #3]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d008      	beq.n	800c5d8 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	881b      	ldrh	r3, [r3, #0]
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d0:	b29a      	uxth	r2, r3
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	801a      	strh	r2, [r3, #0]
 800c5d6:	e007      	b.n	800c5e8 <SPI_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e2:	b29a      	uxth	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	801a      	strh	r2, [r3, #0]
  }
}
 800c5e8:	f107 070c 	add.w	r7, r7, #12
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bc80      	pop	{r7}
 800c5f0:	4770      	bx	lr
 800c5f2:	bf00      	nop

0800c5f4 <I2S_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_23_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800c600:	78fb      	ldrb	r3, [r7, #3]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d008      	beq.n	800c618 <I2S_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral (in I2S mode) */
    SPIx->I2SCFGR |= SPI_I2SCFGR_I2SE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	8b9b      	ldrh	r3, [r3, #28]
 800c60a:	b29b      	uxth	r3, r3
 800c60c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	839a      	strh	r2, [r3, #28]
 800c616:	e007      	b.n	800c628 <I2S_Cmd+0x34>
  }
  else
  {
    /* Disable the selected SPI peripheral in I2S mode */
    SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SE);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	8b9b      	ldrh	r3, [r3, #28]
 800c61c:	b29b      	uxth	r3, r3
 800c61e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c622:	b29a      	uxth	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	839a      	strh	r2, [r3, #28]
  }
}
 800c628:	f107 070c 	add.w	r7, r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bc80      	pop	{r7}
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop

0800c634 <SPI_DataSizeConfig>:
  *            @arg SPI_DataSize_16b: Set data frame format to 16bit
  *            @arg SPI_DataSize_8b: Set data frame format to 8bit
  * @retval None
  */
void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DATASIZE(SPI_DataSize));
  /* Clear DFF bit */
  SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	b29b      	uxth	r3, r3
 800c646:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	801a      	strh	r2, [r3, #0]
  /* Set new DFF bit value */
  SPIx->CR1 |= SPI_DataSize;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	881b      	ldrh	r3, [r3, #0]
 800c654:	b29a      	uxth	r2, r3
 800c656:	887b      	ldrh	r3, [r7, #2]
 800c658:	4313      	orrs	r3, r2
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	801a      	strh	r2, [r3, #0]
}
 800c660:	f107 070c 	add.w	r7, r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	bc80      	pop	{r7}
 800c668:	4770      	bx	lr
 800c66a:	bf00      	nop

0800c66c <SPI_BiDirectionalLineConfig>:
  *            @arg SPI_Direction_Tx: Selects Tx transmission direction
  *            @arg SPI_Direction_Rx: Selects Rx receive direction
  * @retval None
  */
void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b083      	sub	sp, #12
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	460b      	mov	r3, r1
 800c676:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_DIRECTION(SPI_Direction));
  if (SPI_Direction == SPI_Direction_Tx)
 800c678:	887b      	ldrh	r3, [r7, #2]
 800c67a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c67e:	d108      	bne.n	800c692 <SPI_BiDirectionalLineConfig+0x26>
  {
    /* Set the Tx only mode */
    SPIx->CR1 |= SPI_Direction_Tx;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	881b      	ldrh	r3, [r3, #0]
 800c684:	b29b      	uxth	r3, r3
 800c686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	801a      	strh	r2, [r3, #0]
 800c690:	e007      	b.n	800c6a2 <SPI_BiDirectionalLineConfig+0x36>
  }
  else
  {
    /* Set the Rx only mode */
    SPIx->CR1 &= SPI_Direction_Rx;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	b29b      	uxth	r3, r3
 800c698:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	801a      	strh	r2, [r3, #0]
  }
}
 800c6a2:	f107 070c 	add.w	r7, r7, #12
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bc80      	pop	{r7}
 800c6aa:	4770      	bx	lr

0800c6ac <SPI_NSSInternalSoftwareConfig>:
  *            @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
  *            @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
  * @retval None
  */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b083      	sub	sp, #12
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
  if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 800c6b8:	887a      	ldrh	r2, [r7, #2]
 800c6ba:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d008      	beq.n	800c6d4 <SPI_NSSInternalSoftwareConfig+0x28>
  {
    /* Set NSS pin internally by software */
    SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	881b      	ldrh	r3, [r3, #0]
 800c6c6:	b29b      	uxth	r3, r3
 800c6c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	801a      	strh	r2, [r3, #0]
 800c6d2:	e007      	b.n	800c6e4 <SPI_NSSInternalSoftwareConfig+0x38>
  }
  else
  {
    /* Reset NSS pin internally by software */
    SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	881b      	ldrh	r3, [r3, #0]
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6de:	b29a      	uxth	r2, r3
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	801a      	strh	r2, [r3, #0]
  }
}
 800c6e4:	f107 070c 	add.w	r7, r7, #12
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bc80      	pop	{r7}
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop

0800c6f0 <SPI_SSOutputCmd>:
  * @param  NewState: new state of the SPIx SS output. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c6fc:	78fb      	ldrb	r3, [r7, #3]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d008      	beq.n	800c714 <SPI_SSOutputCmd+0x24>
  {
    /* Enable the selected SPI SS output */
    SPIx->CR2 |= (uint16_t)SPI_CR2_SSOE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	889b      	ldrh	r3, [r3, #4]
 800c706:	b29b      	uxth	r3, r3
 800c708:	f043 0304 	orr.w	r3, r3, #4
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	809a      	strh	r2, [r3, #4]
 800c712:	e007      	b.n	800c724 <SPI_SSOutputCmd+0x34>
  }
  else
  {
    /* Disable the selected SPI SS output */
    SPIx->CR2 &= (uint16_t)~((uint16_t)SPI_CR2_SSOE);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	889b      	ldrh	r3, [r3, #4]
 800c718:	b29b      	uxth	r3, r3
 800c71a:	f023 0304 	bic.w	r3, r3, #4
 800c71e:	b29a      	uxth	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	809a      	strh	r2, [r3, #4]
  }
}
 800c724:	f107 070c 	add.w	r7, r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	bc80      	pop	{r7}
 800c72c:	4770      	bx	lr
 800c72e:	bf00      	nop

0800c730 <SPI_TIModeCmd>:
  * @param  NewState: new state of the selected SPI TI communication mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_TIModeCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	460b      	mov	r3, r1
 800c73a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800c73c:	78fb      	ldrb	r3, [r7, #3]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d008      	beq.n	800c754 <SPI_TIModeCmd+0x24>
  {
    /* Enable the TI mode for the selected SPI peripheral */
    SPIx->CR2 |= SPI_CR2_FRF;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	889b      	ldrh	r3, [r3, #4]
 800c746:	b29b      	uxth	r3, r3
 800c748:	f043 0310 	orr.w	r3, r3, #16
 800c74c:	b29a      	uxth	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	809a      	strh	r2, [r3, #4]
 800c752:	e007      	b.n	800c764 <SPI_TIModeCmd+0x34>
  }
  else
  {
    /* Disable the TI mode for the selected SPI peripheral */
    SPIx->CR2 &= (uint16_t)~SPI_CR2_FRF;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	889b      	ldrh	r3, [r3, #4]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f023 0310 	bic.w	r3, r3, #16
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	809a      	strh	r2, [r3, #4]
  }
}
 800c764:	f107 070c 	add.w	r7, r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	bc80      	pop	{r7}
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop

0800c770 <I2S_FullDuplexConfig>:
  * @note   The I2S full duplex extension can be configured in slave mode only.    
  *  
  * @retval None
  */
void I2S_FullDuplexConfig(SPI_TypeDef* I2Sxext, I2S_InitTypeDef* I2S_InitStruct)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, tmp = 0;
 800c77a:	f04f 0300 	mov.w	r3, #0
 800c77e:	81bb      	strh	r3, [r7, #12]
 800c780:	f04f 0300 	mov.w	r3, #0
 800c784:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
  assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  

/*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  I2Sxext->I2SCFGR &= I2SCFGR_CLEAR_MASK; 
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	8b9b      	ldrh	r3, [r3, #28]
 800c78a:	b29b      	uxth	r3, r3
 800c78c:	f423 637a 	bic.w	r3, r3, #4000	; 0xfa0
 800c790:	f023 031f 	bic.w	r3, r3, #31
 800c794:	b29a      	uxth	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	839a      	strh	r2, [r3, #28]
  I2Sxext->I2SPR = 0x0002;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	f04f 0202 	mov.w	r2, #2
 800c7a0:	841a      	strh	r2, [r3, #32]
  
  /* Get the I2SCFGR register value */
  tmpreg = I2Sxext->I2SCFGR;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	8b9b      	ldrh	r3, [r3, #28]
 800c7a6:	81bb      	strh	r3, [r7, #12]
  
  /* Get the mode to be configured for the extended I2S */
  if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterTx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveTx))
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c7b0:	d003      	beq.n	800c7ba <I2S_FullDuplexConfig+0x4a>
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	881b      	ldrh	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d103      	bne.n	800c7c2 <I2S_FullDuplexConfig+0x52>
  {
    tmp = I2S_Mode_SlaveRx;
 800c7ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7be:	81fb      	strh	r3, [r7, #14]
 800c7c0:	e00c      	b.n	800c7dc <I2S_FullDuplexConfig+0x6c>
  }
  else
  {
    if ((I2S_InitStruct->I2S_Mode == I2S_Mode_MasterRx) || (I2S_InitStruct->I2S_Mode == I2S_Mode_SlaveRx))
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	881b      	ldrh	r3, [r3, #0]
 800c7c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ca:	d004      	beq.n	800c7d6 <I2S_FullDuplexConfig+0x66>
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	881b      	ldrh	r3, [r3, #0]
 800c7d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d4:	d102      	bne.n	800c7dc <I2S_FullDuplexConfig+0x6c>
    {
      tmp = I2S_Mode_SlaveTx;
 800c7d6:	f04f 0300 	mov.w	r3, #0
 800c7da:	81fb      	strh	r3, [r7, #14]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	885a      	ldrh	r2, [r3, #2]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	8899      	ldrh	r1, [r3, #4]
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	899b      	ldrh	r3, [r3, #12]
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	b29a      	uxth	r2, r3
    }
  }

 
  /* Configure the I2S with the SPI_InitStruct values */
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800c7f0:	89fb      	ldrh	r3, [r7, #14]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	b29a      	uxth	r2, r3
 800c7f6:	89bb      	ldrh	r3, [r7, #12]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	b29b      	uxth	r3, r3
 800c7fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c800:	81bb      	strh	r3, [r7, #12]
                  (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataFormat | \
                  (uint16_t)I2S_InitStruct->I2S_CPOL))));
 
  /* Write to SPIx I2SCFGR */  
  I2Sxext->I2SCFGR = tmpreg;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	89ba      	ldrh	r2, [r7, #12]
 800c806:	839a      	strh	r2, [r3, #28]
}
 800c808:	f107 0714 	add.w	r7, r7, #20
 800c80c:	46bd      	mov	sp, r7
 800c80e:	bc80      	pop	{r7}
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop

0800c814 <SPI_I2S_ReceiveData>:
  * @param  SPIx: To select the SPIx/I2Sx peripheral, where x can be: 1, 2 or 3 
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode. 
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	899b      	ldrh	r3, [r3, #12]
 800c820:	b29b      	uxth	r3, r3
}
 800c822:	4618      	mov	r0, r3
 800c824:	f107 070c 	add.w	r7, r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	bc80      	pop	{r7}
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop

0800c830 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 800c830:	b480      	push	{r7}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	460b      	mov	r3, r1
 800c83a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	887a      	ldrh	r2, [r7, #2]
 800c840:	819a      	strh	r2, [r3, #12]
}
 800c842:	f107 070c 	add.w	r7, r7, #12
 800c846:	46bd      	mov	sp, r7
 800c848:	bc80      	pop	{r7}
 800c84a:	4770      	bx	lr

0800c84c <SPI_CalculateCRC>:
  * @param  NewState: new state of the SPIx CRC value calculation.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	460b      	mov	r3, r1
 800c856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800c858:	78fb      	ldrb	r3, [r7, #3]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d008      	beq.n	800c870 <SPI_CalculateCRC+0x24>
  {
    /* Enable the selected SPI CRC calculation */
    SPIx->CR1 |= SPI_CR1_CRCEN;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	b29b      	uxth	r3, r3
 800c864:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c868:	b29a      	uxth	r2, r3
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	801a      	strh	r2, [r3, #0]
 800c86e:	e007      	b.n	800c880 <SPI_CalculateCRC+0x34>
  }
  else
  {
    /* Disable the selected SPI CRC calculation */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_CRCEN);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	b29b      	uxth	r3, r3
 800c876:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	801a      	strh	r2, [r3, #0]
  }
}
 800c880:	f107 070c 	add.w	r7, r7, #12
 800c884:	46bd      	mov	sp, r7
 800c886:	bc80      	pop	{r7}
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop

0800c88c <SPI_TransmitCRC>:
  * @brief  Transmit the SPIx CRC value.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval None
  */
void SPI_TransmitCRC(SPI_TypeDef* SPIx)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b083      	sub	sp, #12
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Enable the selected SPI CRC transmission */
  SPIx->CR1 |= SPI_CR1_CRCNEXT;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	881b      	ldrh	r3, [r3, #0]
 800c898:	b29b      	uxth	r3, r3
 800c89a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c89e:	b29a      	uxth	r2, r3
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	801a      	strh	r2, [r3, #0]
}
 800c8a4:	f107 070c 	add.w	r7, r7, #12
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bc80      	pop	{r7}
 800c8ac:	4770      	bx	lr
 800c8ae:	bf00      	nop

0800c8b0 <SPI_GetCRC>:
  *            @arg SPI_CRC_Tx: Selects Tx CRC register
  *            @arg SPI_CRC_Rx: Selects Rx CRC register
  * @retval The selected CRC register value..
  */
uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b085      	sub	sp, #20
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
  uint16_t crcreg = 0;
 800c8bc:	f04f 0300 	mov.w	r3, #0
 800c8c0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_CRC(SPI_CRC));
  if (SPI_CRC != SPI_CRC_Rx)
 800c8c2:	78fb      	ldrb	r3, [r7, #3]
 800c8c4:	2b01      	cmp	r3, #1
 800c8c6:	d003      	beq.n	800c8d0 <SPI_GetCRC+0x20>
  {
    /* Get the Tx CRC register */
    crcreg = SPIx->TXCRCR;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	8b1b      	ldrh	r3, [r3, #24]
 800c8cc:	81fb      	strh	r3, [r7, #14]
 800c8ce:	e002      	b.n	800c8d6 <SPI_GetCRC+0x26>
  }
  else
  {
    /* Get the Rx CRC register */
    crcreg = SPIx->RXCRCR;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	8a9b      	ldrh	r3, [r3, #20]
 800c8d4:	81fb      	strh	r3, [r7, #14]
  }
  /* Return the selected CRC register */
  return crcreg;
 800c8d6:	89fb      	ldrh	r3, [r7, #14]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f107 0714 	add.w	r7, r7, #20
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bc80      	pop	{r7}
 800c8e2:	4770      	bx	lr

0800c8e4 <SPI_GetCRCPolynomial>:
  * @brief  Returns the CRC Polynomial register value for the specified SPI.
  * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
  * @retval The CRC Polynomial register value.
  */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b083      	sub	sp, #12
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the CRC polynomial register */
  return SPIx->CRCPR;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	8a1b      	ldrh	r3, [r3, #16]
 800c8f0:	b29b      	uxth	r3, r3
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f107 070c 	add.w	r7, r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr
 800c8fe:	bf00      	nop

0800c900 <SPI_I2S_DMACmd>:
  * @param  NewState: new state of the selected SPI DMA transfer request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
 800c900:	b480      	push	{r7}
 800c902:	b083      	sub	sp, #12
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	4613      	mov	r3, r2
 800c90a:	460a      	mov	r2, r1
 800c90c:	807a      	strh	r2, [r7, #2]
 800c90e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));

  if (NewState != DISABLE)
 800c910:	787b      	ldrb	r3, [r7, #1]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d008      	beq.n	800c928 <SPI_I2S_DMACmd+0x28>
  {
    /* Enable the selected SPI DMA requests */
    SPIx->CR2 |= SPI_I2S_DMAReq;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	889b      	ldrh	r3, [r3, #4]
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	887b      	ldrh	r3, [r7, #2]
 800c91e:	4313      	orrs	r3, r2
 800c920:	b29a      	uxth	r2, r3
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	809a      	strh	r2, [r3, #4]
 800c926:	e00a      	b.n	800c93e <SPI_I2S_DMACmd+0x3e>
  }
  else
  {
    /* Disable the selected SPI DMA requests */
    SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	889b      	ldrh	r3, [r3, #4]
 800c92c:	b29a      	uxth	r2, r3
 800c92e:	887b      	ldrh	r3, [r7, #2]
 800c930:	ea6f 0303 	mvn.w	r3, r3
 800c934:	b29b      	uxth	r3, r3
 800c936:	4013      	ands	r3, r2
 800c938:	b29a      	uxth	r2, r3
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	809a      	strh	r2, [r3, #4]
  }
}
 800c93e:	f107 070c 	add.w	r7, r7, #12
 800c942:	46bd      	mov	sp, r7
 800c944:	bc80      	pop	{r7}
 800c946:	4770      	bx	lr

0800c948 <SPI_I2S_ITConfig>:
  * @param  NewState: new state of the specified SPI interrupt.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
 800c948:	b480      	push	{r7}
 800c94a:	b085      	sub	sp, #20
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	4613      	mov	r3, r2
 800c952:	460a      	mov	r2, r1
 800c954:	70fa      	strb	r2, [r7, #3]
 800c956:	70bb      	strb	r3, [r7, #2]
  uint16_t itpos = 0, itmask = 0 ;
 800c958:	f04f 0300 	mov.w	r3, #0
 800c95c:	81fb      	strh	r3, [r7, #14]
 800c95e:	f04f 0300 	mov.w	r3, #0
 800c962:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));

  /* Get the SPI IT index */
  itpos = SPI_I2S_IT >> 4;
 800c964:	78fb      	ldrb	r3, [r7, #3]
 800c966:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	81fb      	strh	r3, [r7, #14]

  /* Set the IT mask */
  itmask = (uint16_t)1 << (uint16_t)itpos;
 800c96e:	89fb      	ldrh	r3, [r7, #14]
 800c970:	f04f 0201 	mov.w	r2, #1
 800c974:	fa02 f303 	lsl.w	r3, r2, r3
 800c978:	81bb      	strh	r3, [r7, #12]

  if (NewState != DISABLE)
 800c97a:	78bb      	ldrb	r3, [r7, #2]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d008      	beq.n	800c992 <SPI_I2S_ITConfig+0x4a>
  {
    /* Enable the selected SPI interrupt */
    SPIx->CR2 |= itmask;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	889b      	ldrh	r3, [r3, #4]
 800c984:	b29a      	uxth	r2, r3
 800c986:	89bb      	ldrh	r3, [r7, #12]
 800c988:	4313      	orrs	r3, r2
 800c98a:	b29a      	uxth	r2, r3
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	809a      	strh	r2, [r3, #4]
 800c990:	e00a      	b.n	800c9a8 <SPI_I2S_ITConfig+0x60>
  }
  else
  {
    /* Disable the selected SPI interrupt */
    SPIx->CR2 &= (uint16_t)~itmask;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	889b      	ldrh	r3, [r3, #4]
 800c996:	b29a      	uxth	r2, r3
 800c998:	89bb      	ldrh	r3, [r7, #12]
 800c99a:	ea6f 0303 	mvn.w	r3, r3
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	4013      	ands	r3, r2
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	809a      	strh	r2, [r3, #4]
  }
}
 800c9a8:	f107 0714 	add.w	r7, r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bc80      	pop	{r7}
 800c9b0:	4770      	bx	lr
 800c9b2:	bf00      	nop

0800c9b4 <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	460b      	mov	r3, r1
 800c9be:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800c9c0:	f04f 0300 	mov.w	r3, #0
 800c9c4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	891b      	ldrh	r3, [r3, #8]
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	887b      	ldrh	r3, [r7, #2]
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d003      	beq.n	800c9de <SPI_I2S_GetFlagStatus+0x2a>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 800c9d6:	f04f 0301 	mov.w	r3, #1
 800c9da:	73fb      	strb	r3, [r7, #15]
 800c9dc:	e002      	b.n	800c9e4 <SPI_I2S_GetFlagStatus+0x30>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 800c9de:	f04f 0300 	mov.w	r3, #0
 800c9e2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800c9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f107 0714 	add.w	r7, r7, #20
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bc80      	pop	{r7}
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop

0800c9f4 <SPI_I2S_ClearFlag>:
  *          write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
  *  
  * @retval None
  */
void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
    
  /* Clear the selected SPI CRC Error (CRCERR) flag */
  SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 800ca00:	887b      	ldrh	r3, [r7, #2]
 800ca02:	ea6f 0303 	mvn.w	r3, r3
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	811a      	strh	r2, [r3, #8]
}
 800ca0c:	f107 070c 	add.w	r7, r7, #12
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bc80      	pop	{r7}
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop

0800ca18 <SPI_I2S_GetITStatus>:
  *            @arg I2S_IT_UDR: Underrun interrupt.  
  *            @arg SPI_I2S_IT_TIFRFE: Format Error interrupt.  
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 800ca24:	f04f 0300 	mov.w	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 800ca2a:	f04f 0300 	mov.w	r3, #0
 800ca2e:	81bb      	strh	r3, [r7, #12]
 800ca30:	f04f 0300 	mov.w	r3, #0
 800ca34:	817b      	strh	r3, [r7, #10]
 800ca36:	f04f 0300 	mov.w	r3, #0
 800ca3a:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI_I2S_IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800ca3c:	78fb      	ldrb	r3, [r7, #3]
 800ca3e:	f003 030f 	and.w	r3, r3, #15
 800ca42:	f04f 0201 	mov.w	r2, #1
 800ca46:	fa02 f303 	lsl.w	r3, r2, r3
 800ca4a:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI_I2S_IT IT mask */
  itmask = SPI_I2S_IT >> 4;
 800ca4c:	78fb      	ldrb	r3, [r7, #3]
 800ca4e:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ca52:	b2db      	uxtb	r3, r3
 800ca54:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800ca56:	897b      	ldrh	r3, [r7, #10]
 800ca58:	f04f 0201 	mov.w	r2, #1
 800ca5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca60:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	889b      	ldrh	r3, [r3, #4]
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	897b      	ldrh	r3, [r7, #10]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	891b      	ldrh	r3, [r3, #8]
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	89bb      	ldrh	r3, [r7, #12]
 800ca76:	4013      	ands	r3, r2
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d006      	beq.n	800ca8c <SPI_I2S_GetITStatus+0x74>
 800ca7e:	893b      	ldrh	r3, [r7, #8]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d003      	beq.n	800ca8c <SPI_I2S_GetITStatus+0x74>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 800ca84:	f04f 0301 	mov.w	r3, #1
 800ca88:	73fb      	strb	r3, [r7, #15]
 800ca8a:	e002      	b.n	800ca92 <SPI_I2S_GetITStatus+0x7a>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800ca8c:	f04f 0300 	mov.w	r3, #0
 800ca90:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800ca92:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	f107 0714 	add.w	r7, r7, #20
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bc80      	pop	{r7}
 800ca9e:	4770      	bx	lr

0800caa0 <SPI_I2S_ClearITPendingBit>:
  *          followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
  *          the SPI).
  * @retval None
  */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	460b      	mov	r3, r1
 800caaa:	70fb      	strb	r3, [r7, #3]
  uint16_t itpos = 0;
 800caac:	f04f 0300 	mov.w	r3, #0
 800cab0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));

  /* Get the SPI_I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	f003 030f 	and.w	r3, r3, #15
 800cab8:	f04f 0201 	mov.w	r2, #1
 800cabc:	fa02 f303 	lsl.w	r3, r2, r3
 800cac0:	81fb      	strh	r3, [r7, #14]

  /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
  SPIx->SR = (uint16_t)~itpos;
 800cac2:	89fb      	ldrh	r3, [r7, #14]
 800cac4:	ea6f 0303 	mvn.w	r3, r3
 800cac8:	b29a      	uxth	r2, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	811a      	strh	r2, [r3, #8]
}
 800cace:	f107 0714 	add.w	r7, r7, #20
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bc80      	pop	{r7}
 800cad6:	4770      	bx	lr

0800cad8 <SYSCFG_DeInit>:
  *   registers to their default reset values.
  * @param  None
  * @retval None
  */
void SYSCFG_DeInit(void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800cadc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cae0:	f04f 0101 	mov.w	r1, #1
 800cae4:	f7fd f85a 	bl	8009b9c <RCC_APB2PeriphResetCmd>
   RCC_APB2PeriphResetCmd(RCC_APB2Periph_SYSCFG, DISABLE);
 800cae8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800caec:	f04f 0100 	mov.w	r1, #0
 800caf0:	f7fd f854 	bl	8009b9c <RCC_APB2PeriphResetCmd>
}
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop

0800caf8 <SYSCFG_MemoryRemapConfig>:
  *            @arg SYSCFG_MemoryRemap_FSMC:        FSMC (Bank1 (NOR/PSRAM 1 and 2) mapped at 0x00000000
  *            @arg SYSCFG_MemoryRemap_SRAM:        Embedded SRAM (112kB) mapped at 0x00000000
  * @retval None
  */
void SYSCFG_MemoryRemapConfig(uint8_t SYSCFG_MemoryRemap)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_SYSCFG_MEMORY_REMAP_CONFING(SYSCFG_MemoryRemap));

  SYSCFG->MEMRMP = SYSCFG_MemoryRemap;
 800cb02:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb06:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb0a:	79fa      	ldrb	r2, [r7, #7]
 800cb0c:	601a      	str	r2, [r3, #0]
}
 800cb0e:	f107 070c 	add.w	r7, r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	bc80      	pop	{r7}
 800cb16:	4770      	bx	lr

0800cb18 <SYSCFG_EXTILineConfig>:
  *           This parameter can be EXTI_PinSourcex where x can be (0..15, except
  *           for EXTI_PortSourceGPIOI x can be (0..11).
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 800cb18:	b490      	push	{r4, r7}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	4602      	mov	r2, r0
 800cb20:	460b      	mov	r3, r1
 800cb22:	71fa      	strb	r2, [r7, #7]
 800cb24:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800cb26:	f04f 0300 	mov.w	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 800cb2c:	79bb      	ldrb	r3, [r7, #6]
 800cb2e:	f003 0303 	and.w	r3, r3, #3
 800cb32:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800cb36:	f04f 020f 	mov.w	r2, #15
 800cb3a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb3e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 800cb40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb44:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb48:	79ba      	ldrb	r2, [r7, #6]
 800cb4a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800cb4e:	b2d2      	uxtb	r2, r2
 800cb50:	4610      	mov	r0, r2
 800cb52:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cb56:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cb5a:	79b9      	ldrb	r1, [r7, #6]
 800cb5c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800cb60:	b2c9      	uxtb	r1, r1
 800cb62:	f101 0102 	add.w	r1, r1, #2
 800cb66:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	ea6f 0202 	mvn.w	r2, r2
 800cb70:	4011      	ands	r1, r2
 800cb72:	f100 0202 	add.w	r2, r0, #2
 800cb76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 800cb7a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cb7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cb82:	79ba      	ldrb	r2, [r7, #6]
 800cb84:	ea4f 0292 	mov.w	r2, r2, lsr #2
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	4610      	mov	r0, r2
 800cb8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800cb90:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800cb94:	79b9      	ldrb	r1, [r7, #6]
 800cb96:	ea4f 0191 	mov.w	r1, r1, lsr #2
 800cb9a:	b2c9      	uxtb	r1, r1
 800cb9c:	f101 0102 	add.w	r1, r1, #2
 800cba0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800cba4:	79fc      	ldrb	r4, [r7, #7]
 800cba6:	79ba      	ldrb	r2, [r7, #6]
 800cba8:	f002 0203 	and.w	r2, r2, #3
 800cbac:	ea4f 0282 	mov.w	r2, r2, lsl #2
 800cbb0:	fa04 f202 	lsl.w	r2, r4, r2
 800cbb4:	4311      	orrs	r1, r2
 800cbb6:	f100 0202 	add.w	r2, r0, #2
 800cbba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800cbbe:	f107 0710 	add.w	r7, r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bc90      	pop	{r4, r7}
 800cbc6:	4770      	bx	lr

0800cbc8 <SYSCFG_ETH_MediaInterfaceConfig>:
  *            @arg SYSCFG_ETH_MediaInterface_MII: MII mode selected
  *            @arg SYSCFG_ETH_MediaInterface_RMII: RMII mode selected 
  * @retval None 
  */
void SYSCFG_ETH_MediaInterfaceConfig(uint32_t SYSCFG_ETH_MediaInterface) 
{ 
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_ETH_MEDIA_INTERFACE(SYSCFG_ETH_MediaInterface)); 
  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) PMC_MII_RMII_SEL_BB = SYSCFG_ETH_MediaInterface; 
 800cbd0:	f04f 03dc 	mov.w	r3, #220	; 0xdc
 800cbd4:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800cbd8:	687a      	ldr	r2, [r7, #4]
 800cbda:	601a      	str	r2, [r3, #0]
}
 800cbdc:	f107 070c 	add.w	r7, r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	bc80      	pop	{r7}
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop

0800cbe8 <SYSCFG_CompensationCellCmd>:
  *            @arg ENABLE: I/O compensation cell enabled  
  *            @arg DISABLE: I/O compensation cell power-down mode  
  * @retval None
  */
void SYSCFG_CompensationCellCmd(FunctionalState NewState)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b083      	sub	sp, #12
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CMPCR_CMP_PD_BB = (uint32_t)NewState;
 800cbf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbf6:	f2c4 2327 	movt	r3, #16935	; 0x4227
 800cbfa:	79fa      	ldrb	r2, [r7, #7]
 800cbfc:	601a      	str	r2, [r3, #0]
}
 800cbfe:	f107 070c 	add.w	r7, r7, #12
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bc80      	pop	{r7}
 800cc06:	4770      	bx	lr

0800cc08 <SYSCFG_GetCompensationCellStatus>:
  * @brief  Checks whether the I/O Compensation Cell ready flag is set or not.
  * @param  None
  * @retval The new state of the I/O Compensation Cell ready flag (SET or RESET)
  */
FlagStatus SYSCFG_GetCompensationCellStatus(void)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b083      	sub	sp, #12
 800cc0c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800cc0e:	f04f 0300 	mov.w	r3, #0
 800cc12:	71fb      	strb	r3, [r7, #7]
    
  if ((SYSCFG->CMPCR & SYSCFG_CMPCR_READY ) != (uint32_t)RESET)
 800cc14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800cc18:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <SYSCFG_GetCompensationCellStatus+0x26>
  {
    bitstatus = SET;
 800cc26:	f04f 0301 	mov.w	r3, #1
 800cc2a:	71fb      	strb	r3, [r7, #7]
 800cc2c:	e002      	b.n	800cc34 <SYSCFG_GetCompensationCellStatus+0x2c>
  }
  else
  {
    bitstatus = RESET;
 800cc2e:	f04f 0300 	mov.w	r3, #0
 800cc32:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800cc34:	79fb      	ldrb	r3, [r7, #7]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	f107 070c 	add.w	r7, r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bc80      	pop	{r7}
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop

0800cc44 <TIM_DeInit>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval None

  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	f04f 0300 	mov.w	r3, #0
 800cc52:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d10c      	bne.n	800cc74 <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 800cc5a:	f04f 0001 	mov.w	r0, #1
 800cc5e:	f04f 0101 	mov.w	r1, #1
 800cc62:	f7fc ff9b 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 800cc66:	f04f 0001 	mov.w	r0, #1
 800cc6a:	f04f 0100 	mov.w	r1, #0
 800cc6e:	f7fc ff95 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800cc72:	e0ff      	b.n	800ce74 <TIM_DeInit+0x230>
  } 
  else if (TIMx == TIM2) 
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc7a:	d10c      	bne.n	800cc96 <TIM_DeInit+0x52>
  {     
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 800cc7c:	f04f 0001 	mov.w	r0, #1
 800cc80:	f04f 0101 	mov.w	r1, #1
 800cc84:	f7fc ff60 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800cc88:	f04f 0001 	mov.w	r0, #1
 800cc8c:	f04f 0100 	mov.w	r1, #0
 800cc90:	f7fc ff5a 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800cc94:	e0ee      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM3)
 800cc96:	687a      	ldr	r2, [r7, #4]
 800cc98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc9c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d10c      	bne.n	800ccbe <TIM_DeInit+0x7a>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 800cca4:	f04f 0002 	mov.w	r0, #2
 800cca8:	f04f 0101 	mov.w	r1, #1
 800ccac:	f7fc ff4c 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800ccb0:	f04f 0002 	mov.w	r0, #2
 800ccb4:	f04f 0100 	mov.w	r1, #0
 800ccb8:	f7fc ff46 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ccbc:	e0da      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM4)
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ccc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d10c      	bne.n	800cce6 <TIM_DeInit+0xa2>
  { 
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 800cccc:	f04f 0004 	mov.w	r0, #4
 800ccd0:	f04f 0101 	mov.w	r1, #1
 800ccd4:	f7fc ff38 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 800ccd8:	f04f 0004 	mov.w	r0, #4
 800ccdc:	f04f 0100 	mov.w	r1, #0
 800cce0:	f7fc ff32 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800cce4:	e0c6      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM5)
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ccec:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d10c      	bne.n	800cd0e <TIM_DeInit+0xca>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 800ccf4:	f04f 0008 	mov.w	r0, #8
 800ccf8:	f04f 0101 	mov.w	r1, #1
 800ccfc:	f7fc ff24 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 800cd00:	f04f 0008 	mov.w	r0, #8
 800cd04:	f04f 0100 	mov.w	r1, #0
 800cd08:	f7fc ff1e 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800cd0c:	e0b2      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM6)  
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd14:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d10c      	bne.n	800cd36 <TIM_DeInit+0xf2>
  {    
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 800cd1c:	f04f 0010 	mov.w	r0, #16
 800cd20:	f04f 0101 	mov.w	r1, #1
 800cd24:	f7fc ff10 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800cd28:	f04f 0010 	mov.w	r0, #16
 800cd2c:	f04f 0100 	mov.w	r1, #0
 800cd30:	f7fc ff0a 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800cd34:	e09e      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM7)
 800cd36:	687a      	ldr	r2, [r7, #4]
 800cd38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cd3c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d10c      	bne.n	800cd5e <TIM_DeInit+0x11a>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 800cd44:	f04f 0020 	mov.w	r0, #32
 800cd48:	f04f 0101 	mov.w	r1, #1
 800cd4c:	f7fc fefc 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 800cd50:	f04f 0020 	mov.w	r0, #32
 800cd54:	f04f 0100 	mov.w	r1, #0
 800cd58:	f7fc fef6 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800cd5c:	e08a      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM8)
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d10c      	bne.n	800cd86 <TIM_DeInit+0x142>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 800cd6c:	f04f 0002 	mov.w	r0, #2
 800cd70:	f04f 0101 	mov.w	r1, #1
 800cd74:	f7fc ff12 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);  
 800cd78:	f04f 0002 	mov.w	r0, #2
 800cd7c:	f04f 0100 	mov.w	r1, #0
 800cd80:	f7fc ff0c 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800cd84:	e076      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM9)
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cd8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d10c      	bne.n	800cdae <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 800cd94:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cd98:	f04f 0101 	mov.w	r1, #1
 800cd9c:	f7fc fefe 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 800cda0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cda4:	f04f 0100 	mov.w	r1, #0
 800cda8:	f7fc fef8 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800cdac:	e062      	b.n	800ce74 <TIM_DeInit+0x230>
   }  
  else if (TIMx == TIM10)
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800cdb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d10c      	bne.n	800cdd6 <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 800cdbc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cdc0:	f04f 0101 	mov.w	r1, #1
 800cdc4:	f7fc feea 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 800cdc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cdcc:	f04f 0100 	mov.w	r1, #0
 800cdd0:	f7fc fee4 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800cdd4:	e04e      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM11) 
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800cddc:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d10c      	bne.n	800cdfe <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 800cde4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cde8:	f04f 0101 	mov.w	r1, #1
 800cdec:	f7fc fed6 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 800cdf0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cdf4:	f04f 0100 	mov.w	r1, #0
 800cdf8:	f7fc fed0 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800cdfc:	e03a      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM12)
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce04:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d10c      	bne.n	800ce26 <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 800ce0c:	f04f 0040 	mov.w	r0, #64	; 0x40
 800ce10:	f04f 0101 	mov.w	r1, #1
 800ce14:	f7fc fe98 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 800ce18:	f04f 0040 	mov.w	r0, #64	; 0x40
 800ce1c:	f04f 0100 	mov.w	r1, #0
 800ce20:	f7fc fe92 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ce24:	e026      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else if (TIMx == TIM13) 
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ce2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d10c      	bne.n	800ce4e <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 800ce34:	f04f 0080 	mov.w	r0, #128	; 0x80
 800ce38:	f04f 0101 	mov.w	r1, #1
 800ce3c:	f7fc fe84 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 800ce40:	f04f 0080 	mov.w	r0, #128	; 0x80
 800ce44:	f04f 0100 	mov.w	r1, #0
 800ce48:	f7fc fe7e 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ce4c:	e012      	b.n	800ce74 <TIM_DeInit+0x230>
  }  
  else
  { 
    if (TIMx == TIM14) 
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce54:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ce58:	429a      	cmp	r2, r3
 800ce5a:	d10b      	bne.n	800ce74 <TIM_DeInit+0x230>
    {     
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 800ce5c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce60:	f04f 0101 	mov.w	r1, #1
 800ce64:	f7fc fe70 	bl	8009b48 <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE); 
 800ce68:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ce6c:	f04f 0100 	mov.w	r1, #0
 800ce70:	f7fc fe6a 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    }   
  }
}
 800ce74:	f107 0708 	add.w	r7, r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800ce86:	f04f 0300 	mov.w	r3, #0
 800ce8a:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	881b      	ldrh	r3, [r3, #0]
 800ce90:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	f04f 0300 	mov.w	r3, #0
 800ce98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d01f      	beq.n	800cee0 <TIM_TimeBaseInit+0x64>
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cea6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d018      	beq.n	800cee0 <TIM_TimeBaseInit+0x64>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ceb4:	d014      	beq.n	800cee0 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM2) || (TIMx == TIM3)||
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cebc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cec0:	429a      	cmp	r2, r3
 800cec2:	d00d      	beq.n	800cee0 <TIM_TimeBaseInit+0x64>
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ceca:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cece:	429a      	cmp	r2, r3
 800ced0:	d006      	beq.n	800cee0 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ced8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cedc:	429a      	cmp	r2, r3
 800cede:	d108      	bne.n	800cef2 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cee6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	885a      	ldrh	r2, [r3, #2]
 800ceec:	89fb      	ldrh	r3, [r7, #14]
 800ceee:	4313      	orrs	r3, r2
 800cef0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cef8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d00f      	beq.n	800cf20 <TIM_TimeBaseInit+0xa4>
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800cf06:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d008      	beq.n	800cf20 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800cf0e:	89fb      	ldrh	r3, [r7, #14]
 800cf10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf14:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	891a      	ldrh	r2, [r3, #8]
 800cf1a:	89fb      	ldrh	r3, [r7, #14]
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	89fa      	ldrh	r2, [r7, #14]
 800cf24:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	881a      	ldrh	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	f04f 0300 	mov.w	r3, #0
 800cf3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d006      	beq.n	800cf52 <TIM_TimeBaseInit+0xd6>
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf4a:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800cf4e:	429a      	cmp	r2, r3
 800cf50:	d104      	bne.n	800cf5c <TIM_TimeBaseInit+0xe0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	7a9b      	ldrb	r3, [r3, #10]
 800cf56:	461a      	mov	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	f04f 0201 	mov.w	r2, #1
 800cf62:	829a      	strh	r2, [r3, #20]
}
 800cf64:	f107 0714 	add.w	r7, r7, #20
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bc80      	pop	{r7}
 800cf6c:	4770      	bx	lr
 800cf6e:	bf00      	nop

0800cf70 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800cf70:	b480      	push	{r7}
 800cf72:	b083      	sub	sp, #12
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7e:	605a      	str	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f04f 0200 	mov.w	r2, #0
 800cf86:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f04f 0200 	mov.w	r2, #0
 800cf8e:	811a      	strh	r2, [r3, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f04f 0200 	mov.w	r2, #0
 800cf96:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f04f 0200 	mov.w	r2, #0
 800cf9e:	729a      	strb	r2, [r3, #10]
}
 800cfa0:	f107 070c 	add.w	r7, r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bc80      	pop	{r7}
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop

0800cfac <TIM_PrescalerConfig>:
  *            @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *            @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediatly.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	4613      	mov	r3, r2
 800cfb6:	460a      	mov	r2, r1
 800cfb8:	807a      	strh	r2, [r7, #2]
 800cfba:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	887a      	ldrh	r2, [r7, #2]
 800cfc0:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	883a      	ldrh	r2, [r7, #0]
 800cfc6:	829a      	strh	r2, [r3, #20]
}
 800cfc8:	f107 070c 	add.w	r7, r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bc80      	pop	{r7}
 800cfd0:	4770      	bx	lr
 800cfd2:	bf00      	nop

0800cfd4 <TIM_CounterModeConfig>:
  *            @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *            @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b085      	sub	sp, #20
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
 800cfe0:	f04f 0300 	mov.w	r3, #0
 800cfe4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));

  tmpcr1 = TIMx->CR1;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	881b      	ldrh	r3, [r3, #0]
 800cfea:	81fb      	strh	r3, [r7, #14]

  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cfec:	89fb      	ldrh	r3, [r7, #14]
 800cfee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cff2:	81fb      	strh	r3, [r7, #14]

  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 800cff4:	89fa      	ldrh	r2, [r7, #14]
 800cff6:	887b      	ldrh	r3, [r7, #2]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	89fa      	ldrh	r2, [r7, #14]
 800d000:	801a      	strh	r2, [r3, #0]
}
 800d002:	f107 0714 	add.w	r7, r7, #20
 800d006:	46bd      	mov	sp, r7
 800d008:	bc80      	pop	{r7}
 800d00a:	4770      	bx	lr

0800d00c <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint32_t Counter)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d01c:	f107 070c 	add.w	r7, r7, #12
 800d020:	46bd      	mov	sp, r7
 800d022:	bc80      	pop	{r7}
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop

0800d028 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint32_t Autoreload)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	683a      	ldr	r2, [r7, #0]
 800d036:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800d038:	f107 070c 	add.w	r7, r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bc80      	pop	{r7}
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop

0800d044 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Counter Register value
  */
uint32_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
 800d044:	b480      	push	{r7}
 800d046:	b083      	sub	sp, #12
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Counter Register value */
  return TIMx->CNT;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800d050:	4618      	mov	r0, r3
 800d052:	f107 070c 	add.w	r7, r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	bc80      	pop	{r7}
 800d05a:	4770      	bx	lr

0800d05c <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 14 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Get the Prescaler Register value */
  return TIMx->PSC;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d068:	b29b      	uxth	r3, r3
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	f107 070c 	add.w	r7, r7, #12
 800d070:	46bd      	mov	sp, r7
 800d072:	bc80      	pop	{r7}
 800d074:	4770      	bx	lr
 800d076:	bf00      	nop

0800d078 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d078:	b480      	push	{r7}
 800d07a:	b083      	sub	sp, #12
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	460b      	mov	r3, r1
 800d082:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d084:	78fb      	ldrb	r3, [r7, #3]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d008      	beq.n	800d09c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f043 0302 	orr.w	r3, r3, #2
 800d094:	b29a      	uxth	r2, r3
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	801a      	strh	r2, [r3, #0]
 800d09a:	e007      	b.n	800d0ac <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_UDIS;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	f023 0302 	bic.w	r3, r3, #2
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	801a      	strh	r2, [r3, #0]
  }
}
 800d0ac:	f107 070c 	add.w	r7, r7, #12
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bc80      	pop	{r7}
 800d0b4:	4770      	bx	lr
 800d0b6:	bf00      	nop

0800d0b8 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Regular: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b083      	sub	sp, #12
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));

  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 800d0c4:	887b      	ldrh	r3, [r7, #2]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d008      	beq.n	800d0dc <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	881b      	ldrh	r3, [r3, #0]
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	f043 0304 	orr.w	r3, r3, #4
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	801a      	strh	r2, [r3, #0]
 800d0da:	e007      	b.n	800d0ec <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_URS;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	881b      	ldrh	r3, [r3, #0]
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	f023 0304 	bic.w	r3, r3, #4
 800d0e6:	b29a      	uxth	r2, r3
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	801a      	strh	r2, [r3, #0]
  }
}
 800d0ec:	f107 070c 	add.w	r7, r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bc80      	pop	{r7}
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop

0800d0f8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
 800d100:	460b      	mov	r3, r1
 800d102:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800d104:	78fb      	ldrb	r3, [r7, #3]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d008      	beq.n	800d11c <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d114:	b29a      	uxth	r2, r3
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	801a      	strh	r2, [r3, #0]
 800d11a:	e007      	b.n	800d12c <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	881b      	ldrh	r3, [r3, #0]
 800d120:	b29b      	uxth	r3, r3
 800d122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d126:	b29a      	uxth	r2, r3
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	801a      	strh	r2, [r3, #0]
  }
}
 800d12c:	f107 070c 	add.w	r7, r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	bc80      	pop	{r7}
 800d134:	4770      	bx	lr
 800d136:	bf00      	nop

0800d138 <TIM_SelectOnePulseMode>:
  *            @arg TIM_OPMode_Single
  *            @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
 800d140:	460b      	mov	r3, r1
 800d142:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));

  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~TIM_CR1_OPM;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	b29b      	uxth	r3, r3
 800d14a:	f023 0308 	bic.w	r3, r3, #8
 800d14e:	b29a      	uxth	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	801a      	strh	r2, [r3, #0]

  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	881b      	ldrh	r3, [r3, #0]
 800d158:	b29a      	uxth	r2, r3
 800d15a:	887b      	ldrh	r3, [r7, #2]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	b29a      	uxth	r2, r3
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	801a      	strh	r2, [r3, #0]
}
 800d164:	f107 070c 	add.w	r7, r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	bc80      	pop	{r7}
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop

0800d170 <TIM_SetClockDivision>:
  *            @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *            @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
 800d178:	460b      	mov	r3, r1
 800d17a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));

  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)(~TIM_CR1_CKD);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	881b      	ldrh	r3, [r3, #0]
 800d180:	b29b      	uxth	r3, r3
 800d182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d186:	b29a      	uxth	r2, r3
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	801a      	strh	r2, [r3, #0]

  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	881b      	ldrh	r3, [r3, #0]
 800d190:	b29a      	uxth	r2, r3
 800d192:	887b      	ldrh	r3, [r7, #2]
 800d194:	4313      	orrs	r3, r2
 800d196:	b29a      	uxth	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	801a      	strh	r2, [r3, #0]
}
 800d19c:	f107 070c 	add.w	r7, r7, #12
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bc80      	pop	{r7}
 800d1a4:	4770      	bx	lr
 800d1a6:	bf00      	nop

0800d1a8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800d1b4:	78fb      	ldrb	r3, [r7, #3]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d008      	beq.n	800d1cc <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	881b      	ldrh	r3, [r3, #0]
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	f043 0301 	orr.w	r3, r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	801a      	strh	r2, [r3, #0]
 800d1ca:	e007      	b.n	800d1dc <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	881b      	ldrh	r3, [r3, #0]
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	f023 0301 	bic.w	r3, r3, #1
 800d1d6:	b29a      	uxth	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	801a      	strh	r2, [r3, #0]
  }
}
 800d1dc:	f107 070c 	add.w	r7, r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bc80      	pop	{r7}
 800d1e4:	4770      	bx	lr
 800d1e6:	bf00      	nop

0800d1e8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	b085      	sub	sp, #20
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d1f2:	f04f 0300 	mov.w	r3, #0
 800d1f6:	817b      	strh	r3, [r7, #10]
 800d1f8:	f04f 0300 	mov.w	r3, #0
 800d1fc:	81fb      	strh	r3, [r7, #14]
 800d1fe:	f04f 0300 	mov.w	r3, #0
 800d202:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	8c1b      	ldrh	r3, [r3, #32]
 800d208:	b29b      	uxth	r3, r3
 800d20a:	f023 0301 	bic.w	r3, r3, #1
 800d20e:	b29a      	uxth	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	8c1b      	ldrh	r3, [r3, #32]
 800d218:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	889b      	ldrh	r3, [r3, #4]
 800d21e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	8b1b      	ldrh	r3, [r3, #24]
 800d224:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC1M;
 800d226:	897b      	ldrh	r3, [r7, #10]
 800d228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d22c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC1S;
 800d22e:	897b      	ldrh	r3, [r7, #10]
 800d230:	f023 0303 	bic.w	r3, r3, #3
 800d234:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	881a      	ldrh	r2, [r3, #0]
 800d23a:	897b      	ldrh	r3, [r7, #10]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC1P;
 800d240:	89fb      	ldrh	r3, [r7, #14]
 800d242:	f023 0302 	bic.w	r3, r3, #2
 800d246:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	899a      	ldrh	r2, [r3, #12]
 800d24c:	89fb      	ldrh	r3, [r7, #14]
 800d24e:	4313      	orrs	r3, r2
 800d250:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	885a      	ldrh	r2, [r3, #2]
 800d256:	89fb      	ldrh	r3, [r7, #14]
 800d258:	4313      	orrs	r3, r2
 800d25a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	f04f 0300 	mov.w	r3, #0
 800d262:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d266:	429a      	cmp	r2, r3
 800d268:	d006      	beq.n	800d278 <TIM_OC1Init+0x90>
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d270:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d274:	429a      	cmp	r2, r3
 800d276:	d123      	bne.n	800d2c0 <TIM_OC1Init+0xd8>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800d278:	89fb      	ldrh	r3, [r7, #14]
 800d27a:	f023 0308 	bic.w	r3, r3, #8
 800d27e:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	89da      	ldrh	r2, [r3, #14]
 800d284:	89fb      	ldrh	r3, [r7, #14]
 800d286:	4313      	orrs	r3, r2
 800d288:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC1NE;
 800d28a:	89fb      	ldrh	r3, [r7, #14]
 800d28c:	f023 0304 	bic.w	r3, r3, #4
 800d290:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 800d292:	683b      	ldr	r3, [r7, #0]
 800d294:	889a      	ldrh	r2, [r3, #4]
 800d296:	89fb      	ldrh	r3, [r7, #14]
 800d298:	4313      	orrs	r3, r2
 800d29a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1;
 800d29c:	89bb      	ldrh	r3, [r7, #12]
 800d29e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2a2:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS1N;
 800d2a4:	89bb      	ldrh	r3, [r7, #12]
 800d2a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2aa:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	8a1a      	ldrh	r2, [r3, #16]
 800d2b0:	89bb      	ldrh	r3, [r7, #12]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	8a5a      	ldrh	r2, [r3, #18]
 800d2ba:	89bb      	ldrh	r3, [r7, #12]
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	89ba      	ldrh	r2, [r7, #12]
 800d2c4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	897a      	ldrh	r2, [r7, #10]
 800d2ca:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse;
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	689a      	ldr	r2, [r3, #8]
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	89fa      	ldrh	r2, [r7, #14]
 800d2d8:	841a      	strh	r2, [r3, #32]
}
 800d2da:	f107 0714 	add.w	r7, r7, #20
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bc80      	pop	{r7}
 800d2e2:	4770      	bx	lr

0800d2e4 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b085      	sub	sp, #20
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d2ee:	f04f 0300 	mov.w	r3, #0
 800d2f2:	817b      	strh	r3, [r7, #10]
 800d2f4:	f04f 0300 	mov.w	r3, #0
 800d2f8:	81fb      	strh	r3, [r7, #14]
 800d2fa:	f04f 0300 	mov.w	r3, #0
 800d2fe:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8c1b      	ldrh	r3, [r3, #32]
 800d304:	b29b      	uxth	r3, r3
 800d306:	f023 0310 	bic.w	r3, r3, #16
 800d30a:	b29a      	uxth	r2, r3
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	8c1b      	ldrh	r3, [r3, #32]
 800d314:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	889b      	ldrh	r3, [r3, #4]
 800d31a:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	8b1b      	ldrh	r3, [r3, #24]
 800d320:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR1_OC2M;
 800d322:	897b      	ldrh	r3, [r7, #10]
 800d324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d328:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR1_CC2S;
 800d32a:	897b      	ldrh	r3, [r7, #10]
 800d32c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d330:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	897b      	ldrh	r3, [r7, #10]
 800d33e:	4313      	orrs	r3, r2
 800d340:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC2P;
 800d342:	89fb      	ldrh	r3, [r7, #14]
 800d344:	f023 0320 	bic.w	r3, r3, #32
 800d348:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	899b      	ldrh	r3, [r3, #12]
 800d34e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d352:	b29a      	uxth	r2, r3
 800d354:	89fb      	ldrh	r3, [r7, #14]
 800d356:	4313      	orrs	r3, r2
 800d358:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	885b      	ldrh	r3, [r3, #2]
 800d35e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d362:	b29a      	uxth	r2, r3
 800d364:	89fb      	ldrh	r3, [r7, #14]
 800d366:	4313      	orrs	r3, r2
 800d368:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d36a:	687a      	ldr	r2, [r7, #4]
 800d36c:	f04f 0300 	mov.w	r3, #0
 800d370:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d374:	429a      	cmp	r2, r3
 800d376:	d006      	beq.n	800d386 <TIM_OC2Init+0xa2>
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d37e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d382:	429a      	cmp	r2, r3
 800d384:	d12f      	bne.n	800d3e6 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800d386:	89fb      	ldrh	r3, [r7, #14]
 800d388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d38c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	89db      	ldrh	r3, [r3, #14]
 800d392:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d396:	b29a      	uxth	r2, r3
 800d398:	89fb      	ldrh	r3, [r7, #14]
 800d39a:	4313      	orrs	r3, r2
 800d39c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC2NE;
 800d39e:	89fb      	ldrh	r3, [r7, #14]
 800d3a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3a4:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	889b      	ldrh	r3, [r3, #4]
 800d3aa:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d3ae:	b29a      	uxth	r2, r3
 800d3b0:	89fb      	ldrh	r3, [r7, #14]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2;
 800d3b6:	89bb      	ldrh	r3, [r7, #12]
 800d3b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d3bc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS2N;
 800d3be:	89bb      	ldrh	r3, [r7, #12]
 800d3c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d3c4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	8a1b      	ldrh	r3, [r3, #16]
 800d3ca:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d3ce:	b29a      	uxth	r2, r3
 800d3d0:	89bb      	ldrh	r3, [r7, #12]
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	8a5b      	ldrh	r3, [r3, #18]
 800d3da:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	89bb      	ldrh	r3, [r7, #12]
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	89ba      	ldrh	r2, [r7, #12]
 800d3ea:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	897a      	ldrh	r2, [r7, #10]
 800d3f0:	831a      	strh	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	689a      	ldr	r2, [r3, #8]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	89fa      	ldrh	r2, [r7, #14]
 800d3fe:	841a      	strh	r2, [r3, #32]
}
 800d400:	f107 0714 	add.w	r7, r7, #20
 800d404:	46bd      	mov	sp, r7
 800d406:	bc80      	pop	{r7}
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop

0800d40c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b085      	sub	sp, #20
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d416:	f04f 0300 	mov.w	r3, #0
 800d41a:	817b      	strh	r3, [r7, #10]
 800d41c:	f04f 0300 	mov.w	r3, #0
 800d420:	81fb      	strh	r3, [r7, #14]
 800d422:	f04f 0300 	mov.w	r3, #0
 800d426:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	8c1b      	ldrh	r3, [r3, #32]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d432:	b29a      	uxth	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	8c1b      	ldrh	r3, [r3, #32]
 800d43c:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	889b      	ldrh	r3, [r3, #4]
 800d442:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	8b9b      	ldrh	r3, [r3, #28]
 800d448:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800d44a:	897b      	ldrh	r3, [r7, #10]
 800d44c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d450:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800d452:	897b      	ldrh	r3, [r7, #10]
 800d454:	f023 0303 	bic.w	r3, r3, #3
 800d458:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	881a      	ldrh	r2, [r3, #0]
 800d45e:	897b      	ldrh	r3, [r7, #10]
 800d460:	4313      	orrs	r3, r2
 800d462:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800d464:	89fb      	ldrh	r3, [r7, #14]
 800d466:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d46a:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	899b      	ldrh	r3, [r3, #12]
 800d470:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d474:	b29a      	uxth	r2, r3
 800d476:	89fb      	ldrh	r3, [r7, #14]
 800d478:	4313      	orrs	r3, r2
 800d47a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	885b      	ldrh	r3, [r3, #2]
 800d480:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d484:	b29a      	uxth	r2, r3
 800d486:	89fb      	ldrh	r3, [r7, #14]
 800d488:	4313      	orrs	r3, r2
 800d48a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d48c:	687a      	ldr	r2, [r7, #4]
 800d48e:	f04f 0300 	mov.w	r3, #0
 800d492:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d496:	429a      	cmp	r2, r3
 800d498:	d006      	beq.n	800d4a8 <TIM_OC3Init+0x9c>
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d4a4:	429a      	cmp	r2, r3
 800d4a6:	d12f      	bne.n	800d508 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800d4a8:	89fb      	ldrh	r3, [r7, #14]
 800d4aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d4ae:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	89db      	ldrh	r3, [r3, #14]
 800d4b4:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d4b8:	b29a      	uxth	r2, r3
 800d4ba:	89fb      	ldrh	r3, [r7, #14]
 800d4bc:	4313      	orrs	r3, r2
 800d4be:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800d4c0:	89fb      	ldrh	r3, [r7, #14]
 800d4c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d4c6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	889b      	ldrh	r3, [r3, #4]
 800d4cc:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	89fb      	ldrh	r3, [r7, #14]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800d4d8:	89bb      	ldrh	r3, [r7, #12]
 800d4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4de:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800d4e0:	89bb      	ldrh	r3, [r7, #12]
 800d4e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d4e6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	8a1b      	ldrh	r3, [r3, #16]
 800d4ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d4f0:	b29a      	uxth	r2, r3
 800d4f2:	89bb      	ldrh	r3, [r7, #12]
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	8a5b      	ldrh	r3, [r3, #18]
 800d4fc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800d500:	b29a      	uxth	r2, r3
 800d502:	89bb      	ldrh	r3, [r7, #12]
 800d504:	4313      	orrs	r3, r2
 800d506:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	89ba      	ldrh	r2, [r7, #12]
 800d50c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	897a      	ldrh	r2, [r7, #10]
 800d512:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	689a      	ldr	r2, [r3, #8]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	89fa      	ldrh	r2, [r7, #14]
 800d520:	841a      	strh	r2, [r3, #32]
}
 800d522:	f107 0714 	add.w	r7, r7, #20
 800d526:	46bd      	mov	sp, r7
 800d528:	bc80      	pop	{r7}
 800d52a:	4770      	bx	lr

0800d52c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b085      	sub	sp, #20
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800d536:	f04f 0300 	mov.w	r3, #0
 800d53a:	81bb      	strh	r3, [r7, #12]
 800d53c:	f04f 0300 	mov.w	r3, #0
 800d540:	817b      	strh	r3, [r7, #10]
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	8c1b      	ldrh	r3, [r3, #32]
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d552:	b29a      	uxth	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	8c1b      	ldrh	r3, [r3, #32]
 800d55c:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	889b      	ldrh	r3, [r3, #4]
 800d562:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	8b9b      	ldrh	r3, [r3, #28]
 800d568:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800d56a:	89bb      	ldrh	r3, [r7, #12]
 800d56c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d570:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800d572:	89bb      	ldrh	r3, [r7, #12]
 800d574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d578:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	881b      	ldrh	r3, [r3, #0]
 800d57e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d582:	b29a      	uxth	r2, r3
 800d584:	89bb      	ldrh	r3, [r7, #12]
 800d586:	4313      	orrs	r3, r2
 800d588:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800d58a:	897b      	ldrh	r3, [r7, #10]
 800d58c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d590:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	899b      	ldrh	r3, [r3, #12]
 800d596:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	897b      	ldrh	r3, [r7, #10]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	885b      	ldrh	r3, [r3, #2]
 800d5a6:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800d5aa:	b29a      	uxth	r2, r3
 800d5ac:	897b      	ldrh	r3, [r7, #10]
 800d5ae:	4313      	orrs	r3, r2
 800d5b0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800d5b2:	687a      	ldr	r2, [r7, #4]
 800d5b4:	f04f 0300 	mov.w	r3, #0
 800d5b8:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d5bc:	429a      	cmp	r2, r3
 800d5be:	d006      	beq.n	800d5ce <TIM_OC4Init+0xa2>
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d10b      	bne.n	800d5e6 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 800d5ce:	89fb      	ldrh	r3, [r7, #14]
 800d5d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d5d4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	8a1b      	ldrh	r3, [r3, #16]
 800d5da:	ea4f 1383 	mov.w	r3, r3, lsl #6
 800d5de:	b29a      	uxth	r2, r3
 800d5e0:	89fb      	ldrh	r3, [r7, #14]
 800d5e2:	4313      	orrs	r3, r2
 800d5e4:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	89fa      	ldrh	r2, [r7, #14]
 800d5ea:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	89ba      	ldrh	r2, [r7, #12]
 800d5f0:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	689a      	ldr	r2, [r3, #8]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	897a      	ldrh	r2, [r7, #10]
 800d5fe:	841a      	strh	r2, [r3, #32]
}
 800d600:	f107 0714 	add.w	r7, r7, #20
 800d604:	46bd      	mov	sp, r7
 800d606:	bc80      	pop	{r7}
 800d608:	4770      	bx	lr
 800d60a:	bf00      	nop

0800d60c <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b083      	sub	sp, #12
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f04f 0200 	mov.w	r2, #0
 800d61a:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f04f 0200 	mov.w	r2, #0
 800d622:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f04f 0200 	mov.w	r2, #0
 800d62a:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x00000000;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f04f 0200 	mov.w	r2, #0
 800d632:	609a      	str	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f04f 0200 	mov.w	r2, #0
 800d63a:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f04f 0200 	mov.w	r2, #0
 800d642:	81da      	strh	r2, [r3, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f04f 0200 	mov.w	r2, #0
 800d64a:	821a      	strh	r2, [r3, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f04f 0200 	mov.w	r2, #0
 800d652:	825a      	strh	r2, [r3, #18]
}
 800d654:	f107 070c 	add.w	r7, r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	bc80      	pop	{r7}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop

0800d660 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 800d660:	b480      	push	{r7}
 800d662:	b085      	sub	sp, #20
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	4613      	mov	r3, r2
 800d66a:	460a      	mov	r2, r1
 800d66c:	807a      	strh	r2, [r7, #2]
 800d66e:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
 800d670:	f04f 0300 	mov.w	r3, #0
 800d674:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
 800d676:	f04f 0300 	mov.w	r3, #0
 800d67a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_OFFSET;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f103 0318 	add.w	r3, r3, #24
 800d686:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 800d688:	887b      	ldrh	r3, [r7, #2]
 800d68a:	f04f 0201 	mov.w	r2, #1
 800d68e:	fa02 f303 	lsl.w	r3, r2, r3
 800d692:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	8c1b      	ldrh	r3, [r3, #32]
 800d698:	b29a      	uxth	r2, r3
 800d69a:	897b      	ldrh	r3, [r7, #10]
 800d69c:	ea6f 0303 	mvn.w	r3, r3
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 800d6aa:	887b      	ldrh	r3, [r7, #2]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d002      	beq.n	800d6b6 <TIM_SelectOCxM+0x56>
 800d6b0:	887b      	ldrh	r3, [r7, #2]
 800d6b2:	2b08      	cmp	r3, #8
 800d6b4:	d114      	bne.n	800d6e0 <TIM_SelectOCxM+0x80>
  {
    tmp += (TIM_Channel>>1);
 800d6b6:	887b      	ldrh	r3, [r7, #2]
 800d6b8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	68fa      	ldr	r2, [r7, #12]
 800d6c0:	18d3      	adds	r3, r2, r3
 800d6c2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC13M_MASK;
 800d6c4:	68fa      	ldr	r2, [r7, #12]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	6819      	ldr	r1, [r3, #0]
 800d6ca:	f64f 738f 	movw	r3, #65423	; 0xff8f
 800d6ce:	400b      	ands	r3, r1
 800d6d0:	6013      	str	r3, [r2, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	6811      	ldr	r1, [r2, #0]
 800d6d8:	883a      	ldrh	r2, [r7, #0]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	601a      	str	r2, [r3, #0]
 800d6de:	e019      	b.n	800d714 <TIM_SelectOCxM+0xb4>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 800d6e0:	887b      	ldrh	r3, [r7, #2]
 800d6e2:	f1a3 0304 	sub.w	r3, r3, #4
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	68fa      	ldr	r2, [r7, #12]
 800d6f0:	18d3      	adds	r3, r2, r3
 800d6f2:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= CCMR_OC24M_MASK;
 800d6f4:	68fa      	ldr	r2, [r7, #12]
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6819      	ldr	r1, [r3, #0]
 800d6fa:	f648 73ff 	movw	r3, #36863	; 0x8fff
 800d6fe:	400b      	ands	r3, r1
 800d700:	6013      	str	r3, [r2, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	68fa      	ldr	r2, [r7, #12]
 800d706:	6811      	ldr	r1, [r2, #0]
 800d708:	883a      	ldrh	r2, [r7, #0]
 800d70a:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800d70e:	b292      	uxth	r2, r2
 800d710:	430a      	orrs	r2, r1
 800d712:	601a      	str	r2, [r3, #0]
  }
}
 800d714:	f107 0714 	add.w	r7, r7, #20
 800d718:	46bd      	mov	sp, r7
 800d71a:	bc80      	pop	{r7}
 800d71c:	4770      	bx	lr
 800d71e:	bf00      	nop

0800d720 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint32_t Compare1)
{
 800d720:	b480      	push	{r7}
 800d722:	b083      	sub	sp, #12
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	683a      	ldr	r2, [r7, #0]
 800d72e:	635a      	str	r2, [r3, #52]	; 0x34
}
 800d730:	f107 070c 	add.w	r7, r7, #12
 800d734:	46bd      	mov	sp, r7
 800d736:	bc80      	pop	{r7}
 800d738:	4770      	bx	lr
 800d73a:	bf00      	nop

0800d73c <TIM_SetCompare2>:
  *         peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint32_t Compare2)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
 800d744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d74c:	f107 070c 	add.w	r7, r7, #12
 800d750:	46bd      	mov	sp, r7
 800d752:	bc80      	pop	{r7}
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop

0800d758 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint32_t Compare3)
{
 800d758:	b480      	push	{r7}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	683a      	ldr	r2, [r7, #0]
 800d766:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d768:	f107 070c 	add.w	r7, r7, #12
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bc80      	pop	{r7}
 800d770:	4770      	bx	lr
 800d772:	bf00      	nop

0800d774 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint32_t Compare4)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d784:	f107 070c 	add.w	r7, r7, #12
 800d788:	46bd      	mov	sp, r7
 800d78a:	bc80      	pop	{r7}
 800d78c:	4770      	bx	lr
 800d78e:	bf00      	nop

0800d790 <TIM_ForcedOC1Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	460b      	mov	r3, r1
 800d79a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d79c:	f04f 0300 	mov.w	r3, #0
 800d7a0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	8b1b      	ldrh	r3, [r3, #24]
 800d7a6:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1M;
 800d7a8:	89fb      	ldrh	r3, [r7, #14]
 800d7aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7ae:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 800d7b0:	89fa      	ldrh	r2, [r7, #14]
 800d7b2:	887b      	ldrh	r3, [r7, #2]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	89fa      	ldrh	r2, [r7, #14]
 800d7bc:	831a      	strh	r2, [r3, #24]
}
 800d7be:	f107 0714 	add.w	r7, r7, #20
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bc80      	pop	{r7}
 800d7c6:	4770      	bx	lr

0800d7c8 <TIM_ForcedOC2Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d7d4:	f04f 0300 	mov.w	r3, #0
 800d7d8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	8b1b      	ldrh	r3, [r3, #24]
 800d7de:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2M;
 800d7e0:	89fb      	ldrh	r3, [r7, #14]
 800d7e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d7e6:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 800d7e8:	887b      	ldrh	r3, [r7, #2]
 800d7ea:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d7ee:	b29a      	uxth	r2, r3
 800d7f0:	89fb      	ldrh	r3, [r7, #14]
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	89fa      	ldrh	r2, [r7, #14]
 800d7fa:	831a      	strh	r2, [r3, #24]
}
 800d7fc:	f107 0714 	add.w	r7, r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	bc80      	pop	{r7}
 800d804:	4770      	bx	lr
 800d806:	bf00      	nop

0800d808 <TIM_ForcedOC3Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	460b      	mov	r3, r1
 800d812:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d814:	f04f 0300 	mov.w	r3, #0
 800d818:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));

  tmpccmr2 = TIMx->CCMR2;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	8b9b      	ldrh	r3, [r3, #28]
 800d81e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3M;
 800d820:	89fb      	ldrh	r3, [r7, #14]
 800d822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d826:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 800d828:	89fa      	ldrh	r2, [r7, #14]
 800d82a:	887b      	ldrh	r3, [r7, #2]
 800d82c:	4313      	orrs	r3, r2
 800d82e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	89fa      	ldrh	r2, [r7, #14]
 800d834:	839a      	strh	r2, [r3, #28]
}
 800d836:	f107 0714 	add.w	r7, r7, #20
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bc80      	pop	{r7}
 800d83e:	4770      	bx	lr

0800d840 <TIM_ForcedOC4Config>:
  *            @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *            @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
 800d840:	b480      	push	{r7}
 800d842:	b085      	sub	sp, #20
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d84c:	f04f 0300 	mov.w	r3, #0
 800d850:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	8b9b      	ldrh	r3, [r3, #28]
 800d856:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4M;
 800d858:	89fb      	ldrh	r3, [r7, #14]
 800d85a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d85e:	81fb      	strh	r3, [r7, #14]

  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 800d860:	887b      	ldrh	r3, [r7, #2]
 800d862:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d866:	b29a      	uxth	r2, r3
 800d868:	89fb      	ldrh	r3, [r7, #14]
 800d86a:	4313      	orrs	r3, r2
 800d86c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	89fa      	ldrh	r2, [r7, #14]
 800d872:	839a      	strh	r2, [r3, #28]
}
 800d874:	f107 0714 	add.w	r7, r7, #20
 800d878:	46bd      	mov	sp, r7
 800d87a:	bc80      	pop	{r7}
 800d87c:	4770      	bx	lr
 800d87e:	bf00      	nop

0800d880 <TIM_OC1PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d880:	b480      	push	{r7}
 800d882:	b085      	sub	sp, #20
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
 800d888:	460b      	mov	r3, r1
 800d88a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d88c:	f04f 0300 	mov.w	r3, #0
 800d890:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	8b1b      	ldrh	r3, [r3, #24]
 800d896:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC1PE);
 800d898:	89fb      	ldrh	r3, [r7, #14]
 800d89a:	f023 0308 	bic.w	r3, r3, #8
 800d89e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 800d8a0:	89fa      	ldrh	r2, [r7, #14]
 800d8a2:	887b      	ldrh	r3, [r7, #2]
 800d8a4:	4313      	orrs	r3, r2
 800d8a6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	89fa      	ldrh	r2, [r7, #14]
 800d8ac:	831a      	strh	r2, [r3, #24]
}
 800d8ae:	f107 0714 	add.w	r7, r7, #20
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bc80      	pop	{r7}
 800d8b6:	4770      	bx	lr

0800d8b8 <TIM_OC2PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d8c4:	f04f 0300 	mov.w	r3, #0
 800d8c8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr1 = TIMx->CCMR1;
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	8b1b      	ldrh	r3, [r3, #24]
 800d8ce:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2PE);
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8d6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 800d8d8:	887b      	ldrh	r3, [r7, #2]
 800d8da:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	89fb      	ldrh	r3, [r7, #14]
 800d8e2:	4313      	orrs	r3, r2
 800d8e4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	89fa      	ldrh	r2, [r7, #14]
 800d8ea:	831a      	strh	r2, [r3, #24]
}
 800d8ec:	f107 0714 	add.w	r7, r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	bc80      	pop	{r7}
 800d8f4:	4770      	bx	lr
 800d8f6:	bf00      	nop

0800d8f8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d8f8:	b480      	push	{r7}
 800d8fa:	b085      	sub	sp, #20
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	6078      	str	r0, [r7, #4]
 800d900:	460b      	mov	r3, r1
 800d902:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d904:	f04f 0300 	mov.w	r3, #0
 800d908:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	8b9b      	ldrh	r3, [r3, #28]
 800d90e:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800d910:	89fb      	ldrh	r3, [r7, #14]
 800d912:	f023 0308 	bic.w	r3, r3, #8
 800d916:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800d918:	89fa      	ldrh	r2, [r7, #14]
 800d91a:	887b      	ldrh	r3, [r7, #2]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	89fa      	ldrh	r2, [r7, #14]
 800d924:	839a      	strh	r2, [r3, #28]
}
 800d926:	f107 0714 	add.w	r7, r7, #20
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bc80      	pop	{r7}
 800d92e:	4770      	bx	lr

0800d930 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	460b      	mov	r3, r1
 800d93a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d93c:	f04f 0300 	mov.w	r3, #0
 800d940:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	8b9b      	ldrh	r3, [r3, #28]
 800d946:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800d948:	89fb      	ldrh	r3, [r7, #14]
 800d94a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d94e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800d950:	887b      	ldrh	r3, [r7, #2]
 800d952:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d956:	b29a      	uxth	r2, r3
 800d958:	89fb      	ldrh	r3, [r7, #14]
 800d95a:	4313      	orrs	r3, r2
 800d95c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	89fa      	ldrh	r2, [r7, #14]
 800d962:	839a      	strh	r2, [r3, #28]
}
 800d964:	f107 0714 	add.w	r7, r7, #20
 800d968:	46bd      	mov	sp, r7
 800d96a:	bc80      	pop	{r7}
 800d96c:	4770      	bx	lr
 800d96e:	bf00      	nop

0800d970 <TIM_OC1FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d970:	b480      	push	{r7}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	460b      	mov	r3, r1
 800d97a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d97c:	f04f 0300 	mov.w	r3, #0
 800d980:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	8b1b      	ldrh	r3, [r3, #24]
 800d986:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1FE;
 800d988:	89fb      	ldrh	r3, [r7, #14]
 800d98a:	f023 0304 	bic.w	r3, r3, #4
 800d98e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 800d990:	89fa      	ldrh	r2, [r7, #14]
 800d992:	887b      	ldrh	r3, [r7, #2]
 800d994:	4313      	orrs	r3, r2
 800d996:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	89fa      	ldrh	r2, [r7, #14]
 800d99c:	831a      	strh	r2, [r3, #24]
}
 800d99e:	f107 0714 	add.w	r7, r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bc80      	pop	{r7}
 800d9a6:	4770      	bx	lr

0800d9a8 <TIM_OC2FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b085      	sub	sp, #20
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800d9b4:	f04f 0300 	mov.w	r3, #0
 800d9b8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	8b1b      	ldrh	r3, [r3, #24]
 800d9be:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)(~TIM_CCMR1_OC2FE);
 800d9c0:	89fb      	ldrh	r3, [r7, #14]
 800d9c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9c6:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 800d9c8:	887b      	ldrh	r3, [r7, #2]
 800d9ca:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800d9ce:	b29a      	uxth	r2, r3
 800d9d0:	89fb      	ldrh	r3, [r7, #14]
 800d9d2:	4313      	orrs	r3, r2
 800d9d4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	89fa      	ldrh	r2, [r7, #14]
 800d9da:	831a      	strh	r2, [r3, #24]
}
 800d9dc:	f107 0714 	add.w	r7, r7, #20
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bc80      	pop	{r7}
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop

0800d9e8 <TIM_OC3FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800d9f4:	f04f 0300 	mov.w	r3, #0
 800d9f8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	8b9b      	ldrh	r3, [r3, #28]
 800d9fe:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3FE;
 800da00:	89fb      	ldrh	r3, [r7, #14]
 800da02:	f023 0304 	bic.w	r3, r3, #4
 800da06:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 800da08:	89fa      	ldrh	r2, [r7, #14]
 800da0a:	887b      	ldrh	r3, [r7, #2]
 800da0c:	4313      	orrs	r3, r2
 800da0e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	89fa      	ldrh	r2, [r7, #14]
 800da14:	839a      	strh	r2, [r3, #28]
}
 800da16:	f107 0714 	add.w	r7, r7, #20
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bc80      	pop	{r7}
 800da1e:	4770      	bx	lr

0800da20 <TIM_OC4FastConfig>:
  *            @arg TIM_OCFast_Enable: TIM output compare fast enable
  *            @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
 800da28:	460b      	mov	r3, r1
 800da2a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800da2c:	f04f 0300 	mov.w	r3, #0
 800da30:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	8b9b      	ldrh	r3, [r3, #28]
 800da36:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4FE);
 800da38:	89fb      	ldrh	r3, [r7, #14]
 800da3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800da3e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 800da40:	887b      	ldrh	r3, [r7, #2]
 800da42:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800da46:	b29a      	uxth	r2, r3
 800da48:	89fb      	ldrh	r3, [r7, #14]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	89fa      	ldrh	r2, [r7, #14]
 800da52:	839a      	strh	r2, [r3, #28]
}
 800da54:	f107 0714 	add.w	r7, r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	bc80      	pop	{r7}
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop

0800da60 <TIM_ClearOC1Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800da60:	b480      	push	{r7}
 800da62:	b085      	sub	sp, #20
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	460b      	mov	r3, r1
 800da6a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800da6c:	f04f 0300 	mov.w	r3, #0
 800da70:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	8b1b      	ldrh	r3, [r3, #24]
 800da76:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC1CE;
 800da78:	89fb      	ldrh	r3, [r7, #14]
 800da7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da7e:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 800da80:	89fa      	ldrh	r2, [r7, #14]
 800da82:	887b      	ldrh	r3, [r7, #2]
 800da84:	4313      	orrs	r3, r2
 800da86:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	89fa      	ldrh	r2, [r7, #14]
 800da8c:	831a      	strh	r2, [r3, #24]
}
 800da8e:	f107 0714 	add.w	r7, r7, #20
 800da92:	46bd      	mov	sp, r7
 800da94:	bc80      	pop	{r7}
 800da96:	4770      	bx	lr

0800da98 <TIM_ClearOC2Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
 800daa4:	f04f 0300 	mov.w	r3, #0
 800daa8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	8b1b      	ldrh	r3, [r3, #24]
 800daae:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~TIM_CCMR1_OC2CE;
 800dab0:	89fb      	ldrh	r3, [r7, #14]
 800dab2:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800dab6:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800daba:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 800dabc:	887b      	ldrh	r3, [r7, #2]
 800dabe:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dac2:	b29a      	uxth	r2, r3
 800dac4:	89fb      	ldrh	r3, [r7, #14]
 800dac6:	4313      	orrs	r3, r2
 800dac8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	89fa      	ldrh	r2, [r7, #14]
 800dace:	831a      	strh	r2, [r3, #24]
}
 800dad0:	f107 0714 	add.w	r7, r7, #20
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bc80      	pop	{r7}
 800dad8:	4770      	bx	lr
 800dada:	bf00      	nop

0800dadc <TIM_ClearOC3Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800dadc:	b480      	push	{r7}
 800dade:	b085      	sub	sp, #20
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	460b      	mov	r3, r1
 800dae6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800dae8:	f04f 0300 	mov.w	r3, #0
 800daec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	8b9b      	ldrh	r3, [r3, #28]
 800daf2:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC3CE;
 800daf4:	89fb      	ldrh	r3, [r7, #14]
 800daf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dafa:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 800dafc:	89fa      	ldrh	r2, [r7, #14]
 800dafe:	887b      	ldrh	r3, [r7, #2]
 800db00:	4313      	orrs	r3, r2
 800db02:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	89fa      	ldrh	r2, [r7, #14]
 800db08:	839a      	strh	r2, [r3, #28]
}
 800db0a:	f107 0714 	add.w	r7, r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	bc80      	pop	{r7}
 800db12:	4770      	bx	lr

0800db14 <TIM_ClearOC4Ref>:
  *            @arg TIM_OCClear_Enable: TIM Output clear enable
  *            @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	460b      	mov	r3, r1
 800db1e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800db20:	f04f 0300 	mov.w	r3, #0
 800db24:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr2 = TIMx->CCMR2;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	8b9b      	ldrh	r3, [r3, #28]
 800db2a:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~TIM_CCMR2_OC4CE;
 800db2c:	89fb      	ldrh	r3, [r7, #14]
 800db2e:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800db32:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800db36:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 800db38:	887b      	ldrh	r3, [r7, #2]
 800db3a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800db3e:	b29a      	uxth	r2, r3
 800db40:	89fb      	ldrh	r3, [r7, #14]
 800db42:	4313      	orrs	r3, r2
 800db44:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	89fa      	ldrh	r2, [r7, #14]
 800db4a:	839a      	strh	r2, [r3, #28]
}
 800db4c:	f107 0714 	add.w	r7, r7, #20
 800db50:	46bd      	mov	sp, r7
 800db52:	bc80      	pop	{r7}
 800db54:	4770      	bx	lr
 800db56:	bf00      	nop

0800db58 <TIM_OC1PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800db58:	b480      	push	{r7}
 800db5a:	b085      	sub	sp, #20
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
 800db60:	460b      	mov	r3, r1
 800db62:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800db64:	f04f 0300 	mov.w	r3, #0
 800db68:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	8c1b      	ldrh	r3, [r3, #32]
 800db6e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC1P);
 800db70:	89fb      	ldrh	r3, [r7, #14]
 800db72:	f023 0302 	bic.w	r3, r3, #2
 800db76:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
 800db78:	89fa      	ldrh	r2, [r7, #14]
 800db7a:	887b      	ldrh	r3, [r7, #2]
 800db7c:	4313      	orrs	r3, r2
 800db7e:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	89fa      	ldrh	r2, [r7, #14]
 800db84:	841a      	strh	r2, [r3, #32]
}
 800db86:	f107 0714 	add.w	r7, r7, #20
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bc80      	pop	{r7}
 800db8e:	4770      	bx	lr

0800db90 <TIM_OC1NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800db90:	b480      	push	{r7}
 800db92:	b085      	sub	sp, #20
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800db9c:	f04f 0300 	mov.w	r3, #0
 800dba0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	8c1b      	ldrh	r3, [r3, #32]
 800dba6:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC1NP;
 800dba8:	89fb      	ldrh	r3, [r7, #14]
 800dbaa:	f023 0308 	bic.w	r3, r3, #8
 800dbae:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
 800dbb0:	89fa      	ldrh	r2, [r7, #14]
 800dbb2:	887b      	ldrh	r3, [r7, #2]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	89fa      	ldrh	r2, [r7, #14]
 800dbbc:	841a      	strh	r2, [r3, #32]
}
 800dbbe:	f107 0714 	add.w	r7, r7, #20
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bc80      	pop	{r7}
 800dbc6:	4770      	bx	lr

0800dbc8 <TIM_OC2PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b085      	sub	sp, #20
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dbd4:	f04f 0300 	mov.w	r3, #0
 800dbd8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	8c1b      	ldrh	r3, [r3, #32]
 800dbde:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)(~TIM_CCER_CC2P);
 800dbe0:	89fb      	ldrh	r3, [r7, #14]
 800dbe2:	f023 0320 	bic.w	r3, r3, #32
 800dbe6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 800dbe8:	887b      	ldrh	r3, [r7, #2]
 800dbea:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	89fb      	ldrh	r3, [r7, #14]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	89fa      	ldrh	r2, [r7, #14]
 800dbfa:	841a      	strh	r2, [r3, #32]
}
 800dbfc:	f107 0714 	add.w	r7, r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bc80      	pop	{r7}
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop

0800dc08 <TIM_OC2NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dc14:	f04f 0300 	mov.w	r3, #0
 800dc18:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	8c1b      	ldrh	r3, [r3, #32]
 800dc1e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC2NP;
 800dc20:	89fb      	ldrh	r3, [r7, #14]
 800dc22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dc26:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 800dc28:	887b      	ldrh	r3, [r7, #2]
 800dc2a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	89fb      	ldrh	r3, [r7, #14]
 800dc32:	4313      	orrs	r3, r2
 800dc34:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	89fa      	ldrh	r2, [r7, #14]
 800dc3a:	841a      	strh	r2, [r3, #32]
}
 800dc3c:	f107 0714 	add.w	r7, r7, #20
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bc80      	pop	{r7}
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop

0800dc48 <TIM_OC3PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	460b      	mov	r3, r1
 800dc52:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dc54:	f04f 0300 	mov.w	r3, #0
 800dc58:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	8c1b      	ldrh	r3, [r3, #32]
 800dc5e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800dc60:	89fb      	ldrh	r3, [r7, #14]
 800dc62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dc66:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 800dc68:	887b      	ldrh	r3, [r7, #2]
 800dc6a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	89fb      	ldrh	r3, [r7, #14]
 800dc72:	4313      	orrs	r3, r2
 800dc74:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	89fa      	ldrh	r2, [r7, #14]
 800dc7a:	841a      	strh	r2, [r3, #32]
}
 800dc7c:	f107 0714 	add.w	r7, r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	bc80      	pop	{r7}
 800dc84:	4770      	bx	lr
 800dc86:	bf00      	nop

0800dc88 <TIM_OC3NPolarityConfig>:
  *            @arg TIM_OCNPolarity_High: Output Compare active high
  *            @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dc94:	f04f 0300 	mov.w	r3, #0
 800dc98:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	8c1b      	ldrh	r3, [r3, #32]
 800dc9e:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800dca0:	89fb      	ldrh	r3, [r7, #14]
 800dca2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dca6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 800dca8:	887b      	ldrh	r3, [r7, #2]
 800dcaa:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800dcae:	b29a      	uxth	r2, r3
 800dcb0:	89fb      	ldrh	r3, [r7, #14]
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	89fa      	ldrh	r2, [r7, #14]
 800dcba:	841a      	strh	r2, [r3, #32]
}
 800dcbc:	f107 0714 	add.w	r7, r7, #20
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bc80      	pop	{r7}
 800dcc4:	4770      	bx	lr
 800dcc6:	bf00      	nop

0800dcc8 <TIM_OC4PolarityConfig>:
  *            @arg TIM_OCPolarity_High: Output Compare active high
  *            @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	b085      	sub	sp, #20
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
 800dcd4:	f04f 0300 	mov.w	r3, #0
 800dcd8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));

  tmpccer = TIMx->CCER;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	8c1b      	ldrh	r3, [r3, #32]
 800dcde:	81fb      	strh	r3, [r7, #14]

  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800dce0:	89fb      	ldrh	r3, [r7, #14]
 800dce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800dce6:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 800dce8:	887b      	ldrh	r3, [r7, #2]
 800dcea:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800dcee:	b29a      	uxth	r2, r3
 800dcf0:	89fb      	ldrh	r3, [r7, #14]
 800dcf2:	4313      	orrs	r3, r2
 800dcf4:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	89fa      	ldrh	r2, [r7, #14]
 800dcfa:	841a      	strh	r2, [r3, #32]
}
 800dcfc:	f107 0714 	add.w	r7, r7, #20
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bc80      	pop	{r7}
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop

0800dd08 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b085      	sub	sp, #20
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	4613      	mov	r3, r2
 800dd12:	460a      	mov	r2, r1
 800dd14:	807a      	strh	r2, [r7, #2]
 800dd16:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800dd18:	f04f 0300 	mov.w	r3, #0
 800dd1c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 800dd1e:	887b      	ldrh	r3, [r7, #2]
 800dd20:	f04f 0201 	mov.w	r2, #1
 800dd24:	fa02 f303 	lsl.w	r3, r2, r3
 800dd28:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	8c1b      	ldrh	r3, [r3, #32]
 800dd2e:	b29a      	uxth	r2, r3
 800dd30:	89fb      	ldrh	r3, [r7, #14]
 800dd32:	ea6f 0303 	mvn.w	r3, r3
 800dd36:	b29b      	uxth	r3, r3
 800dd38:	4013      	ands	r3, r2
 800dd3a:	b29a      	uxth	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	8c1b      	ldrh	r3, [r3, #32]
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	8839      	ldrh	r1, [r7, #0]
 800dd48:	887b      	ldrh	r3, [r7, #2]
 800dd4a:	fa01 f303 	lsl.w	r3, r1, r3
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	4313      	orrs	r3, r2
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	841a      	strh	r2, [r3, #32]
}
 800dd58:	f107 0714 	add.w	r7, r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bc80      	pop	{r7}
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop

0800dd64 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 800dd64:	b480      	push	{r7}
 800dd66:	b085      	sub	sp, #20
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	460a      	mov	r2, r1
 800dd70:	807a      	strh	r2, [r7, #2]
 800dd72:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
 800dd74:	f04f 0300 	mov.w	r3, #0
 800dd78:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 800dd7a:	887b      	ldrh	r3, [r7, #2]
 800dd7c:	f04f 0204 	mov.w	r2, #4
 800dd80:	fa02 f303 	lsl.w	r3, r2, r3
 800dd84:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	8c1b      	ldrh	r3, [r3, #32]
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	89fb      	ldrh	r3, [r7, #14]
 800dd8e:	ea6f 0303 	mvn.w	r3, r3
 800dd92:	b29b      	uxth	r3, r3
 800dd94:	4013      	ands	r3, r2
 800dd96:	b29a      	uxth	r2, r3
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	8c1b      	ldrh	r3, [r3, #32]
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	8839      	ldrh	r1, [r7, #0]
 800dda4:	887b      	ldrh	r3, [r7, #2]
 800dda6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddaa:	b29b      	uxth	r3, r3
 800ddac:	4313      	orrs	r3, r2
 800ddae:	b29a      	uxth	r2, r3
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	841a      	strh	r2, [r3, #32]
}
 800ddb4:	f107 0714 	add.w	r7, r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	bc80      	pop	{r7}
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop

0800ddc0 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	881b      	ldrh	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d10f      	bne.n	800ddf2 <TIM_ICInit+0x32>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800ddd6:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800ddd8:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800ddda:	683b      	ldr	r3, [r7, #0]
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800dddc:	891b      	ldrh	r3, [r3, #8]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fcc4 	bl	800e76c <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	88db      	ldrh	r3, [r3, #6]
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	4619      	mov	r1, r3
 800ddec:	f000 f8ec 	bl	800dfc8 <TIM_SetIC1Prescaler>
 800ddf0:	e036      	b.n	800de60 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	2b04      	cmp	r3, #4
 800ddf8:	d10f      	bne.n	800de1a <TIM_ICInit+0x5a>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800ddfe:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800de00:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800de02:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_LIST2_PERIPH(TIMx));
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800de04:	891b      	ldrh	r3, [r3, #8]
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fcf0 	bl	800e7ec <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	88db      	ldrh	r3, [r3, #6]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	4619      	mov	r1, r3
 800de14:	f000 f8f4 	bl	800e000 <TIM_SetIC2Prescaler>
 800de18:	e022      	b.n	800de60 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	881b      	ldrh	r3, [r3, #0]
 800de1e:	2b08      	cmp	r3, #8
 800de20:	d10f      	bne.n	800de42 <TIM_ICInit+0x82>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800de26:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800de28:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800de2a:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800de2c:	891b      	ldrh	r3, [r3, #8]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fd2a 	bl	800e888 <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	88db      	ldrh	r3, [r3, #6]
 800de38:	6878      	ldr	r0, [r7, #4]
 800de3a:	4619      	mov	r1, r3
 800de3c:	f000 f8fe 	bl	800e03c <TIM_SetIC3Prescaler>
 800de40:	e00e      	b.n	800de60 <TIM_ICInit+0xa0>
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
 800de46:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800de48:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
 800de4a:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800de4c:	891b      	ldrh	r3, [r3, #8]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 fd60 	bl	800e914 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	88db      	ldrh	r3, [r3, #6]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	4619      	mov	r1, r3
 800de5c:	f000 f90a 	bl	800e074 <TIM_SetIC4Prescaler>
  }
}
 800de60:	f107 0708 	add.w	r7, r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f04f 0200 	mov.w	r2, #0
 800de76:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f04f 0200 	mov.w	r2, #0
 800de7e:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f04f 0201 	mov.w	r2, #1
 800de86:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f04f 0200 	mov.w	r2, #0
 800de8e:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f04f 0200 	mov.w	r2, #0
 800de96:	811a      	strh	r2, [r3, #8]
}
 800de98:	f107 070c 	add.w	r7, r7, #12
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bc80      	pop	{r7}
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop

0800dea4 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 800deae:	f04f 0300 	mov.w	r3, #0
 800deb2:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 800deb4:	f04f 0301 	mov.w	r3, #1
 800deb8:	81bb      	strh	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d103      	bne.n	800deca <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 800dec2:	f04f 0302 	mov.w	r3, #2
 800dec6:	81fb      	strh	r3, [r7, #14]
 800dec8:	e002      	b.n	800ded0 <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 800deca:	f04f 0300 	mov.w	r3, #0
 800dece:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	889b      	ldrh	r3, [r3, #4]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d103      	bne.n	800dee0 <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 800ded8:	f04f 0302 	mov.w	r3, #2
 800dedc:	81bb      	strh	r3, [r7, #12]
 800dede:	e002      	b.n	800dee6 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 800dee0:	f04f 0301 	mov.w	r3, #1
 800dee4:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	881b      	ldrh	r3, [r3, #0]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d11c      	bne.n	800df28 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800deee:	683b      	ldr	r3, [r7, #0]
 800def0:	8859      	ldrh	r1, [r3, #2]
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800def6:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 fc36 	bl	800e76c <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	88db      	ldrh	r3, [r3, #6]
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	4619      	mov	r1, r3
 800df08:	f000 f85e 	bl	800dfc8 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	891b      	ldrh	r3, [r3, #8]
 800df10:	89f9      	ldrh	r1, [r7, #14]
 800df12:	89ba      	ldrh	r2, [r7, #12]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fc69 	bl	800e7ec <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	88db      	ldrh	r3, [r3, #6]
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	4619      	mov	r1, r3
 800df22:	f000 f86d 	bl	800e000 <TIM_SetIC2Prescaler>
 800df26:	e01b      	b.n	800df60 <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	8859      	ldrh	r1, [r3, #2]
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
 800df30:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800df32:	891b      	ldrh	r3, [r3, #8]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 fc59 	bl	800e7ec <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	88db      	ldrh	r3, [r3, #6]
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	4619      	mov	r1, r3
 800df42:	f000 f85d 	bl	800e000 <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	891b      	ldrh	r3, [r3, #8]
 800df4a:	89f9      	ldrh	r1, [r7, #14]
 800df4c:	89ba      	ldrh	r2, [r7, #12]
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 fc0c 	bl	800e76c <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	88db      	ldrh	r3, [r3, #6]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	4619      	mov	r1, r3
 800df5c:	f000 f834 	bl	800dfc8 <TIM_SetIC1Prescaler>
  }
}
 800df60:	f107 0710 	add.w	r7, r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 14 except 6 and 7, to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint32_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800df68:	b480      	push	{r7}
 800df6a:	b083      	sub	sp, #12
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));

  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 800df74:	4618      	mov	r0, r3
 800df76:	f107 070c 	add.w	r7, r7, #12
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bc80      	pop	{r7}
 800df7e:	4770      	bx	lr

0800df80 <TIM_GetCapture2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint32_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	f107 070c 	add.w	r7, r7, #12
 800df92:	46bd      	mov	sp, r7
 800df94:	bc80      	pop	{r7}
 800df96:	4770      	bx	lr

0800df98 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint32_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 

  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f107 070c 	add.w	r7, r7, #12
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bc80      	pop	{r7}
 800dfae:	4770      	bx	lr

0800dfb0 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint32_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b083      	sub	sp, #12
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));

  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f107 070c 	add.w	r7, r7, #12
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bc80      	pop	{r7}
 800dfc6:	4770      	bx	lr

0800dfc8 <TIM_SetIC1Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800dfc8:	b480      	push	{r7}
 800dfca:	b083      	sub	sp, #12
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	460b      	mov	r3, r1
 800dfd2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	8b1b      	ldrh	r3, [r3, #24]
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	f023 030c 	bic.w	r3, r3, #12
 800dfde:	b29a      	uxth	r2, r3
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	831a      	strh	r2, [r3, #24]

  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	8b1b      	ldrh	r3, [r3, #24]
 800dfe8:	b29a      	uxth	r2, r3
 800dfea:	887b      	ldrh	r3, [r7, #2]
 800dfec:	4313      	orrs	r3, r2
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	831a      	strh	r2, [r3, #24]
}
 800dff4:	f107 070c 	add.w	r7, r7, #12
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bc80      	pop	{r7}
 800dffc:	4770      	bx	lr
 800dffe:	bf00      	nop

0800e000 <TIM_SetIC2Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e000:	b480      	push	{r7}
 800e002:	b083      	sub	sp, #12
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	460b      	mov	r3, r1
 800e00a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	8b1b      	ldrh	r3, [r3, #24]
 800e010:	b29b      	uxth	r3, r3
 800e012:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e016:	b29a      	uxth	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	831a      	strh	r2, [r3, #24]

  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	8b1b      	ldrh	r3, [r3, #24]
 800e020:	b29a      	uxth	r2, r3
 800e022:	887b      	ldrh	r3, [r7, #2]
 800e024:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e028:	b29b      	uxth	r3, r3
 800e02a:	4313      	orrs	r3, r2
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	831a      	strh	r2, [r3, #24]
}
 800e032:	f107 070c 	add.w	r7, r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	bc80      	pop	{r7}
 800e03a:	4770      	bx	lr

0800e03c <TIM_SetIC3Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800e03c:	b480      	push	{r7}
 800e03e:	b083      	sub	sp, #12
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	460b      	mov	r3, r1
 800e046:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	8b9b      	ldrh	r3, [r3, #28]
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	f023 030c 	bic.w	r3, r3, #12
 800e052:	b29a      	uxth	r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	839a      	strh	r2, [r3, #28]

  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	8b9b      	ldrh	r3, [r3, #28]
 800e05c:	b29a      	uxth	r2, r3
 800e05e:	887b      	ldrh	r3, [r7, #2]
 800e060:	4313      	orrs	r3, r2
 800e062:	b29a      	uxth	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	839a      	strh	r2, [r3, #28]
}
 800e068:	f107 070c 	add.w	r7, r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bc80      	pop	{r7}
 800e070:	4770      	bx	lr
 800e072:	bf00      	nop

0800e074 <TIM_SetIC4Prescaler>:
  *            @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *            @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	460b      	mov	r3, r1
 800e07e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));

  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	8b9b      	ldrh	r3, [r3, #28]
 800e084:	b29b      	uxth	r3, r3
 800e086:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	839a      	strh	r2, [r3, #28]

  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8b9b      	ldrh	r3, [r3, #28]
 800e094:	b29a      	uxth	r2, r3
 800e096:	887b      	ldrh	r3, [r7, #2]
 800e098:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	839a      	strh	r2, [r3, #28]
}
 800e0a6:	f107 070c 	add.w	r7, r7, #12
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bc80      	pop	{r7}
 800e0ae:	4770      	bx	lr

0800e0b0 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
 800e0b0:	b480      	push	{r7}
 800e0b2:	b083      	sub	sp, #12
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	881a      	ldrh	r2, [r3, #0]
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	885b      	ldrh	r3, [r3, #2]
 800e0c2:	4313      	orrs	r3, r2
 800e0c4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e0ca:	4313      	orrs	r3, r2
 800e0cc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 800e0ea:	4313      	orrs	r3, r2
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 800e0f4:	f107 070c 	add.w	r7, r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bc80      	pop	{r7}
 800e0fc:	4770      	bx	lr
 800e0fe:	bf00      	nop

0800e100 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f04f 0200 	mov.w	r2, #0
 800e10e:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f04f 0200 	mov.w	r2, #0
 800e116:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f04f 0200 	mov.w	r2, #0
 800e11e:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	f04f 0200 	mov.w	r2, #0
 800e126:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f04f 0200 	mov.w	r2, #0
 800e12e:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f04f 0200 	mov.w	r2, #0
 800e136:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f04f 0200 	mov.w	r2, #0
 800e13e:	819a      	strh	r2, [r3, #12]
}
 800e140:	f107 070c 	add.w	r7, r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	bc80      	pop	{r7}
 800e148:	4770      	bx	lr
 800e14a:	bf00      	nop

0800e14c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	460b      	mov	r3, r1
 800e156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e158:	78fb      	ldrb	r3, [r7, #3]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d00c      	beq.n	800e178 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e164:	b29b      	uxth	r3, r3
 800e166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e16a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800e176:	e00b      	b.n	800e190 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)~TIM_BDTR_MOE;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e17e:	b29b      	uxth	r3, r3
 800e180:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e184:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e188:	b29a      	uxth	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
 800e190:	f107 070c 	add.w	r7, r7, #12
 800e194:	46bd      	mov	sp, r7
 800e196:	bc80      	pop	{r7}
 800e198:	4770      	bx	lr
 800e19a:	bf00      	nop

0800e19c <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e19c:	b480      	push	{r7}
 800e19e:	b083      	sub	sp, #12
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e1a8:	78fb      	ldrb	r3, [r7, #3]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d008      	beq.n	800e1c0 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	889b      	ldrh	r3, [r3, #4]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	f043 0304 	orr.w	r3, r3, #4
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	809a      	strh	r2, [r3, #4]
 800e1be:	e007      	b.n	800e1d0 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCUS;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	889b      	ldrh	r3, [r3, #4]
 800e1c4:	b29b      	uxth	r3, r3
 800e1c6:	f023 0304 	bic.w	r3, r3, #4
 800e1ca:	b29a      	uxth	r2, r3
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	809a      	strh	r2, [r3, #4]
  }
}
 800e1d0:	f107 070c 	add.w	r7, r7, #12
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bc80      	pop	{r7}
 800e1d8:	4770      	bx	lr
 800e1da:	bf00      	nop

0800e1dc <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800e1e8:	78fb      	ldrb	r3, [r7, #3]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d008      	beq.n	800e200 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	889b      	ldrh	r3, [r3, #4]
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	f043 0301 	orr.w	r3, r3, #1
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	809a      	strh	r2, [r3, #4]
 800e1fe:	e007      	b.n	800e210 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCPC;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	889b      	ldrh	r3, [r3, #4]
 800e204:	b29b      	uxth	r3, r3
 800e206:	f023 0301 	bic.w	r3, r3, #1
 800e20a:	b29a      	uxth	r2, r3
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	809a      	strh	r2, [r3, #4]
  }
}
 800e210:	f107 070c 	add.w	r7, r7, #12
 800e214:	46bd      	mov	sp, r7
 800e216:	bc80      	pop	{r7}
 800e218:	4770      	bx	lr
 800e21a:	bf00      	nop

0800e21c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800e21c:	b480      	push	{r7}
 800e21e:	b083      	sub	sp, #12
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	4613      	mov	r3, r2
 800e226:	460a      	mov	r2, r1
 800e228:	807a      	strh	r2, [r7, #2]
 800e22a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e22c:	787b      	ldrb	r3, [r7, #1]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d008      	beq.n	800e244 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	899b      	ldrh	r3, [r3, #12]
 800e236:	b29a      	uxth	r2, r3
 800e238:	887b      	ldrh	r3, [r7, #2]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	819a      	strh	r2, [r3, #12]
 800e242:	e00a      	b.n	800e25a <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	899b      	ldrh	r3, [r3, #12]
 800e248:	b29a      	uxth	r2, r3
 800e24a:	887b      	ldrh	r3, [r7, #2]
 800e24c:	ea6f 0303 	mvn.w	r3, r3
 800e250:	b29b      	uxth	r3, r3
 800e252:	4013      	ands	r3, r2
 800e254:	b29a      	uxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	819a      	strh	r2, [r3, #12]
  }
}
 800e25a:	f107 070c 	add.w	r7, r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	bc80      	pop	{r7}
 800e262:	4770      	bx	lr

0800e264 <TIM_GenerateEvent>:
  * @note   TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.
  *        
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	460b      	mov	r3, r1
 800e26e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	887a      	ldrh	r2, [r7, #2]
 800e274:	829a      	strh	r2, [r3, #20]
}
 800e276:	f107 070c 	add.w	r7, r7, #12
 800e27a:	46bd      	mov	sp, r7
 800e27c:	bc80      	pop	{r7}
 800e27e:	4770      	bx	lr

0800e280 <TIM_GetFlagStatus>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.    
  *
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
 800e280:	b480      	push	{r7}
 800e282:	b085      	sub	sp, #20
 800e284:	af00      	add	r7, sp, #0
 800e286:	6078      	str	r0, [r7, #4]
 800e288:	460b      	mov	r3, r1
 800e28a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800e28c:	f04f 0300 	mov.w	r3, #0
 800e290:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));

  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	8a1b      	ldrh	r3, [r3, #16]
 800e296:	b29a      	uxth	r2, r3
 800e298:	887b      	ldrh	r3, [r7, #2]
 800e29a:	4013      	ands	r3, r2
 800e29c:	b29b      	uxth	r3, r3
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d003      	beq.n	800e2aa <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800e2a2:	f04f 0301 	mov.w	r3, #1
 800e2a6:	73fb      	strb	r3, [r7, #15]
 800e2a8:	e002      	b.n	800e2b0 <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800e2aa:	f04f 0300 	mov.w	r3, #0
 800e2ae:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	f107 0714 	add.w	r7, r7, #20
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bc80      	pop	{r7}
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop

0800e2c0 <TIM_ClearFlag>:
  * @note   TIM_FLAG_COM and TIM_FLAG_Break are used only with TIM1 and TIM8.
  *    
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 800e2cc:	887b      	ldrh	r3, [r7, #2]
 800e2ce:	ea6f 0303 	mvn.w	r3, r3
 800e2d2:	b29a      	uxth	r2, r3
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	821a      	strh	r2, [r3, #16]
}
 800e2d8:	f107 070c 	add.w	r7, r7, #12
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bc80      	pop	{r7}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop

0800e2e4 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800e2e4:	b480      	push	{r7}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 800e2f0:	f04f 0300 	mov.w	r3, #0
 800e2f4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800e2f6:	f04f 0300 	mov.w	r3, #0
 800e2fa:	81bb      	strh	r3, [r7, #12]
 800e2fc:	f04f 0300 	mov.w	r3, #0
 800e300:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	8a1b      	ldrh	r3, [r3, #16]
 800e306:	b29a      	uxth	r2, r3
 800e308:	887b      	ldrh	r3, [r7, #2]
 800e30a:	4013      	ands	r3, r2
 800e30c:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	899b      	ldrh	r3, [r3, #12]
 800e312:	b29a      	uxth	r2, r3
 800e314:	887b      	ldrh	r3, [r7, #2]
 800e316:	4013      	ands	r3, r2
 800e318:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800e31a:	89bb      	ldrh	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d006      	beq.n	800e32e <TIM_GetITStatus+0x4a>
 800e320:	897b      	ldrh	r3, [r7, #10]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d003      	beq.n	800e32e <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
 800e326:	f04f 0301 	mov.w	r3, #1
 800e32a:	73fb      	strb	r3, [r7, #15]
 800e32c:	e002      	b.n	800e334 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
 800e32e:	f04f 0300 	mov.w	r3, #0
 800e332:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e334:	7bfb      	ldrb	r3, [r7, #15]
}
 800e336:	4618      	mov	r0, r3
 800e338:	f107 0714 	add.w	r7, r7, #20
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bc80      	pop	{r7}
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop

0800e344 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800e344:	b480      	push	{r7}
 800e346:	b083      	sub	sp, #12
 800e348:	af00      	add	r7, sp, #0
 800e34a:	6078      	str	r0, [r7, #4]
 800e34c:	460b      	mov	r3, r1
 800e34e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800e350:	887b      	ldrh	r3, [r7, #2]
 800e352:	ea6f 0303 	mvn.w	r3, r3
 800e356:	b29a      	uxth	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	821a      	strh	r2, [r3, #16]
}
 800e35c:	f107 070c 	add.w	r7, r7, #12
 800e360:	46bd      	mov	sp, r7
 800e362:	bc80      	pop	{r7}
 800e364:	4770      	bx	lr
 800e366:	bf00      	nop

0800e368 <TIM_DMAConfig>:
  * @param  TIM_DMABurstLength: DMA Burst length. This parameter can be one value
  *         between: TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
 800e368:	b480      	push	{r7}
 800e36a:	b083      	sub	sp, #12
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]
 800e370:	4613      	mov	r3, r2
 800e372:	460a      	mov	r2, r1
 800e374:	807a      	strh	r2, [r7, #2]
 800e376:	803b      	strh	r3, [r7, #0]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));

  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 800e378:	887a      	ldrh	r2, [r7, #2]
 800e37a:	883b      	ldrh	r3, [r7, #0]
 800e37c:	4313      	orrs	r3, r2
 800e37e:	b29a      	uxth	r2, r3
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
 800e386:	f107 070c 	add.w	r7, r7, #12
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bc80      	pop	{r7}
 800e38e:	4770      	bx	lr

0800e390 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	4613      	mov	r3, r2
 800e39a:	460a      	mov	r2, r1
 800e39c:	807a      	strh	r2, [r7, #2]
 800e39e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800e3a0:	787b      	ldrb	r3, [r7, #1]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d008      	beq.n	800e3b8 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	899b      	ldrh	r3, [r3, #12]
 800e3aa:	b29a      	uxth	r2, r3
 800e3ac:	887b      	ldrh	r3, [r7, #2]
 800e3ae:	4313      	orrs	r3, r2
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	819a      	strh	r2, [r3, #12]
 800e3b6:	e00a      	b.n	800e3ce <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	899b      	ldrh	r3, [r3, #12]
 800e3bc:	b29a      	uxth	r2, r3
 800e3be:	887b      	ldrh	r3, [r7, #2]
 800e3c0:	ea6f 0303 	mvn.w	r3, r3
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	4013      	ands	r3, r2
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	819a      	strh	r2, [r3, #12]
  }
}
 800e3ce:	f107 070c 	add.w	r7, r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bc80      	pop	{r7}
 800e3d6:	4770      	bx	lr

0800e3d8 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b083      	sub	sp, #12
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e3e4:	78fb      	ldrb	r3, [r7, #3]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d008      	beq.n	800e3fc <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	889b      	ldrh	r3, [r3, #4]
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	f043 0308 	orr.w	r3, r3, #8
 800e3f4:	b29a      	uxth	r2, r3
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	809a      	strh	r2, [r3, #4]
 800e3fa:	e007      	b.n	800e40c <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_CCDS;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	889b      	ldrh	r3, [r3, #4]
 800e400:	b29b      	uxth	r3, r3
 800e402:	f023 0308 	bic.w	r3, r3, #8
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	809a      	strh	r2, [r3, #4]
  }
}
 800e40c:	f107 070c 	add.w	r7, r7, #12
 800e410:	46bd      	mov	sp, r7
 800e412:	bc80      	pop	{r7}
 800e414:	4770      	bx	lr
 800e416:	bf00      	nop

0800e418 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9 or 12 to select the TIM 
  *         peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
 800e418:	b480      	push	{r7}
 800e41a:	b083      	sub	sp, #12
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));

  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)~TIM_SMCR_SMS;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	891b      	ldrh	r3, [r3, #8]
 800e424:	b29b      	uxth	r3, r3
 800e426:	f023 0307 	bic.w	r3, r3, #7
 800e42a:	b29a      	uxth	r2, r3
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	811a      	strh	r2, [r3, #8]
}
 800e430:	f107 070c 	add.w	r7, r7, #12
 800e434:	46bd      	mov	sp, r7
 800e436:	bc80      	pop	{r7}
 800e438:	4770      	bx	lr
 800e43a:	bf00      	nop

0800e43c <TIM_ITRxExternalClockConfig>:
  *            @arg TIM_TS_ITR2: Internal Trigger 2
  *            @arg TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
 800e444:	460b      	mov	r3, r1
 800e446:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 800e448:	887b      	ldrh	r3, [r7, #2]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	4619      	mov	r1, r3
 800e44e:	f000 f87d 	bl	800e54c <TIM_SelectInputTrigger>

  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	891b      	ldrh	r3, [r3, #8]
 800e456:	b29b      	uxth	r3, r3
 800e458:	f043 0307 	orr.w	r3, r3, #7
 800e45c:	b29a      	uxth	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	811a      	strh	r2, [r3, #8]
}
 800e462:	f107 0708 	add.w	r7, r7, #8
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop

0800e46c <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	8179      	strh	r1, [r7, #10]
 800e476:	813a      	strh	r2, [r7, #8]
 800e478:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));

  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 800e47a:	897b      	ldrh	r3, [r7, #10]
 800e47c:	2b60      	cmp	r3, #96	; 0x60
 800e47e:	d108      	bne.n	800e492 <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800e480:	893a      	ldrh	r2, [r7, #8]
 800e482:	88fb      	ldrh	r3, [r7, #6]
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	4611      	mov	r1, r2
 800e488:	f04f 0201 	mov.w	r2, #1
 800e48c:	f000 f9ae 	bl	800e7ec <TI2_Config>
 800e490:	e007      	b.n	800e4a2 <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 800e492:	893a      	ldrh	r2, [r7, #8]
 800e494:	88fb      	ldrh	r3, [r7, #6]
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	4611      	mov	r1, r2
 800e49a:	f04f 0201 	mov.w	r2, #1
 800e49e:	f000 f965 	bl	800e76c <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 800e4a2:	897b      	ldrh	r3, [r7, #10]
 800e4a4:	68f8      	ldr	r0, [r7, #12]
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	f000 f850 	bl	800e54c <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	891b      	ldrh	r3, [r3, #8]
 800e4b0:	b29b      	uxth	r3, r3
 800e4b2:	f043 0307 	orr.w	r3, r3, #7
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	811a      	strh	r2, [r3, #8]
}
 800e4bc:	f107 0710 	add.w	r7, r7, #16
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}

0800e4c4 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                            uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b086      	sub	sp, #24
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	60f8      	str	r0, [r7, #12]
 800e4cc:	8179      	strh	r1, [r7, #10]
 800e4ce:	813a      	strh	r2, [r7, #8]
 800e4d0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800e4d2:	f04f 0300 	mov.w	r3, #0
 800e4d6:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800e4d8:	8979      	ldrh	r1, [r7, #10]
 800e4da:	893a      	ldrh	r2, [r7, #8]
 800e4dc:	88fb      	ldrh	r3, [r7, #6]
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f000 f8a4 	bl	800e62c <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	891b      	ldrh	r3, [r3, #8]
 800e4e8:	82fb      	strh	r3, [r7, #22]

  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800e4ea:	8afb      	ldrh	r3, [r7, #22]
 800e4ec:	f023 0307 	bic.w	r3, r3, #7
 800e4f0:	82fb      	strh	r3, [r7, #22]

  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
 800e4f2:	8afb      	ldrh	r3, [r7, #22]
 800e4f4:	f043 0307 	orr.w	r3, r3, #7
 800e4f8:	82fb      	strh	r3, [r7, #22]

  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800e4fa:	8afb      	ldrh	r3, [r7, #22]
 800e4fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e500:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
 800e502:	8afb      	ldrh	r3, [r7, #22]
 800e504:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800e508:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	8afa      	ldrh	r2, [r7, #22]
 800e50e:	811a      	strh	r2, [r3, #8]
}
 800e510:	f107 0718 	add.w	r7, r7, #24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}

0800e518 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b084      	sub	sp, #16
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	8179      	strh	r1, [r7, #10]
 800e522:	813a      	strh	r2, [r7, #8]
 800e524:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 800e526:	8979      	ldrh	r1, [r7, #10]
 800e528:	893a      	ldrh	r2, [r7, #8]
 800e52a:	88fb      	ldrh	r3, [r7, #6]
 800e52c:	68f8      	ldr	r0, [r7, #12]
 800e52e:	f000 f87d 	bl	800e62c <TIM_ETRConfig>

  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	891b      	ldrh	r3, [r3, #8]
 800e536:	b29b      	uxth	r3, r3
 800e538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	811a      	strh	r2, [r3, #8]
}
 800e542:	f107 0710 	add.w	r7, r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop

0800e54c <TIM_SelectInputTrigger>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	460b      	mov	r3, r1
 800e556:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 800e558:	f04f 0300 	mov.w	r3, #0
 800e55c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	891b      	ldrh	r3, [r3, #8]
 800e562:	81fb      	strh	r3, [r7, #14]

  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)~TIM_SMCR_TS;
 800e564:	89fb      	ldrh	r3, [r7, #14]
 800e566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e56a:	81fb      	strh	r3, [r7, #14]

  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 800e56c:	89fa      	ldrh	r2, [r7, #14]
 800e56e:	887b      	ldrh	r3, [r7, #2]
 800e570:	4313      	orrs	r3, r2
 800e572:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	89fa      	ldrh	r2, [r7, #14]
 800e578:	811a      	strh	r2, [r3, #8]
}
 800e57a:	f107 0714 	add.w	r7, r7, #20
 800e57e:	46bd      	mov	sp, r7
 800e580:	bc80      	pop	{r7}
 800e582:	4770      	bx	lr

0800e584 <TIM_SelectOutputTrigger>:
  *            @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output(TRGO)
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	460b      	mov	r3, r1
 800e58e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~TIM_CR2_MMS;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	889b      	ldrh	r3, [r3, #4]
 800e594:	b29b      	uxth	r3, r3
 800e596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	889b      	ldrh	r3, [r3, #4]
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	887b      	ldrh	r3, [r7, #2]
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	b29a      	uxth	r2, r3
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	809a      	strh	r2, [r3, #4]
}
 800e5b0:	f107 070c 	add.w	r7, r7, #12
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bc80      	pop	{r7}
 800e5b8:	4770      	bx	lr
 800e5ba:	bf00      	nop

0800e5bc <TIM_SelectSlaveMode>:
  *            @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI
  *            @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b083      	sub	sp, #12
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	460b      	mov	r3, r1
 800e5c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));

  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_SMS;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	891b      	ldrh	r3, [r3, #8]
 800e5cc:	b29b      	uxth	r3, r3
 800e5ce:	f023 0307 	bic.w	r3, r3, #7
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	811a      	strh	r2, [r3, #8]

  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	891b      	ldrh	r3, [r3, #8]
 800e5dc:	b29a      	uxth	r2, r3
 800e5de:	887b      	ldrh	r3, [r7, #2]
 800e5e0:	4313      	orrs	r3, r2
 800e5e2:	b29a      	uxth	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	811a      	strh	r2, [r3, #8]
}
 800e5e8:	f107 070c 	add.w	r7, r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bc80      	pop	{r7}
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop

0800e5f4 <TIM_SelectMasterSlaveMode>:
  *                                             and its slaves (through TRGO)
  *            @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));

  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~TIM_SMCR_MSM;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	891b      	ldrh	r3, [r3, #8]
 800e604:	b29b      	uxth	r3, r3
 800e606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	891b      	ldrh	r3, [r3, #8]
 800e614:	b29a      	uxth	r2, r3
 800e616:	887b      	ldrh	r3, [r7, #2]
 800e618:	4313      	orrs	r3, r2
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	811a      	strh	r2, [r3, #8]
}
 800e620:	f107 070c 	add.w	r7, r7, #12
 800e624:	46bd      	mov	sp, r7
 800e626:	bc80      	pop	{r7}
 800e628:	4770      	bx	lr
 800e62a:	bf00      	nop

0800e62c <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler,
                   uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 800e62c:	b480      	push	{r7}
 800e62e:	b087      	sub	sp, #28
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	8179      	strh	r1, [r7, #10]
 800e636:	813a      	strh	r2, [r7, #8]
 800e638:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800e63a:	f04f 0300 	mov.w	r3, #0
 800e63e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));

  tmpsmcr = TIMx->SMCR;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	891b      	ldrh	r3, [r3, #8]
 800e644:	82fb      	strh	r3, [r7, #22]

  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 800e646:	8afb      	ldrh	r3, [r7, #22]
 800e648:	b2db      	uxtb	r3, r3
 800e64a:	82fb      	strh	r3, [r7, #22]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800e64c:	88fb      	ldrh	r3, [r7, #6]
 800e64e:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e652:	b29a      	uxth	r2, r3
 800e654:	893b      	ldrh	r3, [r7, #8]
 800e656:	4313      	orrs	r3, r2
 800e658:	b29a      	uxth	r2, r3
 800e65a:	897b      	ldrh	r3, [r7, #10]
 800e65c:	4313      	orrs	r3, r2
 800e65e:	b29a      	uxth	r2, r3
 800e660:	8afb      	ldrh	r3, [r7, #22]
 800e662:	4313      	orrs	r3, r2
 800e664:	82fb      	strh	r3, [r7, #22]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	8afa      	ldrh	r2, [r7, #22]
 800e66a:	811a      	strh	r2, [r3, #8]
}
 800e66c:	f107 071c 	add.w	r7, r7, #28
 800e670:	46bd      	mov	sp, r7
 800e672:	bc80      	pop	{r7}
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop

0800e678 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 800e678:	b480      	push	{r7}
 800e67a:	b087      	sub	sp, #28
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	60f8      	str	r0, [r7, #12]
 800e680:	8179      	strh	r1, [r7, #10]
 800e682:	813a      	strh	r2, [r7, #8]
 800e684:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
 800e686:	f04f 0300 	mov.w	r3, #0
 800e68a:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
 800e68c:	f04f 0300 	mov.w	r3, #0
 800e690:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
 800e692:	f04f 0300 	mov.w	r3, #0
 800e696:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	891b      	ldrh	r3, [r3, #8]
 800e69c:	82fb      	strh	r3, [r7, #22]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	8b1b      	ldrh	r3, [r3, #24]
 800e6a2:	82bb      	strh	r3, [r7, #20]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	8c1b      	ldrh	r3, [r3, #32]
 800e6a8:	827b      	strh	r3, [r7, #18]

  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)~TIM_SMCR_SMS;
 800e6aa:	8afb      	ldrh	r3, [r7, #22]
 800e6ac:	f023 0307 	bic.w	r3, r3, #7
 800e6b0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
 800e6b2:	8afa      	ldrh	r2, [r7, #22]
 800e6b4:	897b      	ldrh	r3, [r7, #10]
 800e6b6:	4313      	orrs	r3, r2
 800e6b8:	82fb      	strh	r3, [r7, #22]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_CC2S);
 800e6ba:	8abb      	ldrh	r3, [r7, #20]
 800e6bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6c0:	f023 0303 	bic.w	r3, r3, #3
 800e6c4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800e6c6:	8abb      	ldrh	r3, [r7, #20]
 800e6c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6cc:	f043 0301 	orr.w	r3, r3, #1
 800e6d0:	82bb      	strh	r3, [r7, #20]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ((uint16_t)~TIM_CCER_CC1P) & ((uint16_t)~TIM_CCER_CC2P);
 800e6d2:	8a7b      	ldrh	r3, [r7, #18]
 800e6d4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e6d8:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 800e6da:	88fb      	ldrh	r3, [r7, #6]
 800e6dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	893b      	ldrh	r3, [r7, #8]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	b29a      	uxth	r2, r3
 800e6e8:	8a7b      	ldrh	r3, [r7, #18]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	827b      	strh	r3, [r7, #18]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	8afa      	ldrh	r2, [r7, #22]
 800e6f2:	811a      	strh	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	8aba      	ldrh	r2, [r7, #20]
 800e6f8:	831a      	strh	r2, [r3, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	8a7a      	ldrh	r2, [r7, #18]
 800e6fe:	841a      	strh	r2, [r3, #32]
}
 800e700:	f107 071c 	add.w	r7, r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	bc80      	pop	{r7}
 800e708:	4770      	bx	lr
 800e70a:	bf00      	nop

0800e70c <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b083      	sub	sp, #12
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	460b      	mov	r3, r1
 800e716:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800e718:	78fb      	ldrb	r3, [r7, #3]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d008      	beq.n	800e730 <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	889b      	ldrh	r3, [r3, #4]
 800e722:	b29b      	uxth	r3, r3
 800e724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e728:	b29a      	uxth	r2, r3
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	809a      	strh	r2, [r3, #4]
 800e72e:	e007      	b.n	800e740 <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~TIM_CR2_TI1S;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	889b      	ldrh	r3, [r3, #4]
 800e734:	b29b      	uxth	r3, r3
 800e736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	809a      	strh	r2, [r3, #4]
  }
}
 800e740:	f107 070c 	add.w	r7, r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	bc80      	pop	{r7}
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop

0800e74c <TIM_RemapConfig>:
  *            @arg TIM11_HSE:      TIM11 CH4 input is connected to HSE_RTC clock
  *                                 (HSE divided by a programmable prescaler)  
  * @retval None
  */
void TIM_RemapConfig(TIM_TypeDef* TIMx, uint16_t TIM_Remap)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	460b      	mov	r3, r1
 800e756:	807b      	strh	r3, [r7, #2]
 /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	887a      	ldrh	r2, [r7, #2]
 800e75c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
}
 800e760:	f107 070c 	add.w	r7, r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	bc80      	pop	{r7}
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop

0800e76c <TI1_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	8179      	strh	r1, [r7, #10]
 800e776:	813a      	strh	r2, [r7, #8]
 800e778:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800e77a:	f04f 0300 	mov.w	r3, #0
 800e77e:	82fb      	strh	r3, [r7, #22]
 800e780:	f04f 0300 	mov.w	r3, #0
 800e784:	82bb      	strh	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC1E;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	8c1b      	ldrh	r3, [r3, #32]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	f023 0301 	bic.w	r3, r3, #1
 800e790:	b29a      	uxth	r2, r3
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	8b1b      	ldrh	r3, [r3, #24]
 800e79a:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	8c1b      	ldrh	r3, [r3, #32]
 800e7a0:	82bb      	strh	r3, [r7, #20]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR1_IC1F);
 800e7a2:	8afb      	ldrh	r3, [r7, #22]
 800e7a4:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800e7a8:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800e7aa:	88fb      	ldrh	r3, [r7, #6]
 800e7ac:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	893b      	ldrh	r3, [r7, #8]
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	b29a      	uxth	r2, r3
 800e7b8:	8afb      	ldrh	r3, [r7, #22]
 800e7ba:	4313      	orrs	r3, r2
 800e7bc:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e7be:	8abb      	ldrh	r3, [r7, #20]
 800e7c0:	f023 030a 	bic.w	r3, r3, #10
 800e7c4:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800e7c6:	897a      	ldrh	r2, [r7, #10]
 800e7c8:	8abb      	ldrh	r3, [r7, #20]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	f043 0301 	orr.w	r3, r3, #1
 800e7d2:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	8afa      	ldrh	r2, [r7, #22]
 800e7d8:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	8aba      	ldrh	r2, [r7, #20]
 800e7de:	841a      	strh	r2, [r3, #32]
}
 800e7e0:	f107 071c 	add.w	r7, r7, #28
 800e7e4:	46bd      	mov	sp, r7
 800e7e6:	bc80      	pop	{r7}
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop

0800e7ec <TI2_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b087      	sub	sp, #28
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	60f8      	str	r0, [r7, #12]
 800e7f4:	8179      	strh	r1, [r7, #10]
 800e7f6:	813a      	strh	r2, [r7, #8]
 800e7f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800e7fa:	f04f 0300 	mov.w	r3, #0
 800e7fe:	82fb      	strh	r3, [r7, #22]
 800e800:	f04f 0300 	mov.w	r3, #0
 800e804:	82bb      	strh	r3, [r7, #20]
 800e806:	f04f 0300 	mov.w	r3, #0
 800e80a:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC2E;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	8c1b      	ldrh	r3, [r3, #32]
 800e810:	b29b      	uxth	r3, r3
 800e812:	f023 0310 	bic.w	r3, r3, #16
 800e816:	b29a      	uxth	r2, r3
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	8b1b      	ldrh	r3, [r3, #24]
 800e820:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	8c1b      	ldrh	r3, [r3, #32]
 800e826:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800e828:	897b      	ldrh	r3, [r7, #10]
 800e82a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e82e:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr1 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800e830:	8afb      	ldrh	r3, [r7, #22]
 800e832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e836:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800e83a:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800e83e:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800e840:	88fb      	ldrh	r3, [r7, #6]
 800e842:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e846:	b29a      	uxth	r2, r3
 800e848:	8afb      	ldrh	r3, [r7, #22]
 800e84a:	4313      	orrs	r3, r2
 800e84c:	82fb      	strh	r3, [r7, #22]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 800e84e:	893b      	ldrh	r3, [r7, #8]
 800e850:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e854:	b29a      	uxth	r2, r3
 800e856:	8afb      	ldrh	r3, [r7, #22]
 800e858:	4313      	orrs	r3, r2
 800e85a:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e85c:	8abb      	ldrh	r3, [r7, #20]
 800e85e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e862:	82bb      	strh	r3, [r7, #20]
  tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800e864:	8a7a      	ldrh	r2, [r7, #18]
 800e866:	8abb      	ldrh	r3, [r7, #20]
 800e868:	4313      	orrs	r3, r2
 800e86a:	b29b      	uxth	r3, r3
 800e86c:	f043 0310 	orr.w	r3, r3, #16
 800e870:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	8afa      	ldrh	r2, [r7, #22]
 800e876:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	8aba      	ldrh	r2, [r7, #20]
 800e87c:	841a      	strh	r2, [r3, #32]
}
 800e87e:	f107 071c 	add.w	r7, r7, #28
 800e882:	46bd      	mov	sp, r7
 800e884:	bc80      	pop	{r7}
 800e886:	4770      	bx	lr

0800e888 <TI3_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e888:	b480      	push	{r7}
 800e88a:	b087      	sub	sp, #28
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	8179      	strh	r1, [r7, #10]
 800e892:	813a      	strh	r2, [r7, #8]
 800e894:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800e896:	f04f 0300 	mov.w	r3, #0
 800e89a:	82fb      	strh	r3, [r7, #22]
 800e89c:	f04f 0300 	mov.w	r3, #0
 800e8a0:	82bb      	strh	r3, [r7, #20]
 800e8a2:	f04f 0300 	mov.w	r3, #0
 800e8a6:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	8c1b      	ldrh	r3, [r3, #32]
 800e8ac:	b29b      	uxth	r3, r3
 800e8ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8b2:	b29a      	uxth	r2, r3
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	8b9b      	ldrh	r3, [r3, #28]
 800e8bc:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	8c1b      	ldrh	r3, [r3, #32]
 800e8c2:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800e8c4:	897b      	ldrh	r3, [r7, #10]
 800e8c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e8ca:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC1S) & ((uint16_t)~TIM_CCMR2_IC3F);
 800e8cc:	8afb      	ldrh	r3, [r7, #22]
 800e8ce:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800e8d2:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800e8d4:	88fb      	ldrh	r3, [r7, #6]
 800e8d6:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	893b      	ldrh	r3, [r7, #8]
 800e8de:	4313      	orrs	r3, r2
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	8afb      	ldrh	r3, [r7, #22]
 800e8e4:	4313      	orrs	r3, r2
 800e8e6:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800e8e8:	8abb      	ldrh	r3, [r7, #20]
 800e8ea:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800e8ee:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800e8f0:	8a7a      	ldrh	r2, [r7, #18]
 800e8f2:	8abb      	ldrh	r3, [r7, #20]
 800e8f4:	4313      	orrs	r3, r2
 800e8f6:	b29b      	uxth	r3, r3
 800e8f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8fc:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8afa      	ldrh	r2, [r7, #22]
 800e902:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	8aba      	ldrh	r2, [r7, #20]
 800e908:	841a      	strh	r2, [r3, #32]
}
 800e90a:	f107 071c 	add.w	r7, r7, #28
 800e90e:	46bd      	mov	sp, r7
 800e910:	bc80      	pop	{r7}
 800e912:	4770      	bx	lr

0800e914 <TI4_Config>:
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800e914:	b480      	push	{r7}
 800e916:	b087      	sub	sp, #28
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	8179      	strh	r1, [r7, #10]
 800e91e:	813a      	strh	r2, [r7, #8]
 800e920:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800e922:	f04f 0300 	mov.w	r3, #0
 800e926:	82fb      	strh	r3, [r7, #22]
 800e928:	f04f 0300 	mov.w	r3, #0
 800e92c:	82bb      	strh	r3, [r7, #20]
 800e92e:	f04f 0300 	mov.w	r3, #0
 800e932:	827b      	strh	r3, [r7, #18]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	8c1b      	ldrh	r3, [r3, #32]
 800e938:	b29b      	uxth	r3, r3
 800e93a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e93e:	b29a      	uxth	r2, r3
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	8b9b      	ldrh	r3, [r3, #28]
 800e948:	82fb      	strh	r3, [r7, #22]
  tmpccer = TIMx->CCER;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	8c1b      	ldrh	r3, [r3, #32]
 800e94e:	82bb      	strh	r3, [r7, #20]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 800e950:	897b      	ldrh	r3, [r7, #10]
 800e952:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e956:	827b      	strh	r3, [r7, #18]

  /* Select the Input and set the filter */
  tmpccmr2 &= ((uint16_t)~TIM_CCMR1_CC2S) & ((uint16_t)~TIM_CCMR1_IC2F);
 800e958:	8afb      	ldrh	r3, [r7, #22]
 800e95a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e95e:	ea4f 5303 	mov.w	r3, r3, lsl #20
 800e962:	ea4f 5313 	mov.w	r3, r3, lsr #20
 800e966:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 800e968:	893b      	ldrh	r3, [r7, #8]
 800e96a:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800e96e:	b29a      	uxth	r2, r3
 800e970:	8afb      	ldrh	r3, [r7, #22]
 800e972:	4313      	orrs	r3, r2
 800e974:	82fb      	strh	r3, [r7, #22]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 800e976:	88fb      	ldrh	r3, [r7, #6]
 800e978:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800e97c:	b29a      	uxth	r2, r3
 800e97e:	8afb      	ldrh	r3, [r7, #22]
 800e980:	4313      	orrs	r3, r2
 800e982:	82fb      	strh	r3, [r7, #22]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800e984:	8abb      	ldrh	r3, [r7, #20]
 800e986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e98a:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800e98e:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800e992:	82bb      	strh	r3, [r7, #20]
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 800e994:	8a7a      	ldrh	r2, [r7, #18]
 800e996:	8abb      	ldrh	r3, [r7, #20]
 800e998:	4313      	orrs	r3, r2
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e9a0:	82bb      	strh	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	8afa      	ldrh	r2, [r7, #22]
 800e9a6:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	8aba      	ldrh	r2, [r7, #20]
 800e9ac:	841a      	strh	r2, [r3, #32]
}
 800e9ae:	f107 071c 	add.w	r7, r7, #28
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bc80      	pop	{r7}
 800e9b6:	4770      	bx	lr

0800e9b8 <USART_DeInit>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9c6:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d10c      	bne.n	800e9e8 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800e9ce:	f04f 0010 	mov.w	r0, #16
 800e9d2:	f04f 0101 	mov.w	r1, #1
 800e9d6:	f7fb f8e1 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 800e9da:	f04f 0010 	mov.w	r0, #16
 800e9de:	f04f 0100 	mov.w	r1, #0
 800e9e2:	f7fb f8db 	bl	8009b9c <RCC_APB2PeriphResetCmd>
 800e9e6:	e062      	b.n	800eaae <USART_DeInit+0xf6>
  }
  else if (USARTx == USART2)
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 800e9ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800e9f2:	429a      	cmp	r2, r3
 800e9f4:	d10c      	bne.n	800ea10 <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 800e9f6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800e9fa:	f04f 0101 	mov.w	r1, #1
 800e9fe:	f7fb f8a3 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 800ea02:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ea06:	f04f 0100 	mov.w	r1, #0
 800ea0a:	f7fb f89d 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ea0e:	e04e      	b.n	800eaae <USART_DeInit+0xf6>
  }
  else if (USARTx == USART3)
 800ea10:	687a      	ldr	r2, [r7, #4]
 800ea12:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800ea16:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d10c      	bne.n	800ea38 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 800ea1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ea22:	f04f 0101 	mov.w	r1, #1
 800ea26:	f7fb f88f 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 800ea2a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ea2e:	f04f 0100 	mov.w	r1, #0
 800ea32:	f7fb f889 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ea36:	e03a      	b.n	800eaae <USART_DeInit+0xf6>
  }    
  else if (USARTx == UART4)
 800ea38:	687a      	ldr	r2, [r7, #4]
 800ea3a:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
 800ea3e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d10c      	bne.n	800ea60 <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 800ea46:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ea4a:	f04f 0101 	mov.w	r1, #1
 800ea4e:	f7fb f87b 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 800ea52:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ea56:	f04f 0100 	mov.w	r1, #0
 800ea5a:	f7fb f875 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ea5e:	e026      	b.n	800eaae <USART_DeInit+0xf6>
  }
  else if (USARTx == UART5)
 800ea60:	687a      	ldr	r2, [r7, #4]
 800ea62:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800ea66:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d10c      	bne.n	800ea88 <USART_DeInit+0xd0>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 800ea6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ea72:	f04f 0101 	mov.w	r1, #1
 800ea76:	f7fb f867 	bl	8009b48 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 800ea7a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ea7e:	f04f 0100 	mov.w	r1, #0
 800ea82:	f7fb f861 	bl	8009b48 <RCC_APB1PeriphResetCmd>
 800ea86:	e012      	b.n	800eaae <USART_DeInit+0xf6>
  }     
  else
  {
    if (USARTx == USART6)
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800ea8e:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d10b      	bne.n	800eaae <USART_DeInit+0xf6>
    { 
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, ENABLE);
 800ea96:	f04f 0020 	mov.w	r0, #32
 800ea9a:	f04f 0101 	mov.w	r1, #1
 800ea9e:	f7fb f87d 	bl	8009b9c <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART6, DISABLE);
 800eaa2:	f04f 0020 	mov.w	r0, #32
 800eaa6:	f04f 0100 	mov.w	r1, #0
 800eaaa:	f7fb f877 	bl	8009b9c <RCC_APB2PeriphResetCmd>
    }
  }
}
 800eaae:	f107 0708 	add.w	r7, r7, #8
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop

0800eab8 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b08a      	sub	sp, #40	; 0x28
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800eac2:	f04f 0300 	mov.w	r3, #0
 800eac6:	627b      	str	r3, [r7, #36]	; 0x24
 800eac8:	f04f 0300 	mov.w	r3, #0
 800eacc:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800eace:	f04f 0300 	mov.w	r3, #0
 800ead2:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800ead4:	f04f 0300 	mov.w	r3, #0
 800ead8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	8a1b      	ldrh	r3, [r3, #16]
 800eade:	b29b      	uxth	r3, r3
 800eae0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800eae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800eae8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	88db      	ldrh	r3, [r3, #6]
 800eaee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800eaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	899b      	ldrh	r3, [r3, #12]
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800eb0a:	f023 030c 	bic.w	r3, r3, #12
 800eb0e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800eb10:	683b      	ldr	r3, [r7, #0]
 800eb12:	889a      	ldrh	r2, [r3, #4]
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	891b      	ldrh	r3, [r3, #8]
 800eb18:	4313      	orrs	r3, r2
 800eb1a:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800eb20:	4313      	orrs	r3, r2
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb26:	4313      	orrs	r3, r2
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2c:	b29a      	uxth	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	8a9b      	ldrh	r3, [r3, #20]
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800eb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	899b      	ldrh	r3, [r3, #12]
 800eb46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800eb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800eb54:	f107 0308 	add.w	r3, r7, #8
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7fa fd55 	bl	8009608 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 800eb5e:	687a      	ldr	r2, [r7, #4]
 800eb60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb64:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d006      	beq.n	800eb7a <USART_Init+0xc2>
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800eb72:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d102      	bne.n	800eb80 <USART_Init+0xc8>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	623b      	str	r3, [r7, #32]
 800eb7e:	e001      	b.n	800eb84 <USART_Init+0xcc>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	899b      	ldrh	r3, [r3, #12]
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	b29b      	uxth	r3, r3
 800eb8c:	b21b      	sxth	r3, r3
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	da0f      	bge.n	800ebb2 <USART_Init+0xfa>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800eb92:	6a3a      	ldr	r2, [r7, #32]
 800eb94:	4613      	mov	r3, r2
 800eb96:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800eb9a:	189b      	adds	r3, r3, r2
 800eb9c:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800eba0:	189a      	adds	r2, r3, r2
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ebaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebae:	61fb      	str	r3, [r7, #28]
 800ebb0:	e00e      	b.n	800ebd0 <USART_Init+0x118>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800ebb2:	6a3a      	ldr	r2, [r7, #32]
 800ebb4:	4613      	mov	r3, r2
 800ebb6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ebba:	189b      	adds	r3, r3, r2
 800ebbc:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ebc0:	189a      	adds	r2, r3, r2
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 800ebca:	fbb2 f3f3 	udiv	r3, r2, r3
 800ebce:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800ebd0:	69fa      	ldr	r2, [r7, #28]
 800ebd2:	f248 531f 	movw	r3, #34079	; 0x851f
 800ebd6:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800ebda:	fba3 1302 	umull	r1, r3, r3, r2
 800ebde:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ebe2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ebe6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800ebe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebea:	ea4f 1313 	mov.w	r3, r3, lsr #4
 800ebee:	f04f 0264 	mov.w	r2, #100	; 0x64
 800ebf2:	fb02 f303 	mul.w	r3, r2, r3
 800ebf6:	69fa      	ldr	r2, [r7, #28]
 800ebf8:	1ad3      	subs	r3, r2, r3
 800ebfa:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	899b      	ldrh	r3, [r3, #12]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	b21b      	sxth	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	da12      	bge.n	800ec30 <USART_Init+0x178>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800ec10:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ec14:	f248 531f 	movw	r3, #34079	; 0x851f
 800ec18:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800ec1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ec20:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ec24:	f003 0307 	and.w	r3, r3, #7
 800ec28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ec2e:	e011      	b.n	800ec54 <USART_Init+0x19c>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800ec36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ec3a:	f248 531f 	movw	r3, #34079	; 0x851f
 800ec3e:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 800ec42:	fba3 1302 	umull	r1, r3, r3, r2
 800ec46:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800ec4a:	f003 030f 	and.w	r3, r3, #15
 800ec4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec50:	4313      	orrs	r3, r2
 800ec52:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 800ec54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	811a      	strh	r2, [r3, #8]
}
 800ec5c:	f107 0728 	add.w	r7, r7, #40	; 0x28
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800ec72:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f04f 0200 	mov.w	r2, #0
 800ec7a:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f04f 0200 	mov.w	r2, #0
 800ec82:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	f04f 0200 	mov.w	r2, #0
 800ec8a:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f04f 020c 	mov.w	r2, #12
 800ec92:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	f04f 0200 	mov.w	r2, #0
 800ec9a:	819a      	strh	r2, [r3, #12]
}
 800ec9c:	f107 070c 	add.w	r7, r7, #12
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bc80      	pop	{r7}
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop

0800eca8 <USART_ClockInit>:
  *         contains the configuration information for the specified  USART peripheral.
  * @note   The Smart Card and Synchronous modes are not available for UART4 and UART5.    
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
 800ecb2:	f04f 0300 	mov.w	r3, #0
 800ecb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	8a1b      	ldrh	r3, [r3, #16]
 800ecbc:	b29b      	uxth	r3, r3
 800ecbe:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800ecc6:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	881a      	ldrh	r2, [r3, #0]
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	889b      	ldrh	r3, [r3, #4]
 800ecd8:	4313      	orrs	r3, r2
 800ecda:	b29a      	uxth	r2, r3
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	88db      	ldrh	r3, [r3, #6]
 800ece0:	4313      	orrs	r3, r2
 800ece2:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800ece4:	68fa      	ldr	r2, [r7, #12]
 800ece6:	4313      	orrs	r3, r2
 800ece8:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	821a      	strh	r2, [r3, #16]
}
 800ecf2:	f107 0714 	add.w	r7, r7, #20
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bc80      	pop	{r7}
 800ecfa:	4770      	bx	lr

0800ecfc <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f04f 0200 	mov.w	r2, #0
 800ed0a:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f04f 0200 	mov.w	r2, #0
 800ed12:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f04f 0200 	mov.w	r2, #0
 800ed1a:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f04f 0200 	mov.w	r2, #0
 800ed22:	80da      	strh	r2, [r3, #6]
}
 800ed24:	f107 070c 	add.w	r7, r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bc80      	pop	{r7}
 800ed2c:	4770      	bx	lr
 800ed2e:	bf00      	nop

0800ed30 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ed3c:	78fb      	ldrb	r3, [r7, #3]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d008      	beq.n	800ed54 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	899b      	ldrh	r3, [r3, #12]
 800ed46:	b29b      	uxth	r3, r3
 800ed48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ed4c:	b29a      	uxth	r2, r3
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	819a      	strh	r2, [r3, #12]
 800ed52:	e007      	b.n	800ed64 <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	899b      	ldrh	r3, [r3, #12]
 800ed58:	b29b      	uxth	r3, r3
 800ed5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ed5e:	b29a      	uxth	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	819a      	strh	r2, [r3, #12]
  }
}
 800ed64:	f107 070c 	add.w	r7, r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bc80      	pop	{r7}
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop

0800ed70 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock. 
  * @note   The function is used for IrDA mode with UART4 and UART5.   
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	8b1b      	ldrh	r3, [r3, #24]
 800ed80:	b29b      	uxth	r3, r3
 800ed82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	8b1b      	ldrh	r3, [r3, #24]
 800ed90:	b29a      	uxth	r2, r3
 800ed92:	78fb      	ldrb	r3, [r7, #3]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	4313      	orrs	r3, r2
 800ed98:	b29a      	uxth	r2, r3
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	831a      	strh	r2, [r3, #24]
}
 800ed9e:	f107 070c 	add.w	r7, r7, #12
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bc80      	pop	{r7}
 800eda6:	4770      	bx	lr

0800eda8 <USART_OverSampling8Cmd>:
  * @param  NewState: new state of the USART 8x oversampling mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b083      	sub	sp, #12
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
 800edb0:	460b      	mov	r3, r1
 800edb2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800edb4:	78fb      	ldrb	r3, [r7, #3]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00a      	beq.n	800edd0 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	899b      	ldrh	r3, [r3, #12]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edc8:	b29a      	uxth	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	819a      	strh	r2, [r3, #12]
 800edce:	e009      	b.n	800ede4 <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_OVER8);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	899b      	ldrh	r3, [r3, #12]
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	ea4f 4343 	mov.w	r3, r3, lsl #17
 800edda:	ea4f 4353 	mov.w	r3, r3, lsr #17
 800edde:	b29a      	uxth	r2, r3
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	819a      	strh	r2, [r3, #12]
  }
}  
 800ede4:	f107 070c 	add.w	r7, r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	bc80      	pop	{r7}
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop

0800edf0 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800edfc:	78fb      	ldrb	r3, [r7, #3]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d008      	beq.n	800ee14 <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8a9b      	ldrh	r3, [r3, #20]
 800ee06:	b29b      	uxth	r3, r3
 800ee08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ee0c:	b29a      	uxth	r2, r3
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	829a      	strh	r2, [r3, #20]
 800ee12:	e007      	b.n	800ee24 <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_ONEBIT);
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	8a9b      	ldrh	r3, [r3, #20]
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee1e:	b29a      	uxth	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	829a      	strh	r2, [r3, #20]
  }
}
 800ee24:	f107 070c 	add.w	r7, r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	bc80      	pop	{r7}
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800ee30:	b480      	push	{r7}
 800ee32:	b083      	sub	sp, #12
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	460b      	mov	r3, r1
 800ee3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800ee3c:	887b      	ldrh	r3, [r7, #2]
 800ee3e:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800ee42:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800ee46:	b29a      	uxth	r2, r3
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	809a      	strh	r2, [r3, #4]
}
 800ee4c:	f107 070c 	add.w	r7, r7, #12
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bc80      	pop	{r7}
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop

0800ee58 <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b083      	sub	sp, #12
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	889b      	ldrh	r3, [r3, #4]
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	ea4f 53c3 	mov.w	r3, r3, lsl #23
 800ee6a:	ea4f 53d3 	mov.w	r3, r3, lsr #23
 800ee6e:	b29b      	uxth	r3, r3
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	f107 070c 	add.w	r7, r7, #12
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bc80      	pop	{r7}
 800ee7a:	4770      	bx	lr

0800ee7c <USART_SetAddress>:
  *         UART peripheral.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
 800ee84:	460b      	mov	r3, r1
 800ee86:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_ADD);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	8a1b      	ldrh	r3, [r3, #16]
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	f023 030f 	bic.w	r3, r3, #15
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	8a1b      	ldrh	r3, [r3, #16]
 800ee9c:	b29a      	uxth	r2, r3
 800ee9e:	78fb      	ldrb	r3, [r7, #3]
 800eea0:	b29b      	uxth	r3, r3
 800eea2:	4313      	orrs	r3, r2
 800eea4:	b29a      	uxth	r2, r3
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	821a      	strh	r2, [r3, #16]
}
 800eeaa:	f107 070c 	add.w	r7, r7, #12
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bc80      	pop	{r7}
 800eeb2:	4770      	bx	lr

0800eeb4 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	460b      	mov	r3, r1
 800eebe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 800eec0:	78fb      	ldrb	r3, [r7, #3]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d008      	beq.n	800eed8 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_RWU;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	899b      	ldrh	r3, [r3, #12]
 800eeca:	b29b      	uxth	r3, r3
 800eecc:	f043 0302 	orr.w	r3, r3, #2
 800eed0:	b29a      	uxth	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	819a      	strh	r2, [r3, #12]
 800eed6:	e007      	b.n	800eee8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_RWU);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	899b      	ldrh	r3, [r3, #12]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	f023 0302 	bic.w	r3, r3, #2
 800eee2:	b29a      	uxth	r2, r3
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	819a      	strh	r2, [r3, #12]
  }
}
 800eee8:	f107 070c 	add.w	r7, r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	bc80      	pop	{r7}
 800eef0:	4770      	bx	lr
 800eef2:	bf00      	nop

0800eef4 <USART_WakeUpConfig>:
  *            @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *            @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b083      	sub	sp, #12
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	460b      	mov	r3, r1
 800eefe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_WAKE);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	899b      	ldrh	r3, [r3, #12]
 800ef04:	b29b      	uxth	r3, r3
 800ef06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	899b      	ldrh	r3, [r3, #12]
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	887b      	ldrh	r3, [r7, #2]
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	b29a      	uxth	r2, r3
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	819a      	strh	r2, [r3, #12]
}
 800ef20:	f107 070c 	add.w	r7, r7, #12
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bc80      	pop	{r7}
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop

0800ef2c <USART_LINBreakDetectLengthConfig>:
  *            @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *            @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	460b      	mov	r3, r1
 800ef36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LBDL);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	8a1b      	ldrh	r3, [r3, #16]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	f023 0320 	bic.w	r3, r3, #32
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	8a1b      	ldrh	r3, [r3, #16]
 800ef4c:	b29a      	uxth	r2, r3
 800ef4e:	887b      	ldrh	r3, [r7, #2]
 800ef50:	4313      	orrs	r3, r2
 800ef52:	b29a      	uxth	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	821a      	strh	r2, [r3, #16]
}
 800ef58:	f107 070c 	add.w	r7, r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bc80      	pop	{r7}
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop

0800ef64 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	460b      	mov	r3, r1
 800ef6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800ef70:	78fb      	ldrb	r3, [r7, #3]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d008      	beq.n	800ef88 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	8a1b      	ldrh	r3, [r3, #16]
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ef80:	b29a      	uxth	r2, r3
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	821a      	strh	r2, [r3, #16]
 800ef86:	e007      	b.n	800ef98 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint16_t)~((uint16_t)USART_CR2_LINEN);
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	8a1b      	ldrh	r3, [r3, #16]
 800ef8c:	b29b      	uxth	r3, r3
 800ef8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ef92:	b29a      	uxth	r2, r3
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	821a      	strh	r2, [r3, #16]
  }
}
 800ef98:	f107 070c 	add.w	r7, r7, #12
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bc80      	pop	{r7}
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop

0800efa4 <USART_SendBreak>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5 or 6 to select the USART or 
  *         UART peripheral.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= USART_CR1_SBK;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	899b      	ldrh	r3, [r3, #12]
 800efb0:	b29b      	uxth	r3, r3
 800efb2:	f043 0301 	orr.w	r3, r3, #1
 800efb6:	b29a      	uxth	r2, r3
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	819a      	strh	r2, [r3, #12]
}
 800efbc:	f107 070c 	add.w	r7, r7, #12
 800efc0:	46bd      	mov	sp, r7
 800efc2:	bc80      	pop	{r7}
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop

0800efc8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	460b      	mov	r3, r1
 800efd2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800efd4:	78fb      	ldrb	r3, [r7, #3]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d008      	beq.n	800efec <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	8a9b      	ldrh	r3, [r3, #20]
 800efde:	b29b      	uxth	r3, r3
 800efe0:	f043 0308 	orr.w	r3, r3, #8
 800efe4:	b29a      	uxth	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	829a      	strh	r2, [r3, #20]
 800efea:	e007      	b.n	800effc <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_HDSEL);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8a9b      	ldrh	r3, [r3, #20]
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	f023 0308 	bic.w	r3, r3, #8
 800eff6:	b29a      	uxth	r2, r3
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	829a      	strh	r2, [r3, #20]
  }
}
 800effc:	f107 070c 	add.w	r7, r7, #12
 800f000:	46bd      	mov	sp, r7
 800f002:	bc80      	pop	{r7}
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop

0800f008 <USART_SetGuardTime>:
  *         UART peripheral.
  * @param  USART_GuardTime: specifies the guard time.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	460b      	mov	r3, r1
 800f012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	8b1b      	ldrh	r3, [r3, #24]
 800f018:	b29b      	uxth	r3, r3
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	8b1b      	ldrh	r3, [r3, #24]
 800f026:	b29a      	uxth	r2, r3
 800f028:	78fb      	ldrb	r3, [r7, #3]
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	ea4f 2303 	mov.w	r3, r3, lsl #8
 800f030:	b29b      	uxth	r3, r3
 800f032:	4313      	orrs	r3, r2
 800f034:	b29a      	uxth	r2, r3
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	831a      	strh	r2, [r3, #24]
}
 800f03a:	f107 070c 	add.w	r7, r7, #12
 800f03e:	46bd      	mov	sp, r7
 800f040:	bc80      	pop	{r7}
 800f042:	4770      	bx	lr

0800f044 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f044:	b480      	push	{r7}
 800f046:	b083      	sub	sp, #12
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	460b      	mov	r3, r1
 800f04e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f050:	78fb      	ldrb	r3, [r7, #3]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d008      	beq.n	800f068 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	8a9b      	ldrh	r3, [r3, #20]
 800f05a:	b29b      	uxth	r3, r3
 800f05c:	f043 0320 	orr.w	r3, r3, #32
 800f060:	b29a      	uxth	r2, r3
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	829a      	strh	r2, [r3, #20]
 800f066:	e007      	b.n	800f078 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_SCEN);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	8a9b      	ldrh	r3, [r3, #20]
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	f023 0320 	bic.w	r3, r3, #32
 800f072:	b29a      	uxth	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	829a      	strh	r2, [r3, #20]
  }
}
 800f078:	f107 070c 	add.w	r7, r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bc80      	pop	{r7}
 800f080:	4770      	bx	lr
 800f082:	bf00      	nop

0800f084 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	460b      	mov	r3, r1
 800f08e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_1236_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800f090:	78fb      	ldrb	r3, [r7, #3]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d008      	beq.n	800f0a8 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	8a9b      	ldrh	r3, [r3, #20]
 800f09a:	b29b      	uxth	r3, r3
 800f09c:	f043 0310 	orr.w	r3, r3, #16
 800f0a0:	b29a      	uxth	r2, r3
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	829a      	strh	r2, [r3, #20]
 800f0a6:	e007      	b.n	800f0b8 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_NACK);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	8a9b      	ldrh	r3, [r3, #20]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	f023 0310 	bic.w	r3, r3, #16
 800f0b2:	b29a      	uxth	r2, r3
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	829a      	strh	r2, [r3, #20]
  }
}
 800f0b8:	f107 070c 	add.w	r7, r7, #12
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bc80      	pop	{r7}
 800f0c0:	4770      	bx	lr
 800f0c2:	bf00      	nop

0800f0c4 <USART_IrDAConfig>:
  *            @arg USART_IrDAMode_LowPower
  *            @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b083      	sub	sp, #12
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IRLP);
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	8a9b      	ldrh	r3, [r3, #20]
 800f0d4:	b29b      	uxth	r3, r3
 800f0d6:	f023 0304 	bic.w	r3, r3, #4
 800f0da:	b29a      	uxth	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	8a9b      	ldrh	r3, [r3, #20]
 800f0e4:	b29a      	uxth	r2, r3
 800f0e6:	887b      	ldrh	r3, [r7, #2]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	b29a      	uxth	r2, r3
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	829a      	strh	r2, [r3, #20]
}
 800f0f0:	f107 070c 	add.w	r7, r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bc80      	pop	{r7}
 800f0f8:	4770      	bx	lr
 800f0fa:	bf00      	nop

0800f0fc <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
 800f108:	78fb      	ldrb	r3, [r7, #3]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d008      	beq.n	800f120 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	8a9b      	ldrh	r3, [r3, #20]
 800f112:	b29b      	uxth	r3, r3
 800f114:	f043 0302 	orr.w	r3, r3, #2
 800f118:	b29a      	uxth	r2, r3
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	829a      	strh	r2, [r3, #20]
 800f11e:	e007      	b.n	800f130 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint16_t)~((uint16_t)USART_CR3_IREN);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	8a9b      	ldrh	r3, [r3, #20]
 800f124:	b29b      	uxth	r3, r3
 800f126:	f023 0302 	bic.w	r3, r3, #2
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	829a      	strh	r2, [r3, #20]
  }
}
 800f130:	f107 070c 	add.w	r7, r7, #12
 800f134:	46bd      	mov	sp, r7
 800f136:	bc80      	pop	{r7}
 800f138:	4770      	bx	lr
 800f13a:	bf00      	nop

0800f13c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.   
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
 800f13c:	b480      	push	{r7}
 800f13e:	b083      	sub	sp, #12
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	4613      	mov	r3, r2
 800f146:	460a      	mov	r2, r1
 800f148:	807a      	strh	r2, [r7, #2]
 800f14a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 800f14c:	787b      	ldrb	r3, [r7, #1]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d008      	beq.n	800f164 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	8a9b      	ldrh	r3, [r3, #20]
 800f156:	b29a      	uxth	r2, r3
 800f158:	887b      	ldrh	r3, [r7, #2]
 800f15a:	4313      	orrs	r3, r2
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	829a      	strh	r2, [r3, #20]
 800f162:	e00a      	b.n	800f17a <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	8a9b      	ldrh	r3, [r3, #20]
 800f168:	b29a      	uxth	r2, r3
 800f16a:	887b      	ldrh	r3, [r7, #2]
 800f16c:	ea6f 0303 	mvn.w	r3, r3
 800f170:	b29b      	uxth	r3, r3
 800f172:	4013      	ands	r3, r2
 800f174:	b29a      	uxth	r2, r3
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	829a      	strh	r2, [r3, #20]
  }
}
 800f17a:	f107 070c 	add.w	r7, r7, #12
 800f17e:	46bd      	mov	sp, r7
 800f180:	bc80      	pop	{r7}
 800f182:	4770      	bx	lr

0800f184 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800f184:	b480      	push	{r7}
 800f186:	b087      	sub	sp, #28
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
 800f18c:	4613      	mov	r3, r2
 800f18e:	460a      	mov	r2, r1
 800f190:	807a      	strh	r2, [r7, #2]
 800f192:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800f194:	f04f 0300 	mov.w	r3, #0
 800f198:	613b      	str	r3, [r7, #16]
 800f19a:	f04f 0300 	mov.w	r3, #0
 800f19e:	60fb      	str	r3, [r7, #12]
 800f1a0:	f04f 0300 	mov.w	r3, #0
 800f1a4:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800f1a6:	f04f 0300 	mov.w	r3, #0
 800f1aa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800f1b0:	887b      	ldrh	r3, [r7, #2]
 800f1b2:	b2db      	uxtb	r3, r3
 800f1b4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800f1bc:	887b      	ldrh	r3, [r7, #2]
 800f1be:	f003 031f 	and.w	r3, r3, #31
 800f1c2:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f04f 0201 	mov.w	r2, #1
 800f1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f1ce:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	d104      	bne.n	800f1e0 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	f103 030c 	add.w	r3, r3, #12
 800f1dc:	617b      	str	r3, [r7, #20]
 800f1de:	e00b      	b.n	800f1f8 <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	2b02      	cmp	r3, #2
 800f1e4:	d104      	bne.n	800f1f0 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
 800f1e6:	697b      	ldr	r3, [r7, #20]
 800f1e8:	f103 0310 	add.w	r3, r3, #16
 800f1ec:	617b      	str	r3, [r7, #20]
 800f1ee:	e003      	b.n	800f1f8 <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800f1f0:	697b      	ldr	r3, [r7, #20]
 800f1f2:	f103 0314 	add.w	r3, r3, #20
 800f1f6:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800f1f8:	787b      	ldrb	r3, [r7, #1]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d006      	beq.n	800f20c <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 800f1fe:	697b      	ldr	r3, [r7, #20]
 800f200:	697a      	ldr	r2, [r7, #20]
 800f202:	6811      	ldr	r1, [r2, #0]
 800f204:	68ba      	ldr	r2, [r7, #8]
 800f206:	430a      	orrs	r2, r1
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	e007      	b.n	800f21c <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800f20c:	697b      	ldr	r3, [r7, #20]
 800f20e:	697a      	ldr	r2, [r7, #20]
 800f210:	6811      	ldr	r1, [r2, #0]
 800f212:	68ba      	ldr	r2, [r7, #8]
 800f214:	ea6f 0202 	mvn.w	r2, r2
 800f218:	400a      	ands	r2, r1
 800f21a:	601a      	str	r2, [r3, #0]
  }
}
 800f21c:	f107 071c 	add.w	r7, r7, #28
 800f220:	46bd      	mov	sp, r7
 800f222:	bc80      	pop	{r7}
 800f224:	4770      	bx	lr
 800f226:	bf00      	nop

0800f228 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800f228:	b480      	push	{r7}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	460b      	mov	r3, r1
 800f232:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800f234:	f04f 0300 	mov.w	r3, #0
 800f238:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	881b      	ldrh	r3, [r3, #0]
 800f23e:	b29a      	uxth	r2, r3
 800f240:	887b      	ldrh	r3, [r7, #2]
 800f242:	4013      	ands	r3, r2
 800f244:	b29b      	uxth	r3, r3
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
 800f24a:	f04f 0301 	mov.w	r3, #1
 800f24e:	73fb      	strb	r3, [r7, #15]
 800f250:	e002      	b.n	800f258 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
 800f252:	f04f 0300 	mov.w	r3, #0
 800f256:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f258:	7bfb      	ldrb	r3, [r7, #15]
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	f107 0714 	add.w	r7, r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	bc80      	pop	{r7}
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop

0800f268 <USART_ClearFlag>:
  *          (USART_SendData()).
  *   
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800f268:	b480      	push	{r7}
 800f26a:	b083      	sub	sp, #12
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	460b      	mov	r3, r1
 800f272:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
       
  USARTx->SR = (uint16_t)~USART_FLAG;
 800f274:	887b      	ldrh	r3, [r7, #2]
 800f276:	ea6f 0303 	mvn.w	r3, r3
 800f27a:	b29a      	uxth	r2, r3
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	801a      	strh	r2, [r3, #0]
}
 800f280:	f107 070c 	add.w	r7, r7, #12
 800f284:	46bd      	mov	sp, r7
 800f286:	bc80      	pop	{r7}
 800f288:	4770      	bx	lr
 800f28a:	bf00      	nop

0800f28c <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b087      	sub	sp, #28
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	460b      	mov	r3, r1
 800f296:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800f298:	f04f 0300 	mov.w	r3, #0
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	f04f 0300 	mov.w	r3, #0
 800f2a2:	617b      	str	r3, [r7, #20]
 800f2a4:	f04f 0300 	mov.w	r3, #0
 800f2a8:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 800f2aa:	f04f 0300 	mov.w	r3, #0
 800f2ae:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800f2b0:	887b      	ldrh	r3, [r7, #2]
 800f2b2:	b2db      	uxtb	r3, r3
 800f2b4:	ea4f 1353 	mov.w	r3, r3, lsr #5
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800f2bc:	887b      	ldrh	r3, [r7, #2]
 800f2be:	f003 031f 	and.w	r3, r3, #31
 800f2c2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800f2c4:	697b      	ldr	r3, [r7, #20]
 800f2c6:	f04f 0201 	mov.w	r2, #1
 800f2ca:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ce:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	2b01      	cmp	r3, #1
 800f2d4:	d106      	bne.n	800f2e4 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	899b      	ldrh	r3, [r3, #12]
 800f2da:	b29b      	uxth	r3, r3
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	4013      	ands	r3, r2
 800f2e0:	617b      	str	r3, [r7, #20]
 800f2e2:	e00f      	b.n	800f304 <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	2b02      	cmp	r3, #2
 800f2e8:	d106      	bne.n	800f2f8 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	8a1b      	ldrh	r3, [r3, #16]
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	697a      	ldr	r2, [r7, #20]
 800f2f2:	4013      	ands	r3, r2
 800f2f4:	617b      	str	r3, [r7, #20]
 800f2f6:	e005      	b.n	800f304 <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	8a9b      	ldrh	r3, [r3, #20]
 800f2fc:	b29b      	uxth	r3, r3
 800f2fe:	697a      	ldr	r2, [r7, #20]
 800f300:	4013      	ands	r3, r2
 800f302:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 800f304:	887b      	ldrh	r3, [r7, #2]
 800f306:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f30a:	b29b      	uxth	r3, r3
 800f30c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	f04f 0201 	mov.w	r2, #1
 800f314:	fa02 f303 	lsl.w	r3, r2, r3
 800f318:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	881b      	ldrh	r3, [r3, #0]
 800f31e:	b29b      	uxth	r3, r3
 800f320:	68fa      	ldr	r2, [r7, #12]
 800f322:	4013      	ands	r3, r2
 800f324:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d006      	beq.n	800f33a <USART_GetITStatus+0xae>
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d003      	beq.n	800f33a <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
 800f332:	f04f 0301 	mov.w	r3, #1
 800f336:	74fb      	strb	r3, [r7, #19]
 800f338:	e002      	b.n	800f340 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
 800f33a:	f04f 0300 	mov.w	r3, #0
 800f33e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800f340:	7cfb      	ldrb	r3, [r7, #19]
}
 800f342:	4618      	mov	r0, r3
 800f344:	f107 071c 	add.w	r7, r7, #28
 800f348:	46bd      	mov	sp, r7
 800f34a:	bc80      	pop	{r7}
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop

0800f350 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 800f350:	b480      	push	{r7}
 800f352:	b085      	sub	sp, #20
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
 800f358:	460b      	mov	r3, r1
 800f35a:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 800f35c:	f04f 0300 	mov.w	r3, #0
 800f360:	81fb      	strh	r3, [r7, #14]
 800f362:	f04f 0300 	mov.w	r3, #0
 800f366:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800f368:	887b      	ldrh	r3, [r7, #2]
 800f36a:	ea4f 2313 	mov.w	r3, r3, lsr #8
 800f36e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 800f370:	89fb      	ldrh	r3, [r7, #14]
 800f372:	f04f 0201 	mov.w	r2, #1
 800f376:	fa02 f303 	lsl.w	r3, r2, r3
 800f37a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800f37c:	89bb      	ldrh	r3, [r7, #12]
 800f37e:	ea6f 0303 	mvn.w	r3, r3
 800f382:	b29a      	uxth	r2, r3
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	801a      	strh	r2, [r3, #0]
}
 800f388:	f107 0714 	add.w	r7, r7, #20
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bc80      	pop	{r7}
 800f390:	4770      	bx	lr
 800f392:	bf00      	nop

0800f394 <WWDG_DeInit>:
  * @brief  Deinitializes the WWDG peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void WWDG_DeInit(void)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	af00      	add	r7, sp, #0
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
 800f398:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f39c:	f04f 0101 	mov.w	r1, #1
 800f3a0:	f7fa fbd2 	bl	8009b48 <RCC_APB1PeriphResetCmd>
  RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
 800f3a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800f3a8:	f04f 0100 	mov.w	r1, #0
 800f3ac:	f7fa fbcc 	bl	8009b48 <RCC_APB1PeriphResetCmd>
}
 800f3b0:	bd80      	pop	{r7, pc}
 800f3b2:	bf00      	nop

0800f3b4 <WWDG_SetPrescaler>:
  *     @arg WWDG_Prescaler_4: WWDG counter clock = (PCLK1/4096)/4
  *     @arg WWDG_Prescaler_8: WWDG counter clock = (PCLK1/4096)/8
  * @retval None
  */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b085      	sub	sp, #20
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800f3bc:	f04f 0300 	mov.w	r3, #0
 800f3c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
  /* Clear WDGTB[1:0] bits */
  tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
 800f3c2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f3c6:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f3ca:	685b      	ldr	r3, [r3, #4]
 800f3cc:	f423 73c0 	bic.w	r3, r3, #384	; 0x180
 800f3d0:	60fb      	str	r3, [r7, #12]
  /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
  tmpreg |= WWDG_Prescaler;
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  WWDG->CFR = tmpreg;
 800f3da:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f3de:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f3e2:	68fa      	ldr	r2, [r7, #12]
 800f3e4:	605a      	str	r2, [r3, #4]
}
 800f3e6:	f107 0714 	add.w	r7, r7, #20
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bc80      	pop	{r7}
 800f3ee:	4770      	bx	lr

0800f3f0 <WWDG_SetWindowValue>:
  * @param  WindowValue: specifies the window value to be compared to the downcounter.
  *   This parameter value must be lower than 0x80.
  * @retval None
  */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b085      	sub	sp, #20
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t tmpreg = 0;
 800f3fa:	f04f 0300 	mov.w	r3, #0
 800f3fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
  /* Clear W[6:0] bits */

  tmpreg = WWDG->CFR & CFR_W_MASK;
 800f400:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f404:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f408:	685b      	ldr	r3, [r3, #4]
 800f40a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f40e:	60fb      	str	r3, [r7, #12]

  /* Set W[6:0] bits according to WindowValue value */
  tmpreg |= WindowValue & (uint32_t) BIT_MASK;
 800f410:	79fb      	ldrb	r3, [r7, #7]
 800f412:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	4313      	orrs	r3, r2
 800f41a:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  WWDG->CFR = tmpreg;
 800f41c:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f420:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	605a      	str	r2, [r3, #4]
}
 800f428:	f107 0714 	add.w	r7, r7, #20
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bc80      	pop	{r7}
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop

0800f434 <WWDG_EnableIT>:
  * @note   Once enabled this interrupt cannot be disabled except by a system reset.
  * @param  None
  * @retval None
  */
void WWDG_EnableIT(void)
{
 800f434:	b480      	push	{r7}
 800f436:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
 800f438:	f248 03a4 	movw	r3, #32932	; 0x80a4
 800f43c:	f2c4 2305 	movt	r3, #16901	; 0x4205
 800f440:	f04f 0201 	mov.w	r2, #1
 800f444:	601a      	str	r2, [r3, #0]
}
 800f446:	46bd      	mov	sp, r7
 800f448:	bc80      	pop	{r7}
 800f44a:	4770      	bx	lr

0800f44c <WWDG_SetCounter>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset) 
  * @retval None
  */
void WWDG_SetCounter(uint8_t Counter)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	4603      	mov	r3, r0
 800f454:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  /* Write to T[6:0] bits to configure the counter value, no need to do
     a read-modify-write; writing a 0 to WDGA bit does nothing */
  WWDG->CR = Counter & BIT_MASK;
 800f456:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f45a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f45e:	79fa      	ldrb	r2, [r7, #7]
 800f460:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f464:	601a      	str	r2, [r3, #0]
}
 800f466:	f107 070c 	add.w	r7, r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bc80      	pop	{r7}
 800f46e:	4770      	bx	lr

0800f470 <WWDG_Enable>:
  *   This parameter must be a number between 0x40 and 0x7F (to prevent generating
  *   an immediate reset)
  * @retval None
  */
void WWDG_Enable(uint8_t Counter)
{
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	4603      	mov	r3, r0
 800f478:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_WWDG_COUNTER(Counter));
  WWDG->CR = WWDG_CR_WDGA | Counter;
 800f47a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f47e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f482:	79fa      	ldrb	r2, [r7, #7]
 800f484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f488:	b2d2      	uxtb	r2, r2
 800f48a:	601a      	str	r2, [r3, #0]
}
 800f48c:	f107 070c 	add.w	r7, r7, #12
 800f490:	46bd      	mov	sp, r7
 800f492:	bc80      	pop	{r7}
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop

0800f498 <WWDG_GetFlagStatus>:
  * @brief  Checks whether the Early Wakeup interrupt flag is set or not.
  * @param  None
  * @retval The new state of the Early Wakeup interrupt flag (SET or RESET)
  */
FlagStatus WWDG_GetFlagStatus(void)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
  FlagStatus bitstatus = RESET;
 800f49e:	f04f 0300 	mov.w	r3, #0
 800f4a2:	71fb      	strb	r3, [r7, #7]
    
  if ((WWDG->SR) != (uint32_t)RESET)
 800f4a4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f4a8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d003      	beq.n	800f4ba <WWDG_GetFlagStatus+0x22>
  {
    bitstatus = SET;
 800f4b2:	f04f 0301 	mov.w	r3, #1
 800f4b6:	71fb      	strb	r3, [r7, #7]
 800f4b8:	e002      	b.n	800f4c0 <WWDG_GetFlagStatus+0x28>
  }
  else
  {
    bitstatus = RESET;
 800f4ba:	f04f 0300 	mov.w	r3, #0
 800f4be:	71fb      	strb	r3, [r7, #7]
  }
  return bitstatus;
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f107 070c 	add.w	r7, r7, #12
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bc80      	pop	{r7}
 800f4cc:	4770      	bx	lr
 800f4ce:	bf00      	nop

0800f4d0 <WWDG_ClearFlag>:
  * @brief  Clears Early Wakeup interrupt flag.
  * @param  None
  * @retval None
  */
void WWDG_ClearFlag(void)
{
 800f4d0:	b480      	push	{r7}
 800f4d2:	af00      	add	r7, sp, #0
  WWDG->SR = (uint32_t)RESET;
 800f4d4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800f4d8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800f4dc:	f04f 0200 	mov.w	r2, #0
 800f4e0:	609a      	str	r2, [r3, #8]
}
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bc80      	pop	{r7}
 800f4e6:	4770      	bx	lr

0800f4e8 <GPIO_PIN>:
 800f4e8:	1000 2000 4000 8000                         ... .@..

0800f4f0 <GPIO_CLK>:
 800f4f0:	0008 0000 0008 0000 0008 0000 0008 0000     ................

0800f500 <BUTTON_PIN>:
 800f500:	0001 0000                                   ....

0800f504 <BUTTON_CLK>:
 800f504:	0001 0000                                   ....

0800f508 <BUTTON_EXTI_LINE>:
 800f508:	0001 0000                                   ....

0800f50c <BUTTON_PORT_SOURCE>:
 800f50c:	0000 0000                                   ....

0800f510 <BUTTON_PIN_SOURCE>:
 800f510:	0000 0000                                   ....

0800f514 <BUTTON_IRQn>:
 800f514:	0006 0000                                   ....

0800f518 <__EH_FRAME_BEGIN__>:
 800f518:	0000 0000                                   ....

0800f51c <_init>:
 800f51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f51e:	bf00      	nop
 800f520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f522:	bc08      	pop	{r3}
 800f524:	469e      	mov	lr, r3
 800f526:	4770      	bx	lr

0800f528 <_fini>:
 800f528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f52a:	bf00      	nop
 800f52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f52e:	bc08      	pop	{r3}
 800f530:	469e      	mov	lr, r3
 800f532:	4770      	bx	lr
