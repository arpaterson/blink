
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000062c  08000188  08000188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080007b4  080007b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080007b8  080007b8  000087b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000001c  20000000  080007bc  00010000  2**2
                  ALLOC
  5 ._user_heap_stack 00000400  2000001c  080007bc  0001001c  2**0
                  ALLOC
  6 .ARM.attributes 0000002f  00000000  00000000  000087bc  2**0
                  CONTENTS, READONLY
  7 .debug_line   00001074  00000000  00000000  000087eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00001e34  00000000  00000000  0000985f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000063f  00000000  00000000  0000b693  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000002e8  00000000  00000000  0000bcd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000bfc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000f50  00000000  00000000  0000c250  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000c5a  00000000  00000000  0000d1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .comment      00000030  00000000  00000000  0000ddfa  2**0
                  CONTENTS, READONLY
 15 .debug_frame  00000884  00000000  00000000  0000de2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	f240 0400 	movw	r4, #0
 800018e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8000192:	7823      	ldrb	r3, [r4, #0]
 8000194:	b963      	cbnz	r3, 80001b0 <__do_global_dtors_aux+0x28>
 8000196:	f240 0000 	movw	r0, #0
 800019a:	f2c0 0000 	movt	r0, #0
 800019e:	b128      	cbz	r0, 80001ac <__do_global_dtors_aux+0x24>
 80001a0:	f240 709c 	movw	r0, #1948	; 0x79c
 80001a4:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001a8:	f3af 8000 	nop.w
 80001ac:	2101      	movs	r1, #1
 80001ae:	7021      	strb	r1, [r4, #0]
 80001b0:	bd10      	pop	{r4, pc}
 80001b2:	bf00      	nop

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	f240 0300 	movw	r3, #0
 80001ba:	f2c0 0300 	movt	r3, #0
 80001be:	b14b      	cbz	r3, 80001d4 <frame_dummy+0x20>
 80001c0:	f240 709c 	movw	r0, #1948	; 0x79c
 80001c4:	f240 0104 	movw	r1, #4
 80001c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80001cc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80001d0:	f3af 8000 	nop.w
 80001d4:	f240 0000 	movw	r0, #0
 80001d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001dc:	6801      	ldr	r1, [r0, #0]
 80001de:	b129      	cbz	r1, 80001ec <frame_dummy+0x38>
 80001e0:	f240 0300 	movw	r3, #0
 80001e4:	f2c0 0300 	movt	r3, #0
 80001e8:	b103      	cbz	r3, 80001ec <frame_dummy+0x38>
 80001ea:	4798      	blx	r3
 80001ec:	bd08      	pop	{r3, pc}
 80001ee:	bf00      	nop

080001f0 <__libc_init_array>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f240 76b4 	movw	r6, #1972	; 0x7b4
 80001f6:	f240 75b4 	movw	r5, #1972	; 0x7b4
 80001fa:	f6c0 0600 	movt	r6, #2048	; 0x800
 80001fe:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000202:	1b76      	subs	r6, r6, r5
 8000204:	10b6      	asrs	r6, r6, #2
 8000206:	d006      	beq.n	8000216 <__libc_init_array+0x26>
 8000208:	2400      	movs	r4, #0
 800020a:	f855 3b04 	ldr.w	r3, [r5], #4
 800020e:	3401      	adds	r4, #1
 8000210:	4798      	blx	r3
 8000212:	42a6      	cmp	r6, r4
 8000214:	d1f9      	bne.n	800020a <__libc_init_array+0x1a>
 8000216:	f240 76b8 	movw	r6, #1976	; 0x7b8
 800021a:	f240 75b4 	movw	r5, #1972	; 0x7b4
 800021e:	f6c0 0600 	movt	r6, #2048	; 0x800
 8000222:	f6c0 0500 	movt	r5, #2048	; 0x800
 8000226:	1b76      	subs	r6, r6, r5
 8000228:	f000 fab8 	bl	800079c <_init>
 800022c:	10b6      	asrs	r6, r6, #2
 800022e:	d006      	beq.n	800023e <__libc_init_array+0x4e>
 8000230:	2400      	movs	r4, #0
 8000232:	f855 3b04 	ldr.w	r3, [r5], #4
 8000236:	3401      	adds	r4, #1
 8000238:	4798      	blx	r3
 800023a:	42a6      	cmp	r6, r4
 800023c:	d1f9      	bne.n	8000232 <__libc_init_array+0x42>
 800023e:	bd70      	pop	{r4, r5, r6, pc}

08000240 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000240:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000242:	f000 b804 	b.w	800024e <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000246:	4b10      	ldr	r3, [pc, #64]	; (8000288 <LoopFillZerobss+0x22>)
  ldr  r3, [r3, r1]
 8000248:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800024a:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800024c:	3104      	adds	r1, #4

0800024e <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800024e:	480f      	ldr	r0, [pc, #60]	; (800028c <LoopFillZerobss+0x26>)
  ldr  r3, =_edata
 8000250:	4b0f      	ldr	r3, [pc, #60]	; (8000290 <LoopFillZerobss+0x2a>)
  adds  r2, r0, r1
 8000252:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000254:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000256:	f4ff aff6 	bcc.w	8000246 <CopyDataInit>
  ldr  r2, =_sbss
 800025a:	4a0e      	ldr	r2, [pc, #56]	; (8000294 <LoopFillZerobss+0x2e>)
  b  LoopFillZerobss
 800025c:	f000 b803 	b.w	8000266 <LoopFillZerobss>

08000260 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000260:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000262:	f842 3b04 	str.w	r3, [r2], #4

08000266 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000266:	4b0c      	ldr	r3, [pc, #48]	; (8000298 <LoopFillZerobss+0x32>)
  cmp  r2, r3
 8000268:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800026a:	f4ff aff9 	bcc.w	8000260 <FillZerobss>
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800026e:	480b      	ldr	r0, [pc, #44]	; (800029c <LoopFillZerobss+0x36>)
 ldr     r1,[r0]
 8000270:	6801      	ldr	r1, [r0, #0]
 orr     r1,r1,#(0xF << 20)
 8000272:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 str     r1,[r0]
 8000276:	6001      	str	r1, [r0, #0]
	
/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000278:	f000 f8a8 	bl	80003cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800027c:	f7ff ffb8 	bl	80001f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000280:	f000 f85c 	bl	800033c <main>
  bx  lr    
 8000284:	4770      	bx	lr
 8000286:	0000      	.short	0x0000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000288:	080007bc 	.word	0x080007bc
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800028c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000290:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000294:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000298:	2000001c 	.word	0x2000001c
  cmp  r2, r3
  bcc  FillZerobss
  
  
/*FPU settings*/
 ldr     r0, =0xE000ED88           /* Enable CP10,CP11 */
 800029c:	e000ed88 	.word	0xe000ed88

080002a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002a0:	f7ff bffe 	b.w	80002a0 <ADC_IRQHandler>

080002a4 <Delaynus>:
 * Input          :nus
 * Output         : None
 * Return         : None
 */
void Delaynus(vu32 nus)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    u8 nCount;

    while (nus--)
 80002ac:	e00a      	b.n	80002c4 <Delaynus+0x20>
    {
        for (nCount = 6; nCount != 0; nCount--);
 80002ae:	f04f 0306 	mov.w	r3, #6
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e003      	b.n	80002be <Delaynus+0x1a>
 80002b6:	7bfb      	ldrb	r3, [r7, #15]
 80002b8:	f103 33ff 	add.w	r3, r3, #4294967295
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f8      	bne.n	80002b6 <Delaynus+0x12>
 */
void Delaynus(vu32 nus)
{
    u8 nCount;

    while (nus--)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	bf0c      	ite	eq
 80002ca:	2200      	moveq	r2, #0
 80002cc:	2201      	movne	r2, #1
 80002ce:	b2d2      	uxtb	r2, r2
 80002d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80002d4:	607b      	str	r3, [r7, #4]
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1e9      	bne.n	80002ae <Delaynus+0xa>
    {
        for (nCount = 6; nCount != 0; nCount--);
    }
}
 80002da:	f107 0714 	add.w	r7, r7, #20
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr

080002e4 <LED_Config>:
void LED_Config()
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b082      	sub	sp, #8
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure;
  /* GPIOD Periph clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 80002ea:	f04f 0008 	mov.w	r0, #8
 80002ee:	f04f 0101 	mov.w	r1, #1
 80002f2:	f000 fa29 	bl	8000748 <RCC_AHB1PeriphClockCmd>
  /* Configure PD12, PD13, PD14 and PD15 in output push-pull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
 80002f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80002fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80002fc:	f04f 0300 	mov.w	r3, #0
 8000300:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;
 8000302:	f04f 0301 	mov.w	r3, #1
 8000306:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	71fb      	strb	r3, [r7, #7]

  /* standard output pin */
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800030e:	f04f 0301 	mov.w	r3, #1
 8000312:	713b      	strb	r3, [r7, #4]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000314:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000318:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800031c:	463b      	mov	r3, r7
 800031e:	4619      	mov	r1, r3
 8000320:	f000 f962 	bl	80005e8 <GPIO_Init>
  GPIO_Write(GPIOD,0);	//initial state (all LEDs OFF)
 8000324:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8000328:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800032c:	f04f 0100 	mov.w	r1, #0
 8000330:	f000 f9fc 	bl	800072c <GPIO_Write>
}
 8000334:	f107 0708 	add.w	r7, r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <main>:

GPIO_InitTypeDef GPIO_InitStructure;

int main(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	LED_Config();
 8000340:	f7ff ffd0 	bl	80002e4 <LED_Config>
    while (1)
    {
        Delaynus(100000 / 2);    /* A short delay */
 8000344:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000348:	f7ff ffac 	bl	80002a4 <Delaynus>
        GPIOD->ODR^=0xF000;
 800034c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000350:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000354:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000358:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800035c:	6952      	ldr	r2, [r2, #20]
 800035e:	f482 4270 	eor.w	r2, r2, #61440	; 0xf000
 8000362:	615a      	str	r2, [r3, #20]
        //GPIOD -> BSRRL = GPIO_Pin_12 | GPIO_Pin_13;

        Delaynus(100000 / 2);
 8000364:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000368:	f7ff ff9c 	bl	80002a4 <Delaynus>
       // GPIOD -> BSRRH = GPIO_Pin_12 | GPIO_Pin_13;
    }
 800036c:	e7ea      	b.n	8000344 <main+0x8>
 800036e:	bf00      	nop

08000370 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
}
 8000374:	46bd      	mov	sp, r7
 8000376:	bc80      	pop	{r7}
 8000378:	4770      	bx	lr
 800037a:	bf00      	nop

0800037c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000380:	e7fe      	b.n	8000380 <HardFault_Handler+0x4>
 8000382:	bf00      	nop

08000384 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000388:	e7fe      	b.n	8000388 <MemManage_Handler+0x4>
 800038a:	bf00      	nop

0800038c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000390:	e7fe      	b.n	8000390 <BusFault_Handler+0x4>
 8000392:	bf00      	nop

08000394 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000398:	e7fe      	b.n	8000398 <UsageFault_Handler+0x4>
 800039a:	bf00      	nop

0800039c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
}
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bc80      	pop	{r7}
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop

080003a8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
}
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bc80      	pop	{r7}
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop

080003b4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
}
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bc80      	pop	{r7}
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
}
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop

080003cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003d0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003d4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003d8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80003dc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	f042 0201 	orr.w	r2, r2, #1
 80003e6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003f0:	f04f 0200 	mov.w	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80003f6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80003fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80003fe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000402:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000406:	6812      	ldr	r2, [r2, #0]
 8000408:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800040c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000410:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000412:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000416:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800041a:	f243 0210 	movw	r2, #12304	; 0x3010
 800041e:	f2c2 4200 	movt	r2, #9216	; 0x2400
 8000422:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000424:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000428:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800042c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000430:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800043a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800043c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000440:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000444:	f04f 0200 	mov.w	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800044a:	f000 f809 	bl	8000460 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800044e:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8000452:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8000456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800045a:	609a      	str	r2, [r3, #8]
#endif
}
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop

08000460 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000466:	f04f 0300 	mov.w	r3, #0
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	f04f 0300 	mov.w	r3, #0
 8000470:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000472:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000476:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800047a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800047e:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000482:	6812      	ldr	r2, [r2, #0]
 8000484:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000488:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800048a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800048e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000498:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f103 0301 	add.w	r3, r3, #1
 80004a0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d103      	bne.n	80004b0 <SetSysClock+0x50>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80004ae:	d1ec      	bne.n	800048a <SetSysClock+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80004b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d003      	beq.n	80004ca <SetSysClock+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
 80004c2:	f04f 0301 	mov.w	r3, #1
 80004c6:	603b      	str	r3, [r7, #0]
 80004c8:	e002      	b.n	80004d0 <SetSysClock+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80004ca:	f04f 0300 	mov.w	r3, #0
 80004ce:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80004d0:	683b      	ldr	r3, [r7, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	f040 8082 	bne.w	80005dc <SetSysClock+0x17c>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004d8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80004dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80004e0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80004e4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80004e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80004ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004ee:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80004f0:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80004f4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80004f8:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
 80004fc:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000506:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000508:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800050c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000510:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000514:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000518:	6892      	ldr	r2, [r2, #8]
 800051a:	609a      	str	r2, [r3, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800051c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000520:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000524:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000528:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800052c:	6892      	ldr	r2, [r2, #8]
 800052e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000532:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000534:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000538:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800053c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000540:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000544:	6892      	ldr	r2, [r2, #8]
 8000546:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 800054a:	609a      	str	r2, [r3, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800054c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000550:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000554:	f245 4219 	movw	r2, #21529	; 0x5419
 8000558:	f2c0 7240 	movt	r2, #1856	; 0x740
 800055c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800055e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000562:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000566:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800056a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800056e:	6812      	ldr	r2, [r2, #0]
 8000570:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000574:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000576:	bf00      	nop
 8000578:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800057c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000586:	2b00      	cmp	r3, #0
 8000588:	d0f6      	beq.n	8000578 <SetSysClock+0x118>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800058a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800058e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000592:	f240 6205 	movw	r2, #1541	; 0x605
 8000596:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000598:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800059c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005a8:	6892      	ldr	r2, [r2, #8]
 80005aa:	f022 0203 	bic.w	r2, r2, #3
 80005ae:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80005b0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80005bc:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80005c0:	6892      	ldr	r2, [r2, #8]
 80005c2:	f042 0202 	orr.w	r2, r2, #2
 80005c6:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80005c8:	bf00      	nop
 80005ca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80005ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80005d2:	689b      	ldr	r3, [r3, #8]
 80005d4:	f003 030c 	and.w	r3, r3, #12
 80005d8:	2b08      	cmp	r3, #8
 80005da:	d1f6      	bne.n	80005ca <SetSysClock+0x16a>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80005dc:	f107 070c 	add.w	r7, r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bc80      	pop	{r7}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005f2:	f04f 0300 	mov.w	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	f04f 0300 	mov.w	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	f04f 0300 	mov.w	r3, #0
 8000602:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e086      	b.n	800071a <GPIO_Init+0x132>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	f04f 0201 	mov.w	r2, #1
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	681a      	ldr	r2, [r3, #0]
 800061c:	693b      	ldr	r3, [r7, #16]
 800061e:	4013      	ands	r3, r2
 8000620:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000622:	68fa      	ldr	r2, [r7, #12]
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	429a      	cmp	r2, r3
 8000628:	d173      	bne.n	8000712 <GPIO_Init+0x12a>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000634:	f04f 0103 	mov.w	r1, #3
 8000638:	fa01 f303 	lsl.w	r3, r1, r3
 800063c:	ea6f 0303 	mvn.w	r3, r3
 8000640:	401a      	ands	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	4619      	mov	r1, r3
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000656:	fa01 f303 	lsl.w	r3, r1, r3
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d003      	beq.n	8000670 <GPIO_Init+0x88>
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	2b02      	cmp	r3, #2
 800066e:	d134      	bne.n	80006da <GPIO_Init+0xf2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	689a      	ldr	r2, [r3, #8]
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800067a:	f04f 0103 	mov.w	r1, #3
 800067e:	fa01 f303 	lsl.w	r3, r1, r3
 8000682:	ea6f 0303 	mvn.w	r3, r3
 8000686:	401a      	ands	r2, r3
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	689a      	ldr	r2, [r3, #8]
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	4619      	mov	r1, r3
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800069c:	fa01 f303 	lsl.w	r3, r1, r3
 80006a0:	431a      	orrs	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	f04f 0101 	mov.w	r1, #1
 80006b2:	fa01 f303 	lsl.w	r3, r1, r3
 80006b6:	ea6f 0303 	mvn.w	r3, r3
 80006ba:	401a      	ands	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	685a      	ldr	r2, [r3, #4]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	799b      	ldrb	r3, [r3, #6]
 80006c8:	4619      	mov	r1, r3
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	b29b      	uxth	r3, r3
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	431a      	orrs	r2, r3
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	697b      	ldr	r3, [r7, #20]
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80006e6:	f04f 0103 	mov.w	r1, #3
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	ea6f 0303 	mvn.w	r3, r3
 80006f2:	401a      	ands	r2, r3
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	683b      	ldr	r3, [r7, #0]
 80006fe:	79db      	ldrb	r3, [r3, #7]
 8000700:	4619      	mov	r1, r3
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000708:	fa01 f303 	lsl.w	r3, r1, r3
 800070c:	431a      	orrs	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	f103 0301 	add.w	r3, r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	2b0f      	cmp	r3, #15
 800071e:	f67f af75 	bls.w	800060c <GPIO_Init+0x24>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000722:	f107 071c 	add.w	r7, r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <GPIO_Write>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000738:	887a      	ldrh	r2, [r7, #2]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	615a      	str	r2, [r3, #20]
}
 800073e:	f107 070c 	add.w	r7, r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	460b      	mov	r3, r1
 8000752:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000754:	78fb      	ldrb	r3, [r7, #3]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d00c      	beq.n	8000774 <RCC_AHB1PeriphClockCmd+0x2c>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800075a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800075e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8000762:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000766:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800076a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	430a      	orrs	r2, r1
 8000770:	631a      	str	r2, [r3, #48]	; 0x30
 8000772:	e00d      	b.n	8000790 <RCC_AHB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000774:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000778:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800077c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000780:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8000784:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	ea6f 0202 	mvn.w	r2, r2
 800078c:	400a      	ands	r2, r1
 800078e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000790:	f107 070c 	add.w	r7, r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop

0800079c <_init>:
 800079c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800079e:	bf00      	nop
 80007a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007a2:	bc08      	pop	{r3}
 80007a4:	469e      	mov	lr, r3
 80007a6:	4770      	bx	lr

080007a8 <_fini>:
 80007a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007aa:	bf00      	nop
 80007ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007ae:	bc08      	pop	{r3}
 80007b0:	469e      	mov	lr, r3
 80007b2:	4770      	bx	lr
