   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f4xx.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.section	.data.SystemCoreClock,"aw",%progbits
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 007A030A 		.word	168000000
  25              		.global	AHBPrescTable
  26              		.section	.data.AHBPrescTable,"aw",%progbits
  27              		.align	2
  30              	AHBPrescTable:
  31 0000 00       		.byte	0
  32 0001 00       		.byte	0
  33 0002 00       		.byte	0
  34 0003 00       		.byte	0
  35 0004 00       		.byte	0
  36 0005 00       		.byte	0
  37 0006 00       		.byte	0
  38 0007 00       		.byte	0
  39 0008 01       		.byte	1
  40 0009 02       		.byte	2
  41 000a 03       		.byte	3
  42 000b 04       		.byte	4
  43 000c 06       		.byte	6
  44 000d 07       		.byte	7
  45 000e 08       		.byte	8
  46 000f 09       		.byte	9
  47              		.section	.text.SystemInit,"ax",%progbits
  48              		.align	2
  49              		.global	SystemInit
  50              		.thumb
  51              		.thumb_func
  53              	SystemInit:
  54              	.LFB110:
  55              		.file 1 "../src/system_stm32f4xx.c"
   1:../src/system_stm32f4xx.c **** /**
   2:../src/system_stm32f4xx.c ****   ******************************************************************************
   3:../src/system_stm32f4xx.c ****   * @file    system_stm32f4xx.c
   4:../src/system_stm32f4xx.c ****   * @author  MCD Application Team
   5:../src/system_stm32f4xx.c ****   * @version V1.0.0
   6:../src/system_stm32f4xx.c ****   * @date    19-September-2011
   7:../src/system_stm32f4xx.c ****   * @brief   CMSIS Cortex-M4 Device Peripheral Access Layer System Source File.
   8:../src/system_stm32f4xx.c ****   *          This file contains the system clock configuration for STM32F4xx devices,
   9:../src/system_stm32f4xx.c ****   *          and is generated by the clock configuration tool
  10:../src/system_stm32f4xx.c ****   *          stm32f4xx_Clock_Configuration_V1.0.0.xls
  11:../src/system_stm32f4xx.c ****   *             
  12:../src/system_stm32f4xx.c ****   * 1.  This file provides two functions and one global variable to be called from 
  13:../src/system_stm32f4xx.c ****   *     user application:
  14:../src/system_stm32f4xx.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  15:../src/system_stm32f4xx.c ****   *                      and Divider factors, AHB/APBx prescalers and Flash settings),
  16:../src/system_stm32f4xx.c ****   *                      depending on the configuration made in the clock xls tool. 
  17:../src/system_stm32f4xx.c ****   *                      This function is called at startup just after reset and 
  18:../src/system_stm32f4xx.c ****   *                      before branch to main program. This call is made inside
  19:../src/system_stm32f4xx.c ****   *                      the "startup_stm32f4xx.s" file.
  20:../src/system_stm32f4xx.c ****   *
  21:../src/system_stm32f4xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  22:../src/system_stm32f4xx.c ****   *                                  by the user application to setup the SysTick 
  23:../src/system_stm32f4xx.c ****   *                                  timer or configure other parameters.
  24:../src/system_stm32f4xx.c ****   *                                     
  25:../src/system_stm32f4xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  26:../src/system_stm32f4xx.c ****   *                                 be called whenever the core clock is changed
  27:../src/system_stm32f4xx.c ****   *                                 during program execution.
  28:../src/system_stm32f4xx.c ****   *
  29:../src/system_stm32f4xx.c ****   * 2. After each device reset the HSI (16 MHz) is used as system clock source.
  30:../src/system_stm32f4xx.c ****   *    Then SystemInit() function is called, in "startup_stm32f4xx.s" file, to
  31:../src/system_stm32f4xx.c ****   *    configure the system clock before to branch to main program.
  32:../src/system_stm32f4xx.c ****   *
  33:../src/system_stm32f4xx.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  34:../src/system_stm32f4xx.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  35:../src/system_stm32f4xx.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  36:../src/system_stm32f4xx.c ****   *
  37:../src/system_stm32f4xx.c ****   * 4. The default value of HSE crystal is set to 8 MHz, refer to "HSE_VALUE" define
  38:../src/system_stm32f4xx.c ****   *    in "stm32f4xx.h" file. When HSE is used as system clock source, directly or
  39:../src/system_stm32f4xx.c ****   *    through PLL, and you are using different crystal you have to adapt the HSE
  40:../src/system_stm32f4xx.c ****   *    value to your own configuration.
  41:../src/system_stm32f4xx.c ****   *
  42:../src/system_stm32f4xx.c ****   * 5. This file configures the system clock as follows:
  43:../src/system_stm32f4xx.c ****   *=============================================================================
  44:../src/system_stm32f4xx.c ****   *=============================================================================
  45:../src/system_stm32f4xx.c ****   *        Supported STM32F4xx device revision    | Rev A
  46:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  47:../src/system_stm32f4xx.c ****   *        System Clock source                    | PLL (HSE)
  48:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  49:../src/system_stm32f4xx.c ****   *        SYSCLK(Hz)                             | 168000000
  50:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  51:../src/system_stm32f4xx.c ****   *        HCLK(Hz)                               | 168000000
  52:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  53:../src/system_stm32f4xx.c ****   *        AHB Prescaler                          | 1
  54:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  55:../src/system_stm32f4xx.c ****   *        APB1 Prescaler                         | 4
  56:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  57:../src/system_stm32f4xx.c ****   *        APB2 Prescaler                         | 2
  58:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  59:../src/system_stm32f4xx.c ****   *        HSE Frequency(Hz)                      | 8000000
  60:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  61:../src/system_stm32f4xx.c ****   *        PLL_M                                  | 8
  62:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  63:../src/system_stm32f4xx.c ****   *        PLL_N                                  | 336
  64:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  65:../src/system_stm32f4xx.c ****   *        PLL_P                                  | 2
  66:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  67:../src/system_stm32f4xx.c ****   *        PLL_Q                                  | 7
  68:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  69:../src/system_stm32f4xx.c ****   *        PLLI2S_N                               | 192
  70:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  71:../src/system_stm32f4xx.c ****   *        PLLI2S_R                               | 5
  72:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  73:../src/system_stm32f4xx.c ****   *        I2S input clock(Hz)                    | 38400000
  74:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  75:../src/system_stm32f4xx.c ****   *        VDD(V)                                 | 3.3
  76:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  77:../src/system_stm32f4xx.c ****   *        High Performance mode                  | Enabled
  78:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  79:../src/system_stm32f4xx.c ****   *        Flash Latency(WS)                      | 5
  80:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  81:../src/system_stm32f4xx.c ****   *        Prefetch Buffer                        | OFF
  82:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  83:../src/system_stm32f4xx.c ****   *        Instruction cache                      | ON
  84:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  85:../src/system_stm32f4xx.c ****   *        Data cache                             | ON
  86:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  87:../src/system_stm32f4xx.c ****   *        Require 48MHz for USB OTG FS,          | Enabled
  88:../src/system_stm32f4xx.c ****   *        SDIO and RNG clock                     |
  89:../src/system_stm32f4xx.c ****   *-----------------------------------------------------------------------------
  90:../src/system_stm32f4xx.c ****   *=============================================================================
  91:../src/system_stm32f4xx.c ****   ****************************************************************************** 
  92:../src/system_stm32f4xx.c ****   * @attention
  93:../src/system_stm32f4xx.c ****   *
  94:../src/system_stm32f4xx.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  95:../src/system_stm32f4xx.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  96:../src/system_stm32f4xx.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  97:../src/system_stm32f4xx.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  98:../src/system_stm32f4xx.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  99:../src/system_stm32f4xx.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 100:../src/system_stm32f4xx.c ****   *
 101:../src/system_stm32f4xx.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 102:../src/system_stm32f4xx.c ****   ******************************************************************************
 103:../src/system_stm32f4xx.c ****   */
 104:../src/system_stm32f4xx.c **** 
 105:../src/system_stm32f4xx.c **** /** @addtogroup CMSIS
 106:../src/system_stm32f4xx.c ****   * @{
 107:../src/system_stm32f4xx.c ****   */
 108:../src/system_stm32f4xx.c **** 
 109:../src/system_stm32f4xx.c **** /** @addtogroup stm32f4xx_system
 110:../src/system_stm32f4xx.c ****   * @{
 111:../src/system_stm32f4xx.c ****   */  
 112:../src/system_stm32f4xx.c ****   
 113:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Includes
 114:../src/system_stm32f4xx.c ****   * @{
 115:../src/system_stm32f4xx.c ****   */
 116:../src/system_stm32f4xx.c **** 
 117:../src/system_stm32f4xx.c **** #include "stm32f4xx.h"
 118:../src/system_stm32f4xx.c **** 
 119:../src/system_stm32f4xx.c **** /**
 120:../src/system_stm32f4xx.c ****   * @}
 121:../src/system_stm32f4xx.c ****   */
 122:../src/system_stm32f4xx.c **** 
 123:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_TypesDefinitions
 124:../src/system_stm32f4xx.c ****   * @{
 125:../src/system_stm32f4xx.c ****   */
 126:../src/system_stm32f4xx.c **** 
 127:../src/system_stm32f4xx.c **** /**
 128:../src/system_stm32f4xx.c ****   * @}
 129:../src/system_stm32f4xx.c ****   */
 130:../src/system_stm32f4xx.c **** 
 131:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Defines
 132:../src/system_stm32f4xx.c ****   * @{
 133:../src/system_stm32f4xx.c ****   */
 134:../src/system_stm32f4xx.c **** 
 135:../src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 136:../src/system_stm32f4xx.c ****      on STM324xG_EVAL board as data memory  */
 137:../src/system_stm32f4xx.c **** /* #define DATA_IN_ExtSRAM */
 138:../src/system_stm32f4xx.c **** 
 139:../src/system_stm32f4xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 140:../src/system_stm32f4xx.c ****      Internal SRAM. */
 141:../src/system_stm32f4xx.c **** /* #define VECT_TAB_SRAM */
 142:../src/system_stm32f4xx.c **** #define VECT_TAB_OFFSET  0x00 /*!< Vector Table base offset field. 
 143:../src/system_stm32f4xx.c ****                                    This value must be a multiple of 0x200. */
 144:../src/system_stm32f4xx.c **** 
 145:../src/system_stm32f4xx.c **** 
 146:../src/system_stm32f4xx.c **** /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N */
 147:../src/system_stm32f4xx.c **** #define PLL_M      8
 148:../src/system_stm32f4xx.c **** #define PLL_N      336
 149:../src/system_stm32f4xx.c **** 
 150:../src/system_stm32f4xx.c **** /* SYSCLK = PLL_VCO / PLL_P */
 151:../src/system_stm32f4xx.c **** #define PLL_P      2
 152:../src/system_stm32f4xx.c **** 
 153:../src/system_stm32f4xx.c **** /* USB OTG FS, SDIO and RNG Clock =  PLL_VCO / PLLQ */
 154:../src/system_stm32f4xx.c **** #define PLL_Q      7
 155:../src/system_stm32f4xx.c **** 
 156:../src/system_stm32f4xx.c **** /* PLLI2S_VCO = (HSE_VALUE Or HSI_VALUE / PLL_M) * PLLI2S_N
 157:../src/system_stm32f4xx.c ****    I2SCLK = PLLI2S_VCO / PLLI2S_R */
 158:../src/system_stm32f4xx.c **** #define PLLI2S_N   192
 159:../src/system_stm32f4xx.c **** #define PLLI2S_R   5
 160:../src/system_stm32f4xx.c **** 
 161:../src/system_stm32f4xx.c **** /**
 162:../src/system_stm32f4xx.c ****   * @}
 163:../src/system_stm32f4xx.c ****   */
 164:../src/system_stm32f4xx.c **** 
 165:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Macros
 166:../src/system_stm32f4xx.c ****   * @{
 167:../src/system_stm32f4xx.c ****   */
 168:../src/system_stm32f4xx.c **** 
 169:../src/system_stm32f4xx.c **** /**
 170:../src/system_stm32f4xx.c ****   * @}
 171:../src/system_stm32f4xx.c ****   */
 172:../src/system_stm32f4xx.c **** 
 173:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Variables
 174:../src/system_stm32f4xx.c ****   * @{
 175:../src/system_stm32f4xx.c ****   */
 176:../src/system_stm32f4xx.c **** 
 177:../src/system_stm32f4xx.c ****   uint32_t SystemCoreClock = 168000000;
 178:../src/system_stm32f4xx.c **** 
 179:../src/system_stm32f4xx.c ****   __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 180:../src/system_stm32f4xx.c **** 
 181:../src/system_stm32f4xx.c **** /**
 182:../src/system_stm32f4xx.c ****   * @}
 183:../src/system_stm32f4xx.c ****   */
 184:../src/system_stm32f4xx.c **** 
 185:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_FunctionPrototypes
 186:../src/system_stm32f4xx.c ****   * @{
 187:../src/system_stm32f4xx.c ****   */
 188:../src/system_stm32f4xx.c **** 
 189:../src/system_stm32f4xx.c **** static void SetSysClock(void);
 190:../src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 191:../src/system_stm32f4xx.c ****   static void SystemInit_ExtMemCtl(void); 
 192:../src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 193:../src/system_stm32f4xx.c **** 
 194:../src/system_stm32f4xx.c **** /**
 195:../src/system_stm32f4xx.c ****   * @}
 196:../src/system_stm32f4xx.c ****   */
 197:../src/system_stm32f4xx.c **** 
 198:../src/system_stm32f4xx.c **** /** @addtogroup STM32F4xx_System_Private_Functions
 199:../src/system_stm32f4xx.c ****   * @{
 200:../src/system_stm32f4xx.c ****   */
 201:../src/system_stm32f4xx.c **** 
 202:../src/system_stm32f4xx.c **** /**
 203:../src/system_stm32f4xx.c ****   * @brief  Setup the microcontroller system
 204:../src/system_stm32f4xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 205:../src/system_stm32f4xx.c ****   *         SystemFrequency variable.
 206:../src/system_stm32f4xx.c ****   * @param  None
 207:../src/system_stm32f4xx.c ****   * @retval None
 208:../src/system_stm32f4xx.c ****   */
 209:../src/system_stm32f4xx.c **** void SystemInit(void)
 210:../src/system_stm32f4xx.c **** {
  56              		.loc 1 210 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60 0000 80B5     		push	{r7, lr}
  61              	.LCFI0:
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 14, -4
  64              		.cfi_offset 7, -8
  65 0002 00AF     		add	r7, sp, #0
  66              	.LCFI1:
  67              		.cfi_def_cfa_register 7
 211:../src/system_stm32f4xx.c ****   /* Reset the RCC clock configuration to the default reset state ------------*/
 212:../src/system_stm32f4xx.c ****   /* Set HSION bit */
 213:../src/system_stm32f4xx.c ****   RCC->CR |= (uint32_t)0x00000001;
  68              		.loc 1 213 0
  69 0004 4FF46053 		mov	r3, #14336
  70 0008 C4F20203 		movt	r3, 16386
  71 000c 4FF46052 		mov	r2, #14336
  72 0010 C4F20202 		movt	r2, 16386
  73 0014 1268     		ldr	r2, [r2, #0]
  74 0016 42F00102 		orr	r2, r2, #1
  75 001a 1A60     		str	r2, [r3, #0]
 214:../src/system_stm32f4xx.c **** 
 215:../src/system_stm32f4xx.c ****   /* Reset CFGR register */
 216:../src/system_stm32f4xx.c ****   RCC->CFGR = 0x00000000;
  76              		.loc 1 216 0
  77 001c 4FF46053 		mov	r3, #14336
  78 0020 C4F20203 		movt	r3, 16386
  79 0024 4FF00002 		mov	r2, #0
  80 0028 9A60     		str	r2, [r3, #8]
 217:../src/system_stm32f4xx.c **** 
 218:../src/system_stm32f4xx.c ****   /* Reset HSEON, CSSON and PLLON bits */
 219:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  81              		.loc 1 219 0
  82 002a 4FF46053 		mov	r3, #14336
  83 002e C4F20203 		movt	r3, 16386
  84 0032 4FF46052 		mov	r2, #14336
  85 0036 C4F20202 		movt	r2, 16386
  86 003a 1268     		ldr	r2, [r2, #0]
  87 003c 22F08472 		bic	r2, r2, #17301504
  88 0040 22F48032 		bic	r2, r2, #65536
  89 0044 1A60     		str	r2, [r3, #0]
 220:../src/system_stm32f4xx.c **** 
 221:../src/system_stm32f4xx.c ****   /* Reset PLLCFGR register */
 222:../src/system_stm32f4xx.c ****   RCC->PLLCFGR = 0x24003010;
  90              		.loc 1 222 0
  91 0046 4FF46053 		mov	r3, #14336
  92 004a C4F20203 		movt	r3, 16386
  93 004e 43F21002 		movw	r2, #12304
  94 0052 C2F20042 		movt	r2, 9216
  95 0056 5A60     		str	r2, [r3, #4]
 223:../src/system_stm32f4xx.c **** 
 224:../src/system_stm32f4xx.c ****   /* Reset HSEBYP bit */
 225:../src/system_stm32f4xx.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  96              		.loc 1 225 0
  97 0058 4FF46053 		mov	r3, #14336
  98 005c C4F20203 		movt	r3, 16386
  99 0060 4FF46052 		mov	r2, #14336
 100 0064 C4F20202 		movt	r2, 16386
 101 0068 1268     		ldr	r2, [r2, #0]
 102 006a 22F48022 		bic	r2, r2, #262144
 103 006e 1A60     		str	r2, [r3, #0]
 226:../src/system_stm32f4xx.c **** 
 227:../src/system_stm32f4xx.c ****   /* Disable all interrupts */
 228:../src/system_stm32f4xx.c ****   RCC->CIR = 0x00000000;
 104              		.loc 1 228 0
 105 0070 4FF46053 		mov	r3, #14336
 106 0074 C4F20203 		movt	r3, 16386
 107 0078 4FF00002 		mov	r2, #0
 108 007c DA60     		str	r2, [r3, #12]
 229:../src/system_stm32f4xx.c **** 
 230:../src/system_stm32f4xx.c **** #ifdef DATA_IN_ExtSRAM
 231:../src/system_stm32f4xx.c ****   SystemInit_ExtMemCtl(); 
 232:../src/system_stm32f4xx.c **** #endif /* DATA_IN_ExtSRAM */
 233:../src/system_stm32f4xx.c ****          
 234:../src/system_stm32f4xx.c ****   /* Configure the System clock source, PLL Multiplier and Divider factors, 
 235:../src/system_stm32f4xx.c ****      AHB/APBx prescalers and Flash settings ----------------------------------*/
 236:../src/system_stm32f4xx.c ****   SetSysClock();
 109              		.loc 1 236 0
 110 007e FFF7FEFF 		bl	SetSysClock
 237:../src/system_stm32f4xx.c **** 
 238:../src/system_stm32f4xx.c ****   /* Configure the Vector Table location add offset address ------------------*/
 239:../src/system_stm32f4xx.c **** #ifdef VECT_TAB_SRAM
 240:../src/system_stm32f4xx.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 241:../src/system_stm32f4xx.c **** #else
 242:../src/system_stm32f4xx.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 111              		.loc 1 242 0
 112 0082 4FF46D43 		mov	r3, #60672
 113 0086 CEF20003 		movt	r3, 57344
 114 008a 4FF00062 		mov	r2, #134217728
 115 008e 9A60     		str	r2, [r3, #8]
 243:../src/system_stm32f4xx.c **** #endif
 244:../src/system_stm32f4xx.c **** }
 116              		.loc 1 244 0
 117 0090 80BD     		pop	{r7, pc}
 118              		.cfi_endproc
 119              	.LFE110:
 121 0092 00BF     		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 122              		.align	2
 123              		.global	SystemCoreClockUpdate
 124              		.thumb
 125              		.thumb_func
 127              	SystemCoreClockUpdate:
 128              	.LFB111:
 245:../src/system_stm32f4xx.c **** 
 246:../src/system_stm32f4xx.c **** /**
 247:../src/system_stm32f4xx.c ****    * @brief  Update SystemCoreClock variable according to Clock Register Values.
 248:../src/system_stm32f4xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 249:../src/system_stm32f4xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 250:../src/system_stm32f4xx.c ****   *         other parameters.
 251:../src/system_stm32f4xx.c ****   *           
 252:../src/system_stm32f4xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 253:../src/system_stm32f4xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 254:../src/system_stm32f4xx.c ****   *         based on this variable will be incorrect.         
 255:../src/system_stm32f4xx.c ****   *     
 256:../src/system_stm32f4xx.c ****   * @note   - The system frequency computed by this function is not the real 
 257:../src/system_stm32f4xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 258:../src/system_stm32f4xx.c ****   *           constant and the selected clock source:
 259:../src/system_stm32f4xx.c ****   *             
 260:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 261:../src/system_stm32f4xx.c ****   *                                              
 262:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 263:../src/system_stm32f4xx.c ****   *                          
 264:../src/system_stm32f4xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 265:../src/system_stm32f4xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 266:../src/system_stm32f4xx.c ****   *         
 267:../src/system_stm32f4xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 268:../src/system_stm32f4xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 269:../src/system_stm32f4xx.c ****   *             in voltage and temperature.   
 270:../src/system_stm32f4xx.c ****   *    
 271:../src/system_stm32f4xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 272:../src/system_stm32f4xx.c ****   *              25 MHz), user has to ensure that HSE_VALUE is same as the real
 273:../src/system_stm32f4xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 274:../src/system_stm32f4xx.c ****   *              have wrong result.
 275:../src/system_stm32f4xx.c ****   *                
 276:../src/system_stm32f4xx.c ****   *         - The result of this function could be not correct when using fractional
 277:../src/system_stm32f4xx.c ****   *           value for HSE crystal.
 278:../src/system_stm32f4xx.c ****   *     
 279:../src/system_stm32f4xx.c ****   * @param  None
 280:../src/system_stm32f4xx.c ****   * @retval None
 281:../src/system_stm32f4xx.c ****   */
 282:../src/system_stm32f4xx.c **** void SystemCoreClockUpdate(void)
 283:../src/system_stm32f4xx.c **** {
 129              		.loc 1 283 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 24
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 0000 80B4     		push	{r7}
 135              	.LCFI2:
 136              		.cfi_def_cfa_offset 4
 137              		.cfi_offset 7, -4
 138 0002 87B0     		sub	sp, sp, #28
 139              	.LCFI3:
 140              		.cfi_def_cfa_offset 32
 141 0004 00AF     		add	r7, sp, #0
 142              	.LCFI4:
 143              		.cfi_def_cfa_register 7
 284:../src/system_stm32f4xx.c ****   uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 144              		.loc 1 284 0
 145 0006 4FF00003 		mov	r3, #0
 146 000a 3B61     		str	r3, [r7, #16]
 147 000c 4FF00003 		mov	r3, #0
 148 0010 7B61     		str	r3, [r7, #20]
 149 0012 4FF00203 		mov	r3, #2
 150 0016 FB60     		str	r3, [r7, #12]
 151 0018 4FF00003 		mov	r3, #0
 152 001c BB60     		str	r3, [r7, #8]
 153 001e 4FF00203 		mov	r3, #2
 154 0022 7B60     		str	r3, [r7, #4]
 285:../src/system_stm32f4xx.c ****   
 286:../src/system_stm32f4xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 287:../src/system_stm32f4xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 155              		.loc 1 287 0
 156 0024 4FF46053 		mov	r3, #14336
 157 0028 C4F20203 		movt	r3, 16386
 158 002c 9B68     		ldr	r3, [r3, #8]
 159 002e 03F00C03 		and	r3, r3, #12
 160 0032 3B61     		str	r3, [r7, #16]
 288:../src/system_stm32f4xx.c **** 
 289:../src/system_stm32f4xx.c ****   switch (tmp)
 161              		.loc 1 289 0
 162 0034 3B69     		ldr	r3, [r7, #16]
 163 0036 042B     		cmp	r3, #4
 164 0038 0DD0     		beq	.L5
 165 003a 082B     		cmp	r3, #8
 166 003c 15D0     		beq	.L6
 167 003e 002B     		cmp	r3, #0
 168 0040 69D1     		bne	.L10
 169              	.L4:
 290:../src/system_stm32f4xx.c ****   {
 291:../src/system_stm32f4xx.c ****     case 0x00:  /* HSI used as system clock source */
 292:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 170              		.loc 1 292 0
 171 0042 40F20003 		movw	r3, #:lower16:SystemCoreClock
 172 0046 C0F20003 		movt	r3, #:upper16:SystemCoreClock
 173 004a 4FF41052 		mov	r2, #9216
 174 004e C0F2F402 		movt	r2, 244
 175 0052 1A60     		str	r2, [r3, #0]
 293:../src/system_stm32f4xx.c ****       break;
 176              		.loc 1 293 0
 177 0054 69E0     		b	.L7
 178              	.L5:
 294:../src/system_stm32f4xx.c ****     case 0x04:  /* HSE used as system clock source */
 295:../src/system_stm32f4xx.c ****       SystemCoreClock = HSE_VALUE;
 179              		.loc 1 295 0
 180 0056 40F20003 		movw	r3, #:lower16:SystemCoreClock
 181 005a C0F20003 		movt	r3, #:upper16:SystemCoreClock
 182 005e 4FF49052 		mov	r2, #4608
 183 0062 C0F27A02 		movt	r2, 122
 184 0066 1A60     		str	r2, [r3, #0]
 296:../src/system_stm32f4xx.c ****       break;
 185              		.loc 1 296 0
 186 0068 5FE0     		b	.L7
 187              	.L6:
 297:../src/system_stm32f4xx.c ****     case 0x08:  /* PLL used as system clock source */
 298:../src/system_stm32f4xx.c **** 
 299:../src/system_stm32f4xx.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
 300:../src/system_stm32f4xx.c ****          SYSCLK = PLL_VCO / PLL_P
 301:../src/system_stm32f4xx.c ****          */    
 302:../src/system_stm32f4xx.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 188              		.loc 1 302 0
 189 006a 4FF46053 		mov	r3, #14336
 190 006e C4F20203 		movt	r3, 16386
 191 0072 5B68     		ldr	r3, [r3, #4]
 192 0074 03F48003 		and	r3, r3, #4194304
 193 0078 4FEA9353 		lsr	r3, r3, #22
 194 007c BB60     		str	r3, [r7, #8]
 303:../src/system_stm32f4xx.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 195              		.loc 1 303 0
 196 007e 4FF46053 		mov	r3, #14336
 197 0082 C4F20203 		movt	r3, 16386
 198 0086 5B68     		ldr	r3, [r3, #4]
 199 0088 03F03F03 		and	r3, r3, #63
 200 008c 7B60     		str	r3, [r7, #4]
 304:../src/system_stm32f4xx.c ****       
 305:../src/system_stm32f4xx.c ****       if (pllsource != 0)
 201              		.loc 1 305 0
 202 008e BB68     		ldr	r3, [r7, #8]
 203 0090 002B     		cmp	r3, #0
 204 0092 14D0     		beq	.L8
 306:../src/system_stm32f4xx.c ****       {
 307:../src/system_stm32f4xx.c ****         /* HSE used as PLL clock source */
 308:../src/system_stm32f4xx.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 205              		.loc 1 308 0
 206 0094 4FF49053 		mov	r3, #4608
 207 0098 C0F27A03 		movt	r3, 122
 208 009c 7A68     		ldr	r2, [r7, #4]
 209 009e B3FBF2F2 		udiv	r2, r3, r2
 210 00a2 4FF46053 		mov	r3, #14336
 211 00a6 C4F20203 		movt	r3, 16386
 212 00aa 5968     		ldr	r1, [r3, #4]
 213 00ac 47F6C073 		movw	r3, #32704
 214 00b0 0B40     		ands	r3, r3, r1
 215 00b2 4FEA9313 		lsr	r3, r3, #6
 216 00b6 03FB02F3 		mul	r3, r3, r2
 217 00ba 7B61     		str	r3, [r7, #20]
 218 00bc 13E0     		b	.L9
 219              	.L8:
 309:../src/system_stm32f4xx.c ****       }
 310:../src/system_stm32f4xx.c ****       else
 311:../src/system_stm32f4xx.c ****       {
 312:../src/system_stm32f4xx.c ****         /* HSI used as PLL clock source */
 313:../src/system_stm32f4xx.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 220              		.loc 1 313 0
 221 00be 4FF41053 		mov	r3, #9216
 222 00c2 C0F2F403 		movt	r3, 244
 223 00c6 7A68     		ldr	r2, [r7, #4]
 224 00c8 B3FBF2F2 		udiv	r2, r3, r2
 225 00cc 4FF46053 		mov	r3, #14336
 226 00d0 C4F20203 		movt	r3, 16386
 227 00d4 5968     		ldr	r1, [r3, #4]
 228 00d6 47F6C073 		movw	r3, #32704
 229 00da 0B40     		ands	r3, r3, r1
 230 00dc 4FEA9313 		lsr	r3, r3, #6
 231 00e0 03FB02F3 		mul	r3, r3, r2
 232 00e4 7B61     		str	r3, [r7, #20]
 233              	.L9:
 314:../src/system_stm32f4xx.c ****       }
 315:../src/system_stm32f4xx.c **** 
 316:../src/system_stm32f4xx.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 234              		.loc 1 316 0
 235 00e6 4FF46053 		mov	r3, #14336
 236 00ea C4F20203 		movt	r3, 16386
 237 00ee 5B68     		ldr	r3, [r3, #4]
 238 00f0 03F44033 		and	r3, r3, #196608
 239 00f4 4FEA1343 		lsr	r3, r3, #16
 240 00f8 03F10103 		add	r3, r3, #1
 241 00fc 4FEA4303 		lsl	r3, r3, #1
 242 0100 FB60     		str	r3, [r7, #12]
 317:../src/system_stm32f4xx.c ****       SystemCoreClock = pllvco/pllp;
 243              		.loc 1 317 0
 244 0102 7A69     		ldr	r2, [r7, #20]
 245 0104 FB68     		ldr	r3, [r7, #12]
 246 0106 B2FBF3F2 		udiv	r2, r2, r3
 247 010a 40F20003 		movw	r3, #:lower16:SystemCoreClock
 248 010e C0F20003 		movt	r3, #:upper16:SystemCoreClock
 249 0112 1A60     		str	r2, [r3, #0]
 318:../src/system_stm32f4xx.c ****       break;
 250              		.loc 1 318 0
 251 0114 09E0     		b	.L7
 252              	.L10:
 319:../src/system_stm32f4xx.c ****     default:
 320:../src/system_stm32f4xx.c ****       SystemCoreClock = HSI_VALUE;
 253              		.loc 1 320 0
 254 0116 40F20003 		movw	r3, #:lower16:SystemCoreClock
 255 011a C0F20003 		movt	r3, #:upper16:SystemCoreClock
 256 011e 4FF41052 		mov	r2, #9216
 257 0122 C0F2F402 		movt	r2, 244
 258 0126 1A60     		str	r2, [r3, #0]
 321:../src/system_stm32f4xx.c ****       break;
 259              		.loc 1 321 0
 260 0128 00BF     		nop
 261              	.L7:
 322:../src/system_stm32f4xx.c ****   }
 323:../src/system_stm32f4xx.c ****   /* Compute HCLK frequency --------------------------------------------------*/
 324:../src/system_stm32f4xx.c ****   /* Get HCLK prescaler */
 325:../src/system_stm32f4xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 262              		.loc 1 325 0
 263 012a 4FF46053 		mov	r3, #14336
 264 012e C4F20203 		movt	r3, 16386
 265 0132 9B68     		ldr	r3, [r3, #8]
 266 0134 03F0F003 		and	r3, r3, #240
 267 0138 4FEA1312 		lsr	r2, r3, #4
 268 013c 40F20003 		movw	r3, #:lower16:AHBPrescTable
 269 0140 C0F20003 		movt	r3, #:upper16:AHBPrescTable
 270 0144 9B5C     		ldrb	r3, [r3, r2]
 271 0146 DBB2     		uxtb	r3, r3
 272 0148 3B61     		str	r3, [r7, #16]
 326:../src/system_stm32f4xx.c ****   /* HCLK frequency */
 327:../src/system_stm32f4xx.c ****   SystemCoreClock >>= tmp;
 273              		.loc 1 327 0
 274 014a 40F20003 		movw	r3, #:lower16:SystemCoreClock
 275 014e C0F20003 		movt	r3, #:upper16:SystemCoreClock
 276 0152 1A68     		ldr	r2, [r3, #0]
 277 0154 3B69     		ldr	r3, [r7, #16]
 278 0156 22FA03F2 		lsr	r2, r2, r3
 279 015a 40F20003 		movw	r3, #:lower16:SystemCoreClock
 280 015e C0F20003 		movt	r3, #:upper16:SystemCoreClock
 281 0162 1A60     		str	r2, [r3, #0]
 328:../src/system_stm32f4xx.c **** }
 282              		.loc 1 328 0
 283 0164 07F11C07 		add	r7, r7, #28
 284 0168 BD46     		mov	sp, r7
 285 016a 80BC     		pop	{r7}
 286 016c 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE111:
 290 016e 00BF     		.section	.text.SetSysClock,"ax",%progbits
 291              		.align	2
 292              		.thumb
 293              		.thumb_func
 295              	SetSysClock:
 296              	.LFB112:
 329:../src/system_stm32f4xx.c **** 
 330:../src/system_stm32f4xx.c **** /**
 331:../src/system_stm32f4xx.c ****   * @brief  Configures the System clock source, PLL Multiplier and Divider factors, 
 332:../src/system_stm32f4xx.c ****   *         AHB/APBx prescalers and Flash settings
 333:../src/system_stm32f4xx.c ****   * @Note   This function should be called only once the RCC clock configuration  
 334:../src/system_stm32f4xx.c ****   *         is reset to the default reset state (done in SystemInit() function).   
 335:../src/system_stm32f4xx.c ****   * @param  None
 336:../src/system_stm32f4xx.c ****   * @retval None
 337:../src/system_stm32f4xx.c ****   */
 338:../src/system_stm32f4xx.c **** static void SetSysClock(void)
 339:../src/system_stm32f4xx.c **** {
 297              		.loc 1 339 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 8
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              	.LCFI5:
 304              		.cfi_def_cfa_offset 4
 305              		.cfi_offset 7, -4
 306 0002 83B0     		sub	sp, sp, #12
 307              	.LCFI6:
 308              		.cfi_def_cfa_offset 16
 309 0004 00AF     		add	r7, sp, #0
 310              	.LCFI7:
 311              		.cfi_def_cfa_register 7
 340:../src/system_stm32f4xx.c **** /******************************************************************************/
 341:../src/system_stm32f4xx.c **** /*            PLL (clocked by HSE) used as System clock source                */
 342:../src/system_stm32f4xx.c **** /******************************************************************************/
 343:../src/system_stm32f4xx.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 312              		.loc 1 343 0
 313 0006 4FF00003 		mov	r3, #0
 314 000a 7B60     		str	r3, [r7, #4]
 315 000c 4FF00003 		mov	r3, #0
 316 0010 3B60     		str	r3, [r7, #0]
 344:../src/system_stm32f4xx.c ****   
 345:../src/system_stm32f4xx.c ****   /* Enable HSE */
 346:../src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 317              		.loc 1 346 0
 318 0012 4FF46053 		mov	r3, #14336
 319 0016 C4F20203 		movt	r3, 16386
 320 001a 4FF46052 		mov	r2, #14336
 321 001e C4F20202 		movt	r2, 16386
 322 0022 1268     		ldr	r2, [r2, #0]
 323 0024 42F48032 		orr	r2, r2, #65536
 324 0028 1A60     		str	r2, [r3, #0]
 325              	.L13:
 347:../src/system_stm32f4xx.c ****  
 348:../src/system_stm32f4xx.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 349:../src/system_stm32f4xx.c ****   do
 350:../src/system_stm32f4xx.c ****   {
 351:../src/system_stm32f4xx.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 326              		.loc 1 351 0 discriminator 1
 327 002a 4FF46053 		mov	r3, #14336
 328 002e C4F20203 		movt	r3, 16386
 329 0032 1B68     		ldr	r3, [r3, #0]
 330 0034 03F40033 		and	r3, r3, #131072
 331 0038 3B60     		str	r3, [r7, #0]
 352:../src/system_stm32f4xx.c ****     StartUpCounter++;
 332              		.loc 1 352 0 discriminator 1
 333 003a 7B68     		ldr	r3, [r7, #4]
 334 003c 03F10103 		add	r3, r3, #1
 335 0040 7B60     		str	r3, [r7, #4]
 353:../src/system_stm32f4xx.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 336              		.loc 1 353 0 discriminator 1
 337 0042 3B68     		ldr	r3, [r7, #0]
 338 0044 002B     		cmp	r3, #0
 339 0046 03D1     		bne	.L12
 340 0048 7B68     		ldr	r3, [r7, #4]
 341 004a B3F5A06F 		cmp	r3, #1280
 342 004e ECD1     		bne	.L13
 343              	.L12:
 354:../src/system_stm32f4xx.c **** 
 355:../src/system_stm32f4xx.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 344              		.loc 1 355 0
 345 0050 4FF46053 		mov	r3, #14336
 346 0054 C4F20203 		movt	r3, 16386
 347 0058 1B68     		ldr	r3, [r3, #0]
 348 005a 03F40033 		and	r3, r3, #131072
 349 005e 002B     		cmp	r3, #0
 350 0060 03D0     		beq	.L14
 356:../src/system_stm32f4xx.c ****   {
 357:../src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x01;
 351              		.loc 1 357 0
 352 0062 4FF00103 		mov	r3, #1
 353 0066 3B60     		str	r3, [r7, #0]
 354 0068 02E0     		b	.L15
 355              	.L14:
 358:../src/system_stm32f4xx.c ****   }
 359:../src/system_stm32f4xx.c ****   else
 360:../src/system_stm32f4xx.c ****   {
 361:../src/system_stm32f4xx.c ****     HSEStatus = (uint32_t)0x00;
 356              		.loc 1 361 0
 357 006a 4FF00003 		mov	r3, #0
 358 006e 3B60     		str	r3, [r7, #0]
 359              	.L15:
 362:../src/system_stm32f4xx.c ****   }
 363:../src/system_stm32f4xx.c **** 
 364:../src/system_stm32f4xx.c ****   if (HSEStatus == (uint32_t)0x01)
 360              		.loc 1 364 0
 361 0070 3B68     		ldr	r3, [r7, #0]
 362 0072 012B     		cmp	r3, #1
 363 0074 40F08280 		bne	.L16
 365:../src/system_stm32f4xx.c ****   {
 366:../src/system_stm32f4xx.c ****     /* Enable high performance mode, System frequency up to 168 MHz */
 367:../src/system_stm32f4xx.c ****     RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 364              		.loc 1 367 0
 365 0078 4FF46053 		mov	r3, #14336
 366 007c C4F20203 		movt	r3, 16386
 367 0080 4FF46052 		mov	r2, #14336
 368 0084 C4F20202 		movt	r2, 16386
 369 0088 126C     		ldr	r2, [r2, #64]
 370 008a 42F08052 		orr	r2, r2, #268435456
 371 008e 1A64     		str	r2, [r3, #64]
 368:../src/system_stm32f4xx.c ****     PWR->CR |= PWR_CR_PMODE;  
 372              		.loc 1 368 0
 373 0090 4FF4E043 		mov	r3, #28672
 374 0094 C4F20003 		movt	r3, 16384
 375 0098 4FF4E042 		mov	r2, #28672
 376 009c C4F20002 		movt	r2, 16384
 377 00a0 1268     		ldr	r2, [r2, #0]
 378 00a2 42F48042 		orr	r2, r2, #16384
 379 00a6 1A60     		str	r2, [r3, #0]
 369:../src/system_stm32f4xx.c **** 
 370:../src/system_stm32f4xx.c ****     /* HCLK = SYSCLK / 1*/
 371:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 380              		.loc 1 371 0
 381 00a8 4FF46053 		mov	r3, #14336
 382 00ac C4F20203 		movt	r3, 16386
 383 00b0 4FF46052 		mov	r2, #14336
 384 00b4 C4F20202 		movt	r2, 16386
 385 00b8 9268     		ldr	r2, [r2, #8]
 386 00ba 9A60     		str	r2, [r3, #8]
 372:../src/system_stm32f4xx.c ****       
 373:../src/system_stm32f4xx.c ****     /* PCLK2 = HCLK / 2*/
 374:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 387              		.loc 1 374 0
 388 00bc 4FF46053 		mov	r3, #14336
 389 00c0 C4F20203 		movt	r3, 16386
 390 00c4 4FF46052 		mov	r2, #14336
 391 00c8 C4F20202 		movt	r2, 16386
 392 00cc 9268     		ldr	r2, [r2, #8]
 393 00ce 42F40042 		orr	r2, r2, #32768
 394 00d2 9A60     		str	r2, [r3, #8]
 375:../src/system_stm32f4xx.c ****     
 376:../src/system_stm32f4xx.c ****     /* PCLK1 = HCLK / 4*/
 377:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 395              		.loc 1 377 0
 396 00d4 4FF46053 		mov	r3, #14336
 397 00d8 C4F20203 		movt	r3, 16386
 398 00dc 4FF46052 		mov	r2, #14336
 399 00e0 C4F20202 		movt	r2, 16386
 400 00e4 9268     		ldr	r2, [r2, #8]
 401 00e6 42F4A052 		orr	r2, r2, #5120
 402 00ea 9A60     		str	r2, [r3, #8]
 378:../src/system_stm32f4xx.c **** 
 379:../src/system_stm32f4xx.c ****     /* Configure the main PLL */
 380:../src/system_stm32f4xx.c ****     RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 403              		.loc 1 380 0
 404 00ec 4FF46053 		mov	r3, #14336
 405 00f0 C4F20203 		movt	r3, 16386
 406 00f4 45F20842 		movw	r2, #21512
 407 00f8 C0F24072 		movt	r2, 1856
 408 00fc 5A60     		str	r2, [r3, #4]
 381:../src/system_stm32f4xx.c ****                    (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
 382:../src/system_stm32f4xx.c **** 
 383:../src/system_stm32f4xx.c ****     /* Enable the main PLL */
 384:../src/system_stm32f4xx.c ****     RCC->CR |= RCC_CR_PLLON;
 409              		.loc 1 384 0
 410 00fe 4FF46053 		mov	r3, #14336
 411 0102 C4F20203 		movt	r3, 16386
 412 0106 4FF46052 		mov	r2, #14336
 413 010a C4F20202 		movt	r2, 16386
 414 010e 1268     		ldr	r2, [r2, #0]
 415 0110 42F08072 		orr	r2, r2, #16777216
 416 0114 1A60     		str	r2, [r3, #0]
 385:../src/system_stm32f4xx.c **** 
 386:../src/system_stm32f4xx.c ****     /* Wait till the main PLL is ready */
 387:../src/system_stm32f4xx.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 417              		.loc 1 387 0
 418 0116 00BF     		nop
 419              	.L17:
 420              		.loc 1 387 0 is_stmt 0 discriminator 1
 421 0118 4FF46053 		mov	r3, #14336
 422 011c C4F20203 		movt	r3, 16386
 423 0120 1B68     		ldr	r3, [r3, #0]
 424 0122 03F00073 		and	r3, r3, #33554432
 425 0126 002B     		cmp	r3, #0
 426 0128 F6D0     		beq	.L17
 388:../src/system_stm32f4xx.c ****     {
 389:../src/system_stm32f4xx.c ****     }
 390:../src/system_stm32f4xx.c ****    
 391:../src/system_stm32f4xx.c ****     /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
 392:../src/system_stm32f4xx.c ****     FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 427              		.loc 1 392 0 is_stmt 1
 428 012a 4FF47053 		mov	r3, #15360
 429 012e C4F20203 		movt	r3, 16386
 430 0132 40F20562 		movw	r2, #1541
 431 0136 1A60     		str	r2, [r3, #0]
 393:../src/system_stm32f4xx.c **** 
 394:../src/system_stm32f4xx.c ****     /* Select the main PLL as system clock source */
 395:../src/system_stm32f4xx.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 432              		.loc 1 395 0
 433 0138 4FF46053 		mov	r3, #14336
 434 013c C4F20203 		movt	r3, 16386
 435 0140 4FF46052 		mov	r2, #14336
 436 0144 C4F20202 		movt	r2, 16386
 437 0148 9268     		ldr	r2, [r2, #8]
 438 014a 22F00302 		bic	r2, r2, #3
 439 014e 9A60     		str	r2, [r3, #8]
 396:../src/system_stm32f4xx.c ****     RCC->CFGR |= RCC_CFGR_SW_PLL;
 440              		.loc 1 396 0
 441 0150 4FF46053 		mov	r3, #14336
 442 0154 C4F20203 		movt	r3, 16386
 443 0158 4FF46052 		mov	r2, #14336
 444 015c C4F20202 		movt	r2, 16386
 445 0160 9268     		ldr	r2, [r2, #8]
 446 0162 42F00202 		orr	r2, r2, #2
 447 0166 9A60     		str	r2, [r3, #8]
 397:../src/system_stm32f4xx.c **** 
 398:../src/system_stm32f4xx.c ****     /* Wait till the main PLL is used as system clock source */
 399:../src/system_stm32f4xx.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 448              		.loc 1 399 0
 449 0168 00BF     		nop
 450              	.L18:
 451              		.loc 1 399 0 is_stmt 0 discriminator 1
 452 016a 4FF46053 		mov	r3, #14336
 453 016e C4F20203 		movt	r3, 16386
 454 0172 9B68     		ldr	r3, [r3, #8]
 455 0174 03F00C03 		and	r3, r3, #12
 456 0178 082B     		cmp	r3, #8
 457 017a F6D1     		bne	.L18
 458              	.L16:
 400:../src/system_stm32f4xx.c ****     {
 401:../src/system_stm32f4xx.c ****     }
 402:../src/system_stm32f4xx.c ****   }
 403:../src/system_stm32f4xx.c ****   else
 404:../src/system_stm32f4xx.c ****   { /* If HSE fails to start-up, the application will have wrong clock
 405:../src/system_stm32f4xx.c ****          configuration. User can add here some code to deal with this error */
 406:../src/system_stm32f4xx.c ****   }
 407:../src/system_stm32f4xx.c **** 
 408:../src/system_stm32f4xx.c **** /******************************************************************************/
 409:../src/system_stm32f4xx.c **** /*                        I2S clock configuration                             */
 410:../src/system_stm32f4xx.c **** /******************************************************************************/
 411:../src/system_stm32f4xx.c ****   /* PLLI2S clock used as I2S clock source */
 412:../src/system_stm32f4xx.c ****   RCC->CFGR &= ~RCC_CFGR_I2SSRC;
 459              		.loc 1 412 0 is_stmt 1
 460 017c 4FF46053 		mov	r3, #14336
 461 0180 C4F20203 		movt	r3, 16386
 462 0184 4FF46052 		mov	r2, #14336
 463 0188 C4F20202 		movt	r2, 16386
 464 018c 9268     		ldr	r2, [r2, #8]
 465 018e 22F40002 		bic	r2, r2, #8388608
 466 0192 9A60     		str	r2, [r3, #8]
 413:../src/system_stm32f4xx.c **** 
 414:../src/system_stm32f4xx.c ****   /* Configure PLLI2S */
 415:../src/system_stm32f4xx.c ****   RCC->PLLI2SCFGR = (PLLI2S_N << 6) | (PLLI2S_R << 28);
 467              		.loc 1 415 0
 468 0194 4FF46053 		mov	r3, #14336
 469 0198 C4F20203 		movt	r3, 16386
 470 019c 4FF44052 		mov	r2, #12288
 471 01a0 C5F20002 		movt	r2, 20480
 472 01a4 C3F88420 		str	r2, [r3, #132]
 416:../src/system_stm32f4xx.c **** 
 417:../src/system_stm32f4xx.c ****   /* Enable PLLI2S */
 418:../src/system_stm32f4xx.c ****   RCC->CR |= ((uint32_t)RCC_CR_PLLI2SON);
 473              		.loc 1 418 0
 474 01a8 4FF46053 		mov	r3, #14336
 475 01ac C4F20203 		movt	r3, 16386
 476 01b0 4FF46052 		mov	r2, #14336
 477 01b4 C4F20202 		movt	r2, 16386
 478 01b8 1268     		ldr	r2, [r2, #0]
 479 01ba 42F08062 		orr	r2, r2, #67108864
 480 01be 1A60     		str	r2, [r3, #0]
 419:../src/system_stm32f4xx.c **** 
 420:../src/system_stm32f4xx.c ****   /* Wait till PLLI2S is ready */
 421:../src/system_stm32f4xx.c ****   while((RCC->CR & RCC_CR_PLLI2SRDY) == 0)
 481              		.loc 1 421 0
 482 01c0 00BF     		nop
 483              	.L19:
 484              		.loc 1 421 0 is_stmt 0 discriminator 1
 485 01c2 4FF46053 		mov	r3, #14336
 486 01c6 C4F20203 		movt	r3, 16386
 487 01ca 1B68     		ldr	r3, [r3, #0]
 488 01cc 03F00063 		and	r3, r3, #134217728
 489 01d0 002B     		cmp	r3, #0
 490 01d2 F6D0     		beq	.L19
 422:../src/system_stm32f4xx.c ****   {
 423:../src/system_stm32f4xx.c ****   }
 424:../src/system_stm32f4xx.c **** }
 491              		.loc 1 424 0 is_stmt 1
 492 01d4 07F10C07 		add	r7, r7, #12
 493 01d8 BD46     		mov	sp, r7
 494 01da 80BC     		pop	{r7}
 495 01dc 7047     		bx	lr
 496              		.cfi_endproc
 497              	.LFE112:
 499 01de 00BF     		.text
 500              	.Letext0:
 501              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 502              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
 503              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Device\\STM32F4xx\\Inc
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f4xx.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:23     .data.SystemCoreClock:00000000 SystemCoreClock
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:20     .data.SystemCoreClock:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:30     .data.AHBPrescTable:00000000 AHBPrescTable
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:27     .data.AHBPrescTable:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:48     .text.SystemInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:53     .text.SystemInit:00000000 SystemInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:295    .text.SetSysClock:00000000 SetSysClock
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:122    .text.SystemCoreClockUpdate:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:127    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0Py08e.s:291    .text.SetSysClock:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
