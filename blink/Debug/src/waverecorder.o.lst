   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"waverecorder.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	RAM_Buf,3000,4
  19              		.comm	RAM_Buf1,3000,4
  20              		.global	buf_idx
  21              		.section	.bss.buf_idx,"aw",%nobits
  22              		.align	1
  25              	buf_idx:
  26 0000 0000     		.space	2
  27              		.global	buf_idx1
  28              		.section	.bss.buf_idx1,"aw",%nobits
  29              		.align	1
  32              	buf_idx1:
  33 0000 0000     		.space	2
  34              		.comm	writebuffer,4,4
  35              		.global	counter
  36              		.section	.bss.counter,"aw",%nobits
  37              		.align	1
  40              	counter:
  41 0000 0000     		.space	2
  42              		.global	WaveRecStatus
  43              		.section	.bss.WaveRecStatus,"aw",%nobits
  46              	WaveRecStatus:
  47 0000 00       		.space	1
  48              		.section	.bss.AudioRecInited,"aw",%nobits
  49              		.align	2
  52              	AudioRecInited:
  53 0000 00000000 		.space	4
  54              		.comm	Filter,52,4
  55              		.global	AudioRecBitRes
  56              		.section	.data.AudioRecBitRes,"aw",%progbits
  57              		.align	2
  60              	AudioRecBitRes:
  61 0000 10000000 		.word	16
  62              		.comm	RecBuf,32,4
  63              		.comm	RecBuf1,32,4
  64              		.comm	RecBufHeader,512,4
  65              		.global	Switch
  66              		.section	.bss.Switch,"aw",%nobits
  69              	Switch:
  70 0000 00       		.space	1
  71              		.global	Data_Status
  72              		.section	.bss.Data_Status,"aw",%nobits
  73              		.align	2
  76              	Data_Status:
  77 0000 00000000 		.space	4
  78              		.global	AudioRecChnlNbr
  79              		.section	.data.AudioRecChnlNbr,"aw",%progbits
  80              		.align	2
  83              	AudioRecChnlNbr:
  84 0000 01000000 		.word	1
  85              		.comm	pAudioRecBuf,4,4
  86              		.global	AudioRecCurrSize
  87              		.section	.bss.AudioRecCurrSize,"aw",%nobits
  88              		.align	2
  91              	AudioRecCurrSize:
  92 0000 00000000 		.space	4
  93              		.comm	bytesWritten,2,2
  94              		.section	.bss.InternalBuffer,"aw",%nobits
  95              		.align	2
  98              	InternalBuffer:
  99 0000 00000000 		.space	128
  99      00000000 
  99      00000000 
  99      00000000 
  99      00000000 
 100              		.section	.bss.InternalBufferSize,"aw",%nobits
 101              		.align	2
 104              	InternalBufferSize:
 105 0000 00000000 		.space	4
 106              		.section	.text.WaveRecorderInit,"ax",%progbits
 107              		.align	2
 108              		.global	WaveRecorderInit
 109              		.thumb
 110              		.thumb_func
 112              	WaveRecorderInit:
 113              	.LFB110:
 114              		.file 1 "../src/waverecorder.c"
   1:../src/waverecorder.c **** /**
   2:../src/waverecorder.c ****   ******************************************************************************
   3:../src/waverecorder.c ****   * @file    Audio_playback_and_record/src/waverecorder.c 
   4:../src/waverecorder.c ****   * @author  MCD Application Team
   5:../src/waverecorder.c ****   * @version V1.0.0
   6:../src/waverecorder.c ****   * @date    28-October-2011
   7:../src/waverecorder.c ****   * @brief   I2S audio program 
   8:../src/waverecorder.c ****   ******************************************************************************
   9:../src/waverecorder.c ****   * @attention
  10:../src/waverecorder.c ****   *
  11:../src/waverecorder.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../src/waverecorder.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../src/waverecorder.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../src/waverecorder.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../src/waverecorder.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../src/waverecorder.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../src/waverecorder.c ****   *
  18:../src/waverecorder.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../src/waverecorder.c ****   ******************************************************************************
  20:../src/waverecorder.c ****   */ 
  21:../src/waverecorder.c **** 
  22:../src/waverecorder.c **** /* Includes ------------------------------------------------------------------*/
  23:../src/waverecorder.c **** #include "main.h"
  24:../src/waverecorder.c **** #include "pdm_filter.h"
  25:../src/waverecorder.c **** #include "waverecorder.h" 
  26:../src/waverecorder.c **** 
  27:../src/waverecorder.c **** /** @addtogroup STM32F4-Discovery_Audio_Player_Recorder
  28:../src/waverecorder.c **** * @{
  29:../src/waverecorder.c **** */ 
  30:../src/waverecorder.c **** 
  31:../src/waverecorder.c **** /* Private typedef -----------------------------------------------------------*/
  32:../src/waverecorder.c **** /* Private define ------------------------------------------------------------*/
  33:../src/waverecorder.c **** /* SPI Configuration defines */
  34:../src/waverecorder.c **** #define SPI_SCK_PIN                       GPIO_Pin_10
  35:../src/waverecorder.c **** #define SPI_SCK_GPIO_PORT                 GPIOB
  36:../src/waverecorder.c **** #define SPI_SCK_GPIO_CLK                  RCC_AHB1Periph_GPIOB
  37:../src/waverecorder.c **** #define SPI_SCK_SOURCE                    GPIO_PinSource10
  38:../src/waverecorder.c **** #define SPI_SCK_AF                        GPIO_AF_SPI2
  39:../src/waverecorder.c **** 
  40:../src/waverecorder.c **** #define SPI_MOSI_PIN                      GPIO_Pin_3
  41:../src/waverecorder.c **** #define SPI_MOSI_GPIO_PORT                GPIOC
  42:../src/waverecorder.c **** #define SPI_MOSI_GPIO_CLK                 RCC_AHB1Periph_GPIOC
  43:../src/waverecorder.c **** #define SPI_MOSI_SOURCE                   GPIO_PinSource3
  44:../src/waverecorder.c **** #define SPI_MOSI_AF                       GPIO_AF_SPI2
  45:../src/waverecorder.c **** 
  46:../src/waverecorder.c **** #define AUDIO_REC_SPI_IRQHANDLER          SPI2_IRQHandler
  47:../src/waverecorder.c **** 
  48:../src/waverecorder.c **** /* Audio recording frequency in Hz */
  49:../src/waverecorder.c **** #define REC_FREQ                          8000  
  50:../src/waverecorder.c **** 
  51:../src/waverecorder.c **** /* PDM buffer input size */
  52:../src/waverecorder.c **** #define INTERNAL_BUFF_SIZE      64
  53:../src/waverecorder.c **** 
  54:../src/waverecorder.c **** /* PCM buffer output size */
  55:../src/waverecorder.c **** #define PCM_OUT_SIZE            16
  56:../src/waverecorder.c **** 
  57:../src/waverecorder.c **** /* Private macro -------------------------------------------------------------*/
  58:../src/waverecorder.c **** /* Private variables ---------------------------------------------------------*/
  59:../src/waverecorder.c **** extern __IO uint16_t Time_Rec_Base;
  60:../src/waverecorder.c **** extern __IO uint8_t Command_index;
  61:../src/waverecorder.c **** extern USB_OTG_CORE_HANDLE  USB_OTG_Core;
  62:../src/waverecorder.c **** extern __IO uint32_t WaveCounter;
  63:../src/waverecorder.c **** extern FIL file;
  64:../src/waverecorder.c **** extern __IO uint8_t LED_Toggle;
  65:../src/waverecorder.c **** uint16_t RAM_Buf[RAM_BUFFER_SIZE];
  66:../src/waverecorder.c **** uint16_t RAM_Buf1 [RAM_BUFFER_SIZE];
  67:../src/waverecorder.c **** uint16_t buf_idx = 0, buf_idx1 =0;
  68:../src/waverecorder.c **** uint16_t *writebuffer;
  69:../src/waverecorder.c **** uint16_t counter = 0;
  70:../src/waverecorder.c **** uint8_t WaveRecStatus = 0;
  71:../src/waverecorder.c **** /* Current state of the audio recorder interface intialization */
  72:../src/waverecorder.c **** static uint32_t AudioRecInited = 0;
  73:../src/waverecorder.c **** PDMFilter_InitStruct Filter;
  74:../src/waverecorder.c **** /* Audio recording Samples format (from 8 to 16 bits) */
  75:../src/waverecorder.c **** uint32_t AudioRecBitRes = 16; 
  76:../src/waverecorder.c **** uint16_t RecBuf[PCM_OUT_SIZE], RecBuf1[PCM_OUT_SIZE];
  77:../src/waverecorder.c **** uint8_t RecBufHeader[512], Switch = 0;
  78:../src/waverecorder.c **** __IO uint32_t Data_Status =0;
  79:../src/waverecorder.c **** /* Audio recording number of channels (1 for Mono or 2 for Stereo) */
  80:../src/waverecorder.c **** uint32_t AudioRecChnlNbr = 1;
  81:../src/waverecorder.c **** /* Main buffer pointer for the recorded data storing */
  82:../src/waverecorder.c **** uint16_t* pAudioRecBuf;
  83:../src/waverecorder.c **** /* Current size of the recorded buffer */
  84:../src/waverecorder.c **** uint32_t AudioRecCurrSize = 0; 
  85:../src/waverecorder.c **** uint16_t bytesWritten;
  86:../src/waverecorder.c **** /* Temporary data sample */
  87:../src/waverecorder.c **** static uint16_t InternalBuffer[INTERNAL_BUFF_SIZE];
  88:../src/waverecorder.c **** static uint32_t InternalBufferSize = 0;
  89:../src/waverecorder.c **** 
  90:../src/waverecorder.c **** /* Private function prototypes -----------------------------------------------*/
  91:../src/waverecorder.c **** static void WaveRecorder_GPIO_Init(void);
  92:../src/waverecorder.c **** static void WaveRecorder_SPI_Init(uint32_t Freq);
  93:../src/waverecorder.c **** static void WaveRecorder_NVIC_Init(void);
  94:../src/waverecorder.c **** 
  95:../src/waverecorder.c **** /* Private functions ---------------------------------------------------------*/
  96:../src/waverecorder.c **** 
  97:../src/waverecorder.c **** /**
  98:../src/waverecorder.c ****   * @brief  Initialize wave recording
  99:../src/waverecorder.c ****   * @param  AudioFreq: Sampling frequency
 100:../src/waverecorder.c ****   *         BitRes: Audio recording Samples format (from 8 to 16 bits)
 101:../src/waverecorder.c ****   *         ChnlNbr: Number of input microphone channel
 102:../src/waverecorder.c ****   * @retval None
 103:../src/waverecorder.c ****   */
 104:../src/waverecorder.c **** uint32_t WaveRecorderInit(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
 105:../src/waverecorder.c **** { 
 115              		.loc 1 105 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 16
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119 0000 80B5     		push	{r7, lr}
 120              	.LCFI0:
 121              		.cfi_def_cfa_offset 8
 122              		.cfi_offset 14, -4
 123              		.cfi_offset 7, -8
 124 0002 84B0     		sub	sp, sp, #16
 125              	.LCFI1:
 126              		.cfi_def_cfa_offset 24
 127 0004 00AF     		add	r7, sp, #0
 128              	.LCFI2:
 129              		.cfi_def_cfa_register 7
 130 0006 F860     		str	r0, [r7, #12]
 131 0008 B960     		str	r1, [r7, #8]
 132 000a 7A60     		str	r2, [r7, #4]
 106:../src/waverecorder.c ****   /* Check if the interface is already initialized */
 107:../src/waverecorder.c ****   if (AudioRecInited)
 133              		.loc 1 107 0
 134 000c 40F20003 		movw	r3, #:lower16:AudioRecInited
 135 0010 C0F20003 		movt	r3, #:upper16:AudioRecInited
 136 0014 1B68     		ldr	r3, [r3, #0]
 137 0016 002B     		cmp	r3, #0
 138 0018 02D0     		beq	.L2
 108:../src/waverecorder.c ****   {
 109:../src/waverecorder.c ****     /* No need for initialization */
 110:../src/waverecorder.c ****     return 0;
 139              		.loc 1 110 0
 140 001a 4FF00003 		mov	r3, #0
 141 001e 4EE0     		b	.L3
 142              	.L2:
 111:../src/waverecorder.c ****   }
 112:../src/waverecorder.c ****   else
 113:../src/waverecorder.c ****   {
 114:../src/waverecorder.c ****     /* Enable CRC module */
 115:../src/waverecorder.c ****     RCC->AHB1ENR |= RCC_AHB1ENR_CRCEN;
 143              		.loc 1 115 0
 144 0020 4FF46053 		mov	r3, #14336
 145 0024 C4F20203 		movt	r3, 16386
 146 0028 4FF46052 		mov	r2, #14336
 147 002c C4F20202 		movt	r2, 16386
 148 0030 126B     		ldr	r2, [r2, #48]
 149 0032 42F48052 		orr	r2, r2, #4096
 150 0036 1A63     		str	r2, [r3, #48]
 116:../src/waverecorder.c ****     
 117:../src/waverecorder.c ****     /* Filter LP & HP Init */
 118:../src/waverecorder.c ****     Filter.LP_HZ = 8000;
 151              		.loc 1 118 0
 152 0038 40F20003 		movw	r3, #:lower16:Filter
 153 003c C0F20003 		movt	r3, #:upper16:Filter
 154 0040 214A     		ldr	r2, .L4	@ float
 155 0042 5A60     		str	r2, [r3, #4]	@ float
 119:../src/waverecorder.c ****     Filter.HP_HZ = 10;
 156              		.loc 1 119 0
 157 0044 40F20003 		movw	r3, #:lower16:Filter
 158 0048 C0F20003 		movt	r3, #:upper16:Filter
 159 004c 1F4A     		ldr	r2, .L4+4	@ float
 160 004e 9A60     		str	r2, [r3, #8]	@ float
 120:../src/waverecorder.c ****     Filter.Fs = 16000;
 161              		.loc 1 120 0
 162 0050 40F20003 		movw	r3, #:lower16:Filter
 163 0054 C0F20003 		movt	r3, #:upper16:Filter
 164 0058 4FF47A52 		mov	r2, #16000
 165 005c 1A80     		strh	r2, [r3, #0]	@ movhi
 121:../src/waverecorder.c ****     Filter.Out_MicChannels = 1;
 166              		.loc 1 121 0
 167 005e 40F20003 		movw	r3, #:lower16:Filter
 168 0062 C0F20003 		movt	r3, #:upper16:Filter
 169 0066 4FF00102 		mov	r2, #1
 170 006a DA81     		strh	r2, [r3, #14]	@ movhi
 122:../src/waverecorder.c ****     Filter.In_MicChannels = 1;
 171              		.loc 1 122 0
 172 006c 40F20003 		movw	r3, #:lower16:Filter
 173 0070 C0F20003 		movt	r3, #:upper16:Filter
 174 0074 4FF00102 		mov	r2, #1
 175 0078 9A81     		strh	r2, [r3, #12]	@ movhi
 123:../src/waverecorder.c ****     
 124:../src/waverecorder.c ****     PDM_Filter_Init((PDMFilter_InitStruct *)&Filter);
 176              		.loc 1 124 0
 177 007a 40F20000 		movw	r0, #:lower16:Filter
 178 007e C0F20000 		movt	r0, #:upper16:Filter
 179 0082 FFF7FEFF 		bl	PDM_Filter_Init
 125:../src/waverecorder.c ****     
 126:../src/waverecorder.c ****     /* Configure the GPIOs */
 127:../src/waverecorder.c ****     WaveRecorder_GPIO_Init();
 180              		.loc 1 127 0
 181 0086 FFF7FEFF 		bl	WaveRecorder_GPIO_Init
 128:../src/waverecorder.c ****     
 129:../src/waverecorder.c ****     /* Configure the interrupts (for timer) */
 130:../src/waverecorder.c ****     WaveRecorder_NVIC_Init();
 182              		.loc 1 130 0
 183 008a FFF7FEFF 		bl	WaveRecorder_NVIC_Init
 131:../src/waverecorder.c ****     
 132:../src/waverecorder.c ****     /* Configure the SPI */
 133:../src/waverecorder.c ****     WaveRecorder_SPI_Init(AudioFreq);
 184              		.loc 1 133 0
 185 008e F868     		ldr	r0, [r7, #12]
 186 0090 FFF7FEFF 		bl	WaveRecorder_SPI_Init
 134:../src/waverecorder.c ****     
 135:../src/waverecorder.c ****     /* Set the local parameters */
 136:../src/waverecorder.c ****     AudioRecBitRes = BitRes;
 187              		.loc 1 136 0
 188 0094 40F20003 		movw	r3, #:lower16:AudioRecBitRes
 189 0098 C0F20003 		movt	r3, #:upper16:AudioRecBitRes
 190 009c BA68     		ldr	r2, [r7, #8]
 191 009e 1A60     		str	r2, [r3, #0]
 137:../src/waverecorder.c ****     AudioRecChnlNbr = ChnlNbr;
 192              		.loc 1 137 0
 193 00a0 40F20003 		movw	r3, #:lower16:AudioRecChnlNbr
 194 00a4 C0F20003 		movt	r3, #:upper16:AudioRecChnlNbr
 195 00a8 7A68     		ldr	r2, [r7, #4]
 196 00aa 1A60     		str	r2, [r3, #0]
 138:../src/waverecorder.c ****     
 139:../src/waverecorder.c ****     /* Set state of the audio recorder to initialized */
 140:../src/waverecorder.c ****     AudioRecInited = 1;
 197              		.loc 1 140 0
 198 00ac 40F20003 		movw	r3, #:lower16:AudioRecInited
 199 00b0 C0F20003 		movt	r3, #:upper16:AudioRecInited
 200 00b4 4FF00102 		mov	r2, #1
 201 00b8 1A60     		str	r2, [r3, #0]
 141:../src/waverecorder.c ****     
 142:../src/waverecorder.c ****     /* Return 0 if all operations are OK */
 143:../src/waverecorder.c ****     return 0;
 202              		.loc 1 143 0
 203 00ba 4FF00003 		mov	r3, #0
 204              	.L3:
 144:../src/waverecorder.c ****   }  
 145:../src/waverecorder.c **** }
 205              		.loc 1 145 0
 206 00be 1846     		mov	r0, r3
 207 00c0 07F11007 		add	r7, r7, #16
 208 00c4 BD46     		mov	sp, r7
 209 00c6 80BD     		pop	{r7, pc}
 210              	.L5:
 211              		.align	2
 212              	.L4:
 213 00c8 0000FA45 		.word	1174011904
 214 00cc 00002041 		.word	1092616192
 215              		.cfi_endproc
 216              	.LFE110:
 218              		.section	.text.WaveRecorderStart,"ax",%progbits
 219              		.align	2
 220              		.global	WaveRecorderStart
 221              		.thumb
 222              		.thumb_func
 224              	WaveRecorderStart:
 225              	.LFB111:
 146:../src/waverecorder.c **** 
 147:../src/waverecorder.c **** /**
 148:../src/waverecorder.c ****   * @brief  Start audio recording
 149:../src/waverecorder.c ****   * @param  pbuf: pointer to a buffer
 150:../src/waverecorder.c ****   *         size: Buffer size
 151:../src/waverecorder.c ****   * @retval None
 152:../src/waverecorder.c ****   */
 153:../src/waverecorder.c **** uint8_t WaveRecorderStart(uint16_t* pbuf, uint32_t size)
 154:../src/waverecorder.c **** {
 226              		.loc 1 154 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 8
 229              		@ frame_needed = 1, uses_anonymous_args = 0
 230 0000 80B5     		push	{r7, lr}
 231              	.LCFI3:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 14, -4
 234              		.cfi_offset 7, -8
 235 0002 82B0     		sub	sp, sp, #8
 236              	.LCFI4:
 237              		.cfi_def_cfa_offset 16
 238 0004 00AF     		add	r7, sp, #0
 239              	.LCFI5:
 240              		.cfi_def_cfa_register 7
 241 0006 7860     		str	r0, [r7, #4]
 242 0008 3960     		str	r1, [r7, #0]
 155:../src/waverecorder.c **** /* Check if the interface has already been initialized */
 156:../src/waverecorder.c ****   if (AudioRecInited)
 243              		.loc 1 156 0
 244 000a 40F20003 		movw	r3, #:lower16:AudioRecInited
 245 000e C0F20003 		movt	r3, #:upper16:AudioRecInited
 246 0012 1B68     		ldr	r3, [r3, #0]
 247 0014 002B     		cmp	r3, #0
 248 0016 20D0     		beq	.L7
 157:../src/waverecorder.c ****   {
 158:../src/waverecorder.c ****     /* Store the location and size of the audio buffer */
 159:../src/waverecorder.c ****     pAudioRecBuf = pbuf;
 249              		.loc 1 159 0
 250 0018 40F20003 		movw	r3, #:lower16:pAudioRecBuf
 251 001c C0F20003 		movt	r3, #:upper16:pAudioRecBuf
 252 0020 7A68     		ldr	r2, [r7, #4]
 253 0022 1A60     		str	r2, [r3, #0]
 160:../src/waverecorder.c ****     AudioRecCurrSize = size;
 254              		.loc 1 160 0
 255 0024 40F20003 		movw	r3, #:lower16:AudioRecCurrSize
 256 0028 C0F20003 		movt	r3, #:upper16:AudioRecCurrSize
 257 002c 3A68     		ldr	r2, [r7, #0]
 258 002e 1A60     		str	r2, [r3, #0]
 161:../src/waverecorder.c ****     
 162:../src/waverecorder.c ****     /* Enable the Rx buffer not empty interrupt */
 163:../src/waverecorder.c ****     SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE, ENABLE);
 259              		.loc 1 163 0
 260 0030 4FF46050 		mov	r0, #14336
 261 0034 C4F20000 		movt	r0, 16384
 262 0038 4FF06001 		mov	r1, #96
 263 003c 4FF00102 		mov	r2, #1
 264 0040 FFF7FEFF 		bl	SPI_I2S_ITConfig
 164:../src/waverecorder.c ****     /* The Data transfer is performed in the SPI interrupt routine */
 165:../src/waverecorder.c ****     /* Enable the SPI peripheral */
 166:../src/waverecorder.c ****     I2S_Cmd(SPI2, ENABLE); 
 265              		.loc 1 166 0
 266 0044 4FF46050 		mov	r0, #14336
 267 0048 C4F20000 		movt	r0, 16384
 268 004c 4FF00101 		mov	r1, #1
 269 0050 FFF7FEFF 		bl	I2S_Cmd
 167:../src/waverecorder.c ****    
 168:../src/waverecorder.c ****     /* Return 0 if all operations are OK */
 169:../src/waverecorder.c ****     return 0;
 270              		.loc 1 169 0
 271 0054 4FF00003 		mov	r3, #0
 272 0058 01E0     		b	.L8
 273              	.L7:
 170:../src/waverecorder.c ****   }
 171:../src/waverecorder.c ****   else
 172:../src/waverecorder.c ****   {
 173:../src/waverecorder.c ****     /* Cannot perform operation */
 174:../src/waverecorder.c ****     return 1;
 274              		.loc 1 174 0
 275 005a 4FF00103 		mov	r3, #1
 276              	.L8:
 175:../src/waverecorder.c ****   }
 176:../src/waverecorder.c **** }
 277              		.loc 1 176 0
 278 005e 1846     		mov	r0, r3
 279 0060 07F10807 		add	r7, r7, #8
 280 0064 BD46     		mov	sp, r7
 281 0066 80BD     		pop	{r7, pc}
 282              		.cfi_endproc
 283              	.LFE111:
 285              		.section	.text.WaveRecorderStop,"ax",%progbits
 286              		.align	2
 287              		.global	WaveRecorderStop
 288              		.thumb
 289              		.thumb_func
 291              	WaveRecorderStop:
 292              	.LFB112:
 177:../src/waverecorder.c **** 
 178:../src/waverecorder.c **** /**
 179:../src/waverecorder.c ****   * @brief  Stop audio recording
 180:../src/waverecorder.c ****   * @param  None
 181:../src/waverecorder.c ****   * @retval None
 182:../src/waverecorder.c ****   */
 183:../src/waverecorder.c **** uint32_t WaveRecorderStop(void)
 184:../src/waverecorder.c **** {
 293              		.loc 1 184 0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 1, uses_anonymous_args = 0
 297 0000 80B5     		push	{r7, lr}
 298              	.LCFI6:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 14, -4
 301              		.cfi_offset 7, -8
 302 0002 00AF     		add	r7, sp, #0
 303              	.LCFI7:
 304              		.cfi_def_cfa_register 7
 185:../src/waverecorder.c ****   /* Check if the interface has already been initialized */
 186:../src/waverecorder.c ****   if (AudioRecInited)
 305              		.loc 1 186 0
 306 0004 40F20003 		movw	r3, #:lower16:AudioRecInited
 307 0008 C0F20003 		movt	r3, #:upper16:AudioRecInited
 308 000c 1B68     		ldr	r3, [r3, #0]
 309 000e 002B     		cmp	r3, #0
 310 0010 0AD0     		beq	.L10
 187:../src/waverecorder.c ****   {
 188:../src/waverecorder.c ****     
 189:../src/waverecorder.c ****     /* Stop conversion */
 190:../src/waverecorder.c ****     I2S_Cmd(SPI2, DISABLE); 
 311              		.loc 1 190 0
 312 0012 4FF46050 		mov	r0, #14336
 313 0016 C4F20000 		movt	r0, 16384
 314 001a 4FF00001 		mov	r1, #0
 315 001e FFF7FEFF 		bl	I2S_Cmd
 191:../src/waverecorder.c ****     
 192:../src/waverecorder.c ****     /* Return 0 if all operations are OK */
 193:../src/waverecorder.c ****     return 0;
 316              		.loc 1 193 0
 317 0022 4FF00003 		mov	r3, #0
 318 0026 01E0     		b	.L11
 319              	.L10:
 194:../src/waverecorder.c ****   }
 195:../src/waverecorder.c ****   else
 196:../src/waverecorder.c ****   {
 197:../src/waverecorder.c ****     /* Cannot perform operation */
 198:../src/waverecorder.c ****     return 1;
 320              		.loc 1 198 0
 321 0028 4FF00103 		mov	r3, #1
 322              	.L11:
 199:../src/waverecorder.c ****   }
 200:../src/waverecorder.c **** }
 323              		.loc 1 200 0
 324 002c 1846     		mov	r0, r3
 325 002e 80BD     		pop	{r7, pc}
 326              		.cfi_endproc
 327              	.LFE112:
 329              		.section	.text.SPI2_IRQHandler,"ax",%progbits
 330              		.align	2
 331              		.global	SPI2_IRQHandler
 332              		.thumb
 333              		.thumb_func
 335              	SPI2_IRQHandler:
 336              	.LFB113:
 201:../src/waverecorder.c **** 
 202:../src/waverecorder.c **** /**
 203:../src/waverecorder.c ****   * @brief  This function handles AUDIO_REC_SPI global interrupt request.
 204:../src/waverecorder.c ****   * @param  None
 205:../src/waverecorder.c ****   * @retval None
 206:../src/waverecorder.c **** */
 207:../src/waverecorder.c **** 
 208:../src/waverecorder.c **** void AUDIO_REC_SPI_IRQHANDLER(void)
 209:../src/waverecorder.c **** {  
 337              		.loc 1 209 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 8
 340              		@ frame_needed = 1, uses_anonymous_args = 0
 341 0000 80B5     		push	{r7, lr}
 342              	.LCFI8:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 14, -4
 345              		.cfi_offset 7, -8
 346 0002 82B0     		sub	sp, sp, #8
 347              	.LCFI9:
 348              		.cfi_def_cfa_offset 16
 349 0004 00AF     		add	r7, sp, #0
 350              	.LCFI10:
 351              		.cfi_def_cfa_register 7
 210:../src/waverecorder.c ****    u16 volume;
 211:../src/waverecorder.c ****    u16 app;
 212:../src/waverecorder.c **** 
 213:../src/waverecorder.c ****   /* Check if data are available in SPI Data register */
 214:../src/waverecorder.c ****   if (SPI_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
 352              		.loc 1 214 0
 353 0006 4FF46050 		mov	r0, #14336
 354 000a C4F20000 		movt	r0, 16384
 355 000e 4FF06001 		mov	r1, #96
 356 0012 FFF7FEFF 		bl	SPI_I2S_GetITStatus
 357 0016 0346     		mov	r3, r0
 358 0018 002B     		cmp	r3, #0
 359 001a 4FD0     		beq	.L12
 215:../src/waverecorder.c ****   {
 216:../src/waverecorder.c ****     app = SPI_I2S_ReceiveData(SPI2);
 360              		.loc 1 216 0
 361 001c 4FF46050 		mov	r0, #14336
 362 0020 C4F20000 		movt	r0, 16384
 363 0024 FFF7FEFF 		bl	SPI_I2S_ReceiveData
 364 0028 0346     		mov	r3, r0
 365 002a FB80     		strh	r3, [r7, #6]	@ movhi
 217:../src/waverecorder.c ****     InternalBuffer[InternalBufferSize++] = HTONS(app);
 366              		.loc 1 217 0
 367 002c 40F20003 		movw	r3, #:lower16:InternalBufferSize
 368 0030 C0F20003 		movt	r3, #:upper16:InternalBufferSize
 369 0034 1A68     		ldr	r2, [r3, #0]
 370 0036 FB88     		ldrh	r3, [r7, #6]
 371 0038 4FEA1323 		lsr	r3, r3, #8
 372 003c 9BB2     		uxth	r3, r3
 373 003e 99B2     		uxth	r1, r3
 374 0040 FB88     		ldrh	r3, [r7, #6]
 375 0042 4FEA0323 		lsl	r3, r3, #8
 376 0046 9BB2     		uxth	r3, r3
 377 0048 0B43     		orrs	r3, r3, r1
 378 004a 9BB2     		uxth	r3, r3
 379 004c 99B2     		uxth	r1, r3
 380 004e 40F20003 		movw	r3, #:lower16:InternalBuffer
 381 0052 C0F20003 		movt	r3, #:upper16:InternalBuffer
 382 0056 23F81210 		strh	r1, [r3, r2, lsl #1]	@ movhi
 383 005a 02F10102 		add	r2, r2, #1
 384 005e 40F20003 		movw	r3, #:lower16:InternalBufferSize
 385 0062 C0F20003 		movt	r3, #:upper16:InternalBufferSize
 386 0066 1A60     		str	r2, [r3, #0]
 218:../src/waverecorder.c ****     
 219:../src/waverecorder.c ****     /* Check to prevent overflow condition */
 220:../src/waverecorder.c ****     if (InternalBufferSize >= INTERNAL_BUFF_SIZE)
 387              		.loc 1 220 0
 388 0068 40F20003 		movw	r3, #:lower16:InternalBufferSize
 389 006c C0F20003 		movt	r3, #:upper16:InternalBufferSize
 390 0070 1B68     		ldr	r3, [r3, #0]
 391 0072 3F2B     		cmp	r3, #63
 392 0074 22D9     		bls	.L12
 221:../src/waverecorder.c ****     {
 222:../src/waverecorder.c ****       InternalBufferSize = 0;
 393              		.loc 1 222 0
 394 0076 40F20003 		movw	r3, #:lower16:InternalBufferSize
 395 007a C0F20003 		movt	r3, #:upper16:InternalBufferSize
 396 007e 4FF00002 		mov	r2, #0
 397 0082 1A60     		str	r2, [r3, #0]
 223:../src/waverecorder.c ****      
 224:../src/waverecorder.c ****       volume = 50;
 398              		.loc 1 224 0
 399 0084 4FF03203 		mov	r3, #50
 400 0088 BB80     		strh	r3, [r7, #4]	@ movhi
 225:../src/waverecorder.c ****       
 226:../src/waverecorder.c ****       PDM_Filter_64_LSB((uint8_t *)InternalBuffer, (uint16_t *)pAudioRecBuf, volume , (PDMFilter_In
 401              		.loc 1 226 0
 402 008a 40F20003 		movw	r3, #:lower16:pAudioRecBuf
 403 008e C0F20003 		movt	r3, #:upper16:pAudioRecBuf
 404 0092 1A68     		ldr	r2, [r3, #0]
 405 0094 BB88     		ldrh	r3, [r7, #4]
 406 0096 40F20000 		movw	r0, #:lower16:InternalBuffer
 407 009a C0F20000 		movt	r0, #:upper16:InternalBuffer
 408 009e 1146     		mov	r1, r2
 409 00a0 1A46     		mov	r2, r3
 410 00a2 40F20003 		movw	r3, #:lower16:Filter
 411 00a6 C0F20003 		movt	r3, #:upper16:Filter
 412 00aa FFF7FEFF 		bl	PDM_Filter_64_LSB
 227:../src/waverecorder.c ****       Data_Status = 1;       
 413              		.loc 1 227 0
 414 00ae 40F20003 		movw	r3, #:lower16:Data_Status
 415 00b2 C0F20003 		movt	r3, #:upper16:Data_Status
 416 00b6 4FF00102 		mov	r2, #1
 417 00ba 1A60     		str	r2, [r3, #0]
 418              	.L12:
 228:../src/waverecorder.c ****     }
 229:../src/waverecorder.c ****   }
 230:../src/waverecorder.c **** }
 419              		.loc 1 230 0
 420 00bc 07F10807 		add	r7, r7, #8
 421 00c0 BD46     		mov	sp, r7
 422 00c2 80BD     		pop	{r7, pc}
 423              		.cfi_endproc
 424              	.LFE113:
 426              		.section	.text.WavaRecorderHeaderInit,"ax",%progbits
 427              		.align	2
 428              		.global	WavaRecorderHeaderInit
 429              		.thumb
 430              		.thumb_func
 432              	WavaRecorderHeaderInit:
 433              	.LFB114:
 231:../src/waverecorder.c **** 
 232:../src/waverecorder.c **** /**
 233:../src/waverecorder.c ****   * @brief  Initialize the wave header file
 234:../src/waverecorder.c ****   * @param  pHeadBuf:Pointer to a buffer
 235:../src/waverecorder.c ****   * @retval None
 236:../src/waverecorder.c ****   */
 237:../src/waverecorder.c **** uint32_t WavaRecorderHeaderInit(uint8_t* pHeadBuf)
 238:../src/waverecorder.c **** {
 434              		.loc 1 238 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 16
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 0000 80B4     		push	{r7}
 440              	.LCFI11:
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 0002 85B0     		sub	sp, sp, #20
 444              	.LCFI12:
 445              		.cfi_def_cfa_offset 24
 446 0004 00AF     		add	r7, sp, #0
 447              	.LCFI13:
 448              		.cfi_def_cfa_register 7
 449 0006 7860     		str	r0, [r7, #4]
 239:../src/waverecorder.c ****   uint16_t count = 0;
 450              		.loc 1 239 0
 451 0008 4FF00003 		mov	r3, #0
 452 000c FB81     		strh	r3, [r7, #14]	@ movhi
 240:../src/waverecorder.c **** 
 241:../src/waverecorder.c ****   /* write chunkID, must be 'RIFF'  ------------------------------------------*/
 242:../src/waverecorder.c ****   pHeadBuf[0] = 'R';
 453              		.loc 1 242 0
 454 000e 7B68     		ldr	r3, [r7, #4]
 455 0010 4FF05202 		mov	r2, #82
 456 0014 1A70     		strb	r2, [r3, #0]
 243:../src/waverecorder.c ****   pHeadBuf[1] = 'I';
 457              		.loc 1 243 0
 458 0016 7B68     		ldr	r3, [r7, #4]
 459 0018 03F10103 		add	r3, r3, #1
 460 001c 4FF04902 		mov	r2, #73
 461 0020 1A70     		strb	r2, [r3, #0]
 244:../src/waverecorder.c ****   pHeadBuf[2] = 'F';
 462              		.loc 1 244 0
 463 0022 7B68     		ldr	r3, [r7, #4]
 464 0024 03F10203 		add	r3, r3, #2
 465 0028 4FF04602 		mov	r2, #70
 466 002c 1A70     		strb	r2, [r3, #0]
 245:../src/waverecorder.c ****   pHeadBuf[3] = 'F';
 467              		.loc 1 245 0
 468 002e 7B68     		ldr	r3, [r7, #4]
 469 0030 03F10303 		add	r3, r3, #3
 470 0034 4FF04602 		mov	r2, #70
 471 0038 1A70     		strb	r2, [r3, #0]
 246:../src/waverecorder.c **** 
 247:../src/waverecorder.c ****   /* Write the file length */
 248:../src/waverecorder.c ****   /* The sampling time 8000 Hz
 249:../src/waverecorder.c ****    To recorde 10s we need 8000 x 10 x 2 (16-Bit data) */
 250:../src/waverecorder.c ****   pHeadBuf[4] = 0x00;
 472              		.loc 1 250 0
 473 003a 7B68     		ldr	r3, [r7, #4]
 474 003c 03F10403 		add	r3, r3, #4
 475 0040 4FF00002 		mov	r2, #0
 476 0044 1A70     		strb	r2, [r3, #0]
 251:../src/waverecorder.c ****   pHeadBuf[5] = 0xE2;
 477              		.loc 1 251 0
 478 0046 7B68     		ldr	r3, [r7, #4]
 479 0048 03F10503 		add	r3, r3, #5
 480 004c 4FF0E202 		mov	r2, #226
 481 0050 1A70     		strb	r2, [r3, #0]
 252:../src/waverecorder.c ****   pHeadBuf[6] = 0x04;
 482              		.loc 1 252 0
 483 0052 7B68     		ldr	r3, [r7, #4]
 484 0054 03F10603 		add	r3, r3, #6
 485 0058 4FF00402 		mov	r2, #4
 486 005c 1A70     		strb	r2, [r3, #0]
 253:../src/waverecorder.c ****   pHeadBuf[7] = 0x00;
 487              		.loc 1 253 0
 488 005e 7B68     		ldr	r3, [r7, #4]
 489 0060 03F10703 		add	r3, r3, #7
 490 0064 4FF00002 		mov	r2, #0
 491 0068 1A70     		strb	r2, [r3, #0]
 254:../src/waverecorder.c **** 
 255:../src/waverecorder.c ****   
 256:../src/waverecorder.c ****   /* Write the file format, must be 'WAVE' */
 257:../src/waverecorder.c ****   pHeadBuf[8]  = 'W';
 492              		.loc 1 257 0
 493 006a 7B68     		ldr	r3, [r7, #4]
 494 006c 03F10803 		add	r3, r3, #8
 495 0070 4FF05702 		mov	r2, #87
 496 0074 1A70     		strb	r2, [r3, #0]
 258:../src/waverecorder.c ****   pHeadBuf[9]  = 'A';
 497              		.loc 1 258 0
 498 0076 7B68     		ldr	r3, [r7, #4]
 499 0078 03F10903 		add	r3, r3, #9
 500 007c 4FF04102 		mov	r2, #65
 501 0080 1A70     		strb	r2, [r3, #0]
 259:../src/waverecorder.c ****   pHeadBuf[10] = 'V';
 502              		.loc 1 259 0
 503 0082 7B68     		ldr	r3, [r7, #4]
 504 0084 03F10A03 		add	r3, r3, #10
 505 0088 4FF05602 		mov	r2, #86
 506 008c 1A70     		strb	r2, [r3, #0]
 260:../src/waverecorder.c ****   pHeadBuf[11] = 'E';
 507              		.loc 1 260 0
 508 008e 7B68     		ldr	r3, [r7, #4]
 509 0090 03F10B03 		add	r3, r3, #11
 510 0094 4FF04502 		mov	r2, #69
 511 0098 1A70     		strb	r2, [r3, #0]
 261:../src/waverecorder.c **** 
 262:../src/waverecorder.c ****   /* Write the format chunk, must be'fmt ' */
 263:../src/waverecorder.c ****   pHeadBuf[12]  = 'f';
 512              		.loc 1 263 0
 513 009a 7B68     		ldr	r3, [r7, #4]
 514 009c 03F10C03 		add	r3, r3, #12
 515 00a0 4FF06602 		mov	r2, #102
 516 00a4 1A70     		strb	r2, [r3, #0]
 264:../src/waverecorder.c ****   pHeadBuf[13]  = 'm';
 517              		.loc 1 264 0
 518 00a6 7B68     		ldr	r3, [r7, #4]
 519 00a8 03F10D03 		add	r3, r3, #13
 520 00ac 4FF06D02 		mov	r2, #109
 521 00b0 1A70     		strb	r2, [r3, #0]
 265:../src/waverecorder.c ****   pHeadBuf[14]  = 't';
 522              		.loc 1 265 0
 523 00b2 7B68     		ldr	r3, [r7, #4]
 524 00b4 03F10E03 		add	r3, r3, #14
 525 00b8 4FF07402 		mov	r2, #116
 526 00bc 1A70     		strb	r2, [r3, #0]
 266:../src/waverecorder.c ****   pHeadBuf[15]  = ' ';
 527              		.loc 1 266 0
 528 00be 7B68     		ldr	r3, [r7, #4]
 529 00c0 03F10F03 		add	r3, r3, #15
 530 00c4 4FF02002 		mov	r2, #32
 531 00c8 1A70     		strb	r2, [r3, #0]
 267:../src/waverecorder.c **** 
 268:../src/waverecorder.c ****   /* Write the length of the 'fmt' data, must be 0x10 */
 269:../src/waverecorder.c ****   pHeadBuf[16]  = 0x10;
 532              		.loc 1 269 0
 533 00ca 7B68     		ldr	r3, [r7, #4]
 534 00cc 03F11003 		add	r3, r3, #16
 535 00d0 4FF01002 		mov	r2, #16
 536 00d4 1A70     		strb	r2, [r3, #0]
 270:../src/waverecorder.c ****   pHeadBuf[17]  = 0x00;
 537              		.loc 1 270 0
 538 00d6 7B68     		ldr	r3, [r7, #4]
 539 00d8 03F11103 		add	r3, r3, #17
 540 00dc 4FF00002 		mov	r2, #0
 541 00e0 1A70     		strb	r2, [r3, #0]
 271:../src/waverecorder.c ****   pHeadBuf[18]  = 0x00;
 542              		.loc 1 271 0
 543 00e2 7B68     		ldr	r3, [r7, #4]
 544 00e4 03F11203 		add	r3, r3, #18
 545 00e8 4FF00002 		mov	r2, #0
 546 00ec 1A70     		strb	r2, [r3, #0]
 272:../src/waverecorder.c ****   pHeadBuf[19]  = 0x00;
 547              		.loc 1 272 0
 548 00ee 7B68     		ldr	r3, [r7, #4]
 549 00f0 03F11303 		add	r3, r3, #19
 550 00f4 4FF00002 		mov	r2, #0
 551 00f8 1A70     		strb	r2, [r3, #0]
 273:../src/waverecorder.c **** 
 274:../src/waverecorder.c ****   /* Write the audio format, must be 0x01 (PCM) */
 275:../src/waverecorder.c ****   pHeadBuf[20]  = 0x01;
 552              		.loc 1 275 0
 553 00fa 7B68     		ldr	r3, [r7, #4]
 554 00fc 03F11403 		add	r3, r3, #20
 555 0100 4FF00102 		mov	r2, #1
 556 0104 1A70     		strb	r2, [r3, #0]
 276:../src/waverecorder.c ****   pHeadBuf[21]  = 0x00;
 557              		.loc 1 276 0
 558 0106 7B68     		ldr	r3, [r7, #4]
 559 0108 03F11503 		add	r3, r3, #21
 560 010c 4FF00002 		mov	r2, #0
 561 0110 1A70     		strb	r2, [r3, #0]
 277:../src/waverecorder.c **** 
 278:../src/waverecorder.c ****   /* Write the number of channels, must be 0x01 (Mono) or 0x02 (Stereo) */
 279:../src/waverecorder.c ****   pHeadBuf[22]  = 0x02;
 562              		.loc 1 279 0
 563 0112 7B68     		ldr	r3, [r7, #4]
 564 0114 03F11603 		add	r3, r3, #22
 565 0118 4FF00202 		mov	r2, #2
 566 011c 1A70     		strb	r2, [r3, #0]
 280:../src/waverecorder.c ****   pHeadBuf[23]  = 0x00;
 567              		.loc 1 280 0
 568 011e 7B68     		ldr	r3, [r7, #4]
 569 0120 03F11703 		add	r3, r3, #23
 570 0124 4FF00002 		mov	r2, #0
 571 0128 1A70     		strb	r2, [r3, #0]
 281:../src/waverecorder.c **** 
 282:../src/waverecorder.c ****   /* Write the Sample Rate 8000 Hz */
 283:../src/waverecorder.c ****   pHeadBuf[24]  = (uint8_t)((REC_FREQ & 0xFF));
 572              		.loc 1 283 0
 573 012a 7B68     		ldr	r3, [r7, #4]
 574 012c 03F11803 		add	r3, r3, #24
 575 0130 4FF04002 		mov	r2, #64
 576 0134 1A70     		strb	r2, [r3, #0]
 284:../src/waverecorder.c ****   pHeadBuf[25]  = (uint8_t)((REC_FREQ >> 8) & 0xFF);
 577              		.loc 1 284 0
 578 0136 7B68     		ldr	r3, [r7, #4]
 579 0138 03F11903 		add	r3, r3, #25
 580 013c 4FF01F02 		mov	r2, #31
 581 0140 1A70     		strb	r2, [r3, #0]
 285:../src/waverecorder.c ****   pHeadBuf[26]  = (uint8_t)((REC_FREQ >> 16) & 0xFF);
 582              		.loc 1 285 0
 583 0142 7B68     		ldr	r3, [r7, #4]
 584 0144 03F11A03 		add	r3, r3, #26
 585 0148 4FF00002 		mov	r2, #0
 586 014c 1A70     		strb	r2, [r3, #0]
 286:../src/waverecorder.c ****   pHeadBuf[27]  = (uint8_t)((REC_FREQ >> 24) & 0xFF);
 587              		.loc 1 286 0
 588 014e 7B68     		ldr	r3, [r7, #4]
 589 0150 03F11B03 		add	r3, r3, #27
 590 0154 4FF00002 		mov	r2, #0
 591 0158 1A70     		strb	r2, [r3, #0]
 287:../src/waverecorder.c **** 
 288:../src/waverecorder.c ****   /* Write the Byte Rate */
 289:../src/waverecorder.c ****   pHeadBuf[28]  = (uint8_t)((REC_FREQ & 0xFF));
 592              		.loc 1 289 0
 593 015a 7B68     		ldr	r3, [r7, #4]
 594 015c 03F11C03 		add	r3, r3, #28
 595 0160 4FF04002 		mov	r2, #64
 596 0164 1A70     		strb	r2, [r3, #0]
 290:../src/waverecorder.c ****   pHeadBuf[29]  = (uint8_t)((REC_FREQ >> 8) & 0xFF);
 597              		.loc 1 290 0
 598 0166 7B68     		ldr	r3, [r7, #4]
 599 0168 03F11D03 		add	r3, r3, #29
 600 016c 4FF01F02 		mov	r2, #31
 601 0170 1A70     		strb	r2, [r3, #0]
 291:../src/waverecorder.c ****   pHeadBuf[30]  = (uint8_t)((REC_FREQ >> 16) & 0xFF);
 602              		.loc 1 291 0
 603 0172 7B68     		ldr	r3, [r7, #4]
 604 0174 03F11E03 		add	r3, r3, #30
 605 0178 4FF00002 		mov	r2, #0
 606 017c 1A70     		strb	r2, [r3, #0]
 292:../src/waverecorder.c ****   pHeadBuf[31]  = (uint8_t)((REC_FREQ >> 24) & 0xFF);
 607              		.loc 1 292 0
 608 017e 7B68     		ldr	r3, [r7, #4]
 609 0180 03F11F03 		add	r3, r3, #31
 610 0184 4FF00002 		mov	r2, #0
 611 0188 1A70     		strb	r2, [r3, #0]
 293:../src/waverecorder.c **** 
 294:../src/waverecorder.c ****   /* Write the block alignment */
 295:../src/waverecorder.c ****   pHeadBuf[32]  = 0x02;/*0x02*/
 612              		.loc 1 295 0
 613 018a 7B68     		ldr	r3, [r7, #4]
 614 018c 03F12003 		add	r3, r3, #32
 615 0190 4FF00202 		mov	r2, #2
 616 0194 1A70     		strb	r2, [r3, #0]
 296:../src/waverecorder.c ****   pHeadBuf[33]  = 0x00;
 617              		.loc 1 296 0
 618 0196 7B68     		ldr	r3, [r7, #4]
 619 0198 03F12103 		add	r3, r3, #33
 620 019c 4FF00002 		mov	r2, #0
 621 01a0 1A70     		strb	r2, [r3, #0]
 297:../src/waverecorder.c **** 
 298:../src/waverecorder.c ****   /* Write the number of bits per sample */
 299:../src/waverecorder.c ****   pHeadBuf[34]  = 0x10; /*0x08*/
 622              		.loc 1 299 0
 623 01a2 7B68     		ldr	r3, [r7, #4]
 624 01a4 03F12203 		add	r3, r3, #34
 625 01a8 4FF01002 		mov	r2, #16
 626 01ac 1A70     		strb	r2, [r3, #0]
 300:../src/waverecorder.c ****   pHeadBuf[35]  = 0x00;
 627              		.loc 1 300 0
 628 01ae 7B68     		ldr	r3, [r7, #4]
 629 01b0 03F12303 		add	r3, r3, #35
 630 01b4 4FF00002 		mov	r2, #0
 631 01b8 1A70     		strb	r2, [r3, #0]
 301:../src/waverecorder.c **** 
 302:../src/waverecorder.c ****   /* Write the Data chunk, must be 'data' */
 303:../src/waverecorder.c ****   pHeadBuf[36]  = 'd';
 632              		.loc 1 303 0
 633 01ba 7B68     		ldr	r3, [r7, #4]
 634 01bc 03F12403 		add	r3, r3, #36
 635 01c0 4FF06402 		mov	r2, #100
 636 01c4 1A70     		strb	r2, [r3, #0]
 304:../src/waverecorder.c ****   pHeadBuf[37]  = 'a';
 637              		.loc 1 304 0
 638 01c6 7B68     		ldr	r3, [r7, #4]
 639 01c8 03F12503 		add	r3, r3, #37
 640 01cc 4FF06102 		mov	r2, #97
 641 01d0 1A70     		strb	r2, [r3, #0]
 305:../src/waverecorder.c ****   pHeadBuf[38]  = 't';
 642              		.loc 1 305 0
 643 01d2 7B68     		ldr	r3, [r7, #4]
 644 01d4 03F12603 		add	r3, r3, #38
 645 01d8 4FF07402 		mov	r2, #116
 646 01dc 1A70     		strb	r2, [r3, #0]
 306:../src/waverecorder.c ****   pHeadBuf[39]  = 'a';
 647              		.loc 1 306 0
 648 01de 7B68     		ldr	r3, [r7, #4]
 649 01e0 03F12703 		add	r3, r3, #39
 650 01e4 4FF06102 		mov	r2, #97
 651 01e8 1A70     		strb	r2, [r3, #0]
 307:../src/waverecorder.c **** 
 308:../src/waverecorder.c ****   /* Write the number of sample data */
 309:../src/waverecorder.c ****   pHeadBuf[40] = 0x00;
 652              		.loc 1 309 0
 653 01ea 7B68     		ldr	r3, [r7, #4]
 654 01ec 03F12803 		add	r3, r3, #40
 655 01f0 4FF00002 		mov	r2, #0
 656 01f4 1A70     		strb	r2, [r3, #0]
 310:../src/waverecorder.c ****   pHeadBuf[41] = 0xE2;
 657              		.loc 1 310 0
 658 01f6 7B68     		ldr	r3, [r7, #4]
 659 01f8 03F12903 		add	r3, r3, #41
 660 01fc 4FF0E202 		mov	r2, #226
 661 0200 1A70     		strb	r2, [r3, #0]
 311:../src/waverecorder.c ****   pHeadBuf[42] = 0x04;
 662              		.loc 1 311 0
 663 0202 7B68     		ldr	r3, [r7, #4]
 664 0204 03F12A03 		add	r3, r3, #42
 665 0208 4FF00402 		mov	r2, #4
 666 020c 1A70     		strb	r2, [r3, #0]
 312:../src/waverecorder.c ****   pHeadBuf[43] = 0x00;
 667              		.loc 1 312 0
 668 020e 7B68     		ldr	r3, [r7, #4]
 669 0210 03F12B03 		add	r3, r3, #43
 670 0214 4FF00002 		mov	r2, #0
 671 0218 1A70     		strb	r2, [r3, #0]
 313:../src/waverecorder.c **** 
 314:../src/waverecorder.c ****   /* Fill the missing bytes in Buffer with 0x80 */
 315:../src/waverecorder.c ****   for (count = 44; count < 512 ; count ++)
 672              		.loc 1 315 0
 673 021a 4FF02C03 		mov	r3, #44
 674 021e FB81     		strh	r3, [r7, #14]	@ movhi
 675 0220 09E0     		b	.L15
 676              	.L16:
 316:../src/waverecorder.c ****   {
 317:../src/waverecorder.c ****     pHeadBuf[count] = 0x80;
 677              		.loc 1 317 0 discriminator 2
 678 0222 FB89     		ldrh	r3, [r7, #14]
 679 0224 7A68     		ldr	r2, [r7, #4]
 680 0226 D318     		adds	r3, r2, r3
 681 0228 4FF08002 		mov	r2, #128
 682 022c 1A70     		strb	r2, [r3, #0]
 315:../src/waverecorder.c ****   for (count = 44; count < 512 ; count ++)
 683              		.loc 1 315 0 discriminator 2
 684 022e FB89     		ldrh	r3, [r7, #14]	@ movhi
 685 0230 03F10103 		add	r3, r3, #1
 686 0234 FB81     		strh	r3, [r7, #14]	@ movhi
 687              	.L15:
 315:../src/waverecorder.c ****   for (count = 44; count < 512 ; count ++)
 688              		.loc 1 315 0 is_stmt 0 discriminator 1
 689 0236 FA89     		ldrh	r2, [r7, #14]
 690 0238 40F2FF13 		movw	r3, #511
 691 023c 9A42     		cmp	r2, r3
 692 023e F0D9     		bls	.L16
 318:../src/waverecorder.c ****   }
 319:../src/waverecorder.c ****   
 320:../src/waverecorder.c ****   /* Return 0 if all operations are OK */
 321:../src/waverecorder.c ****   return 0;
 693              		.loc 1 321 0 is_stmt 1
 694 0240 4FF00003 		mov	r3, #0
 322:../src/waverecorder.c **** }
 695              		.loc 1 322 0
 696 0244 1846     		mov	r0, r3
 697 0246 07F11407 		add	r7, r7, #20
 698 024a BD46     		mov	sp, r7
 699 024c 80BC     		pop	{r7}
 700 024e 7047     		bx	lr
 701              		.cfi_endproc
 702              	.LFE114:
 704              		.section	.rodata
 705              		.align	2
 706              	.LC0:
 707 0000 303A7265 		.ascii	"0:rec.wav\000"
 707      632E7761 
 707      7600
 708 000a 0000     		.section	.text.WaveRecorderUpdate,"ax",%progbits
 709              		.align	2
 710              		.global	WaveRecorderUpdate
 711              		.thumb
 712              		.thumb_func
 714              	WaveRecorderUpdate:
 715              	.LFB115:
 323:../src/waverecorder.c **** 
 324:../src/waverecorder.c **** /**
 325:../src/waverecorder.c ****   * @brief  Update the recorded data 
 326:../src/waverecorder.c ****   * @param  None
 327:../src/waverecorder.c ****   * @retval None
 328:../src/waverecorder.c ****   */
 329:../src/waverecorder.c **** void WaveRecorderUpdate(void)
 330:../src/waverecorder.c **** {     
 716              		.loc 1 330 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 0
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720 0000 80B5     		push	{r7, lr}
 721              	.LCFI14:
 722              		.cfi_def_cfa_offset 8
 723              		.cfi_offset 14, -4
 724              		.cfi_offset 7, -8
 725 0002 00AF     		add	r7, sp, #0
 726              	.LCFI15:
 727              		.cfi_def_cfa_register 7
 331:../src/waverecorder.c ****   WaveRecorderInit(32000,16, 1);
 728              		.loc 1 331 0
 729 0004 4FF4FA40 		mov	r0, #32000
 730 0008 4FF01001 		mov	r1, #16
 731 000c 4FF00102 		mov	r2, #1
 732 0010 FFF7FEFF 		bl	WaveRecorderInit
 332:../src/waverecorder.c ****   WaveCounter = 0;
 733              		.loc 1 332 0
 734 0014 40F20003 		movw	r3, #:lower16:WaveCounter
 735 0018 C0F20003 		movt	r3, #:upper16:WaveCounter
 736 001c 4FF00002 		mov	r2, #0
 737 0020 1A60     		str	r2, [r3, #0]
 333:../src/waverecorder.c ****   LED_Toggle = 7;
 738              		.loc 1 333 0
 739 0022 40F20003 		movw	r3, #:lower16:LED_Toggle
 740 0026 C0F20003 		movt	r3, #:upper16:LED_Toggle
 741 002a 4FF00702 		mov	r2, #7
 742 002e 1A70     		strb	r2, [r3, #0]
 334:../src/waverecorder.c ****   
 335:../src/waverecorder.c ****   /* Remove Wave file if exist on flash disk */
 336:../src/waverecorder.c ****   f_unlink (REC_WAVE_NAME);
 743              		.loc 1 336 0
 744 0030 40F20000 		movw	r0, #:lower16:.LC0
 745 0034 C0F20000 		movt	r0, #:upper16:.LC0
 746 0038 FFF7FEFF 		bl	f_unlink
 337:../src/waverecorder.c ****      
 338:../src/waverecorder.c ****   /* Open the file to write on it */
 339:../src/waverecorder.c ****   if ((HCD_IsDeviceConnected(&USB_OTG_Core) != 1) || (f_open(&file, REC_WAVE_NAME, FA_CREATE_ALWAYS
 747              		.loc 1 339 0
 748 003c 40F20000 		movw	r0, #:lower16:USB_OTG_Core
 749 0040 C0F20000 		movt	r0, #:upper16:USB_OTG_Core
 750 0044 FFF7FEFF 		bl	HCD_IsDeviceConnected
 751 0048 0346     		mov	r3, r0
 752 004a 012B     		cmp	r3, #1
 753 004c 0ED1     		bne	.L18
 754              		.loc 1 339 0 is_stmt 0 discriminator 1
 755 004e 40F20000 		movw	r0, #:lower16:file
 756 0052 C0F20000 		movt	r0, #:upper16:file
 757 0056 40F20001 		movw	r1, #:lower16:.LC0
 758 005a C0F20001 		movt	r1, #:upper16:.LC0
 759 005e 4FF00A02 		mov	r2, #10
 760 0062 FFF7FEFF 		bl	f_open
 761 0066 0346     		mov	r3, r0
 762 0068 002B     		cmp	r3, #0
 763 006a 04D0     		beq	.L19
 764              	.L18:
 340:../src/waverecorder.c ****   {
 341:../src/waverecorder.c ****     /* Set ON Red LED */ 
 342:../src/waverecorder.c ****     while(1)
 343:../src/waverecorder.c ****     {
 344:../src/waverecorder.c ****       STM_EVAL_LEDToggle(LED5); 
 765              		.loc 1 344 0 is_stmt 1 discriminator 1
 766 006c 4FF00200 		mov	r0, #2
 767 0070 FFF7FEFF 		bl	STM_EVAL_LEDToggle
 345:../src/waverecorder.c ****     }
 768              		.loc 1 345 0 discriminator 1
 769 0074 FAE7     		b	.L18
 770              	.L19:
 346:../src/waverecorder.c ****   }
 347:../src/waverecorder.c ****   else
 348:../src/waverecorder.c ****   {
 349:../src/waverecorder.c ****     WaveRecStatus = 1;
 771              		.loc 1 349 0
 772 0076 40F20003 		movw	r3, #:lower16:WaveRecStatus
 773 007a C0F20003 		movt	r3, #:upper16:WaveRecStatus
 774 007e 4FF00102 		mov	r2, #1
 775 0082 1A70     		strb	r2, [r3, #0]
 350:../src/waverecorder.c ****   }
 351:../src/waverecorder.c ****   /* Initialize the Header Wave */
 352:../src/waverecorder.c ****   WavaRecorderHeaderInit(RecBufHeader);
 776              		.loc 1 352 0
 777 0084 40F20000 		movw	r0, #:lower16:RecBufHeader
 778 0088 C0F20000 		movt	r0, #:upper16:RecBufHeader
 779 008c FFF7FEFF 		bl	WavaRecorderHeaderInit
 353:../src/waverecorder.c ****   
 354:../src/waverecorder.c ****   /* Write the Header wave */
 355:../src/waverecorder.c ****   f_write (&file, RecBufHeader, 512, (void *)&bytesWritten);
 780              		.loc 1 355 0
 781 0090 40F20000 		movw	r0, #:lower16:file
 782 0094 C0F20000 		movt	r0, #:upper16:file
 783 0098 40F20001 		movw	r1, #:lower16:RecBufHeader
 784 009c C0F20001 		movt	r1, #:upper16:RecBufHeader
 785 00a0 4FF40072 		mov	r2, #512
 786 00a4 40F20003 		movw	r3, #:lower16:bytesWritten
 787 00a8 C0F20003 		movt	r3, #:upper16:bytesWritten
 788 00ac FFF7FEFF 		bl	f_write
 356:../src/waverecorder.c ****   
 357:../src/waverecorder.c ****   /* Increment tne wave counter */  
 358:../src/waverecorder.c ****   WaveCounter += 512;
 789              		.loc 1 358 0
 790 00b0 40F20003 		movw	r3, #:lower16:WaveCounter
 791 00b4 C0F20003 		movt	r3, #:upper16:WaveCounter
 792 00b8 1B68     		ldr	r3, [r3, #0]
 793 00ba 03F50072 		add	r2, r3, #512
 794 00be 40F20003 		movw	r3, #:lower16:WaveCounter
 795 00c2 C0F20003 		movt	r3, #:upper16:WaveCounter
 796 00c6 1A60     		str	r2, [r3, #0]
 359:../src/waverecorder.c **** 
 360:../src/waverecorder.c ****   /* Start the record */
 361:../src/waverecorder.c ****   WaveRecorderStart(RecBuf, PCM_OUT_SIZE);
 797              		.loc 1 361 0
 798 00c8 40F20000 		movw	r0, #:lower16:RecBuf
 799 00cc C0F20000 		movt	r0, #:upper16:RecBuf
 800 00d0 4FF01001 		mov	r1, #16
 801 00d4 FFF7FEFF 		bl	WaveRecorderStart
 362:../src/waverecorder.c ****   
 363:../src/waverecorder.c ****   /* Reset the time base variable */
 364:../src/waverecorder.c ****   Time_Rec_Base = 0;
 802              		.loc 1 364 0
 803 00d8 40F20003 		movw	r3, #:lower16:Time_Rec_Base
 804 00dc C0F20003 		movt	r3, #:upper16:Time_Rec_Base
 805 00e0 4FF00002 		mov	r2, #0
 806 00e4 1A80     		strh	r2, [r3, #0]	@ movhi
 365:../src/waverecorder.c ****   Switch = 0;
 807              		.loc 1 365 0
 808 00e6 40F20003 		movw	r3, #:lower16:Switch
 809 00ea C0F20003 		movt	r3, #:upper16:Switch
 810 00ee 4FF00002 		mov	r2, #0
 811 00f2 1A70     		strb	r2, [r3, #0]
 366:../src/waverecorder.c ****      
 367:../src/waverecorder.c ****   while(HCD_IsDeviceConnected(&USB_OTG_Core))
 812              		.loc 1 367 0
 813 00f4 60E1     		b	.L20
 814              	.L31:
 368:../src/waverecorder.c ****   { 
 369:../src/waverecorder.c ****     /* Wait for the recording time */  
 370:../src/waverecorder.c ****     if (Time_Rec_Base <= TIME_REC)
 815              		.loc 1 370 0
 816 00f6 40F20003 		movw	r3, #:lower16:Time_Rec_Base
 817 00fa C0F20003 		movt	r3, #:upper16:Time_Rec_Base
 818 00fe 1B88     		ldrh	r3, [r3, #0]	@ movhi
 819 0100 9AB2     		uxth	r2, r3
 820 0102 40F6B833 		movw	r3, #3000
 821 0106 9A42     		cmp	r2, r3
 822 0108 00F23E81 		bhi	.L21
 371:../src/waverecorder.c ****     {
 372:../src/waverecorder.c ****       /* Wait for the data to be ready with PCM form */
 373:../src/waverecorder.c ****       while((Data_Status == 0)&& HCD_IsDeviceConnected(&USB_OTG_Core));
 823              		.loc 1 373 0
 824 010c 00BF     		nop
 825              	.L23:
 826              		.loc 1 373 0 is_stmt 0 discriminator 1
 827 010e 40F20003 		movw	r3, #:lower16:Data_Status
 828 0112 C0F20003 		movt	r3, #:upper16:Data_Status
 829 0116 1B68     		ldr	r3, [r3, #0]
 830 0118 002B     		cmp	r3, #0
 831 011a 08D1     		bne	.L22
 832              		.loc 1 373 0 discriminator 2
 833 011c 40F20000 		movw	r0, #:lower16:USB_OTG_Core
 834 0120 C0F20000 		movt	r0, #:upper16:USB_OTG_Core
 835 0124 FFF7FEFF 		bl	HCD_IsDeviceConnected
 836 0128 0346     		mov	r3, r0
 837 012a 002B     		cmp	r3, #0
 838 012c EFD1     		bne	.L23
 839              	.L22:
 374:../src/waverecorder.c ****       Data_Status =0;
 840              		.loc 1 374 0 is_stmt 1
 841 012e 40F20003 		movw	r3, #:lower16:Data_Status
 842 0132 C0F20003 		movt	r3, #:upper16:Data_Status
 843 0136 4FF00002 		mov	r2, #0
 844 013a 1A60     		str	r2, [r3, #0]
 375:../src/waverecorder.c ****       
 376:../src/waverecorder.c ****       /* Switch the buffers*/
 377:../src/waverecorder.c ****       if (Switch ==1)
 845              		.loc 1 377 0
 846 013c 40F20003 		movw	r3, #:lower16:Switch
 847 0140 C0F20003 		movt	r3, #:upper16:Switch
 848 0144 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 849 0146 012B     		cmp	r3, #1
 850 0148 25D1     		bne	.L24
 378:../src/waverecorder.c ****      {
 379:../src/waverecorder.c ****        pAudioRecBuf = RecBuf;
 851              		.loc 1 379 0
 852 014a 40F20003 		movw	r3, #:lower16:pAudioRecBuf
 853 014e C0F20003 		movt	r3, #:upper16:pAudioRecBuf
 854 0152 40F20002 		movw	r2, #:lower16:RecBuf
 855 0156 C0F20002 		movt	r2, #:upper16:RecBuf
 856 015a 1A60     		str	r2, [r3, #0]
 380:../src/waverecorder.c ****        writebuffer = RecBuf1;
 857              		.loc 1 380 0
 858 015c 40F20003 		movw	r3, #:lower16:writebuffer
 859 0160 C0F20003 		movt	r3, #:upper16:writebuffer
 860 0164 40F20002 		movw	r2, #:lower16:RecBuf1
 861 0168 C0F20002 		movt	r2, #:upper16:RecBuf1
 862 016c 1A60     		str	r2, [r3, #0]
 381:../src/waverecorder.c ****        WaveCounter += 32;
 863              		.loc 1 381 0
 864 016e 40F20003 		movw	r3, #:lower16:WaveCounter
 865 0172 C0F20003 		movt	r3, #:upper16:WaveCounter
 866 0176 1B68     		ldr	r3, [r3, #0]
 867 0178 03F12002 		add	r2, r3, #32
 868 017c 40F20003 		movw	r3, #:lower16:WaveCounter
 869 0180 C0F20003 		movt	r3, #:upper16:WaveCounter
 870 0184 1A60     		str	r2, [r3, #0]
 382:../src/waverecorder.c ****        Switch = 0;
 871              		.loc 1 382 0
 872 0186 40F20003 		movw	r3, #:lower16:Switch
 873 018a C0F20003 		movt	r3, #:upper16:Switch
 874 018e 4FF00002 		mov	r2, #0
 875 0192 1A70     		strb	r2, [r3, #0]
 876 0194 24E0     		b	.L25
 877              	.L24:
 383:../src/waverecorder.c ****      }
 384:../src/waverecorder.c ****       else
 385:../src/waverecorder.c ****       {
 386:../src/waverecorder.c ****         pAudioRecBuf = RecBuf1;
 878              		.loc 1 386 0
 879 0196 40F20003 		movw	r3, #:lower16:pAudioRecBuf
 880 019a C0F20003 		movt	r3, #:upper16:pAudioRecBuf
 881 019e 40F20002 		movw	r2, #:lower16:RecBuf1
 882 01a2 C0F20002 		movt	r2, #:upper16:RecBuf1
 883 01a6 1A60     		str	r2, [r3, #0]
 387:../src/waverecorder.c ****         writebuffer = RecBuf;
 884              		.loc 1 387 0
 885 01a8 40F20003 		movw	r3, #:lower16:writebuffer
 886 01ac C0F20003 		movt	r3, #:upper16:writebuffer
 887 01b0 40F20002 		movw	r2, #:lower16:RecBuf
 888 01b4 C0F20002 		movt	r2, #:upper16:RecBuf
 889 01b8 1A60     		str	r2, [r3, #0]
 388:../src/waverecorder.c ****         WaveCounter += 32;
 890              		.loc 1 388 0
 891 01ba 40F20003 		movw	r3, #:lower16:WaveCounter
 892 01be C0F20003 		movt	r3, #:upper16:WaveCounter
 893 01c2 1B68     		ldr	r3, [r3, #0]
 894 01c4 03F12002 		add	r2, r3, #32
 895 01c8 40F20003 		movw	r3, #:lower16:WaveCounter
 896 01cc C0F20003 		movt	r3, #:upper16:WaveCounter
 897 01d0 1A60     		str	r2, [r3, #0]
 389:../src/waverecorder.c ****         Switch = 1;
 898              		.loc 1 389 0
 899 01d2 40F20003 		movw	r3, #:lower16:Switch
 900 01d6 C0F20003 		movt	r3, #:upper16:Switch
 901 01da 4FF00102 		mov	r2, #1
 902 01de 1A70     		strb	r2, [r3, #0]
 903              	.L25:
 390:../src/waverecorder.c ****       }
 391:../src/waverecorder.c ****       
 392:../src/waverecorder.c ****       for (counter=0; counter<16; counter++)
 904              		.loc 1 392 0
 905 01e0 40F20003 		movw	r3, #:lower16:counter
 906 01e4 C0F20003 		movt	r3, #:upper16:counter
 907 01e8 4FF00002 		mov	r2, #0
 908 01ec 1A80     		strh	r2, [r3, #0]	@ movhi
 909 01ee AAE0     		b	.L26
 910              	.L29:
 393:../src/waverecorder.c ****       {
 394:../src/waverecorder.c ****         LED_Toggle = 3;
 911              		.loc 1 394 0
 912 01f0 40F20003 		movw	r3, #:lower16:LED_Toggle
 913 01f4 C0F20003 		movt	r3, #:upper16:LED_Toggle
 914 01f8 4FF00302 		mov	r2, #3
 915 01fc 1A70     		strb	r2, [r3, #0]
 395:../src/waverecorder.c ****         if (buf_idx< RAM_BUFFER_SIZE)
 916              		.loc 1 395 0
 917 01fe 40F20003 		movw	r3, #:lower16:buf_idx
 918 0202 C0F20003 		movt	r3, #:upper16:buf_idx
 919 0206 1A88     		ldrh	r2, [r3, #0]
 920 0208 40F2DB53 		movw	r3, #1499
 921 020c 9A42     		cmp	r2, r3
 922 020e 42D8     		bhi	.L27
 396:../src/waverecorder.c ****         {
 397:../src/waverecorder.c ****           /* Store Data in RAM buffer */
 398:../src/waverecorder.c ****           RAM_Buf[buf_idx++]= *(writebuffer + counter);
 923              		.loc 1 398 0
 924 0210 40F20003 		movw	r3, #:lower16:buf_idx
 925 0214 C0F20003 		movt	r3, #:upper16:buf_idx
 926 0218 1A88     		ldrh	r2, [r3, #0]
 927 021a 1146     		mov	r1, r2
 928 021c 40F20003 		movw	r3, #:lower16:writebuffer
 929 0220 C0F20003 		movt	r3, #:upper16:writebuffer
 930 0224 1868     		ldr	r0, [r3, #0]
 931 0226 40F20003 		movw	r3, #:lower16:counter
 932 022a C0F20003 		movt	r3, #:upper16:counter
 933 022e 1B88     		ldrh	r3, [r3, #0]
 934 0230 4FEA4303 		lsl	r3, r3, #1
 935 0234 C318     		adds	r3, r0, r3
 936 0236 1888     		ldrh	r0, [r3, #0]
 937 0238 40F20003 		movw	r3, #:lower16:RAM_Buf
 938 023c C0F20003 		movt	r3, #:upper16:RAM_Buf
 939 0240 23F81100 		strh	r0, [r3, r1, lsl #1]	@ movhi
 940 0244 02F10103 		add	r3, r2, #1
 941 0248 9AB2     		uxth	r2, r3
 942 024a 40F20003 		movw	r3, #:lower16:buf_idx
 943 024e C0F20003 		movt	r3, #:upper16:buf_idx
 944 0252 1A80     		strh	r2, [r3, #0]	@ movhi
 399:../src/waverecorder.c ****           if (buf_idx1 == RAM_BUFFER_SIZE)
 945              		.loc 1 399 0
 946 0254 40F20003 		movw	r3, #:lower16:buf_idx1
 947 0258 C0F20003 		movt	r3, #:upper16:buf_idx1
 948 025c 1A88     		ldrh	r2, [r3, #0]
 949 025e 40F2DC53 		movw	r3, #1500
 950 0262 9A42     		cmp	r2, r3
 951 0264 62D1     		bne	.L28
 400:../src/waverecorder.c ****           {
 401:../src/waverecorder.c ****             buf_idx1 = 0;
 952              		.loc 1 401 0
 953 0266 40F20003 		movw	r3, #:lower16:buf_idx1
 954 026a C0F20003 		movt	r3, #:upper16:buf_idx1
 955 026e 4FF00002 		mov	r2, #0
 956 0272 1A80     		strh	r2, [r3, #0]	@ movhi
 402:../src/waverecorder.c ****             /* Write the stored data in the RAm to the USB Key */
 403:../src/waverecorder.c ****             f_write (&file, (uint16_t*)RAM_Buf1, RAM_BUFFER_SIZE*2 , (void *)&bytesWritten);
 957              		.loc 1 403 0
 958 0274 40F20000 		movw	r0, #:lower16:file
 959 0278 C0F20000 		movt	r0, #:upper16:file
 960 027c 40F20001 		movw	r1, #:lower16:RAM_Buf1
 961 0280 C0F20001 		movt	r1, #:upper16:RAM_Buf1
 962 0284 40F6B832 		movw	r2, #3000
 963 0288 40F20003 		movw	r3, #:lower16:bytesWritten
 964 028c C0F20003 		movt	r3, #:upper16:bytesWritten
 965 0290 FFF7FEFF 		bl	f_write
 966 0294 4AE0     		b	.L28
 967              	.L27:
 404:../src/waverecorder.c ****           }
 405:../src/waverecorder.c ****         }
 406:../src/waverecorder.c ****         else if (buf_idx1< RAM_BUFFER_SIZE)
 968              		.loc 1 406 0
 969 0296 40F20003 		movw	r3, #:lower16:buf_idx1
 970 029a C0F20003 		movt	r3, #:upper16:buf_idx1
 971 029e 1A88     		ldrh	r2, [r3, #0]
 972 02a0 40F2DB53 		movw	r3, #1499
 973 02a4 9A42     		cmp	r2, r3
 974 02a6 41D8     		bhi	.L28
 407:../src/waverecorder.c ****         {
 408:../src/waverecorder.c ****           /* Store Data in RAM buffer */
 409:../src/waverecorder.c ****           RAM_Buf1[buf_idx1++]= *(writebuffer + counter);
 975              		.loc 1 409 0
 976 02a8 40F20003 		movw	r3, #:lower16:buf_idx1
 977 02ac C0F20003 		movt	r3, #:upper16:buf_idx1
 978 02b0 1A88     		ldrh	r2, [r3, #0]
 979 02b2 1146     		mov	r1, r2
 980 02b4 40F20003 		movw	r3, #:lower16:writebuffer
 981 02b8 C0F20003 		movt	r3, #:upper16:writebuffer
 982 02bc 1868     		ldr	r0, [r3, #0]
 983 02be 40F20003 		movw	r3, #:lower16:counter
 984 02c2 C0F20003 		movt	r3, #:upper16:counter
 985 02c6 1B88     		ldrh	r3, [r3, #0]
 986 02c8 4FEA4303 		lsl	r3, r3, #1
 987 02cc C318     		adds	r3, r0, r3
 988 02ce 1888     		ldrh	r0, [r3, #0]
 989 02d0 40F20003 		movw	r3, #:lower16:RAM_Buf1
 990 02d4 C0F20003 		movt	r3, #:upper16:RAM_Buf1
 991 02d8 23F81100 		strh	r0, [r3, r1, lsl #1]	@ movhi
 992 02dc 02F10103 		add	r3, r2, #1
 993 02e0 9AB2     		uxth	r2, r3
 994 02e2 40F20003 		movw	r3, #:lower16:buf_idx1
 995 02e6 C0F20003 		movt	r3, #:upper16:buf_idx1
 996 02ea 1A80     		strh	r2, [r3, #0]	@ movhi
 410:../src/waverecorder.c ****           if (buf_idx == RAM_BUFFER_SIZE)
 997              		.loc 1 410 0
 998 02ec 40F20003 		movw	r3, #:lower16:buf_idx
 999 02f0 C0F20003 		movt	r3, #:upper16:buf_idx
 1000 02f4 1A88     		ldrh	r2, [r3, #0]
 1001 02f6 40F2DC53 		movw	r3, #1500
 1002 02fa 9A42     		cmp	r2, r3
 1003 02fc 16D1     		bne	.L28
 411:../src/waverecorder.c ****           {
 412:../src/waverecorder.c ****             buf_idx = 0;
 1004              		.loc 1 412 0
 1005 02fe 40F20003 		movw	r3, #:lower16:buf_idx
 1006 0302 C0F20003 		movt	r3, #:upper16:buf_idx
 1007 0306 4FF00002 		mov	r2, #0
 1008 030a 1A80     		strh	r2, [r3, #0]	@ movhi
 413:../src/waverecorder.c ****             /* Write the stored data in the RAM to the USB Key */
 414:../src/waverecorder.c ****             f_write (&file, (uint16_t*)RAM_Buf, RAM_BUFFER_SIZE*2 , (void *)&bytesWritten);
 1009              		.loc 1 414 0
 1010 030c 40F20000 		movw	r0, #:lower16:file
 1011 0310 C0F20000 		movt	r0, #:upper16:file
 1012 0314 40F20001 		movw	r1, #:lower16:RAM_Buf
 1013 0318 C0F20001 		movt	r1, #:upper16:RAM_Buf
 1014 031c 40F6B832 		movw	r2, #3000
 1015 0320 40F20003 		movw	r3, #:lower16:bytesWritten
 1016 0324 C0F20003 		movt	r3, #:upper16:bytesWritten
 1017 0328 FFF7FEFF 		bl	f_write
 1018              	.L28:
 392:../src/waverecorder.c ****       for (counter=0; counter<16; counter++)
 1019              		.loc 1 392 0
 1020 032c 40F20003 		movw	r3, #:lower16:counter
 1021 0330 C0F20003 		movt	r3, #:upper16:counter
 1022 0334 1B88     		ldrh	r3, [r3, #0]
 1023 0336 03F10103 		add	r3, r3, #1
 1024 033a 9AB2     		uxth	r2, r3
 1025 033c 40F20003 		movw	r3, #:lower16:counter
 1026 0340 C0F20003 		movt	r3, #:upper16:counter
 1027 0344 1A80     		strh	r2, [r3, #0]	@ movhi
 1028              	.L26:
 392:../src/waverecorder.c ****       for (counter=0; counter<16; counter++)
 1029              		.loc 1 392 0 is_stmt 0 discriminator 1
 1030 0346 40F20003 		movw	r3, #:lower16:counter
 1031 034a C0F20003 		movt	r3, #:upper16:counter
 1032 034e 1B88     		ldrh	r3, [r3, #0]
 1033 0350 0F2B     		cmp	r3, #15
 1034 0352 7FF64DAF 		bls	.L29
 415:../src/waverecorder.c ****           }
 416:../src/waverecorder.c ****         }
 417:../src/waverecorder.c ****       }   
 418:../src/waverecorder.c ****  
 419:../src/waverecorder.c ****       /* User button pressed */
 420:../src/waverecorder.c ****       if ( Command_index != 1)
 1035              		.loc 1 420 0 is_stmt 1
 1036 0356 40F20003 		movw	r3, #:lower16:Command_index
 1037 035a C0F20003 		movt	r3, #:upper16:Command_index
 1038 035e 1B78     		ldrb	r3, [r3, #0]
 1039 0360 DBB2     		uxtb	r3, r3
 1040 0362 012B     		cmp	r3, #1
 1041 0364 28D0     		beq	.L20
 421:../src/waverecorder.c ****       {
 422:../src/waverecorder.c ****         /* Stop recording */
 423:../src/waverecorder.c ****         WaveRecorderStop();  
 1042              		.loc 1 423 0
 1043 0366 FFF7FEFF 		bl	WaveRecorderStop
 424:../src/waverecorder.c ****         Command_index = 0;
 1044              		.loc 1 424 0
 1045 036a 40F20003 		movw	r3, #:lower16:Command_index
 1046 036e C0F20003 		movt	r3, #:upper16:Command_index
 1047 0372 4FF00002 		mov	r2, #0
 1048 0376 1A70     		strb	r2, [r3, #0]
 425:../src/waverecorder.c ****         LED_Toggle = 6;
 1049              		.loc 1 425 0
 1050 0378 40F20003 		movw	r3, #:lower16:LED_Toggle
 1051 037c C0F20003 		movt	r3, #:upper16:LED_Toggle
 1052 0380 4FF00602 		mov	r2, #6
 1053 0384 1A70     		strb	r2, [r3, #0]
 426:../src/waverecorder.c ****         break;
 1054              		.loc 1 426 0
 1055 0386 21E0     		b	.L30
 1056              	.L21:
 427:../src/waverecorder.c ****       }
 428:../src/waverecorder.c ****     }
 429:../src/waverecorder.c ****     else /* End of Recording time  */
 430:../src/waverecorder.c ****     {
 431:../src/waverecorder.c ****       WaveRecorderStop();
 1057              		.loc 1 431 0
 1058 0388 FFF7FEFF 		bl	WaveRecorderStop
 432:../src/waverecorder.c ****       LED_Toggle = 4;
 1059              		.loc 1 432 0
 1060 038c 40F20003 		movw	r3, #:lower16:LED_Toggle
 1061 0390 C0F20003 		movt	r3, #:upper16:LED_Toggle
 1062 0394 4FF00402 		mov	r2, #4
 1063 0398 1A70     		strb	r2, [r3, #0]
 433:../src/waverecorder.c ****       Command_index = 2;
 1064              		.loc 1 433 0
 1065 039a 40F20003 		movw	r3, #:lower16:Command_index
 1066 039e C0F20003 		movt	r3, #:upper16:Command_index
 1067 03a2 4FF00202 		mov	r2, #2
 1068 03a6 1A70     		strb	r2, [r3, #0]
 434:../src/waverecorder.c ****       Data_Status =0;
 1069              		.loc 1 434 0
 1070 03a8 40F20003 		movw	r3, #:lower16:Data_Status
 1071 03ac C0F20003 		movt	r3, #:upper16:Data_Status
 1072 03b0 4FF00002 		mov	r2, #0
 1073 03b4 1A60     		str	r2, [r3, #0]
 435:../src/waverecorder.c ****       break;
 1074              		.loc 1 435 0
 1075 03b6 09E0     		b	.L30
 1076              	.L20:
 367:../src/waverecorder.c ****   while(HCD_IsDeviceConnected(&USB_OTG_Core))
 1077              		.loc 1 367 0 discriminator 1
 1078 03b8 40F20000 		movw	r0, #:lower16:USB_OTG_Core
 1079 03bc C0F20000 		movt	r0, #:upper16:USB_OTG_Core
 1080 03c0 FFF7FEFF 		bl	HCD_IsDeviceConnected
 1081 03c4 0346     		mov	r3, r0
 1082 03c6 002B     		cmp	r3, #0
 1083 03c8 7FF495AE 		bne	.L31
 1084              	.L30:
 436:../src/waverecorder.c ****     }
 437:../src/waverecorder.c ****   }
 438:../src/waverecorder.c ****    
 439:../src/waverecorder.c ****   /* Update the data length in the header of the recorded wave */    
 440:../src/waverecorder.c ****   f_lseek(&file, 0);
 1085              		.loc 1 440 0
 1086 03cc 40F20000 		movw	r0, #:lower16:file
 1087 03d0 C0F20000 		movt	r0, #:upper16:file
 1088 03d4 4FF00001 		mov	r1, #0
 1089 03d8 FFF7FEFF 		bl	f_lseek
 441:../src/waverecorder.c ****     
 442:../src/waverecorder.c ****   RecBufHeader[4] = (uint8_t)(WaveCounter + 512) ;
 1090              		.loc 1 442 0
 1091 03dc 40F20003 		movw	r3, #:lower16:WaveCounter
 1092 03e0 C0F20003 		movt	r3, #:upper16:WaveCounter
 1093 03e4 1B68     		ldr	r3, [r3, #0]
 1094 03e6 DAB2     		uxtb	r2, r3
 1095 03e8 40F20003 		movw	r3, #:lower16:RecBufHeader
 1096 03ec C0F20003 		movt	r3, #:upper16:RecBufHeader
 1097 03f0 1A71     		strb	r2, [r3, #4]
 443:../src/waverecorder.c ****   RecBufHeader[5] = (uint8_t)(((WaveCounter+512)  >> 8) & 0xFF);
 1098              		.loc 1 443 0
 1099 03f2 40F20003 		movw	r3, #:lower16:WaveCounter
 1100 03f6 C0F20003 		movt	r3, #:upper16:WaveCounter
 1101 03fa 1B68     		ldr	r3, [r3, #0]
 1102 03fc 03F50073 		add	r3, r3, #512
 1103 0400 4FEA1323 		lsr	r3, r3, #8
 1104 0404 DAB2     		uxtb	r2, r3
 1105 0406 40F20003 		movw	r3, #:lower16:RecBufHeader
 1106 040a C0F20003 		movt	r3, #:upper16:RecBufHeader
 1107 040e 5A71     		strb	r2, [r3, #5]
 444:../src/waverecorder.c ****   RecBufHeader[6] = (uint8_t)(((WaveCounter+512)  >> 16) & 0xFF);
 1108              		.loc 1 444 0
 1109 0410 40F20003 		movw	r3, #:lower16:WaveCounter
 1110 0414 C0F20003 		movt	r3, #:upper16:WaveCounter
 1111 0418 1B68     		ldr	r3, [r3, #0]
 1112 041a 03F50073 		add	r3, r3, #512
 1113 041e 4FEA1343 		lsr	r3, r3, #16
 1114 0422 DAB2     		uxtb	r2, r3
 1115 0424 40F20003 		movw	r3, #:lower16:RecBufHeader
 1116 0428 C0F20003 		movt	r3, #:upper16:RecBufHeader
 1117 042c 9A71     		strb	r2, [r3, #6]
 445:../src/waverecorder.c ****   RecBufHeader[7] = (uint8_t)(((WaveCounter+512)  >> 24) & 0xFF);
 1118              		.loc 1 445 0
 1119 042e 40F20003 		movw	r3, #:lower16:WaveCounter
 1120 0432 C0F20003 		movt	r3, #:upper16:WaveCounter
 1121 0436 1B68     		ldr	r3, [r3, #0]
 1122 0438 03F50073 		add	r3, r3, #512
 1123 043c 4FEA1363 		lsr	r3, r3, #24
 1124 0440 DAB2     		uxtb	r2, r3
 1125 0442 40F20003 		movw	r3, #:lower16:RecBufHeader
 1126 0446 C0F20003 		movt	r3, #:upper16:RecBufHeader
 1127 044a DA71     		strb	r2, [r3, #7]
 446:../src/waverecorder.c ****   
 447:../src/waverecorder.c ****   RecBufHeader[40] = (uint8_t)(WaveCounter);
 1128              		.loc 1 447 0
 1129 044c 40F20003 		movw	r3, #:lower16:WaveCounter
 1130 0450 C0F20003 		movt	r3, #:upper16:WaveCounter
 1131 0454 1B68     		ldr	r3, [r3, #0]
 1132 0456 DAB2     		uxtb	r2, r3
 1133 0458 40F20003 		movw	r3, #:lower16:RecBufHeader
 1134 045c C0F20003 		movt	r3, #:upper16:RecBufHeader
 1135 0460 83F82820 		strb	r2, [r3, #40]
 448:../src/waverecorder.c ****   RecBufHeader[41] = (uint8_t)((WaveCounter >> 8) & 0xFF);
 1136              		.loc 1 448 0
 1137 0464 40F20003 		movw	r3, #:lower16:WaveCounter
 1138 0468 C0F20003 		movt	r3, #:upper16:WaveCounter
 1139 046c 1B68     		ldr	r3, [r3, #0]
 1140 046e 4FEA1323 		lsr	r3, r3, #8
 1141 0472 DAB2     		uxtb	r2, r3
 1142 0474 40F20003 		movw	r3, #:lower16:RecBufHeader
 1143 0478 C0F20003 		movt	r3, #:upper16:RecBufHeader
 1144 047c 83F82920 		strb	r2, [r3, #41]
 449:../src/waverecorder.c ****   RecBufHeader[42] = (uint8_t)((WaveCounter >> 16) & 0xFF);
 1145              		.loc 1 449 0
 1146 0480 40F20003 		movw	r3, #:lower16:WaveCounter
 1147 0484 C0F20003 		movt	r3, #:upper16:WaveCounter
 1148 0488 1B68     		ldr	r3, [r3, #0]
 1149 048a 4FEA1343 		lsr	r3, r3, #16
 1150 048e DAB2     		uxtb	r2, r3
 1151 0490 40F20003 		movw	r3, #:lower16:RecBufHeader
 1152 0494 C0F20003 		movt	r3, #:upper16:RecBufHeader
 1153 0498 83F82A20 		strb	r2, [r3, #42]
 450:../src/waverecorder.c ****   RecBufHeader[43] = (uint8_t)((WaveCounter >> 24) & 0xFF);
 1154              		.loc 1 450 0
 1155 049c 40F20003 		movw	r3, #:lower16:WaveCounter
 1156 04a0 C0F20003 		movt	r3, #:upper16:WaveCounter
 1157 04a4 1B68     		ldr	r3, [r3, #0]
 1158 04a6 4FEA1363 		lsr	r3, r3, #24
 1159 04aa DAB2     		uxtb	r2, r3
 1160 04ac 40F20003 		movw	r3, #:lower16:RecBufHeader
 1161 04b0 C0F20003 		movt	r3, #:upper16:RecBufHeader
 1162 04b4 83F82B20 		strb	r2, [r3, #43]
 451:../src/waverecorder.c ****     
 452:../src/waverecorder.c ****   /* Write the updated header wave */
 453:../src/waverecorder.c ****   f_write (&file, RecBufHeader, 512, (void *)&bytesWritten);
 1163              		.loc 1 453 0
 1164 04b8 40F20000 		movw	r0, #:lower16:file
 1165 04bc C0F20000 		movt	r0, #:upper16:file
 1166 04c0 40F20001 		movw	r1, #:lower16:RecBufHeader
 1167 04c4 C0F20001 		movt	r1, #:upper16:RecBufHeader
 1168 04c8 4FF40072 		mov	r2, #512
 1169 04cc 40F20003 		movw	r3, #:lower16:bytesWritten
 1170 04d0 C0F20003 		movt	r3, #:upper16:bytesWritten
 1171 04d4 FFF7FEFF 		bl	f_write
 454:../src/waverecorder.c ****   
 455:../src/waverecorder.c ****   /* Close file and filesystem */
 456:../src/waverecorder.c ****   f_close (&file);
 1172              		.loc 1 456 0
 1173 04d8 40F20000 		movw	r0, #:lower16:file
 1174 04dc C0F20000 		movt	r0, #:upper16:file
 1175 04e0 FFF7FEFF 		bl	f_close
 457:../src/waverecorder.c ****   f_mount(0, NULL);
 1176              		.loc 1 457 0
 1177 04e4 4FF00000 		mov	r0, #0
 1178 04e8 4FF00001 		mov	r1, #0
 1179 04ec FFF7FEFF 		bl	f_mount
 458:../src/waverecorder.c ****   
 459:../src/waverecorder.c **** }
 1180              		.loc 1 459 0
 1181 04f0 80BD     		pop	{r7, pc}
 1182              		.cfi_endproc
 1183              	.LFE115:
 1185 04f2 00BF     		.section	.text.WaveRecorder_GPIO_Init,"ax",%progbits
 1186              		.align	2
 1187              		.thumb
 1188              		.thumb_func
 1190              	WaveRecorder_GPIO_Init:
 1191              	.LFB116:
 460:../src/waverecorder.c **** 
 461:../src/waverecorder.c **** /**
 462:../src/waverecorder.c ****   * @brief  Initialize GPIO for wave recorder.
 463:../src/waverecorder.c ****   * @param  None
 464:../src/waverecorder.c ****   * @retval None
 465:../src/waverecorder.c ****   */
 466:../src/waverecorder.c **** static void WaveRecorder_GPIO_Init(void)
 467:../src/waverecorder.c **** {  
 1192              		.loc 1 467 0
 1193              		.cfi_startproc
 1194              		@ args = 0, pretend = 0, frame = 8
 1195              		@ frame_needed = 1, uses_anonymous_args = 0
 1196 0000 80B5     		push	{r7, lr}
 1197              	.LCFI16:
 1198              		.cfi_def_cfa_offset 8
 1199              		.cfi_offset 14, -4
 1200              		.cfi_offset 7, -8
 1201 0002 82B0     		sub	sp, sp, #8
 1202              	.LCFI17:
 1203              		.cfi_def_cfa_offset 16
 1204 0004 00AF     		add	r7, sp, #0
 1205              	.LCFI18:
 1206              		.cfi_def_cfa_register 7
 468:../src/waverecorder.c ****   GPIO_InitTypeDef GPIO_InitStructure;
 469:../src/waverecorder.c **** 
 470:../src/waverecorder.c ****   /* Enable GPIO clocks */
 471:../src/waverecorder.c ****   RCC_AHB1PeriphClockCmd(SPI_SCK_GPIO_CLK | SPI_MOSI_GPIO_CLK, ENABLE);
 1207              		.loc 1 471 0
 1208 0006 4FF00600 		mov	r0, #6
 1209 000a 4FF00101 		mov	r1, #1
 1210 000e FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 472:../src/waverecorder.c **** 
 473:../src/waverecorder.c ****   /* Enable GPIO clocks */
 474:../src/waverecorder.c ****   RCC_AHB1PeriphClockCmd(SPI_SCK_GPIO_CLK | SPI_MOSI_GPIO_CLK, ENABLE);
 1211              		.loc 1 474 0
 1212 0012 4FF00600 		mov	r0, #6
 1213 0016 4FF00101 		mov	r1, #1
 1214 001a FFF7FEFF 		bl	RCC_AHB1PeriphClockCmd
 475:../src/waverecorder.c **** 
 476:../src/waverecorder.c ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 1215              		.loc 1 476 0
 1216 001e 4FF00203 		mov	r3, #2
 1217 0022 3B71     		strb	r3, [r7, #4]
 477:../src/waverecorder.c ****   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 1218              		.loc 1 477 0
 1219 0024 4FF00003 		mov	r3, #0
 1220 0028 BB71     		strb	r3, [r7, #6]
 478:../src/waverecorder.c ****   GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
 1221              		.loc 1 478 0
 1222 002a 4FF00003 		mov	r3, #0
 1223 002e FB71     		strb	r3, [r7, #7]
 479:../src/waverecorder.c ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1224              		.loc 1 479 0
 1225 0030 4FF00203 		mov	r3, #2
 1226 0034 7B71     		strb	r3, [r7, #5]
 480:../src/waverecorder.c **** 
 481:../src/waverecorder.c ****   /* SPI SCK pin configuration */
 482:../src/waverecorder.c ****   GPIO_InitStructure.GPIO_Pin = SPI_SCK_PIN;
 1227              		.loc 1 482 0
 1228 0036 4FF48063 		mov	r3, #1024
 1229 003a 3B60     		str	r3, [r7, #0]
 483:../src/waverecorder.c ****   GPIO_Init(SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 1230              		.loc 1 483 0
 1231 003c 4FF48060 		mov	r0, #1024
 1232 0040 C4F20200 		movt	r0, 16386
 1233 0044 3B46     		mov	r3, r7
 1234 0046 1946     		mov	r1, r3
 1235 0048 FFF7FEFF 		bl	GPIO_Init
 484:../src/waverecorder.c ****   
 485:../src/waverecorder.c ****   /* Connect SPI pins to AF5 */  
 486:../src/waverecorder.c ****   GPIO_PinAFConfig(SPI_SCK_GPIO_PORT, SPI_SCK_SOURCE, SPI_SCK_AF);
 1236              		.loc 1 486 0
 1237 004c 4FF48060 		mov	r0, #1024
 1238 0050 C4F20200 		movt	r0, 16386
 1239 0054 4FF00A01 		mov	r1, #10
 1240 0058 4FF00502 		mov	r2, #5
 1241 005c FFF7FEFF 		bl	GPIO_PinAFConfig
 487:../src/waverecorder.c ****   
 488:../src/waverecorder.c ****   /* SPI MOSI pin configuration */
 489:../src/waverecorder.c ****   GPIO_InitStructure.GPIO_Pin =  SPI_MOSI_PIN;
 1242              		.loc 1 489 0
 1243 0060 4FF00803 		mov	r3, #8
 1244 0064 3B60     		str	r3, [r7, #0]
 490:../src/waverecorder.c ****   GPIO_Init(SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 1245              		.loc 1 490 0
 1246 0066 4FF40060 		mov	r0, #2048
 1247 006a C4F20200 		movt	r0, 16386
 1248 006e 3B46     		mov	r3, r7
 1249 0070 1946     		mov	r1, r3
 1250 0072 FFF7FEFF 		bl	GPIO_Init
 491:../src/waverecorder.c ****   GPIO_PinAFConfig(SPI_MOSI_GPIO_PORT, SPI_MOSI_SOURCE, SPI_MOSI_AF);
 1251              		.loc 1 491 0
 1252 0076 4FF40060 		mov	r0, #2048
 1253 007a C4F20200 		movt	r0, 16386
 1254 007e 4FF00301 		mov	r1, #3
 1255 0082 4FF00502 		mov	r2, #5
 1256 0086 FFF7FEFF 		bl	GPIO_PinAFConfig
 492:../src/waverecorder.c **** }
 1257              		.loc 1 492 0
 1258 008a 07F10807 		add	r7, r7, #8
 1259 008e BD46     		mov	sp, r7
 1260 0090 80BD     		pop	{r7, pc}
 1261              		.cfi_endproc
 1262              	.LFE116:
 1264 0092 00BF     		.section	.text.WaveRecorder_SPI_Init,"ax",%progbits
 1265              		.align	2
 1266              		.thumb
 1267              		.thumb_func
 1269              	WaveRecorder_SPI_Init:
 1270              	.LFB117:
 493:../src/waverecorder.c **** 
 494:../src/waverecorder.c **** /**
 495:../src/waverecorder.c ****   * @brief  Initialize SPI peripheral.
 496:../src/waverecorder.c ****   * @param  Freq :Audio frequency
 497:../src/waverecorder.c ****   * @retval None
 498:../src/waverecorder.c ****   */
 499:../src/waverecorder.c **** static void WaveRecorder_SPI_Init(uint32_t Freq)
 500:../src/waverecorder.c **** {
 1271              		.loc 1 500 0
 1272              		.cfi_startproc
 1273              		@ args = 0, pretend = 0, frame = 24
 1274              		@ frame_needed = 1, uses_anonymous_args = 0
 1275 0000 80B5     		push	{r7, lr}
 1276              	.LCFI19:
 1277              		.cfi_def_cfa_offset 8
 1278              		.cfi_offset 14, -4
 1279              		.cfi_offset 7, -8
 1280 0002 86B0     		sub	sp, sp, #24
 1281              	.LCFI20:
 1282              		.cfi_def_cfa_offset 32
 1283 0004 00AF     		add	r7, sp, #0
 1284              	.LCFI21:
 1285              		.cfi_def_cfa_register 7
 1286 0006 7860     		str	r0, [r7, #4]
 501:../src/waverecorder.c ****   I2S_InitTypeDef I2S_InitStructure;
 502:../src/waverecorder.c **** 
 503:../src/waverecorder.c ****   /* Enable the SPI clock */
 504:../src/waverecorder.c ****   RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2,ENABLE);
 1287              		.loc 1 504 0
 1288 0008 4FF48040 		mov	r0, #16384
 1289 000c 4FF00101 		mov	r1, #1
 1290 0010 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 505:../src/waverecorder.c ****   
 506:../src/waverecorder.c ****   /* SPI configuration */
 507:../src/waverecorder.c ****   SPI_I2S_DeInit(SPI2);
 1291              		.loc 1 507 0
 1292 0014 4FF46050 		mov	r0, #14336
 1293 0018 C4F20000 		movt	r0, 16384
 1294 001c FFF7FEFF 		bl	SPI_I2S_DeInit
 508:../src/waverecorder.c ****   I2S_InitStructure.I2S_AudioFreq = 32000;
 1295              		.loc 1 508 0
 1296 0020 4FF4FA43 		mov	r3, #32000
 1297 0024 3B61     		str	r3, [r7, #16]
 509:../src/waverecorder.c ****   I2S_InitStructure.I2S_Standard = I2S_Standard_LSB;
 1298              		.loc 1 509 0
 1299 0026 4FF02003 		mov	r3, #32
 1300 002a 7B81     		strh	r3, [r7, #10]	@ movhi
 510:../src/waverecorder.c ****   I2S_InitStructure.I2S_DataFormat = I2S_DataFormat_16b;
 1301              		.loc 1 510 0
 1302 002c 4FF00003 		mov	r3, #0
 1303 0030 BB81     		strh	r3, [r7, #12]	@ movhi
 511:../src/waverecorder.c ****   I2S_InitStructure.I2S_CPOL = I2S_CPOL_High;
 1304              		.loc 1 511 0
 1305 0032 4FF00803 		mov	r3, #8
 1306 0036 BB82     		strh	r3, [r7, #20]	@ movhi
 512:../src/waverecorder.c ****   I2S_InitStructure.I2S_Mode = I2S_Mode_MasterRx;
 1307              		.loc 1 512 0
 1308 0038 4FF44073 		mov	r3, #768
 1309 003c 3B81     		strh	r3, [r7, #8]	@ movhi
 513:../src/waverecorder.c ****   I2S_InitStructure.I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 1310              		.loc 1 513 0
 1311 003e 4FF00003 		mov	r3, #0
 1312 0042 FB81     		strh	r3, [r7, #14]	@ movhi
 514:../src/waverecorder.c ****   /* Initialize the I2S peripheral with the structure above */
 515:../src/waverecorder.c ****   I2S_Init(SPI2, &I2S_InitStructure);
 1313              		.loc 1 515 0
 1314 0044 4FF46050 		mov	r0, #14336
 1315 0048 C4F20000 		movt	r0, 16384
 1316 004c 07F10803 		add	r3, r7, #8
 1317 0050 1946     		mov	r1, r3
 1318 0052 FFF7FEFF 		bl	I2S_Init
 516:../src/waverecorder.c **** 
 517:../src/waverecorder.c ****   /* Enable the Rx buffer not empty interrupt */
 518:../src/waverecorder.c ****   SPI_I2S_ITConfig(SPI2, SPI_I2S_IT_RXNE, ENABLE);
 1319              		.loc 1 518 0
 1320 0056 4FF46050 		mov	r0, #14336
 1321 005a C4F20000 		movt	r0, 16384
 1322 005e 4FF06001 		mov	r1, #96
 1323 0062 4FF00102 		mov	r2, #1
 1324 0066 FFF7FEFF 		bl	SPI_I2S_ITConfig
 519:../src/waverecorder.c **** }
 1325              		.loc 1 519 0
 1326 006a 07F11807 		add	r7, r7, #24
 1327 006e BD46     		mov	sp, r7
 1328 0070 80BD     		pop	{r7, pc}
 1329              		.cfi_endproc
 1330              	.LFE117:
 1332 0072 00BF     		.section	.text.WaveRecorder_NVIC_Init,"ax",%progbits
 1333              		.align	2
 1334              		.thumb
 1335              		.thumb_func
 1337              	WaveRecorder_NVIC_Init:
 1338              	.LFB118:
 520:../src/waverecorder.c **** 
 521:../src/waverecorder.c **** 
 522:../src/waverecorder.c **** /**
 523:../src/waverecorder.c ****   * @brief  Initialize the NVIC.
 524:../src/waverecorder.c ****   * @param  None
 525:../src/waverecorder.c ****   * @retval None
 526:../src/waverecorder.c ****   */
 527:../src/waverecorder.c **** static void WaveRecorder_NVIC_Init(void)
 528:../src/waverecorder.c **** {
 1339              		.loc 1 528 0
 1340              		.cfi_startproc
 1341              		@ args = 0, pretend = 0, frame = 8
 1342              		@ frame_needed = 1, uses_anonymous_args = 0
 1343 0000 80B5     		push	{r7, lr}
 1344              	.LCFI22:
 1345              		.cfi_def_cfa_offset 8
 1346              		.cfi_offset 14, -4
 1347              		.cfi_offset 7, -8
 1348 0002 82B0     		sub	sp, sp, #8
 1349              	.LCFI23:
 1350              		.cfi_def_cfa_offset 16
 1351 0004 00AF     		add	r7, sp, #0
 1352              	.LCFI24:
 1353              		.cfi_def_cfa_register 7
 529:../src/waverecorder.c ****   NVIC_InitTypeDef NVIC_InitStructure;
 530:../src/waverecorder.c **** 
 531:../src/waverecorder.c ****   NVIC_PriorityGroupConfig(NVIC_PriorityGroup_3); 
 1354              		.loc 1 531 0
 1355 0006 4FF48060 		mov	r0, #1024
 1356 000a FFF7FEFF 		bl	NVIC_PriorityGroupConfig
 532:../src/waverecorder.c ****   /* Configure the SPI interrupt priority */
 533:../src/waverecorder.c ****   NVIC_InitStructure.NVIC_IRQChannel = SPI2_IRQn;
 1357              		.loc 1 533 0
 1358 000e 4FF02403 		mov	r3, #36
 1359 0012 3B71     		strb	r3, [r7, #4]
 534:../src/waverecorder.c ****   NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
 1360              		.loc 1 534 0
 1361 0014 4FF00103 		mov	r3, #1
 1362 0018 7B71     		strb	r3, [r7, #5]
 535:../src/waverecorder.c ****   NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 1363              		.loc 1 535 0
 1364 001a 4FF00003 		mov	r3, #0
 1365 001e BB71     		strb	r3, [r7, #6]
 536:../src/waverecorder.c ****   NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1366              		.loc 1 536 0
 1367 0020 4FF00103 		mov	r3, #1
 1368 0024 FB71     		strb	r3, [r7, #7]
 537:../src/waverecorder.c ****   NVIC_Init(&NVIC_InitStructure);
 1369              		.loc 1 537 0
 1370 0026 07F10403 		add	r3, r7, #4
 1371 002a 1846     		mov	r0, r3
 1372 002c FFF7FEFF 		bl	NVIC_Init
 538:../src/waverecorder.c **** }
 1373              		.loc 1 538 0
 1374 0030 07F10807 		add	r7, r7, #8
 1375 0034 BD46     		mov	sp, r7
 1376 0036 80BD     		pop	{r7, pc}
 1377              		.cfi_endproc
 1378              	.LFE118:
 1380              		.text
 1381              	.Letext0:
 1382              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1383              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\ST\\
 1384              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 1385              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 1386              		.file 6 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 1387              		.file 7 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Utilities\\STM32F4-Dis
 1388              		.file 8 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32_USB_O
 1389              		.file 9 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32_USB_O
 1390              		.file 10 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Utilities\\Third_Part
 1391              		.file 11 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Utilities\\Third_Part
 1392              		.file 12 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Utilities\\STM32F4-Di
 1393              		.file 13 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Inc
DEFINED SYMBOLS
                            *ABS*:00000000 waverecorder.c
                            *COM*:00000bb8 RAM_Buf
                            *COM*:00000bb8 RAM_Buf1
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:25     .bss.buf_idx:00000000 buf_idx
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:22     .bss.buf_idx:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:32     .bss.buf_idx1:00000000 buf_idx1
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:29     .bss.buf_idx1:00000000 $d
                            *COM*:00000004 writebuffer
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:40     .bss.counter:00000000 counter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:37     .bss.counter:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:46     .bss.WaveRecStatus:00000000 WaveRecStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:47     .bss.WaveRecStatus:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:49     .bss.AudioRecInited:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:52     .bss.AudioRecInited:00000000 AudioRecInited
                            *COM*:00000034 Filter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:60     .data.AudioRecBitRes:00000000 AudioRecBitRes
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:57     .data.AudioRecBitRes:00000000 $d
                            *COM*:00000020 RecBuf
                            *COM*:00000020 RecBuf1
                            *COM*:00000200 RecBufHeader
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:69     .bss.Switch:00000000 Switch
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:70     .bss.Switch:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:76     .bss.Data_Status:00000000 Data_Status
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:73     .bss.Data_Status:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:83     .data.AudioRecChnlNbr:00000000 AudioRecChnlNbr
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:80     .data.AudioRecChnlNbr:00000000 $d
                            *COM*:00000004 pAudioRecBuf
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:91     .bss.AudioRecCurrSize:00000000 AudioRecCurrSize
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:88     .bss.AudioRecCurrSize:00000000 $d
                            *COM*:00000002 bytesWritten
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:95     .bss.InternalBuffer:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:98     .bss.InternalBuffer:00000000 InternalBuffer
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:101    .bss.InternalBufferSize:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:104    .bss.InternalBufferSize:00000000 InternalBufferSize
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:107    .text.WaveRecorderInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:112    .text.WaveRecorderInit:00000000 WaveRecorderInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:1190   .text.WaveRecorder_GPIO_Init:00000000 WaveRecorder_GPIO_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:1337   .text.WaveRecorder_NVIC_Init:00000000 WaveRecorder_NVIC_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:1269   .text.WaveRecorder_SPI_Init:00000000 WaveRecorder_SPI_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:213    .text.WaveRecorderInit:000000c8 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:219    .text.WaveRecorderStart:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:224    .text.WaveRecorderStart:00000000 WaveRecorderStart
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:286    .text.WaveRecorderStop:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:291    .text.WaveRecorderStop:00000000 WaveRecorderStop
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:330    .text.SPI2_IRQHandler:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:335    .text.SPI2_IRQHandler:00000000 SPI2_IRQHandler
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:427    .text.WavaRecorderHeaderInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:432    .text.WavaRecorderHeaderInit:00000000 WavaRecorderHeaderInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:705    .rodata:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:706    .rodata:00000000 .LC0
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:709    .text.WaveRecorderUpdate:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:714    .text.WaveRecorderUpdate:00000000 WaveRecorderUpdate
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:1186   .text.WaveRecorder_GPIO_Init:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:1265   .text.WaveRecorder_SPI_Init:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccD9S0ix.s:1333   .text.WaveRecorder_NVIC_Init:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
PDM_Filter_Init
SPI_I2S_ITConfig
I2S_Cmd
SPI_I2S_GetITStatus
SPI_I2S_ReceiveData
PDM_Filter_64_LSB
WaveCounter
LED_Toggle
f_unlink
USB_OTG_Core
HCD_IsDeviceConnected
file
f_open
STM_EVAL_LEDToggle
f_write
Time_Rec_Base
Command_index
f_lseek
f_close
f_mount
RCC_AHB1PeriphClockCmd
GPIO_Init
GPIO_PinAFConfig
RCC_APB1PeriphClockCmd
SPI_I2S_DeInit
I2S_Init
NVIC_PriorityGroupConfig
NVIC_Init
