   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	RTC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	RTC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    30-September-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 368 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  42              		.loc 1 369 0
  43 0006 4FF00003 		mov	r3, #0
  44 000a 7B60     		str	r3, [r7, #4]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  45              		.loc 1 370 0
  46 000c 4FF00003 		mov	r3, #0
  47 0010 BB60     		str	r3, [r7, #8]
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  48              		.loc 1 371 0
  49 0012 4FF00003 		mov	r3, #0
  50 0016 FB73     		strb	r3, [r7, #15]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  51              		.loc 1 374 0
  52 0018 4FF42053 		mov	r3, #10240
  53 001c C4F20003 		movt	r3, 16384
  54 0020 4FF0CA02 		mov	r2, #202
  55 0024 5A62     		str	r2, [r3, #36]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  56              		.loc 1 375 0
  57 0026 4FF42053 		mov	r3, #10240
  58 002a C4F20003 		movt	r3, 16384
  59 002e 4FF05302 		mov	r2, #83
  60 0032 5A62     		str	r2, [r3, #36]
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  61              		.loc 1 378 0
  62 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  63 0038 0346     		mov	r3, r0
  64 003a 002B     		cmp	r3, #0
  65 003c 03D1     		bne	.L2
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  66              		.loc 1 380 0
  67 003e 4FF00003 		mov	r3, #0
  68 0042 FB73     		strb	r3, [r7, #15]
  69 0044 84E0     		b	.L3
  70              	.L2:
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  71              		.loc 1 385 0
  72 0046 4FF42053 		mov	r3, #10240
  73 004a C4F20003 		movt	r3, 16384
  74 004e 4FF00002 		mov	r2, #0
  75 0052 1A60     		str	r2, [r3, #0]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  76              		.loc 1 386 0
  77 0054 4FF42053 		mov	r3, #10240
  78 0058 C4F20003 		movt	r3, 16384
  79 005c 42F20112 		movw	r2, #8449
  80 0060 5A60     		str	r2, [r3, #4]
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  81              		.loc 1 388 0
  82 0062 4FF42053 		mov	r3, #10240
  83 0066 C4F20003 		movt	r3, 16384
  84 006a 4FF42052 		mov	r2, #10240
  85 006e C4F20002 		movt	r2, 16384
  86 0072 9268     		ldr	r2, [r2, #8]
  87 0074 02F00702 		and	r2, r2, #7
  88 0078 9A60     		str	r2, [r3, #8]
  89              	.L5:
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  90              		.loc 1 393 0 discriminator 1
  91 007a 4FF42053 		mov	r3, #10240
  92 007e C4F20003 		movt	r3, 16384
  93 0082 DB68     		ldr	r3, [r3, #12]
  94 0084 03F00403 		and	r3, r3, #4
  95 0088 BB60     		str	r3, [r7, #8]
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  96              		.loc 1 394 0 discriminator 1
  97 008a 7B68     		ldr	r3, [r7, #4]
  98 008c 03F10103 		add	r3, r3, #1
  99 0090 7B60     		str	r3, [r7, #4]
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 100              		.loc 1 395 0 discriminator 1
 101 0092 7B68     		ldr	r3, [r7, #4]
 102 0094 B3F5803F 		cmp	r3, #65536
 103 0098 02D0     		beq	.L4
 104 009a BB68     		ldr	r3, [r7, #8]
 105 009c 002B     		cmp	r3, #0
 106 009e ECD0     		beq	.L5
 107              	.L4:
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 108              		.loc 1 397 0
 109 00a0 4FF42053 		mov	r3, #10240
 110 00a4 C4F20003 		movt	r3, 16384
 111 00a8 DB68     		ldr	r3, [r3, #12]
 112 00aa 03F00403 		and	r3, r3, #4
 113 00ae 002B     		cmp	r3, #0
 114 00b0 03D1     		bne	.L6
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 115              		.loc 1 399 0
 116 00b2 4FF00003 		mov	r3, #0
 117 00b6 FB73     		strb	r3, [r7, #15]
 118 00b8 4AE0     		b	.L3
 119              	.L6:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 120              		.loc 1 404 0
 121 00ba 4FF42053 		mov	r3, #10240
 122 00be C4F20003 		movt	r3, 16384
 123 00c2 9B68     		ldr	r3, [r3, #8]
 124 00c4 4FF42053 		mov	r3, #10240
 125 00c8 C4F20003 		movt	r3, 16384
 126 00cc 4FF00002 		mov	r2, #0
 127 00d0 9A60     		str	r2, [r3, #8]
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 128              		.loc 1 405 0
 129 00d2 4FF42053 		mov	r3, #10240
 130 00d6 C4F20003 		movt	r3, 16384
 131 00da 4FF6FF72 		movw	r2, #65535
 132 00de 5A61     		str	r2, [r3, #20]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 133              		.loc 1 406 0
 134 00e0 4FF42053 		mov	r3, #10240
 135 00e4 C4F20003 		movt	r3, 16384
 136 00e8 4FF0FF02 		mov	r2, #255
 137 00ec C0F27F02 		movt	r2, 127
 138 00f0 1A61     		str	r2, [r3, #16]
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 139              		.loc 1 407 0
 140 00f2 4FF42053 		mov	r3, #10240
 141 00f6 C4F20003 		movt	r3, 16384
 142 00fa 4FF00002 		mov	r2, #0
 143 00fe 9A61     		str	r2, [r3, #24]
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 144              		.loc 1 408 0
 145 0100 4FF42053 		mov	r3, #10240
 146 0104 C4F20003 		movt	r3, 16384
 147 0108 4FF00002 		mov	r2, #0
 148 010c DA61     		str	r2, [r3, #28]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 149              		.loc 1 409 0
 150 010e 4FF42053 		mov	r3, #10240
 151 0112 C4F20003 		movt	r3, 16384
 152 0116 4FF00002 		mov	r2, #0
 153 011a 1A62     		str	r2, [r3, #32]
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 154              		.loc 1 412 0
 155 011c 4FF42053 		mov	r3, #10240
 156 0120 C4F20003 		movt	r3, 16384
 157 0124 4FF00002 		mov	r2, #0
 158 0128 DA60     		str	r2, [r3, #12]
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 159              		.loc 1 415 0
 160 012a 4FF42053 		mov	r3, #10240
 161 012e C4F20003 		movt	r3, 16384
 162 0132 4FF00002 		mov	r2, #0
 163 0136 1A64     		str	r2, [r3, #64]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 164              		.loc 1 417 0
 165 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 166 013c 0346     		mov	r3, r0
 167 013e 002B     		cmp	r3, #0
 168 0140 03D1     		bne	.L7
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 169              		.loc 1 419 0
 170 0142 4FF00003 		mov	r3, #0
 171 0146 FB73     		strb	r3, [r7, #15]
 172 0148 02E0     		b	.L3
 173              	.L7:
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 174              		.loc 1 423 0
 175 014a 4FF00103 		mov	r3, #1
 176 014e FB73     		strb	r3, [r7, #15]
 177              	.L3:
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 178              		.loc 1 429 0
 179 0150 4FF42053 		mov	r3, #10240
 180 0154 C4F20003 		movt	r3, 16384
 181 0158 4FF0FF02 		mov	r2, #255
 182 015c 5A62     		str	r2, [r3, #36]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 183              		.loc 1 431 0
 184 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 185              		.loc 1 432 0
 186 0160 1846     		mov	r0, r3
 187 0162 07F11007 		add	r7, r7, #16
 188 0166 BD46     		mov	sp, r7
 189 0168 80BD     		pop	{r7, pc}
 190              		.cfi_endproc
 191              	.LFE110:
 193 016a 00BF     		.section	.text.RTC_Init,"ax",%progbits
 194              		.align	2
 195              		.global	RTC_Init
 196              		.thumb
 197              		.thumb_func
 199              	RTC_Init:
 200              	.LFB111:
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 201              		.loc 1 446 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0000 80B5     		push	{r7, lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 14, -4
 209              		.cfi_offset 7, -8
 210 0002 84B0     		sub	sp, sp, #16
 211              	.LCFI4:
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI5:
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 217              		.loc 1 447 0
 218 0008 4FF00003 		mov	r3, #0
 219 000c FB73     		strb	r3, [r7, #15]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 220              		.loc 1 455 0
 221 000e 4FF42053 		mov	r3, #10240
 222 0012 C4F20003 		movt	r3, 16384
 223 0016 4FF0CA02 		mov	r2, #202
 224 001a 5A62     		str	r2, [r3, #36]
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 225              		.loc 1 456 0
 226 001c 4FF42053 		mov	r3, #10240
 227 0020 C4F20003 		movt	r3, 16384
 228 0024 4FF05302 		mov	r2, #83
 229 0028 5A62     		str	r2, [r3, #36]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 230              		.loc 1 459 0
 231 002a FFF7FEFF 		bl	RTC_EnterInitMode
 232 002e 0346     		mov	r3, r0
 233 0030 002B     		cmp	r3, #0
 234 0032 03D1     		bne	.L9
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 235              		.loc 1 461 0
 236 0034 4FF00003 		mov	r3, #0
 237 0038 FB73     		strb	r3, [r7, #15]
 238 003a 33E0     		b	.L10
 239              	.L9:
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 240              		.loc 1 466 0
 241 003c 4FF42053 		mov	r3, #10240
 242 0040 C4F20003 		movt	r3, 16384
 243 0044 4FF42052 		mov	r2, #10240
 244 0048 C4F20002 		movt	r2, 16384
 245 004c 9268     		ldr	r2, [r2, #8]
 246 004e 22F04002 		bic	r2, r2, #64
 247 0052 9A60     		str	r2, [r3, #8]
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 248              		.loc 1 468 0
 249 0054 4FF42053 		mov	r3, #10240
 250 0058 C4F20003 		movt	r3, 16384
 251 005c 4FF42052 		mov	r2, #10240
 252 0060 C4F20002 		movt	r2, 16384
 253 0064 9168     		ldr	r1, [r2, #8]
 254 0066 7A68     		ldr	r2, [r7, #4]
 255 0068 1268     		ldr	r2, [r2, #0]
 256 006a 0A43     		orrs	r2, r2, r1
 257 006c 9A60     		str	r2, [r3, #8]
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 258              		.loc 1 471 0
 259 006e 4FF42053 		mov	r3, #10240
 260 0072 C4F20003 		movt	r3, 16384
 261 0076 7A68     		ldr	r2, [r7, #4]
 262 0078 9268     		ldr	r2, [r2, #8]
 263 007a 1A61     		str	r2, [r3, #16]
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 264              		.loc 1 472 0
 265 007c 4FF42053 		mov	r3, #10240
 266 0080 C4F20003 		movt	r3, 16384
 267 0084 4FF42052 		mov	r2, #10240
 268 0088 C4F20002 		movt	r2, 16384
 269 008c 1169     		ldr	r1, [r2, #16]
 270 008e 7A68     		ldr	r2, [r7, #4]
 271 0090 5268     		ldr	r2, [r2, #4]
 272 0092 4FEA0242 		lsl	r2, r2, #16
 273 0096 0A43     		orrs	r2, r2, r1
 274 0098 1A61     		str	r2, [r3, #16]
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 275              		.loc 1 475 0
 276 009a FFF7FEFF 		bl	RTC_ExitInitMode
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 277              		.loc 1 477 0
 278 009e 4FF00103 		mov	r3, #1
 279 00a2 FB73     		strb	r3, [r7, #15]
 280              	.L10:
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 281              		.loc 1 480 0
 282 00a4 4FF42053 		mov	r3, #10240
 283 00a8 C4F20003 		movt	r3, 16384
 284 00ac 4FF0FF02 		mov	r2, #255
 285 00b0 5A62     		str	r2, [r3, #36]
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 286              		.loc 1 482 0
 287 00b2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 288              		.loc 1 483 0
 289 00b4 1846     		mov	r0, r3
 290 00b6 07F11007 		add	r7, r7, #16
 291 00ba BD46     		mov	sp, r7
 292 00bc 80BD     		pop	{r7, pc}
 293              		.cfi_endproc
 294              	.LFE111:
 296 00be 00BF     		.section	.text.RTC_StructInit,"ax",%progbits
 297              		.align	2
 298              		.global	RTC_StructInit
 299              		.thumb
 300              		.thumb_func
 302              	RTC_StructInit:
 303              	.LFB112:
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 304              		.loc 1 492 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 8
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 309 0000 80B4     		push	{r7}
 310              	.LCFI6:
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 7, -4
 313 0002 83B0     		sub	sp, sp, #12
 314              	.LCFI7:
 315              		.cfi_def_cfa_offset 16
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI8:
 318              		.cfi_def_cfa_register 7
 319 0006 7860     		str	r0, [r7, #4]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 320              		.loc 1 494 0
 321 0008 7B68     		ldr	r3, [r7, #4]
 322 000a 4FF00002 		mov	r2, #0
 323 000e 1A60     		str	r2, [r3, #0]
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 324              		.loc 1 497 0
 325 0010 7B68     		ldr	r3, [r7, #4]
 326 0012 4FF07F02 		mov	r2, #127
 327 0016 5A60     		str	r2, [r3, #4]
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 328              		.loc 1 500 0
 329 0018 7B68     		ldr	r3, [r7, #4]
 330 001a 4FF0FF02 		mov	r2, #255
 331 001e 9A60     		str	r2, [r3, #8]
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 332              		.loc 1 501 0
 333 0020 07F10C07 		add	r7, r7, #12
 334 0024 BD46     		mov	sp, r7
 335 0026 80BC     		pop	{r7}
 336 0028 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE112:
 340 002a 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 341              		.align	2
 342              		.global	RTC_WriteProtectionCmd
 343              		.thumb
 344              		.thumb_func
 346              	RTC_WriteProtectionCmd:
 347              	.LFB113:
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 348              		.loc 1 514 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI9:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 83B0     		sub	sp, sp, #12
 358              	.LCFI10:
 359              		.cfi_def_cfa_offset 16
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI11:
 362              		.cfi_def_cfa_register 7
 363 0006 0346     		mov	r3, r0
 364 0008 FB71     		strb	r3, [r7, #7]
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 365              		.loc 1 518 0
 366 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 367 000c 002B     		cmp	r3, #0
 368 000e 07D0     		beq	.L13
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 369              		.loc 1 521 0
 370 0010 4FF42053 		mov	r3, #10240
 371 0014 C4F20003 		movt	r3, 16384
 372 0018 4FF0FF02 		mov	r2, #255
 373 001c 5A62     		str	r2, [r3, #36]
 374 001e 0DE0     		b	.L12
 375              	.L13:
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 376              		.loc 1 526 0
 377 0020 4FF42053 		mov	r3, #10240
 378 0024 C4F20003 		movt	r3, 16384
 379 0028 4FF0CA02 		mov	r2, #202
 380 002c 5A62     		str	r2, [r3, #36]
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 381              		.loc 1 527 0
 382 002e 4FF42053 		mov	r3, #10240
 383 0032 C4F20003 		movt	r3, 16384
 384 0036 4FF05302 		mov	r2, #83
 385 003a 5A62     		str	r2, [r3, #36]
 386              	.L12:
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 387              		.loc 1 529 0
 388 003c 07F10C07 		add	r7, r7, #12
 389 0040 BD46     		mov	sp, r7
 390 0042 80BC     		pop	{r7}
 391 0044 7047     		bx	lr
 392              		.cfi_endproc
 393              	.LFE113:
 395 0046 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 396              		.align	2
 397              		.global	RTC_EnterInitMode
 398              		.thumb
 399              		.thumb_func
 401              	RTC_EnterInitMode:
 402              	.LFB114:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 403              		.loc 1 541 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 16
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 80B4     		push	{r7}
 409              	.LCFI12:
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 7, -4
 412 0002 85B0     		sub	sp, sp, #20
 413              	.LCFI13:
 414              		.cfi_def_cfa_offset 24
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI14:
 417              		.cfi_def_cfa_register 7
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 418              		.loc 1 542 0
 419 0006 4FF00003 		mov	r3, #0
 420 000a 7B60     		str	r3, [r7, #4]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 421              		.loc 1 543 0
 422 000c 4FF00003 		mov	r3, #0
 423 0010 FB73     		strb	r3, [r7, #15]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 424              		.loc 1 544 0
 425 0012 4FF00003 		mov	r3, #0
 426 0016 BB60     		str	r3, [r7, #8]
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 427              		.loc 1 547 0
 428 0018 4FF42053 		mov	r3, #10240
 429 001c C4F20003 		movt	r3, 16384
 430 0020 DB68     		ldr	r3, [r3, #12]
 431 0022 03F04003 		and	r3, r3, #64
 432 0026 002B     		cmp	r3, #0
 433 0028 2AD1     		bne	.L16
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 434              		.loc 1 550 0
 435 002a 4FF42053 		mov	r3, #10240
 436 002e C4F20003 		movt	r3, 16384
 437 0032 4FF0FF32 		mov	r2, #-1
 438 0036 DA60     		str	r2, [r3, #12]
 439              	.L18:
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 440              		.loc 1 555 0 discriminator 1
 441 0038 4FF42053 		mov	r3, #10240
 442 003c C4F20003 		movt	r3, 16384
 443 0040 DB68     		ldr	r3, [r3, #12]
 444 0042 03F04003 		and	r3, r3, #64
 445 0046 BB60     		str	r3, [r7, #8]
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 446              		.loc 1 556 0 discriminator 1
 447 0048 7B68     		ldr	r3, [r7, #4]
 448 004a 03F10103 		add	r3, r3, #1
 449 004e 7B60     		str	r3, [r7, #4]
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 450              		.loc 1 557 0 discriminator 1
 451 0050 7B68     		ldr	r3, [r7, #4]
 452 0052 B3F5803F 		cmp	r3, #65536
 453 0056 02D0     		beq	.L17
 454 0058 BB68     		ldr	r3, [r7, #8]
 455 005a 002B     		cmp	r3, #0
 456 005c ECD0     		beq	.L18
 457              	.L17:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 458              		.loc 1 559 0
 459 005e 4FF42053 		mov	r3, #10240
 460 0062 C4F20003 		movt	r3, 16384
 461 0066 DB68     		ldr	r3, [r3, #12]
 462 0068 03F04003 		and	r3, r3, #64
 463 006c 002B     		cmp	r3, #0
 464 006e 03D0     		beq	.L19
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 465              		.loc 1 561 0
 466 0070 4FF00103 		mov	r3, #1
 467 0074 FB73     		strb	r3, [r7, #15]
 468 0076 06E0     		b	.L20
 469              	.L19:
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 470              		.loc 1 565 0
 471 0078 4FF00003 		mov	r3, #0
 472 007c FB73     		strb	r3, [r7, #15]
 473 007e 02E0     		b	.L20
 474              	.L16:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 475              		.loc 1 570 0
 476 0080 4FF00103 		mov	r3, #1
 477 0084 FB73     		strb	r3, [r7, #15]
 478              	.L20:
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 479              		.loc 1 573 0
 480 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 481              		.loc 1 574 0
 482 0088 1846     		mov	r0, r3
 483 008a 07F11407 		add	r7, r7, #20
 484 008e BD46     		mov	sp, r7
 485 0090 80BC     		pop	{r7}
 486 0092 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE114:
 490              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 491              		.align	2
 492              		.global	RTC_ExitInitMode
 493              		.thumb
 494              		.thumb_func
 496              	RTC_ExitInitMode:
 497              	.LFB115:
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 498              		.loc 1 586 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502              		@ link register save eliminated.
 503 0000 80B4     		push	{r7}
 504              	.LCFI15:
 505              		.cfi_def_cfa_offset 4
 506              		.cfi_offset 7, -4
 507 0002 00AF     		add	r7, sp, #0
 508              	.LCFI16:
 509              		.cfi_def_cfa_register 7
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 510              		.loc 1 588 0
 511 0004 4FF42053 		mov	r3, #10240
 512 0008 C4F20003 		movt	r3, 16384
 513 000c 4FF42052 		mov	r2, #10240
 514 0010 C4F20002 		movt	r2, 16384
 515 0014 D268     		ldr	r2, [r2, #12]
 516 0016 22F08002 		bic	r2, r2, #128
 517 001a DA60     		str	r2, [r3, #12]
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 518              		.loc 1 589 0
 519 001c BD46     		mov	sp, r7
 520 001e 80BC     		pop	{r7}
 521 0020 7047     		bx	lr
 522              		.cfi_endproc
 523              	.LFE115:
 525 0022 00BF     		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 526              		.align	2
 527              		.global	RTC_WaitForSynchro
 528              		.thumb
 529              		.thumb_func
 531              	RTC_WaitForSynchro:
 532              	.LFB116:
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 533              		.loc 1 608 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 16
 536              		@ frame_needed = 1, uses_anonymous_args = 0
 537              		@ link register save eliminated.
 538 0000 80B4     		push	{r7}
 539              	.LCFI17:
 540              		.cfi_def_cfa_offset 4
 541              		.cfi_offset 7, -4
 542 0002 85B0     		sub	sp, sp, #20
 543              	.LCFI18:
 544              		.cfi_def_cfa_offset 24
 545 0004 00AF     		add	r7, sp, #0
 546              	.LCFI19:
 547              		.cfi_def_cfa_register 7
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 548              		.loc 1 609 0
 549 0006 4FF00003 		mov	r3, #0
 550 000a 7B60     		str	r3, [r7, #4]
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 551              		.loc 1 610 0
 552 000c 4FF00003 		mov	r3, #0
 553 0010 FB73     		strb	r3, [r7, #15]
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 554              		.loc 1 611 0
 555 0012 4FF00003 		mov	r3, #0
 556 0016 BB60     		str	r3, [r7, #8]
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 557              		.loc 1 614 0
 558 0018 4FF42053 		mov	r3, #10240
 559 001c C4F20003 		movt	r3, 16384
 560 0020 4FF0CA02 		mov	r2, #202
 561 0024 5A62     		str	r2, [r3, #36]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 562              		.loc 1 615 0
 563 0026 4FF42053 		mov	r3, #10240
 564 002a C4F20003 		movt	r3, 16384
 565 002e 4FF05302 		mov	r2, #83
 566 0032 5A62     		str	r2, [r3, #36]
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 567              		.loc 1 618 0
 568 0034 4FF42053 		mov	r3, #10240
 569 0038 C4F20003 		movt	r3, 16384
 570 003c 4FF42052 		mov	r2, #10240
 571 0040 C4F20002 		movt	r2, 16384
 572 0044 D268     		ldr	r2, [r2, #12]
 573 0046 22F0A002 		bic	r2, r2, #160
 574 004a DA60     		str	r2, [r3, #12]
 575              	.L24:
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 576              		.loc 1 623 0 discriminator 1
 577 004c 4FF42053 		mov	r3, #10240
 578 0050 C4F20003 		movt	r3, 16384
 579 0054 DB68     		ldr	r3, [r3, #12]
 580 0056 03F02003 		and	r3, r3, #32
 581 005a BB60     		str	r3, [r7, #8]
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 582              		.loc 1 624 0 discriminator 1
 583 005c 7B68     		ldr	r3, [r7, #4]
 584 005e 03F10103 		add	r3, r3, #1
 585 0062 7B60     		str	r3, [r7, #4]
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 586              		.loc 1 625 0 discriminator 1
 587 0064 7B68     		ldr	r3, [r7, #4]
 588 0066 B3F5003F 		cmp	r3, #131072
 589 006a 02D0     		beq	.L23
 590 006c BB68     		ldr	r3, [r7, #8]
 591 006e 002B     		cmp	r3, #0
 592 0070 ECD0     		beq	.L24
 593              	.L23:
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 594              		.loc 1 627 0
 595 0072 4FF42053 		mov	r3, #10240
 596 0076 C4F20003 		movt	r3, 16384
 597 007a DB68     		ldr	r3, [r3, #12]
 598 007c 03F02003 		and	r3, r3, #32
 599 0080 002B     		cmp	r3, #0
 600 0082 03D0     		beq	.L25
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 601              		.loc 1 629 0
 602 0084 4FF00103 		mov	r3, #1
 603 0088 FB73     		strb	r3, [r7, #15]
 604 008a 02E0     		b	.L26
 605              	.L25:
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 606              		.loc 1 633 0
 607 008c 4FF00003 		mov	r3, #0
 608 0090 FB73     		strb	r3, [r7, #15]
 609              	.L26:
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 610              		.loc 1 637 0
 611 0092 4FF42053 		mov	r3, #10240
 612 0096 C4F20003 		movt	r3, 16384
 613 009a 4FF0FF02 		mov	r2, #255
 614 009e 5A62     		str	r2, [r3, #36]
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 615              		.loc 1 639 0
 616 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 617              		.loc 1 640 0
 618 00a2 1846     		mov	r0, r3
 619 00a4 07F11407 		add	r7, r7, #20
 620 00a8 BD46     		mov	sp, r7
 621 00aa 80BC     		pop	{r7}
 622 00ac 7047     		bx	lr
 623              		.cfi_endproc
 624              	.LFE116:
 626 00ae 00BF     		.section	.text.RTC_RefClockCmd,"ax",%progbits
 627              		.align	2
 628              		.global	RTC_RefClockCmd
 629              		.thumb
 630              		.thumb_func
 632              	RTC_RefClockCmd:
 633              	.LFB117:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 634              		.loc 1 651 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 16
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638 0000 80B5     		push	{r7, lr}
 639              	.LCFI20:
 640              		.cfi_def_cfa_offset 8
 641              		.cfi_offset 14, -4
 642              		.cfi_offset 7, -8
 643 0002 84B0     		sub	sp, sp, #16
 644              	.LCFI21:
 645              		.cfi_def_cfa_offset 24
 646 0004 00AF     		add	r7, sp, #0
 647              	.LCFI22:
 648              		.cfi_def_cfa_register 7
 649 0006 0346     		mov	r3, r0
 650 0008 FB71     		strb	r3, [r7, #7]
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 651              		.loc 1 652 0
 652 000a 4FF00003 		mov	r3, #0
 653 000e FB73     		strb	r3, [r7, #15]
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 654              		.loc 1 658 0
 655 0010 4FF42053 		mov	r3, #10240
 656 0014 C4F20003 		movt	r3, 16384
 657 0018 4FF0CA02 		mov	r2, #202
 658 001c 5A62     		str	r2, [r3, #36]
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 659              		.loc 1 659 0
 660 001e 4FF42053 		mov	r3, #10240
 661 0022 C4F20003 		movt	r3, 16384
 662 0026 4FF05302 		mov	r2, #83
 663 002a 5A62     		str	r2, [r3, #36]
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 664              		.loc 1 662 0
 665 002c FFF7FEFF 		bl	RTC_EnterInitMode
 666 0030 0346     		mov	r3, r0
 667 0032 002B     		cmp	r3, #0
 668 0034 03D1     		bne	.L28
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 669              		.loc 1 664 0
 670 0036 4FF00003 		mov	r3, #0
 671 003a FB73     		strb	r3, [r7, #15]
 672 003c 20E0     		b	.L29
 673              	.L28:
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 674              		.loc 1 668 0
 675 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 676 0040 002B     		cmp	r3, #0
 677 0042 0CD0     		beq	.L30
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 678              		.loc 1 671 0
 679 0044 4FF42053 		mov	r3, #10240
 680 0048 C4F20003 		movt	r3, 16384
 681 004c 4FF42052 		mov	r2, #10240
 682 0050 C4F20002 		movt	r2, 16384
 683 0054 9268     		ldr	r2, [r2, #8]
 684 0056 42F01002 		orr	r2, r2, #16
 685 005a 9A60     		str	r2, [r3, #8]
 686 005c 0BE0     		b	.L31
 687              	.L30:
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 688              		.loc 1 676 0
 689 005e 4FF42053 		mov	r3, #10240
 690 0062 C4F20003 		movt	r3, 16384
 691 0066 4FF42052 		mov	r2, #10240
 692 006a C4F20002 		movt	r2, 16384
 693 006e 9268     		ldr	r2, [r2, #8]
 694 0070 22F01002 		bic	r2, r2, #16
 695 0074 9A60     		str	r2, [r3, #8]
 696              	.L31:
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 697              		.loc 1 679 0
 698 0076 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 699              		.loc 1 681 0
 700 007a 4FF00103 		mov	r3, #1
 701 007e FB73     		strb	r3, [r7, #15]
 702              	.L29:
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 703              		.loc 1 685 0
 704 0080 4FF42053 		mov	r3, #10240
 705 0084 C4F20003 		movt	r3, 16384
 706 0088 4FF0FF02 		mov	r2, #255
 707 008c 5A62     		str	r2, [r3, #36]
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 708              		.loc 1 687 0
 709 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 710              		.loc 1 688 0
 711 0090 1846     		mov	r0, r3
 712 0092 07F11007 		add	r7, r7, #16
 713 0096 BD46     		mov	sp, r7
 714 0098 80BD     		pop	{r7, pc}
 715              		.cfi_endproc
 716              	.LFE117:
 718 009a 00BF     		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 719              		.align	2
 720              		.global	RTC_BypassShadowCmd
 721              		.thumb
 722              		.thumb_func
 724              	RTC_BypassShadowCmd:
 725              	.LFB118:
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 726              		.loc 1 699 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 8
 729              		@ frame_needed = 1, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731 0000 80B4     		push	{r7}
 732              	.LCFI23:
 733              		.cfi_def_cfa_offset 4
 734              		.cfi_offset 7, -4
 735 0002 83B0     		sub	sp, sp, #12
 736              	.LCFI24:
 737              		.cfi_def_cfa_offset 16
 738 0004 00AF     		add	r7, sp, #0
 739              	.LCFI25:
 740              		.cfi_def_cfa_register 7
 741 0006 0346     		mov	r3, r0
 742 0008 FB71     		strb	r3, [r7, #7]
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 743              		.loc 1 704 0
 744 000a 4FF42053 		mov	r3, #10240
 745 000e C4F20003 		movt	r3, 16384
 746 0012 4FF0CA02 		mov	r2, #202
 747 0016 5A62     		str	r2, [r3, #36]
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 748              		.loc 1 705 0
 749 0018 4FF42053 		mov	r3, #10240
 750 001c C4F20003 		movt	r3, 16384
 751 0020 4FF05302 		mov	r2, #83
 752 0024 5A62     		str	r2, [r3, #36]
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 753              		.loc 1 707 0
 754 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 755 0028 002B     		cmp	r3, #0
 756 002a 0CD0     		beq	.L33
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 757              		.loc 1 710 0
 758 002c 4FF42053 		mov	r3, #10240
 759 0030 C4F20003 		movt	r3, 16384
 760 0034 4FF42052 		mov	r2, #10240
 761 0038 C4F20002 		movt	r2, 16384
 762 003c 9268     		ldr	r2, [r2, #8]
 763 003e 42F02002 		orr	r2, r2, #32
 764 0042 9A60     		str	r2, [r3, #8]
 765 0044 0BE0     		b	.L34
 766              	.L33:
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 767              		.loc 1 715 0
 768 0046 4FF42053 		mov	r3, #10240
 769 004a C4F20003 		movt	r3, 16384
 770 004e 4FF42052 		mov	r2, #10240
 771 0052 C4F20002 		movt	r2, 16384
 772 0056 9268     		ldr	r2, [r2, #8]
 773 0058 02F0DF02 		and	r2, r2, #223
 774 005c 9A60     		str	r2, [r3, #8]
 775              	.L34:
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 776              		.loc 1 719 0
 777 005e 4FF42053 		mov	r3, #10240
 778 0062 C4F20003 		movt	r3, 16384
 779 0066 4FF0FF02 		mov	r2, #255
 780 006a 5A62     		str	r2, [r3, #36]
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 781              		.loc 1 720 0
 782 006c 07F10C07 		add	r7, r7, #12
 783 0070 BD46     		mov	sp, r7
 784 0072 80BC     		pop	{r7}
 785 0074 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE118:
 789              		.section	.text.RTC_SetTime,"ax",%progbits
 790              		.align	2
 791              		.global	RTC_SetTime
 792              		.thumb
 793              		.thumb_func
 795              	RTC_SetTime:
 796              	.LFB119:
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 797              		.loc 1 754 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 90B5     		push	{r4, r7, lr}
 802              	.LCFI26:
 803              		.cfi_def_cfa_offset 12
 804              		.cfi_offset 14, -4
 805              		.cfi_offset 7, -8
 806              		.cfi_offset 4, -12
 807 0002 85B0     		sub	sp, sp, #20
 808              	.LCFI27:
 809              		.cfi_def_cfa_offset 32
 810 0004 00AF     		add	r7, sp, #0
 811              	.LCFI28:
 812              		.cfi_def_cfa_register 7
 813 0006 7860     		str	r0, [r7, #4]
 814 0008 3960     		str	r1, [r7, #0]
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 815              		.loc 1 755 0
 816 000a 4FF00003 		mov	r3, #0
 817 000e FB60     		str	r3, [r7, #12]
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 818              		.loc 1 756 0
 819 0010 4FF00003 		mov	r3, #0
 820 0014 FB72     		strb	r3, [r7, #11]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 821              		.loc 1 761 0
 822 0016 7B68     		ldr	r3, [r7, #4]
 823 0018 002B     		cmp	r3, #0
 824 001a 0DD1     		bne	.L36
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 825              		.loc 1 763 0
 826 001c 4FF42053 		mov	r3, #10240
 827 0020 C4F20003 		movt	r3, 16384
 828 0024 9B68     		ldr	r3, [r3, #8]
 829 0026 03F04003 		and	r3, r3, #64
 830 002a 002B     		cmp	r3, #0
 831 002c 19D1     		bne	.L37
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 832              		.loc 1 770 0
 833 002e 3B68     		ldr	r3, [r7, #0]
 834 0030 4FF00002 		mov	r2, #0
 835 0034 DA70     		strb	r2, [r3, #3]
 836 0036 14E0     		b	.L37
 837              	.L36:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 838              		.loc 1 778 0
 839 0038 4FF42053 		mov	r3, #10240
 840 003c C4F20003 		movt	r3, 16384
 841 0040 9B68     		ldr	r3, [r3, #8]
 842 0042 03F04003 		and	r3, r3, #64
 843 0046 002B     		cmp	r3, #0
 844 0048 07D0     		beq	.L38
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 845              		.loc 1 780 0
 846 004a 3B68     		ldr	r3, [r7, #0]
 847 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 848 004e 1846     		mov	r0, r3
 849 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 850 0054 0346     		mov	r3, r0
 851 0056 FB60     		str	r3, [r7, #12]
 852 0058 03E0     		b	.L37
 853              	.L38:
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 854              		.loc 1 786 0
 855 005a 3B68     		ldr	r3, [r7, #0]
 856 005c 4FF00002 		mov	r2, #0
 857 0060 DA70     		strb	r2, [r3, #3]
 858              	.L37:
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 859              		.loc 1 794 0
 860 0062 7B68     		ldr	r3, [r7, #4]
 861 0064 002B     		cmp	r3, #0
 862 0066 12D0     		beq	.L39
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 863              		.loc 1 796 0
 864 0068 3B68     		ldr	r3, [r7, #0]
 865 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 866 006c 4FEA0342 		lsl	r2, r3, #16
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 867              		.loc 1 797 0
 868 0070 3B68     		ldr	r3, [r7, #0]
 869 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 870 0074 4FEA0323 		lsl	r3, r3, #8
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 871              		.loc 1 796 0
 872 0078 1A43     		orrs	r2, r2, r3
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 873              		.loc 1 798 0
 874 007a 3B68     		ldr	r3, [r7, #0]
 875 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 876              		.loc 1 797 0
 877 007e 1A43     		orrs	r2, r2, r3
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 878              		.loc 1 799 0
 879 0080 3B68     		ldr	r3, [r7, #0]
 880 0082 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 881 0084 4FEA0343 		lsl	r3, r3, #16
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 882              		.loc 1 796 0
 883 0088 1343     		orrs	r3, r3, r2
 884 008a FB60     		str	r3, [r7, #12]
 885 008c 1EE0     		b	.L40
 886              	.L39:
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 887              		.loc 1 803 0
 888 008e 3B68     		ldr	r3, [r7, #0]
 889 0090 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 890 0092 1846     		mov	r0, r3
 891 0094 FFF7FEFF 		bl	RTC_ByteToBcd2
 892 0098 0346     		mov	r3, r0
 893 009a 4FEA0344 		lsl	r4, r3, #16
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 894              		.loc 1 804 0
 895 009e 3B68     		ldr	r3, [r7, #0]
 896 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 897 00a2 1846     		mov	r0, r3
 898 00a4 FFF7FEFF 		bl	RTC_ByteToBcd2
 899 00a8 0346     		mov	r3, r0
 900 00aa 4FEA0323 		lsl	r3, r3, #8
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 901              		.loc 1 803 0
 902 00ae 1C43     		orrs	r4, r4, r3
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 903              		.loc 1 805 0
 904 00b0 3B68     		ldr	r3, [r7, #0]
 905 00b2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 906 00b4 1846     		mov	r0, r3
 907 00b6 FFF7FEFF 		bl	RTC_ByteToBcd2
 908 00ba 0346     		mov	r3, r0
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 909              		.loc 1 804 0
 910 00bc 44EA0302 		orr	r2, r4, r3
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 911              		.loc 1 806 0
 912 00c0 3B68     		ldr	r3, [r7, #0]
 913 00c2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 914 00c4 4FEA0343 		lsl	r3, r3, #16
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 915              		.loc 1 803 0
 916 00c8 1343     		orrs	r3, r3, r2
 917 00ca FB60     		str	r3, [r7, #12]
 918              	.L40:
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 919              		.loc 1 810 0
 920 00cc 4FF42053 		mov	r3, #10240
 921 00d0 C4F20003 		movt	r3, 16384
 922 00d4 4FF0CA02 		mov	r2, #202
 923 00d8 5A62     		str	r2, [r3, #36]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 924              		.loc 1 811 0
 925 00da 4FF42053 		mov	r3, #10240
 926 00de C4F20003 		movt	r3, 16384
 927 00e2 4FF05302 		mov	r2, #83
 928 00e6 5A62     		str	r2, [r3, #36]
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 929              		.loc 1 814 0
 930 00e8 FFF7FEFF 		bl	RTC_EnterInitMode
 931 00ec 0346     		mov	r3, r0
 932 00ee 002B     		cmp	r3, #0
 933 00f0 03D1     		bne	.L41
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 934              		.loc 1 816 0
 935 00f2 4FF00003 		mov	r3, #0
 936 00f6 FB72     		strb	r3, [r7, #11]
 937 00f8 18E0     		b	.L42
 938              	.L41:
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 939              		.loc 1 821 0
 940 00fa 4FF42052 		mov	r2, #10240
 941 00fe C4F20002 		movt	r2, 16384
 942 0102 F968     		ldr	r1, [r7, #12]
 943 0104 47F67F73 		movw	r3, #32639
 944 0108 C0F27F03 		movt	r3, 127
 945 010c 0B40     		ands	r3, r3, r1
 946 010e 1360     		str	r3, [r2, #0]
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 947              		.loc 1 824 0
 948 0110 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 949              		.loc 1 826 0
 950 0114 FFF7FEFF 		bl	RTC_WaitForSynchro
 951 0118 0346     		mov	r3, r0
 952 011a 002B     		cmp	r3, #0
 953 011c 03D1     		bne	.L43
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 954              		.loc 1 828 0
 955 011e 4FF00003 		mov	r3, #0
 956 0122 FB72     		strb	r3, [r7, #11]
 957 0124 02E0     		b	.L42
 958              	.L43:
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 959              		.loc 1 832 0
 960 0126 4FF00103 		mov	r3, #1
 961 012a FB72     		strb	r3, [r7, #11]
 962              	.L42:
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 963              		.loc 1 837 0
 964 012c 4FF42053 		mov	r3, #10240
 965 0130 C4F20003 		movt	r3, 16384
 966 0134 4FF0FF02 		mov	r2, #255
 967 0138 5A62     		str	r2, [r3, #36]
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 968              		.loc 1 839 0
 969 013a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 970              		.loc 1 840 0
 971 013c 1846     		mov	r0, r3
 972 013e 07F11407 		add	r7, r7, #20
 973 0142 BD46     		mov	sp, r7
 974 0144 90BD     		pop	{r4, r7, pc}
 975              		.cfi_endproc
 976              	.LFE119:
 978 0146 00BF     		.section	.text.RTC_TimeStructInit,"ax",%progbits
 979              		.align	2
 980              		.global	RTC_TimeStructInit
 981              		.thumb
 982              		.thumb_func
 984              	RTC_TimeStructInit:
 985              	.LFB120:
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 986              		.loc 1 850 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 8
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991 0000 80B4     		push	{r7}
 992              	.LCFI29:
 993              		.cfi_def_cfa_offset 4
 994              		.cfi_offset 7, -4
 995 0002 83B0     		sub	sp, sp, #12
 996              	.LCFI30:
 997              		.cfi_def_cfa_offset 16
 998 0004 00AF     		add	r7, sp, #0
 999              	.LCFI31:
 1000              		.cfi_def_cfa_register 7
 1001 0006 7860     		str	r0, [r7, #4]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1002              		.loc 1 852 0
 1003 0008 7B68     		ldr	r3, [r7, #4]
 1004 000a 4FF00002 		mov	r2, #0
 1005 000e DA70     		strb	r2, [r3, #3]
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1006              		.loc 1 853 0
 1007 0010 7B68     		ldr	r3, [r7, #4]
 1008 0012 4FF00002 		mov	r2, #0
 1009 0016 1A70     		strb	r2, [r3, #0]
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1010              		.loc 1 854 0
 1011 0018 7B68     		ldr	r3, [r7, #4]
 1012 001a 4FF00002 		mov	r2, #0
 1013 001e 5A70     		strb	r2, [r3, #1]
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1014              		.loc 1 855 0
 1015 0020 7B68     		ldr	r3, [r7, #4]
 1016 0022 4FF00002 		mov	r2, #0
 1017 0026 9A70     		strb	r2, [r3, #2]
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1018              		.loc 1 856 0
 1019 0028 07F10C07 		add	r7, r7, #12
 1020 002c BD46     		mov	sp, r7
 1021 002e 80BC     		pop	{r7}
 1022 0030 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE120:
 1026 0032 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 1027              		.align	2
 1028              		.global	RTC_GetTime
 1029              		.thumb
 1030              		.thumb_func
 1032              	RTC_GetTime:
 1033              	.LFB121:
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1034              		.loc 1 869 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 16
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038 0000 80B5     		push	{r7, lr}
 1039              	.LCFI32:
 1040              		.cfi_def_cfa_offset 8
 1041              		.cfi_offset 14, -4
 1042              		.cfi_offset 7, -8
 1043 0002 84B0     		sub	sp, sp, #16
 1044              	.LCFI33:
 1045              		.cfi_def_cfa_offset 24
 1046 0004 00AF     		add	r7, sp, #0
 1047              	.LCFI34:
 1048              		.cfi_def_cfa_register 7
 1049 0006 7860     		str	r0, [r7, #4]
 1050 0008 3960     		str	r1, [r7, #0]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1051              		.loc 1 870 0
 1052 000a 4FF00003 		mov	r3, #0
 1053 000e FB60     		str	r3, [r7, #12]
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1054              		.loc 1 876 0
 1055 0010 4FF42053 		mov	r3, #10240
 1056 0014 C4F20003 		movt	r3, 16384
 1057 0018 1A68     		ldr	r2, [r3, #0]
 1058 001a 47F67F73 		movw	r3, #32639
 1059 001e C0F27F03 		movt	r3, 127
 1060 0022 1340     		ands	r3, r3, r2
 1061 0024 FB60     		str	r3, [r7, #12]
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1062              		.loc 1 879 0
 1063 0026 FB68     		ldr	r3, [r7, #12]
 1064 0028 03F47C13 		and	r3, r3, #4128768
 1065 002c 4FEA1343 		lsr	r3, r3, #16
 1066 0030 DAB2     		uxtb	r2, r3
 1067 0032 3B68     		ldr	r3, [r7, #0]
 1068 0034 1A70     		strb	r2, [r3, #0]
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1069              		.loc 1 880 0
 1070 0036 FB68     		ldr	r3, [r7, #12]
 1071 0038 03F4FE43 		and	r3, r3, #32512
 1072 003c 4FEA1323 		lsr	r3, r3, #8
 1073 0040 DAB2     		uxtb	r2, r3
 1074 0042 3B68     		ldr	r3, [r7, #0]
 1075 0044 5A70     		strb	r2, [r3, #1]
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1076              		.loc 1 881 0
 1077 0046 FB68     		ldr	r3, [r7, #12]
 1078 0048 DBB2     		uxtb	r3, r3
 1079 004a 03F07F03 		and	r3, r3, #127
 1080 004e DAB2     		uxtb	r2, r3
 1081 0050 3B68     		ldr	r3, [r7, #0]
 1082 0052 9A70     		strb	r2, [r3, #2]
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1083              		.loc 1 882 0
 1084 0054 FB68     		ldr	r3, [r7, #12]
 1085 0056 03F48003 		and	r3, r3, #4194304
 1086 005a 4FEA1343 		lsr	r3, r3, #16
 1087 005e DAB2     		uxtb	r2, r3
 1088 0060 3B68     		ldr	r3, [r7, #0]
 1089 0062 DA70     		strb	r2, [r3, #3]
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1090              		.loc 1 885 0
 1091 0064 7B68     		ldr	r3, [r7, #4]
 1092 0066 002B     		cmp	r3, #0
 1093 0068 1AD1     		bne	.L45
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1094              		.loc 1 888 0
 1095 006a 3B68     		ldr	r3, [r7, #0]
 1096 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1097 006e 1846     		mov	r0, r3
 1098 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1099 0074 0346     		mov	r3, r0
 1100 0076 1A46     		mov	r2, r3
 1101 0078 3B68     		ldr	r3, [r7, #0]
 1102 007a 1A70     		strb	r2, [r3, #0]
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1103              		.loc 1 889 0
 1104 007c 3B68     		ldr	r3, [r7, #0]
 1105 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1106 0080 1846     		mov	r0, r3
 1107 0082 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1108 0086 0346     		mov	r3, r0
 1109 0088 1A46     		mov	r2, r3
 1110 008a 3B68     		ldr	r3, [r7, #0]
 1111 008c 5A70     		strb	r2, [r3, #1]
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1112              		.loc 1 890 0
 1113 008e 3B68     		ldr	r3, [r7, #0]
 1114 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1115 0092 1846     		mov	r0, r3
 1116 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1117 0098 0346     		mov	r3, r0
 1118 009a 1A46     		mov	r2, r3
 1119 009c 3B68     		ldr	r3, [r7, #0]
 1120 009e 9A70     		strb	r2, [r3, #2]
 1121              	.L45:
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1122              		.loc 1 892 0
 1123 00a0 07F11007 		add	r7, r7, #16
 1124 00a4 BD46     		mov	sp, r7
 1125 00a6 80BD     		pop	{r7, pc}
 1126              		.cfi_endproc
 1127              	.LFE121:
 1129              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1130              		.align	2
 1131              		.global	RTC_GetSubSecond
 1132              		.thumb
 1133              		.thumb_func
 1135              	RTC_GetSubSecond:
 1136              	.LFB122:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1137              		.loc 1 902 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 8
 1140              		@ frame_needed = 1, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142 0000 80B4     		push	{r7}
 1143              	.LCFI35:
 1144              		.cfi_def_cfa_offset 4
 1145              		.cfi_offset 7, -4
 1146 0002 83B0     		sub	sp, sp, #12
 1147              	.LCFI36:
 1148              		.cfi_def_cfa_offset 16
 1149 0004 00AF     		add	r7, sp, #0
 1150              	.LCFI37:
 1151              		.cfi_def_cfa_register 7
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1152              		.loc 1 903 0
 1153 0006 4FF00003 		mov	r3, #0
 1154 000a 7B60     		str	r3, [r7, #4]
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1155              		.loc 1 906 0
 1156 000c 4FF42053 		mov	r3, #10240
 1157 0010 C4F20003 		movt	r3, 16384
 1158 0014 9B6A     		ldr	r3, [r3, #40]
 1159 0016 7B60     		str	r3, [r7, #4]
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1160              		.loc 1 909 0
 1161 0018 4FF42053 		mov	r3, #10240
 1162 001c C4F20003 		movt	r3, 16384
 1163 0020 5B68     		ldr	r3, [r3, #4]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1164              		.loc 1 911 0
 1165 0022 7B68     		ldr	r3, [r7, #4]
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1166              		.loc 1 912 0
 1167 0024 1846     		mov	r0, r3
 1168 0026 07F10C07 		add	r7, r7, #12
 1169 002a BD46     		mov	sp, r7
 1170 002c 80BC     		pop	{r7}
 1171 002e 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE122:
 1175              		.section	.text.RTC_SetDate,"ax",%progbits
 1176              		.align	2
 1177              		.global	RTC_SetDate
 1178              		.thumb
 1179              		.thumb_func
 1181              	RTC_SetDate:
 1182              	.LFB123:
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1183              		.loc 1 927 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 16
 1186              		@ frame_needed = 1, uses_anonymous_args = 0
 1187 0000 90B5     		push	{r4, r7, lr}
 1188              	.LCFI38:
 1189              		.cfi_def_cfa_offset 12
 1190              		.cfi_offset 14, -4
 1191              		.cfi_offset 7, -8
 1192              		.cfi_offset 4, -12
 1193 0002 85B0     		sub	sp, sp, #20
 1194              	.LCFI39:
 1195              		.cfi_def_cfa_offset 32
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI40:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 3960     		str	r1, [r7, #0]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1201              		.loc 1 928 0
 1202 000a 4FF00003 		mov	r3, #0
 1203 000e FB60     		str	r3, [r7, #12]
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1204              		.loc 1 929 0
 1205 0010 4FF00003 		mov	r3, #0
 1206 0014 FB72     		strb	r3, [r7, #11]
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1207              		.loc 1 934 0
 1208 0016 7B68     		ldr	r3, [r7, #4]
 1209 0018 002B     		cmp	r3, #0
 1210 001a 0FD1     		bne	.L49
 1211              		.loc 1 934 0 is_stmt 0 discriminator 1
 1212 001c 3B68     		ldr	r3, [r7, #0]
 1213 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1214 0020 03F01003 		and	r3, r3, #16
 1215 0024 002B     		cmp	r3, #0
 1216 0026 09D0     		beq	.L49
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1217              		.loc 1 936 0 is_stmt 1
 1218 0028 3B68     		ldr	r3, [r7, #0]
 1219 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1220 002c 23F01003 		bic	r3, r3, #16
 1221 0030 DBB2     		uxtb	r3, r3
 1222 0032 03F10A03 		add	r3, r3, #10
 1223 0036 DAB2     		uxtb	r2, r3
 1224 0038 3B68     		ldr	r3, [r7, #0]
 1225 003a 5A70     		strb	r2, [r3, #1]
 1226              	.L49:
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1227              		.loc 1 938 0
 1228 003c 7B68     		ldr	r3, [r7, #4]
 1229 003e 002B     		cmp	r3, #0
 1230 0040 0DD0     		beq	.L50
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1231              		.loc 1 947 0
 1232 0042 3B68     		ldr	r3, [r7, #0]
 1233 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1234 0046 1846     		mov	r0, r3
 1235 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1236 004c 0346     		mov	r3, r0
 1237 004e FB60     		str	r3, [r7, #12]
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1238              		.loc 1 949 0
 1239 0050 3B68     		ldr	r3, [r7, #0]
 1240 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1241 0054 1846     		mov	r0, r3
 1242 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1243 005a 0346     		mov	r3, r0
 1244 005c FB60     		str	r3, [r7, #12]
 1245              	.L50:
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1246              		.loc 1 955 0
 1247 005e 7B68     		ldr	r3, [r7, #4]
 1248 0060 002B     		cmp	r3, #0
 1249 0062 12D0     		beq	.L51
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1250              		.loc 1 957 0
 1251 0064 3B68     		ldr	r3, [r7, #0]
 1252 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1253 0068 4FEA0342 		lsl	r2, r3, #16
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1254              		.loc 1 958 0
 1255 006c 3B68     		ldr	r3, [r7, #0]
 1256 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1257 0070 4FEA0323 		lsl	r3, r3, #8
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1258              		.loc 1 957 0
 1259 0074 1A43     		orrs	r2, r2, r3
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1260              		.loc 1 959 0
 1261 0076 3B68     		ldr	r3, [r7, #0]
 1262 0078 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1263              		.loc 1 958 0
 1264 007a 1A43     		orrs	r2, r2, r3
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1265              		.loc 1 960 0
 1266 007c 3B68     		ldr	r3, [r7, #0]
 1267 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1268 0080 4FEA4333 		lsl	r3, r3, #13
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1269              		.loc 1 957 0
 1270 0084 1343     		orrs	r3, r3, r2
 1271 0086 FB60     		str	r3, [r7, #12]
 1272 0088 1EE0     		b	.L52
 1273              	.L51:
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1274              		.loc 1 964 0
 1275 008a 3B68     		ldr	r3, [r7, #0]
 1276 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1277 008e 1846     		mov	r0, r3
 1278 0090 FFF7FEFF 		bl	RTC_ByteToBcd2
 1279 0094 0346     		mov	r3, r0
 1280 0096 4FEA0344 		lsl	r4, r3, #16
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1281              		.loc 1 965 0
 1282 009a 3B68     		ldr	r3, [r7, #0]
 1283 009c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1284 009e 1846     		mov	r0, r3
 1285 00a0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1286 00a4 0346     		mov	r3, r0
 1287 00a6 4FEA0323 		lsl	r3, r3, #8
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1288              		.loc 1 964 0
 1289 00aa 1C43     		orrs	r4, r4, r3
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1290              		.loc 1 966 0
 1291 00ac 3B68     		ldr	r3, [r7, #0]
 1292 00ae 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1293 00b0 1846     		mov	r0, r3
 1294 00b2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1295 00b6 0346     		mov	r3, r0
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1296              		.loc 1 965 0
 1297 00b8 44EA0302 		orr	r2, r4, r3
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1298              		.loc 1 967 0
 1299 00bc 3B68     		ldr	r3, [r7, #0]
 1300 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1301 00c0 4FEA4333 		lsl	r3, r3, #13
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1302              		.loc 1 964 0
 1303 00c4 1343     		orrs	r3, r3, r2
 1304 00c6 FB60     		str	r3, [r7, #12]
 1305              	.L52:
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1306              		.loc 1 971 0
 1307 00c8 4FF42053 		mov	r3, #10240
 1308 00cc C4F20003 		movt	r3, 16384
 1309 00d0 4FF0CA02 		mov	r2, #202
 1310 00d4 5A62     		str	r2, [r3, #36]
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1311              		.loc 1 972 0
 1312 00d6 4FF42053 		mov	r3, #10240
 1313 00da C4F20003 		movt	r3, 16384
 1314 00de 4FF05302 		mov	r2, #83
 1315 00e2 5A62     		str	r2, [r3, #36]
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1316              		.loc 1 975 0
 1317 00e4 FFF7FEFF 		bl	RTC_EnterInitMode
 1318 00e8 0346     		mov	r3, r0
 1319 00ea 002B     		cmp	r3, #0
 1320 00ec 03D1     		bne	.L53
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1321              		.loc 1 977 0
 1322 00ee 4FF00003 		mov	r3, #0
 1323 00f2 FB72     		strb	r3, [r7, #11]
 1324 00f4 17E0     		b	.L54
 1325              	.L53:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1326              		.loc 1 982 0
 1327 00f6 4FF42053 		mov	r3, #10240
 1328 00fa C4F20003 		movt	r3, 16384
 1329 00fe FA68     		ldr	r2, [r7, #12]
 1330 0100 22F07F42 		bic	r2, r2, #-16777216
 1331 0104 22F0C002 		bic	r2, r2, #192
 1332 0108 5A60     		str	r2, [r3, #4]
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1333              		.loc 1 985 0
 1334 010a FFF7FEFF 		bl	RTC_ExitInitMode
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1335              		.loc 1 987 0
 1336 010e FFF7FEFF 		bl	RTC_WaitForSynchro
 1337 0112 0346     		mov	r3, r0
 1338 0114 002B     		cmp	r3, #0
 1339 0116 03D1     		bne	.L55
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1340              		.loc 1 989 0
 1341 0118 4FF00003 		mov	r3, #0
 1342 011c FB72     		strb	r3, [r7, #11]
 1343 011e 02E0     		b	.L54
 1344              	.L55:
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1345              		.loc 1 993 0
 1346 0120 4FF00103 		mov	r3, #1
 1347 0124 FB72     		strb	r3, [r7, #11]
 1348              	.L54:
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1349              		.loc 1 997 0
 1350 0126 4FF42053 		mov	r3, #10240
 1351 012a C4F20003 		movt	r3, 16384
 1352 012e 4FF0FF02 		mov	r2, #255
 1353 0132 5A62     		str	r2, [r3, #36]
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1354              		.loc 1 999 0
 1355 0134 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1356              		.loc 1 1000 0
 1357 0136 1846     		mov	r0, r3
 1358 0138 07F11407 		add	r7, r7, #20
 1359 013c BD46     		mov	sp, r7
 1360 013e 90BD     		pop	{r4, r7, pc}
 1361              		.cfi_endproc
 1362              	.LFE123:
 1364              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1365              		.align	2
 1366              		.global	RTC_DateStructInit
 1367              		.thumb
 1368              		.thumb_func
 1370              	RTC_DateStructInit:
 1371              	.LFB124:
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1372              		.loc 1 1010 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 8
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 1377 0000 80B4     		push	{r7}
 1378              	.LCFI41:
 1379              		.cfi_def_cfa_offset 4
 1380              		.cfi_offset 7, -4
 1381 0002 83B0     		sub	sp, sp, #12
 1382              	.LCFI42:
 1383              		.cfi_def_cfa_offset 16
 1384 0004 00AF     		add	r7, sp, #0
 1385              	.LCFI43:
 1386              		.cfi_def_cfa_register 7
 1387 0006 7860     		str	r0, [r7, #4]
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1388              		.loc 1 1012 0
 1389 0008 7B68     		ldr	r3, [r7, #4]
 1390 000a 4FF00102 		mov	r2, #1
 1391 000e 1A70     		strb	r2, [r3, #0]
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1392              		.loc 1 1013 0
 1393 0010 7B68     		ldr	r3, [r7, #4]
 1394 0012 4FF00102 		mov	r2, #1
 1395 0016 9A70     		strb	r2, [r3, #2]
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1396              		.loc 1 1014 0
 1397 0018 7B68     		ldr	r3, [r7, #4]
 1398 001a 4FF00102 		mov	r2, #1
 1399 001e 5A70     		strb	r2, [r3, #1]
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1400              		.loc 1 1015 0
 1401 0020 7B68     		ldr	r3, [r7, #4]
 1402 0022 4FF00002 		mov	r2, #0
 1403 0026 DA70     		strb	r2, [r3, #3]
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1404              		.loc 1 1016 0
 1405 0028 07F10C07 		add	r7, r7, #12
 1406 002c BD46     		mov	sp, r7
 1407 002e 80BC     		pop	{r7}
 1408 0030 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE124:
 1412 0032 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1413              		.align	2
 1414              		.global	RTC_GetDate
 1415              		.thumb
 1416              		.thumb_func
 1418              	RTC_GetDate:
 1419              	.LFB125:
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1420              		.loc 1 1029 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 16
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424 0000 80B5     		push	{r7, lr}
 1425              	.LCFI44:
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 14, -4
 1428              		.cfi_offset 7, -8
 1429 0002 84B0     		sub	sp, sp, #16
 1430              	.LCFI45:
 1431              		.cfi_def_cfa_offset 24
 1432 0004 00AF     		add	r7, sp, #0
 1433              	.LCFI46:
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
 1436 0008 3960     		str	r1, [r7, #0]
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1437              		.loc 1 1030 0
 1438 000a 4FF00003 		mov	r3, #0
 1439 000e FB60     		str	r3, [r7, #12]
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1440              		.loc 1 1036 0
 1441 0010 4FF42053 		mov	r3, #10240
 1442 0014 C4F20003 		movt	r3, 16384
 1443 0018 5B68     		ldr	r3, [r3, #4]
 1444 001a 23F07F43 		bic	r3, r3, #-16777216
 1445 001e 23F0C003 		bic	r3, r3, #192
 1446 0022 FB60     		str	r3, [r7, #12]
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1447              		.loc 1 1039 0
 1448 0024 FB68     		ldr	r3, [r7, #12]
 1449 0026 03F47F03 		and	r3, r3, #16711680
 1450 002a 4FEA1343 		lsr	r3, r3, #16
 1451 002e DAB2     		uxtb	r2, r3
 1452 0030 3B68     		ldr	r3, [r7, #0]
 1453 0032 DA70     		strb	r2, [r3, #3]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1454              		.loc 1 1040 0
 1455 0034 FB68     		ldr	r3, [r7, #12]
 1456 0036 03F4F853 		and	r3, r3, #7936
 1457 003a 4FEA1323 		lsr	r3, r3, #8
 1458 003e DAB2     		uxtb	r2, r3
 1459 0040 3B68     		ldr	r3, [r7, #0]
 1460 0042 5A70     		strb	r2, [r3, #1]
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1461              		.loc 1 1041 0
 1462 0044 FB68     		ldr	r3, [r7, #12]
 1463 0046 DBB2     		uxtb	r3, r3
 1464 0048 03F03F03 		and	r3, r3, #63
 1465 004c DAB2     		uxtb	r2, r3
 1466 004e 3B68     		ldr	r3, [r7, #0]
 1467 0050 9A70     		strb	r2, [r3, #2]
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);
 1468              		.loc 1 1042 0
 1469 0052 FB68     		ldr	r3, [r7, #12]
 1470 0054 03F46043 		and	r3, r3, #57344
 1471 0058 4FEA5333 		lsr	r3, r3, #13
 1472 005c DAB2     		uxtb	r2, r3
 1473 005e 3B68     		ldr	r3, [r7, #0]
 1474 0060 1A70     		strb	r2, [r3, #0]
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1475              		.loc 1 1045 0
 1476 0062 7B68     		ldr	r3, [r7, #4]
 1477 0064 002B     		cmp	r3, #0
 1478 0066 1AD1     		bne	.L57
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1479              		.loc 1 1048 0
 1480 0068 3B68     		ldr	r3, [r7, #0]
 1481 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1482 006c 1846     		mov	r0, r3
 1483 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1484 0072 0346     		mov	r3, r0
 1485 0074 1A46     		mov	r2, r3
 1486 0076 3B68     		ldr	r3, [r7, #0]
 1487 0078 DA70     		strb	r2, [r3, #3]
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1488              		.loc 1 1049 0
 1489 007a 3B68     		ldr	r3, [r7, #0]
 1490 007c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1491 007e 1846     		mov	r0, r3
 1492 0080 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1493 0084 0346     		mov	r3, r0
 1494 0086 1A46     		mov	r2, r3
 1495 0088 3B68     		ldr	r3, [r7, #0]
 1496 008a 5A70     		strb	r2, [r3, #1]
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1497              		.loc 1 1050 0
 1498 008c 3B68     		ldr	r3, [r7, #0]
 1499 008e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1500 0090 1846     		mov	r0, r3
 1501 0092 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1502 0096 0346     		mov	r3, r0
 1503 0098 1A46     		mov	r2, r3
 1504 009a 3B68     		ldr	r3, [r7, #0]
 1505 009c 9A70     		strb	r2, [r3, #2]
 1506              	.L57:
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1507              		.loc 1 1052 0
 1508 009e 07F11007 		add	r7, r7, #16
 1509 00a2 BD46     		mov	sp, r7
 1510 00a4 80BD     		pop	{r7, pc}
 1511              		.cfi_endproc
 1512              	.LFE125:
 1514 00a6 00BF     		.section	.text.RTC_SetAlarm,"ax",%progbits
 1515              		.align	2
 1516              		.global	RTC_SetAlarm
 1517              		.thumb
 1518              		.thumb_func
 1520              	RTC_SetAlarm:
 1521              	.LFB126:
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1522              		.loc 1 1089 0
 1523              		.cfi_startproc
 1524              		@ args = 0, pretend = 0, frame = 24
 1525              		@ frame_needed = 1, uses_anonymous_args = 0
 1526 0000 90B5     		push	{r4, r7, lr}
 1527              	.LCFI47:
 1528              		.cfi_def_cfa_offset 12
 1529              		.cfi_offset 14, -4
 1530              		.cfi_offset 7, -8
 1531              		.cfi_offset 4, -12
 1532 0002 87B0     		sub	sp, sp, #28
 1533              	.LCFI48:
 1534              		.cfi_def_cfa_offset 40
 1535 0004 00AF     		add	r7, sp, #0
 1536              	.LCFI49:
 1537              		.cfi_def_cfa_register 7
 1538 0006 F860     		str	r0, [r7, #12]
 1539 0008 B960     		str	r1, [r7, #8]
 1540 000a 7A60     		str	r2, [r7, #4]
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1541              		.loc 1 1090 0
 1542 000c 4FF00003 		mov	r3, #0
 1543 0010 7B61     		str	r3, [r7, #20]
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1544              		.loc 1 1098 0
 1545 0012 FB68     		ldr	r3, [r7, #12]
 1546 0014 002B     		cmp	r3, #0
 1547 0016 0DD1     		bne	.L60
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1548              		.loc 1 1100 0
 1549 0018 4FF42053 		mov	r3, #10240
 1550 001c C4F20003 		movt	r3, 16384
 1551 0020 9B68     		ldr	r3, [r3, #8]
 1552 0022 03F04003 		and	r3, r3, #64
 1553 0026 002B     		cmp	r3, #0
 1554 0028 2CD1     		bne	.L62
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1555              		.loc 1 1107 0
 1556 002a 7B68     		ldr	r3, [r7, #4]
 1557 002c 4FF00002 		mov	r2, #0
 1558 0030 DA70     		strb	r2, [r3, #3]
 1559 0032 27E0     		b	.L62
 1560              	.L60:
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1561              		.loc 1 1124 0
 1562 0034 4FF42053 		mov	r3, #10240
 1563 0038 C4F20003 		movt	r3, 16384
 1564 003c 9B68     		ldr	r3, [r3, #8]
 1565 003e 03F04003 		and	r3, r3, #64
 1566 0042 002B     		cmp	r3, #0
 1567 0044 07D0     		beq	.L63
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1568              		.loc 1 1126 0
 1569 0046 7B68     		ldr	r3, [r7, #4]
 1570 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1571 004a 1846     		mov	r0, r3
 1572 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1573 0050 0346     		mov	r3, r0
 1574 0052 7B61     		str	r3, [r7, #20]
 1575 0054 03E0     		b	.L64
 1576              	.L63:
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1577              		.loc 1 1132 0
 1578 0056 7B68     		ldr	r3, [r7, #4]
 1579 0058 4FF00002 		mov	r2, #0
 1580 005c DA70     		strb	r2, [r3, #3]
 1581              	.L64:
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1582              		.loc 1 1139 0
 1583 005e 7B68     		ldr	r3, [r7, #4]
 1584 0060 9B68     		ldr	r3, [r3, #8]
 1585 0062 002B     		cmp	r3, #0
 1586 0064 07D1     		bne	.L65
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1587              		.loc 1 1141 0
 1588 0066 7B68     		ldr	r3, [r7, #4]
 1589 0068 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1590 006a 1846     		mov	r0, r3
 1591 006c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1592 0070 0346     		mov	r3, r0
 1593 0072 7B61     		str	r3, [r7, #20]
 1594 0074 06E0     		b	.L62
 1595              	.L65:
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1596              		.loc 1 1146 0
 1597 0076 7B68     		ldr	r3, [r7, #4]
 1598 0078 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1599 007a 1846     		mov	r0, r3
 1600 007c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1601 0080 0346     		mov	r3, r0
 1602 0082 7B61     		str	r3, [r7, #20]
 1603              	.L62:
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1604              		.loc 1 1152 0
 1605 0084 FB68     		ldr	r3, [r7, #12]
 1606 0086 002B     		cmp	r3, #0
 1607 0088 1DD0     		beq	.L66
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1608              		.loc 1 1154 0
 1609 008a 7B68     		ldr	r3, [r7, #4]
 1610 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1611 008e 4FEA0342 		lsl	r2, r3, #16
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1612              		.loc 1 1155 0
 1613 0092 7B68     		ldr	r3, [r7, #4]
 1614 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1615 0096 4FEA0323 		lsl	r3, r3, #8
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1616              		.loc 1 1154 0
 1617 009a 1A43     		orrs	r2, r2, r3
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1618              		.loc 1 1156 0
 1619 009c 7B68     		ldr	r3, [r7, #4]
 1620 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1621              		.loc 1 1155 0
 1622 00a0 1A43     		orrs	r2, r2, r3
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1623              		.loc 1 1157 0
 1624 00a2 7B68     		ldr	r3, [r7, #4]
 1625 00a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1626 00a6 4FEA0343 		lsl	r3, r3, #16
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1627              		.loc 1 1156 0
 1628 00aa 1A43     		orrs	r2, r2, r3
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1629              		.loc 1 1158 0
 1630 00ac 7B68     		ldr	r3, [r7, #4]
 1631 00ae 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1632 00b0 4FEA0363 		lsl	r3, r3, #24
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1633              		.loc 1 1157 0
 1634 00b4 1A43     		orrs	r2, r2, r3
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1635              		.loc 1 1159 0
 1636 00b6 7B68     		ldr	r3, [r7, #4]
 1637 00b8 9B68     		ldr	r3, [r3, #8]
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1638              		.loc 1 1158 0
 1639 00ba 1A43     		orrs	r2, r2, r3
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1640              		.loc 1 1160 0
 1641 00bc 7B68     		ldr	r3, [r7, #4]
 1642 00be 5B68     		ldr	r3, [r3, #4]
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1643              		.loc 1 1154 0
 1644 00c0 1343     		orrs	r3, r3, r2
 1645 00c2 7B61     		str	r3, [r7, #20]
 1646 00c4 2FE0     		b	.L67
 1647              	.L66:
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1648              		.loc 1 1164 0
 1649 00c6 7B68     		ldr	r3, [r7, #4]
 1650 00c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1651 00ca 1846     		mov	r0, r3
 1652 00cc FFF7FEFF 		bl	RTC_ByteToBcd2
 1653 00d0 0346     		mov	r3, r0
 1654 00d2 4FEA0344 		lsl	r4, r3, #16
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1655              		.loc 1 1165 0
 1656 00d6 7B68     		ldr	r3, [r7, #4]
 1657 00d8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1658 00da 1846     		mov	r0, r3
 1659 00dc FFF7FEFF 		bl	RTC_ByteToBcd2
 1660 00e0 0346     		mov	r3, r0
 1661 00e2 4FEA0323 		lsl	r3, r3, #8
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1662              		.loc 1 1164 0
 1663 00e6 1C43     		orrs	r4, r4, r3
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1664              		.loc 1 1166 0
 1665 00e8 7B68     		ldr	r3, [r7, #4]
 1666 00ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1667 00ec 1846     		mov	r0, r3
 1668 00ee FFF7FEFF 		bl	RTC_ByteToBcd2
 1669 00f2 0346     		mov	r3, r0
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1670              		.loc 1 1165 0
 1671 00f4 44EA0302 		orr	r2, r4, r3
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1672              		.loc 1 1167 0
 1673 00f8 7B68     		ldr	r3, [r7, #4]
 1674 00fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1675 00fc 4FEA0343 		lsl	r3, r3, #16
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1676              		.loc 1 1166 0
 1677 0100 42EA0304 		orr	r4, r2, r3
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1678              		.loc 1 1168 0
 1679 0104 7B68     		ldr	r3, [r7, #4]
 1680 0106 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1681 0108 1846     		mov	r0, r3
 1682 010a FFF7FEFF 		bl	RTC_ByteToBcd2
 1683 010e 0346     		mov	r3, r0
 1684 0110 4FEA0363 		lsl	r3, r3, #24
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1685              		.loc 1 1167 0
 1686 0114 44EA0302 		orr	r2, r4, r3
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1687              		.loc 1 1169 0
 1688 0118 7B68     		ldr	r3, [r7, #4]
 1689 011a 9B68     		ldr	r3, [r3, #8]
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1690              		.loc 1 1168 0
 1691 011c 1A43     		orrs	r2, r2, r3
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1692              		.loc 1 1170 0
 1693 011e 7B68     		ldr	r3, [r7, #4]
 1694 0120 5B68     		ldr	r3, [r3, #4]
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1695              		.loc 1 1164 0
 1696 0122 1343     		orrs	r3, r3, r2
 1697 0124 7B61     		str	r3, [r7, #20]
 1698              	.L67:
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1699              		.loc 1 1174 0
 1700 0126 4FF42053 		mov	r3, #10240
 1701 012a C4F20003 		movt	r3, 16384
 1702 012e 4FF0CA02 		mov	r2, #202
 1703 0132 5A62     		str	r2, [r3, #36]
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1704              		.loc 1 1175 0
 1705 0134 4FF42053 		mov	r3, #10240
 1706 0138 C4F20003 		movt	r3, 16384
 1707 013c 4FF05302 		mov	r2, #83
 1708 0140 5A62     		str	r2, [r3, #36]
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1709              		.loc 1 1178 0
 1710 0142 BB68     		ldr	r3, [r7, #8]
 1711 0144 B3F5807F 		cmp	r3, #256
 1712 0148 06D1     		bne	.L68
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1713              		.loc 1 1180 0
 1714 014a 4FF42053 		mov	r3, #10240
 1715 014e C4F20003 		movt	r3, 16384
 1716 0152 7A69     		ldr	r2, [r7, #20]
 1717 0154 DA61     		str	r2, [r3, #28]
 1718 0156 05E0     		b	.L69
 1719              	.L68:
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1720              		.loc 1 1184 0
 1721 0158 4FF42053 		mov	r3, #10240
 1722 015c C4F20003 		movt	r3, 16384
 1723 0160 7A69     		ldr	r2, [r7, #20]
 1724 0162 1A62     		str	r2, [r3, #32]
 1725              	.L69:
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1726              		.loc 1 1188 0
 1727 0164 4FF42053 		mov	r3, #10240
 1728 0168 C4F20003 		movt	r3, 16384
 1729 016c 4FF0FF02 		mov	r2, #255
 1730 0170 5A62     		str	r2, [r3, #36]
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1731              		.loc 1 1189 0
 1732 0172 07F11C07 		add	r7, r7, #28
 1733 0176 BD46     		mov	sp, r7
 1734 0178 90BD     		pop	{r4, r7, pc}
 1735              		.cfi_endproc
 1736              	.LFE126:
 1738 017a 00BF     		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1739              		.align	2
 1740              		.global	RTC_AlarmStructInit
 1741              		.thumb
 1742              		.thumb_func
 1744              	RTC_AlarmStructInit:
 1745              	.LFB127:
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1746              		.loc 1 1200 0
 1747              		.cfi_startproc
 1748              		@ args = 0, pretend = 0, frame = 8
 1749              		@ frame_needed = 1, uses_anonymous_args = 0
 1750              		@ link register save eliminated.
 1751 0000 80B4     		push	{r7}
 1752              	.LCFI50:
 1753              		.cfi_def_cfa_offset 4
 1754              		.cfi_offset 7, -4
 1755 0002 83B0     		sub	sp, sp, #12
 1756              	.LCFI51:
 1757              		.cfi_def_cfa_offset 16
 1758 0004 00AF     		add	r7, sp, #0
 1759              	.LCFI52:
 1760              		.cfi_def_cfa_register 7
 1761 0006 7860     		str	r0, [r7, #4]
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1762              		.loc 1 1202 0
 1763 0008 7B68     		ldr	r3, [r7, #4]
 1764 000a 4FF00002 		mov	r2, #0
 1765 000e DA70     		strb	r2, [r3, #3]
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1766              		.loc 1 1203 0
 1767 0010 7B68     		ldr	r3, [r7, #4]
 1768 0012 4FF00002 		mov	r2, #0
 1769 0016 1A70     		strb	r2, [r3, #0]
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1770              		.loc 1 1204 0
 1771 0018 7B68     		ldr	r3, [r7, #4]
 1772 001a 4FF00002 		mov	r2, #0
 1773 001e 5A70     		strb	r2, [r3, #1]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1774              		.loc 1 1205 0
 1775 0020 7B68     		ldr	r3, [r7, #4]
 1776 0022 4FF00002 		mov	r2, #0
 1777 0026 9A70     		strb	r2, [r3, #2]
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1778              		.loc 1 1208 0
 1779 0028 7B68     		ldr	r3, [r7, #4]
 1780 002a 4FF00002 		mov	r2, #0
 1781 002e 9A60     		str	r2, [r3, #8]
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1782              		.loc 1 1209 0
 1783 0030 7B68     		ldr	r3, [r7, #4]
 1784 0032 4FF00102 		mov	r2, #1
 1785 0036 1A73     		strb	r2, [r3, #12]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1786              		.loc 1 1212 0
 1787 0038 7B68     		ldr	r3, [r7, #4]
 1788 003a 4FF00002 		mov	r2, #0
 1789 003e 5A60     		str	r2, [r3, #4]
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1790              		.loc 1 1213 0
 1791 0040 07F10C07 		add	r7, r7, #12
 1792 0044 BD46     		mov	sp, r7
 1793 0046 80BC     		pop	{r7}
 1794 0048 7047     		bx	lr
 1795              		.cfi_endproc
 1796              	.LFE127:
 1798 004a 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 1799              		.align	2
 1800              		.global	RTC_GetAlarm
 1801              		.thumb
 1802              		.thumb_func
 1804              	RTC_GetAlarm:
 1805              	.LFB128:
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1806              		.loc 1 1230 0
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 24
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810 0000 80B5     		push	{r7, lr}
 1811              	.LCFI53:
 1812              		.cfi_def_cfa_offset 8
 1813              		.cfi_offset 14, -4
 1814              		.cfi_offset 7, -8
 1815 0002 86B0     		sub	sp, sp, #24
 1816              	.LCFI54:
 1817              		.cfi_def_cfa_offset 32
 1818 0004 00AF     		add	r7, sp, #0
 1819              	.LCFI55:
 1820              		.cfi_def_cfa_register 7
 1821 0006 F860     		str	r0, [r7, #12]
 1822 0008 B960     		str	r1, [r7, #8]
 1823 000a 7A60     		str	r2, [r7, #4]
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1824              		.loc 1 1231 0
 1825 000c 4FF00003 		mov	r3, #0
 1826 0010 7B61     		str	r3, [r7, #20]
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1827              		.loc 1 1238 0
 1828 0012 BB68     		ldr	r3, [r7, #8]
 1829 0014 B3F5807F 		cmp	r3, #256
 1830 0018 06D1     		bne	.L72
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1831              		.loc 1 1240 0
 1832 001a 4FF42053 		mov	r3, #10240
 1833 001e C4F20003 		movt	r3, 16384
 1834 0022 DB69     		ldr	r3, [r3, #28]
 1835 0024 7B61     		str	r3, [r7, #20]
 1836 0026 05E0     		b	.L73
 1837              	.L72:
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1838              		.loc 1 1244 0
 1839 0028 4FF42053 		mov	r3, #10240
 1840 002c C4F20003 		movt	r3, 16384
 1841 0030 1B6A     		ldr	r3, [r3, #32]
 1842 0032 7B61     		str	r3, [r7, #20]
 1843              	.L73:
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1844              		.loc 1 1248 0
 1845 0034 7B69     		ldr	r3, [r7, #20]
 1846 0036 03F47C13 		and	r3, r3, #4128768
 1847 003a 4FEA1343 		lsr	r3, r3, #16
 1848 003e DAB2     		uxtb	r2, r3
 1849 0040 7B68     		ldr	r3, [r7, #4]
 1850 0042 1A70     		strb	r2, [r3, #0]
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1851              		.loc 1 1250 0
 1852 0044 7B69     		ldr	r3, [r7, #20]
 1853 0046 03F4FE43 		and	r3, r3, #32512
 1854 004a 4FEA1323 		lsr	r3, r3, #8
 1855 004e DAB2     		uxtb	r2, r3
 1856 0050 7B68     		ldr	r3, [r7, #4]
 1857 0052 5A70     		strb	r2, [r3, #1]
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1858              		.loc 1 1252 0
 1859 0054 7B69     		ldr	r3, [r7, #20]
 1860 0056 DBB2     		uxtb	r3, r3
 1861 0058 03F07F03 		and	r3, r3, #127
 1862 005c DAB2     		uxtb	r2, r3
 1863 005e 7B68     		ldr	r3, [r7, #4]
 1864 0060 9A70     		strb	r2, [r3, #2]
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1865              		.loc 1 1254 0
 1866 0062 7B69     		ldr	r3, [r7, #20]
 1867 0064 03F48003 		and	r3, r3, #4194304
 1868 0068 4FEA1343 		lsr	r3, r3, #16
 1869 006c DAB2     		uxtb	r2, r3
 1870 006e 7B68     		ldr	r3, [r7, #4]
 1871 0070 DA70     		strb	r2, [r3, #3]
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1872              		.loc 1 1255 0
 1873 0072 7B69     		ldr	r3, [r7, #20]
 1874 0074 03F07C53 		and	r3, r3, #1056964608
 1875 0078 4FEA1363 		lsr	r3, r3, #24
 1876 007c DAB2     		uxtb	r2, r3
 1877 007e 7B68     		ldr	r3, [r7, #4]
 1878 0080 1A73     		strb	r2, [r3, #12]
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1879              		.loc 1 1256 0
 1880 0082 7B69     		ldr	r3, [r7, #20]
 1881 0084 03F08042 		and	r2, r3, #1073741824
 1882 0088 7B68     		ldr	r3, [r7, #4]
 1883 008a 9A60     		str	r2, [r3, #8]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1884              		.loc 1 1257 0
 1885 008c 7B69     		ldr	r3, [r7, #20]
 1886 008e 03F08032 		and	r2, r3, #-2139062144
 1887 0092 7B68     		ldr	r3, [r7, #4]
 1888 0094 5A60     		str	r2, [r3, #4]
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1889              		.loc 1 1259 0
 1890 0096 FB68     		ldr	r3, [r7, #12]
 1891 0098 002B     		cmp	r3, #0
 1892 009a 23D1     		bne	.L71
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1893              		.loc 1 1261 0
 1894 009c 7B68     		ldr	r3, [r7, #4]
 1895 009e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1896 00a0 1846     		mov	r0, r3
 1897 00a2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1898 00a6 0346     		mov	r3, r0
 1899 00a8 1A46     		mov	r2, r3
 1900 00aa 7B68     		ldr	r3, [r7, #4]
 1901 00ac 1A70     		strb	r2, [r3, #0]
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1902              		.loc 1 1263 0
 1903 00ae 7B68     		ldr	r3, [r7, #4]
 1904 00b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1905 00b2 1846     		mov	r0, r3
 1906 00b4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1907 00b8 0346     		mov	r3, r0
 1908 00ba 1A46     		mov	r2, r3
 1909 00bc 7B68     		ldr	r3, [r7, #4]
 1910 00be 5A70     		strb	r2, [r3, #1]
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1911              		.loc 1 1265 0
 1912 00c0 7B68     		ldr	r3, [r7, #4]
 1913 00c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1914 00c4 1846     		mov	r0, r3
 1915 00c6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1916 00ca 0346     		mov	r3, r0
 1917 00cc 1A46     		mov	r2, r3
 1918 00ce 7B68     		ldr	r3, [r7, #4]
 1919 00d0 9A70     		strb	r2, [r3, #2]
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1920              		.loc 1 1267 0
 1921 00d2 7B68     		ldr	r3, [r7, #4]
 1922 00d4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1923 00d6 1846     		mov	r0, r3
 1924 00d8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1925 00dc 0346     		mov	r3, r0
 1926 00de 1A46     		mov	r2, r3
 1927 00e0 7B68     		ldr	r3, [r7, #4]
 1928 00e2 1A73     		strb	r2, [r3, #12]
 1929              	.L71:
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1930              		.loc 1 1269 0
 1931 00e4 07F11807 		add	r7, r7, #24
 1932 00e8 BD46     		mov	sp, r7
 1933 00ea 80BD     		pop	{r7, pc}
 1934              		.cfi_endproc
 1935              	.LFE128:
 1937              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1938              		.align	2
 1939              		.global	RTC_AlarmCmd
 1940              		.thumb
 1941              		.thumb_func
 1943              	RTC_AlarmCmd:
 1944              	.LFB129:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1945              		.loc 1 1284 0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 24
 1948              		@ frame_needed = 1, uses_anonymous_args = 0
 1949              		@ link register save eliminated.
 1950 0000 80B4     		push	{r7}
 1951              	.LCFI56:
 1952              		.cfi_def_cfa_offset 4
 1953              		.cfi_offset 7, -4
 1954 0002 87B0     		sub	sp, sp, #28
 1955              	.LCFI57:
 1956              		.cfi_def_cfa_offset 32
 1957 0004 00AF     		add	r7, sp, #0
 1958              	.LCFI58:
 1959              		.cfi_def_cfa_register 7
 1960 0006 7860     		str	r0, [r7, #4]
 1961 0008 0B46     		mov	r3, r1
 1962 000a FB70     		strb	r3, [r7, #3]
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1963              		.loc 1 1285 0
 1964 000c 4FF00003 		mov	r3, #0
 1965 0010 FB60     		str	r3, [r7, #12]
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1966              		.loc 1 1286 0
 1967 0012 4FF00003 		mov	r3, #0
 1968 0016 3B61     		str	r3, [r7, #16]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1969              		.loc 1 1287 0
 1970 0018 4FF00003 		mov	r3, #0
 1971 001c FB75     		strb	r3, [r7, #23]
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1972              		.loc 1 1294 0
 1973 001e 4FF42053 		mov	r3, #10240
 1974 0022 C4F20003 		movt	r3, 16384
 1975 0026 4FF0CA02 		mov	r2, #202
 1976 002a 5A62     		str	r2, [r3, #36]
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1977              		.loc 1 1295 0
 1978 002c 4FF42053 		mov	r3, #10240
 1979 0030 C4F20003 		movt	r3, 16384
 1980 0034 4FF05302 		mov	r2, #83
 1981 0038 5A62     		str	r2, [r3, #36]
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1982              		.loc 1 1298 0
 1983 003a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1984 003c 002B     		cmp	r3, #0
 1985 003e 0FD0     		beq	.L76
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1986              		.loc 1 1300 0
 1987 0040 4FF42053 		mov	r3, #10240
 1988 0044 C4F20003 		movt	r3, 16384
 1989 0048 4FF42052 		mov	r2, #10240
 1990 004c C4F20002 		movt	r2, 16384
 1991 0050 9168     		ldr	r1, [r2, #8]
 1992 0052 7A68     		ldr	r2, [r7, #4]
 1993 0054 0A43     		orrs	r2, r2, r1
 1994 0056 9A60     		str	r2, [r3, #8]
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 1995              		.loc 1 1302 0
 1996 0058 4FF00103 		mov	r3, #1
 1997 005c FB75     		strb	r3, [r7, #23]
 1998 005e 34E0     		b	.L77
 1999              	.L76:
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2000              		.loc 1 1307 0
 2001 0060 4FF42053 		mov	r3, #10240
 2002 0064 C4F20003 		movt	r3, 16384
 2003 0068 4FF42052 		mov	r2, #10240
 2004 006c C4F20002 		movt	r2, 16384
 2005 0070 9168     		ldr	r1, [r2, #8]
 2006 0072 7A68     		ldr	r2, [r7, #4]
 2007 0074 6FEA0202 		mvn	r2, r2
 2008 0078 0A40     		ands	r2, r2, r1
 2009 007a 9A60     		str	r2, [r3, #8]
 2010              	.L79:
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2011              		.loc 1 1312 0 discriminator 1
 2012 007c 4FF42053 		mov	r3, #10240
 2013 0080 C4F20003 		movt	r3, 16384
 2014 0084 DA68     		ldr	r2, [r3, #12]
 2015 0086 7B68     		ldr	r3, [r7, #4]
 2016 0088 4FEA1323 		lsr	r3, r3, #8
 2017 008c 1340     		ands	r3, r3, r2
 2018 008e 3B61     		str	r3, [r7, #16]
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2019              		.loc 1 1313 0 discriminator 1
 2020 0090 FB68     		ldr	r3, [r7, #12]
 2021 0092 03F10103 		add	r3, r3, #1
 2022 0096 FB60     		str	r3, [r7, #12]
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2023              		.loc 1 1314 0 discriminator 1
 2024 0098 FB68     		ldr	r3, [r7, #12]
 2025 009a B3F5803F 		cmp	r3, #65536
 2026 009e 02D0     		beq	.L78
 2027 00a0 3B69     		ldr	r3, [r7, #16]
 2028 00a2 002B     		cmp	r3, #0
 2029 00a4 EAD0     		beq	.L79
 2030              	.L78:
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2031              		.loc 1 1316 0
 2032 00a6 4FF42053 		mov	r3, #10240
 2033 00aa C4F20003 		movt	r3, 16384
 2034 00ae DA68     		ldr	r2, [r3, #12]
 2035 00b0 7B68     		ldr	r3, [r7, #4]
 2036 00b2 4FEA1323 		lsr	r3, r3, #8
 2037 00b6 1340     		ands	r3, r3, r2
 2038 00b8 002B     		cmp	r3, #0
 2039 00ba 03D1     		bne	.L80
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2040              		.loc 1 1318 0
 2041 00bc 4FF00003 		mov	r3, #0
 2042 00c0 FB75     		strb	r3, [r7, #23]
 2043 00c2 02E0     		b	.L77
 2044              	.L80:
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2045              		.loc 1 1322 0
 2046 00c4 4FF00103 		mov	r3, #1
 2047 00c8 FB75     		strb	r3, [r7, #23]
 2048              	.L77:
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2049              		.loc 1 1327 0
 2050 00ca 4FF42053 		mov	r3, #10240
 2051 00ce C4F20003 		movt	r3, 16384
 2052 00d2 4FF0FF02 		mov	r2, #255
 2053 00d6 5A62     		str	r2, [r3, #36]
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2054              		.loc 1 1329 0
 2055 00d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2056              		.loc 1 1330 0
 2057 00da 1846     		mov	r0, r3
 2058 00dc 07F11C07 		add	r7, r7, #28
 2059 00e0 BD46     		mov	sp, r7
 2060 00e2 80BC     		pop	{r7}
 2061 00e4 7047     		bx	lr
 2062              		.cfi_endproc
 2063              	.LFE129:
 2065 00e6 00BF     		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2066              		.align	2
 2067              		.global	RTC_AlarmSubSecondConfig
 2068              		.thumb
 2069              		.thumb_func
 2071              	RTC_AlarmSubSecondConfig:
 2072              	.LFB130:
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2073              		.loc 1 1378 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 24
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077              		@ link register save eliminated.
 2078 0000 80B4     		push	{r7}
 2079              	.LCFI59:
 2080              		.cfi_def_cfa_offset 4
 2081              		.cfi_offset 7, -4
 2082 0002 87B0     		sub	sp, sp, #28
 2083              	.LCFI60:
 2084              		.cfi_def_cfa_offset 32
 2085 0004 00AF     		add	r7, sp, #0
 2086              	.LCFI61:
 2087              		.cfi_def_cfa_register 7
 2088 0006 F860     		str	r0, [r7, #12]
 2089 0008 B960     		str	r1, [r7, #8]
 2090 000a 7A60     		str	r2, [r7, #4]
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2091              		.loc 1 1379 0
 2092 000c 4FF00003 		mov	r3, #0
 2093 0010 7B61     		str	r3, [r7, #20]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2094              		.loc 1 1387 0
 2095 0012 4FF42053 		mov	r3, #10240
 2096 0016 C4F20003 		movt	r3, 16384
 2097 001a 4FF0CA02 		mov	r2, #202
 2098 001e 5A62     		str	r2, [r3, #36]
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2099              		.loc 1 1388 0
 2100 0020 4FF42053 		mov	r3, #10240
 2101 0024 C4F20003 		movt	r3, 16384
 2102 0028 4FF05302 		mov	r2, #83
 2103 002c 5A62     		str	r2, [r3, #36]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2104              		.loc 1 1391 0
 2105 002e BA68     		ldr	r2, [r7, #8]
 2106 0030 7B68     		ldr	r3, [r7, #4]
 2107 0032 1343     		orrs	r3, r3, r2
 2108 0034 7B61     		str	r3, [r7, #20]
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2109              		.loc 1 1393 0
 2110 0036 FB68     		ldr	r3, [r7, #12]
 2111 0038 B3F5807F 		cmp	r3, #256
 2112 003c 06D1     		bne	.L82
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2113              		.loc 1 1396 0
 2114 003e 4FF42053 		mov	r3, #10240
 2115 0042 C4F20003 		movt	r3, 16384
 2116 0046 7A69     		ldr	r2, [r7, #20]
 2117 0048 5A64     		str	r2, [r3, #68]
 2118 004a 05E0     		b	.L83
 2119              	.L82:
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2120              		.loc 1 1401 0
 2121 004c 4FF42053 		mov	r3, #10240
 2122 0050 C4F20003 		movt	r3, 16384
 2123 0054 7A69     		ldr	r2, [r7, #20]
 2124 0056 9A64     		str	r2, [r3, #72]
 2125              	.L83:
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2126              		.loc 1 1405 0
 2127 0058 4FF42053 		mov	r3, #10240
 2128 005c C4F20003 		movt	r3, 16384
 2129 0060 4FF0FF02 		mov	r2, #255
 2130 0064 5A62     		str	r2, [r3, #36]
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2131              		.loc 1 1407 0
 2132 0066 07F11C07 		add	r7, r7, #28
 2133 006a BD46     		mov	sp, r7
 2134 006c 80BC     		pop	{r7}
 2135 006e 7047     		bx	lr
 2136              		.cfi_endproc
 2137              	.LFE130:
 2139              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2140              		.align	2
 2141              		.global	RTC_GetAlarmSubSecond
 2142              		.thumb
 2143              		.thumb_func
 2145              	RTC_GetAlarmSubSecond:
 2146              	.LFB131:
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2147              		.loc 1 1419 0
 2148              		.cfi_startproc
 2149              		@ args = 0, pretend = 0, frame = 16
 2150              		@ frame_needed = 1, uses_anonymous_args = 0
 2151              		@ link register save eliminated.
 2152 0000 80B4     		push	{r7}
 2153              	.LCFI62:
 2154              		.cfi_def_cfa_offset 4
 2155              		.cfi_offset 7, -4
 2156 0002 85B0     		sub	sp, sp, #20
 2157              	.LCFI63:
 2158              		.cfi_def_cfa_offset 24
 2159 0004 00AF     		add	r7, sp, #0
 2160              	.LCFI64:
 2161              		.cfi_def_cfa_register 7
 2162 0006 7860     		str	r0, [r7, #4]
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2163              		.loc 1 1420 0
 2164 0008 4FF00003 		mov	r3, #0
 2165 000c FB60     		str	r3, [r7, #12]
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2166              		.loc 1 1423 0
 2167 000e 7B68     		ldr	r3, [r7, #4]
 2168 0010 B3F5807F 		cmp	r3, #256
 2169 0014 0AD1     		bne	.L85
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2170              		.loc 1 1425 0
 2171 0016 4FF42053 		mov	r3, #10240
 2172 001a C4F20003 		movt	r3, 16384
 2173 001e 5B6C     		ldr	r3, [r3, #68]
 2174 0020 4FEA4343 		lsl	r3, r3, #17
 2175 0024 4FEA5343 		lsr	r3, r3, #17
 2176 0028 FB60     		str	r3, [r7, #12]
 2177 002a 09E0     		b	.L86
 2178              	.L85:
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2179              		.loc 1 1429 0
 2180 002c 4FF42053 		mov	r3, #10240
 2181 0030 C4F20003 		movt	r3, 16384
 2182 0034 9B6C     		ldr	r3, [r3, #72]
 2183 0036 4FEA4343 		lsl	r3, r3, #17
 2184 003a 4FEA5343 		lsr	r3, r3, #17
 2185 003e FB60     		str	r3, [r7, #12]
 2186              	.L86:
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2187              		.loc 1 1432 0
 2188 0040 FB68     		ldr	r3, [r7, #12]
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2189              		.loc 1 1433 0
 2190 0042 1846     		mov	r0, r3
 2191 0044 07F11407 		add	r7, r7, #20
 2192 0048 BD46     		mov	sp, r7
 2193 004a 80BC     		pop	{r7}
 2194 004c 7047     		bx	lr
 2195              		.cfi_endproc
 2196              	.LFE131:
 2198 004e 00BF     		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2199              		.align	2
 2200              		.global	RTC_WakeUpClockConfig
 2201              		.thumb
 2202              		.thumb_func
 2204              	RTC_WakeUpClockConfig:
 2205              	.LFB132:
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2206              		.loc 1 1468 0
 2207              		.cfi_startproc
 2208              		@ args = 0, pretend = 0, frame = 8
 2209              		@ frame_needed = 1, uses_anonymous_args = 0
 2210              		@ link register save eliminated.
 2211 0000 80B4     		push	{r7}
 2212              	.LCFI65:
 2213              		.cfi_def_cfa_offset 4
 2214              		.cfi_offset 7, -4
 2215 0002 83B0     		sub	sp, sp, #12
 2216              	.LCFI66:
 2217              		.cfi_def_cfa_offset 16
 2218 0004 00AF     		add	r7, sp, #0
 2219              	.LCFI67:
 2220              		.cfi_def_cfa_register 7
 2221 0006 7860     		str	r0, [r7, #4]
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2222              		.loc 1 1473 0
 2223 0008 4FF42053 		mov	r3, #10240
 2224 000c C4F20003 		movt	r3, 16384
 2225 0010 4FF0CA02 		mov	r2, #202
 2226 0014 5A62     		str	r2, [r3, #36]
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2227              		.loc 1 1474 0
 2228 0016 4FF42053 		mov	r3, #10240
 2229 001a C4F20003 		movt	r3, 16384
 2230 001e 4FF05302 		mov	r2, #83
 2231 0022 5A62     		str	r2, [r3, #36]
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2232              		.loc 1 1477 0
 2233 0024 4FF42053 		mov	r3, #10240
 2234 0028 C4F20003 		movt	r3, 16384
 2235 002c 4FF42052 		mov	r2, #10240
 2236 0030 C4F20002 		movt	r2, 16384
 2237 0034 9268     		ldr	r2, [r2, #8]
 2238 0036 22F00702 		bic	r2, r2, #7
 2239 003a 9A60     		str	r2, [r3, #8]
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2240              		.loc 1 1480 0
 2241 003c 4FF42053 		mov	r3, #10240
 2242 0040 C4F20003 		movt	r3, 16384
 2243 0044 4FF42052 		mov	r2, #10240
 2244 0048 C4F20002 		movt	r2, 16384
 2245 004c 9168     		ldr	r1, [r2, #8]
 2246 004e 7A68     		ldr	r2, [r7, #4]
 2247 0050 0A43     		orrs	r2, r2, r1
 2248 0052 9A60     		str	r2, [r3, #8]
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2249              		.loc 1 1483 0
 2250 0054 4FF42053 		mov	r3, #10240
 2251 0058 C4F20003 		movt	r3, 16384
 2252 005c 4FF0FF02 		mov	r2, #255
 2253 0060 5A62     		str	r2, [r3, #36]
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2254              		.loc 1 1484 0
 2255 0062 07F10C07 		add	r7, r7, #12
 2256 0066 BD46     		mov	sp, r7
 2257 0068 80BC     		pop	{r7}
 2258 006a 7047     		bx	lr
 2259              		.cfi_endproc
 2260              	.LFE132:
 2262              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2263              		.align	2
 2264              		.global	RTC_SetWakeUpCounter
 2265              		.thumb
 2266              		.thumb_func
 2268              	RTC_SetWakeUpCounter:
 2269              	.LFB133:
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2270              		.loc 1 1495 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 8
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274              		@ link register save eliminated.
 2275 0000 80B4     		push	{r7}
 2276              	.LCFI68:
 2277              		.cfi_def_cfa_offset 4
 2278              		.cfi_offset 7, -4
 2279 0002 83B0     		sub	sp, sp, #12
 2280              	.LCFI69:
 2281              		.cfi_def_cfa_offset 16
 2282 0004 00AF     		add	r7, sp, #0
 2283              	.LCFI70:
 2284              		.cfi_def_cfa_register 7
 2285 0006 7860     		str	r0, [r7, #4]
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2286              		.loc 1 1500 0
 2287 0008 4FF42053 		mov	r3, #10240
 2288 000c C4F20003 		movt	r3, 16384
 2289 0010 4FF0CA02 		mov	r2, #202
 2290 0014 5A62     		str	r2, [r3, #36]
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2291              		.loc 1 1501 0
 2292 0016 4FF42053 		mov	r3, #10240
 2293 001a C4F20003 		movt	r3, 16384
 2294 001e 4FF05302 		mov	r2, #83
 2295 0022 5A62     		str	r2, [r3, #36]
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2296              		.loc 1 1504 0
 2297 0024 4FF42053 		mov	r3, #10240
 2298 0028 C4F20003 		movt	r3, 16384
 2299 002c 7A68     		ldr	r2, [r7, #4]
 2300 002e 5A61     		str	r2, [r3, #20]
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2301              		.loc 1 1507 0
 2302 0030 4FF42053 		mov	r3, #10240
 2303 0034 C4F20003 		movt	r3, 16384
 2304 0038 4FF0FF02 		mov	r2, #255
 2305 003c 5A62     		str	r2, [r3, #36]
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2306              		.loc 1 1508 0
 2307 003e 07F10C07 		add	r7, r7, #12
 2308 0042 BD46     		mov	sp, r7
 2309 0044 80BC     		pop	{r7}
 2310 0046 7047     		bx	lr
 2311              		.cfi_endproc
 2312              	.LFE133:
 2314              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2315              		.align	2
 2316              		.global	RTC_GetWakeUpCounter
 2317              		.thumb
 2318              		.thumb_func
 2320              	RTC_GetWakeUpCounter:
 2321              	.LFB134:
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2322              		.loc 1 1516 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 0
 2325              		@ frame_needed = 1, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
 2327 0000 80B4     		push	{r7}
 2328              	.LCFI71:
 2329              		.cfi_def_cfa_offset 4
 2330              		.cfi_offset 7, -4
 2331 0002 00AF     		add	r7, sp, #0
 2332              	.LCFI72:
 2333              		.cfi_def_cfa_register 7
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2334              		.loc 1 1518 0
 2335 0004 4FF42053 		mov	r3, #10240
 2336 0008 C4F20003 		movt	r3, 16384
 2337 000c 5B69     		ldr	r3, [r3, #20]
 2338 000e 4FEA0343 		lsl	r3, r3, #16
 2339 0012 4FEA1343 		lsr	r3, r3, #16
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2340              		.loc 1 1519 0
 2341 0016 1846     		mov	r0, r3
 2342 0018 BD46     		mov	sp, r7
 2343 001a 80BC     		pop	{r7}
 2344 001c 7047     		bx	lr
 2345              		.cfi_endproc
 2346              	.LFE134:
 2348 001e 00BF     		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2349              		.align	2
 2350              		.global	RTC_WakeUpCmd
 2351              		.thumb
 2352              		.thumb_func
 2354              	RTC_WakeUpCmd:
 2355              	.LFB135:
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2356              		.loc 1 1528 0
 2357              		.cfi_startproc
 2358              		@ args = 0, pretend = 0, frame = 24
 2359              		@ frame_needed = 1, uses_anonymous_args = 0
 2360              		@ link register save eliminated.
 2361 0000 80B4     		push	{r7}
 2362              	.LCFI73:
 2363              		.cfi_def_cfa_offset 4
 2364              		.cfi_offset 7, -4
 2365 0002 87B0     		sub	sp, sp, #28
 2366              	.LCFI74:
 2367              		.cfi_def_cfa_offset 32
 2368 0004 00AF     		add	r7, sp, #0
 2369              	.LCFI75:
 2370              		.cfi_def_cfa_register 7
 2371 0006 0346     		mov	r3, r0
 2372 0008 FB71     		strb	r3, [r7, #7]
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2373              		.loc 1 1529 0
 2374 000a 4FF00003 		mov	r3, #0
 2375 000e FB60     		str	r3, [r7, #12]
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2376              		.loc 1 1530 0
 2377 0010 4FF00003 		mov	r3, #0
 2378 0014 3B61     		str	r3, [r7, #16]
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2379              		.loc 1 1531 0
 2380 0016 4FF00003 		mov	r3, #0
 2381 001a FB75     		strb	r3, [r7, #23]
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2382              		.loc 1 1537 0
 2383 001c 4FF42053 		mov	r3, #10240
 2384 0020 C4F20003 		movt	r3, 16384
 2385 0024 4FF0CA02 		mov	r2, #202
 2386 0028 5A62     		str	r2, [r3, #36]
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2387              		.loc 1 1538 0
 2388 002a 4FF42053 		mov	r3, #10240
 2389 002e C4F20003 		movt	r3, 16384
 2390 0032 4FF05302 		mov	r2, #83
 2391 0036 5A62     		str	r2, [r3, #36]
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2392              		.loc 1 1540 0
 2393 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2394 003a 002B     		cmp	r3, #0
 2395 003c 0FD0     		beq	.L91
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2396              		.loc 1 1543 0
 2397 003e 4FF42053 		mov	r3, #10240
 2398 0042 C4F20003 		movt	r3, 16384
 2399 0046 4FF42052 		mov	r2, #10240
 2400 004a C4F20002 		movt	r2, 16384
 2401 004e 9268     		ldr	r2, [r2, #8]
 2402 0050 42F48062 		orr	r2, r2, #1024
 2403 0054 9A60     		str	r2, [r3, #8]
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2404              		.loc 1 1544 0
 2405 0056 4FF00103 		mov	r3, #1
 2406 005a FB75     		strb	r3, [r7, #23]
 2407 005c 2EE0     		b	.L92
 2408              	.L91:
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2409              		.loc 1 1549 0
 2410 005e 4FF42053 		mov	r3, #10240
 2411 0062 C4F20003 		movt	r3, 16384
 2412 0066 4FF42052 		mov	r2, #10240
 2413 006a C4F20002 		movt	r2, 16384
 2414 006e 9268     		ldr	r2, [r2, #8]
 2415 0070 22F48062 		bic	r2, r2, #1024
 2416 0074 9A60     		str	r2, [r3, #8]
 2417              	.L94:
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2418              		.loc 1 1553 0 discriminator 1
 2419 0076 4FF42053 		mov	r3, #10240
 2420 007a C4F20003 		movt	r3, 16384
 2421 007e DB68     		ldr	r3, [r3, #12]
 2422 0080 03F00403 		and	r3, r3, #4
 2423 0084 3B61     		str	r3, [r7, #16]
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2424              		.loc 1 1554 0 discriminator 1
 2425 0086 FB68     		ldr	r3, [r7, #12]
 2426 0088 03F10103 		add	r3, r3, #1
 2427 008c FB60     		str	r3, [r7, #12]
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2428              		.loc 1 1555 0 discriminator 1
 2429 008e FB68     		ldr	r3, [r7, #12]
 2430 0090 B3F5803F 		cmp	r3, #65536
 2431 0094 02D0     		beq	.L93
 2432 0096 3B69     		ldr	r3, [r7, #16]
 2433 0098 002B     		cmp	r3, #0
 2434 009a ECD0     		beq	.L94
 2435              	.L93:
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2436              		.loc 1 1557 0
 2437 009c 4FF42053 		mov	r3, #10240
 2438 00a0 C4F20003 		movt	r3, 16384
 2439 00a4 DB68     		ldr	r3, [r3, #12]
 2440 00a6 03F00403 		and	r3, r3, #4
 2441 00aa 002B     		cmp	r3, #0
 2442 00ac 03D1     		bne	.L95
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2443              		.loc 1 1559 0
 2444 00ae 4FF00003 		mov	r3, #0
 2445 00b2 FB75     		strb	r3, [r7, #23]
 2446 00b4 02E0     		b	.L92
 2447              	.L95:
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2448              		.loc 1 1563 0
 2449 00b6 4FF00103 		mov	r3, #1
 2450 00ba FB75     		strb	r3, [r7, #23]
 2451              	.L92:
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2452              		.loc 1 1568 0
 2453 00bc 4FF42053 		mov	r3, #10240
 2454 00c0 C4F20003 		movt	r3, 16384
 2455 00c4 4FF0FF02 		mov	r2, #255
 2456 00c8 5A62     		str	r2, [r3, #36]
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2457              		.loc 1 1570 0
 2458 00ca FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2459              		.loc 1 1571 0
 2460 00cc 1846     		mov	r0, r3
 2461 00ce 07F11C07 		add	r7, r7, #28
 2462 00d2 BD46     		mov	sp, r7
 2463 00d4 80BC     		pop	{r7}
 2464 00d6 7047     		bx	lr
 2465              		.cfi_endproc
 2466              	.LFE135:
 2468              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2469              		.align	2
 2470              		.global	RTC_DayLightSavingConfig
 2471              		.thumb
 2472              		.thumb_func
 2474              	RTC_DayLightSavingConfig:
 2475              	.LFB136:
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2476              		.loc 1 1605 0
 2477              		.cfi_startproc
 2478              		@ args = 0, pretend = 0, frame = 8
 2479              		@ frame_needed = 1, uses_anonymous_args = 0
 2480              		@ link register save eliminated.
 2481 0000 80B4     		push	{r7}
 2482              	.LCFI76:
 2483              		.cfi_def_cfa_offset 4
 2484              		.cfi_offset 7, -4
 2485 0002 83B0     		sub	sp, sp, #12
 2486              	.LCFI77:
 2487              		.cfi_def_cfa_offset 16
 2488 0004 00AF     		add	r7, sp, #0
 2489              	.LCFI78:
 2490              		.cfi_def_cfa_register 7
 2491 0006 7860     		str	r0, [r7, #4]
 2492 0008 3960     		str	r1, [r7, #0]
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2493              		.loc 1 1611 0
 2494 000a 4FF42053 		mov	r3, #10240
 2495 000e C4F20003 		movt	r3, 16384
 2496 0012 4FF0CA02 		mov	r2, #202
 2497 0016 5A62     		str	r2, [r3, #36]
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2498              		.loc 1 1612 0
 2499 0018 4FF42053 		mov	r3, #10240
 2500 001c C4F20003 		movt	r3, 16384
 2501 0020 4FF05302 		mov	r2, #83
 2502 0024 5A62     		str	r2, [r3, #36]
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2503              		.loc 1 1615 0
 2504 0026 4FF42053 		mov	r3, #10240
 2505 002a C4F20003 		movt	r3, 16384
 2506 002e 4FF42052 		mov	r2, #10240
 2507 0032 C4F20002 		movt	r2, 16384
 2508 0036 9268     		ldr	r2, [r2, #8]
 2509 0038 22F48022 		bic	r2, r2, #262144
 2510 003c 9A60     		str	r2, [r3, #8]
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2511              		.loc 1 1618 0
 2512 003e 4FF42053 		mov	r3, #10240
 2513 0042 C4F20003 		movt	r3, 16384
 2514 0046 4FF42052 		mov	r2, #10240
 2515 004a C4F20002 		movt	r2, 16384
 2516 004e 9168     		ldr	r1, [r2, #8]
 2517 0050 7868     		ldr	r0, [r7, #4]
 2518 0052 3A68     		ldr	r2, [r7, #0]
 2519 0054 0243     		orrs	r2, r2, r0
 2520 0056 0A43     		orrs	r2, r2, r1
 2521 0058 9A60     		str	r2, [r3, #8]
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2522              		.loc 1 1621 0
 2523 005a 4FF42053 		mov	r3, #10240
 2524 005e C4F20003 		movt	r3, 16384
 2525 0062 4FF0FF02 		mov	r2, #255
 2526 0066 5A62     		str	r2, [r3, #36]
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2527              		.loc 1 1622 0
 2528 0068 07F10C07 		add	r7, r7, #12
 2529 006c BD46     		mov	sp, r7
 2530 006e 80BC     		pop	{r7}
 2531 0070 7047     		bx	lr
 2532              		.cfi_endproc
 2533              	.LFE136:
 2535 0072 00BF     		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2536              		.align	2
 2537              		.global	RTC_GetStoreOperation
 2538              		.thumb
 2539              		.thumb_func
 2541              	RTC_GetStoreOperation:
 2542              	.LFB137:
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2543              		.loc 1 1632 0
 2544              		.cfi_startproc
 2545              		@ args = 0, pretend = 0, frame = 0
 2546              		@ frame_needed = 1, uses_anonymous_args = 0
 2547              		@ link register save eliminated.
 2548 0000 80B4     		push	{r7}
 2549              	.LCFI79:
 2550              		.cfi_def_cfa_offset 4
 2551              		.cfi_offset 7, -4
 2552 0002 00AF     		add	r7, sp, #0
 2553              	.LCFI80:
 2554              		.cfi_def_cfa_register 7
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2555              		.loc 1 1633 0
 2556 0004 4FF42053 		mov	r3, #10240
 2557 0008 C4F20003 		movt	r3, 16384
 2558 000c 9B68     		ldr	r3, [r3, #8]
 2559 000e 03F48023 		and	r3, r3, #262144
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2560              		.loc 1 1634 0
 2561 0012 1846     		mov	r0, r3
 2562 0014 BD46     		mov	sp, r7
 2563 0016 80BC     		pop	{r7}
 2564 0018 7047     		bx	lr
 2565              		.cfi_endproc
 2566              	.LFE137:
 2568 001a 00BF     		.section	.text.RTC_OutputConfig,"ax",%progbits
 2569              		.align	2
 2570              		.global	RTC_OutputConfig
 2571              		.thumb
 2572              		.thumb_func
 2574              	RTC_OutputConfig:
 2575              	.LFB138:
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2576              		.loc 1 1671 0
 2577              		.cfi_startproc
 2578              		@ args = 0, pretend = 0, frame = 8
 2579              		@ frame_needed = 1, uses_anonymous_args = 0
 2580              		@ link register save eliminated.
 2581 0000 80B4     		push	{r7}
 2582              	.LCFI81:
 2583              		.cfi_def_cfa_offset 4
 2584              		.cfi_offset 7, -4
 2585 0002 83B0     		sub	sp, sp, #12
 2586              	.LCFI82:
 2587              		.cfi_def_cfa_offset 16
 2588 0004 00AF     		add	r7, sp, #0
 2589              	.LCFI83:
 2590              		.cfi_def_cfa_register 7
 2591 0006 7860     		str	r0, [r7, #4]
 2592 0008 3960     		str	r1, [r7, #0]
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2593              		.loc 1 1677 0
 2594 000a 4FF42053 		mov	r3, #10240
 2595 000e C4F20003 		movt	r3, 16384
 2596 0012 4FF0CA02 		mov	r2, #202
 2597 0016 5A62     		str	r2, [r3, #36]
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2598              		.loc 1 1678 0
 2599 0018 4FF42053 		mov	r3, #10240
 2600 001c C4F20003 		movt	r3, 16384
 2601 0020 4FF05302 		mov	r2, #83
 2602 0024 5A62     		str	r2, [r3, #36]
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2603              		.loc 1 1681 0
 2604 0026 4FF42053 		mov	r3, #10240
 2605 002a C4F20003 		movt	r3, 16384
 2606 002e 4FF42052 		mov	r2, #10240
 2607 0032 C4F20002 		movt	r2, 16384
 2608 0036 9268     		ldr	r2, [r2, #8]
 2609 0038 22F4E002 		bic	r2, r2, #7340032
 2610 003c 9A60     		str	r2, [r3, #8]
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2611              		.loc 1 1684 0
 2612 003e 4FF42053 		mov	r3, #10240
 2613 0042 C4F20003 		movt	r3, 16384
 2614 0046 4FF42052 		mov	r2, #10240
 2615 004a C4F20002 		movt	r2, 16384
 2616 004e 9168     		ldr	r1, [r2, #8]
 2617 0050 7868     		ldr	r0, [r7, #4]
 2618 0052 3A68     		ldr	r2, [r7, #0]
 2619 0054 0243     		orrs	r2, r2, r0
 2620 0056 0A43     		orrs	r2, r2, r1
 2621 0058 9A60     		str	r2, [r3, #8]
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2622              		.loc 1 1687 0
 2623 005a 4FF42053 		mov	r3, #10240
 2624 005e C4F20003 		movt	r3, 16384
 2625 0062 4FF0FF02 		mov	r2, #255
 2626 0066 5A62     		str	r2, [r3, #36]
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2627              		.loc 1 1688 0
 2628 0068 07F10C07 		add	r7, r7, #12
 2629 006c BD46     		mov	sp, r7
 2630 006e 80BC     		pop	{r7}
 2631 0070 7047     		bx	lr
 2632              		.cfi_endproc
 2633              	.LFE138:
 2635 0072 00BF     		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2636              		.align	2
 2637              		.global	RTC_CoarseCalibConfig
 2638              		.thumb
 2639              		.thumb_func
 2641              	RTC_CoarseCalibConfig:
 2642              	.LFB139:
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2643              		.loc 1 1725 0
 2644              		.cfi_startproc
 2645              		@ args = 0, pretend = 0, frame = 16
 2646              		@ frame_needed = 1, uses_anonymous_args = 0
 2647 0000 80B5     		push	{r7, lr}
 2648              	.LCFI84:
 2649              		.cfi_def_cfa_offset 8
 2650              		.cfi_offset 14, -4
 2651              		.cfi_offset 7, -8
 2652 0002 84B0     		sub	sp, sp, #16
 2653              	.LCFI85:
 2654              		.cfi_def_cfa_offset 24
 2655 0004 00AF     		add	r7, sp, #0
 2656              	.LCFI86:
 2657              		.cfi_def_cfa_register 7
 2658 0006 7860     		str	r0, [r7, #4]
 2659 0008 3960     		str	r1, [r7, #0]
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2660              		.loc 1 1726 0
 2661 000a 4FF00003 		mov	r3, #0
 2662 000e FB73     		strb	r3, [r7, #15]
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2663              		.loc 1 1733 0
 2664 0010 4FF42053 		mov	r3, #10240
 2665 0014 C4F20003 		movt	r3, 16384
 2666 0018 4FF0CA02 		mov	r2, #202
 2667 001c 5A62     		str	r2, [r3, #36]
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2668              		.loc 1 1734 0
 2669 001e 4FF42053 		mov	r3, #10240
 2670 0022 C4F20003 		movt	r3, 16384
 2671 0026 4FF05302 		mov	r2, #83
 2672 002a 5A62     		str	r2, [r3, #36]
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2673              		.loc 1 1737 0
 2674 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2675 0030 0346     		mov	r3, r0
 2676 0032 002B     		cmp	r3, #0
 2677 0034 03D1     		bne	.L100
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2678              		.loc 1 1739 0
 2679 0036 4FF00003 		mov	r3, #0
 2680 003a FB73     		strb	r3, [r7, #15]
 2681 003c 0CE0     		b	.L101
 2682              	.L100:
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2683              		.loc 1 1744 0
 2684 003e 4FF42053 		mov	r3, #10240
 2685 0042 C4F20003 		movt	r3, 16384
 2686 0046 7968     		ldr	r1, [r7, #4]
 2687 0048 3A68     		ldr	r2, [r7, #0]
 2688 004a 0A43     		orrs	r2, r2, r1
 2689 004c 9A61     		str	r2, [r3, #24]
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2690              		.loc 1 1746 0
 2691 004e FFF7FEFF 		bl	RTC_ExitInitMode
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2692              		.loc 1 1748 0
 2693 0052 4FF00103 		mov	r3, #1
 2694 0056 FB73     		strb	r3, [r7, #15]
 2695              	.L101:
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2696              		.loc 1 1752 0
 2697 0058 4FF42053 		mov	r3, #10240
 2698 005c C4F20003 		movt	r3, 16384
 2699 0060 4FF0FF02 		mov	r2, #255
 2700 0064 5A62     		str	r2, [r3, #36]
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2701              		.loc 1 1754 0
 2702 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2703              		.loc 1 1755 0
 2704 0068 1846     		mov	r0, r3
 2705 006a 07F11007 		add	r7, r7, #16
 2706 006e BD46     		mov	sp, r7
 2707 0070 80BD     		pop	{r7, pc}
 2708              		.cfi_endproc
 2709              	.LFE139:
 2711 0072 00BF     		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2712              		.align	2
 2713              		.global	RTC_CoarseCalibCmd
 2714              		.thumb
 2715              		.thumb_func
 2717              	RTC_CoarseCalibCmd:
 2718              	.LFB140:
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2719              		.loc 1 1766 0
 2720              		.cfi_startproc
 2721              		@ args = 0, pretend = 0, frame = 16
 2722              		@ frame_needed = 1, uses_anonymous_args = 0
 2723 0000 80B5     		push	{r7, lr}
 2724              	.LCFI87:
 2725              		.cfi_def_cfa_offset 8
 2726              		.cfi_offset 14, -4
 2727              		.cfi_offset 7, -8
 2728 0002 84B0     		sub	sp, sp, #16
 2729              	.LCFI88:
 2730              		.cfi_def_cfa_offset 24
 2731 0004 00AF     		add	r7, sp, #0
 2732              	.LCFI89:
 2733              		.cfi_def_cfa_register 7
 2734 0006 0346     		mov	r3, r0
 2735 0008 FB71     		strb	r3, [r7, #7]
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2736              		.loc 1 1767 0
 2737 000a 4FF00003 		mov	r3, #0
 2738 000e FB73     		strb	r3, [r7, #15]
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2739              		.loc 1 1773 0
 2740 0010 4FF42053 		mov	r3, #10240
 2741 0014 C4F20003 		movt	r3, 16384
 2742 0018 4FF0CA02 		mov	r2, #202
 2743 001c 5A62     		str	r2, [r3, #36]
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2744              		.loc 1 1774 0
 2745 001e 4FF42053 		mov	r3, #10240
 2746 0022 C4F20003 		movt	r3, 16384
 2747 0026 4FF05302 		mov	r2, #83
 2748 002a 5A62     		str	r2, [r3, #36]
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2749              		.loc 1 1777 0
 2750 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2751 0030 0346     		mov	r3, r0
 2752 0032 002B     		cmp	r3, #0
 2753 0034 03D1     		bne	.L103
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2754              		.loc 1 1779 0
 2755 0036 4FF00003 		mov	r3, #0
 2756 003a FB73     		strb	r3, [r7, #15]
 2757 003c 20E0     		b	.L104
 2758              	.L103:
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2759              		.loc 1 1783 0
 2760 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2761 0040 002B     		cmp	r3, #0
 2762 0042 0CD0     		beq	.L105
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2763              		.loc 1 1786 0
 2764 0044 4FF42053 		mov	r3, #10240
 2765 0048 C4F20003 		movt	r3, 16384
 2766 004c 4FF42052 		mov	r2, #10240
 2767 0050 C4F20002 		movt	r2, 16384
 2768 0054 9268     		ldr	r2, [r2, #8]
 2769 0056 42F08002 		orr	r2, r2, #128
 2770 005a 9A60     		str	r2, [r3, #8]
 2771 005c 0BE0     		b	.L106
 2772              	.L105:
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2773              		.loc 1 1791 0
 2774 005e 4FF42053 		mov	r3, #10240
 2775 0062 C4F20003 		movt	r3, 16384
 2776 0066 4FF42052 		mov	r2, #10240
 2777 006a C4F20002 		movt	r2, 16384
 2778 006e 9268     		ldr	r2, [r2, #8]
 2779 0070 22F08002 		bic	r2, r2, #128
 2780 0074 9A60     		str	r2, [r3, #8]
 2781              	.L106:
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2782              		.loc 1 1794 0
 2783 0076 FFF7FEFF 		bl	RTC_ExitInitMode
1795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2784              		.loc 1 1796 0
 2785 007a 4FF00103 		mov	r3, #1
 2786 007e FB73     		strb	r3, [r7, #15]
 2787              	.L104:
1797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2788              		.loc 1 1800 0
 2789 0080 4FF42053 		mov	r3, #10240
 2790 0084 C4F20003 		movt	r3, 16384
 2791 0088 4FF0FF02 		mov	r2, #255
 2792 008c 5A62     		str	r2, [r3, #36]
1801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2793              		.loc 1 1802 0
 2794 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2795              		.loc 1 1803 0
 2796 0090 1846     		mov	r0, r3
 2797 0092 07F11007 		add	r7, r7, #16
 2798 0096 BD46     		mov	sp, r7
 2799 0098 80BD     		pop	{r7, pc}
 2800              		.cfi_endproc
 2801              	.LFE140:
 2803 009a 00BF     		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2804              		.align	2
 2805              		.global	RTC_CalibOutputCmd
 2806              		.thumb
 2807              		.thumb_func
 2809              	RTC_CalibOutputCmd:
 2810              	.LFB141:
1804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2811              		.loc 1 1812 0
 2812              		.cfi_startproc
 2813              		@ args = 0, pretend = 0, frame = 8
 2814              		@ frame_needed = 1, uses_anonymous_args = 0
 2815              		@ link register save eliminated.
 2816 0000 80B4     		push	{r7}
 2817              	.LCFI90:
 2818              		.cfi_def_cfa_offset 4
 2819              		.cfi_offset 7, -4
 2820 0002 83B0     		sub	sp, sp, #12
 2821              	.LCFI91:
 2822              		.cfi_def_cfa_offset 16
 2823 0004 00AF     		add	r7, sp, #0
 2824              	.LCFI92:
 2825              		.cfi_def_cfa_register 7
 2826 0006 0346     		mov	r3, r0
 2827 0008 FB71     		strb	r3, [r7, #7]
1813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2828              		.loc 1 1817 0
 2829 000a 4FF42053 		mov	r3, #10240
 2830 000e C4F20003 		movt	r3, 16384
 2831 0012 4FF0CA02 		mov	r2, #202
 2832 0016 5A62     		str	r2, [r3, #36]
1818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2833              		.loc 1 1818 0
 2834 0018 4FF42053 		mov	r3, #10240
 2835 001c C4F20003 		movt	r3, 16384
 2836 0020 4FF05302 		mov	r2, #83
 2837 0024 5A62     		str	r2, [r3, #36]
1819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2838              		.loc 1 1820 0
 2839 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2840 0028 002B     		cmp	r3, #0
 2841 002a 0CD0     		beq	.L108
1821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2842              		.loc 1 1823 0
 2843 002c 4FF42053 		mov	r3, #10240
 2844 0030 C4F20003 		movt	r3, 16384
 2845 0034 4FF42052 		mov	r2, #10240
 2846 0038 C4F20002 		movt	r2, 16384
 2847 003c 9268     		ldr	r2, [r2, #8]
 2848 003e 42F40002 		orr	r2, r2, #8388608
 2849 0042 9A60     		str	r2, [r3, #8]
 2850 0044 0BE0     		b	.L109
 2851              	.L108:
1824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2852              		.loc 1 1828 0
 2853 0046 4FF42053 		mov	r3, #10240
 2854 004a C4F20003 		movt	r3, 16384
 2855 004e 4FF42052 		mov	r2, #10240
 2856 0052 C4F20002 		movt	r2, 16384
 2857 0056 9268     		ldr	r2, [r2, #8]
 2858 0058 22F40002 		bic	r2, r2, #8388608
 2859 005c 9A60     		str	r2, [r3, #8]
 2860              	.L109:
1829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2861              		.loc 1 1832 0
 2862 005e 4FF42053 		mov	r3, #10240
 2863 0062 C4F20003 		movt	r3, 16384
 2864 0066 4FF0FF02 		mov	r2, #255
 2865 006a 5A62     		str	r2, [r3, #36]
1833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2866              		.loc 1 1833 0
 2867 006c 07F10C07 		add	r7, r7, #12
 2868 0070 BD46     		mov	sp, r7
 2869 0072 80BC     		pop	{r7}
 2870 0074 7047     		bx	lr
 2871              		.cfi_endproc
 2872              	.LFE141:
 2874              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2875              		.align	2
 2876              		.global	RTC_CalibOutputConfig
 2877              		.thumb
 2878              		.thumb_func
 2880              	RTC_CalibOutputConfig:
 2881              	.LFB142:
1834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2882              		.loc 1 1844 0
 2883              		.cfi_startproc
 2884              		@ args = 0, pretend = 0, frame = 8
 2885              		@ frame_needed = 1, uses_anonymous_args = 0
 2886              		@ link register save eliminated.
 2887 0000 80B4     		push	{r7}
 2888              	.LCFI93:
 2889              		.cfi_def_cfa_offset 4
 2890              		.cfi_offset 7, -4
 2891 0002 83B0     		sub	sp, sp, #12
 2892              	.LCFI94:
 2893              		.cfi_def_cfa_offset 16
 2894 0004 00AF     		add	r7, sp, #0
 2895              	.LCFI95:
 2896              		.cfi_def_cfa_register 7
 2897 0006 7860     		str	r0, [r7, #4]
1845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2898              		.loc 1 1849 0
 2899 0008 4FF42053 		mov	r3, #10240
 2900 000c C4F20003 		movt	r3, 16384
 2901 0010 4FF0CA02 		mov	r2, #202
 2902 0014 5A62     		str	r2, [r3, #36]
1850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2903              		.loc 1 1850 0
 2904 0016 4FF42053 		mov	r3, #10240
 2905 001a C4F20003 		movt	r3, 16384
 2906 001e 4FF05302 		mov	r2, #83
 2907 0022 5A62     		str	r2, [r3, #36]
1851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2908              		.loc 1 1853 0
 2909 0024 4FF42053 		mov	r3, #10240
 2910 0028 C4F20003 		movt	r3, 16384
 2911 002c 4FF42052 		mov	r2, #10240
 2912 0030 C4F20002 		movt	r2, 16384
 2913 0034 9268     		ldr	r2, [r2, #8]
 2914 0036 22F40022 		bic	r2, r2, #524288
 2915 003a 9A60     		str	r2, [r3, #8]
1854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2916              		.loc 1 1856 0
 2917 003c 4FF42053 		mov	r3, #10240
 2918 0040 C4F20003 		movt	r3, 16384
 2919 0044 4FF42052 		mov	r2, #10240
 2920 0048 C4F20002 		movt	r2, 16384
 2921 004c 9168     		ldr	r1, [r2, #8]
 2922 004e 7A68     		ldr	r2, [r7, #4]
 2923 0050 0A43     		orrs	r2, r2, r1
 2924 0052 9A60     		str	r2, [r3, #8]
1857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2925              		.loc 1 1859 0
 2926 0054 4FF42053 		mov	r3, #10240
 2927 0058 C4F20003 		movt	r3, 16384
 2928 005c 4FF0FF02 		mov	r2, #255
 2929 0060 5A62     		str	r2, [r3, #36]
1860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2930              		.loc 1 1860 0
 2931 0062 07F10C07 		add	r7, r7, #12
 2932 0066 BD46     		mov	sp, r7
 2933 0068 80BC     		pop	{r7}
 2934 006a 7047     		bx	lr
 2935              		.cfi_endproc
 2936              	.LFE142:
 2938              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2939              		.align	2
 2940              		.global	RTC_SmoothCalibConfig
 2941              		.thumb
 2942              		.thumb_func
 2944              	RTC_SmoothCalibConfig:
 2945              	.LFB143:
1861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2946              		.loc 1 1882 0
 2947              		.cfi_startproc
 2948              		@ args = 0, pretend = 0, frame = 24
 2949              		@ frame_needed = 1, uses_anonymous_args = 0
 2950              		@ link register save eliminated.
 2951 0000 80B4     		push	{r7}
 2952              	.LCFI96:
 2953              		.cfi_def_cfa_offset 4
 2954              		.cfi_offset 7, -4
 2955 0002 87B0     		sub	sp, sp, #28
 2956              	.LCFI97:
 2957              		.cfi_def_cfa_offset 32
 2958 0004 00AF     		add	r7, sp, #0
 2959              	.LCFI98:
 2960              		.cfi_def_cfa_register 7
 2961 0006 F860     		str	r0, [r7, #12]
 2962 0008 B960     		str	r1, [r7, #8]
 2963 000a 7A60     		str	r2, [r7, #4]
1883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2964              		.loc 1 1883 0
 2965 000c 4FF00003 		mov	r3, #0
 2966 0010 FB75     		strb	r3, [r7, #23]
1884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2967              		.loc 1 1884 0
 2968 0012 4FF00003 		mov	r3, #0
 2969 0016 3B61     		str	r3, [r7, #16]
1885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2970              		.loc 1 1892 0
 2971 0018 4FF42053 		mov	r3, #10240
 2972 001c C4F20003 		movt	r3, 16384
 2973 0020 4FF0CA02 		mov	r2, #202
 2974 0024 5A62     		str	r2, [r3, #36]
1893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2975              		.loc 1 1893 0
 2976 0026 4FF42053 		mov	r3, #10240
 2977 002a C4F20003 		movt	r3, 16384
 2978 002e 4FF05302 		mov	r2, #83
 2979 0032 5A62     		str	r2, [r3, #36]
1894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2980              		.loc 1 1896 0
 2981 0034 4FF42053 		mov	r3, #10240
 2982 0038 C4F20003 		movt	r3, 16384
 2983 003c DB68     		ldr	r3, [r3, #12]
 2984 003e 03F48033 		and	r3, r3, #65536
 2985 0042 002B     		cmp	r3, #0
 2986 0044 11D0     		beq	.L112
1897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2987              		.loc 1 1899 0
 2988 0046 03E0     		b	.L113
 2989              	.L114:
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2990              		.loc 1 1901 0
 2991 0048 3B69     		ldr	r3, [r7, #16]
 2992 004a 03F10103 		add	r3, r3, #1
 2993 004e 3B61     		str	r3, [r7, #16]
 2994              	.L113:
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2995              		.loc 1 1899 0 discriminator 1
 2996 0050 4FF42053 		mov	r3, #10240
 2997 0054 C4F20003 		movt	r3, 16384
 2998 0058 DB68     		ldr	r3, [r3, #12]
 2999 005a 03F48033 		and	r3, r3, #65536
 3000 005e 002B     		cmp	r3, #0
 3001 0060 03D0     		beq	.L112
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3002              		.loc 1 1899 0 is_stmt 0 discriminator 2
 3003 0062 3B69     		ldr	r3, [r7, #16]
 3004 0064 B3F5003F 		cmp	r3, #131072
 3005 0068 EED1     		bne	.L114
 3006              	.L112:
1902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3007              		.loc 1 1906 0 is_stmt 1
 3008 006a 4FF42053 		mov	r3, #10240
 3009 006e C4F20003 		movt	r3, 16384
 3010 0072 DB68     		ldr	r3, [r3, #12]
 3011 0074 03F48033 		and	r3, r3, #65536
 3012 0078 002B     		cmp	r3, #0
 3013 007a 0DD1     		bne	.L115
1907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3014              		.loc 1 1909 0
 3015 007c 4FF42053 		mov	r3, #10240
 3016 0080 C4F20003 		movt	r3, 16384
 3017 0084 F968     		ldr	r1, [r7, #12]
 3018 0086 BA68     		ldr	r2, [r7, #8]
 3019 0088 1143     		orrs	r1, r1, r2
 3020 008a 7A68     		ldr	r2, [r7, #4]
 3021 008c 0A43     		orrs	r2, r2, r1
 3022 008e DA63     		str	r2, [r3, #60]
1910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3023              		.loc 1 1911 0
 3024 0090 4FF00103 		mov	r3, #1
 3025 0094 FB75     		strb	r3, [r7, #23]
 3026 0096 02E0     		b	.L116
 3027              	.L115:
1912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3028              		.loc 1 1915 0
 3029 0098 4FF00003 		mov	r3, #0
 3030 009c FB75     		strb	r3, [r7, #23]
 3031              	.L116:
1916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3032              		.loc 1 1919 0
 3033 009e 4FF42053 		mov	r3, #10240
 3034 00a2 C4F20003 		movt	r3, 16384
 3035 00a6 4FF0FF02 		mov	r2, #255
 3036 00aa 5A62     		str	r2, [r3, #36]
1920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3037              		.loc 1 1921 0
 3038 00ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3039              		.loc 1 1922 0
 3040 00ae 1846     		mov	r0, r3
 3041 00b0 07F11C07 		add	r7, r7, #28
 3042 00b4 BD46     		mov	sp, r7
 3043 00b6 80BC     		pop	{r7}
 3044 00b8 7047     		bx	lr
 3045              		.cfi_endproc
 3046              	.LFE143:
 3048 00ba 00BF     		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3049              		.align	2
 3050              		.global	RTC_TimeStampCmd
 3051              		.thumb
 3052              		.thumb_func
 3054              	RTC_TimeStampCmd:
 3055              	.LFB144:
1923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3056              		.loc 1 1956 0
 3057              		.cfi_startproc
 3058              		@ args = 0, pretend = 0, frame = 16
 3059              		@ frame_needed = 1, uses_anonymous_args = 0
 3060              		@ link register save eliminated.
 3061 0000 80B4     		push	{r7}
 3062              	.LCFI99:
 3063              		.cfi_def_cfa_offset 4
 3064              		.cfi_offset 7, -4
 3065 0002 85B0     		sub	sp, sp, #20
 3066              	.LCFI100:
 3067              		.cfi_def_cfa_offset 24
 3068 0004 00AF     		add	r7, sp, #0
 3069              	.LCFI101:
 3070              		.cfi_def_cfa_register 7
 3071 0006 7860     		str	r0, [r7, #4]
 3072 0008 0B46     		mov	r3, r1
 3073 000a FB70     		strb	r3, [r7, #3]
1957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3074              		.loc 1 1957 0
 3075 000c 4FF00003 		mov	r3, #0
 3076 0010 FB60     		str	r3, [r7, #12]
1958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3077              		.loc 1 1964 0
 3078 0012 4FF42053 		mov	r3, #10240
 3079 0016 C4F20003 		movt	r3, 16384
 3080 001a 9B68     		ldr	r3, [r3, #8]
 3081 001c 23F40063 		bic	r3, r3, #2048
 3082 0020 23F00803 		bic	r3, r3, #8
 3083 0024 FB60     		str	r3, [r7, #12]
1965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3084              		.loc 1 1967 0
 3085 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3086 0028 002B     		cmp	r3, #0
 3087 002a 06D0     		beq	.L118
1968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3088              		.loc 1 1969 0
 3089 002c 7A68     		ldr	r2, [r7, #4]
 3090 002e FB68     		ldr	r3, [r7, #12]
 3091 0030 1343     		orrs	r3, r3, r2
 3092 0032 43F40063 		orr	r3, r3, #2048
 3093 0036 FB60     		str	r3, [r7, #12]
 3094 0038 03E0     		b	.L119
 3095              	.L118:
1970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3096              		.loc 1 1973 0
 3097 003a FA68     		ldr	r2, [r7, #12]
 3098 003c 7B68     		ldr	r3, [r7, #4]
 3099 003e 1343     		orrs	r3, r3, r2
 3100 0040 FB60     		str	r3, [r7, #12]
 3101              	.L119:
1974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3102              		.loc 1 1977 0
 3103 0042 4FF42053 		mov	r3, #10240
 3104 0046 C4F20003 		movt	r3, 16384
 3105 004a 4FF0CA02 		mov	r2, #202
 3106 004e 5A62     		str	r2, [r3, #36]
1978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3107              		.loc 1 1978 0
 3108 0050 4FF42053 		mov	r3, #10240
 3109 0054 C4F20003 		movt	r3, 16384
 3110 0058 4FF05302 		mov	r2, #83
 3111 005c 5A62     		str	r2, [r3, #36]
1979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3112              		.loc 1 1981 0
 3113 005e 4FF42053 		mov	r3, #10240
 3114 0062 C4F20003 		movt	r3, 16384
 3115 0066 FA68     		ldr	r2, [r7, #12]
 3116 0068 9A60     		str	r2, [r3, #8]
1982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3117              		.loc 1 1984 0
 3118 006a 4FF42053 		mov	r3, #10240
 3119 006e C4F20003 		movt	r3, 16384
 3120 0072 4FF0FF02 		mov	r2, #255
 3121 0076 5A62     		str	r2, [r3, #36]
1985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3122              		.loc 1 1985 0
 3123 0078 07F11407 		add	r7, r7, #20
 3124 007c BD46     		mov	sp, r7
 3125 007e 80BC     		pop	{r7}
 3126 0080 7047     		bx	lr
 3127              		.cfi_endproc
 3128              	.LFE144:
 3130 0082 00BF     		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3131              		.align	2
 3132              		.global	RTC_GetTimeStamp
 3133              		.thumb
 3134              		.thumb_func
 3136              	RTC_GetTimeStamp:
 3137              	.LFB145:
1986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3138              		.loc 1 2001 0
 3139              		.cfi_startproc
 3140              		@ args = 0, pretend = 0, frame = 24
 3141              		@ frame_needed = 1, uses_anonymous_args = 0
 3142 0000 80B5     		push	{r7, lr}
 3143              	.LCFI102:
 3144              		.cfi_def_cfa_offset 8
 3145              		.cfi_offset 14, -4
 3146              		.cfi_offset 7, -8
 3147 0002 86B0     		sub	sp, sp, #24
 3148              	.LCFI103:
 3149              		.cfi_def_cfa_offset 32
 3150 0004 00AF     		add	r7, sp, #0
 3151              	.LCFI104:
 3152              		.cfi_def_cfa_register 7
 3153 0006 F860     		str	r0, [r7, #12]
 3154 0008 B960     		str	r1, [r7, #8]
 3155 000a 7A60     		str	r2, [r7, #4]
2002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3156              		.loc 1 2002 0
 3157 000c 4FF00003 		mov	r3, #0
 3158 0010 7B61     		str	r3, [r7, #20]
 3159 0012 4FF00003 		mov	r3, #0
 3160 0016 3B61     		str	r3, [r7, #16]
2003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3161              		.loc 1 2008 0
 3162 0018 4FF42053 		mov	r3, #10240
 3163 001c C4F20003 		movt	r3, 16384
 3164 0020 1A6B     		ldr	r2, [r3, #48]
 3165 0022 47F67F73 		movw	r3, #32639
 3166 0026 C0F27F03 		movt	r3, 127
 3167 002a 1340     		ands	r3, r3, r2
 3168 002c 7B61     		str	r3, [r7, #20]
2009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3169              		.loc 1 2009 0
 3170 002e 4FF42053 		mov	r3, #10240
 3171 0032 C4F20003 		movt	r3, 16384
 3172 0036 5B6B     		ldr	r3, [r3, #52]
 3173 0038 23F07F43 		bic	r3, r3, #-16777216
 3174 003c 23F0C003 		bic	r3, r3, #192
 3175 0040 3B61     		str	r3, [r7, #16]
2010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3176              		.loc 1 2012 0
 3177 0042 7B69     		ldr	r3, [r7, #20]
 3178 0044 03F47C13 		and	r3, r3, #4128768
 3179 0048 4FEA1343 		lsr	r3, r3, #16
 3180 004c DAB2     		uxtb	r2, r3
 3181 004e BB68     		ldr	r3, [r7, #8]
 3182 0050 1A70     		strb	r2, [r3, #0]
2013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3183              		.loc 1 2013 0
 3184 0052 7B69     		ldr	r3, [r7, #20]
 3185 0054 03F4FE43 		and	r3, r3, #32512
 3186 0058 4FEA1323 		lsr	r3, r3, #8
 3187 005c DAB2     		uxtb	r2, r3
 3188 005e BB68     		ldr	r3, [r7, #8]
 3189 0060 5A70     		strb	r2, [r3, #1]
2014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3190              		.loc 1 2014 0
 3191 0062 7B69     		ldr	r3, [r7, #20]
 3192 0064 DBB2     		uxtb	r3, r3
 3193 0066 03F07F03 		and	r3, r3, #127
 3194 006a DAB2     		uxtb	r2, r3
 3195 006c BB68     		ldr	r3, [r7, #8]
 3196 006e 9A70     		strb	r2, [r3, #2]
2015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3197              		.loc 1 2015 0
 3198 0070 7B69     		ldr	r3, [r7, #20]
 3199 0072 03F48003 		and	r3, r3, #4194304
 3200 0076 4FEA1343 		lsr	r3, r3, #16
 3201 007a DAB2     		uxtb	r2, r3
 3202 007c BB68     		ldr	r3, [r7, #8]
 3203 007e DA70     		strb	r2, [r3, #3]
2016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3204              		.loc 1 2018 0
 3205 0080 7B68     		ldr	r3, [r7, #4]
 3206 0082 4FF00002 		mov	r2, #0
 3207 0086 DA70     		strb	r2, [r3, #3]
2019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3208              		.loc 1 2019 0
 3209 0088 3B69     		ldr	r3, [r7, #16]
 3210 008a 03F4F853 		and	r3, r3, #7936
 3211 008e 4FEA1323 		lsr	r3, r3, #8
 3212 0092 DAB2     		uxtb	r2, r3
 3213 0094 7B68     		ldr	r3, [r7, #4]
 3214 0096 5A70     		strb	r2, [r3, #1]
2020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3215              		.loc 1 2020 0
 3216 0098 3B69     		ldr	r3, [r7, #16]
 3217 009a DBB2     		uxtb	r3, r3
 3218 009c 03F03F03 		and	r3, r3, #63
 3219 00a0 DAB2     		uxtb	r2, r3
 3220 00a2 7B68     		ldr	r3, [r7, #4]
 3221 00a4 9A70     		strb	r2, [r3, #2]
2021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3222              		.loc 1 2021 0
 3223 00a6 3B69     		ldr	r3, [r7, #16]
 3224 00a8 03F46043 		and	r3, r3, #57344
 3225 00ac 4FEA5333 		lsr	r3, r3, #13
 3226 00b0 DAB2     		uxtb	r2, r3
 3227 00b2 7B68     		ldr	r3, [r7, #4]
 3228 00b4 1A70     		strb	r2, [r3, #0]
2022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3229              		.loc 1 2024 0
 3230 00b6 FB68     		ldr	r3, [r7, #12]
 3231 00b8 002B     		cmp	r3, #0
 3232 00ba 35D1     		bne	.L120
2025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3233              		.loc 1 2027 0
 3234 00bc BB68     		ldr	r3, [r7, #8]
 3235 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3236 00c0 1846     		mov	r0, r3
 3237 00c2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3238 00c6 0346     		mov	r3, r0
 3239 00c8 1A46     		mov	r2, r3
 3240 00ca BB68     		ldr	r3, [r7, #8]
 3241 00cc 1A70     		strb	r2, [r3, #0]
2028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3242              		.loc 1 2028 0
 3243 00ce BB68     		ldr	r3, [r7, #8]
 3244 00d0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3245 00d2 1846     		mov	r0, r3
 3246 00d4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3247 00d8 0346     		mov	r3, r0
 3248 00da 1A46     		mov	r2, r3
 3249 00dc BB68     		ldr	r3, [r7, #8]
 3250 00de 5A70     		strb	r2, [r3, #1]
2029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3251              		.loc 1 2029 0
 3252 00e0 BB68     		ldr	r3, [r7, #8]
 3253 00e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3254 00e4 1846     		mov	r0, r3
 3255 00e6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3256 00ea 0346     		mov	r3, r0
 3257 00ec 1A46     		mov	r2, r3
 3258 00ee BB68     		ldr	r3, [r7, #8]
 3259 00f0 9A70     		strb	r2, [r3, #2]
2030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3260              		.loc 1 2032 0
 3261 00f2 7B68     		ldr	r3, [r7, #4]
 3262 00f4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3263 00f6 1846     		mov	r0, r3
 3264 00f8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3265 00fc 0346     		mov	r3, r0
 3266 00fe 1A46     		mov	r2, r3
 3267 0100 7B68     		ldr	r3, [r7, #4]
 3268 0102 5A70     		strb	r2, [r3, #1]
2033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3269              		.loc 1 2033 0
 3270 0104 7B68     		ldr	r3, [r7, #4]
 3271 0106 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3272 0108 1846     		mov	r0, r3
 3273 010a FFF7FEFF 		bl	RTC_Bcd2ToByte
 3274 010e 0346     		mov	r3, r0
 3275 0110 1A46     		mov	r2, r3
 3276 0112 7B68     		ldr	r3, [r7, #4]
 3277 0114 9A70     		strb	r2, [r3, #2]
2034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3278              		.loc 1 2034 0
 3279 0116 7B68     		ldr	r3, [r7, #4]
 3280 0118 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3281 011a 1846     		mov	r0, r3
 3282 011c FFF7FEFF 		bl	RTC_Bcd2ToByte
 3283 0120 0346     		mov	r3, r0
 3284 0122 1A46     		mov	r2, r3
 3285 0124 7B68     		ldr	r3, [r7, #4]
 3286 0126 1A70     		strb	r2, [r3, #0]
 3287              	.L120:
2035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3288              		.loc 1 2036 0
 3289 0128 07F11807 		add	r7, r7, #24
 3290 012c BD46     		mov	sp, r7
 3291 012e 80BD     		pop	{r7, pc}
 3292              		.cfi_endproc
 3293              	.LFE145:
 3295              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3296              		.align	2
 3297              		.global	RTC_GetTimeStampSubSecond
 3298              		.thumb
 3299              		.thumb_func
 3301              	RTC_GetTimeStampSubSecond:
 3302              	.LFB146:
2037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3303              		.loc 1 2044 0
 3304              		.cfi_startproc
 3305              		@ args = 0, pretend = 0, frame = 0
 3306              		@ frame_needed = 1, uses_anonymous_args = 0
 3307              		@ link register save eliminated.
 3308 0000 80B4     		push	{r7}
 3309              	.LCFI105:
 3310              		.cfi_def_cfa_offset 4
 3311              		.cfi_offset 7, -4
 3312 0002 00AF     		add	r7, sp, #0
 3313              	.LCFI106:
 3314              		.cfi_def_cfa_register 7
2045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3315              		.loc 1 2046 0
 3316 0004 4FF42053 		mov	r3, #10240
 3317 0008 C4F20003 		movt	r3, 16384
 3318 000c 9B6B     		ldr	r3, [r3, #56]
2047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3319              		.loc 1 2047 0
 3320 000e 1846     		mov	r0, r3
 3321 0010 BD46     		mov	sp, r7
 3322 0012 80BC     		pop	{r7}
 3323 0014 7047     		bx	lr
 3324              		.cfi_endproc
 3325              	.LFE146:
 3327 0016 00BF     		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3328              		.align	2
 3329              		.global	RTC_TamperTriggerConfig
 3330              		.thumb
 3331              		.thumb_func
 3333              	RTC_TamperTriggerConfig:
 3334              	.LFB147:
2048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3335              		.loc 1 2079 0
 3336              		.cfi_startproc
 3337              		@ args = 0, pretend = 0, frame = 8
 3338              		@ frame_needed = 1, uses_anonymous_args = 0
 3339              		@ link register save eliminated.
 3340 0000 80B4     		push	{r7}
 3341              	.LCFI107:
 3342              		.cfi_def_cfa_offset 4
 3343              		.cfi_offset 7, -4
 3344 0002 83B0     		sub	sp, sp, #12
 3345              	.LCFI108:
 3346              		.cfi_def_cfa_offset 16
 3347 0004 00AF     		add	r7, sp, #0
 3348              	.LCFI109:
 3349              		.cfi_def_cfa_register 7
 3350 0006 7860     		str	r0, [r7, #4]
 3351 0008 3960     		str	r1, [r7, #0]
2080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3352              		.loc 1 2084 0
 3353 000a 3B68     		ldr	r3, [r7, #0]
 3354 000c 002B     		cmp	r3, #0
 3355 000e 10D1     		bne	.L124
2085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3356              		.loc 1 2087 0
 3357 0010 4FF42053 		mov	r3, #10240
 3358 0014 C4F20003 		movt	r3, 16384
 3359 0018 4FF42052 		mov	r2, #10240
 3360 001c C4F20002 		movt	r2, 16384
 3361 0020 116C     		ldr	r1, [r2, #64]
 3362 0022 7A68     		ldr	r2, [r7, #4]
 3363 0024 4FEA4202 		lsl	r2, r2, #1
 3364 0028 6FEA0202 		mvn	r2, r2
 3365 002c 0A40     		ands	r2, r2, r1
 3366 002e 1A64     		str	r2, [r3, #64]
 3367 0030 0DE0     		b	.L123
 3368              	.L124:
2088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3369              		.loc 1 2092 0
 3370 0032 4FF42053 		mov	r3, #10240
 3371 0036 C4F20003 		movt	r3, 16384
 3372 003a 4FF42052 		mov	r2, #10240
 3373 003e C4F20002 		movt	r2, 16384
 3374 0042 116C     		ldr	r1, [r2, #64]
 3375 0044 7A68     		ldr	r2, [r7, #4]
 3376 0046 4FEA4202 		lsl	r2, r2, #1
 3377 004a 0A43     		orrs	r2, r2, r1
 3378 004c 1A64     		str	r2, [r3, #64]
 3379              	.L123:
2093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3380              		.loc 1 2094 0
 3381 004e 07F10C07 		add	r7, r7, #12
 3382 0052 BD46     		mov	sp, r7
 3383 0054 80BC     		pop	{r7}
 3384 0056 7047     		bx	lr
 3385              		.cfi_endproc
 3386              	.LFE147:
 3388              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3389              		.align	2
 3390              		.global	RTC_TamperCmd
 3391              		.thumb
 3392              		.thumb_func
 3394              	RTC_TamperCmd:
 3395              	.LFB148:
2095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3396              		.loc 1 2105 0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 8
 3399              		@ frame_needed = 1, uses_anonymous_args = 0
 3400              		@ link register save eliminated.
 3401 0000 80B4     		push	{r7}
 3402              	.LCFI110:
 3403              		.cfi_def_cfa_offset 4
 3404              		.cfi_offset 7, -4
 3405 0002 83B0     		sub	sp, sp, #12
 3406              	.LCFI111:
 3407              		.cfi_def_cfa_offset 16
 3408 0004 00AF     		add	r7, sp, #0
 3409              	.LCFI112:
 3410              		.cfi_def_cfa_register 7
 3411 0006 7860     		str	r0, [r7, #4]
 3412 0008 0B46     		mov	r3, r1
 3413 000a FB70     		strb	r3, [r7, #3]
2106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3414              		.loc 1 2110 0
 3415 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3416 000e 002B     		cmp	r3, #0
 3417 0010 0CD0     		beq	.L127
2111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3418              		.loc 1 2113 0
 3419 0012 4FF42053 		mov	r3, #10240
 3420 0016 C4F20003 		movt	r3, 16384
 3421 001a 4FF42052 		mov	r2, #10240
 3422 001e C4F20002 		movt	r2, 16384
 3423 0022 116C     		ldr	r1, [r2, #64]
 3424 0024 7A68     		ldr	r2, [r7, #4]
 3425 0026 0A43     		orrs	r2, r2, r1
 3426 0028 1A64     		str	r2, [r3, #64]
 3427 002a 0DE0     		b	.L126
 3428              	.L127:
2114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3429              		.loc 1 2118 0
 3430 002c 4FF42053 		mov	r3, #10240
 3431 0030 C4F20003 		movt	r3, 16384
 3432 0034 4FF42052 		mov	r2, #10240
 3433 0038 C4F20002 		movt	r2, 16384
 3434 003c 116C     		ldr	r1, [r2, #64]
 3435 003e 7A68     		ldr	r2, [r7, #4]
 3436 0040 6FEA0202 		mvn	r2, r2
 3437 0044 0A40     		ands	r2, r2, r1
 3438 0046 1A64     		str	r2, [r3, #64]
 3439              	.L126:
2119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3440              		.loc 1 2120 0
 3441 0048 07F10C07 		add	r7, r7, #12
 3442 004c BD46     		mov	sp, r7
 3443 004e 80BC     		pop	{r7}
 3444 0050 7047     		bx	lr
 3445              		.cfi_endproc
 3446              	.LFE148:
 3448 0052 00BF     		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3449              		.align	2
 3450              		.global	RTC_TamperFilterConfig
 3451              		.thumb
 3452              		.thumb_func
 3454              	RTC_TamperFilterConfig:
 3455              	.LFB149:
2121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3456              		.loc 1 2136 0
 3457              		.cfi_startproc
 3458              		@ args = 0, pretend = 0, frame = 8
 3459              		@ frame_needed = 1, uses_anonymous_args = 0
 3460              		@ link register save eliminated.
 3461 0000 80B4     		push	{r7}
 3462              	.LCFI113:
 3463              		.cfi_def_cfa_offset 4
 3464              		.cfi_offset 7, -4
 3465 0002 83B0     		sub	sp, sp, #12
 3466              	.LCFI114:
 3467              		.cfi_def_cfa_offset 16
 3468 0004 00AF     		add	r7, sp, #0
 3469              	.LCFI115:
 3470              		.cfi_def_cfa_register 7
 3471 0006 7860     		str	r0, [r7, #4]
2137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3472              		.loc 1 2141 0
 3473 0008 4FF42053 		mov	r3, #10240
 3474 000c C4F20003 		movt	r3, 16384
 3475 0010 4FF42052 		mov	r2, #10240
 3476 0014 C4F20002 		movt	r2, 16384
 3477 0018 126C     		ldr	r2, [r2, #64]
 3478 001a 22F4C052 		bic	r2, r2, #6144
 3479 001e 1A64     		str	r2, [r3, #64]
2142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3480              		.loc 1 2144 0
 3481 0020 4FF42053 		mov	r3, #10240
 3482 0024 C4F20003 		movt	r3, 16384
 3483 0028 4FF42052 		mov	r2, #10240
 3484 002c C4F20002 		movt	r2, 16384
 3485 0030 116C     		ldr	r1, [r2, #64]
 3486 0032 7A68     		ldr	r2, [r7, #4]
 3487 0034 0A43     		orrs	r2, r2, r1
 3488 0036 1A64     		str	r2, [r3, #64]
2145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3489              		.loc 1 2145 0
 3490 0038 07F10C07 		add	r7, r7, #12
 3491 003c BD46     		mov	sp, r7
 3492 003e 80BC     		pop	{r7}
 3493 0040 7047     		bx	lr
 3494              		.cfi_endproc
 3495              	.LFE149:
 3497              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3498              		.align	2
 3499              		.global	RTC_TamperSamplingFreqConfig
 3500              		.thumb
 3501              		.thumb_func
 3503              	RTC_TamperSamplingFreqConfig:
 3504              	.LFB150:
2146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3505              		.loc 1 2170 0
 3506              		.cfi_startproc
 3507              		@ args = 0, pretend = 0, frame = 8
 3508              		@ frame_needed = 1, uses_anonymous_args = 0
 3509              		@ link register save eliminated.
 3510 0000 80B4     		push	{r7}
 3511              	.LCFI116:
 3512              		.cfi_def_cfa_offset 4
 3513              		.cfi_offset 7, -4
 3514 0002 83B0     		sub	sp, sp, #12
 3515              	.LCFI117:
 3516              		.cfi_def_cfa_offset 16
 3517 0004 00AF     		add	r7, sp, #0
 3518              	.LCFI118:
 3519              		.cfi_def_cfa_register 7
 3520 0006 7860     		str	r0, [r7, #4]
2171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3521              		.loc 1 2175 0
 3522 0008 4FF42053 		mov	r3, #10240
 3523 000c C4F20003 		movt	r3, 16384
 3524 0010 4FF42052 		mov	r2, #10240
 3525 0014 C4F20002 		movt	r2, 16384
 3526 0018 126C     		ldr	r2, [r2, #64]
 3527 001a 22F4E062 		bic	r2, r2, #1792
 3528 001e 1A64     		str	r2, [r3, #64]
2176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3529              		.loc 1 2178 0
 3530 0020 4FF42053 		mov	r3, #10240
 3531 0024 C4F20003 		movt	r3, 16384
 3532 0028 4FF42052 		mov	r2, #10240
 3533 002c C4F20002 		movt	r2, 16384
 3534 0030 116C     		ldr	r1, [r2, #64]
 3535 0032 7A68     		ldr	r2, [r7, #4]
 3536 0034 0A43     		orrs	r2, r2, r1
 3537 0036 1A64     		str	r2, [r3, #64]
2179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3538              		.loc 1 2179 0
 3539 0038 07F10C07 		add	r7, r7, #12
 3540 003c BD46     		mov	sp, r7
 3541 003e 80BC     		pop	{r7}
 3542 0040 7047     		bx	lr
 3543              		.cfi_endproc
 3544              	.LFE150:
 3546              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3547              		.align	2
 3548              		.global	RTC_TamperPinsPrechargeDuration
 3549              		.thumb
 3550              		.thumb_func
 3552              	RTC_TamperPinsPrechargeDuration:
 3553              	.LFB151:
2180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3554              		.loc 1 2193 0
 3555              		.cfi_startproc
 3556              		@ args = 0, pretend = 0, frame = 8
 3557              		@ frame_needed = 1, uses_anonymous_args = 0
 3558              		@ link register save eliminated.
 3559 0000 80B4     		push	{r7}
 3560              	.LCFI119:
 3561              		.cfi_def_cfa_offset 4
 3562              		.cfi_offset 7, -4
 3563 0002 83B0     		sub	sp, sp, #12
 3564              	.LCFI120:
 3565              		.cfi_def_cfa_offset 16
 3566 0004 00AF     		add	r7, sp, #0
 3567              	.LCFI121:
 3568              		.cfi_def_cfa_register 7
 3569 0006 7860     		str	r0, [r7, #4]
2194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3570              		.loc 1 2198 0
 3571 0008 4FF42053 		mov	r3, #10240
 3572 000c C4F20003 		movt	r3, 16384
 3573 0010 4FF42052 		mov	r2, #10240
 3574 0014 C4F20002 		movt	r2, 16384
 3575 0018 126C     		ldr	r2, [r2, #64]
 3576 001a 22F4C042 		bic	r2, r2, #24576
 3577 001e 1A64     		str	r2, [r3, #64]
2199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3578              		.loc 1 2201 0
 3579 0020 4FF42053 		mov	r3, #10240
 3580 0024 C4F20003 		movt	r3, 16384
 3581 0028 4FF42052 		mov	r2, #10240
 3582 002c C4F20002 		movt	r2, 16384
 3583 0030 116C     		ldr	r1, [r2, #64]
 3584 0032 7A68     		ldr	r2, [r7, #4]
 3585 0034 0A43     		orrs	r2, r2, r1
 3586 0036 1A64     		str	r2, [r3, #64]
2202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3587              		.loc 1 2202 0
 3588 0038 07F10C07 		add	r7, r7, #12
 3589 003c BD46     		mov	sp, r7
 3590 003e 80BC     		pop	{r7}
 3591 0040 7047     		bx	lr
 3592              		.cfi_endproc
 3593              	.LFE151:
 3595              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3596              		.align	2
 3597              		.global	RTC_TimeStampOnTamperDetectionCmd
 3598              		.thumb
 3599              		.thumb_func
 3601              	RTC_TimeStampOnTamperDetectionCmd:
 3602              	.LFB152:
2203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3603              		.loc 1 2213 0
 3604              		.cfi_startproc
 3605              		@ args = 0, pretend = 0, frame = 8
 3606              		@ frame_needed = 1, uses_anonymous_args = 0
 3607              		@ link register save eliminated.
 3608 0000 80B4     		push	{r7}
 3609              	.LCFI122:
 3610              		.cfi_def_cfa_offset 4
 3611              		.cfi_offset 7, -4
 3612 0002 83B0     		sub	sp, sp, #12
 3613              	.LCFI123:
 3614              		.cfi_def_cfa_offset 16
 3615 0004 00AF     		add	r7, sp, #0
 3616              	.LCFI124:
 3617              		.cfi_def_cfa_register 7
 3618 0006 0346     		mov	r3, r0
 3619 0008 FB71     		strb	r3, [r7, #7]
2214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3620              		.loc 1 2217 0
 3621 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3622 000c 002B     		cmp	r3, #0
 3623 000e 0CD0     		beq	.L133
2218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3624              		.loc 1 2220 0
 3625 0010 4FF42053 		mov	r3, #10240
 3626 0014 C4F20003 		movt	r3, 16384
 3627 0018 4FF42052 		mov	r2, #10240
 3628 001c C4F20002 		movt	r2, 16384
 3629 0020 126C     		ldr	r2, [r2, #64]
 3630 0022 42F08002 		orr	r2, r2, #128
 3631 0026 1A64     		str	r2, [r3, #64]
 3632 0028 0BE0     		b	.L132
 3633              	.L133:
2221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3634              		.loc 1 2225 0
 3635 002a 4FF42053 		mov	r3, #10240
 3636 002e C4F20003 		movt	r3, 16384
 3637 0032 4FF42052 		mov	r2, #10240
 3638 0036 C4F20002 		movt	r2, 16384
 3639 003a 126C     		ldr	r2, [r2, #64]
 3640 003c 22F08002 		bic	r2, r2, #128
 3641 0040 1A64     		str	r2, [r3, #64]
 3642              	.L132:
2226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3643              		.loc 1 2227 0
 3644 0042 07F10C07 		add	r7, r7, #12
 3645 0046 BD46     		mov	sp, r7
 3646 0048 80BC     		pop	{r7}
 3647 004a 7047     		bx	lr
 3648              		.cfi_endproc
 3649              	.LFE152:
 3651              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3652              		.align	2
 3653              		.global	RTC_TamperPullUpCmd
 3654              		.thumb
 3655              		.thumb_func
 3657              	RTC_TamperPullUpCmd:
 3658              	.LFB153:
2228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3659              		.loc 1 2236 0
 3660              		.cfi_startproc
 3661              		@ args = 0, pretend = 0, frame = 8
 3662              		@ frame_needed = 1, uses_anonymous_args = 0
 3663              		@ link register save eliminated.
 3664 0000 80B4     		push	{r7}
 3665              	.LCFI125:
 3666              		.cfi_def_cfa_offset 4
 3667              		.cfi_offset 7, -4
 3668 0002 83B0     		sub	sp, sp, #12
 3669              	.LCFI126:
 3670              		.cfi_def_cfa_offset 16
 3671 0004 00AF     		add	r7, sp, #0
 3672              	.LCFI127:
 3673              		.cfi_def_cfa_register 7
 3674 0006 0346     		mov	r3, r0
 3675 0008 FB71     		strb	r3, [r7, #7]
2237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3676              		.loc 1 2240 0
 3677 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3678 000c 002B     		cmp	r3, #0
 3679 000e 0CD0     		beq	.L136
2241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3680              		.loc 1 2243 0
 3681 0010 4FF42053 		mov	r3, #10240
 3682 0014 C4F20003 		movt	r3, 16384
 3683 0018 4FF42052 		mov	r2, #10240
 3684 001c C4F20002 		movt	r2, 16384
 3685 0020 126C     		ldr	r2, [r2, #64]
 3686 0022 22F40042 		bic	r2, r2, #32768
 3687 0026 1A64     		str	r2, [r3, #64]
 3688 0028 0BE0     		b	.L135
 3689              	.L136:
2244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3690              		.loc 1 2248 0
 3691 002a 4FF42053 		mov	r3, #10240
 3692 002e C4F20003 		movt	r3, 16384
 3693 0032 4FF42052 		mov	r2, #10240
 3694 0036 C4F20002 		movt	r2, 16384
 3695 003a 126C     		ldr	r2, [r2, #64]
 3696 003c 42F40042 		orr	r2, r2, #32768
 3697 0040 1A64     		str	r2, [r3, #64]
 3698              	.L135:
2249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3699              		.loc 1 2250 0
 3700 0042 07F10C07 		add	r7, r7, #12
 3701 0046 BD46     		mov	sp, r7
 3702 0048 80BC     		pop	{r7}
 3703 004a 7047     		bx	lr
 3704              		.cfi_endproc
 3705              	.LFE153:
 3707              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3708              		.align	2
 3709              		.global	RTC_WriteBackupRegister
 3710              		.thumb
 3711              		.thumb_func
 3713              	RTC_WriteBackupRegister:
 3714              	.LFB154:
2251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3715              		.loc 1 2277 0
 3716              		.cfi_startproc
 3717              		@ args = 0, pretend = 0, frame = 16
 3718              		@ frame_needed = 1, uses_anonymous_args = 0
 3719              		@ link register save eliminated.
 3720 0000 80B4     		push	{r7}
 3721              	.LCFI128:
 3722              		.cfi_def_cfa_offset 4
 3723              		.cfi_offset 7, -4
 3724 0002 85B0     		sub	sp, sp, #20
 3725              	.LCFI129:
 3726              		.cfi_def_cfa_offset 24
 3727 0004 00AF     		add	r7, sp, #0
 3728              	.LCFI130:
 3729              		.cfi_def_cfa_register 7
 3730 0006 7860     		str	r0, [r7, #4]
 3731 0008 3960     		str	r1, [r7, #0]
2278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3732              		.loc 1 2278 0
 3733 000a 4FF00003 		mov	r3, #0
 3734 000e FB60     		str	r3, [r7, #12]
2279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3735              		.loc 1 2283 0
 3736 0010 42F65003 		movw	r3, #10320
 3737 0014 C4F20003 		movt	r3, 16384
 3738 0018 FB60     		str	r3, [r7, #12]
2284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3739              		.loc 1 2284 0
 3740 001a 7B68     		ldr	r3, [r7, #4]
 3741 001c 4FEA8302 		lsl	r2, r3, #2
 3742 0020 FB68     		ldr	r3, [r7, #12]
 3743 0022 D318     		adds	r3, r2, r3
 3744 0024 FB60     		str	r3, [r7, #12]
2285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3745              		.loc 1 2287 0
 3746 0026 FB68     		ldr	r3, [r7, #12]
 3747 0028 3A68     		ldr	r2, [r7, #0]
 3748 002a 1A60     		str	r2, [r3, #0]
2288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3749              		.loc 1 2288 0
 3750 002c 07F11407 		add	r7, r7, #20
 3751 0030 BD46     		mov	sp, r7
 3752 0032 80BC     		pop	{r7}
 3753 0034 7047     		bx	lr
 3754              		.cfi_endproc
 3755              	.LFE154:
 3757 0036 00BF     		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3758              		.align	2
 3759              		.global	RTC_ReadBackupRegister
 3760              		.thumb
 3761              		.thumb_func
 3763              	RTC_ReadBackupRegister:
 3764              	.LFB155:
2289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3765              		.loc 1 2298 0
 3766              		.cfi_startproc
 3767              		@ args = 0, pretend = 0, frame = 16
 3768              		@ frame_needed = 1, uses_anonymous_args = 0
 3769              		@ link register save eliminated.
 3770 0000 80B4     		push	{r7}
 3771              	.LCFI131:
 3772              		.cfi_def_cfa_offset 4
 3773              		.cfi_offset 7, -4
 3774 0002 85B0     		sub	sp, sp, #20
 3775              	.LCFI132:
 3776              		.cfi_def_cfa_offset 24
 3777 0004 00AF     		add	r7, sp, #0
 3778              	.LCFI133:
 3779              		.cfi_def_cfa_register 7
 3780 0006 7860     		str	r0, [r7, #4]
2299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3781              		.loc 1 2299 0
 3782 0008 4FF00003 		mov	r3, #0
 3783 000c FB60     		str	r3, [r7, #12]
2300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3784              		.loc 1 2304 0
 3785 000e 42F65003 		movw	r3, #10320
 3786 0012 C4F20003 		movt	r3, 16384
 3787 0016 FB60     		str	r3, [r7, #12]
2305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3788              		.loc 1 2305 0
 3789 0018 7B68     		ldr	r3, [r7, #4]
 3790 001a 4FEA8302 		lsl	r2, r3, #2
 3791 001e FB68     		ldr	r3, [r7, #12]
 3792 0020 D318     		adds	r3, r2, r3
 3793 0022 FB60     		str	r3, [r7, #12]
2306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3794              		.loc 1 2308 0
 3795 0024 FB68     		ldr	r3, [r7, #12]
 3796 0026 1B68     		ldr	r3, [r3, #0]
2309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3797              		.loc 1 2309 0
 3798 0028 1846     		mov	r0, r3
 3799 002a 07F11407 		add	r7, r7, #20
 3800 002e BD46     		mov	sp, r7
 3801 0030 80BC     		pop	{r7}
 3802 0032 7047     		bx	lr
 3803              		.cfi_endproc
 3804              	.LFE155:
 3806              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3807              		.align	2
 3808              		.global	RTC_TamperPinSelection
 3809              		.thumb
 3810              		.thumb_func
 3812              	RTC_TamperPinSelection:
 3813              	.LFB156:
2310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3814              		.loc 1 2338 0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 8
 3817              		@ frame_needed = 1, uses_anonymous_args = 0
 3818              		@ link register save eliminated.
 3819 0000 80B4     		push	{r7}
 3820              	.LCFI134:
 3821              		.cfi_def_cfa_offset 4
 3822              		.cfi_offset 7, -4
 3823 0002 83B0     		sub	sp, sp, #12
 3824              	.LCFI135:
 3825              		.cfi_def_cfa_offset 16
 3826 0004 00AF     		add	r7, sp, #0
 3827              	.LCFI136:
 3828              		.cfi_def_cfa_register 7
 3829 0006 7860     		str	r0, [r7, #4]
2339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3830              		.loc 1 2342 0
 3831 0008 4FF42053 		mov	r3, #10240
 3832 000c C4F20003 		movt	r3, 16384
 3833 0010 4FF42052 		mov	r2, #10240
 3834 0014 C4F20002 		movt	r2, 16384
 3835 0018 126C     		ldr	r2, [r2, #64]
 3836 001a 22F48032 		bic	r2, r2, #65536
 3837 001e 1A64     		str	r2, [r3, #64]
2343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3838              		.loc 1 2343 0
 3839 0020 4FF42053 		mov	r3, #10240
 3840 0024 C4F20003 		movt	r3, 16384
 3841 0028 4FF42052 		mov	r2, #10240
 3842 002c C4F20002 		movt	r2, 16384
 3843 0030 116C     		ldr	r1, [r2, #64]
 3844 0032 7A68     		ldr	r2, [r7, #4]
 3845 0034 0A43     		orrs	r2, r2, r1
 3846 0036 1A64     		str	r2, [r3, #64]
2344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3847              		.loc 1 2344 0
 3848 0038 07F10C07 		add	r7, r7, #12
 3849 003c BD46     		mov	sp, r7
 3850 003e 80BC     		pop	{r7}
 3851 0040 7047     		bx	lr
 3852              		.cfi_endproc
 3853              	.LFE156:
 3855              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3856              		.align	2
 3857              		.global	RTC_TimeStampPinSelection
 3858              		.thumb
 3859              		.thumb_func
 3861              	RTC_TimeStampPinSelection:
 3862              	.LFB157:
2345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3863              		.loc 1 2355 0
 3864              		.cfi_startproc
 3865              		@ args = 0, pretend = 0, frame = 8
 3866              		@ frame_needed = 1, uses_anonymous_args = 0
 3867              		@ link register save eliminated.
 3868 0000 80B4     		push	{r7}
 3869              	.LCFI137:
 3870              		.cfi_def_cfa_offset 4
 3871              		.cfi_offset 7, -4
 3872 0002 83B0     		sub	sp, sp, #12
 3873              	.LCFI138:
 3874              		.cfi_def_cfa_offset 16
 3875 0004 00AF     		add	r7, sp, #0
 3876              	.LCFI139:
 3877              		.cfi_def_cfa_register 7
 3878 0006 7860     		str	r0, [r7, #4]
2356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3879              		.loc 1 2359 0
 3880 0008 4FF42053 		mov	r3, #10240
 3881 000c C4F20003 		movt	r3, 16384
 3882 0010 4FF42052 		mov	r2, #10240
 3883 0014 C4F20002 		movt	r2, 16384
 3884 0018 126C     		ldr	r2, [r2, #64]
 3885 001a 22F40032 		bic	r2, r2, #131072
 3886 001e 1A64     		str	r2, [r3, #64]
2360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3887              		.loc 1 2360 0
 3888 0020 4FF42053 		mov	r3, #10240
 3889 0024 C4F20003 		movt	r3, 16384
 3890 0028 4FF42052 		mov	r2, #10240
 3891 002c C4F20002 		movt	r2, 16384
 3892 0030 116C     		ldr	r1, [r2, #64]
 3893 0032 7A68     		ldr	r2, [r7, #4]
 3894 0034 0A43     		orrs	r2, r2, r1
 3895 0036 1A64     		str	r2, [r3, #64]
2361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3896              		.loc 1 2361 0
 3897 0038 07F10C07 		add	r7, r7, #12
 3898 003c BD46     		mov	sp, r7
 3899 003e 80BC     		pop	{r7}
 3900 0040 7047     		bx	lr
 3901              		.cfi_endproc
 3902              	.LFE157:
 3904              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3905              		.align	2
 3906              		.global	RTC_OutputTypeConfig
 3907              		.thumb
 3908              		.thumb_func
 3910              	RTC_OutputTypeConfig:
 3911              	.LFB158:
2362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3912              		.loc 1 2374 0
 3913              		.cfi_startproc
 3914              		@ args = 0, pretend = 0, frame = 8
 3915              		@ frame_needed = 1, uses_anonymous_args = 0
 3916              		@ link register save eliminated.
 3917 0000 80B4     		push	{r7}
 3918              	.LCFI140:
 3919              		.cfi_def_cfa_offset 4
 3920              		.cfi_offset 7, -4
 3921 0002 83B0     		sub	sp, sp, #12
 3922              	.LCFI141:
 3923              		.cfi_def_cfa_offset 16
 3924 0004 00AF     		add	r7, sp, #0
 3925              	.LCFI142:
 3926              		.cfi_def_cfa_register 7
 3927 0006 7860     		str	r0, [r7, #4]
2375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3928              		.loc 1 2378 0
 3929 0008 4FF42053 		mov	r3, #10240
 3930 000c C4F20003 		movt	r3, 16384
 3931 0010 4FF42052 		mov	r2, #10240
 3932 0014 C4F20002 		movt	r2, 16384
 3933 0018 126C     		ldr	r2, [r2, #64]
 3934 001a 22F48022 		bic	r2, r2, #262144
 3935 001e 1A64     		str	r2, [r3, #64]
2379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3936              		.loc 1 2379 0
 3937 0020 4FF42053 		mov	r3, #10240
 3938 0024 C4F20003 		movt	r3, 16384
 3939 0028 4FF42052 		mov	r2, #10240
 3940 002c C4F20002 		movt	r2, 16384
 3941 0030 116C     		ldr	r1, [r2, #64]
 3942 0032 7A68     		ldr	r2, [r7, #4]
 3943 0034 0A43     		orrs	r2, r2, r1
 3944 0036 1A64     		str	r2, [r3, #64]
2380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3945              		.loc 1 2380 0
 3946 0038 07F10C07 		add	r7, r7, #12
 3947 003c BD46     		mov	sp, r7
 3948 003e 80BC     		pop	{r7}
 3949 0040 7047     		bx	lr
 3950              		.cfi_endproc
 3951              	.LFE158:
 3953              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3954              		.align	2
 3955              		.global	RTC_SynchroShiftConfig
 3956              		.thumb
 3957              		.thumb_func
 3959              	RTC_SynchroShiftConfig:
 3960              	.LFB159:
2381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3961              		.loc 1 2412 0
 3962              		.cfi_startproc
 3963              		@ args = 0, pretend = 0, frame = 16
 3964              		@ frame_needed = 1, uses_anonymous_args = 0
 3965 0000 80B5     		push	{r7, lr}
 3966              	.LCFI143:
 3967              		.cfi_def_cfa_offset 8
 3968              		.cfi_offset 14, -4
 3969              		.cfi_offset 7, -8
 3970 0002 84B0     		sub	sp, sp, #16
 3971              	.LCFI144:
 3972              		.cfi_def_cfa_offset 24
 3973 0004 00AF     		add	r7, sp, #0
 3974              	.LCFI145:
 3975              		.cfi_def_cfa_register 7
 3976 0006 7860     		str	r0, [r7, #4]
 3977 0008 3960     		str	r1, [r7, #0]
2413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3978              		.loc 1 2413 0
 3979 000a 4FF00003 		mov	r3, #0
 3980 000e FB73     		strb	r3, [r7, #15]
2414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3981              		.loc 1 2414 0
 3982 0010 4FF00003 		mov	r3, #0
 3983 0014 BB60     		str	r3, [r7, #8]
2415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3984              		.loc 1 2421 0
 3985 0016 4FF42053 		mov	r3, #10240
 3986 001a C4F20003 		movt	r3, 16384
 3987 001e 4FF0CA02 		mov	r2, #202
 3988 0022 5A62     		str	r2, [r3, #36]
2422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3989              		.loc 1 2422 0
 3990 0024 4FF42053 		mov	r3, #10240
 3991 0028 C4F20003 		movt	r3, 16384
 3992 002c 4FF05302 		mov	r2, #83
 3993 0030 5A62     		str	r2, [r3, #36]
2423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3994              		.loc 1 2425 0
 3995 0032 4FF42053 		mov	r3, #10240
 3996 0036 C4F20003 		movt	r3, 16384
 3997 003a DB68     		ldr	r3, [r3, #12]
 3998 003c 03F00803 		and	r3, r3, #8
 3999 0040 002B     		cmp	r3, #0
 4000 0042 11D0     		beq	.L144
2426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4001              		.loc 1 2428 0
 4002 0044 03E0     		b	.L145
 4003              	.L146:
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 4004              		.loc 1 2430 0
 4005 0046 BB68     		ldr	r3, [r7, #8]
 4006 0048 03F10103 		add	r3, r3, #1
 4007 004c BB60     		str	r3, [r7, #8]
 4008              	.L145:
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4009              		.loc 1 2428 0 discriminator 1
 4010 004e 4FF42053 		mov	r3, #10240
 4011 0052 C4F20003 		movt	r3, 16384
 4012 0056 DB68     		ldr	r3, [r3, #12]
 4013 0058 03F00803 		and	r3, r3, #8
 4014 005c 002B     		cmp	r3, #0
 4015 005e 03D0     		beq	.L144
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4016              		.loc 1 2428 0 is_stmt 0 discriminator 2
 4017 0060 BB68     		ldr	r3, [r7, #8]
 4018 0062 B3F5805F 		cmp	r3, #4096
 4019 0066 EED1     		bne	.L146
 4020              	.L144:
2431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4021              		.loc 1 2435 0 is_stmt 1
 4022 0068 4FF42053 		mov	r3, #10240
 4023 006c C4F20003 		movt	r3, 16384
 4024 0070 DB68     		ldr	r3, [r3, #12]
 4025 0072 03F00803 		and	r3, r3, #8
 4026 0076 002B     		cmp	r3, #0
 4027 0078 21D1     		bne	.L147
2436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4028              		.loc 1 2438 0
 4029 007a 4FF42053 		mov	r3, #10240
 4030 007e C4F20003 		movt	r3, 16384
 4031 0082 9B68     		ldr	r3, [r3, #8]
 4032 0084 03F01003 		and	r3, r3, #16
 4033 0088 002B     		cmp	r3, #0
 4034 008a 14D1     		bne	.L148
2439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4035              		.loc 1 2441 0
 4036 008c 4FF42053 		mov	r3, #10240
 4037 0090 C4F20003 		movt	r3, 16384
 4038 0094 3968     		ldr	r1, [r7, #0]
 4039 0096 7A68     		ldr	r2, [r7, #4]
 4040 0098 0A43     		orrs	r2, r2, r1
 4041 009a DA62     		str	r2, [r3, #44]
2442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4042              		.loc 1 2443 0
 4043 009c FFF7FEFF 		bl	RTC_WaitForSynchro
 4044 00a0 0346     		mov	r3, r0
 4045 00a2 002B     		cmp	r3, #0
 4046 00a4 03D1     		bne	.L149
2444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4047              		.loc 1 2445 0
 4048 00a6 4FF00003 		mov	r3, #0
 4049 00aa FB73     		strb	r3, [r7, #15]
 4050 00ac 0AE0     		b	.L150
 4051              	.L149:
2446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4052              		.loc 1 2449 0
 4053 00ae 4FF00103 		mov	r3, #1
 4054 00b2 FB73     		strb	r3, [r7, #15]
 4055 00b4 06E0     		b	.L150
 4056              	.L148:
2450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4057              		.loc 1 2454 0
 4058 00b6 4FF00003 		mov	r3, #0
 4059 00ba FB73     		strb	r3, [r7, #15]
 4060 00bc 02E0     		b	.L150
 4061              	.L147:
2455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4062              		.loc 1 2459 0
 4063 00be 4FF00003 		mov	r3, #0
 4064 00c2 FB73     		strb	r3, [r7, #15]
 4065              	.L150:
2460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4066              		.loc 1 2463 0
 4067 00c4 4FF42053 		mov	r3, #10240
 4068 00c8 C4F20003 		movt	r3, 16384
 4069 00cc 4FF0FF02 		mov	r2, #255
 4070 00d0 5A62     		str	r2, [r3, #36]
2464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4071              		.loc 1 2465 0
 4072 00d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4073              		.loc 1 2466 0
 4074 00d4 1846     		mov	r0, r3
 4075 00d6 07F11007 		add	r7, r7, #16
 4076 00da BD46     		mov	sp, r7
 4077 00dc 80BD     		pop	{r7, pc}
 4078              		.cfi_endproc
 4079              	.LFE159:
 4081 00de 00BF     		.section	.text.RTC_ITConfig,"ax",%progbits
 4082              		.align	2
 4083              		.global	RTC_ITConfig
 4084              		.thumb
 4085              		.thumb_func
 4087              	RTC_ITConfig:
 4088              	.LFB160:
2467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4089              		.loc 1 2531 0
 4090              		.cfi_startproc
 4091              		@ args = 0, pretend = 0, frame = 8
 4092              		@ frame_needed = 1, uses_anonymous_args = 0
 4093              		@ link register save eliminated.
 4094 0000 80B4     		push	{r7}
 4095              	.LCFI146:
 4096              		.cfi_def_cfa_offset 4
 4097              		.cfi_offset 7, -4
 4098 0002 83B0     		sub	sp, sp, #12
 4099              	.LCFI147:
 4100              		.cfi_def_cfa_offset 16
 4101 0004 00AF     		add	r7, sp, #0
 4102              	.LCFI148:
 4103              		.cfi_def_cfa_register 7
 4104 0006 7860     		str	r0, [r7, #4]
 4105 0008 0B46     		mov	r3, r1
 4106 000a FB70     		strb	r3, [r7, #3]
2532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4107              		.loc 1 2537 0
 4108 000c 4FF42053 		mov	r3, #10240
 4109 0010 C4F20003 		movt	r3, 16384
 4110 0014 4FF0CA02 		mov	r2, #202
 4111 0018 5A62     		str	r2, [r3, #36]
2538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4112              		.loc 1 2538 0
 4113 001a 4FF42053 		mov	r3, #10240
 4114 001e C4F20003 		movt	r3, 16384
 4115 0022 4FF05302 		mov	r2, #83
 4116 0026 5A62     		str	r2, [r3, #36]
2539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4117              		.loc 1 2540 0
 4118 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4119 002a 002B     		cmp	r3, #0
 4120 002c 1CD0     		beq	.L152
2541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4121              		.loc 1 2543 0
 4122 002e 4FF42053 		mov	r3, #10240
 4123 0032 C4F20003 		movt	r3, 16384
 4124 0036 4FF42052 		mov	r2, #10240
 4125 003a C4F20002 		movt	r2, 16384
 4126 003e 9168     		ldr	r1, [r2, #8]
 4127 0040 7A68     		ldr	r2, [r7, #4]
 4128 0042 22F00402 		bic	r2, r2, #4
 4129 0046 0A43     		orrs	r2, r2, r1
 4130 0048 9A60     		str	r2, [r3, #8]
2544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4131              		.loc 1 2545 0
 4132 004a 4FF42053 		mov	r3, #10240
 4133 004e C4F20003 		movt	r3, 16384
 4134 0052 4FF42052 		mov	r2, #10240
 4135 0056 C4F20002 		movt	r2, 16384
 4136 005a 116C     		ldr	r1, [r2, #64]
 4137 005c 7A68     		ldr	r2, [r7, #4]
 4138 005e 02F00402 		and	r2, r2, #4
 4139 0062 0A43     		orrs	r2, r2, r1
 4140 0064 1A64     		str	r2, [r3, #64]
 4141 0066 1FE0     		b	.L153
 4142              	.L152:
2546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4143              		.loc 1 2550 0
 4144 0068 4FF42053 		mov	r3, #10240
 4145 006c C4F20003 		movt	r3, 16384
 4146 0070 4FF42052 		mov	r2, #10240
 4147 0074 C4F20002 		movt	r2, 16384
 4148 0078 9168     		ldr	r1, [r2, #8]
 4149 007a 7A68     		ldr	r2, [r7, #4]
 4150 007c 22F00402 		bic	r2, r2, #4
 4151 0080 6FEA0202 		mvn	r2, r2
 4152 0084 0A40     		ands	r2, r2, r1
 4153 0086 9A60     		str	r2, [r3, #8]
2551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4154              		.loc 1 2552 0
 4155 0088 4FF42053 		mov	r3, #10240
 4156 008c C4F20003 		movt	r3, 16384
 4157 0090 4FF42052 		mov	r2, #10240
 4158 0094 C4F20002 		movt	r2, 16384
 4159 0098 116C     		ldr	r1, [r2, #64]
 4160 009a 7A68     		ldr	r2, [r7, #4]
 4161 009c 02F00402 		and	r2, r2, #4
 4162 00a0 6FEA0202 		mvn	r2, r2
 4163 00a4 0A40     		ands	r2, r2, r1
 4164 00a6 1A64     		str	r2, [r3, #64]
 4165              	.L153:
2553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4166              		.loc 1 2555 0
 4167 00a8 4FF42053 		mov	r3, #10240
 4168 00ac C4F20003 		movt	r3, 16384
 4169 00b0 4FF0FF02 		mov	r2, #255
 4170 00b4 5A62     		str	r2, [r3, #36]
2556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4171              		.loc 1 2556 0
 4172 00b6 07F10C07 		add	r7, r7, #12
 4173 00ba BD46     		mov	sp, r7
 4174 00bc 80BC     		pop	{r7}
 4175 00be 7047     		bx	lr
 4176              		.cfi_endproc
 4177              	.LFE160:
 4179              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4180              		.align	2
 4181              		.global	RTC_GetFlagStatus
 4182              		.thumb
 4183              		.thumb_func
 4185              	RTC_GetFlagStatus:
 4186              	.LFB161:
2557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4187              		.loc 1 2577 0
 4188              		.cfi_startproc
 4189              		@ args = 0, pretend = 0, frame = 16
 4190              		@ frame_needed = 1, uses_anonymous_args = 0
 4191              		@ link register save eliminated.
 4192 0000 80B4     		push	{r7}
 4193              	.LCFI149:
 4194              		.cfi_def_cfa_offset 4
 4195              		.cfi_offset 7, -4
 4196 0002 85B0     		sub	sp, sp, #20
 4197              	.LCFI150:
 4198              		.cfi_def_cfa_offset 24
 4199 0004 00AF     		add	r7, sp, #0
 4200              	.LCFI151:
 4201              		.cfi_def_cfa_register 7
 4202 0006 7860     		str	r0, [r7, #4]
2578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4203              		.loc 1 2578 0
 4204 0008 4FF00003 		mov	r3, #0
 4205 000c FB73     		strb	r3, [r7, #15]
2579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4206              		.loc 1 2579 0
 4207 000e 4FF00003 		mov	r3, #0
 4208 0012 BB60     		str	r3, [r7, #8]
2580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4209              		.loc 1 2585 0
 4210 0014 4FF42053 		mov	r3, #10240
 4211 0018 C4F20003 		movt	r3, 16384
 4212 001c DA68     		ldr	r2, [r3, #12]
 4213 001e 43F67773 		movw	r3, #16247
 4214 0022 1340     		ands	r3, r3, r2
 4215 0024 BB60     		str	r3, [r7, #8]
2586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4216              		.loc 1 2588 0
 4217 0026 BA68     		ldr	r2, [r7, #8]
 4218 0028 7B68     		ldr	r3, [r7, #4]
 4219 002a 1340     		ands	r3, r3, r2
 4220 002c 002B     		cmp	r3, #0
 4221 002e 03D0     		beq	.L155
2589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4222              		.loc 1 2590 0
 4223 0030 4FF00103 		mov	r3, #1
 4224 0034 FB73     		strb	r3, [r7, #15]
 4225 0036 02E0     		b	.L156
 4226              	.L155:
2591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4227              		.loc 1 2594 0
 4228 0038 4FF00003 		mov	r3, #0
 4229 003c FB73     		strb	r3, [r7, #15]
 4230              	.L156:
2595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4231              		.loc 1 2596 0
 4232 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4233              		.loc 1 2597 0
 4234 0040 1846     		mov	r0, r3
 4235 0042 07F11407 		add	r7, r7, #20
 4236 0046 BD46     		mov	sp, r7
 4237 0048 80BC     		pop	{r7}
 4238 004a 7047     		bx	lr
 4239              		.cfi_endproc
 4240              	.LFE161:
 4242              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4243              		.align	2
 4244              		.global	RTC_ClearFlag
 4245              		.thumb
 4246              		.thumb_func
 4248              	RTC_ClearFlag:
 4249              	.LFB162:
2598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4250              		.loc 1 2613 0
 4251              		.cfi_startproc
 4252              		@ args = 0, pretend = 0, frame = 8
 4253              		@ frame_needed = 1, uses_anonymous_args = 0
 4254              		@ link register save eliminated.
 4255 0000 80B4     		push	{r7}
 4256              	.LCFI152:
 4257              		.cfi_def_cfa_offset 4
 4258              		.cfi_offset 7, -4
 4259 0002 83B0     		sub	sp, sp, #12
 4260              	.LCFI153:
 4261              		.cfi_def_cfa_offset 16
 4262 0004 00AF     		add	r7, sp, #0
 4263              	.LCFI154:
 4264              		.cfi_def_cfa_register 7
 4265 0006 7860     		str	r0, [r7, #4]
2614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4266              		.loc 1 2618 0
 4267 0008 4FF42053 		mov	r3, #10240
 4268 000c C4F20003 		movt	r3, 16384
 4269 0010 7A68     		ldr	r2, [r7, #4]
 4270 0012 4FEA0242 		lsl	r2, r2, #16
 4271 0016 4FEA1242 		lsr	r2, r2, #16
 4272 001a 42F08002 		orr	r2, r2, #128
 4273 001e 6FEA0201 		mvn	r1, r2
 4274 0022 4FF42052 		mov	r2, #10240
 4275 0026 C4F20002 		movt	r2, 16384
 4276 002a D268     		ldr	r2, [r2, #12]
 4277 002c 02F08002 		and	r2, r2, #128
 4278 0030 0A43     		orrs	r2, r2, r1
 4279 0032 DA60     		str	r2, [r3, #12]
2619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4280              		.loc 1 2619 0
 4281 0034 07F10C07 		add	r7, r7, #12
 4282 0038 BD46     		mov	sp, r7
 4283 003a 80BC     		pop	{r7}
 4284 003c 7047     		bx	lr
 4285              		.cfi_endproc
 4286              	.LFE162:
 4288 003e 00BF     		.section	.text.RTC_GetITStatus,"ax",%progbits
 4289              		.align	2
 4290              		.global	RTC_GetITStatus
 4291              		.thumb
 4292              		.thumb_func
 4294              	RTC_GetITStatus:
 4295              	.LFB163:
2620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4296              		.loc 1 2633 0
 4297              		.cfi_startproc
 4298              		@ args = 0, pretend = 0, frame = 24
 4299              		@ frame_needed = 1, uses_anonymous_args = 0
 4300              		@ link register save eliminated.
 4301 0000 80B4     		push	{r7}
 4302              	.LCFI155:
 4303              		.cfi_def_cfa_offset 4
 4304              		.cfi_offset 7, -4
 4305 0002 87B0     		sub	sp, sp, #28
 4306              	.LCFI156:
 4307              		.cfi_def_cfa_offset 32
 4308 0004 00AF     		add	r7, sp, #0
 4309              	.LCFI157:
 4310              		.cfi_def_cfa_register 7
 4311 0006 7860     		str	r0, [r7, #4]
2634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4312              		.loc 1 2634 0
 4313 0008 4FF00003 		mov	r3, #0
 4314 000c FB75     		strb	r3, [r7, #23]
2635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4315              		.loc 1 2635 0
 4316 000e 4FF00003 		mov	r3, #0
 4317 0012 3B61     		str	r3, [r7, #16]
 4318 0014 4FF00003 		mov	r3, #0
 4319 0018 FB60     		str	r3, [r7, #12]
2636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4320              		.loc 1 2641 0
 4321 001a 4FF42053 		mov	r3, #10240
 4322 001e C4F20003 		movt	r3, 16384
 4323 0022 1B6C     		ldr	r3, [r3, #64]
 4324 0024 03F00403 		and	r3, r3, #4
 4325 0028 3B61     		str	r3, [r7, #16]
2642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4326              		.loc 1 2644 0
 4327 002a 4FF42053 		mov	r3, #10240
 4328 002e C4F20003 		movt	r3, 16384
 4329 0032 9A68     		ldr	r2, [r3, #8]
 4330 0034 7B68     		ldr	r3, [r7, #4]
 4331 0036 1A40     		ands	r2, r2, r3
 4332 0038 7B68     		ldr	r3, [r7, #4]
 4333 003a 4FEAD331 		lsr	r1, r3, #15
 4334 003e 3B69     		ldr	r3, [r7, #16]
 4335 0040 0B40     		ands	r3, r3, r1
 4336 0042 1343     		orrs	r3, r3, r2
 4337 0044 FB60     		str	r3, [r7, #12]
2645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4338              		.loc 1 2647 0
 4339 0046 4FF42053 		mov	r3, #10240
 4340 004a C4F20003 		movt	r3, 16384
 4341 004e DA68     		ldr	r2, [r3, #12]
 4342 0050 7B68     		ldr	r3, [r7, #4]
 4343 0052 4FEA1313 		lsr	r3, r3, #4
 4344 0056 1340     		ands	r3, r3, r2
 4345 0058 3B61     		str	r3, [r7, #16]
2648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4346              		.loc 1 2650 0
 4347 005a FB68     		ldr	r3, [r7, #12]
 4348 005c 002B     		cmp	r3, #0
 4349 005e 0AD0     		beq	.L159
 4350              		.loc 1 2650 0 is_stmt 0 discriminator 1
 4351 0060 3B69     		ldr	r3, [r7, #16]
 4352 0062 4FEA0343 		lsl	r3, r3, #16
 4353 0066 4FEA1343 		lsr	r3, r3, #16
 4354 006a 002B     		cmp	r3, #0
 4355 006c 03D0     		beq	.L159
2651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4356              		.loc 1 2652 0 is_stmt 1
 4357 006e 4FF00103 		mov	r3, #1
 4358 0072 FB75     		strb	r3, [r7, #23]
 4359 0074 02E0     		b	.L160
 4360              	.L159:
2653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4361              		.loc 1 2656 0
 4362 0076 4FF00003 		mov	r3, #0
 4363 007a FB75     		strb	r3, [r7, #23]
 4364              	.L160:
2657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4365              		.loc 1 2658 0
 4366 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4367              		.loc 1 2659 0
 4368 007e 1846     		mov	r0, r3
 4369 0080 07F11C07 		add	r7, r7, #28
 4370 0084 BD46     		mov	sp, r7
 4371 0086 80BC     		pop	{r7}
 4372 0088 7047     		bx	lr
 4373              		.cfi_endproc
 4374              	.LFE163:
 4376 008a 00BF     		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4377              		.align	2
 4378              		.global	RTC_ClearITPendingBit
 4379              		.thumb
 4380              		.thumb_func
 4382              	RTC_ClearITPendingBit:
 4383              	.LFB164:
2660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4384              		.loc 1 2673 0
 4385              		.cfi_startproc
 4386              		@ args = 0, pretend = 0, frame = 16
 4387              		@ frame_needed = 1, uses_anonymous_args = 0
 4388              		@ link register save eliminated.
 4389 0000 80B4     		push	{r7}
 4390              	.LCFI158:
 4391              		.cfi_def_cfa_offset 4
 4392              		.cfi_offset 7, -4
 4393 0002 85B0     		sub	sp, sp, #20
 4394              	.LCFI159:
 4395              		.cfi_def_cfa_offset 24
 4396 0004 00AF     		add	r7, sp, #0
 4397              	.LCFI160:
 4398              		.cfi_def_cfa_register 7
 4399 0006 7860     		str	r0, [r7, #4]
2674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4400              		.loc 1 2674 0
 4401 0008 4FF00003 		mov	r3, #0
 4402 000c FB60     		str	r3, [r7, #12]
2675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4403              		.loc 1 2680 0
 4404 000e 7B68     		ldr	r3, [r7, #4]
 4405 0010 4FEA1313 		lsr	r3, r3, #4
 4406 0014 FB60     		str	r3, [r7, #12]
2681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4407              		.loc 1 2683 0
 4408 0016 4FF42053 		mov	r3, #10240
 4409 001a C4F20003 		movt	r3, 16384
 4410 001e FA68     		ldr	r2, [r7, #12]
 4411 0020 4FEA0242 		lsl	r2, r2, #16
 4412 0024 4FEA1242 		lsr	r2, r2, #16
 4413 0028 42F08002 		orr	r2, r2, #128
 4414 002c 6FEA0201 		mvn	r1, r2
 4415 0030 4FF42052 		mov	r2, #10240
 4416 0034 C4F20002 		movt	r2, 16384
 4417 0038 D268     		ldr	r2, [r2, #12]
 4418 003a 02F08002 		and	r2, r2, #128
 4419 003e 0A43     		orrs	r2, r2, r1
 4420 0040 DA60     		str	r2, [r3, #12]
2684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4421              		.loc 1 2684 0
 4422 0042 07F11407 		add	r7, r7, #20
 4423 0046 BD46     		mov	sp, r7
 4424 0048 80BC     		pop	{r7}
 4425 004a 7047     		bx	lr
 4426              		.cfi_endproc
 4427              	.LFE164:
 4429              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4430              		.align	2
 4431              		.thumb
 4432              		.thumb_func
 4434              	RTC_ByteToBcd2:
 4435              	.LFB165:
2685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4436              		.loc 1 2696 0
 4437              		.cfi_startproc
 4438              		@ args = 0, pretend = 0, frame = 16
 4439              		@ frame_needed = 1, uses_anonymous_args = 0
 4440              		@ link register save eliminated.
 4441 0000 80B4     		push	{r7}
 4442              	.LCFI161:
 4443              		.cfi_def_cfa_offset 4
 4444              		.cfi_offset 7, -4
 4445 0002 85B0     		sub	sp, sp, #20
 4446              	.LCFI162:
 4447              		.cfi_def_cfa_offset 24
 4448 0004 00AF     		add	r7, sp, #0
 4449              	.LCFI163:
 4450              		.cfi_def_cfa_register 7
 4451 0006 0346     		mov	r3, r0
 4452 0008 FB71     		strb	r3, [r7, #7]
2697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4453              		.loc 1 2697 0
 4454 000a 4FF00003 		mov	r3, #0
 4455 000e FB73     		strb	r3, [r7, #15]
2698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4456              		.loc 1 2699 0
 4457 0010 07E0     		b	.L163
 4458              	.L164:
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4459              		.loc 1 2701 0
 4460 0012 FB7B     		ldrb	r3, [r7, #15]
 4461 0014 03F10103 		add	r3, r3, #1
 4462 0018 FB73     		strb	r3, [r7, #15]
2702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4463              		.loc 1 2702 0
 4464 001a FB79     		ldrb	r3, [r7, #7]
 4465 001c A3F10A03 		sub	r3, r3, #10
 4466 0020 FB71     		strb	r3, [r7, #7]
 4467              	.L163:
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4468              		.loc 1 2699 0 discriminator 1
 4469 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4470 0024 092B     		cmp	r3, #9
 4471 0026 F4D8     		bhi	.L164
2703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4472              		.loc 1 2705 0
 4473 0028 FB7B     		ldrb	r3, [r7, #15]
 4474 002a 4FEA0313 		lsl	r3, r3, #4
 4475 002e DAB2     		uxtb	r2, r3
 4476 0030 FB79     		ldrb	r3, [r7, #7]
 4477 0032 1343     		orrs	r3, r3, r2
 4478 0034 DBB2     		uxtb	r3, r3
2706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4479              		.loc 1 2706 0
 4480 0036 1846     		mov	r0, r3
 4481 0038 07F11407 		add	r7, r7, #20
 4482 003c BD46     		mov	sp, r7
 4483 003e 80BC     		pop	{r7}
 4484 0040 7047     		bx	lr
 4485              		.cfi_endproc
 4486              	.LFE165:
 4488 0042 00BF     		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 4489              		.align	2
 4490              		.thumb
 4491              		.thumb_func
 4493              	RTC_Bcd2ToByte:
 4494              	.LFB166:
2707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4495              		.loc 1 2714 0
 4496              		.cfi_startproc
 4497              		@ args = 0, pretend = 0, frame = 16
 4498              		@ frame_needed = 1, uses_anonymous_args = 0
 4499              		@ link register save eliminated.
 4500 0000 80B4     		push	{r7}
 4501              	.LCFI164:
 4502              		.cfi_def_cfa_offset 4
 4503              		.cfi_offset 7, -4
 4504 0002 85B0     		sub	sp, sp, #20
 4505              	.LCFI165:
 4506              		.cfi_def_cfa_offset 24
 4507 0004 00AF     		add	r7, sp, #0
 4508              	.LCFI166:
 4509              		.cfi_def_cfa_register 7
 4510 0006 0346     		mov	r3, r0
 4511 0008 FB71     		strb	r3, [r7, #7]
2715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4512              		.loc 1 2715 0
 4513 000a 4FF00003 		mov	r3, #0
 4514 000e FB73     		strb	r3, [r7, #15]
2716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4515              		.loc 1 2716 0
 4516 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4517 0012 4FEA1313 		lsr	r3, r3, #4
 4518 0016 DBB2     		uxtb	r3, r3
 4519 0018 1A46     		mov	r2, r3
 4520 001a 4FEA8202 		lsl	r2, r2, #2
 4521 001e D318     		adds	r3, r2, r3
 4522 0020 4FEA4303 		lsl	r3, r3, #1
 4523 0024 FB73     		strb	r3, [r7, #15]
2717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4524              		.loc 1 2717 0
 4525 0026 FB79     		ldrb	r3, [r7, #7]
 4526 0028 03F00F03 		and	r3, r3, #15
 4527 002c DAB2     		uxtb	r2, r3
 4528 002e FB7B     		ldrb	r3, [r7, #15]
 4529 0030 D318     		adds	r3, r2, r3
 4530 0032 DBB2     		uxtb	r3, r3
2718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4531              		.loc 1 2718 0
 4532 0034 1846     		mov	r0, r3
 4533 0036 07F11407 		add	r7, r7, #20
 4534 003a BD46     		mov	sp, r7
 4535 003c 80BC     		pop	{r7}
 4536 003e 7047     		bx	lr
 4537              		.cfi_endproc
 4538              	.LFE166:
 4540              		.text
 4541              	.Letext0:
 4542              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 4543              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Device\\STM32F4xx\\Inc
 4544              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 4545              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:19     .text.RTC_DeInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:24     .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:401    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:531    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:194    .text.RTC_Init:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:199    .text.RTC_Init:00000000 RTC_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:496    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:297    .text.RTC_StructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:302    .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:341    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:346    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:396    .text.RTC_EnterInitMode:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:491    .text.RTC_ExitInitMode:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:526    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:627    .text.RTC_RefClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:632    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:719    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:724    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:790    .text.RTC_SetTime:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:795    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4493   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4434   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:979    .text.RTC_TimeStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:984    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1027   .text.RTC_GetTime:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1032   .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1130   .text.RTC_GetSubSecond:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1135   .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1176   .text.RTC_SetDate:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1181   .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1365   .text.RTC_DateStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1370   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1413   .text.RTC_GetDate:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1418   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1515   .text.RTC_SetAlarm:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1520   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1739   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1744   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1799   .text.RTC_GetAlarm:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1804   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1938   .text.RTC_AlarmCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:1943   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2066   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2071   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2140   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2145   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2199   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2204   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2263   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2268   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2315   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2320   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2349   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2354   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2469   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2474   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2536   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2541   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2569   .text.RTC_OutputConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2574   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2636   .text.RTC_CoarseCalibConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2641   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2712   .text.RTC_CoarseCalibCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2717   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2804   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2809   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2875   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2880   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2939   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:2944   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3049   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3054   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3131   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3136   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3296   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3301   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3328   .text.RTC_TamperTriggerConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3333   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3389   .text.RTC_TamperCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3394   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3449   .text.RTC_TamperFilterConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3454   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3498   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3503   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3547   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3552   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3596   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3601   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3652   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3657   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3708   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3713   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3758   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3763   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3807   .text.RTC_TamperPinSelection:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3812   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3856   .text.RTC_TimeStampPinSelection:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3861   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3905   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3910   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3954   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:3959   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4082   .text.RTC_ITConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4087   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4180   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4185   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4243   .text.RTC_ClearFlag:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4248   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4289   .text.RTC_GetITStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4294   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4377   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4382   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4430   .text.RTC_ByteToBcd2:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccoFN4oL.s:4489   .text.RTC_Bcd2ToByte:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
