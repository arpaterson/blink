   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rtc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.RTC_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	RTC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	RTC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @file    stm32f4xx_rtc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @version V1.0.0RC1
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @date    25-August-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Initialization
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Calendar (Time and Date) configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Alarms (Alarm A and Alarm B) configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - WakeUp Timer configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Daylight Saving configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Output pin Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Coarse digital Calibration configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Smooth digital Calibration configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - TimeStamp configuration
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Tampers configuration
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Backup Data Registers configuration
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Shift control synchronisation    
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           - Interrupts and flags management
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @verbatim
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                               Backup Domain Operating Condition
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The real-time clock (RTC), the RTC backup registers, and the backup 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          SRAM (BKP SRAM) can be powered from the VBAT voltage when the main 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          VDD supply is powered off.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To retain the content of the RTC backup registers, backup SRAM, 
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          and supply the RTC when VDD is turned off, VBAT pin can be connected 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to an optional standby voltage supplied by a battery or by another 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          source.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To allow the RTC to operate even when the main digital supply (VDD) 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          is turned off, the VBAT pin powers the following blocks:
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - The RTC
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - The LSE oscillator
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - The backup SRAM when the low power backup regulator is enabled
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            4 - PC13 to PC15 I/Os, plus PI8 I/O (when available)
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VDD (analog switch connected 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VDD), the following functions are available:
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as either GPIO or LSE pins
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as a GPIO or as the RTC_AF1 pin
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as a GPIO or as the RTC_AF2 pin
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          When the backup domain is supplied by VBAT (analog switch connected 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          to VBAT because VDD is not present), the following functions are available:
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - PC14 and PC15 can be used as LSE pins only
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - PC13 can be used as the RTC_AF1 pin 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            3 - PI8 can be used as the RTC_AF2 pin
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Backup Domain Reset
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The backup domain reset sets all RTC registers and the RCC_BDCR 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          register to their reset values. The BKPSRAM is not affected by this
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          reset. The only way of resetting the BKPSRAM is through the Flash 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          interface by requesting a protection level change from 1 to 0.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          A backup domain reset is generated when one of the following events
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          occurs:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            1 - Software reset, triggered by setting the BDRST bit in the 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC Backup domain control register (RCC_BDCR). You can use the
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                RCC_BackupResetCmd().
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            2 - VDD or VBAT power on, if both supplies have previously been
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                powered off.
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   Backup Domain Access
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          After reset, the backup domain (RTC registers, RTC backup data 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          registers and backup SRAM) is protected against possible unwanted 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          write accesses. 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Power Controller (PWR) APB1 interface clock using the
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RCC_APB1PeriphClockCmd() function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Select the RTC clock source using the RCC_RTCCLKConfig() function.
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable RTC Clock using the RCC_RTCCLKCmd() function.
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                   RTC Driver: how to use it
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC domain access (see description in the section above)
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Prescaler (Asynchronous and Synchronous) and
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC hour format using the RTC_Init() function.
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Time and Date configuration
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===========================
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Calendar (Time and Date) use the RTC_SetTime()
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and RTC_SetDate() functions.
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Calendar, use the RTC_GetTime() and RTC_GetDate()
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              functions.
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Use the RTC_DayLightSavingConfig() function to add or sub one
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              hour to the RTC Calendar.    
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Alarm configuration
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To configure the RTC Alarm use the RTC_SetAlarm() function.
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the selected RTC Alarm using the RTC_AlarmCmd() function
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Alarm, use the RTC_GetAlarm() function.
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC alarm SubSecond, use the RTC_GetAlarmSubSecond() function.
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          RTC Wakeup configuration
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ========================
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Wakeup Clock source use the RTC_WakeUpClockConfig()
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC WakeUp Counter using the RTC_SetWakeUpCounter() 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC WakeUp using the RTC_WakeUpCmd() function  
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC WakeUp Counter register, use the RTC_GetWakeUpCounter() 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Outputs configuration
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =====================
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC has 2 different outputs:
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM: this output is used to manage the RTC Alarm A, Alarm B
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              and WaKeUp signals.          
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the selected RTC signal on RTC_AF1 pin, use the 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_OutputConfig() function.                
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB: this output is 512Hz signal or 1Hz .  
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              To output the RTC Clock on RTC_AF1 pin, use the RTC_CalibOutputCmd()
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Smooth digital Calibration configuration
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================    
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Original Digital Calibration Value and the corresponding
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              calibration cycle period (32s,16s and 8s) using the RTC_SmoothCalibConfig() 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Coarse digital Calibration configuration
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =================================
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Coarse Calibration Value and the corresponding
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              sign using the RTC_CoarseCalibConfig() function.
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Coarse Calibration using the RTC_CoarseCalibCmd() 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          TimeStamp configuration
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          =======================
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC_AF1 trigger and enables the RTC TimeStamp 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              using the RTC_TimeStampCmd() function.
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp Time and Date register, use the 
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStamp() function.
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC TimeStamp SubSecond register, use the 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_GetTimeStampSubSecond() function.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TAMPER1 alternate function can be mapped either to RTC_AF1(PC13)
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 (PI8) depending on the value of TAMP1INSEL bit in 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TamperPinSelection()
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin.     
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Tamper configuration
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ====================
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the RTC Tamper using the RTC_TamperCmd() function.
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *             - Configure the Tamper filter count using RTC_TamperFilterConfig()
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function. 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the RTC Tamper trigger Edge or Level according to the Tamper 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              filter (if equal to 0 Edge else Level) value using the RTC_TamperConfig() function
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper sampling frequency using RTC_TamperSamplingFreqConfig()
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Configure the Tamper precharge or discharge duration using 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TamperPinsPrechargeDuration() function.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Tamper Pull-UP using RTC_TamperPullUpDisableCmd() function.
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - Enable the Time stamp on Tamper detection event using  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TSOnTamperDetecCmd() function.
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - The TIMESTAMP alternate function can be mapped to either RTC_AF1 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              or RTC_AF2 depending on the value of the TSINSEL bit in the 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              RTC_TAFCR register. You can use the  RTC_TimeStampPinSelection()
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function to select the corresponding pin. 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          Backup Data Registers configuration
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To write to the RTC Backup Data registers, use the RTC_WriteBackupRegister()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.  
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - To read the RTC Backup Data registers, use the RTC_ReadBackupRegister()
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *              function.
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                  RTC and low power modes
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The MCU can be woken up from a low power mode by an RTC alternate 
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           function.
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC alternate functions are the RTC alarms (Alarm A and Alarm B), 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           These RTC alternate functions can wake up the system from the Stop 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           and Standby lowpower modes.
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The system can also wake up from low power modes without depending 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           on an external interrupt (Auto-wakeup mode), by using the RTC alarm 
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           or the RTC wakeup events.
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           The RTC provides a programmable time base for waking up from the 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Stop or Standby mode at regular intervals.
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           Wakeup from STOP and Standby modes is possible only when the RTC 
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           clock source is LSE or LSI.
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF1 alternate functions
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF1 pin (PC13) can be used for the following purposes:
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_ALARM output
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFO_CALIB output
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFO_ALARM |AFO_CALIB |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  | ENABLED  | ENABLED  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin 
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |          |          |           |              | selection  |  selection   
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output OD     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   Alarm out     |          |          |           |              |    Don't   |     Don't    
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     1    |Don't care|Don't care | Don't care   |    care    |     care     
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | Calibration out |          |          |           |              |    Don't   |     Don't    
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   output PP     |     0    |    1     |Don't care | Don't care   |    care    |     care     
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |          |          |           |              |            |     Don't    
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     0    |    0     |     1     |      0       |      0     |     care     
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |          |          |           |              |            |              
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     0    |    0     |     1     |      1       |      0     |      0       
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |          |          |           |              |            |              
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |          |          |           |              |    Don't   |              
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0    |    0     |     0     |      1       |    care    |      0       
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|----------|----------|-----------|--------------|------------|--------------
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0    |    0     |     0     |      0       | Don't care |  Don't care  
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +----------------------------------------------------------------------------------------------
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            Selection of RTC_AF2 alternate functions
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          ===================================================================
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          The RTC_AF2 pin (PI8) can be used for the following purposes:
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TAMPER
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            - AFI_TIMESTAMP
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |     Pin         |AFI_TAMPER |AFI_TIMESTAMP | TAMP1INSEL |   TSINSEL    |ALARMOUTTYPE  |
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  configuration  |  ENABLED  |   ENABLED    |TAMPER1 pin |TIMESTAMP pin |  AFO_ALARM   |
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  and function   |           |              | selection  |  selection   |Configuration |
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |           |              |            |     Don't    |              |
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |     1     |      0       |      1     |     care     |  Don't care  |
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TIMESTAMP and  |           |              |            |              |              |
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  TAMPER input   |     1     |      1       |      1     |      1       |  Don't care  |
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |   floating      |           |              |            |              |              |
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * | TIMESTAMP input |           |              |    Don't   |              |              |
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |    floating     |     0     |      1       |    care    |      1       |  Don't care  |
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |-----------------|-----------|--------------|------------|--------------|--------------|
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * |  Standard GPIO  |     0     |      0       | Don't care |  Don't care  |  Don't care  |
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * +---------------------------------------------------------------------------------------+
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * 
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *  @endverbatim
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @attention
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ******************************************************************************
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Includes ------------------------------------------------------------------*/
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rtc.h"
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #include "stm32f4xx_rcc.h"
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC 
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief RTC driver modules
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private define ------------------------------------------------------------*/
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Masks Definition */
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_TR_RESERVED_MASK    ((uint32_t)0x007F7F7F)
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_DR_RESERVED_MASK    ((uint32_t)0x00FFFF3F) 
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_INIT_MASK           ((uint32_t)0xFFFFFFFF)  
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_RSF_MASK            ((uint32_t)0xFFFFFF5F)
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RTC_FLAGS_MASK          ((uint32_t)(RTC_FLAG_TSOVF | RTC_FLAG_TSF | RTC_FLAG_WUTF | \
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBF | RTC_FLAG_ALRAF | RTC_FLAG_INITF | \
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_RSF | RTC_FLAG_INITS | RTC_FLAG_WUTWF | \
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                             RTC_FLAG_ALRBWF | RTC_FLAG_ALRAWF | RTC_FLAG_TAMP1F ))
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define INITMODE_TIMEOUT         ((uint32_t) 0x00010000)
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SYNCHRO_TIMEOUT          ((uint32_t) 0x00020000)
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define RECALPF_TIMEOUT          ((uint32_t) 0x00020000)
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** #define SHPF_TIMEOUT             ((uint32_t) 0x00001000)
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private macro -------------------------------------------------------------*/
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private variables ---------------------------------------------------------*/
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value);
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value);
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /* Private functions ---------------------------------------------------------*/
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Private_Functions
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */ 
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group1 Initialization and Configuration functions
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Initialization and Configuration functions 
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                  Initialization and Configuration functions
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to initialize and configure the RTC
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Prescaler (Synchronous and Asynchronous), RTC Hour format, disable RTC registers
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   Write protection, enter and exit the RTC initialization mode, RTC registers
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   synchronization check and reference clock detection enable.
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   1. The RTC Prescaler is programmed to generate the RTC 1Hz time base. It is
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      split into 2 programmable prescalers to minimize power consumption.
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - A 7-bit asynchronous prescaler and A 13-bit synchronous prescaler.
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      - When both prescalers are used, it is recommended to configure the asynchronous
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****        prescaler to a high value to minimize consumption.
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   2. All RTC registers are Write protected. Writing to the RTC registers
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      is enabled by writing a key into the Write Protection register, RTC_WPR.
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   3. To Configure the RTC Calendar, user application should enter initialization
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      mode. In this mode, the calendar counter is stopped and its value can be 
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      updated. When the initialization sequence is complete, the calendar restarts 
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      counting after 4 RTCCLK cycles.
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   4. To read the calendar through the shadow registers after Calendar initialization,
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      calendar update or after wakeup from low power modes the software must first 
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      clear the RSF flag. The software must then wait until it is set again before 
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      reading the calendar, which means that the calendar registers have been 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      correctly copied into the RTC_TR and RTC_DR shadow registers.
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      The RTC_WaitForSynchro() function implements the above software sequence 
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      (RSF clear and RSF check).
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Deinitializes the RTC registers to their default reset values.
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function doesn't reset the RTC Clock source and RTC Backup Data
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         registers.       
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are deinitialized
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not deinitialized
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_DeInit(void)
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
  27              		.loc 1 368 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
  42              		.loc 1 369 0
  43 0006 4FF00003 		mov	r3, #0
  44 000a 7B60     		str	r3, [r7, #4]
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
  45              		.loc 1 370 0
  46 000c 4FF00003 		mov	r3, #0
  47 0010 BB60     		str	r3, [r7, #8]
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
  48              		.loc 1 371 0
  49 0012 4FF00003 		mov	r3, #0
  50 0016 FB73     		strb	r3, [r7, #15]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
  51              		.loc 1 374 0
  52 0018 4FF42053 		mov	r3, #10240
  53 001c C4F20003 		movt	r3, 16384
  54 0020 4FF0CA02 		mov	r2, #202
  55 0024 5A62     		str	r2, [r3, #36]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
  56              		.loc 1 375 0
  57 0026 4FF42053 		mov	r3, #10240
  58 002a C4F20003 		movt	r3, 16384
  59 002e 4FF05302 		mov	r2, #83
  60 0032 5A62     		str	r2, [r3, #36]
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
  61              		.loc 1 378 0
  62 0034 FFF7FEFF 		bl	RTC_EnterInitMode
  63 0038 0346     		mov	r3, r0
  64 003a 002B     		cmp	r3, #0
  65 003c 03D1     		bne	.L2
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
  66              		.loc 1 380 0
  67 003e 4FF00003 		mov	r3, #0
  68 0042 FB73     		strb	r3, [r7, #15]
  69 0044 84E0     		b	.L3
  70              	.L2:
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset TR, DR and CR registers */
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)0x00000000;
  71              		.loc 1 385 0
  72 0046 4FF42053 		mov	r3, #10240
  73 004a C4F20003 		movt	r3, 16384
  74 004e 4FF00002 		mov	r2, #0
  75 0052 1A60     		str	r2, [r3, #0]
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)0x00002101;
  76              		.loc 1 386 0
  77 0054 4FF42053 		mov	r3, #10240
  78 0058 C4F20003 		movt	r3, 16384
  79 005c 42F20112 		movw	r2, #8449
  80 0060 5A60     		str	r2, [r3, #4]
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset All CR bits except CR[2:0] */
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)0x00000007;
  81              		.loc 1 388 0
  82 0062 4FF42053 		mov	r3, #10240
  83 0066 C4F20003 		movt	r3, 16384
  84 006a 4FF42052 		mov	r2, #10240
  85 006e C4F20002 		movt	r2, 16384
  86 0072 9268     		ldr	r2, [r2, #8]
  87 0074 02F00702 		and	r2, r2, #7
  88 0078 9A60     		str	r2, [r3, #8]
  89              	.L5:
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
  90              		.loc 1 393 0 discriminator 1
  91 007a 4FF42053 		mov	r3, #10240
  92 007e C4F20003 		movt	r3, 16384
  93 0082 DB68     		ldr	r3, [r3, #12]
  94 0084 03F00403 		and	r3, r3, #4
  95 0088 BB60     		str	r3, [r7, #8]
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
  96              		.loc 1 394 0 discriminator 1
  97 008a 7B68     		ldr	r3, [r7, #4]
  98 008c 03F10103 		add	r3, r3, #1
  99 0090 7B60     		str	r3, [r7, #4]
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 100              		.loc 1 395 0 discriminator 1
 101 0092 7B68     		ldr	r3, [r7, #4]
 102 0094 B3F5803F 		cmp	r3, #65536
 103 0098 02D0     		beq	.L4
 104 009a BB68     		ldr	r3, [r7, #8]
 105 009c 002B     		cmp	r3, #0
 106 009e ECD0     		beq	.L5
 107              	.L4:
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 108              		.loc 1 397 0
 109 00a0 4FF42053 		mov	r3, #10240
 110 00a4 C4F20003 		movt	r3, 16384
 111 00a8 DB68     		ldr	r3, [r3, #12]
 112 00aa 03F00403 		and	r3, r3, #4
 113 00ae 002B     		cmp	r3, #0
 114 00b0 03D1     		bne	.L6
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 115              		.loc 1 399 0
 116 00b2 4FF00003 		mov	r3, #0
 117 00b6 FB73     		strb	r3, [r7, #15]
 118 00b8 4AE0     		b	.L3
 119              	.L6:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset all RTC CR register bits */
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)0x00000000;
 120              		.loc 1 404 0
 121 00ba 4FF42053 		mov	r3, #10240
 122 00be C4F20003 		movt	r3, 16384
 123 00c2 9B68     		ldr	r3, [r3, #8]
 124 00c4 4FF42053 		mov	r3, #10240
 125 00c8 C4F20003 		movt	r3, 16384
 126 00cc 4FF00002 		mov	r2, #0
 127 00d0 9A60     		str	r2, [r3, #8]
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->WUTR = (uint32_t)0x0000FFFF;
 128              		.loc 1 405 0
 129 00d2 4FF42053 		mov	r3, #10240
 130 00d6 C4F20003 		movt	r3, 16384
 131 00da 4FF6FF72 		movw	r2, #65535
 132 00de 5A61     		str	r2, [r3, #20]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->PRER = (uint32_t)0x007F00FF;
 133              		.loc 1 406 0
 134 00e0 4FF42053 		mov	r3, #10240
 135 00e4 C4F20003 		movt	r3, 16384
 136 00e8 4FF0FF02 		mov	r2, #255
 137 00ec C0F27F02 		movt	r2, 127
 138 00f0 1A61     		str	r2, [r3, #16]
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CALIBR = (uint32_t)0x00000000;
 139              		.loc 1 407 0
 140 00f2 4FF42053 		mov	r3, #10240
 141 00f6 C4F20003 		movt	r3, 16384
 142 00fa 4FF00002 		mov	r2, #0
 143 00fe 9A61     		str	r2, [r3, #24]
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMAR = (uint32_t)0x00000000;        
 144              		.loc 1 408 0
 145 0100 4FF42053 		mov	r3, #10240
 146 0104 C4F20003 		movt	r3, 16384
 147 0108 4FF00002 		mov	r2, #0
 148 010c DA61     		str	r2, [r3, #28]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ALRMBR = (uint32_t)0x00000000;
 149              		.loc 1 409 0
 150 010e 4FF42053 		mov	r3, #10240
 151 0112 C4F20003 		movt	r3, 16384
 152 0116 4FF00002 		mov	r2, #0
 153 011a 1A62     		str	r2, [r3, #32]
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset ISR register and exit initialization mode */
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->ISR = (uint32_t)0x00000000;
 154              		.loc 1 412 0
 155 011c 4FF42053 		mov	r3, #10240
 156 0120 C4F20003 		movt	r3, 16384
 157 0124 4FF00002 		mov	r2, #0
 158 0128 DA60     		str	r2, [r3, #12]
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Reset Tamper and alternate functions configuration register */
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->TAFCR = 0x00000000;
 159              		.loc 1 415 0
 160 012a 4FF42053 		mov	r3, #10240
 161 012e C4F20003 		movt	r3, 16384
 162 0132 4FF00002 		mov	r2, #0
 163 0136 1A64     		str	r2, [r3, #64]
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 164              		.loc 1 417 0
 165 0138 FFF7FEFF 		bl	RTC_WaitForSynchro
 166 013c 0346     		mov	r3, r0
 167 013e 002B     		cmp	r3, #0
 168 0140 03D1     		bne	.L7
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 169              		.loc 1 419 0
 170 0142 4FF00003 		mov	r3, #0
 171 0146 FB73     		strb	r3, [r7, #15]
 172 0148 02E0     		b	.L3
 173              	.L7:
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;      
 174              		.loc 1 423 0
 175 014a 4FF00103 		mov	r3, #1
 176 014e FB73     		strb	r3, [r7, #15]
 177              	.L3:
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 178              		.loc 1 429 0
 179 0150 4FF42053 		mov	r3, #10240
 180 0154 C4F20003 		movt	r3, 16384
 181 0158 4FF0FF02 		mov	r2, #255
 182 015c 5A62     		str	r2, [r3, #36]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 183              		.loc 1 431 0
 184 015e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 185              		.loc 1 432 0
 186 0160 1846     		mov	r0, r3
 187 0162 07F11007 		add	r7, r7, #16
 188 0166 BD46     		mov	sp, r7
 189 0168 80BD     		pop	{r7, pc}
 190              		.cfi_endproc
 191              	.LFE110:
 193 016a 00BF     		.section	.text.RTC_Init,"ax",%progbits
 194              		.align	2
 195              		.global	RTC_Init
 196              		.thumb
 197              		.thumb_func
 199              	RTC_Init:
 200              	.LFB111:
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Initializes the RTC registers according to the specified parameters 
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         in RTC_InitStruct.
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure that contains 
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the configuration information for the RTC peripheral.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Prescaler register is write protected and can be written in 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization mode only.  
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are initialized
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not initialized  
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_Init(RTC_InitTypeDef* RTC_InitStruct)
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 201              		.loc 1 446 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 16
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205 0000 80B5     		push	{r7, lr}
 206              	.LCFI3:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 14, -4
 209              		.cfi_offset 7, -8
 210 0002 84B0     		sub	sp, sp, #16
 211              	.LCFI4:
 212              		.cfi_def_cfa_offset 24
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI5:
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 217              		.loc 1 447 0
 218 0008 4FF00003 		mov	r3, #0
 219 000c FB73     		strb	r3, [r7, #15]
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_HOUR_FORMAT(RTC_InitStruct->RTC_HourFormat));
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ASYNCH_PREDIV(RTC_InitStruct->RTC_AsynchPrediv));
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SYNCH_PREDIV(RTC_InitStruct->RTC_SynchPrediv));
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 220              		.loc 1 455 0
 221 000e 4FF42053 		mov	r3, #10240
 222 0012 C4F20003 		movt	r3, 16384
 223 0016 4FF0CA02 		mov	r2, #202
 224 001a 5A62     		str	r2, [r3, #36]
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 225              		.loc 1 456 0
 226 001c 4FF42053 		mov	r3, #10240
 227 0020 C4F20003 		movt	r3, 16384
 228 0024 4FF05302 		mov	r2, #83
 229 0028 5A62     		str	r2, [r3, #36]
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 230              		.loc 1 459 0
 231 002a FFF7FEFF 		bl	RTC_EnterInitMode
 232 002e 0346     		mov	r3, r0
 233 0030 002B     		cmp	r3, #0
 234 0032 03D1     		bne	.L9
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 235              		.loc 1 461 0
 236 0034 4FF00003 		mov	r3, #0
 237 0038 FB73     		strb	r3, [r7, #15]
 238 003a 33E0     		b	.L10
 239              	.L9:
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Clear RTC CR FMT Bit */
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= ((uint32_t)~(RTC_CR_FMT));
 240              		.loc 1 466 0
 241 003c 4FF42053 		mov	r3, #10240
 242 0040 C4F20003 		movt	r3, 16384
 243 0044 4FF42052 		mov	r2, #10240
 244 0048 C4F20002 		movt	r2, 16384
 245 004c 9268     		ldr	r2, [r2, #8]
 246 004e 22F04002 		bic	r2, r2, #64
 247 0052 9A60     		str	r2, [r3, #8]
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set RTC_CR register */
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |=  ((uint32_t)(RTC_InitStruct->RTC_HourFormat));
 248              		.loc 1 468 0
 249 0054 4FF42053 		mov	r3, #10240
 250 0058 C4F20003 		movt	r3, 16384
 251 005c 4FF42052 		mov	r2, #10240
 252 0060 C4F20002 		movt	r2, 16384
 253 0064 9168     		ldr	r1, [r2, #8]
 254 0066 7A68     		ldr	r2, [r7, #4]
 255 0068 1268     		ldr	r2, [r2, #0]
 256 006a 0A43     		orrs	r2, r2, r1
 257 006c 9A60     		str	r2, [r3, #8]
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC PRER */
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER = (uint32_t)(RTC_InitStruct->RTC_SynchPrediv);
 258              		.loc 1 471 0
 259 006e 4FF42053 		mov	r3, #10240
 260 0072 C4F20003 		movt	r3, 16384
 261 0076 7A68     		ldr	r2, [r7, #4]
 262 0078 9268     		ldr	r2, [r2, #8]
 263 007a 1A61     		str	r2, [r3, #16]
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->PRER |= (uint32_t)(RTC_InitStruct->RTC_AsynchPrediv << 16);
 264              		.loc 1 472 0
 265 007c 4FF42053 		mov	r3, #10240
 266 0080 C4F20003 		movt	r3, 16384
 267 0084 4FF42052 		mov	r2, #10240
 268 0088 C4F20002 		movt	r2, 16384
 269 008c 1169     		ldr	r1, [r2, #16]
 270 008e 7A68     		ldr	r2, [r7, #4]
 271 0090 5268     		ldr	r2, [r2, #4]
 272 0092 4FEA0242 		lsl	r2, r2, #16
 273 0096 0A43     		orrs	r2, r2, r1
 274 0098 1A61     		str	r2, [r3, #16]
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 275              		.loc 1 475 0
 276 009a FFF7FEFF 		bl	RTC_ExitInitMode
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 277              		.loc 1 477 0
 278 009e 4FF00103 		mov	r3, #1
 279 00a2 FB73     		strb	r3, [r7, #15]
 280              	.L10:
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 281              		.loc 1 480 0
 282 00a4 4FF42053 		mov	r3, #10240
 283 00a8 C4F20003 		movt	r3, 16384
 284 00ac 4FF0FF02 		mov	r2, #255
 285 00b0 5A62     		str	r2, [r3, #36]
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 286              		.loc 1 482 0
 287 00b2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 288              		.loc 1 483 0
 289 00b4 1846     		mov	r0, r3
 290 00b6 07F11007 		add	r7, r7, #16
 291 00ba BD46     		mov	sp, r7
 292 00bc 80BD     		pop	{r7, pc}
 293              		.cfi_endproc
 294              	.LFE111:
 296 00be 00BF     		.section	.text.RTC_StructInit,"ax",%progbits
 297              		.align	2
 298              		.global	RTC_StructInit
 299              		.thumb
 300              		.thumb_func
 302              	RTC_StructInit:
 303              	.LFB112:
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_InitStruct member with its default value.
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_InitStruct: pointer to a RTC_InitTypeDef structure which will be 
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_StructInit(RTC_InitTypeDef* RTC_InitStruct)
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 304              		.loc 1 492 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 8
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 309 0000 80B4     		push	{r7}
 310              	.LCFI6:
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 7, -4
 313 0002 83B0     		sub	sp, sp, #12
 314              	.LCFI7:
 315              		.cfi_def_cfa_offset 16
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI8:
 318              		.cfi_def_cfa_register 7
 319 0006 7860     		str	r0, [r7, #4]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_HourFormat member */
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_HourFormat = RTC_HourFormat_24;
 320              		.loc 1 494 0
 321 0008 7B68     		ldr	r3, [r7, #4]
 322 000a 4FF00002 		mov	r2, #0
 323 000e 1A60     		str	r2, [r3, #0]
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_AsynchPrediv member */
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_AsynchPrediv = (uint32_t)0x7F;
 324              		.loc 1 497 0
 325 0010 7B68     		ldr	r3, [r7, #4]
 326 0012 4FF07F02 		mov	r2, #127
 327 0016 5A60     		str	r2, [r3, #4]
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Initialize the RTC_SynchPrediv member */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_InitStruct->RTC_SynchPrediv = (uint32_t)0xFF; 
 328              		.loc 1 500 0
 329 0018 7B68     		ldr	r3, [r7, #4]
 330 001a 4FF0FF02 		mov	r2, #255
 331 001e 9A60     		str	r2, [r3, #8]
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 332              		.loc 1 501 0
 333 0020 07F10C07 		add	r7, r7, #12
 334 0024 BD46     		mov	sp, r7
 335 0026 80BC     		pop	{r7}
 336 0028 7047     		bx	lr
 337              		.cfi_endproc
 338              	.LFE112:
 340 002a 00BF     		.section	.text.RTC_WriteProtectionCmd,"ax",%progbits
 341              		.align	2
 342              		.global	RTC_WriteProtectionCmd
 343              		.thumb
 344              		.thumb_func
 346              	RTC_WriteProtectionCmd:
 347              	.LFB113:
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC registers write protection.
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   All the RTC registers are write protected except for RTC_ISR[13:8], 
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_TAFCR and RTC_BKPxR.
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   Writing a wrong key reactivates the write protection.
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The protection mechanism is not affected by system reset.  
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the write protection.
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteProtectionCmd(FunctionalState NewState)
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 348              		.loc 1 514 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 8
 351              		@ frame_needed = 1, uses_anonymous_args = 0
 352              		@ link register save eliminated.
 353 0000 80B4     		push	{r7}
 354              	.LCFI9:
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 83B0     		sub	sp, sp, #12
 358              	.LCFI10:
 359              		.cfi_def_cfa_offset 16
 360 0004 00AF     		add	r7, sp, #0
 361              	.LCFI11:
 362              		.cfi_def_cfa_register 7
 363 0006 0346     		mov	r3, r0
 364 0008 FB71     		strb	r3, [r7, #7]
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 365              		.loc 1 518 0
 366 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 367 000c 002B     		cmp	r3, #0
 368 000e 07D0     		beq	.L13
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the write protection for RTC registers */
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xFF;   
 369              		.loc 1 521 0
 370 0010 4FF42053 		mov	r3, #10240
 371 0014 C4F20003 		movt	r3, 16384
 372 0018 4FF0FF02 		mov	r2, #255
 373 001c 5A62     		str	r2, [r3, #36]
 374 001e 0DE0     		b	.L12
 375              	.L13:
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the write protection for RTC registers */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0xCA;
 376              		.loc 1 526 0
 377 0020 4FF42053 		mov	r3, #10240
 378 0024 C4F20003 		movt	r3, 16384
 379 0028 4FF0CA02 		mov	r2, #202
 380 002c 5A62     		str	r2, [r3, #36]
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->WPR = 0x53;    
 381              		.loc 1 527 0
 382 002e 4FF42053 		mov	r3, #10240
 383 0032 C4F20003 		movt	r3, 16384
 384 0036 4FF05302 		mov	r2, #83
 385 003a 5A62     		str	r2, [r3, #36]
 386              	.L12:
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 387              		.loc 1 529 0
 388 003c 07F10C07 		add	r7, r7, #12
 389 0040 BD46     		mov	sp, r7
 390 0042 80BC     		pop	{r7}
 391 0044 7047     		bx	lr
 392              		.cfi_endproc
 393              	.LFE113:
 395 0046 00BF     		.section	.text.RTC_EnterInitMode,"ax",%progbits
 396              		.align	2
 397              		.global	RTC_EnterInitMode
 398              		.thumb
 399              		.thumb_func
 401              	RTC_EnterInitMode:
 402              	.LFB114:
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enters the RTC Initialization mode.
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.    
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC is in Init mode
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC is not in Init mode  
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_EnterInitMode(void)
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 403              		.loc 1 541 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 16
 406              		@ frame_needed = 1, uses_anonymous_args = 0
 407              		@ link register save eliminated.
 408 0000 80B4     		push	{r7}
 409              	.LCFI12:
 410              		.cfi_def_cfa_offset 4
 411              		.cfi_offset 7, -4
 412 0002 85B0     		sub	sp, sp, #20
 413              	.LCFI13:
 414              		.cfi_def_cfa_offset 24
 415 0004 00AF     		add	r7, sp, #0
 416              	.LCFI14:
 417              		.cfi_def_cfa_register 7
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t initcounter = 0x00;
 418              		.loc 1 542 0
 419 0006 4FF00003 		mov	r3, #0
 420 000a 7B60     		str	r3, [r7, #4]
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 421              		.loc 1 543 0
 422 000c 4FF00003 		mov	r3, #0
 423 0010 FB73     		strb	r3, [r7, #15]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t initstatus = 0x00;
 424              		.loc 1 544 0
 425 0012 4FF00003 		mov	r3, #0
 426 0016 BB60     		str	r3, [r7, #8]
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Initialization mode is set */
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 427              		.loc 1 547 0
 428 0018 4FF42053 		mov	r3, #10240
 429 001c C4F20003 		movt	r3, 16384
 430 0020 DB68     		ldr	r3, [r3, #12]
 431 0022 03F04003 		and	r3, r3, #64
 432 0026 002B     		cmp	r3, #0
 433 0028 2AD1     		bne	.L16
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the Initialization mode */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ISR = (uint32_t)RTC_INIT_MASK;
 434              		.loc 1 550 0
 435 002a 4FF42053 		mov	r3, #10240
 436 002e C4F20003 		movt	r3, 16384
 437 0032 4FF0FF32 		mov	r2, #-1
 438 0036 DA60     		str	r2, [r3, #12]
 439              	.L18:
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initstatus = RTC->ISR & RTC_ISR_INITF;
 440              		.loc 1 555 0 discriminator 1
 441 0038 4FF42053 		mov	r3, #10240
 442 003c C4F20003 		movt	r3, 16384
 443 0040 DB68     		ldr	r3, [r3, #12]
 444 0042 03F04003 		and	r3, r3, #64
 445 0046 BB60     		str	r3, [r7, #8]
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       initcounter++;  
 446              		.loc 1 556 0 discriminator 1
 447 0048 7B68     		ldr	r3, [r7, #4]
 448 004a 03F10103 		add	r3, r3, #1
 449 004e 7B60     		str	r3, [r7, #4]
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((initcounter != INITMODE_TIMEOUT) && (initstatus == 0x00));
 450              		.loc 1 557 0 discriminator 1
 451 0050 7B68     		ldr	r3, [r7, #4]
 452 0052 B3F5803F 		cmp	r3, #65536
 453 0056 02D0     		beq	.L17
 454 0058 BB68     		ldr	r3, [r7, #8]
 455 005a 002B     		cmp	r3, #0
 456 005c ECD0     		beq	.L18
 457              	.L17:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_INITF) != RESET)
 458              		.loc 1 559 0
 459 005e 4FF42053 		mov	r3, #10240
 460 0062 C4F20003 		movt	r3, 16384
 461 0066 DB68     		ldr	r3, [r3, #12]
 462 0068 03F04003 		and	r3, r3, #64
 463 006c 002B     		cmp	r3, #0
 464 006e 03D0     		beq	.L19
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 465              		.loc 1 561 0
 466 0070 4FF00103 		mov	r3, #1
 467 0074 FB73     		strb	r3, [r7, #15]
 468 0076 06E0     		b	.L20
 469              	.L19:
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 470              		.loc 1 565 0
 471 0078 4FF00003 		mov	r3, #0
 472 007c FB73     		strb	r3, [r7, #15]
 473 007e 02E0     		b	.L20
 474              	.L16:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;  
 475              		.loc 1 570 0
 476 0080 4FF00103 		mov	r3, #1
 477 0084 FB73     		strb	r3, [r7, #15]
 478              	.L20:
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status);  
 479              		.loc 1 573 0
 480 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 481              		.loc 1 574 0
 482 0088 1846     		mov	r0, r3
 483 008a 07F11407 		add	r7, r7, #20
 484 008e BD46     		mov	sp, r7
 485 0090 80BC     		pop	{r7}
 486 0092 7047     		bx	lr
 487              		.cfi_endproc
 488              	.LFE114:
 490              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 491              		.align	2
 492              		.global	RTC_ExitInitMode
 493              		.thumb
 494              		.thumb_func
 496              	RTC_ExitInitMode:
 497              	.LFB115:
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Exits the RTC Initialization mode.
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the initialization sequence is complete, the calendar restarts 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         counting after 4 RTCCLK cycles.  
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function.      
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ExitInitMode(void)
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 498              		.loc 1 586 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 0
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502              		@ link register save eliminated.
 503 0000 80B4     		push	{r7}
 504              	.LCFI15:
 505              		.cfi_def_cfa_offset 4
 506              		.cfi_offset 7, -4
 507 0002 00AF     		add	r7, sp, #0
 508              	.LCFI16:
 509              		.cfi_def_cfa_register 7
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Exit Initialization mode */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)~RTC_ISR_INIT;  
 510              		.loc 1 588 0
 511 0004 4FF42053 		mov	r3, #10240
 512 0008 C4F20003 		movt	r3, 16384
 513 000c 4FF42052 		mov	r2, #10240
 514 0010 C4F20002 		movt	r2, 16384
 515 0014 D268     		ldr	r2, [r2, #12]
 516 0016 22F08002 		bic	r2, r2, #128
 517 001a DA60     		str	r2, [r3, #12]
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 518              		.loc 1 589 0
 519 001c BD46     		mov	sp, r7
 520 001e 80BC     		pop	{r7}
 521 0020 7047     		bx	lr
 522              		.cfi_endproc
 523              	.LFE115:
 525 0022 00BF     		.section	.text.RTC_WaitForSynchro,"ax",%progbits
 526              		.align	2
 527              		.global	RTC_WaitForSynchro
 528              		.thumb
 529              		.thumb_func
 531              	RTC_WaitForSynchro:
 532              	.LFB116:
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Waits until the RTC Time and Date registers (RTC_TR and RTC_DR) are 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         synchronized with RTC APB clock.
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the 
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         RTC_WriteProtectionCmd(DISABLE) before calling this function. 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar 
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes 
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the software must first clear the RSF flag. 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         The software must then wait until it is set again before reading 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         the calendar, which means that the calendar registers have been 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.   
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC registers are synchronised
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC registers are not synchronised
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WaitForSynchro(void)
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 533              		.loc 1 608 0
 534              		.cfi_startproc
 535              		@ args = 0, pretend = 0, frame = 16
 536              		@ frame_needed = 1, uses_anonymous_args = 0
 537              		@ link register save eliminated.
 538 0000 80B4     		push	{r7}
 539              	.LCFI17:
 540              		.cfi_def_cfa_offset 4
 541              		.cfi_offset 7, -4
 542 0002 85B0     		sub	sp, sp, #20
 543              	.LCFI18:
 544              		.cfi_def_cfa_offset 24
 545 0004 00AF     		add	r7, sp, #0
 546              	.LCFI19:
 547              		.cfi_def_cfa_register 7
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t synchrocounter = 0;
 548              		.loc 1 609 0
 549 0006 4FF00003 		mov	r3, #0
 550 000a 7B60     		str	r3, [r7, #4]
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 551              		.loc 1 610 0
 552 000c 4FF00003 		mov	r3, #0
 553 0010 FB73     		strb	r3, [r7, #15]
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t synchrostatus = 0x00;
 554              		.loc 1 611 0
 555 0012 4FF00003 		mov	r3, #0
 556 0016 BB60     		str	r3, [r7, #8]
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 557              		.loc 1 614 0
 558 0018 4FF42053 		mov	r3, #10240
 559 001c C4F20003 		movt	r3, 16384
 560 0020 4FF0CA02 		mov	r2, #202
 561 0024 5A62     		str	r2, [r3, #36]
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 562              		.loc 1 615 0
 563 0026 4FF42053 		mov	r3, #10240
 564 002a C4F20003 		movt	r3, 16384
 565 002e 4FF05302 		mov	r2, #83
 566 0032 5A62     		str	r2, [r3, #36]
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear RSF flag */
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR &= (uint32_t)RTC_RSF_MASK;
 567              		.loc 1 618 0
 568 0034 4FF42053 		mov	r3, #10240
 569 0038 C4F20003 		movt	r3, 16384
 570 003c 4FF42052 		mov	r2, #10240
 571 0040 C4F20002 		movt	r2, 16384
 572 0044 D268     		ldr	r2, [r2, #12]
 573 0046 22F0A002 		bic	r2, r2, #160
 574 004a DA60     		str	r2, [r3, #12]
 575              	.L24:
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Wait the registers to be synchronised */
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   do
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrostatus = RTC->ISR & RTC_ISR_RSF;
 576              		.loc 1 623 0 discriminator 1
 577 004c 4FF42053 		mov	r3, #10240
 578 0050 C4F20003 		movt	r3, 16384
 579 0054 DB68     		ldr	r3, [r3, #12]
 580 0056 03F02003 		and	r3, r3, #32
 581 005a BB60     		str	r3, [r7, #8]
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     synchrocounter++;  
 582              		.loc 1 624 0 discriminator 1
 583 005c 7B68     		ldr	r3, [r7, #4]
 584 005e 03F10103 		add	r3, r3, #1
 585 0062 7B60     		str	r3, [r7, #4]
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } while((synchrocounter != SYNCHRO_TIMEOUT) && (synchrostatus == 0x00));
 586              		.loc 1 625 0 discriminator 1
 587 0064 7B68     		ldr	r3, [r7, #4]
 588 0066 B3F5003F 		cmp	r3, #131072
 589 006a 02D0     		beq	.L23
 590 006c BB68     		ldr	r3, [r7, #8]
 591 006e 002B     		cmp	r3, #0
 592 0070 ECD0     		beq	.L24
 593              	.L23:
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RSF) != RESET)
 594              		.loc 1 627 0
 595 0072 4FF42053 		mov	r3, #10240
 596 0076 C4F20003 		movt	r3, 16384
 597 007a DB68     		ldr	r3, [r3, #12]
 598 007c 03F02003 		and	r3, r3, #32
 599 0080 002B     		cmp	r3, #0
 600 0082 03D0     		beq	.L25
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 601              		.loc 1 629 0
 602 0084 4FF00103 		mov	r3, #1
 603 0088 FB73     		strb	r3, [r7, #15]
 604 008a 02E0     		b	.L26
 605              	.L25:
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 606              		.loc 1 633 0
 607 008c 4FF00003 		mov	r3, #0
 608 0090 FB73     		strb	r3, [r7, #15]
 609              	.L26:
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }        
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 610              		.loc 1 637 0
 611 0092 4FF42053 		mov	r3, #10240
 612 0096 C4F20003 		movt	r3, 16384
 613 009a 4FF0FF02 		mov	r2, #255
 614 009e 5A62     		str	r2, [r3, #36]
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (status); 
 615              		.loc 1 639 0
 616 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 617              		.loc 1 640 0
 618 00a2 1846     		mov	r0, r3
 619 00a4 07F11407 		add	r7, r7, #20
 620 00a8 BD46     		mov	sp, r7
 621 00aa 80BC     		pop	{r7}
 622 00ac 7047     		bx	lr
 623              		.cfi_endproc
 624              	.LFE116:
 626 00ae 00BF     		.section	.text.RTC_RefClockCmd,"ax",%progbits
 627              		.align	2
 628              		.global	RTC_RefClockCmd
 629              		.thumb
 630              		.thumb_func
 632              	RTC_RefClockCmd:
 633              	.LFB117:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC reference clock detection.
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the RTC reference clock.
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC reference clock detection is enabled
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC reference clock detection is disabled  
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_RefClockCmd(FunctionalState NewState)
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** { 
 634              		.loc 1 651 0
 635              		.cfi_startproc
 636              		@ args = 0, pretend = 0, frame = 16
 637              		@ frame_needed = 1, uses_anonymous_args = 0
 638 0000 80B5     		push	{r7, lr}
 639              	.LCFI20:
 640              		.cfi_def_cfa_offset 8
 641              		.cfi_offset 14, -4
 642              		.cfi_offset 7, -8
 643 0002 84B0     		sub	sp, sp, #16
 644              	.LCFI21:
 645              		.cfi_def_cfa_offset 24
 646 0004 00AF     		add	r7, sp, #0
 647              	.LCFI22:
 648              		.cfi_def_cfa_register 7
 649 0006 0346     		mov	r3, r0
 650 0008 FB71     		strb	r3, [r7, #7]
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 651              		.loc 1 652 0
 652 000a 4FF00003 		mov	r3, #0
 653 000e FB73     		strb	r3, [r7, #15]
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 654              		.loc 1 658 0
 655 0010 4FF42053 		mov	r3, #10240
 656 0014 C4F20003 		movt	r3, 16384
 657 0018 4FF0CA02 		mov	r2, #202
 658 001c 5A62     		str	r2, [r3, #36]
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 659              		.loc 1 659 0
 660 001e 4FF42053 		mov	r3, #10240
 661 0022 C4F20003 		movt	r3, 16384
 662 0026 4FF05302 		mov	r2, #83
 663 002a 5A62     		str	r2, [r3, #36]
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 664              		.loc 1 662 0
 665 002c FFF7FEFF 		bl	RTC_EnterInitMode
 666 0030 0346     		mov	r3, r0
 667 0032 002B     		cmp	r3, #0
 668 0034 03D1     		bne	.L28
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 669              		.loc 1 664 0
 670 0036 4FF00003 		mov	r3, #0
 671 003a FB73     		strb	r3, [r7, #15]
 672 003c 20E0     		b	.L29
 673              	.L28:
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 674              		.loc 1 668 0
 675 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 676 0040 002B     		cmp	r3, #0
 677 0042 0CD0     		beq	.L30
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the RTC reference clock detection */
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= RTC_CR_REFCKON;   
 678              		.loc 1 671 0
 679 0044 4FF42053 		mov	r3, #10240
 680 0048 C4F20003 		movt	r3, 16384
 681 004c 4FF42052 		mov	r2, #10240
 682 0050 C4F20002 		movt	r2, 16384
 683 0054 9268     		ldr	r2, [r2, #8]
 684 0056 42F01002 		orr	r2, r2, #16
 685 005a 9A60     		str	r2, [r3, #8]
 686 005c 0BE0     		b	.L31
 687              	.L30:
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the RTC reference clock detection */
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= ~RTC_CR_REFCKON;    
 688              		.loc 1 676 0
 689 005e 4FF42053 		mov	r3, #10240
 690 0062 C4F20003 		movt	r3, 16384
 691 0066 4FF42052 		mov	r2, #10240
 692 006a C4F20002 		movt	r2, 16384
 693 006e 9268     		ldr	r2, [r2, #8]
 694 0070 22F01002 		bic	r2, r2, #16
 695 0074 9A60     		str	r2, [r3, #8]
 696              	.L31:
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 697              		.loc 1 679 0
 698 0076 FFF7FEFF 		bl	RTC_ExitInitMode
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 699              		.loc 1 681 0
 700 007a 4FF00103 		mov	r3, #1
 701 007e FB73     		strb	r3, [r7, #15]
 702              	.L29:
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;  
 703              		.loc 1 685 0
 704 0080 4FF42053 		mov	r3, #10240
 705 0084 C4F20003 		movt	r3, 16384
 706 0088 4FF0FF02 		mov	r2, #255
 707 008c 5A62     		str	r2, [r3, #36]
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status; 
 708              		.loc 1 687 0
 709 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 710              		.loc 1 688 0
 711 0090 1846     		mov	r0, r3
 712 0092 07F11007 		add	r7, r7, #16
 713 0096 BD46     		mov	sp, r7
 714 0098 80BD     		pop	{r7, pc}
 715              		.cfi_endproc
 716              	.LFE117:
 718 009a 00BF     		.section	.text.RTC_BypassShadowCmd,"ax",%progbits
 719              		.align	2
 720              		.global	RTC_BypassShadowCmd
 721              		.thumb
 722              		.thumb_func
 724              	RTC_BypassShadowCmd:
 725              	.LFB118:
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Bypass Shadow feature.
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When the Bypass Shadow is enabled the calendar value are taken 
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         directly from the Calendar counter.
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Bypass Shadow feature.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_BypassShadowCmd(FunctionalState NewState)
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 726              		.loc 1 699 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 8
 729              		@ frame_needed = 1, uses_anonymous_args = 0
 730              		@ link register save eliminated.
 731 0000 80B4     		push	{r7}
 732              	.LCFI23:
 733              		.cfi_def_cfa_offset 4
 734              		.cfi_offset 7, -4
 735 0002 83B0     		sub	sp, sp, #12
 736              	.LCFI24:
 737              		.cfi_def_cfa_offset 16
 738 0004 00AF     		add	r7, sp, #0
 739              	.LCFI25:
 740              		.cfi_def_cfa_register 7
 741 0006 0346     		mov	r3, r0
 742 0008 FB71     		strb	r3, [r7, #7]
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 743              		.loc 1 704 0
 744 000a 4FF42053 		mov	r3, #10240
 745 000e C4F20003 		movt	r3, 16384
 746 0012 4FF0CA02 		mov	r2, #202
 747 0016 5A62     		str	r2, [r3, #36]
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 748              		.loc 1 705 0
 749 0018 4FF42053 		mov	r3, #10240
 750 001c C4F20003 		movt	r3, 16384
 751 0020 4FF05302 		mov	r2, #83
 752 0024 5A62     		str	r2, [r3, #36]
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 753              		.loc 1 707 0
 754 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 755 0028 002B     		cmp	r3, #0
 756 002a 0CD0     		beq	.L33
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the BYPSHAD bit */
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint8_t)RTC_CR_BYPSHAD;
 757              		.loc 1 710 0
 758 002c 4FF42053 		mov	r3, #10240
 759 0030 C4F20003 		movt	r3, 16384
 760 0034 4FF42052 		mov	r2, #10240
 761 0038 C4F20002 		movt	r2, 16384
 762 003c 9268     		ldr	r2, [r2, #8]
 763 003e 42F02002 		orr	r2, r2, #32
 764 0042 9A60     		str	r2, [r3, #8]
 765 0044 0BE0     		b	.L34
 766              	.L33:
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Reset the BYPSHAD bit */
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint8_t)~RTC_CR_BYPSHAD;
 767              		.loc 1 715 0
 768 0046 4FF42053 		mov	r3, #10240
 769 004a C4F20003 		movt	r3, 16384
 770 004e 4FF42052 		mov	r2, #10240
 771 0052 C4F20002 		movt	r2, 16384
 772 0056 9268     		ldr	r2, [r2, #8]
 773 0058 02F0DF02 		and	r2, r2, #223
 774 005c 9A60     		str	r2, [r3, #8]
 775              	.L34:
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 776              		.loc 1 719 0
 777 005e 4FF42053 		mov	r3, #10240
 778 0062 C4F20003 		movt	r3, 16384
 779 0066 4FF0FF02 		mov	r2, #255
 780 006a 5A62     		str	r2, [r3, #36]
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 781              		.loc 1 720 0
 782 006c 07F10C07 		add	r7, r7, #12
 783 0070 BD46     		mov	sp, r7
 784 0072 80BC     		pop	{r7}
 785 0074 7047     		bx	lr
 786              		.cfi_endproc
 787              	.LFE118:
 789              		.section	.text.RTC_SetTime,"ax",%progbits
 790              		.align	2
 791              		.global	RTC_SetTime
 792              		.thumb
 793              		.thumb_func
 795              	RTC_SetTime:
 796              	.LFB119:
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group2 Time and Date configuration functions
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Time and Date configuration functions 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Time and Date configuration functions
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Calendar
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (Time and Date).
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current time.
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that contains 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        the time configuration information for the RTC.     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Time register is configured
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Time register is not configured
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 797              		.loc 1 754 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 16
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 90B5     		push	{r4, r7, lr}
 802              	.LCFI26:
 803              		.cfi_def_cfa_offset 12
 804              		.cfi_offset 14, -4
 805              		.cfi_offset 7, -8
 806              		.cfi_offset 4, -12
 807 0002 85B0     		sub	sp, sp, #20
 808              	.LCFI27:
 809              		.cfi_def_cfa_offset 32
 810 0004 00AF     		add	r7, sp, #0
 811              	.LCFI28:
 812              		.cfi_def_cfa_register 7
 813 0006 7860     		str	r0, [r7, #4]
 814 0008 3960     		str	r1, [r7, #0]
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 815              		.loc 1 755 0
 816 000a 4FF00003 		mov	r3, #0
 817 000e FB60     		str	r3, [r7, #12]
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 818              		.loc 1 756 0
 819 0010 4FF00003 		mov	r3, #0
 820 0014 FB72     		strb	r3, [r7, #11]
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 821              		.loc 1 761 0
 822 0016 7B68     		ldr	r3, [r7, #4]
 823 0018 002B     		cmp	r3, #0
 824 001a 0DD1     		bne	.L36
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 825              		.loc 1 763 0
 826 001c 4FF42053 		mov	r3, #10240
 827 0020 C4F20003 		movt	r3, 16384
 828 0024 9B68     		ldr	r3, [r3, #8]
 829 0026 03F04003 		and	r3, r3, #64
 830 002a 002B     		cmp	r3, #0
 831 002c 19D1     		bne	.L37
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_TimeStruct->RTC_Hours));
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12));
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 832              		.loc 1 770 0
 833 002e 3B68     		ldr	r3, [r7, #0]
 834 0030 4FF00002 		mov	r2, #0
 835 0034 DA70     		strb	r2, [r3, #3]
 836 0036 14E0     		b	.L37
 837              	.L36:
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_TimeStruct->RTC_Hours));
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_TimeStruct->RTC_Minutes));
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_TimeStruct->RTC_Seconds));
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 838              		.loc 1 778 0
 839 0038 4FF42053 		mov	r3, #10240
 840 003c C4F20003 		movt	r3, 16384
 841 0040 9B68     		ldr	r3, [r3, #8]
 842 0042 03F04003 		and	r3, r3, #64
 843 0046 002B     		cmp	r3, #0
 844 0048 07D0     		beq	.L38
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 845              		.loc 1 780 0
 846 004a 3B68     		ldr	r3, [r7, #0]
 847 004c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 848 004e 1846     		mov	r0, r3
 849 0050 FFF7FEFF 		bl	RTC_Bcd2ToByte
 850 0054 0346     		mov	r3, r0
 851 0056 FB60     		str	r3, [r7, #12]
 852 0058 03E0     		b	.L37
 853              	.L38:
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_TimeStruct->RTC_H12)); 
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_TimeStruct->RTC_H12 = 0x00;
 854              		.loc 1 786 0
 855 005a 3B68     		ldr	r3, [r7, #0]
 856 005c 4FF00002 		mov	r2, #0
 857 0060 DA70     		strb	r2, [r3, #3]
 858              	.L37:
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours)));
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes)));
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds)));
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 859              		.loc 1 794 0
 860 0062 7B68     		ldr	r3, [r7, #4]
 861 0064 002B     		cmp	r3, #0
 862 0066 12D0     		beq	.L39
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 863              		.loc 1 796 0
 864 0068 3B68     		ldr	r3, [r7, #0]
 865 006a 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 866 006c 4FEA0342 		lsl	r2, r3, #16
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 867              		.loc 1 797 0
 868 0070 3B68     		ldr	r3, [r7, #0]
 869 0072 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 870 0074 4FEA0323 		lsl	r3, r3, #8
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 871              		.loc 1 796 0
 872 0078 1A43     		orrs	r2, r2, r3
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)RTC_TimeStruct->RTC_Seconds) | \
 873              		.loc 1 798 0
 874 007a 3B68     		ldr	r3, [r7, #0]
 875 007c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_Minutes) << 8) | \
 876              		.loc 1 797 0
 877 007e 1A43     		orrs	r2, r2, r3
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****              ((uint32_t)(RTC_TimeStruct->RTC_H12) << 16)); 
 878              		.loc 1 799 0
 879 0080 3B68     		ldr	r3, [r7, #0]
 880 0082 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 881 0084 4FEA0343 		lsl	r3, r3, #16
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_TimeStruct->RTC_Hours) << 16) | \
 882              		.loc 1 796 0
 883 0088 1343     		orrs	r3, r3, r2
 884 008a FB60     		str	r3, [r7, #12]
 885 008c 1EE0     		b	.L40
 886              	.L39:
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 887              		.loc 1 803 0
 888 008e 3B68     		ldr	r3, [r7, #0]
 889 0090 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 890 0092 1846     		mov	r0, r3
 891 0094 FFF7FEFF 		bl	RTC_ByteToBcd2
 892 0098 0346     		mov	r3, r0
 893 009a 4FEA0344 		lsl	r4, r3, #16
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 894              		.loc 1 804 0
 895 009e 3B68     		ldr	r3, [r7, #0]
 896 00a0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 897 00a2 1846     		mov	r0, r3
 898 00a4 FFF7FEFF 		bl	RTC_ByteToBcd2
 899 00a8 0346     		mov	r3, r0
 900 00aa 4FEA0323 		lsl	r3, r3, #8
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 901              		.loc 1 803 0
 902 00ae 1C43     		orrs	r4, r4, r3
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Seconds)) | \
 903              		.loc 1 805 0
 904 00b0 3B68     		ldr	r3, [r7, #0]
 905 00b2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 906 00b4 1846     		mov	r0, r3
 907 00b6 FFF7FEFF 		bl	RTC_ByteToBcd2
 908 00ba 0346     		mov	r3, r0
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    ((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Minutes) << 8) | \
 909              		.loc 1 804 0
 910 00bc 44EA0302 		orr	r2, r4, r3
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    (((uint32_t)RTC_TimeStruct->RTC_H12) << 16));
 911              		.loc 1 806 0
 912 00c0 3B68     		ldr	r3, [r7, #0]
 913 00c2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 914 00c4 4FEA0343 		lsl	r3, r3, #16
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(RTC_TimeStruct->RTC_Hours) << 16) | \
 915              		.loc 1 803 0
 916 00c8 1343     		orrs	r3, r3, r2
 917 00ca FB60     		str	r3, [r7, #12]
 918              	.L40:
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 919              		.loc 1 810 0
 920 00cc 4FF42053 		mov	r3, #10240
 921 00d0 C4F20003 		movt	r3, 16384
 922 00d4 4FF0CA02 		mov	r2, #202
 923 00d8 5A62     		str	r2, [r3, #36]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 924              		.loc 1 811 0
 925 00da 4FF42053 		mov	r3, #10240
 926 00de C4F20003 		movt	r3, 16384
 927 00e2 4FF05302 		mov	r2, #83
 928 00e6 5A62     		str	r2, [r3, #36]
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 929              		.loc 1 814 0
 930 00e8 FFF7FEFF 		bl	RTC_EnterInitMode
 931 00ec 0346     		mov	r3, r0
 932 00ee 002B     		cmp	r3, #0
 933 00f0 03D1     		bne	.L41
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 934              		.loc 1 816 0
 935 00f2 4FF00003 		mov	r3, #0
 936 00f6 FB72     		strb	r3, [r7, #11]
 937 00f8 18E0     		b	.L42
 938              	.L41:
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_TR register */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 939              		.loc 1 821 0
 940 00fa 4FF42052 		mov	r2, #10240
 941 00fe C4F20002 		movt	r2, 16384
 942 0102 F968     		ldr	r1, [r7, #12]
 943 0104 47F67F73 		movw	r3, #32639
 944 0108 C0F27F03 		movt	r3, 127
 945 010c 0B40     		ands	r3, r3, r1
 946 010e 1360     		str	r3, [r2, #0]
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 947              		.loc 1 824 0
 948 0110 FFF7FEFF 		bl	RTC_ExitInitMode
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 949              		.loc 1 826 0
 950 0114 FFF7FEFF 		bl	RTC_WaitForSynchro
 951 0118 0346     		mov	r3, r0
 952 011a 002B     		cmp	r3, #0
 953 011c 03D1     		bne	.L43
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 954              		.loc 1 828 0
 955 011e 4FF00003 		mov	r3, #0
 956 0122 FB72     		strb	r3, [r7, #11]
 957 0124 02E0     		b	.L42
 958              	.L43:
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 959              		.loc 1 832 0
 960 0126 4FF00103 		mov	r3, #1
 961 012a FB72     		strb	r3, [r7, #11]
 962              	.L42:
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 963              		.loc 1 837 0
 964 012c 4FF42053 		mov	r3, #10240
 965 0130 C4F20003 		movt	r3, 16384
 966 0134 4FF0FF02 		mov	r2, #255
 967 0138 5A62     		str	r2, [r3, #36]
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 968              		.loc 1 839 0
 969 013a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 970              		.loc 1 840 0
 971 013c 1846     		mov	r0, r3
 972 013e 07F11407 		add	r7, r7, #20
 973 0142 BD46     		mov	sp, r7
 974 0144 90BD     		pop	{r4, r7, pc}
 975              		.cfi_endproc
 976              	.LFE119:
 978 0146 00BF     		.section	.text.RTC_TimeStructInit,"ax",%progbits
 979              		.align	2
 980              		.global	RTC_TimeStructInit
 981              		.thumb
 982              		.thumb_func
 984              	RTC_TimeStructInit:
 985              	.LFB120:
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_TimeStruct member with its default value
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00min:00sec).
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure which will be 
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStructInit(RTC_TimeTypeDef* RTC_TimeStruct)
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 986              		.loc 1 850 0
 987              		.cfi_startproc
 988              		@ args = 0, pretend = 0, frame = 8
 989              		@ frame_needed = 1, uses_anonymous_args = 0
 990              		@ link register save eliminated.
 991 0000 80B4     		push	{r7}
 992              	.LCFI29:
 993              		.cfi_def_cfa_offset 4
 994              		.cfi_offset 7, -4
 995 0002 83B0     		sub	sp, sp, #12
 996              	.LCFI30:
 997              		.cfi_def_cfa_offset 16
 998 0004 00AF     		add	r7, sp, #0
 999              	.LCFI31:
 1000              		.cfi_def_cfa_register 7
 1001 0006 7860     		str	r0, [r7, #4]
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Time = 00h:00min:00sec */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = RTC_H12_AM;
 1002              		.loc 1 852 0
 1003 0008 7B68     		ldr	r3, [r7, #4]
 1004 000a 4FF00002 		mov	r2, #0
 1005 000e DA70     		strb	r2, [r3, #3]
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = 0;
 1006              		.loc 1 853 0
 1007 0010 7B68     		ldr	r3, [r7, #4]
 1008 0012 4FF00002 		mov	r2, #0
 1009 0016 1A70     		strb	r2, [r3, #0]
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = 0;
 1010              		.loc 1 854 0
 1011 0018 7B68     		ldr	r3, [r7, #4]
 1012 001a 4FF00002 		mov	r2, #0
 1013 001e 5A70     		strb	r2, [r3, #1]
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = 0; 
 1014              		.loc 1 855 0
 1015 0020 7B68     		ldr	r3, [r7, #4]
 1016 0022 4FF00002 		mov	r2, #0
 1017 0026 9A70     		strb	r2, [r3, #2]
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1018              		.loc 1 856 0
 1019 0028 07F10C07 		add	r7, r7, #12
 1020 002c BD46     		mov	sp, r7
 1021 002e 80BC     		pop	{r7}
 1022 0030 7047     		bx	lr
 1023              		.cfi_endproc
 1024              	.LFE120:
 1026 0032 00BF     		.section	.text.RTC_GetTime,"ax",%progbits
 1027              		.align	2
 1028              		.global	RTC_GetTime
 1029              		.thumb
 1030              		.thumb_func
 1032              	RTC_GetTime:
 1033              	.LFB121:
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current Time.
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStruct: pointer to a RTC_TimeTypeDef structure that will 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current time configuration.     
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTime(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_TimeStruct)
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1034              		.loc 1 869 0
 1035              		.cfi_startproc
 1036              		@ args = 0, pretend = 0, frame = 16
 1037              		@ frame_needed = 1, uses_anonymous_args = 0
 1038 0000 80B5     		push	{r7, lr}
 1039              	.LCFI32:
 1040              		.cfi_def_cfa_offset 8
 1041              		.cfi_offset 14, -4
 1042              		.cfi_offset 7, -8
 1043 0002 84B0     		sub	sp, sp, #16
 1044              	.LCFI33:
 1045              		.cfi_def_cfa_offset 24
 1046 0004 00AF     		add	r7, sp, #0
 1047              	.LCFI34:
 1048              		.cfi_def_cfa_register 7
 1049 0006 7860     		str	r0, [r7, #4]
 1050 0008 3960     		str	r1, [r7, #0]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1051              		.loc 1 870 0
 1052 000a 4FF00003 		mov	r3, #0
 1053 000e FB60     		str	r3, [r7, #12]
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TR & RTC_TR_RESERVED_MASK); 
 1054              		.loc 1 876 0
 1055 0010 4FF42053 		mov	r3, #10240
 1056 0014 C4F20003 		movt	r3, 16384
 1057 0018 1A68     		ldr	r2, [r3, #0]
 1058 001a 47F67F73 		movw	r3, #32639
 1059 001e C0F27F03 		movt	r3, 127
 1060 0022 1340     		ands	r3, r3, r2
 1061 0024 FB60     		str	r3, [r7, #12]
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 1062              		.loc 1 879 0
 1063 0026 FB68     		ldr	r3, [r7, #12]
 1064 0028 03F47C13 		and	r3, r3, #4128768
 1065 002c 4FEA1343 		lsr	r3, r3, #16
 1066 0030 DAB2     		uxtb	r2, r3
 1067 0032 3B68     		ldr	r3, [r7, #0]
 1068 0034 1A70     		strb	r2, [r3, #0]
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 1069              		.loc 1 880 0
 1070 0036 FB68     		ldr	r3, [r7, #12]
 1071 0038 03F4FE43 		and	r3, r3, #32512
 1072 003c 4FEA1323 		lsr	r3, r3, #8
 1073 0040 DAB2     		uxtb	r2, r3
 1074 0042 3B68     		ldr	r3, [r7, #0]
 1075 0044 5A70     		strb	r2, [r3, #1]
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 1076              		.loc 1 881 0
 1077 0046 FB68     		ldr	r3, [r7, #12]
 1078 0048 DBB2     		uxtb	r3, r3
 1079 004a 03F07F03 		and	r3, r3, #127
 1080 004e DAB2     		uxtb	r2, r3
 1081 0050 3B68     		ldr	r3, [r7, #0]
 1082 0052 9A70     		strb	r2, [r3, #2]
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_TimeStruct->RTC_H12 = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);  
 1083              		.loc 1 882 0
 1084 0054 FB68     		ldr	r3, [r7, #12]
 1085 0056 03F48003 		and	r3, r3, #4194304
 1086 005a 4FEA1343 		lsr	r3, r3, #16
 1087 005e DAB2     		uxtb	r2, r3
 1088 0060 3B68     		ldr	r3, [r7, #0]
 1089 0062 DA70     		strb	r2, [r3, #3]
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1090              		.loc 1 885 0
 1091 0064 7B68     		ldr	r3, [r7, #4]
 1092 0066 002B     		cmp	r3, #0
 1093 0068 1AD1     		bne	.L45
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Hours);
 1094              		.loc 1 888 0
 1095 006a 3B68     		ldr	r3, [r7, #0]
 1096 006c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1097 006e 1846     		mov	r0, r3
 1098 0070 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1099 0074 0346     		mov	r3, r0
 1100 0076 1A46     		mov	r2, r3
 1101 0078 3B68     		ldr	r3, [r7, #0]
 1102 007a 1A70     		strb	r2, [r3, #0]
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Minutes);
 1103              		.loc 1 889 0
 1104 007c 3B68     		ldr	r3, [r7, #0]
 1105 007e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1106 0080 1846     		mov	r0, r3
 1107 0082 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1108 0086 0346     		mov	r3, r0
 1109 0088 1A46     		mov	r2, r3
 1110 008a 3B68     		ldr	r3, [r7, #0]
 1111 008c 5A70     		strb	r2, [r3, #1]
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_TimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_TimeStruct->RTC_Seconds);   
 1112              		.loc 1 890 0
 1113 008e 3B68     		ldr	r3, [r7, #0]
 1114 0090 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1115 0092 1846     		mov	r0, r3
 1116 0094 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1117 0098 0346     		mov	r3, r0
 1118 009a 1A46     		mov	r2, r3
 1119 009c 3B68     		ldr	r3, [r7, #0]
 1120 009e 9A70     		strb	r2, [r3, #2]
 1121              	.L45:
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1122              		.loc 1 892 0
 1123 00a0 07F11007 		add	r7, r7, #16
 1124 00a4 BD46     		mov	sp, r7
 1125 00a6 80BD     		pop	{r7, pc}
 1126              		.cfi_endproc
 1127              	.LFE121:
 1129              		.section	.text.RTC_GetSubSecond,"ax",%progbits
 1130              		.align	2
 1131              		.global	RTC_GetSubSecond
 1132              		.thumb
 1133              		.thumb_func
 1135              	RTC_GetSubSecond:
 1136              	.LFB122:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC current Calendar Subseconds value.
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function freeze the Time and Date registers after reading the 
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         SSR register.
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current Calendar Subseconds value.
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetSubSecond(void)
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1137              		.loc 1 902 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 8
 1140              		@ frame_needed = 1, uses_anonymous_args = 0
 1141              		@ link register save eliminated.
 1142 0000 80B4     		push	{r7}
 1143              	.LCFI35:
 1144              		.cfi_def_cfa_offset 4
 1145              		.cfi_offset 7, -4
 1146 0002 83B0     		sub	sp, sp, #12
 1147              	.LCFI36:
 1148              		.cfi_def_cfa_offset 16
 1149 0004 00AF     		add	r7, sp, #0
 1150              	.LCFI37:
 1151              		.cfi_def_cfa_register 7
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1152              		.loc 1 903 0
 1153 0006 4FF00003 		mov	r3, #0
 1154 000a 7B60     		str	r3, [r7, #4]
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get subseconds values from the correspondent registers*/
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->SSR);
 1155              		.loc 1 906 0
 1156 000c 4FF42053 		mov	r3, #10240
 1157 0010 C4F20003 		movt	r3, 16384
 1158 0014 9B6A     		ldr	r3, [r3, #40]
 1159 0016 7B60     		str	r3, [r7, #4]
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read DR register to unfroze calendar registers */
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   (void) (RTC->DR);
 1160              		.loc 1 909 0
 1161 0018 4FF42053 		mov	r3, #10240
 1162 001c C4F20003 		movt	r3, 16384
 1163 0020 5B68     		ldr	r3, [r3, #4]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 1164              		.loc 1 911 0
 1165 0022 7B68     		ldr	r3, [r7, #4]
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1166              		.loc 1 912 0
 1167 0024 1846     		mov	r0, r3
 1168 0026 07F10C07 		add	r7, r7, #12
 1169 002a BD46     		mov	sp, r7
 1170 002c 80BC     		pop	{r7}
 1171 002e 7047     		bx	lr
 1172              		.cfi_endproc
 1173              	.LFE122:
 1175              		.section	.text.RTC_SetDate,"ax",%progbits
 1176              		.align	2
 1177              		.global	RTC_SetDate
 1178              		.thumb
 1179              		.thumb_func
 1181              	RTC_SetDate:
 1182              	.LFB123:
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the RTC current date.
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the entered parameters.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN:  Binary data format 
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD:  BCD data format
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure that contains 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                         the date configuration information for the RTC.
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Date register is configured
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Date register is not configured
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1183              		.loc 1 927 0
 1184              		.cfi_startproc
 1185              		@ args = 0, pretend = 0, frame = 16
 1186              		@ frame_needed = 1, uses_anonymous_args = 0
 1187 0000 90B5     		push	{r4, r7, lr}
 1188              	.LCFI38:
 1189              		.cfi_def_cfa_offset 12
 1190              		.cfi_offset 14, -4
 1191              		.cfi_offset 7, -8
 1192              		.cfi_offset 4, -12
 1193 0002 85B0     		sub	sp, sp, #20
 1194              	.LCFI39:
 1195              		.cfi_def_cfa_offset 32
 1196 0004 00AF     		add	r7, sp, #0
 1197              	.LCFI40:
 1198              		.cfi_def_cfa_register 7
 1199 0006 7860     		str	r0, [r7, #4]
 1200 0008 3960     		str	r1, [r7, #0]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1201              		.loc 1 928 0
 1202 000a 4FF00003 		mov	r3, #0
 1203 000e FB60     		str	r3, [r7, #12]
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1204              		.loc 1 929 0
 1205 0010 4FF00003 		mov	r3, #0
 1206 0014 FB72     		strb	r3, [r7, #11]
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC_Format == RTC_Format_BIN) && ((RTC_DateStruct->RTC_Month & 0x10) == 0x10))
 1207              		.loc 1 934 0
 1208 0016 7B68     		ldr	r3, [r7, #4]
 1209 0018 002B     		cmp	r3, #0
 1210 001a 0FD1     		bne	.L49
 1211              		.loc 1 934 0 is_stmt 0 discriminator 1
 1212 001c 3B68     		ldr	r3, [r7, #0]
 1213 001e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1214 0020 03F01003 		and	r3, r3, #16
 1215 0024 002B     		cmp	r3, #0
 1216 0026 09D0     		beq	.L49
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (RTC_DateStruct->RTC_Month & (uint32_t)~(0x10)) + 0x0A;
 1217              		.loc 1 936 0 is_stmt 1
 1218 0028 3B68     		ldr	r3, [r7, #0]
 1219 002a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1220 002c 23F01003 		bic	r3, r3, #16
 1221 0030 DBB2     		uxtb	r3, r3
 1222 0032 03F10A03 		add	r3, r3, #10
 1223 0036 DAB2     		uxtb	r2, r3
 1224 0038 3B68     		ldr	r3, [r7, #0]
 1225 003a 5A70     		strb	r2, [r3, #1]
 1226              	.L49:
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1227              		.loc 1 938 0
 1228 003c 7B68     		ldr	r3, [r7, #4]
 1229 003e 002B     		cmp	r3, #0
 1230 0040 0DD0     		beq	.L50
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_DateStruct->RTC_Year));
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_DateStruct->RTC_Month));
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(RTC_DateStruct->RTC_Date));
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year)));
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1231              		.loc 1 947 0
 1232 0042 3B68     		ldr	r3, [r7, #0]
 1233 0044 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1234 0046 1846     		mov	r0, r3
 1235 0048 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1236 004c 0346     		mov	r3, r0
 1237 004e FB60     		str	r3, [r7, #12]
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MONTH(tmpreg));
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1238              		.loc 1 949 0
 1239 0050 3B68     		ldr	r3, [r7, #0]
 1240 0052 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1241 0054 1846     		mov	r0, r3
 1242 0056 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1243 005a 0346     		mov	r3, r0
 1244 005c FB60     		str	r3, [r7, #12]
 1245              	.L50:
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_DATE(tmpreg));
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WEEKDAY(RTC_DateStruct->RTC_WeekDay));
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1246              		.loc 1 955 0
 1247 005e 7B68     		ldr	r3, [r7, #4]
 1248 0060 002B     		cmp	r3, #0
 1249 0062 12D0     		beq	.L51
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1250              		.loc 1 957 0
 1251 0064 3B68     		ldr	r3, [r7, #0]
 1252 0066 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1253 0068 4FEA0342 		lsl	r2, r3, #16
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1254              		.loc 1 958 0
 1255 006c 3B68     		ldr	r3, [r7, #0]
 1256 006e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1257 0070 4FEA0323 		lsl	r3, r3, #8
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1258              		.loc 1 957 0
 1259 0074 1A43     		orrs	r2, r2, r3
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_Date) | \
 1260              		.loc 1 959 0
 1261 0076 3B68     		ldr	r3, [r7, #0]
 1262 0078 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_Month) << 8) | \
 1263              		.loc 1 958 0
 1264 007a 1A43     		orrs	r2, r2, r3
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               (((uint32_t)RTC_DateStruct->RTC_WeekDay) << 13)); 
 1265              		.loc 1 960 0
 1266 007c 3B68     		ldr	r3, [r7, #0]
 1267 007e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1268 0080 4FEA4333 		lsl	r3, r3, #13
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = ((((uint32_t)RTC_DateStruct->RTC_Year) << 16) | \
 1269              		.loc 1 957 0
 1270 0084 1343     		orrs	r3, r3, r2
 1271 0086 FB60     		str	r3, [r7, #12]
 1272 0088 1EE0     		b	.L52
 1273              	.L51:
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1274              		.loc 1 964 0
 1275 008a 3B68     		ldr	r3, [r7, #0]
 1276 008c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1277 008e 1846     		mov	r0, r3
 1278 0090 FFF7FEFF 		bl	RTC_ByteToBcd2
 1279 0094 0346     		mov	r3, r0
 1280 0096 4FEA0344 		lsl	r4, r3, #16
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1281              		.loc 1 965 0
 1282 009a 3B68     		ldr	r3, [r7, #0]
 1283 009c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1284 009e 1846     		mov	r0, r3
 1285 00a0 FFF7FEFF 		bl	RTC_ByteToBcd2
 1286 00a4 0346     		mov	r3, r0
 1287 00a6 4FEA0323 		lsl	r3, r3, #8
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1288              		.loc 1 964 0
 1289 00aa 1C43     		orrs	r4, r4, r3
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Date)) | \
 1290              		.loc 1 966 0
 1291 00ac 3B68     		ldr	r3, [r7, #0]
 1292 00ae 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1293 00b0 1846     		mov	r0, r3
 1294 00b2 FFF7FEFF 		bl	RTC_ByteToBcd2
 1295 00b6 0346     		mov	r3, r0
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Month) << 8) | \
 1296              		.loc 1 965 0
 1297 00b8 44EA0302 		orr	r2, r4, r3
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_DateStruct->RTC_WeekDay << 13));
 1298              		.loc 1 967 0
 1299 00bc 3B68     		ldr	r3, [r7, #0]
 1300 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1301 00c0 4FEA4333 		lsl	r3, r3, #13
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_DateStruct->RTC_Year) << 16) | \
 1302              		.loc 1 964 0
 1303 00c4 1343     		orrs	r3, r3, r2
 1304 00c6 FB60     		str	r3, [r7, #12]
 1305              	.L52:
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1306              		.loc 1 971 0
 1307 00c8 4FF42053 		mov	r3, #10240
 1308 00cc C4F20003 		movt	r3, 16384
 1309 00d0 4FF0CA02 		mov	r2, #202
 1310 00d4 5A62     		str	r2, [r3, #36]
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1311              		.loc 1 972 0
 1312 00d6 4FF42053 		mov	r3, #10240
 1313 00da C4F20003 		movt	r3, 16384
 1314 00de 4FF05302 		mov	r2, #83
 1315 00e2 5A62     		str	r2, [r3, #36]
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 1316              		.loc 1 975 0
 1317 00e4 FFF7FEFF 		bl	RTC_EnterInitMode
 1318 00e8 0346     		mov	r3, r0
 1319 00ea 002B     		cmp	r3, #0
 1320 00ec 03D1     		bne	.L53
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 1321              		.loc 1 977 0
 1322 00ee 4FF00003 		mov	r3, #0
 1323 00f2 FB72     		strb	r3, [r7, #11]
 1324 00f4 17E0     		b	.L54
 1325              	.L53:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the RTC_DR register */
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->DR = (uint32_t)(tmpreg & RTC_DR_RESERVED_MASK);
 1326              		.loc 1 982 0
 1327 00f6 4FF42053 		mov	r3, #10240
 1328 00fa C4F20003 		movt	r3, 16384
 1329 00fe FA68     		ldr	r2, [r7, #12]
 1330 0100 22F07F42 		bic	r2, r2, #-16777216
 1331 0104 22F0C002 		bic	r2, r2, #192
 1332 0108 5A60     		str	r2, [r3, #4]
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode(); 
 1333              		.loc 1 985 0
 1334 010a FFF7FEFF 		bl	RTC_ExitInitMode
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_WaitForSynchro() == ERROR)
 1335              		.loc 1 987 0
 1336 010e FFF7FEFF 		bl	RTC_WaitForSynchro
 1337 0112 0346     		mov	r3, r0
 1338 0114 002B     		cmp	r3, #0
 1339 0116 03D1     		bne	.L55
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 1340              		.loc 1 989 0
 1341 0118 4FF00003 		mov	r3, #0
 1342 011c FB72     		strb	r3, [r7, #11]
 1343 011e 02E0     		b	.L54
 1344              	.L55:
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 1345              		.loc 1 993 0
 1346 0120 4FF00103 		mov	r3, #1
 1347 0124 FB72     		strb	r3, [r7, #11]
 1348              	.L54:
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1349              		.loc 1 997 0
 1350 0126 4FF42053 		mov	r3, #10240
 1351 012a C4F20003 		movt	r3, 16384
 1352 012e 4FF0FF02 		mov	r2, #255
 1353 0132 5A62     		str	r2, [r3, #36]
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 1354              		.loc 1 999 0
 1355 0134 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1356              		.loc 1 1000 0
 1357 0136 1846     		mov	r0, r3
 1358 0138 07F11407 		add	r7, r7, #20
 1359 013c BD46     		mov	sp, r7
 1360 013e 90BD     		pop	{r4, r7, pc}
 1361              		.cfi_endproc
 1362              	.LFE123:
 1364              		.section	.text.RTC_DateStructInit,"ax",%progbits
 1365              		.align	2
 1366              		.global	RTC_DateStructInit
 1367              		.thumb
 1368              		.thumb_func
 1370              	RTC_DateStructInit:
 1371              	.LFB124:
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_DateStruct member with its default value
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Monday, January 01 xx00).
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DateStruct: pointer to a RTC_DateTypeDef structure which will be 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         initialized.
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DateStructInit(RTC_DateTypeDef* RTC_DateStruct)
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1372              		.loc 1 1010 0
 1373              		.cfi_startproc
 1374              		@ args = 0, pretend = 0, frame = 8
 1375              		@ frame_needed = 1, uses_anonymous_args = 0
 1376              		@ link register save eliminated.
 1377 0000 80B4     		push	{r7}
 1378              	.LCFI41:
 1379              		.cfi_def_cfa_offset 4
 1380              		.cfi_offset 7, -4
 1381 0002 83B0     		sub	sp, sp, #12
 1382              	.LCFI42:
 1383              		.cfi_def_cfa_offset 16
 1384 0004 00AF     		add	r7, sp, #0
 1385              	.LCFI43:
 1386              		.cfi_def_cfa_register 7
 1387 0006 7860     		str	r0, [r7, #4]
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Monday, January 01 xx00 */
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = RTC_Weekday_Monday;
 1388              		.loc 1 1012 0
 1389 0008 7B68     		ldr	r3, [r7, #4]
 1390 000a 4FF00102 		mov	r2, #1
 1391 000e 1A70     		strb	r2, [r3, #0]
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = 1;
 1392              		.loc 1 1013 0
 1393 0010 7B68     		ldr	r3, [r7, #4]
 1394 0012 4FF00102 		mov	r2, #1
 1395 0016 9A70     		strb	r2, [r3, #2]
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = RTC_Month_January;
 1396              		.loc 1 1014 0
 1397 0018 7B68     		ldr	r3, [r7, #4]
 1398 001a 4FF00102 		mov	r2, #1
 1399 001e 5A70     		strb	r2, [r3, #1]
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = 0;
 1400              		.loc 1 1015 0
 1401 0020 7B68     		ldr	r3, [r7, #4]
 1402 0022 4FF00002 		mov	r2, #0
 1403 0026 DA70     		strb	r2, [r3, #3]
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1404              		.loc 1 1016 0
 1405 0028 07F10C07 		add	r7, r7, #12
 1406 002c BD46     		mov	sp, r7
 1407 002e 80BC     		pop	{r7}
 1408 0030 7047     		bx	lr
 1409              		.cfi_endproc
 1410              	.LFE124:
 1412 0032 00BF     		.section	.text.RTC_GetDate,"ax",%progbits
 1413              		.align	2
 1414              		.global	RTC_GetDate
 1415              		.thumb
 1416              		.thumb_func
 1418              	RTC_GetDate:
 1419              	.LFB125:
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC current date. 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_DateStruct: pointer to a RTC_DateTypeDef structure that will 
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                        contain the returned current date configuration.     
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetDate(uint32_t RTC_Format, RTC_DateTypeDef* RTC_DateStruct)
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1420              		.loc 1 1029 0
 1421              		.cfi_startproc
 1422              		@ args = 0, pretend = 0, frame = 16
 1423              		@ frame_needed = 1, uses_anonymous_args = 0
 1424 0000 80B5     		push	{r7, lr}
 1425              	.LCFI44:
 1426              		.cfi_def_cfa_offset 8
 1427              		.cfi_offset 14, -4
 1428              		.cfi_offset 7, -8
 1429 0002 84B0     		sub	sp, sp, #16
 1430              	.LCFI45:
 1431              		.cfi_def_cfa_offset 24
 1432 0004 00AF     		add	r7, sp, #0
 1433              	.LCFI46:
 1434              		.cfi_def_cfa_register 7
 1435 0006 7860     		str	r0, [r7, #4]
 1436 0008 3960     		str	r1, [r7, #0]
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1437              		.loc 1 1030 0
 1438 000a 4FF00003 		mov	r3, #0
 1439 000e FB60     		str	r3, [r7, #12]
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_TR register */
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->DR & RTC_DR_RESERVED_MASK); 
 1440              		.loc 1 1036 0
 1441 0010 4FF42053 		mov	r3, #10240
 1442 0014 C4F20003 		movt	r3, 16384
 1443 0018 5B68     		ldr	r3, [r3, #4]
 1444 001a 23F07F43 		bic	r3, r3, #-16777216
 1445 001e 23F0C003 		bic	r3, r3, #192
 1446 0022 FB60     		str	r3, [r7, #12]
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure fields with the read parameters */
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Year = (uint8_t)((tmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 1447              		.loc 1 1039 0
 1448 0024 FB68     		ldr	r3, [r7, #12]
 1449 0026 03F47F03 		and	r3, r3, #16711680
 1450 002a 4FEA1343 		lsr	r3, r3, #16
 1451 002e DAB2     		uxtb	r2, r3
 1452 0030 3B68     		ldr	r3, [r7, #0]
 1453 0032 DA70     		strb	r2, [r3, #3]
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Month = (uint8_t)((tmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 1454              		.loc 1 1040 0
 1455 0034 FB68     		ldr	r3, [r7, #12]
 1456 0036 03F4F853 		and	r3, r3, #7936
 1457 003a 4FEA1323 		lsr	r3, r3, #8
 1458 003e DAB2     		uxtb	r2, r3
 1459 0040 3B68     		ldr	r3, [r7, #0]
 1460 0042 5A70     		strb	r2, [r3, #1]
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_Date = (uint8_t)(tmpreg & (RTC_DR_DT | RTC_DR_DU));
 1461              		.loc 1 1041 0
 1462 0044 FB68     		ldr	r3, [r7, #12]
 1463 0046 DBB2     		uxtb	r3, r3
 1464 0048 03F03F03 		and	r3, r3, #63
 1465 004c DAB2     		uxtb	r2, r3
 1466 004e 3B68     		ldr	r3, [r7, #0]
 1467 0050 9A70     		strb	r2, [r3, #2]
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_DateStruct->RTC_WeekDay = (uint8_t)((tmpreg & (RTC_DR_WDU)) >> 13);  
 1468              		.loc 1 1042 0
 1469 0052 FB68     		ldr	r3, [r7, #12]
 1470 0054 03F46043 		and	r3, r3, #57344
 1471 0058 4FEA5333 		lsr	r3, r3, #13
 1472 005c DAB2     		uxtb	r2, r3
 1473 005e 3B68     		ldr	r3, [r7, #0]
 1474 0060 1A70     		strb	r2, [r3, #0]
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1475              		.loc 1 1045 0
 1476 0062 7B68     		ldr	r3, [r7, #4]
 1477 0064 002B     		cmp	r3, #0
 1478 0066 1ED1     		bne	.L57
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the structure parameters to Binary format */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Year = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Year);
 1479              		.loc 1 1048 0
 1480 0068 3B68     		ldr	r3, [r7, #0]
 1481 006a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1482 006c 1846     		mov	r0, r3
 1483 006e FFF7FEFF 		bl	RTC_Bcd2ToByte
 1484 0072 0346     		mov	r3, r0
 1485 0074 1A46     		mov	r2, r3
 1486 0076 3B68     		ldr	r3, [r7, #0]
 1487 0078 DA70     		strb	r2, [r3, #3]
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Month);
 1488              		.loc 1 1049 0
 1489 007a 3B68     		ldr	r3, [r7, #0]
 1490 007c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1491 007e 1846     		mov	r0, r3
 1492 0080 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1493 0084 0346     		mov	r3, r0
 1494 0086 1A46     		mov	r2, r3
 1495 0088 3B68     		ldr	r3, [r7, #0]
 1496 008a 5A70     		strb	r2, [r3, #1]
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_DateStruct->RTC_Date);
 1497              		.loc 1 1050 0
 1498 008c 3B68     		ldr	r3, [r7, #0]
 1499 008e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1500 0090 1846     		mov	r0, r3
 1501 0092 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1502 0096 0346     		mov	r3, r0
 1503 0098 1A46     		mov	r2, r3
 1504 009a 3B68     		ldr	r3, [r7, #0]
 1505 009c 9A70     		strb	r2, [r3, #2]
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_DateStruct->RTC_WeekDay = (uint8_t)(RTC_DateStruct->RTC_WeekDay);   
 1506              		.loc 1 1051 0
 1507 009e 3B68     		ldr	r3, [r7, #0]
 1508 00a0 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 1509 00a2 3B68     		ldr	r3, [r7, #0]
 1510 00a4 1A70     		strb	r2, [r3, #0]
 1511              	.L57:
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1512              		.loc 1 1053 0
 1513 00a6 07F11007 		add	r7, r7, #16
 1514 00aa BD46     		mov	sp, r7
 1515 00ac 80BD     		pop	{r7, pc}
 1516              		.cfi_endproc
 1517              	.LFE125:
 1519 00ae 00BF     		.section	.text.RTC_SetAlarm,"ax",%progbits
 1520              		.align	2
 1521              		.global	RTC_SetAlarm
 1522              		.thumb
 1523              		.thumb_func
 1525              	RTC_SetAlarm:
 1526              	.LFB126:
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group3 Alarms configuration functions
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Alarms (Alarm A and Alarm B) configuration functions 
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               Alarms (Alarm A and Alarm B) configuration functions
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC Alarms.
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Set the specified RTC Alarm.
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_AlarmCmd(DISABLE)).    
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the returned parameters.
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that 
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the alarm configuration parameters.     
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1527              		.loc 1 1090 0
 1528              		.cfi_startproc
 1529              		@ args = 0, pretend = 0, frame = 24
 1530              		@ frame_needed = 1, uses_anonymous_args = 0
 1531 0000 90B5     		push	{r4, r7, lr}
 1532              	.LCFI47:
 1533              		.cfi_def_cfa_offset 12
 1534              		.cfi_offset 14, -4
 1535              		.cfi_offset 7, -8
 1536              		.cfi_offset 4, -12
 1537 0002 87B0     		sub	sp, sp, #28
 1538              	.LCFI48:
 1539              		.cfi_def_cfa_offset 40
 1540 0004 00AF     		add	r7, sp, #0
 1541              	.LCFI49:
 1542              		.cfi_def_cfa_register 7
 1543 0006 F860     		str	r0, [r7, #12]
 1544 0008 B960     		str	r1, [r7, #8]
 1545 000a 7A60     		str	r2, [r7, #4]
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1546              		.loc 1 1091 0
 1547 000c 4FF00003 		mov	r3, #0
 1548 0010 7B61     		str	r3, [r7, #20]
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_ALARM_MASK(RTC_AlarmStruct->RTC_AlarmMask));
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel));
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1549              		.loc 1 1099 0
 1550 0012 FB68     		ldr	r3, [r7, #12]
 1551 0014 002B     		cmp	r3, #0
 1552 0016 0DD1     		bne	.L60
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1553              		.loc 1 1101 0
 1554 0018 4FF42053 		mov	r3, #10240
 1555 001c C4F20003 		movt	r3, 16384
 1556 0020 9B68     		ldr	r3, [r3, #8]
 1557 0022 03F04003 		and	r3, r3, #64
 1558 0026 002B     		cmp	r3, #0
 1559 0028 2CD1     		bne	.L62
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1560              		.loc 1 1108 0
 1561 002a 7B68     		ldr	r3, [r7, #4]
 1562 002c 4FF00002 		mov	r2, #0
 1563 0030 DA70     		strb	r2, [r3, #3]
 1564 0032 27E0     		b	.L62
 1565              	.L60:
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours));
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes));
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds));
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_AlarmStruct->RTC_AlarmDateWeekDay));
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->CR & RTC_CR_FMT) != (uint32_t)RESET)
 1566              		.loc 1 1125 0
 1567 0034 4FF42053 		mov	r3, #10240
 1568 0038 C4F20003 		movt	r3, 16384
 1569 003c 9B68     		ldr	r3, [r3, #8]
 1570 003e 03F04003 		and	r3, r3, #64
 1571 0042 002B     		cmp	r3, #0
 1572 0044 07D0     		beq	.L63
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours);
 1573              		.loc 1 1127 0
 1574 0046 7B68     		ldr	r3, [r7, #4]
 1575 0048 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1576 004a 1846     		mov	r0, r3
 1577 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1578 0050 0346     		mov	r3, r0
 1579 0052 7B61     		str	r3, [r7, #20]
 1580 0054 03E0     		b	.L64
 1581              	.L63:
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR12(tmpreg));
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_H12(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12));
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = 0x00;
 1582              		.loc 1 1133 0
 1583 0056 7B68     		ldr	r3, [r7, #4]
 1584 0058 4FF00002 		mov	r2, #0
 1585 005c DA70     		strb	r2, [r3, #3]
 1586              	.L64:
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours)));
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes)));
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)));
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if(RTC_AlarmStruct->RTC_AlarmDateWeekDaySel == RTC_AlarmDateWeekDaySel_Date)
 1587              		.loc 1 1140 0
 1588 005e 7B68     		ldr	r3, [r7, #4]
 1589 0060 9B68     		ldr	r3, [r3, #8]
 1590 0062 002B     		cmp	r3, #0
 1591 0064 07D1     		bne	.L65
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1592              		.loc 1 1142 0
 1593 0066 7B68     		ldr	r3, [r7, #4]
 1594 0068 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1595 006a 1846     		mov	r0, r3
 1596 006c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1597 0070 0346     		mov	r3, r0
 1598 0072 7B61     		str	r3, [r7, #20]
 1599 0074 06E0     		b	.L62
 1600              	.L65:
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(tmpreg));    
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       tmpreg = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1601              		.loc 1 1147 0
 1602 0076 7B68     		ldr	r3, [r7, #4]
 1603 0078 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1604 007a 1846     		mov	r0, r3
 1605 007c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1606 0080 0346     		mov	r3, r0
 1607 0082 7B61     		str	r3, [r7, #20]
 1608              	.L62:
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(tmpreg));      
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format != RTC_Format_BIN)
 1609              		.loc 1 1153 0
 1610 0084 FB68     		ldr	r3, [r7, #12]
 1611 0086 002B     		cmp	r3, #0
 1612 0088 1DD0     		beq	.L66
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1613              		.loc 1 1155 0
 1614 008a 7B68     		ldr	r3, [r7, #4]
 1615 008c 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1616 008e 4FEA0342 		lsl	r2, r3, #16
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1617              		.loc 1 1156 0
 1618 0092 7B68     		ldr	r3, [r7, #4]
 1619 0094 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1620 0096 4FEA0323 		lsl	r3, r3, #8
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1621              		.loc 1 1155 0
 1622 009a 1A43     		orrs	r2, r2, r3
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1623              		.loc 1 1157 0
 1624 009c 7B68     		ldr	r3, [r7, #4]
 1625 009e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1626              		.loc 1 1156 0
 1627 00a0 1A43     		orrs	r2, r2, r3
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1628              		.loc 1 1158 0
 1629 00a2 7B68     		ldr	r3, [r7, #4]
 1630 00a4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1631 00a6 4FEA0343 		lsl	r3, r3, #16
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds) | \
 1632              		.loc 1 1157 0
 1633 00aa 1A43     		orrs	r2, r2, r3
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1634              		.loc 1 1159 0
 1635 00ac 7B68     		ldr	r3, [r7, #4]
 1636 00ae 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1637 00b0 4FEA0363 		lsl	r3, r3, #24
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1638              		.loc 1 1158 0
 1639 00b4 1A43     		orrs	r2, r2, r3
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1640              		.loc 1 1160 0
 1641 00b6 7B68     		ldr	r3, [r7, #4]
 1642 00b8 9B68     		ldr	r3, [r3, #8]
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1643              		.loc 1 1159 0
 1644 00ba 1A43     		orrs	r2, r2, r3
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1645              		.loc 1 1161 0
 1646 00bc 7B68     		ldr	r3, [r7, #4]
 1647 00be 5B68     		ldr	r3, [r3, #4]
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1648              		.loc 1 1155 0
 1649 00c0 1343     		orrs	r3, r3, r2
 1650 00c2 7B61     		str	r3, [r7, #20]
 1651 00c4 2FE0     		b	.L67
 1652              	.L66:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1653              		.loc 1 1165 0
 1654 00c6 7B68     		ldr	r3, [r7, #4]
 1655 00c8 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1656 00ca 1846     		mov	r0, r3
 1657 00cc FFF7FEFF 		bl	RTC_ByteToBcd2
 1658 00d0 0346     		mov	r3, r0
 1659 00d2 4FEA0344 		lsl	r4, r3, #16
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1660              		.loc 1 1166 0
 1661 00d6 7B68     		ldr	r3, [r7, #4]
 1662 00d8 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1663 00da 1846     		mov	r0, r3
 1664 00dc FFF7FEFF 		bl	RTC_ByteToBcd2
 1665 00e0 0346     		mov	r3, r0
 1666 00e2 4FEA0323 		lsl	r3, r3, #8
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1667              		.loc 1 1165 0
 1668 00e6 1C43     		orrs	r4, r4, r3
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1669              		.loc 1 1167 0
 1670 00e8 7B68     		ldr	r3, [r7, #4]
 1671 00ea 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1672 00ec 1846     		mov	r0, r3
 1673 00ee FFF7FEFF 		bl	RTC_ByteToBcd2
 1674 00f2 0346     		mov	r3, r0
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes) << 8) | \
 1675              		.loc 1 1166 0
 1676 00f4 44EA0302 		orr	r2, r4, r3
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1677              		.loc 1 1168 0
 1678 00f8 7B68     		ldr	r3, [r7, #4]
 1679 00fa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1680 00fc 4FEA0343 		lsl	r3, r3, #16
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds)) | \
 1681              		.loc 1 1167 0
 1682 0100 42EA0304 		orr	r4, r2, r3
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1683              		.loc 1 1169 0
 1684 0104 7B68     		ldr	r3, [r7, #4]
 1685 0106 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1686 0108 1846     		mov	r0, r3
 1687 010a FFF7FEFF 		bl	RTC_ByteToBcd2
 1688 010e 0346     		mov	r3, r0
 1689 0110 4FEA0363 		lsl	r3, r3, #24
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)(RTC_AlarmStruct->RTC_AlarmTime.RTC_H12) << 16) | \
 1690              		.loc 1 1168 0
 1691 0114 44EA0302 		orr	r2, r4, r3
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmDateWeekDaySel) | \
 1692              		.loc 1 1170 0
 1693 0118 7B68     		ldr	r3, [r7, #4]
 1694 011a 9B68     		ldr	r3, [r3, #8]
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmDateWeekDay) << 24) | \
 1695              		.loc 1 1169 0
 1696 011c 1A43     		orrs	r2, r2, r3
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****               ((uint32_t)RTC_AlarmStruct->RTC_AlarmMask)); 
 1697              		.loc 1 1171 0
 1698 011e 7B68     		ldr	r3, [r7, #4]
 1699 0120 5B68     		ldr	r3, [r3, #4]
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours) << 16) | \
 1700              		.loc 1 1165 0
 1701 0122 1343     		orrs	r3, r3, r2
 1702 0124 7B61     		str	r3, [r7, #20]
 1703              	.L67:
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1704              		.loc 1 1175 0
 1705 0126 4FF42053 		mov	r3, #10240
 1706 012a C4F20003 		movt	r3, 16384
 1707 012e 4FF0CA02 		mov	r2, #202
 1708 0132 5A62     		str	r2, [r3, #36]
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1709              		.loc 1 1176 0
 1710 0134 4FF42053 		mov	r3, #10240
 1711 0138 C4F20003 		movt	r3, 16384
 1712 013c 4FF05302 		mov	r2, #83
 1713 0140 5A62     		str	r2, [r3, #36]
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm register */
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1714              		.loc 1 1179 0
 1715 0142 BB68     		ldr	r3, [r7, #8]
 1716 0144 B3F5807F 		cmp	r3, #256
 1717 0148 06D1     		bne	.L68
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMAR = (uint32_t)tmpreg;
 1718              		.loc 1 1181 0
 1719 014a 4FF42053 		mov	r3, #10240
 1720 014e C4F20003 		movt	r3, 16384
 1721 0152 7A69     		ldr	r2, [r7, #20]
 1722 0154 DA61     		str	r2, [r3, #28]
 1723 0156 05E0     		b	.L69
 1724              	.L68:
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBR = (uint32_t)tmpreg;
 1725              		.loc 1 1185 0
 1726 0158 4FF42053 		mov	r3, #10240
 1727 015c C4F20003 		movt	r3, 16384
 1728 0160 7A69     		ldr	r2, [r7, #20]
 1729 0162 1A62     		str	r2, [r3, #32]
 1730              	.L69:
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;   
 1731              		.loc 1 1189 0
 1732 0164 4FF42053 		mov	r3, #10240
 1733 0168 C4F20003 		movt	r3, 16384
 1734 016c 4FF0FF02 		mov	r2, #255
 1735 0170 5A62     		str	r2, [r3, #36]
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1736              		.loc 1 1190 0
 1737 0172 07F11C07 		add	r7, r7, #28
 1738 0176 BD46     		mov	sp, r7
 1739 0178 90BD     		pop	{r4, r7, pc}
 1740              		.cfi_endproc
 1741              	.LFE126:
 1743 017a 00BF     		.section	.text.RTC_AlarmStructInit,"ax",%progbits
 1744              		.align	2
 1745              		.global	RTC_AlarmStructInit
 1746              		.thumb
 1747              		.thumb_func
 1749              	RTC_AlarmStructInit:
 1750              	.LFB127:
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Fills each RTC_AlarmStruct member with its default value
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         (Time = 00h:00mn:00sec / Date = 1st day of the month/Mask =
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         all fields are masked).
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a @ref RTC_AlarmTypeDef structure which
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         will be initialized.
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmStructInit(RTC_AlarmTypeDef* RTC_AlarmStruct)
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1751              		.loc 1 1201 0
 1752              		.cfi_startproc
 1753              		@ args = 0, pretend = 0, frame = 8
 1754              		@ frame_needed = 1, uses_anonymous_args = 0
 1755              		@ link register save eliminated.
 1756 0000 80B4     		push	{r7}
 1757              	.LCFI50:
 1758              		.cfi_def_cfa_offset 4
 1759              		.cfi_offset 7, -4
 1760 0002 83B0     		sub	sp, sp, #12
 1761              	.LCFI51:
 1762              		.cfi_def_cfa_offset 16
 1763 0004 00AF     		add	r7, sp, #0
 1764              	.LCFI52:
 1765              		.cfi_def_cfa_register 7
 1766 0006 7860     		str	r0, [r7, #4]
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Time Settings : Time = 00h:00mn:00sec */
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = RTC_H12_AM;
 1767              		.loc 1 1203 0
 1768 0008 7B68     		ldr	r3, [r7, #4]
 1769 000a 4FF00002 		mov	r2, #0
 1770 000e DA70     		strb	r2, [r3, #3]
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = 0;
 1771              		.loc 1 1204 0
 1772 0010 7B68     		ldr	r3, [r7, #4]
 1773 0012 4FF00002 		mov	r2, #0
 1774 0016 1A70     		strb	r2, [r3, #0]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = 0;
 1775              		.loc 1 1205 0
 1776 0018 7B68     		ldr	r3, [r7, #4]
 1777 001a 4FF00002 		mov	r2, #0
 1778 001e 5A70     		strb	r2, [r3, #1]
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = 0;
 1779              		.loc 1 1206 0
 1780 0020 7B68     		ldr	r3, [r7, #4]
 1781 0022 4FF00002 		mov	r2, #0
 1782 0026 9A70     		strb	r2, [r3, #2]
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Date Settings : Date = 1st day of the month */
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = RTC_AlarmDateWeekDaySel_Date;
 1783              		.loc 1 1209 0
 1784 0028 7B68     		ldr	r3, [r7, #4]
 1785 002a 4FF00002 		mov	r2, #0
 1786 002e 9A60     		str	r2, [r3, #8]
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = 1;
 1787              		.loc 1 1210 0
 1788 0030 7B68     		ldr	r3, [r7, #4]
 1789 0032 4FF00102 		mov	r2, #1
 1790 0036 1A73     		strb	r2, [r3, #12]
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Alarm Masks Settings : Mask =  all fields are not masked */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = RTC_AlarmMask_None;
 1791              		.loc 1 1213 0
 1792 0038 7B68     		ldr	r3, [r7, #4]
 1793 003a 4FF00002 		mov	r2, #0
 1794 003e 5A60     		str	r2, [r3, #4]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1795              		.loc 1 1214 0
 1796 0040 07F10C07 		add	r7, r7, #12
 1797 0044 BD46     		mov	sp, r7
 1798 0046 80BC     		pop	{r7}
 1799 0048 7047     		bx	lr
 1800              		.cfi_endproc
 1801              	.LFE127:
 1803 004a 00BF     		.section	.text.RTC_GetAlarm,"ax",%progbits
 1804              		.align	2
 1805              		.global	RTC_GetAlarm
 1806              		.thumb
 1807              		.thumb_func
 1809              	RTC_GetAlarm:
 1810              	.LFB128:
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmStruct: pointer to a RTC_AlarmTypeDef structure that will 
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          contains the output alarm configuration values.     
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetAlarm(uint32_t RTC_Format, uint32_t RTC_Alarm, RTC_AlarmTypeDef* RTC_AlarmStruct)
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1811              		.loc 1 1231 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 24
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815 0000 80B5     		push	{r7, lr}
 1816              	.LCFI53:
 1817              		.cfi_def_cfa_offset 8
 1818              		.cfi_offset 14, -4
 1819              		.cfi_offset 7, -8
 1820 0002 86B0     		sub	sp, sp, #24
 1821              	.LCFI54:
 1822              		.cfi_def_cfa_offset 32
 1823 0004 00AF     		add	r7, sp, #0
 1824              	.LCFI55:
 1825              		.cfi_def_cfa_register 7
 1826 0006 F860     		str	r0, [r7, #12]
 1827 0008 B960     		str	r1, [r7, #8]
 1828 000a 7A60     		str	r2, [r7, #4]
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 1829              		.loc 1 1232 0
 1830 000c 4FF00003 		mov	r3, #0
 1831 0010 7B61     		str	r3, [r7, #20]
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm)); 
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 1832              		.loc 1 1239 0
 1833 0012 BB68     		ldr	r3, [r7, #8]
 1834 0014 B3F5807F 		cmp	r3, #256
 1835 0018 06D1     		bne	.L72
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMAR);
 1836              		.loc 1 1241 0
 1837 001a 4FF42053 		mov	r3, #10240
 1838 001e C4F20003 		movt	r3, 16384
 1839 0022 DB69     		ldr	r3, [r3, #28]
 1840 0024 7B61     		str	r3, [r7, #20]
 1841 0026 05E0     		b	.L73
 1842              	.L72:
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)(RTC->ALRMBR);
 1843              		.loc 1 1245 0
 1844 0028 4FF42053 		mov	r3, #10240
 1845 002c C4F20003 		movt	r3, 16384
 1846 0030 1B6A     		ldr	r3, [r3, #32]
 1847 0032 7B61     		str	r3, [r7, #20]
 1848              	.L73:
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the structure with the read parameters */
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = (uint32_t)((tmpreg & (RTC_ALRMAR_HT | \
 1849              		.loc 1 1249 0
 1850 0034 7B69     		ldr	r3, [r7, #20]
 1851 0036 03F47C13 		and	r3, r3, #4128768
 1852 003a 4FEA1343 		lsr	r3, r3, #16
 1853 003e DAB2     		uxtb	r2, r3
 1854 0040 7B68     		ldr	r3, [r7, #4]
 1855 0042 1A70     		strb	r2, [r3, #0]
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_HU)) >> 16);
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = (uint32_t)((tmpreg & (RTC_ALRMAR_MNT | \
 1856              		.loc 1 1251 0
 1857 0044 7B69     		ldr	r3, [r7, #20]
 1858 0046 03F4FE43 		and	r3, r3, #32512
 1859 004a 4FEA1323 		lsr	r3, r3, #8
 1860 004e DAB2     		uxtb	r2, r3
 1861 0050 7B68     		ldr	r3, [r7, #4]
 1862 0052 5A70     		strb	r2, [r3, #1]
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_MNU)) >> 8);
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = (uint32_t)(tmpreg & (RTC_ALRMAR_ST | \
 1863              		.loc 1 1253 0
 1864 0054 7B69     		ldr	r3, [r7, #20]
 1865 0056 DBB2     		uxtb	r3, r3
 1866 0058 03F07F03 		and	r3, r3, #127
 1867 005c DAB2     		uxtb	r2, r3
 1868 005e 7B68     		ldr	r3, [r7, #4]
 1869 0060 9A70     		strb	r2, [r3, #2]
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                      RTC_ALRMAR_SU));
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmTime.RTC_H12 = (uint32_t)((tmpreg & RTC_ALRMAR_PM) >> 16);
 1870              		.loc 1 1255 0
 1871 0062 7B69     		ldr	r3, [r7, #20]
 1872 0064 03F48003 		and	r3, r3, #4194304
 1873 0068 4FEA1343 		lsr	r3, r3, #16
 1874 006c DAB2     		uxtb	r2, r3
 1875 006e 7B68     		ldr	r3, [r7, #4]
 1876 0070 DA70     		strb	r2, [r3, #3]
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDay = (uint32_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> 
 1877              		.loc 1 1256 0
 1878 0072 7B69     		ldr	r3, [r7, #20]
 1879 0074 03F07C53 		and	r3, r3, #1056964608
 1880 0078 4FEA1363 		lsr	r3, r3, #24
 1881 007c DAB2     		uxtb	r2, r3
 1882 007e 7B68     		ldr	r3, [r7, #4]
 1883 0080 1A73     		strb	r2, [r3, #12]
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 1884              		.loc 1 1257 0
 1885 0082 7B69     		ldr	r3, [r7, #20]
 1886 0084 03F08042 		and	r2, r3, #1073741824
 1887 0088 7B68     		ldr	r3, [r7, #4]
 1888 008a 9A60     		str	r2, [r3, #8]
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_AlarmStruct->RTC_AlarmMask = (uint32_t)(tmpreg & RTC_AlarmMask_All);
 1889              		.loc 1 1258 0
 1890 008c 7B69     		ldr	r3, [r7, #20]
 1891 008e 03F08032 		and	r2, r3, #-2139062144
 1892 0092 7B68     		ldr	r3, [r7, #4]
 1893 0094 5A60     		str	r2, [r3, #4]
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 1894              		.loc 1 1260 0
 1895 0096 FB68     		ldr	r3, [r7, #12]
 1896 0098 002B     		cmp	r3, #0
 1897 009a 23D1     		bne	.L71
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Hours = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1898              		.loc 1 1262 0
 1899 009c 7B68     		ldr	r3, [r7, #4]
 1900 009e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1901 00a0 1846     		mov	r0, r3
 1902 00a2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1903 00a6 0346     		mov	r3, r0
 1904 00a8 1A46     		mov	r2, r3
 1905 00aa 7B68     		ldr	r3, [r7, #4]
 1906 00ac 1A70     		strb	r2, [r3, #0]
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Hours);
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Minutes = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1907              		.loc 1 1264 0
 1908 00ae 7B68     		ldr	r3, [r7, #4]
 1909 00b0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1910 00b2 1846     		mov	r0, r3
 1911 00b4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1912 00b8 0346     		mov	r3, r0
 1913 00ba 1A46     		mov	r2, r3
 1914 00bc 7B68     		ldr	r3, [r7, #4]
 1915 00be 5A70     		strb	r2, [r3, #1]
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Minutes);
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmTime.RTC_Seconds = RTC_Bcd2ToByte(RTC_AlarmStruct-> \
 1916              		.loc 1 1266 0
 1917 00c0 7B68     		ldr	r3, [r7, #4]
 1918 00c2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1919 00c4 1846     		mov	r0, r3
 1920 00c6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1921 00ca 0346     		mov	r3, r0
 1922 00cc 1A46     		mov	r2, r3
 1923 00ce 7B68     		ldr	r3, [r7, #4]
 1924 00d0 9A70     		strb	r2, [r3, #2]
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                                         RTC_AlarmTime.RTC_Seconds);
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_AlarmStruct->RTC_AlarmDateWeekDay = RTC_Bcd2ToByte(RTC_AlarmStruct->RTC_AlarmDateWeekDay);
 1925              		.loc 1 1268 0
 1926 00d2 7B68     		ldr	r3, [r7, #4]
 1927 00d4 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 1928 00d6 1846     		mov	r0, r3
 1929 00d8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1930 00dc 0346     		mov	r3, r0
 1931 00de 1A46     		mov	r2, r3
 1932 00e0 7B68     		ldr	r3, [r7, #4]
 1933 00e2 1A73     		strb	r2, [r3, #12]
 1934              	.L71:
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 1935              		.loc 1 1270 0
 1936 00e4 07F11807 		add	r7, r7, #24
 1937 00e8 BD46     		mov	sp, r7
 1938 00ea 80BD     		pop	{r7, pc}
 1939              		.cfi_endproc
 1940              	.LFE128:
 1942              		.section	.text.RTC_AlarmCmd,"ax",%progbits
 1943              		.align	2
 1944              		.global	RTC_AlarmCmd
 1945              		.thumb
 1946              		.thumb_func
 1948              	RTC_AlarmCmd:
 1949              	.LFB129:
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC Alarm.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_A: to select Alarm A
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Alarm_B: to select Alarm B  
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified alarm.
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Alarm is enabled/disabled
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Alarm is not enabled/disabled  
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_AlarmCmd(uint32_t RTC_Alarm, FunctionalState NewState)
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 1950              		.loc 1 1285 0
 1951              		.cfi_startproc
 1952              		@ args = 0, pretend = 0, frame = 24
 1953              		@ frame_needed = 1, uses_anonymous_args = 0
 1954              		@ link register save eliminated.
 1955 0000 80B4     		push	{r7}
 1956              	.LCFI56:
 1957              		.cfi_def_cfa_offset 4
 1958              		.cfi_offset 7, -4
 1959 0002 87B0     		sub	sp, sp, #28
 1960              	.LCFI57:
 1961              		.cfi_def_cfa_offset 32
 1962 0004 00AF     		add	r7, sp, #0
 1963              	.LCFI58:
 1964              		.cfi_def_cfa_register 7
 1965 0006 7860     		str	r0, [r7, #4]
 1966 0008 0B46     		mov	r3, r1
 1967 000a FB70     		strb	r3, [r7, #3]
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t alarmcounter = 0x00;
 1968              		.loc 1 1286 0
 1969 000c 4FF00003 		mov	r3, #0
 1970 0010 FB60     		str	r3, [r7, #12]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t alarmstatus = 0x00;
 1971              		.loc 1 1287 0
 1972 0012 4FF00003 		mov	r3, #0
 1973 0016 3B61     		str	r3, [r7, #16]
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 1974              		.loc 1 1288 0
 1975 0018 4FF00003 		mov	r3, #0
 1976 001c FB75     		strb	r3, [r7, #23]
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CMD_ALARM(RTC_Alarm));
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 1977              		.loc 1 1295 0
 1978 001e 4FF42053 		mov	r3, #10240
 1979 0022 C4F20003 		movt	r3, 16384
 1980 0026 4FF0CA02 		mov	r2, #202
 1981 002a 5A62     		str	r2, [r3, #36]
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 1982              		.loc 1 1296 0
 1983 002c 4FF42053 		mov	r3, #10240
 1984 0030 C4F20003 		movt	r3, 16384
 1985 0034 4FF05302 		mov	r2, #83
 1986 0038 5A62     		str	r2, [r3, #36]
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm state */
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 1987              		.loc 1 1299 0
 1988 003a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1989 003c 002B     		cmp	r3, #0
 1990 003e 0FD0     		beq	.L76
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_Alarm;
 1991              		.loc 1 1301 0
 1992 0040 4FF42053 		mov	r3, #10240
 1993 0044 C4F20003 		movt	r3, 16384
 1994 0048 4FF42052 		mov	r2, #10240
 1995 004c C4F20002 		movt	r2, 16384
 1996 0050 9168     		ldr	r1, [r2, #8]
 1997 0052 7A68     		ldr	r2, [r7, #4]
 1998 0054 0A43     		orrs	r2, r2, r1
 1999 0056 9A60     		str	r2, [r3, #8]
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2000              		.loc 1 1303 0
 2001 0058 4FF00103 		mov	r3, #1
 2002 005c FB75     		strb	r3, [r7, #23]
 2003 005e 34E0     		b	.L77
 2004              	.L76:
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Alarm in RTC_CR register */
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_Alarm;
 2005              		.loc 1 1308 0
 2006 0060 4FF42053 		mov	r3, #10240
 2007 0064 C4F20003 		movt	r3, 16384
 2008 0068 4FF42052 		mov	r2, #10240
 2009 006c C4F20002 		movt	r2, 16384
 2010 0070 9168     		ldr	r1, [r2, #8]
 2011 0072 7A68     		ldr	r2, [r7, #4]
 2012 0074 6FEA0202 		mvn	r2, r2
 2013 0078 0A40     		ands	r2, r2, r1
 2014 007a 9A60     		str	r2, [r3, #8]
 2015              	.L79:
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmstatus = RTC->ISR & (RTC_Alarm >> 8);
 2016              		.loc 1 1313 0 discriminator 1
 2017 007c 4FF42053 		mov	r3, #10240
 2018 0080 C4F20003 		movt	r3, 16384
 2019 0084 DA68     		ldr	r2, [r3, #12]
 2020 0086 7B68     		ldr	r3, [r7, #4]
 2021 0088 4FEA1323 		lsr	r3, r3, #8
 2022 008c 1340     		ands	r3, r3, r2
 2023 008e 3B61     		str	r3, [r7, #16]
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       alarmcounter++;  
 2024              		.loc 1 1314 0 discriminator 1
 2025 0090 FB68     		ldr	r3, [r7, #12]
 2026 0092 03F10103 		add	r3, r3, #1
 2027 0096 FB60     		str	r3, [r7, #12]
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((alarmcounter != INITMODE_TIMEOUT) && (alarmstatus == 0x00));
 2028              		.loc 1 1315 0 discriminator 1
 2029 0098 FB68     		ldr	r3, [r7, #12]
 2030 009a B3F5803F 		cmp	r3, #65536
 2031 009e 02D0     		beq	.L78
 2032 00a0 3B69     		ldr	r3, [r7, #16]
 2033 00a2 002B     		cmp	r3, #0
 2034 00a4 EAD0     		beq	.L79
 2035              	.L78:
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & (RTC_Alarm >> 8)) == RESET)
 2036              		.loc 1 1317 0
 2037 00a6 4FF42053 		mov	r3, #10240
 2038 00aa C4F20003 		movt	r3, 16384
 2039 00ae DA68     		ldr	r2, [r3, #12]
 2040 00b0 7B68     		ldr	r3, [r7, #4]
 2041 00b2 4FEA1323 		lsr	r3, r3, #8
 2042 00b6 1340     		ands	r3, r3, r2
 2043 00b8 002B     		cmp	r3, #0
 2044 00ba 03D1     		bne	.L80
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2045              		.loc 1 1319 0
 2046 00bc 4FF00003 		mov	r3, #0
 2047 00c0 FB75     		strb	r3, [r7, #23]
 2048 00c2 02E0     		b	.L77
 2049              	.L80:
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } 
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2050              		.loc 1 1323 0
 2051 00c4 4FF00103 		mov	r3, #1
 2052 00c8 FB75     		strb	r3, [r7, #23]
 2053              	.L77:
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }        
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2054              		.loc 1 1328 0
 2055 00ca 4FF42053 		mov	r3, #10240
 2056 00ce C4F20003 		movt	r3, 16384
 2057 00d2 4FF0FF02 		mov	r2, #255
 2058 00d6 5A62     		str	r2, [r3, #36]
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2059              		.loc 1 1330 0
 2060 00d8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2061              		.loc 1 1331 0
 2062 00da 1846     		mov	r0, r3
 2063 00dc 07F11C07 		add	r7, r7, #28
 2064 00e0 BD46     		mov	sp, r7
 2065 00e2 80BC     		pop	{r7}
 2066 00e4 7047     		bx	lr
 2067              		.cfi_endproc
 2068              	.LFE129:
 2070 00e6 00BF     		.section	.text.RTC_AlarmSubSecondConfig,"ax",%progbits
 2071              		.align	2
 2072              		.global	RTC_AlarmSubSecondConfig
 2073              		.thumb
 2074              		.thumb_func
 2076              	RTC_AlarmSubSecondConfig:
 2077              	.LFB130:
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the RTC AlarmA/B Subseconds value and mask.*
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This function is performed only when the Alarm is disabled. 
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be configured.
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondValue: specifies the Subseconds value.
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be a value from 0 to 0x00007FFF.
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_AlarmSubSecondMask:  specifies the Subseconds Mask.
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be any combination of the following values:
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_All    : All Alarm SS fields are masked.
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          There is no comparison on sub seconds for Alarm.
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_1 : SS[14:1] are don't care in Alarm comparison.
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[0] is compared
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_2 : SS[14:2] are don't care in Alarm comparison.
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[1:0] are compared
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_3 : SS[14:3] are don't care in Alarm comparison.
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[2:0] are compared
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_4 : SS[14:4] are don't care in Alarm comparison.
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[3:0] are compared
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_5 : SS[14:5] are don't care in Alarm comparison.
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[4:0] are compared
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_6 : SS[14:6] are don't care in Alarm comparison.
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[5:0] are compared
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_7 : SS[14:7] are don't care in Alarm comparison.
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[6:0] are compared
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_8 : SS[14:8] are don't care in Alarm comparison.
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[7:0] are compared
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_9 : SS[14:9] are don't care in Alarm comparison.
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[8:0] are compared
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_10: SS[14:10] are don't care in Alarm comparison.
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[9:0] are compared
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_11: SS[14:11] are don't care in Alarm comparison.
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[10:0] are compared
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_12: SS[14:12] are don't care in Alarm comparison.
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[11:0] are compared
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14_13: SS[14:13] are don't care in Alarm comparison.
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[12:0] are compared
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_SS14   : SS[14] is don't care in Alarm comparison.
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          Only SS[13:0] are compared
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_AlarmSubSecondMask_None   : SS[14:0] are compared and must match
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                          to activate alarm
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_AlarmSubSecondConfig(uint32_t RTC_Alarm, uint32_t RTC_AlarmSubSecondValue, uint32_t RTC_Al
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2078              		.loc 1 1379 0
 2079              		.cfi_startproc
 2080              		@ args = 0, pretend = 0, frame = 24
 2081              		@ frame_needed = 1, uses_anonymous_args = 0
 2082              		@ link register save eliminated.
 2083 0000 80B4     		push	{r7}
 2084              	.LCFI59:
 2085              		.cfi_def_cfa_offset 4
 2086              		.cfi_offset 7, -4
 2087 0002 87B0     		sub	sp, sp, #28
 2088              	.LCFI60:
 2089              		.cfi_def_cfa_offset 32
 2090 0004 00AF     		add	r7, sp, #0
 2091              	.LCFI61:
 2092              		.cfi_def_cfa_register 7
 2093 0006 F860     		str	r0, [r7, #12]
 2094 0008 B960     		str	r1, [r7, #8]
 2095 000a 7A60     		str	r2, [r7, #4]
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2096              		.loc 1 1380 0
 2097 000c 4FF00003 		mov	r3, #0
 2098 0010 7B61     		str	r3, [r7, #20]
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM(RTC_Alarm));
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(RTC_AlarmSubSecondValue));
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(RTC_AlarmSubSecondMask));
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2099              		.loc 1 1388 0
 2100 0012 4FF42053 		mov	r3, #10240
 2101 0016 C4F20003 		movt	r3, 16384
 2102 001a 4FF0CA02 		mov	r2, #202
 2103 001e 5A62     		str	r2, [r3, #36]
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2104              		.loc 1 1389 0
 2105 0020 4FF42053 		mov	r3, #10240
 2106 0024 C4F20003 		movt	r3, 16384
 2107 0028 4FF05302 		mov	r2, #83
 2108 002c 5A62     		str	r2, [r3, #36]
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Alarm A or Alarm B SubSecond registers */
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t) (uint32_t)(RTC_AlarmSubSecondValue) | (uint32_t)(RTC_AlarmSubSecondMask);
 2109              		.loc 1 1392 0
 2110 002e BA68     		ldr	r2, [r7, #8]
 2111 0030 7B68     		ldr	r3, [r7, #4]
 2112 0032 1343     		orrs	r3, r3, r2
 2113 0034 7B61     		str	r3, [r7, #20]
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2114              		.loc 1 1394 0
 2115 0036 FB68     		ldr	r3, [r7, #12]
 2116 0038 B3F5807F 		cmp	r3, #256
 2117 003c 06D1     		bne	.L82
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the AlarmA SubSecond register */
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMASSR = tmpreg;
 2118              		.loc 1 1397 0
 2119 003e 4FF42053 		mov	r3, #10240
 2120 0042 C4F20003 		movt	r3, 16384
 2121 0046 7A69     		ldr	r2, [r7, #20]
 2122 0048 5A64     		str	r2, [r3, #68]
 2123 004a 05E0     		b	.L83
 2124              	.L82:
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Alarm B SubSecond register */
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->ALRMBSSR = tmpreg;
 2125              		.loc 1 1402 0
 2126 004c 4FF42053 		mov	r3, #10240
 2127 0050 C4F20003 		movt	r3, 16384
 2128 0054 7A69     		ldr	r2, [r7, #20]
 2129 0056 9A64     		str	r2, [r3, #72]
 2130              	.L83:
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2131              		.loc 1 1406 0
 2132 0058 4FF42053 		mov	r3, #10240
 2133 005c C4F20003 		movt	r3, 16384
 2134 0060 4FF0FF02 		mov	r2, #255
 2135 0064 5A62     		str	r2, [r3, #36]
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2136              		.loc 1 1408 0
 2137 0066 07F11C07 		add	r7, r7, #28
 2138 006a BD46     		mov	sp, r7
 2139 006c 80BC     		pop	{r7}
 2140 006e 7047     		bx	lr
 2141              		.cfi_endproc
 2142              	.LFE130:
 2144              		.section	.text.RTC_GetAlarmSubSecond,"ax",%progbits
 2145              		.align	2
 2146              		.global	RTC_GetAlarmSubSecond
 2147              		.thumb
 2148              		.thumb_func
 2150              	RTC_GetAlarmSubSecond:
 2151              	.LFB131:
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Gets the RTC Alarm Subseconds value.
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Alarm: specifies the alarm to be read.
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_A: to select Alarm A
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_Alarm_B: to select Alarm B
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Alarm Subseconds value.
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetAlarmSubSecond(uint32_t RTC_Alarm)
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2152              		.loc 1 1420 0
 2153              		.cfi_startproc
 2154              		@ args = 0, pretend = 0, frame = 16
 2155              		@ frame_needed = 1, uses_anonymous_args = 0
 2156              		@ link register save eliminated.
 2157 0000 80B4     		push	{r7}
 2158              	.LCFI62:
 2159              		.cfi_def_cfa_offset 4
 2160              		.cfi_offset 7, -4
 2161 0002 85B0     		sub	sp, sp, #20
 2162              	.LCFI63:
 2163              		.cfi_def_cfa_offset 24
 2164 0004 00AF     		add	r7, sp, #0
 2165              	.LCFI64:
 2166              		.cfi_def_cfa_register 7
 2167 0006 7860     		str	r0, [r7, #4]
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 2168              		.loc 1 1421 0
 2169 0008 4FF00003 		mov	r3, #0
 2170 000c FB60     		str	r3, [r7, #12]
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ALRMxR register */
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Alarm == RTC_Alarm_A)
 2171              		.loc 1 1424 0
 2172 000e 7B68     		ldr	r3, [r7, #4]
 2173 0010 B3F5807F 		cmp	r3, #256
 2174 0014 0AD1     		bne	.L85
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMASSR) & RTC_ALRMASSR_SS);
 2175              		.loc 1 1426 0
 2176 0016 4FF42053 		mov	r3, #10240
 2177 001a C4F20003 		movt	r3, 16384
 2178 001e 5B6C     		ldr	r3, [r3, #68]
 2179 0020 4FEA4343 		lsl	r3, r3, #17
 2180 0024 4FEA5343 		lsr	r3, r3, #17
 2181 0028 FB60     		str	r3, [r7, #12]
 2182 002a 09E0     		b	.L86
 2183              	.L85:
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg = (uint32_t)((RTC->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2184              		.loc 1 1430 0
 2185 002c 4FF42053 		mov	r3, #10240
 2186 0030 C4F20003 		movt	r3, 16384
 2187 0034 9B6C     		ldr	r3, [r3, #72]
 2188 0036 4FEA4343 		lsl	r3, r3, #17
 2189 003a 4FEA5343 		lsr	r3, r3, #17
 2190 003e FB60     		str	r3, [r7, #12]
 2191              	.L86:
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmpreg);
 2192              		.loc 1 1433 0
 2193 0040 FB68     		ldr	r3, [r7, #12]
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2194              		.loc 1 1434 0
 2195 0042 1846     		mov	r0, r3
 2196 0044 07F11407 		add	r7, r7, #20
 2197 0048 BD46     		mov	sp, r7
 2198 004a 80BC     		pop	{r7}
 2199 004c 7047     		bx	lr
 2200              		.cfi_endproc
 2201              	.LFE131:
 2203 004e 00BF     		.section	.text.RTC_WakeUpClockConfig,"ax",%progbits
 2204              		.align	2
 2205              		.global	RTC_WakeUpClockConfig
 2206              		.thumb
 2207              		.thumb_func
 2209              	RTC_WakeUpClockConfig:
 2210              	.LFB132:
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group4 WakeUp Timer configuration functions
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   WakeUp Timer configuration functions 
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                      WakeUp Timer configuration functions
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to program and read the RTC WakeUp.
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup clock source.
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The WakeUp Clock source can only be changed when the RTC WakeUp
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).      
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpClock: Wakeup Clock source.
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div16: RTC Wakeup Counter Clock = RTCCLK/16
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div8: RTC Wakeup Counter Clock = RTCCLK/8
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div4: RTC Wakeup Counter Clock = RTCCLK/4
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_RTCCLK_Div2: RTC Wakeup Counter Clock = RTCCLK/2
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_16bits: RTC Wakeup Counter Clock = CK_SPRE
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_WakeUpClock_CK_SPRE_17bits: RTC Wakeup Counter Clock = CK_SPRE
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WakeUpClockConfig(uint32_t RTC_WakeUpClock)
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2211              		.loc 1 1469 0
 2212              		.cfi_startproc
 2213              		@ args = 0, pretend = 0, frame = 8
 2214              		@ frame_needed = 1, uses_anonymous_args = 0
 2215              		@ link register save eliminated.
 2216 0000 80B4     		push	{r7}
 2217              	.LCFI65:
 2218              		.cfi_def_cfa_offset 4
 2219              		.cfi_offset 7, -4
 2220 0002 83B0     		sub	sp, sp, #12
 2221              	.LCFI66:
 2222              		.cfi_def_cfa_offset 16
 2223 0004 00AF     		add	r7, sp, #0
 2224              	.LCFI67:
 2225              		.cfi_def_cfa_register 7
 2226 0006 7860     		str	r0, [r7, #4]
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_CLOCK(RTC_WakeUpClock));
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2227              		.loc 1 1474 0
 2228 0008 4FF42053 		mov	r3, #10240
 2229 000c C4F20003 		movt	r3, 16384
 2230 0010 4FF0CA02 		mov	r2, #202
 2231 0014 5A62     		str	r2, [r3, #36]
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2232              		.loc 1 1475 0
 2233 0016 4FF42053 		mov	r3, #10240
 2234 001a C4F20003 		movt	r3, 16384
 2235 001e 4FF05302 		mov	r2, #83
 2236 0022 5A62     		str	r2, [r3, #36]
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Wakeup Timer clock source bits in CR register */
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 2237              		.loc 1 1478 0
 2238 0024 4FF42053 		mov	r3, #10240
 2239 0028 C4F20003 		movt	r3, 16384
 2240 002c 4FF42052 		mov	r2, #10240
 2241 0030 C4F20002 		movt	r2, 16384
 2242 0034 9268     		ldr	r2, [r2, #8]
 2243 0036 22F00702 		bic	r2, r2, #7
 2244 003a 9A60     		str	r2, [r3, #8]
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the clock source */
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_WakeUpClock;
 2245              		.loc 1 1481 0
 2246 003c 4FF42053 		mov	r3, #10240
 2247 0040 C4F20003 		movt	r3, 16384
 2248 0044 4FF42052 		mov	r2, #10240
 2249 0048 C4F20002 		movt	r2, 16384
 2250 004c 9168     		ldr	r1, [r2, #8]
 2251 004e 7A68     		ldr	r2, [r7, #4]
 2252 0050 0A43     		orrs	r2, r2, r1
 2253 0052 9A60     		str	r2, [r3, #8]
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2254              		.loc 1 1484 0
 2255 0054 4FF42053 		mov	r3, #10240
 2256 0058 C4F20003 		movt	r3, 16384
 2257 005c 4FF0FF02 		mov	r2, #255
 2258 0060 5A62     		str	r2, [r3, #36]
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2259              		.loc 1 1485 0
 2260 0062 07F10C07 		add	r7, r7, #12
 2261 0066 BD46     		mov	sp, r7
 2262 0068 80BC     		pop	{r7}
 2263 006a 7047     		bx	lr
 2264              		.cfi_endproc
 2265              	.LFE132:
 2267              		.section	.text.RTC_SetWakeUpCounter,"ax",%progbits
 2268              		.align	2
 2269              		.global	RTC_SetWakeUpCounter
 2270              		.thumb
 2271              		.thumb_func
 2273              	RTC_SetWakeUpCounter:
 2274              	.LFB133:
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Wakeup counter.
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The RTC WakeUp counter can only be written when the RTC WakeUp
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is disabled (Use the RTC_WakeUpCmd(DISABLE)).        
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_WakeUpCounter: specifies the WakeUp counter.
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be a value from 0x0000 to 0xFFFF. 
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_SetWakeUpCounter(uint32_t RTC_WakeUpCounter)
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2275              		.loc 1 1496 0
 2276              		.cfi_startproc
 2277              		@ args = 0, pretend = 0, frame = 8
 2278              		@ frame_needed = 1, uses_anonymous_args = 0
 2279              		@ link register save eliminated.
 2280 0000 80B4     		push	{r7}
 2281              	.LCFI68:
 2282              		.cfi_def_cfa_offset 4
 2283              		.cfi_offset 7, -4
 2284 0002 83B0     		sub	sp, sp, #12
 2285              	.LCFI69:
 2286              		.cfi_def_cfa_offset 16
 2287 0004 00AF     		add	r7, sp, #0
 2288              	.LCFI70:
 2289              		.cfi_def_cfa_register 7
 2290 0006 7860     		str	r0, [r7, #4]
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_WAKEUP_COUNTER(RTC_WakeUpCounter));
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2291              		.loc 1 1501 0
 2292 0008 4FF42053 		mov	r3, #10240
 2293 000c C4F20003 		movt	r3, 16384
 2294 0010 4FF0CA02 		mov	r2, #202
 2295 0014 5A62     		str	r2, [r3, #36]
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2296              		.loc 1 1502 0
 2297 0016 4FF42053 		mov	r3, #10240
 2298 001a C4F20003 		movt	r3, 16384
 2299 001e 4FF05302 		mov	r2, #83
 2300 0022 5A62     		str	r2, [r3, #36]
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Wakeup Timer counter */
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WUTR = (uint32_t)RTC_WakeUpCounter;
 2301              		.loc 1 1505 0
 2302 0024 4FF42053 		mov	r3, #10240
 2303 0028 C4F20003 		movt	r3, 16384
 2304 002c 7A68     		ldr	r2, [r7, #4]
 2305 002e 5A61     		str	r2, [r3, #20]
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2306              		.loc 1 1508 0
 2307 0030 4FF42053 		mov	r3, #10240
 2308 0034 C4F20003 		movt	r3, 16384
 2309 0038 4FF0FF02 		mov	r2, #255
 2310 003c 5A62     		str	r2, [r3, #36]
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2311              		.loc 1 1509 0
 2312 003e 07F10C07 		add	r7, r7, #12
 2313 0042 BD46     		mov	sp, r7
 2314 0044 80BC     		pop	{r7}
 2315 0046 7047     		bx	lr
 2316              		.cfi_endproc
 2317              	.LFE133:
 2319              		.section	.text.RTC_GetWakeUpCounter,"ax",%progbits
 2320              		.align	2
 2321              		.global	RTC_GetWakeUpCounter
 2322              		.thumb
 2323              		.thumb_func
 2325              	RTC_GetWakeUpCounter:
 2326              	.LFB134:
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC WakeUp timer counter value.
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The RTC WakeUp Counter value.
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetWakeUpCounter(void)
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2327              		.loc 1 1517 0
 2328              		.cfi_startproc
 2329              		@ args = 0, pretend = 0, frame = 0
 2330              		@ frame_needed = 1, uses_anonymous_args = 0
 2331              		@ link register save eliminated.
 2332 0000 80B4     		push	{r7}
 2333              	.LCFI71:
 2334              		.cfi_def_cfa_offset 4
 2335              		.cfi_offset 7, -4
 2336 0002 00AF     		add	r7, sp, #0
 2337              	.LCFI72:
 2338              		.cfi_def_cfa_register 7
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the counter value */
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return ((uint32_t)(RTC->WUTR & RTC_WUTR_WUT));
 2339              		.loc 1 1519 0
 2340 0004 4FF42053 		mov	r3, #10240
 2341 0008 C4F20003 		movt	r3, 16384
 2342 000c 5B69     		ldr	r3, [r3, #20]
 2343 000e 4FEA0343 		lsl	r3, r3, #16
 2344 0012 4FEA1343 		lsr	r3, r3, #16
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2345              		.loc 1 1520 0
 2346 0016 1846     		mov	r0, r3
 2347 0018 BD46     		mov	sp, r7
 2348 001a 80BC     		pop	{r7}
 2349 001c 7047     		bx	lr
 2350              		.cfi_endproc
 2351              	.LFE134:
 2353 001e 00BF     		.section	.text.RTC_WakeUpCmd,"ax",%progbits
 2354              		.align	2
 2355              		.global	RTC_WakeUpCmd
 2356              		.thumb
 2357              		.thumb_func
 2359              	RTC_WakeUpCmd:
 2360              	.LFB135:
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC WakeUp timer.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the WakeUp timer.
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_WakeUpCmd(FunctionalState NewState)
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2361              		.loc 1 1529 0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 24
 2364              		@ frame_needed = 1, uses_anonymous_args = 0
 2365              		@ link register save eliminated.
 2366 0000 80B4     		push	{r7}
 2367              	.LCFI73:
 2368              		.cfi_def_cfa_offset 4
 2369              		.cfi_offset 7, -4
 2370 0002 87B0     		sub	sp, sp, #28
 2371              	.LCFI74:
 2372              		.cfi_def_cfa_offset 32
 2373 0004 00AF     		add	r7, sp, #0
 2374              	.LCFI75:
 2375              		.cfi_def_cfa_register 7
 2376 0006 0346     		mov	r3, r0
 2377 0008 FB71     		strb	r3, [r7, #7]
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t wutcounter = 0x00;
 2378              		.loc 1 1530 0
 2379 000a 4FF00003 		mov	r3, #0
 2380 000e FB60     		str	r3, [r7, #12]
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t wutwfstatus = 0x00;
 2381              		.loc 1 1531 0
 2382 0010 4FF00003 		mov	r3, #0
 2383 0014 3B61     		str	r3, [r7, #16]
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2384              		.loc 1 1532 0
 2385 0016 4FF00003 		mov	r3, #0
 2386 001a FB75     		strb	r3, [r7, #23]
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2387              		.loc 1 1538 0
 2388 001c 4FF42053 		mov	r3, #10240
 2389 0020 C4F20003 		movt	r3, 16384
 2390 0024 4FF0CA02 		mov	r2, #202
 2391 0028 5A62     		str	r2, [r3, #36]
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2392              		.loc 1 1539 0
 2393 002a 4FF42053 		mov	r3, #10240
 2394 002e C4F20003 		movt	r3, 16384
 2395 0032 4FF05302 		mov	r2, #83
 2396 0036 5A62     		str	r2, [r3, #36]
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2397              		.loc 1 1541 0
 2398 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2399 003a 002B     		cmp	r3, #0
 2400 003c 0FD0     		beq	.L91
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the Wakeup Timer */
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_WUTE;
 2401              		.loc 1 1544 0
 2402 003e 4FF42053 		mov	r3, #10240
 2403 0042 C4F20003 		movt	r3, 16384
 2404 0046 4FF42052 		mov	r2, #10240
 2405 004a C4F20002 		movt	r2, 16384
 2406 004e 9268     		ldr	r2, [r2, #8]
 2407 0050 42F48062 		orr	r2, r2, #1024
 2408 0054 9A60     		str	r2, [r3, #8]
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;    
 2409              		.loc 1 1545 0
 2410 0056 4FF00103 		mov	r3, #1
 2411 005a FB75     		strb	r3, [r7, #23]
 2412 005c 2EE0     		b	.L92
 2413              	.L91:
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the Wakeup Timer */
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_WUTE;
 2414              		.loc 1 1550 0
 2415 005e 4FF42053 		mov	r3, #10240
 2416 0062 C4F20003 		movt	r3, 16384
 2417 0066 4FF42052 		mov	r2, #10240
 2418 006a C4F20002 		movt	r2, 16384
 2419 006e 9268     		ldr	r2, [r2, #8]
 2420 0070 22F48062 		bic	r2, r2, #1024
 2421 0074 9A60     		str	r2, [r3, #8]
 2422              	.L94:
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     do
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutwfstatus = RTC->ISR & RTC_ISR_WUTWF;
 2423              		.loc 1 1554 0 discriminator 1
 2424 0076 4FF42053 		mov	r3, #10240
 2425 007a C4F20003 		movt	r3, 16384
 2426 007e DB68     		ldr	r3, [r3, #12]
 2427 0080 03F00403 		and	r3, r3, #4
 2428 0084 3B61     		str	r3, [r7, #16]
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       wutcounter++;  
 2429              		.loc 1 1555 0 discriminator 1
 2430 0086 FB68     		ldr	r3, [r7, #12]
 2431 0088 03F10103 		add	r3, r3, #1
 2432 008c FB60     		str	r3, [r7, #12]
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     } while((wutcounter != INITMODE_TIMEOUT) && (wutwfstatus == 0x00));
 2433              		.loc 1 1556 0 discriminator 1
 2434 008e FB68     		ldr	r3, [r7, #12]
 2435 0090 B3F5803F 		cmp	r3, #65536
 2436 0094 02D0     		beq	.L93
 2437 0096 3B69     		ldr	r3, [r7, #16]
 2438 0098 002B     		cmp	r3, #0
 2439 009a ECD0     		beq	.L94
 2440              	.L93:
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if ((RTC->ISR & RTC_ISR_WUTWF) == RESET)
 2441              		.loc 1 1558 0
 2442 009c 4FF42053 		mov	r3, #10240
 2443 00a0 C4F20003 		movt	r3, 16384
 2444 00a4 DB68     		ldr	r3, [r3, #12]
 2445 00a6 03F00403 		and	r3, r3, #4
 2446 00aa 002B     		cmp	r3, #0
 2447 00ac 03D1     		bne	.L95
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 2448              		.loc 1 1560 0
 2449 00ae 4FF00003 		mov	r3, #0
 2450 00b2 FB75     		strb	r3, [r7, #23]
 2451 00b4 02E0     		b	.L92
 2452              	.L95:
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = SUCCESS;
 2453              		.loc 1 1564 0
 2454 00b6 4FF00103 		mov	r3, #1
 2455 00ba FB75     		strb	r3, [r7, #23]
 2456              	.L92:
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }    
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2457              		.loc 1 1569 0
 2458 00bc 4FF42053 		mov	r3, #10240
 2459 00c0 C4F20003 		movt	r3, 16384
 2460 00c4 4FF0FF02 		mov	r2, #255
 2461 00c8 5A62     		str	r2, [r3, #36]
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2462              		.loc 1 1571 0
 2463 00ca FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2464              		.loc 1 1572 0
 2465 00cc 1846     		mov	r0, r3
 2466 00ce 07F11C07 		add	r7, r7, #28
 2467 00d2 BD46     		mov	sp, r7
 2468 00d4 80BC     		pop	{r7}
 2469 00d6 7047     		bx	lr
 2470              		.cfi_endproc
 2471              	.LFE135:
 2473              		.section	.text.RTC_DayLightSavingConfig,"ax",%progbits
 2474              		.align	2
 2475              		.global	RTC_DayLightSavingConfig
 2476              		.thumb
 2477              		.thumb_func
 2479              	RTC_DayLightSavingConfig:
 2480              	.LFB136:
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group5 Daylight Saving configuration functions
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Daylight Saving configuration functions 
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                     Daylight Saving configuration functions
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC DayLight Saving.
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Adds or substract one hour from the current time.
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_DayLightSaveOperation: the value of hour adjustment. 
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_SUB1H: Substract one hour (winter time)
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_DayLightSaving_ADD1H: Add one hour (summer time)
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_StoreOperation: Specifies the value to be written in the BCK bit 
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                            in CR register to store the operation.
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Reset: BCK Bit Reset
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_StoreOperation_Set: BCK Bit Set
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_DayLightSavingConfig(uint32_t RTC_DayLightSaving, uint32_t RTC_StoreOperation)
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2481              		.loc 1 1606 0
 2482              		.cfi_startproc
 2483              		@ args = 0, pretend = 0, frame = 8
 2484              		@ frame_needed = 1, uses_anonymous_args = 0
 2485              		@ link register save eliminated.
 2486 0000 80B4     		push	{r7}
 2487              	.LCFI76:
 2488              		.cfi_def_cfa_offset 4
 2489              		.cfi_offset 7, -4
 2490 0002 83B0     		sub	sp, sp, #12
 2491              	.LCFI77:
 2492              		.cfi_def_cfa_offset 16
 2493 0004 00AF     		add	r7, sp, #0
 2494              	.LCFI78:
 2495              		.cfi_def_cfa_register 7
 2496 0006 7860     		str	r0, [r7, #4]
 2497 0008 3960     		str	r1, [r7, #0]
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(RTC_DayLightSaving));
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(RTC_StoreOperation));
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2498              		.loc 1 1612 0
 2499 000a 4FF42053 		mov	r3, #10240
 2500 000e C4F20003 		movt	r3, 16384
 2501 0012 4FF0CA02 		mov	r2, #202
 2502 0016 5A62     		str	r2, [r3, #36]
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2503              		.loc 1 1613 0
 2504 0018 4FF42053 		mov	r3, #10240
 2505 001c C4F20003 		movt	r3, 16384
 2506 0020 4FF05302 		mov	r2, #83
 2507 0024 5A62     		str	r2, [r3, #36]
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_BCK);
 2508              		.loc 1 1616 0
 2509 0026 4FF42053 		mov	r3, #10240
 2510 002a C4F20003 		movt	r3, 16384
 2511 002e 4FF42052 		mov	r2, #10240
 2512 0032 C4F20002 		movt	r2, 16384
 2513 0036 9268     		ldr	r2, [r2, #8]
 2514 0038 22F48022 		bic	r2, r2, #262144
 2515 003c 9A60     		str	r2, [r3, #8]
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_DayLightSaving | RTC_StoreOperation);
 2516              		.loc 1 1619 0
 2517 003e 4FF42053 		mov	r3, #10240
 2518 0042 C4F20003 		movt	r3, 16384
 2519 0046 4FF42052 		mov	r2, #10240
 2520 004a C4F20002 		movt	r2, 16384
 2521 004e 9168     		ldr	r1, [r2, #8]
 2522 0050 7868     		ldr	r0, [r7, #4]
 2523 0052 3A68     		ldr	r2, [r7, #0]
 2524 0054 0243     		orrs	r2, r2, r0
 2525 0056 0A43     		orrs	r2, r2, r1
 2526 0058 9A60     		str	r2, [r3, #8]
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2527              		.loc 1 1622 0
 2528 005a 4FF42053 		mov	r3, #10240
 2529 005e C4F20003 		movt	r3, 16384
 2530 0062 4FF0FF02 		mov	r2, #255
 2531 0066 5A62     		str	r2, [r3, #36]
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2532              		.loc 1 1623 0
 2533 0068 07F10C07 		add	r7, r7, #12
 2534 006c BD46     		mov	sp, r7
 2535 006e 80BC     		pop	{r7}
 2536 0070 7047     		bx	lr
 2537              		.cfi_endproc
 2538              	.LFE136:
 2540 0072 00BF     		.section	.text.RTC_GetStoreOperation,"ax",%progbits
 2541              		.align	2
 2542              		.global	RTC_GetStoreOperation
 2543              		.thumb
 2544              		.thumb_func
 2546              	RTC_GetStoreOperation:
 2547              	.LFB137:
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Returns the RTC Day Light Saving stored operation.
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC Day Light Saving stored operation.
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Reset
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - RTC_StoreOperation_Set       
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetStoreOperation(void)
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2548              		.loc 1 1633 0
 2549              		.cfi_startproc
 2550              		@ args = 0, pretend = 0, frame = 0
 2551              		@ frame_needed = 1, uses_anonymous_args = 0
 2552              		@ link register save eliminated.
 2553 0000 80B4     		push	{r7}
 2554              	.LCFI79:
 2555              		.cfi_def_cfa_offset 4
 2556              		.cfi_offset 7, -4
 2557 0002 00AF     		add	r7, sp, #0
 2558              	.LCFI80:
 2559              		.cfi_def_cfa_register 7
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (RTC->CR & RTC_CR_BCK);
 2560              		.loc 1 1634 0
 2561 0004 4FF42053 		mov	r3, #10240
 2562 0008 C4F20003 		movt	r3, 16384
 2563 000c 9B68     		ldr	r3, [r3, #8]
 2564 000e 03F48023 		and	r3, r3, #262144
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2565              		.loc 1 1635 0
 2566 0012 1846     		mov	r0, r3
 2567 0014 BD46     		mov	sp, r7
 2568 0016 80BC     		pop	{r7}
 2569 0018 7047     		bx	lr
 2570              		.cfi_endproc
 2571              	.LFE137:
 2573 001a 00BF     		.section	.text.RTC_OutputConfig,"ax",%progbits
 2574              		.align	2
 2575              		.global	RTC_OutputConfig
 2576              		.thumb
 2577              		.thumb_func
 2579              	RTC_OutputConfig:
 2580              	.LFB138:
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group6 Output pin Configuration function
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Output pin Configuration function 
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                          Output pin Configuration function
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   This section provide functions allowing to configure the RTC Output source.
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC output source (AFO_ALARM).
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Output: Specifies which signal will be routed to the RTC output. 
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_Disable: No output selected
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmA: signal of AlarmA mapped to output
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_AlarmB: signal of AlarmB mapped to output
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Output_WakeUp: signal of WakeUp mapped to output
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputPolarity: Specifies the polarity of the output signal. 
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_High: The output pin is high when the 
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputPolarity_Low: The output pin is low when the 
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                 ALRAF/ALRBF/WUTF is high (depending on OSEL)
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputConfig(uint32_t RTC_Output, uint32_t RTC_OutputPolarity)
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2581              		.loc 1 1672 0
 2582              		.cfi_startproc
 2583              		@ args = 0, pretend = 0, frame = 8
 2584              		@ frame_needed = 1, uses_anonymous_args = 0
 2585              		@ link register save eliminated.
 2586 0000 80B4     		push	{r7}
 2587              	.LCFI81:
 2588              		.cfi_def_cfa_offset 4
 2589              		.cfi_offset 7, -4
 2590 0002 83B0     		sub	sp, sp, #12
 2591              	.LCFI82:
 2592              		.cfi_def_cfa_offset 16
 2593 0004 00AF     		add	r7, sp, #0
 2594              	.LCFI83:
 2595              		.cfi_def_cfa_register 7
 2596 0006 7860     		str	r0, [r7, #4]
 2597 0008 3960     		str	r1, [r7, #0]
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT(RTC_Output));
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_POL(RTC_OutputPolarity));
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2598              		.loc 1 1678 0
 2599 000a 4FF42053 		mov	r3, #10240
 2600 000e C4F20003 		movt	r3, 16384
 2601 0012 4FF0CA02 		mov	r2, #202
 2602 0016 5A62     		str	r2, [r3, #36]
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2603              		.loc 1 1679 0
 2604 0018 4FF42053 		mov	r3, #10240
 2605 001c C4F20003 		movt	r3, 16384
 2606 0020 4FF05302 		mov	r2, #83
 2607 0024 5A62     		str	r2, [r3, #36]
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the bits to be configured */
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_OSEL | RTC_CR_POL);
 2608              		.loc 1 1682 0
 2609 0026 4FF42053 		mov	r3, #10240
 2610 002a C4F20003 		movt	r3, 16384
 2611 002e 4FF42052 		mov	r2, #10240
 2612 0032 C4F20002 		movt	r2, 16384
 2613 0036 9268     		ldr	r2, [r2, #8]
 2614 0038 22F4E002 		bic	r2, r2, #7340032
 2615 003c 9A60     		str	r2, [r3, #8]
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the output selection and polarity */
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)(RTC_Output | RTC_OutputPolarity);
 2616              		.loc 1 1685 0
 2617 003e 4FF42053 		mov	r3, #10240
 2618 0042 C4F20003 		movt	r3, 16384
 2619 0046 4FF42052 		mov	r2, #10240
 2620 004a C4F20002 		movt	r2, 16384
 2621 004e 9168     		ldr	r1, [r2, #8]
 2622 0050 7868     		ldr	r0, [r7, #4]
 2623 0052 3A68     		ldr	r2, [r7, #0]
 2624 0054 0243     		orrs	r2, r2, r0
 2625 0056 0A43     		orrs	r2, r2, r1
 2626 0058 9A60     		str	r2, [r3, #8]
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2627              		.loc 1 1688 0
 2628 005a 4FF42053 		mov	r3, #10240
 2629 005e C4F20003 		movt	r3, 16384
 2630 0062 4FF0FF02 		mov	r2, #255
 2631 0066 5A62     		str	r2, [r3, #36]
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2632              		.loc 1 1689 0
 2633 0068 07F10C07 		add	r7, r7, #12
 2634 006c BD46     		mov	sp, r7
 2635 006e 80BC     		pop	{r7}
 2636 0070 7047     		bx	lr
 2637              		.cfi_endproc
 2638              	.LFE138:
 2640 0072 00BF     		.section	.text.RTC_CoarseCalibConfig,"ax",%progbits
 2641              		.align	2
 2642              		.global	RTC_CoarseCalibConfig
 2643              		.thumb
 2644              		.thumb_func
 2646              	RTC_CoarseCalibConfig:
 2647              	.LFB139:
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group7 Digital Calibration configuration functions
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Coarse Calibration configuration functions 
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                   Digital Calibration configuration functions
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Coarse calibration parameters.
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibSign: specifies the sign of the coarse calibration value.
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be  one of the following values:
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Positive: The value sign is positive 
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_CalibSign_Negative: The value sign is negative
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: value of coarse calibration expressed in ppm (coded on 5 bits).
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *    
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 63 when using negative
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 2-ppm step.
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   This Calibration value should be between 0 and 126 when using positive
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         sign with a 4-ppm step.
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *           
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are initialized
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not initialized     
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibConfig(uint32_t RTC_CalibSign, uint32_t Value)
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2648              		.loc 1 1726 0
 2649              		.cfi_startproc
 2650              		@ args = 0, pretend = 0, frame = 16
 2651              		@ frame_needed = 1, uses_anonymous_args = 0
 2652 0000 80B5     		push	{r7, lr}
 2653              	.LCFI84:
 2654              		.cfi_def_cfa_offset 8
 2655              		.cfi_offset 14, -4
 2656              		.cfi_offset 7, -8
 2657 0002 84B0     		sub	sp, sp, #16
 2658              	.LCFI85:
 2659              		.cfi_def_cfa_offset 24
 2660 0004 00AF     		add	r7, sp, #0
 2661              	.LCFI86:
 2662              		.cfi_def_cfa_register 7
 2663 0006 7860     		str	r0, [r7, #4]
 2664 0008 3960     		str	r1, [r7, #0]
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2665              		.loc 1 1727 0
 2666 000a 4FF00003 		mov	r3, #0
 2667 000e FB73     		strb	r3, [r7, #15]
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_SIGN(RTC_CalibSign));
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_VALUE(Value)); 
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2668              		.loc 1 1734 0
 2669 0010 4FF42053 		mov	r3, #10240
 2670 0014 C4F20003 		movt	r3, 16384
 2671 0018 4FF0CA02 		mov	r2, #202
 2672 001c 5A62     		str	r2, [r3, #36]
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2673              		.loc 1 1735 0
 2674 001e 4FF42053 		mov	r3, #10240
 2675 0022 C4F20003 		movt	r3, 16384
 2676 0026 4FF05302 		mov	r2, #83
 2677 002a 5A62     		str	r2, [r3, #36]
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2678              		.loc 1 1738 0
 2679 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2680 0030 0346     		mov	r3, r0
 2681 0032 002B     		cmp	r3, #0
 2682 0034 03D1     		bne	.L100
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 2683              		.loc 1 1740 0
 2684 0036 4FF00003 		mov	r3, #0
 2685 003a FB73     		strb	r3, [r7, #15]
 2686 003c 0CE0     		b	.L101
 2687              	.L100:
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Set the coarse calibration value */
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALIBR = (uint32_t)(RTC_CalibSign | Value);
 2688              		.loc 1 1745 0
 2689 003e 4FF42053 		mov	r3, #10240
 2690 0042 C4F20003 		movt	r3, 16384
 2691 0046 7968     		ldr	r1, [r7, #4]
 2692 0048 3A68     		ldr	r2, [r7, #0]
 2693 004a 0A43     		orrs	r2, r2, r1
 2694 004c 9A61     		str	r2, [r3, #24]
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2695              		.loc 1 1747 0
 2696 004e FFF7FEFF 		bl	RTC_ExitInitMode
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2697              		.loc 1 1749 0
 2698 0052 4FF00103 		mov	r3, #1
 2699 0056 FB73     		strb	r3, [r7, #15]
 2700              	.L101:
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2701              		.loc 1 1753 0
 2702 0058 4FF42053 		mov	r3, #10240
 2703 005c C4F20003 		movt	r3, 16384
 2704 0060 4FF0FF02 		mov	r2, #255
 2705 0064 5A62     		str	r2, [r3, #36]
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2706              		.loc 1 1755 0
 2707 0066 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2708              		.loc 1 1756 0
 2709 0068 1846     		mov	r0, r3
 2710 006a 07F11007 		add	r7, r7, #16
 2711 006e BD46     		mov	sp, r7
 2712 0070 80BD     		pop	{r7, pc}
 2713              		.cfi_endproc
 2714              	.LFE139:
 2716 0072 00BF     		.section	.text.RTC_CoarseCalibCmd,"ax",%progbits
 2717              		.align	2
 2718              		.global	RTC_CoarseCalibCmd
 2719              		.thumb
 2720              		.thumb_func
 2722              	RTC_CoarseCalibCmd:
 2723              	.LFB140:
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the Coarse calibration process.
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the Coarse calibration.
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Coarse calibration are enabled/disabled
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Coarse calibration are not enabled/disabled    
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_CoarseCalibCmd(FunctionalState NewState)
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2724              		.loc 1 1767 0
 2725              		.cfi_startproc
 2726              		@ args = 0, pretend = 0, frame = 16
 2727              		@ frame_needed = 1, uses_anonymous_args = 0
 2728 0000 80B5     		push	{r7, lr}
 2729              	.LCFI87:
 2730              		.cfi_def_cfa_offset 8
 2731              		.cfi_offset 14, -4
 2732              		.cfi_offset 7, -8
 2733 0002 84B0     		sub	sp, sp, #16
 2734              	.LCFI88:
 2735              		.cfi_def_cfa_offset 24
 2736 0004 00AF     		add	r7, sp, #0
 2737              	.LCFI89:
 2738              		.cfi_def_cfa_register 7
 2739 0006 0346     		mov	r3, r0
 2740 0008 FB71     		strb	r3, [r7, #7]
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2741              		.loc 1 1768 0
 2742 000a 4FF00003 		mov	r3, #0
 2743 000e FB73     		strb	r3, [r7, #15]
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2744              		.loc 1 1774 0
 2745 0010 4FF42053 		mov	r3, #10240
 2746 0014 C4F20003 		movt	r3, 16384
 2747 0018 4FF0CA02 		mov	r2, #202
 2748 001c 5A62     		str	r2, [r3, #36]
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2749              		.loc 1 1775 0
 2750 001e 4FF42053 		mov	r3, #10240
 2751 0022 C4F20003 		movt	r3, 16384
 2752 0026 4FF05302 		mov	r2, #83
 2753 002a 5A62     		str	r2, [r3, #36]
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Set Initialization mode */
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_EnterInitMode() == ERROR)
 2754              		.loc 1 1778 0
 2755 002c FFF7FEFF 		bl	RTC_EnterInitMode
 2756 0030 0346     		mov	r3, r0
 2757 0032 002B     		cmp	r3, #0
 2758 0034 03D1     		bne	.L103
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status =  ERROR;
 2759              		.loc 1 1780 0
 2760 0036 4FF00003 		mov	r3, #0
 2761 003a FB73     		strb	r3, [r7, #15]
 2762 003c 20E0     		b	.L104
 2763              	.L103:
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if (NewState != DISABLE)
 2764              		.loc 1 1784 0
 2765 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2766 0040 002B     		cmp	r3, #0
 2767 0042 0CD0     		beq	.L105
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Enable the Coarse Calibration */
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR |= (uint32_t)RTC_CR_DCE;
 2768              		.loc 1 1787 0
 2769 0044 4FF42053 		mov	r3, #10240
 2770 0048 C4F20003 		movt	r3, 16384
 2771 004c 4FF42052 		mov	r2, #10240
 2772 0050 C4F20002 		movt	r2, 16384
 2773 0054 9268     		ldr	r2, [r2, #8]
 2774 0056 42F08002 		orr	r2, r2, #128
 2775 005a 9A60     		str	r2, [r3, #8]
 2776 005c 0BE0     		b	.L106
 2777              	.L105:
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     { 
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Disable the Coarse Calibration */
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->CR &= (uint32_t)~RTC_CR_DCE;
 2778              		.loc 1 1792 0
 2779 005e 4FF42053 		mov	r3, #10240
 2780 0062 C4F20003 		movt	r3, 16384
 2781 0066 4FF42052 		mov	r2, #10240
 2782 006a C4F20002 		movt	r2, 16384
 2783 006e 9268     		ldr	r2, [r2, #8]
 2784 0070 22F08002 		bic	r2, r2, #128
 2785 0074 9A60     		str	r2, [r3, #8]
 2786              	.L106:
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Exit Initialization mode */
1795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_ExitInitMode();
 2787              		.loc 1 1795 0
 2788 0076 FFF7FEFF 		bl	RTC_ExitInitMode
1796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
1797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 2789              		.loc 1 1797 0
 2790 007a 4FF00103 		mov	r3, #1
 2791 007e FB73     		strb	r3, [r7, #15]
 2792              	.L104:
1798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
1799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2793              		.loc 1 1801 0
 2794 0080 4FF42053 		mov	r3, #10240
 2795 0084 C4F20003 		movt	r3, 16384
 2796 0088 4FF0FF02 		mov	r2, #255
 2797 008c 5A62     		str	r2, [r3, #36]
1802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return status;
 2798              		.loc 1 1803 0
 2799 008e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2800              		.loc 1 1804 0
 2801 0090 1846     		mov	r0, r3
 2802 0092 07F11007 		add	r7, r7, #16
 2803 0096 BD46     		mov	sp, r7
 2804 0098 80BD     		pop	{r7, pc}
 2805              		.cfi_endproc
 2806              	.LFE140:
 2808 009a 00BF     		.section	.text.RTC_CalibOutputCmd,"ax",%progbits
 2809              		.align	2
 2810              		.global	RTC_CalibOutputCmd
 2811              		.thumb
 2812              		.thumb_func
 2814              	RTC_CalibOutputCmd:
 2815              	.LFB141:
1805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the RTC clock to be output through the relative pin.
1808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the digital calibration Output.
1809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputCmd(FunctionalState NewState)
1813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2816              		.loc 1 1813 0
 2817              		.cfi_startproc
 2818              		@ args = 0, pretend = 0, frame = 8
 2819              		@ frame_needed = 1, uses_anonymous_args = 0
 2820              		@ link register save eliminated.
 2821 0000 80B4     		push	{r7}
 2822              	.LCFI90:
 2823              		.cfi_def_cfa_offset 4
 2824              		.cfi_offset 7, -4
 2825 0002 83B0     		sub	sp, sp, #12
 2826              	.LCFI91:
 2827              		.cfi_def_cfa_offset 16
 2828 0004 00AF     		add	r7, sp, #0
 2829              	.LCFI92:
 2830              		.cfi_def_cfa_register 7
 2831 0006 0346     		mov	r3, r0
 2832 0008 FB71     		strb	r3, [r7, #7]
1814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2833              		.loc 1 1818 0
 2834 000a 4FF42053 		mov	r3, #10240
 2835 000e C4F20003 		movt	r3, 16384
 2836 0012 4FF0CA02 		mov	r2, #202
 2837 0016 5A62     		str	r2, [r3, #36]
1819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2838              		.loc 1 1819 0
 2839 0018 4FF42053 		mov	r3, #10240
 2840 001c C4F20003 		movt	r3, 16384
 2841 0020 4FF05302 		mov	r2, #83
 2842 0024 5A62     		str	r2, [r3, #36]
1820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 2843              		.loc 1 1821 0
 2844 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2845 0028 002B     		cmp	r3, #0
 2846 002a 0CD0     		beq	.L108
1822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the RTC clock output */
1824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)RTC_CR_COE;
 2847              		.loc 1 1824 0
 2848 002c 4FF42053 		mov	r3, #10240
 2849 0030 C4F20003 		movt	r3, 16384
 2850 0034 4FF42052 		mov	r2, #10240
 2851 0038 C4F20002 		movt	r2, 16384
 2852 003c 9268     		ldr	r2, [r2, #8]
 2853 003e 42F40002 		orr	r2, r2, #8388608
 2854 0042 9A60     		str	r2, [r3, #8]
 2855 0044 0BE0     		b	.L109
 2856              	.L108:
1825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
1828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the RTC clock output */
1829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~RTC_CR_COE;
 2857              		.loc 1 1829 0
 2858 0046 4FF42053 		mov	r3, #10240
 2859 004a C4F20003 		movt	r3, 16384
 2860 004e 4FF42052 		mov	r2, #10240
 2861 0052 C4F20002 		movt	r2, 16384
 2862 0056 9268     		ldr	r2, [r2, #8]
 2863 0058 22F40002 		bic	r2, r2, #8388608
 2864 005c 9A60     		str	r2, [r3, #8]
 2865              	.L109:
1830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 2866              		.loc 1 1833 0
 2867 005e 4FF42053 		mov	r3, #10240
 2868 0062 C4F20003 		movt	r3, 16384
 2869 0066 4FF0FF02 		mov	r2, #255
 2870 006a 5A62     		str	r2, [r3, #36]
1834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2871              		.loc 1 1834 0
 2872 006c 07F10C07 		add	r7, r7, #12
 2873 0070 BD46     		mov	sp, r7
 2874 0072 80BC     		pop	{r7}
 2875 0074 7047     		bx	lr
 2876              		.cfi_endproc
 2877              	.LFE141:
 2879              		.section	.text.RTC_CalibOutputConfig,"ax",%progbits
 2880              		.align	2
 2881              		.global	RTC_CalibOutputConfig
 2882              		.thumb
 2883              		.thumb_func
 2885              	RTC_CalibOutputConfig:
 2886              	.LFB142:
1835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configure the Calibration Pinout (RTC_CALIB) Selection (1Hz or 512Hz).
1838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_CalibOutput : Select the Calibration output Selection .
1839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_512Hz: A signal has a regular waveform at 512Hz. 
1841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_CalibOutput_1Hz  : A signal has a regular waveform at 1Hz.
1842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_CalibOutputConfig(uint32_t RTC_CalibOutput)
1845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2887              		.loc 1 1845 0
 2888              		.cfi_startproc
 2889              		@ args = 0, pretend = 0, frame = 8
 2890              		@ frame_needed = 1, uses_anonymous_args = 0
 2891              		@ link register save eliminated.
 2892 0000 80B4     		push	{r7}
 2893              	.LCFI93:
 2894              		.cfi_def_cfa_offset 4
 2895              		.cfi_offset 7, -4
 2896 0002 83B0     		sub	sp, sp, #12
 2897              	.LCFI94:
 2898              		.cfi_def_cfa_offset 16
 2899 0004 00AF     		add	r7, sp, #0
 2900              	.LCFI95:
 2901              		.cfi_def_cfa_register 7
 2902 0006 7860     		str	r0, [r7, #4]
1846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CALIB_OUTPUT(RTC_CalibOutput));
1848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2903              		.loc 1 1850 0
 2904 0008 4FF42053 		mov	r3, #10240
 2905 000c C4F20003 		movt	r3, 16384
 2906 0010 4FF0CA02 		mov	r2, #202
 2907 0014 5A62     		str	r2, [r3, #36]
1851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2908              		.loc 1 1851 0
 2909 0016 4FF42053 		mov	r3, #10240
 2910 001a C4F20003 		movt	r3, 16384
 2911 001e 4FF05302 		mov	r2, #83
 2912 0022 5A62     		str	r2, [r3, #36]
1852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /*clear flags before config*/
1854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR &= (uint32_t)~(RTC_CR_COSEL);
 2913              		.loc 1 1854 0
 2914 0024 4FF42053 		mov	r3, #10240
 2915 0028 C4F20003 		movt	r3, 16384
 2916 002c 4FF42052 		mov	r2, #10240
 2917 0030 C4F20002 		movt	r2, 16384
 2918 0034 9268     		ldr	r2, [r2, #8]
 2919 0036 22F40022 		bic	r2, r2, #524288
 2920 003a 9A60     		str	r2, [r3, #8]
1855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_CR register */
1857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR |= (uint32_t)RTC_CalibOutput;
 2921              		.loc 1 1857 0
 2922 003c 4FF42053 		mov	r3, #10240
 2923 0040 C4F20003 		movt	r3, 16384
 2924 0044 4FF42052 		mov	r2, #10240
 2925 0048 C4F20002 		movt	r2, 16384
 2926 004c 9168     		ldr	r1, [r2, #8]
 2927 004e 7A68     		ldr	r2, [r7, #4]
 2928 0050 0A43     		orrs	r2, r2, r1
 2929 0052 9A60     		str	r2, [r3, #8]
1858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 2930              		.loc 1 1860 0
 2931 0054 4FF42053 		mov	r3, #10240
 2932 0058 C4F20003 		movt	r3, 16384
 2933 005c 4FF0FF02 		mov	r2, #255
 2934 0060 5A62     		str	r2, [r3, #36]
1861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 2935              		.loc 1 1861 0
 2936 0062 07F10C07 		add	r7, r7, #12
 2937 0066 BD46     		mov	sp, r7
 2938 0068 80BC     		pop	{r7}
 2939 006a 7047     		bx	lr
 2940              		.cfi_endproc
 2941              	.LFE142:
 2943              		.section	.text.RTC_SmoothCalibConfig,"ax",%progbits
 2944              		.align	2
 2945              		.global	RTC_SmoothCalibConfig
 2946              		.thumb
 2947              		.thumb_func
 2949              	RTC_SmoothCalibConfig:
 2950              	.LFB143:
1862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Smooth Calibration Settings.
1865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPeriod : Select the Smooth Calibration Period.
1866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be can be one of the following values:
1867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_32sec : The smooth calibration periode is 32s.
1868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_16sec : The smooth calibration periode is 16s.
1869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPeriod_8sec  : The smooth calibartion periode is 8s.
1870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmoothCalibPlusPulses : Select to Set or reset the CALP bit.
1871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
1872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Set  : Add one RTCCLK puls every 2**11 pulses.
1873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_SmoothCalibPlusPulses_Reset: No RTCCLK pulses are added.
1874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_SmouthCalibMinusPulsesValue: Select the value of CALM[8:0] bits.
1875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one any value from 0 to 0x000001FF.
1876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
1877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Calib registers are configured
1878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Calib registers are not configured
1879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
1880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SmoothCalibConfig(uint32_t RTC_SmoothCalibPeriod,
1881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmoothCalibPlusPulses,
1882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                   uint32_t RTC_SmouthCalibMinusPulsesValue)
1883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 2951              		.loc 1 1883 0
 2952              		.cfi_startproc
 2953              		@ args = 0, pretend = 0, frame = 24
 2954              		@ frame_needed = 1, uses_anonymous_args = 0
 2955              		@ link register save eliminated.
 2956 0000 80B4     		push	{r7}
 2957              	.LCFI96:
 2958              		.cfi_def_cfa_offset 4
 2959              		.cfi_offset 7, -4
 2960 0002 87B0     		sub	sp, sp, #28
 2961              	.LCFI97:
 2962              		.cfi_def_cfa_offset 32
 2963 0004 00AF     		add	r7, sp, #0
 2964              	.LCFI98:
 2965              		.cfi_def_cfa_register 7
 2966 0006 F860     		str	r0, [r7, #12]
 2967 0008 B960     		str	r1, [r7, #8]
 2968 000a 7A60     		str	r2, [r7, #4]
1884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 2969              		.loc 1 1884 0
 2970 000c 4FF00003 		mov	r3, #0
 2971 0010 FB75     		strb	r3, [r7, #23]
1885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t recalpfcount = 0;
 2972              		.loc 1 1885 0
 2973 0012 4FF00003 		mov	r3, #0
 2974 0016 3B61     		str	r3, [r7, #16]
1886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(RTC_SmoothCalibPeriod));
1889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_PLUS(RTC_SmoothCalibPlusPulses));
1890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SMOOTH_CALIB_MINUS(RTC_SmouthCalibMinusPulsesValue));
1891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 2975              		.loc 1 1893 0
 2976 0018 4FF42053 		mov	r3, #10240
 2977 001c C4F20003 		movt	r3, 16384
 2978 0020 4FF0CA02 		mov	r2, #202
 2979 0024 5A62     		str	r2, [r3, #36]
1894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 2980              		.loc 1 1894 0
 2981 0026 4FF42053 		mov	r3, #10240
 2982 002a C4F20003 		movt	r3, 16384
 2983 002e 4FF05302 		mov	r2, #83
 2984 0032 5A62     		str	r2, [r3, #36]
1895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if a calibration is pending*/
1897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) != RESET)
 2985              		.loc 1 1897 0
 2986 0034 4FF42053 		mov	r3, #10240
 2987 0038 C4F20003 		movt	r3, 16384
 2988 003c DB68     		ldr	r3, [r3, #12]
 2989 003e 03F48033 		and	r3, r3, #65536
 2990 0042 002B     		cmp	r3, #0
 2991 0044 11D0     		beq	.L112
1898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* wait until the Calibration is completed*/
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 2992              		.loc 1 1900 0
 2993 0046 03E0     		b	.L113
 2994              	.L114:
1901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
1902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       recalpfcount++;
 2995              		.loc 1 1902 0
 2996 0048 3B69     		ldr	r3, [r7, #16]
 2997 004a 03F10103 		add	r3, r3, #1
 2998 004e 3B61     		str	r3, [r7, #16]
 2999              	.L113:
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3000              		.loc 1 1900 0 discriminator 1
 3001 0050 4FF42053 		mov	r3, #10240
 3002 0054 C4F20003 		movt	r3, 16384
 3003 0058 DB68     		ldr	r3, [r3, #12]
 3004 005a 03F48033 		and	r3, r3, #65536
 3005 005e 002B     		cmp	r3, #0
 3006 0060 03D0     		beq	.L112
1900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_RECALPF) != RESET) && (recalpfcount != RECALPF_TIMEOUT))
 3007              		.loc 1 1900 0 is_stmt 0 discriminator 2
 3008 0062 3B69     		ldr	r3, [r7, #16]
 3009 0064 B3F5003F 		cmp	r3, #131072
 3010 0068 EED1     		bne	.L114
 3011              	.L112:
1903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
1904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* check if the calibration pending is completed or if there is no calibration operation at all*/
1907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_RECALPF) == RESET)
 3012              		.loc 1 1907 0 is_stmt 1
 3013 006a 4FF42053 		mov	r3, #10240
 3014 006e C4F20003 		movt	r3, 16384
 3015 0072 DB68     		ldr	r3, [r3, #12]
 3016 0074 03F48033 		and	r3, r3, #65536
 3017 0078 002B     		cmp	r3, #0
 3018 007a 0DD1     		bne	.L115
1908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Smooth calibration settings */
1910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CALR = (uint32_t)((uint32_t)RTC_SmoothCalibPeriod | (uint32_t)RTC_SmoothCalibPlusPulses | 
 3019              		.loc 1 1910 0
 3020 007c 4FF42053 		mov	r3, #10240
 3021 0080 C4F20003 		movt	r3, 16384
 3022 0084 F968     		ldr	r1, [r7, #12]
 3023 0086 BA68     		ldr	r2, [r7, #8]
 3024 0088 1143     		orrs	r1, r1, r2
 3025 008a 7A68     		ldr	r2, [r7, #4]
 3026 008c 0A43     		orrs	r2, r2, r1
 3027 008e DA63     		str	r2, [r3, #60]
1911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = SUCCESS;
 3028              		.loc 1 1912 0
 3029 0090 4FF00103 		mov	r3, #1
 3030 0094 FB75     		strb	r3, [r7, #23]
 3031 0096 02E0     		b	.L116
 3032              	.L115:
1913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 3033              		.loc 1 1916 0
 3034 0098 4FF00003 		mov	r3, #0
 3035 009c FB75     		strb	r3, [r7, #23]
 3036              	.L116:
1917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 3037              		.loc 1 1920 0
 3038 009e 4FF42053 		mov	r3, #10240
 3039 00a2 C4F20003 		movt	r3, 16384
 3040 00a6 4FF0FF02 		mov	r2, #255
 3041 00aa 5A62     		str	r2, [r3, #36]
1921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
1922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 3042              		.loc 1 1922 0
 3043 00ac FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3044              		.loc 1 1923 0
 3045 00ae 1846     		mov	r0, r3
 3046 00b0 07F11C07 		add	r7, r7, #28
 3047 00b4 BD46     		mov	sp, r7
 3048 00b6 80BC     		pop	{r7}
 3049 00b8 7047     		bx	lr
 3050              		.cfi_endproc
 3051              	.LFE143:
 3053 00ba 00BF     		.section	.text.RTC_TimeStampCmd,"ax",%progbits
 3054              		.align	2
 3055              		.global	RTC_TimeStampCmd
 3056              		.thumb
 3057              		.thumb_func
 3059              	RTC_TimeStampCmd:
 3060              	.LFB144:
1924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
1927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group8 TimeStamp configuration functions
1931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   TimeStamp configuration functions 
1932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
1933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
1934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
1935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        TimeStamp configuration functions
1936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
1937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
1939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
1940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the RTC TimeStamp functionality with the 
1944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         specified time stamp pin stimulating edge.
1945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampEdge: Specifies the pin edge on which the TimeStamp is 
1946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         activated.
1947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following:
1948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Rising: the Time stamp event occurs on the rising 
1949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    edge of the related pin.
1950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampEdge_Falling: the Time stamp event occurs on the 
1951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                     falling edge of the related pin.
1952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the TimeStamp.
1953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
1954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
1956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampCmd(uint32_t RTC_TimeStampEdge, FunctionalState NewState)
1957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3061              		.loc 1 1957 0
 3062              		.cfi_startproc
 3063              		@ args = 0, pretend = 0, frame = 16
 3064              		@ frame_needed = 1, uses_anonymous_args = 0
 3065              		@ link register save eliminated.
 3066 0000 80B4     		push	{r7}
 3067              	.LCFI99:
 3068              		.cfi_def_cfa_offset 4
 3069              		.cfi_offset 7, -4
 3070 0002 85B0     		sub	sp, sp, #20
 3071              	.LCFI100:
 3072              		.cfi_def_cfa_offset 24
 3073 0004 00AF     		add	r7, sp, #0
 3074              	.LCFI101:
 3075              		.cfi_def_cfa_register 7
 3076 0006 7860     		str	r0, [r7, #4]
 3077 0008 0B46     		mov	r3, r1
 3078 000a FB70     		strb	r3, [r7, #3]
1958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 3079              		.loc 1 1958 0
 3080 000c 4FF00003 		mov	r3, #0
 3081 0010 FB60     		str	r3, [r7, #12]
1959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
1961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_EDGE(RTC_TimeStampEdge));
1962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_CR register and clear the bits to be configured */
1965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 3082              		.loc 1 1965 0
 3083 0012 4FF42053 		mov	r3, #10240
 3084 0016 C4F20003 		movt	r3, 16384
 3085 001a 9B68     		ldr	r3, [r3, #8]
 3086 001c 23F40063 		bic	r3, r3, #2048
 3087 0020 23F00803 		bic	r3, r3, #8
 3088 0024 FB60     		str	r3, [r7, #12]
1966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the new configuration */
1968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3089              		.loc 1 1968 0
 3090 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3091 0028 002B     		cmp	r3, #0
 3092 002a 06D0     		beq	.L118
1969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge | RTC_CR_TSE);
 3093              		.loc 1 1970 0
 3094 002c 7A68     		ldr	r2, [r7, #4]
 3095 002e FB68     		ldr	r3, [r7, #12]
 3096 0030 1343     		orrs	r3, r3, r2
 3097 0032 43F40063 		orr	r3, r3, #2048
 3098 0036 FB60     		str	r3, [r7, #12]
 3099 0038 03E0     		b	.L119
 3100              	.L118:
1971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
1973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
1974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     tmpreg |= (uint32_t)(RTC_TimeStampEdge);
 3101              		.loc 1 1974 0
 3102 003a FA68     		ldr	r2, [r7, #12]
 3103 003c 7B68     		ldr	r3, [r7, #4]
 3104 003e 1343     		orrs	r3, r3, r2
 3105 0040 FB60     		str	r3, [r7, #12]
 3106              	.L119:
1975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
1976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
1978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3107              		.loc 1 1978 0
 3108 0042 4FF42053 		mov	r3, #10240
 3109 0046 C4F20003 		movt	r3, 16384
 3110 004a 4FF0CA02 		mov	r2, #202
 3111 004e 5A62     		str	r2, [r3, #36]
1979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3112              		.loc 1 1979 0
 3113 0050 4FF42053 		mov	r3, #10240
 3114 0054 C4F20003 		movt	r3, 16384
 3115 0058 4FF05302 		mov	r2, #83
 3116 005c 5A62     		str	r2, [r3, #36]
1980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the Time Stamp TSEDGE and Enable bits */
1982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->CR = (uint32_t)tmpreg;
 3117              		.loc 1 1982 0
 3118 005e 4FF42053 		mov	r3, #10240
 3119 0062 C4F20003 		movt	r3, 16384
 3120 0066 FA68     		ldr	r2, [r7, #12]
 3121 0068 9A60     		str	r2, [r3, #8]
1983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
1985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 3122              		.loc 1 1985 0
 3123 006a 4FF42053 		mov	r3, #10240
 3124 006e C4F20003 		movt	r3, 16384
 3125 0072 4FF0FF02 		mov	r2, #255
 3126 0076 5A62     		str	r2, [r3, #36]
1986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3127              		.loc 1 1986 0
 3128 0078 07F11407 		add	r7, r7, #20
 3129 007c BD46     		mov	sp, r7
 3130 007e 80BC     		pop	{r7}
 3131 0080 7047     		bx	lr
 3132              		.cfi_endproc
 3133              	.LFE144:
 3135 0082 00BF     		.section	.text.RTC_GetTimeStamp,"ax",%progbits
 3136              		.align	2
 3137              		.global	RTC_GetTimeStamp
 3138              		.thumb
 3139              		.thumb_func
 3141              	RTC_GetTimeStamp:
 3142              	.LFB145:
1987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
1988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
1989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC TimeStamp value and masks.
1990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Format: specifies the format of the output parameters.
1991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
1992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BIN: Binary data format 
1993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_Format_BCD: BCD data format
1994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampTimeStruct: pointer to a RTC_TimeTypeDef structure that will 
1995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp time values. 
1996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param RTC_StampDateStruct: pointer to a RTC_DateTypeDef structure that will 
1997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                             contains the TimeStamp date values.     
1998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
1999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_GetTimeStamp(uint32_t RTC_Format, RTC_TimeTypeDef* RTC_StampTimeStruct, 
2001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                                       RTC_DateTypeDef* RTC_StampDateStruct)
2002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3143              		.loc 1 2002 0
 3144              		.cfi_startproc
 3145              		@ args = 0, pretend = 0, frame = 24
 3146              		@ frame_needed = 1, uses_anonymous_args = 0
 3147 0000 80B5     		push	{r7, lr}
 3148              	.LCFI102:
 3149              		.cfi_def_cfa_offset 8
 3150              		.cfi_offset 14, -4
 3151              		.cfi_offset 7, -8
 3152 0002 86B0     		sub	sp, sp, #24
 3153              	.LCFI103:
 3154              		.cfi_def_cfa_offset 32
 3155 0004 00AF     		add	r7, sp, #0
 3156              	.LCFI104:
 3157              		.cfi_def_cfa_register 7
 3158 0006 F860     		str	r0, [r7, #12]
 3159 0008 B960     		str	r1, [r7, #8]
 3160 000a 7A60     		str	r2, [r7, #4]
2003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmptime = 0, tmpdate = 0;
 3161              		.loc 1 2003 0
 3162 000c 4FF00003 		mov	r3, #0
 3163 0010 7B61     		str	r3, [r7, #20]
 3164 0012 4FF00003 		mov	r3, #0
 3165 0016 3B61     		str	r3, [r7, #16]
2004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_FORMAT(RTC_Format));
2007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TimeStamp time and date registers values */
2009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmptime = (uint32_t)(RTC->TSTR & RTC_TR_RESERVED_MASK);
 3166              		.loc 1 2009 0
 3167 0018 4FF42053 		mov	r3, #10240
 3168 001c C4F20003 		movt	r3, 16384
 3169 0020 1A6B     		ldr	r2, [r3, #48]
 3170 0022 47F67F73 		movw	r3, #32639
 3171 0026 C0F27F03 		movt	r3, 127
 3172 002a 1340     		ands	r3, r3, r2
 3173 002c 7B61     		str	r3, [r7, #20]
2010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpdate = (uint32_t)(RTC->TSDR & RTC_DR_RESERVED_MASK);
 3174              		.loc 1 2010 0
 3175 002e 4FF42053 		mov	r3, #10240
 3176 0032 C4F20003 		movt	r3, 16384
 3177 0036 5B6B     		ldr	r3, [r3, #52]
 3178 0038 23F07F43 		bic	r3, r3, #-16777216
 3179 003c 23F0C003 		bic	r3, r3, #192
 3180 0040 3B61     		str	r3, [r7, #16]
2011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Time structure fields with the read parameters */
2013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Hours = (uint8_t)((tmptime & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 3181              		.loc 1 2013 0
 3182 0042 7B69     		ldr	r3, [r7, #20]
 3183 0044 03F47C13 		and	r3, r3, #4128768
 3184 0048 4FEA1343 		lsr	r3, r3, #16
 3185 004c DAB2     		uxtb	r2, r3
 3186 004e BB68     		ldr	r3, [r7, #8]
 3187 0050 1A70     		strb	r2, [r3, #0]
2014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Minutes = (uint8_t)((tmptime & (RTC_TR_MNT | RTC_TR_MNU)) >> 8);
 3188              		.loc 1 2014 0
 3189 0052 7B69     		ldr	r3, [r7, #20]
 3190 0054 03F4FE43 		and	r3, r3, #32512
 3191 0058 4FEA1323 		lsr	r3, r3, #8
 3192 005c DAB2     		uxtb	r2, r3
 3193 005e BB68     		ldr	r3, [r7, #8]
 3194 0060 5A70     		strb	r2, [r3, #1]
2015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_Seconds = (uint8_t)(tmptime & (RTC_TR_ST | RTC_TR_SU));
 3195              		.loc 1 2015 0
 3196 0062 7B69     		ldr	r3, [r7, #20]
 3197 0064 DBB2     		uxtb	r3, r3
 3198 0066 03F07F03 		and	r3, r3, #127
 3199 006a DAB2     		uxtb	r2, r3
 3200 006c BB68     		ldr	r3, [r7, #8]
 3201 006e 9A70     		strb	r2, [r3, #2]
2016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampTimeStruct->RTC_H12 = (uint8_t)((tmptime & (RTC_TR_PM)) >> 16);  
 3202              		.loc 1 2016 0
 3203 0070 7B69     		ldr	r3, [r7, #20]
 3204 0072 03F48003 		and	r3, r3, #4194304
 3205 0076 4FEA1343 		lsr	r3, r3, #16
 3206 007a DAB2     		uxtb	r2, r3
 3207 007c BB68     		ldr	r3, [r7, #8]
 3208 007e DA70     		strb	r2, [r3, #3]
2017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Fill the Date structure fields with the read parameters */
2019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Year = 0;
 3209              		.loc 1 2019 0
 3210 0080 7B68     		ldr	r3, [r7, #4]
 3211 0082 4FF00002 		mov	r2, #0
 3212 0086 DA70     		strb	r2, [r3, #3]
2020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Month = (uint8_t)((tmpdate & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 3213              		.loc 1 2020 0
 3214 0088 3B69     		ldr	r3, [r7, #16]
 3215 008a 03F4F853 		and	r3, r3, #7936
 3216 008e 4FEA1323 		lsr	r3, r3, #8
 3217 0092 DAB2     		uxtb	r2, r3
 3218 0094 7B68     		ldr	r3, [r7, #4]
 3219 0096 5A70     		strb	r2, [r3, #1]
2021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_Date = (uint8_t)(tmpdate & (RTC_DR_DT | RTC_DR_DU));
 3220              		.loc 1 2021 0
 3221 0098 3B69     		ldr	r3, [r7, #16]
 3222 009a DBB2     		uxtb	r3, r3
 3223 009c 03F03F03 		and	r3, r3, #63
 3224 00a0 DAB2     		uxtb	r2, r3
 3225 00a2 7B68     		ldr	r3, [r7, #4]
 3226 00a4 9A70     		strb	r2, [r3, #2]
2022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC_StampDateStruct->RTC_WeekDay = (uint8_t)((tmpdate & (RTC_DR_WDU)) >> 13);
 3227              		.loc 1 2022 0
 3228 00a6 3B69     		ldr	r3, [r7, #16]
 3229 00a8 03F46043 		and	r3, r3, #57344
 3230 00ac 4FEA5333 		lsr	r3, r3, #13
 3231 00b0 DAB2     		uxtb	r2, r3
 3232 00b2 7B68     		ldr	r3, [r7, #4]
 3233 00b4 1A70     		strb	r2, [r3, #0]
2023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the input parameters format */
2025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_Format == RTC_Format_BIN)
 3234              		.loc 1 2025 0
 3235 00b6 FB68     		ldr	r3, [r7, #12]
 3236 00b8 002B     		cmp	r3, #0
 3237 00ba 35D1     		bne	.L120
2026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Time structure parameters to Binary format */
2028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Hours = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Hours);
 3238              		.loc 1 2028 0
 3239 00bc BB68     		ldr	r3, [r7, #8]
 3240 00be 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3241 00c0 1846     		mov	r0, r3
 3242 00c2 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3243 00c6 0346     		mov	r3, r0
 3244 00c8 1A46     		mov	r2, r3
 3245 00ca BB68     		ldr	r3, [r7, #8]
 3246 00cc 1A70     		strb	r2, [r3, #0]
2029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Minutes = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Minutes);
 3247              		.loc 1 2029 0
 3248 00ce BB68     		ldr	r3, [r7, #8]
 3249 00d0 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3250 00d2 1846     		mov	r0, r3
 3251 00d4 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3252 00d8 0346     		mov	r3, r0
 3253 00da 1A46     		mov	r2, r3
 3254 00dc BB68     		ldr	r3, [r7, #8]
 3255 00de 5A70     		strb	r2, [r3, #1]
2030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampTimeStruct->RTC_Seconds = (uint8_t)RTC_Bcd2ToByte(RTC_StampTimeStruct->RTC_Seconds);
 3256              		.loc 1 2030 0
 3257 00e0 BB68     		ldr	r3, [r7, #8]
 3258 00e2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3259 00e4 1846     		mov	r0, r3
 3260 00e6 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3261 00ea 0346     		mov	r3, r0
 3262 00ec 1A46     		mov	r2, r3
 3263 00ee BB68     		ldr	r3, [r7, #8]
 3264 00f0 9A70     		strb	r2, [r3, #2]
2031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Convert the Date structure parameters to Binary format */
2033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Month = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Month);
 3265              		.loc 1 2033 0
 3266 00f2 7B68     		ldr	r3, [r7, #4]
 3267 00f4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 3268 00f6 1846     		mov	r0, r3
 3269 00f8 FFF7FEFF 		bl	RTC_Bcd2ToByte
 3270 00fc 0346     		mov	r3, r0
 3271 00fe 1A46     		mov	r2, r3
 3272 0100 7B68     		ldr	r3, [r7, #4]
 3273 0102 5A70     		strb	r2, [r3, #1]
2034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_Date = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_Date);
 3274              		.loc 1 2034 0
 3275 0104 7B68     		ldr	r3, [r7, #4]
 3276 0106 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 3277 0108 1846     		mov	r0, r3
 3278 010a FFF7FEFF 		bl	RTC_Bcd2ToByte
 3279 010e 0346     		mov	r3, r0
 3280 0110 1A46     		mov	r2, r3
 3281 0112 7B68     		ldr	r3, [r7, #4]
 3282 0114 9A70     		strb	r2, [r3, #2]
2035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC_StampDateStruct->RTC_WeekDay = (uint8_t)RTC_Bcd2ToByte(RTC_StampDateStruct->RTC_WeekDay);
 3283              		.loc 1 2035 0
 3284 0116 7B68     		ldr	r3, [r7, #4]
 3285 0118 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 3286 011a 1846     		mov	r0, r3
 3287 011c FFF7FEFF 		bl	RTC_Bcd2ToByte
 3288 0120 0346     		mov	r3, r0
 3289 0122 1A46     		mov	r2, r3
 3290 0124 7B68     		ldr	r3, [r7, #4]
 3291 0126 1A70     		strb	r2, [r3, #0]
 3292              	.L120:
2036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3293              		.loc 1 2037 0
 3294 0128 07F11807 		add	r7, r7, #24
 3295 012c BD46     		mov	sp, r7
 3296 012e 80BD     		pop	{r7, pc}
 3297              		.cfi_endproc
 3298              	.LFE145:
 3300              		.section	.text.RTC_GetTimeStampSubSecond,"ax",%progbits
 3301              		.align	2
 3302              		.global	RTC_GetTimeStampSubSecond
 3303              		.thumb
 3304              		.thumb_func
 3306              	RTC_GetTimeStampSubSecond:
 3307              	.LFB146:
2038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Get the RTC timestamp Subseconds value.
2041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  None
2042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval RTC current timestamp Subseconds value.
2043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_GetTimeStampSubSecond(void)
2045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3308              		.loc 1 2045 0
 3309              		.cfi_startproc
 3310              		@ args = 0, pretend = 0, frame = 0
 3311              		@ frame_needed = 1, uses_anonymous_args = 0
 3312              		@ link register save eliminated.
 3313 0000 80B4     		push	{r7}
 3314              	.LCFI105:
 3315              		.cfi_def_cfa_offset 4
 3316              		.cfi_offset 7, -4
 3317 0002 00AF     		add	r7, sp, #0
 3318              	.LCFI106:
 3319              		.cfi_def_cfa_register 7
2046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get timestamp subseconds values from the correspondent registers */
2047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (uint32_t)(RTC->TSSSR);
 3320              		.loc 1 2047 0
 3321 0004 4FF42053 		mov	r3, #10240
 3322 0008 C4F20003 		movt	r3, 16384
 3323 000c 9B6B     		ldr	r3, [r3, #56]
2048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3324              		.loc 1 2048 0
 3325 000e 1846     		mov	r0, r3
 3326 0010 BD46     		mov	sp, r7
 3327 0012 80BC     		pop	{r7}
 3328 0014 7047     		bx	lr
 3329              		.cfi_endproc
 3330              	.LFE146:
 3332 0016 00BF     		.section	.text.RTC_TamperTriggerConfig,"ax",%progbits
 3333              		.align	2
 3334              		.global	RTC_TamperTriggerConfig
 3335              		.thumb
 3336              		.thumb_func
 3338              	RTC_TamperTriggerConfig:
 3339              	.LFB147:
2049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group9 Tampers configuration functions
2055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Tampers configuration functions 
2056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Tampers configuration functions
2060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the select Tamper pin edge.
2068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperTrigger: Specifies the trigger on the tamper pin that 
2071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         stimulates tamper event. 
2072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_RisingEdge: Rising Edge of the tamper pin causes tamper event.
2074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_FallingEdge: Falling Edge of the tamper pin causes tamper event.
2075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_LowLevel: Low Level of the tamper pin causes tamper event.
2076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperTrigger_HighLevel: High Level of the tamper pin causes tamper event.
2077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperTriggerConfig(uint32_t RTC_Tamper, uint32_t RTC_TamperTrigger)
2080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3340              		.loc 1 2080 0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 8
 3343              		@ frame_needed = 1, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
 3345 0000 80B4     		push	{r7}
 3346              	.LCFI107:
 3347              		.cfi_def_cfa_offset 4
 3348              		.cfi_offset 7, -4
 3349 0002 83B0     		sub	sp, sp, #12
 3350              	.LCFI108:
 3351              		.cfi_def_cfa_offset 16
 3352 0004 00AF     		add	r7, sp, #0
 3353              	.LCFI109:
 3354              		.cfi_def_cfa_register 7
 3355 0006 7860     		str	r0, [r7, #4]
 3356 0008 3960     		str	r1, [r7, #0]
2081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper)); 
2083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_TRIGGER(RTC_TamperTrigger));
2084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (RTC_TamperTrigger == RTC_TamperTrigger_RisingEdge)
 3357              		.loc 1 2085 0
 3358 000a 3B68     		ldr	r3, [r7, #0]
 3359 000c 002B     		cmp	r3, #0
 3360 000e 10D1     		bne	.L124
2086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {  
2087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)((uint32_t)~(RTC_Tamper << 1));	
 3361              		.loc 1 2088 0
 3362 0010 4FF42053 		mov	r3, #10240
 3363 0014 C4F20003 		movt	r3, 16384
 3364 0018 4FF42052 		mov	r2, #10240
 3365 001c C4F20002 		movt	r2, 16384
 3366 0020 116C     		ldr	r1, [r2, #64]
 3367 0022 7A68     		ldr	r2, [r7, #4]
 3368 0024 4FEA4202 		lsl	r2, r2, #1
 3369 0028 6FEA0202 		mvn	r2, r2
 3370 002c 0A40     		ands	r2, r2, r1
 3371 002e 1A64     		str	r2, [r3, #64]
 3372 0030 0DE0     		b	.L123
 3373              	.L124:
2089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   { 
2092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the RTC_TAFCR register */
2093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_Tamper << 1);  
 3374              		.loc 1 2093 0
 3375 0032 4FF42053 		mov	r3, #10240
 3376 0036 C4F20003 		movt	r3, 16384
 3377 003a 4FF42052 		mov	r2, #10240
 3378 003e C4F20002 		movt	r2, 16384
 3379 0042 116C     		ldr	r1, [r2, #64]
 3380 0044 7A68     		ldr	r2, [r7, #4]
 3381 0046 4FEA4202 		lsl	r2, r2, #1
 3382 004a 0A43     		orrs	r2, r2, r1
 3383 004c 1A64     		str	r2, [r3, #64]
 3384              	.L123:
2094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3385              		.loc 1 2095 0
 3386 004e 07F10C07 		add	r7, r7, #12
 3387 0052 BD46     		mov	sp, r7
 3388 0054 80BC     		pop	{r7}
 3389 0056 7047     		bx	lr
 3390              		.cfi_endproc
 3391              	.LFE147:
 3393              		.section	.text.RTC_TamperCmd,"ax",%progbits
 3394              		.align	2
 3395              		.global	RTC_TamperCmd
 3396              		.thumb
 3397              		.thumb_func
 3399              	RTC_TamperCmd:
 3400              	.LFB148:
2096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Tamper detection.
2099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_Tamper: Selected tamper pin.
2100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be RTC_Tamper_1.
2101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the tamper pin.
2102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.                   
2103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperCmd(uint32_t RTC_Tamper, FunctionalState NewState)
2106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3401              		.loc 1 2106 0
 3402              		.cfi_startproc
 3403              		@ args = 0, pretend = 0, frame = 8
 3404              		@ frame_needed = 1, uses_anonymous_args = 0
 3405              		@ link register save eliminated.
 3406 0000 80B4     		push	{r7}
 3407              	.LCFI110:
 3408              		.cfi_def_cfa_offset 4
 3409              		.cfi_offset 7, -4
 3410 0002 83B0     		sub	sp, sp, #12
 3411              	.LCFI111:
 3412              		.cfi_def_cfa_offset 16
 3413 0004 00AF     		add	r7, sp, #0
 3414              	.LCFI112:
 3415              		.cfi_def_cfa_register 7
 3416 0006 7860     		str	r0, [r7, #4]
 3417 0008 0B46     		mov	r3, r1
 3418 000a FB70     		strb	r3, [r7, #3]
2107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER(RTC_Tamper));  
2109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3419              		.loc 1 2111 0
 3420 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3421 000e 002B     		cmp	r3, #0
 3422 0010 0CD0     		beq	.L127
2112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable the selected Tamper pin */
2114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_Tamper;
 3423              		.loc 1 2114 0
 3424 0012 4FF42053 		mov	r3, #10240
 3425 0016 C4F20003 		movt	r3, 16384
 3426 001a 4FF42052 		mov	r2, #10240
 3427 001e C4F20002 		movt	r2, 16384
 3428 0022 116C     		ldr	r1, [r2, #64]
 3429 0024 7A68     		ldr	r2, [r7, #4]
 3430 0026 0A43     		orrs	r2, r2, r1
 3431 0028 1A64     		str	r2, [r3, #64]
 3432 002a 0DE0     		b	.L126
 3433              	.L127:
2115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable the selected Tamper pin */
2119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_Tamper;    
 3434              		.loc 1 2119 0
 3435 002c 4FF42053 		mov	r3, #10240
 3436 0030 C4F20003 		movt	r3, 16384
 3437 0034 4FF42052 		mov	r2, #10240
 3438 0038 C4F20002 		movt	r2, 16384
 3439 003c 116C     		ldr	r1, [r2, #64]
 3440 003e 7A68     		ldr	r2, [r7, #4]
 3441 0040 6FEA0202 		mvn	r2, r2
 3442 0044 0A40     		ands	r2, r2, r1
 3443 0046 1A64     		str	r2, [r3, #64]
 3444              	.L126:
2120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }  
2121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3445              		.loc 1 2121 0
 3446 0048 07F10C07 		add	r7, r7, #12
 3447 004c BD46     		mov	sp, r7
 3448 004e 80BC     		pop	{r7}
 3449 0050 7047     		bx	lr
 3450              		.cfi_endproc
 3451              	.LFE148:
 3453 0052 00BF     		.section	.text.RTC_TamperFilterConfig,"ax",%progbits
 3454              		.align	2
 3455              		.global	RTC_TamperFilterConfig
 3456              		.thumb
 3457              		.thumb_func
 3459              	RTC_TamperFilterConfig:
 3460              	.LFB149:
2122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Filter.
2125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperFilter: Specifies the tampers filter.
2126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_Disable: Tamper filter is disabled.
2128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_2Sample: Tamper is activated after 2 consecutive 
2129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_4Sample: Tamper is activated after 4 consecutive 
2131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level
2132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperFilter_8Sample: Tamper is activated after 8 consecutive 
2133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    samples at the active level 
2134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperFilterConfig(uint32_t RTC_TamperFilter)
2137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3461              		.loc 1 2137 0
 3462              		.cfi_startproc
 3463              		@ args = 0, pretend = 0, frame = 8
 3464              		@ frame_needed = 1, uses_anonymous_args = 0
 3465              		@ link register save eliminated.
 3466 0000 80B4     		push	{r7}
 3467              	.LCFI113:
 3468              		.cfi_def_cfa_offset 4
 3469              		.cfi_offset 7, -4
 3470 0002 83B0     		sub	sp, sp, #12
 3471              	.LCFI114:
 3472              		.cfi_def_cfa_offset 16
 3473 0004 00AF     		add	r7, sp, #0
 3474              	.LCFI115:
 3475              		.cfi_def_cfa_register 7
 3476 0006 7860     		str	r0, [r7, #4]
2138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_FILTER(RTC_TamperFilter));
2140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFLT[1:0] bits in the RTC_TAFCR register */
2142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFLT);
 3477              		.loc 1 2142 0
 3478 0008 4FF42053 		mov	r3, #10240
 3479 000c C4F20003 		movt	r3, 16384
 3480 0010 4FF42052 		mov	r2, #10240
 3481 0014 C4F20002 		movt	r2, 16384
 3482 0018 126C     		ldr	r2, [r2, #64]
 3483 001a 22F4C052 		bic	r2, r2, #6144
 3484 001e 1A64     		str	r2, [r3, #64]
2143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperFilter;
 3485              		.loc 1 2145 0
 3486 0020 4FF42053 		mov	r3, #10240
 3487 0024 C4F20003 		movt	r3, 16384
 3488 0028 4FF42052 		mov	r2, #10240
 3489 002c C4F20002 		movt	r2, 16384
 3490 0030 116C     		ldr	r1, [r2, #64]
 3491 0032 7A68     		ldr	r2, [r7, #4]
 3492 0034 0A43     		orrs	r2, r2, r1
 3493 0036 1A64     		str	r2, [r3, #64]
2146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3494              		.loc 1 2146 0
 3495 0038 07F10C07 		add	r7, r7, #12
 3496 003c BD46     		mov	sp, r7
 3497 003e 80BC     		pop	{r7}
 3498 0040 7047     		bx	lr
 3499              		.cfi_endproc
 3500              	.LFE149:
 3502              		.section	.text.RTC_TamperSamplingFreqConfig,"ax",%progbits
 3503              		.align	2
 3504              		.global	RTC_TamperSamplingFreqConfig
 3505              		.thumb
 3506              		.thumb_func
 3508              	RTC_TamperSamplingFreqConfig:
 3509              	.LFB150:
2147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Sampling Frequency.
2150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperSamplingFreq: Specifies the tampers Sampling Frequency.
2151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div32768: Each of the tamper inputs are sampled
2153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 32768
2154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div16384: Each of the tamper inputs are sampled
2155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 16384
2156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div8192: Each of the tamper inputs are sampled
2157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 8192
2158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div4096: Each of the tamper inputs are sampled
2159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 4096
2160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div2048: Each of the tamper inputs are sampled
2161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 2048
2162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div1024: Each of the tamper inputs are sampled
2163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 1024
2164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div512: Each of the tamper inputs are sampled
2165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 512  
2166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperSamplingFreq_RTCCLK_Div256: Each of the tamper inputs are sampled
2167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                           with a frequency =  RTCCLK / 256  
2168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperSamplingFreqConfig(uint32_t RTC_TamperSamplingFreq)
2171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3510              		.loc 1 2171 0
 3511              		.cfi_startproc
 3512              		@ args = 0, pretend = 0, frame = 8
 3513              		@ frame_needed = 1, uses_anonymous_args = 0
 3514              		@ link register save eliminated.
 3515 0000 80B4     		push	{r7}
 3516              	.LCFI116:
 3517              		.cfi_def_cfa_offset 4
 3518              		.cfi_offset 7, -4
 3519 0002 83B0     		sub	sp, sp, #12
 3520              	.LCFI117:
 3521              		.cfi_def_cfa_offset 16
 3522 0004 00AF     		add	r7, sp, #0
 3523              	.LCFI118:
 3524              		.cfi_def_cfa_register 7
 3525 0006 7860     		str	r0, [r7, #4]
2172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_SAMPLING_FREQ(RTC_TamperSamplingFreq));
2174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPFREQ[2:0] bits in the RTC_TAFCR register */
2176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPFREQ);
 3526              		.loc 1 2176 0
 3527 0008 4FF42053 		mov	r3, #10240
 3528 000c C4F20003 		movt	r3, 16384
 3529 0010 4FF42052 		mov	r2, #10240
 3530 0014 C4F20002 		movt	r2, 16384
 3531 0018 126C     		ldr	r2, [r2, #64]
 3532 001a 22F4E062 		bic	r2, r2, #1792
 3533 001e 1A64     		str	r2, [r3, #64]
2177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperSamplingFreq;
 3534              		.loc 1 2179 0
 3535 0020 4FF42053 		mov	r3, #10240
 3536 0024 C4F20003 		movt	r3, 16384
 3537 0028 4FF42052 		mov	r2, #10240
 3538 002c C4F20002 		movt	r2, 16384
 3539 0030 116C     		ldr	r1, [r2, #64]
 3540 0032 7A68     		ldr	r2, [r7, #4]
 3541 0034 0A43     		orrs	r2, r2, r1
 3542 0036 1A64     		str	r2, [r3, #64]
2180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3543              		.loc 1 2180 0
 3544 0038 07F10C07 		add	r7, r7, #12
 3545 003c BD46     		mov	sp, r7
 3546 003e 80BC     		pop	{r7}
 3547 0040 7047     		bx	lr
 3548              		.cfi_endproc
 3549              	.LFE150:
 3551              		.section	.text.RTC_TamperPinsPrechargeDuration,"ax",%progbits
 3552              		.align	2
 3553              		.global	RTC_TamperPinsPrechargeDuration
 3554              		.thumb
 3555              		.thumb_func
 3557              	RTC_TamperPinsPrechargeDuration:
 3558              	.LFB151:
2181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Tampers Pins input Precharge Duration.
2184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPrechargeDuration: Specifies the Tampers Pins input
2185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         Precharge Duration.
2186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values:
2187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_1RTCCLK: Tamper pins are pre-charged before sampling durin
2188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_2RTCCLK: Tamper pins are pre-charged before sampling durin
2189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_4RTCCLK: Tamper pins are pre-charged before sampling durin
2190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_TamperPrechargeDuration_8RTCCLK: Tamper pins are pre-charged before sampling durin
2191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinsPrechargeDuration(uint32_t RTC_TamperPrechargeDuration)
2194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3559              		.loc 1 2194 0
 3560              		.cfi_startproc
 3561              		@ args = 0, pretend = 0, frame = 8
 3562              		@ frame_needed = 1, uses_anonymous_args = 0
 3563              		@ link register save eliminated.
 3564 0000 80B4     		push	{r7}
 3565              	.LCFI119:
 3566              		.cfi_def_cfa_offset 4
 3567              		.cfi_offset 7, -4
 3568 0002 83B0     		sub	sp, sp, #12
 3569              	.LCFI120:
 3570              		.cfi_def_cfa_offset 16
 3571 0004 00AF     		add	r7, sp, #0
 3572              	.LCFI121:
 3573              		.cfi_def_cfa_register 7
 3574 0006 7860     		str	r0, [r7, #4]
2195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PRECHARGE_DURATION(RTC_TamperPrechargeDuration));
2197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear TAMPPRCH[1:0] bits in the RTC_TAFCR register */
2199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPPRCH);
 3575              		.loc 1 2199 0
 3576 0008 4FF42053 		mov	r3, #10240
 3577 000c C4F20003 		movt	r3, 16384
 3578 0010 4FF42052 		mov	r2, #10240
 3579 0014 C4F20002 		movt	r2, 16384
 3580 0018 126C     		ldr	r2, [r2, #64]
 3581 001a 22F4C042 		bic	r2, r2, #24576
 3582 001e 1A64     		str	r2, [r3, #64]
2200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Configure the RTC_TAFCR register */
2202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)RTC_TamperPrechargeDuration;
 3583              		.loc 1 2202 0
 3584 0020 4FF42053 		mov	r3, #10240
 3585 0024 C4F20003 		movt	r3, 16384
 3586 0028 4FF42052 		mov	r2, #10240
 3587 002c C4F20002 		movt	r2, 16384
 3588 0030 116C     		ldr	r1, [r2, #64]
 3589 0032 7A68     		ldr	r2, [r7, #4]
 3590 0034 0A43     		orrs	r2, r2, r1
 3591 0036 1A64     		str	r2, [r3, #64]
2203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3592              		.loc 1 2203 0
 3593 0038 07F10C07 		add	r7, r7, #12
 3594 003c BD46     		mov	sp, r7
 3595 003e 80BC     		pop	{r7}
 3596 0040 7047     		bx	lr
 3597              		.cfi_endproc
 3598              	.LFE151:
 3600              		.section	.text.RTC_TimeStampOnTamperDetectionCmd,"ax",%progbits
 3601              		.align	2
 3602              		.global	RTC_TimeStampOnTamperDetectionCmd
 3603              		.thumb
 3604              		.thumb_func
 3606              	RTC_TimeStampOnTamperDetectionCmd:
 3607              	.LFB152:
2204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the TimeStamp on Tamper Detection Event.
2207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   The timestamp is valid even the TSE bit in tamper control register 
2208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         is reset.   
2209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the timestamp on tamper event.
2210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be: ENABLE or DISABLE.
2211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampOnTamperDetectionCmd(FunctionalState NewState)
2214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3608              		.loc 1 2214 0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 8
 3611              		@ frame_needed = 1, uses_anonymous_args = 0
 3612              		@ link register save eliminated.
 3613 0000 80B4     		push	{r7}
 3614              	.LCFI122:
 3615              		.cfi_def_cfa_offset 4
 3616              		.cfi_offset 7, -4
 3617 0002 83B0     		sub	sp, sp, #12
 3618              	.LCFI123:
 3619              		.cfi_def_cfa_offset 16
 3620 0004 00AF     		add	r7, sp, #0
 3621              	.LCFI124:
 3622              		.cfi_def_cfa_register 7
 3623 0006 0346     		mov	r3, r0
 3624 0008 FB71     		strb	r3, [r7, #7]
2215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    
2218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 3625              		.loc 1 2218 0
 3626 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3627 000c 002B     		cmp	r3, #0
 3628 000e 0CD0     		beq	.L133
2219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Save timestamp on tamper detection event */
2221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPTS;
 3629              		.loc 1 2221 0
 3630 0010 4FF42053 		mov	r3, #10240
 3631 0014 C4F20003 		movt	r3, 16384
 3632 0018 4FF42052 		mov	r2, #10240
 3633 001c C4F20002 		movt	r2, 16384
 3634 0020 126C     		ldr	r2, [r2, #64]
 3635 0022 42F08002 		orr	r2, r2, #128
 3636 0026 1A64     		str	r2, [r3, #64]
 3637 0028 0BE0     		b	.L132
 3638              	.L133:
2222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Tamper detection does not cause a timestamp to be saved */
2226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPTS;    
 3639              		.loc 1 2226 0
 3640 002a 4FF42053 		mov	r3, #10240
 3641 002e C4F20003 		movt	r3, 16384
 3642 0032 4FF42052 		mov	r2, #10240
 3643 0036 C4F20002 		movt	r2, 16384
 3644 003a 126C     		ldr	r2, [r2, #64]
 3645 003c 22F08002 		bic	r2, r2, #128
 3646 0040 1A64     		str	r2, [r3, #64]
 3647              	.L132:
2227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3648              		.loc 1 2228 0
 3649 0042 07F10C07 		add	r7, r7, #12
 3650 0046 BD46     		mov	sp, r7
 3651 0048 80BC     		pop	{r7}
 3652 004a 7047     		bx	lr
 3653              		.cfi_endproc
 3654              	.LFE152:
 3656              		.section	.text.RTC_TamperPullUpCmd,"ax",%progbits
 3657              		.align	2
 3658              		.global	RTC_TamperPullUpCmd
 3659              		.thumb
 3660              		.thumb_func
 3662              	RTC_TamperPullUpCmd:
 3663              	.LFB153:
2229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or Disables the Precharge of Tamper pin.
2232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of tamper pull up.
2233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be: ENABLE or DISABLE.                   
2234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPullUpCmd(FunctionalState NewState)
2237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3664              		.loc 1 2237 0
 3665              		.cfi_startproc
 3666              		@ args = 0, pretend = 0, frame = 8
 3667              		@ frame_needed = 1, uses_anonymous_args = 0
 3668              		@ link register save eliminated.
 3669 0000 80B4     		push	{r7}
 3670              	.LCFI125:
 3671              		.cfi_def_cfa_offset 4
 3672              		.cfi_offset 7, -4
 3673 0002 83B0     		sub	sp, sp, #12
 3674              	.LCFI126:
 3675              		.cfi_def_cfa_offset 16
 3676 0004 00AF     		add	r7, sp, #0
 3677              	.LCFI127:
 3678              		.cfi_def_cfa_register 7
 3679 0006 0346     		mov	r3, r0
 3680 0008 FB71     		strb	r3, [r7, #7]
2238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  if (NewState != DISABLE)
 3681              		.loc 1 2241 0
 3682 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 3683 000c 002B     		cmp	r3, #0
 3684 000e 0CD0     		beq	.L136
2242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Enable precharge of the selected Tamper pin */
2244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~RTC_TAFCR_TAMPPUDIS; 
 3685              		.loc 1 2244 0
 3686 0010 4FF42053 		mov	r3, #10240
 3687 0014 C4F20003 		movt	r3, 16384
 3688 0018 4FF42052 		mov	r2, #10240
 3689 001c C4F20002 		movt	r2, 16384
 3690 0020 126C     		ldr	r2, [r2, #64]
 3691 0022 22F40042 		bic	r2, r2, #32768
 3692 0026 1A64     		str	r2, [r3, #64]
 3693 0028 0BE0     		b	.L135
 3694              	.L136:
2245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Disable precharge of the selected Tamper pin */
2249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)RTC_TAFCR_TAMPPUDIS;    
 3695              		.loc 1 2249 0
 3696 002a 4FF42053 		mov	r3, #10240
 3697 002e C4F20003 		movt	r3, 16384
 3698 0032 4FF42052 		mov	r2, #10240
 3699 0036 C4F20002 		movt	r2, 16384
 3700 003a 126C     		ldr	r2, [r2, #64]
 3701 003c 42F40042 		orr	r2, r2, #32768
 3702 0040 1A64     		str	r2, [r3, #64]
 3703              	.L135:
2250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   } 
2251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3704              		.loc 1 2251 0
 3705 0042 07F10C07 		add	r7, r7, #12
 3706 0046 BD46     		mov	sp, r7
 3707 0048 80BC     		pop	{r7}
 3708 004a 7047     		bx	lr
 3709              		.cfi_endproc
 3710              	.LFE153:
 3712              		.section	.text.RTC_WriteBackupRegister,"ax",%progbits
 3713              		.align	2
 3714              		.global	RTC_WriteBackupRegister
 3715              		.thumb
 3716              		.thumb_func
 3718              	RTC_WriteBackupRegister:
 3719              	.LFB154:
2252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group10 Backup Data Registers configuration functions
2258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Backup Data Registers configuration functions  
2259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Backup Data Registers configuration functions 
2263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Writes a data in a specified RTC Backup data register.
2271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.
2274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Data: Data to be written in the specified RTC Backup data register.                    
2275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_WriteBackupRegister(uint32_t RTC_BKP_DR, uint32_t Data)
2278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3720              		.loc 1 2278 0
 3721              		.cfi_startproc
 3722              		@ args = 0, pretend = 0, frame = 16
 3723              		@ frame_needed = 1, uses_anonymous_args = 0
 3724              		@ link register save eliminated.
 3725 0000 80B4     		push	{r7}
 3726              	.LCFI128:
 3727              		.cfi_def_cfa_offset 4
 3728              		.cfi_offset 7, -4
 3729 0002 85B0     		sub	sp, sp, #20
 3730              	.LCFI129:
 3731              		.cfi_def_cfa_offset 24
 3732 0004 00AF     		add	r7, sp, #0
 3733              	.LCFI130:
 3734              		.cfi_def_cfa_register 7
 3735 0006 7860     		str	r0, [r7, #4]
 3736 0008 3960     		str	r1, [r7, #0]
2279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3737              		.loc 1 2279 0
 3738 000a 4FF00003 		mov	r3, #0
 3739 000e FB60     		str	r3, [r7, #12]
2280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3740              		.loc 1 2284 0
 3741 0010 42F65003 		movw	r3, #10320
 3742 0014 C4F20003 		movt	r3, 16384
 3743 0018 FB60     		str	r3, [r7, #12]
2285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3744              		.loc 1 2285 0
 3745 001a 7B68     		ldr	r3, [r7, #4]
 3746 001c 4FEA8302 		lsl	r2, r3, #2
 3747 0020 FB68     		ldr	r3, [r7, #12]
 3748 0022 D318     		adds	r3, r2, r3
 3749 0024 FB60     		str	r3, [r7, #12]
2286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Write the specified register */
2288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *(__IO uint32_t *)tmp = (uint32_t)Data;
 3750              		.loc 1 2288 0
 3751 0026 FB68     		ldr	r3, [r7, #12]
 3752 0028 3A68     		ldr	r2, [r7, #0]
 3753 002a 1A60     		str	r2, [r3, #0]
2289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3754              		.loc 1 2289 0
 3755 002c 07F11407 		add	r7, r7, #20
 3756 0030 BD46     		mov	sp, r7
 3757 0032 80BC     		pop	{r7}
 3758 0034 7047     		bx	lr
 3759              		.cfi_endproc
 3760              	.LFE154:
 3762 0036 00BF     		.section	.text.RTC_ReadBackupRegister,"ax",%progbits
 3763              		.align	2
 3764              		.global	RTC_ReadBackupRegister
 3765              		.thumb
 3766              		.thumb_func
 3768              	RTC_ReadBackupRegister:
 3769              	.LFB155:
2290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Reads data from the specified RTC Backup data Register.
2293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_BKP_DR: RTC Backup data Register number.
2294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to 
2295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                          specify the register.                   
2296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** uint32_t RTC_ReadBackupRegister(uint32_t RTC_BKP_DR)
2299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3770              		.loc 1 2299 0
 3771              		.cfi_startproc
 3772              		@ args = 0, pretend = 0, frame = 16
 3773              		@ frame_needed = 1, uses_anonymous_args = 0
 3774              		@ link register save eliminated.
 3775 0000 80B4     		push	{r7}
 3776              	.LCFI131:
 3777              		.cfi_def_cfa_offset 4
 3778              		.cfi_offset 7, -4
 3779 0002 85B0     		sub	sp, sp, #20
 3780              	.LCFI132:
 3781              		.cfi_def_cfa_offset 24
 3782 0004 00AF     		add	r7, sp, #0
 3783              	.LCFI133:
 3784              		.cfi_def_cfa_register 7
 3785 0006 7860     		str	r0, [r7, #4]
2300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   __IO uint32_t tmp = 0;
 3786              		.loc 1 2300 0
 3787 0008 4FF00003 		mov	r3, #0
 3788 000c FB60     		str	r3, [r7, #12]
2301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_BKP(RTC_BKP_DR));
2304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = RTC_BASE + 0x50;
 3789              		.loc 1 2305 0
 3790 000e 42F65003 		movw	r3, #10320
 3791 0012 C4F20003 		movt	r3, 16384
 3792 0016 FB60     		str	r3, [r7, #12]
2306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp += (RTC_BKP_DR * 4);
 3793              		.loc 1 2306 0
 3794 0018 7B68     		ldr	r3, [r7, #4]
 3795 001a 4FEA8302 		lsl	r2, r3, #2
 3796 001e FB68     		ldr	r3, [r7, #12]
 3797 0020 D318     		adds	r3, r2, r3
 3798 0022 FB60     		str	r3, [r7, #12]
2307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Read the specified register */
2309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (*(__IO uint32_t *)tmp);
 3799              		.loc 1 2309 0
 3800 0024 FB68     		ldr	r3, [r7, #12]
 3801 0026 1B68     		ldr	r3, [r3, #0]
2310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3802              		.loc 1 2310 0
 3803 0028 1846     		mov	r0, r3
 3804 002a 07F11407 		add	r7, r7, #20
 3805 002e BD46     		mov	sp, r7
 3806 0030 80BC     		pop	{r7}
 3807 0032 7047     		bx	lr
 3808              		.cfi_endproc
 3809              	.LFE155:
 3811              		.section	.text.RTC_TamperPinSelection,"ax",%progbits
 3812              		.align	2
 3813              		.global	RTC_TamperPinSelection
 3814              		.thumb
 3815              		.thumb_func
 3817              	RTC_TamperPinSelection:
 3818              	.LFB156:
2311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group11 RTC Tamper and TimeStamp Pins Selection and Output Type Config configurat
2317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   RTC Tamper and TimeStamp Pins Selection and Output Type Config 
2318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *           configuration functions  
2319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC Tamper and TimeStamp Pins Selection and Output Type Config configuration 
2323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   functions 
2324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC Tamper Pin.
2332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TamperPin: specifies the RTC Tamper Pin.
2333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PC13: PC13 is selected as RTC Tamper Pin.
2335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TamperPin_PI8: PI8 is selected as RTC Tamper Pin.    
2336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TamperPinSelection(uint32_t RTC_TamperPin)
2339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3819              		.loc 1 2339 0
 3820              		.cfi_startproc
 3821              		@ args = 0, pretend = 0, frame = 8
 3822              		@ frame_needed = 1, uses_anonymous_args = 0
 3823              		@ link register save eliminated.
 3824 0000 80B4     		push	{r7}
 3825              	.LCFI134:
 3826              		.cfi_def_cfa_offset 4
 3827              		.cfi_offset 7, -4
 3828 0002 83B0     		sub	sp, sp, #12
 3829              	.LCFI135:
 3830              		.cfi_def_cfa_offset 16
 3831 0004 00AF     		add	r7, sp, #0
 3832              	.LCFI136:
 3833              		.cfi_def_cfa_register 7
 3834 0006 7860     		str	r0, [r7, #4]
2340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TAMPER_PIN(RTC_TamperPin));
2342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TAMPINSEL);
 3835              		.loc 1 2343 0
 3836 0008 4FF42053 		mov	r3, #10240
 3837 000c C4F20003 		movt	r3, 16384
 3838 0010 4FF42052 		mov	r2, #10240
 3839 0014 C4F20002 		movt	r2, 16384
 3840 0018 126C     		ldr	r2, [r2, #64]
 3841 001a 22F48032 		bic	r2, r2, #65536
 3842 001e 1A64     		str	r2, [r3, #64]
2344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TamperPin);  
 3843              		.loc 1 2344 0
 3844 0020 4FF42053 		mov	r3, #10240
 3845 0024 C4F20003 		movt	r3, 16384
 3846 0028 4FF42052 		mov	r2, #10240
 3847 002c C4F20002 		movt	r2, 16384
 3848 0030 116C     		ldr	r1, [r2, #64]
 3849 0032 7A68     		ldr	r2, [r7, #4]
 3850 0034 0A43     		orrs	r2, r2, r1
 3851 0036 1A64     		str	r2, [r3, #64]
2345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3852              		.loc 1 2345 0
 3853 0038 07F10C07 		add	r7, r7, #12
 3854 003c BD46     		mov	sp, r7
 3855 003e 80BC     		pop	{r7}
 3856 0040 7047     		bx	lr
 3857              		.cfi_endproc
 3858              	.LFE156:
 3860              		.section	.text.RTC_TimeStampPinSelection,"ax",%progbits
 3861              		.align	2
 3862              		.global	RTC_TimeStampPinSelection
 3863              		.thumb
 3864              		.thumb_func
 3866              	RTC_TimeStampPinSelection:
 3867              	.LFB157:
2346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Selects the RTC TimeStamp Pin.
2349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_TimeStampPin: specifies the RTC TimeStamp Pin.
2350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PC13: PC13 is selected as RTC TimeStamp Pin.
2352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_TimeStampPin_PI8: PI8 is selected as RTC TimeStamp Pin.    
2353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_TimeStampPinSelection(uint32_t RTC_TimeStampPin)
2356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3868              		.loc 1 2356 0
 3869              		.cfi_startproc
 3870              		@ args = 0, pretend = 0, frame = 8
 3871              		@ frame_needed = 1, uses_anonymous_args = 0
 3872              		@ link register save eliminated.
 3873 0000 80B4     		push	{r7}
 3874              	.LCFI137:
 3875              		.cfi_def_cfa_offset 4
 3876              		.cfi_offset 7, -4
 3877 0002 83B0     		sub	sp, sp, #12
 3878              	.LCFI138:
 3879              		.cfi_def_cfa_offset 16
 3880 0004 00AF     		add	r7, sp, #0
 3881              	.LCFI139:
 3882              		.cfi_def_cfa_register 7
 3883 0006 7860     		str	r0, [r7, #4]
2357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
2359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_TSINSEL);
 3884              		.loc 1 2360 0
 3885 0008 4FF42053 		mov	r3, #10240
 3886 000c C4F20003 		movt	r3, 16384
 3887 0010 4FF42052 		mov	r2, #10240
 3888 0014 C4F20002 		movt	r2, 16384
 3889 0018 126C     		ldr	r2, [r2, #64]
 3890 001a 22F40032 		bic	r2, r2, #131072
 3891 001e 1A64     		str	r2, [r3, #64]
2361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_TimeStampPin);  
 3892              		.loc 1 2361 0
 3893 0020 4FF42053 		mov	r3, #10240
 3894 0024 C4F20003 		movt	r3, 16384
 3895 0028 4FF42052 		mov	r2, #10240
 3896 002c C4F20002 		movt	r2, 16384
 3897 0030 116C     		ldr	r1, [r2, #64]
 3898 0032 7A68     		ldr	r2, [r7, #4]
 3899 0034 0A43     		orrs	r2, r2, r1
 3900 0036 1A64     		str	r2, [r3, #64]
2362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3901              		.loc 1 2362 0
 3902 0038 07F10C07 		add	r7, r7, #12
 3903 003c BD46     		mov	sp, r7
 3904 003e 80BC     		pop	{r7}
 3905 0040 7047     		bx	lr
 3906              		.cfi_endproc
 3907              	.LFE157:
 3909              		.section	.text.RTC_OutputTypeConfig,"ax",%progbits
 3910              		.align	2
 3911              		.global	RTC_OutputTypeConfig
 3912              		.thumb
 3913              		.thumb_func
 3915              	RTC_OutputTypeConfig:
 3916              	.LFB158:
2363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the RTC Output Pin mode. 
2366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_OutputType: specifies the RTC Output (PC13) pin mode.
2367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_OpenDrain: RTC Output (PC13) is configured in 
2369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Open Drain mode.
2370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_OutputType_PushPull:  RTC Output (PC13) is configured in 
2371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *                                    Push Pull mode.    
2372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_OutputTypeConfig(uint32_t RTC_OutputType)
2375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3917              		.loc 1 2375 0
 3918              		.cfi_startproc
 3919              		@ args = 0, pretend = 0, frame = 8
 3920              		@ frame_needed = 1, uses_anonymous_args = 0
 3921              		@ link register save eliminated.
 3922 0000 80B4     		push	{r7}
 3923              	.LCFI140:
 3924              		.cfi_def_cfa_offset 4
 3925              		.cfi_offset 7, -4
 3926 0002 83B0     		sub	sp, sp, #12
 3927              	.LCFI141:
 3928              		.cfi_def_cfa_offset 16
 3929 0004 00AF     		add	r7, sp, #0
 3930              	.LCFI142:
 3931              		.cfi_def_cfa_register 7
 3932 0006 7860     		str	r0, [r7, #4]
2376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_OUTPUT_TYPE(RTC_OutputType));
2378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR &= (uint32_t)~(RTC_TAFCR_ALARMOUTTYPE);
 3933              		.loc 1 2379 0
 3934 0008 4FF42053 		mov	r3, #10240
 3935 000c C4F20003 		movt	r3, 16384
 3936 0010 4FF42052 		mov	r2, #10240
 3937 0014 C4F20002 		movt	r2, 16384
 3938 0018 126C     		ldr	r2, [r2, #64]
 3939 001a 22F48022 		bic	r2, r2, #262144
 3940 001e 1A64     		str	r2, [r3, #64]
2380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->TAFCR |= (uint32_t)(RTC_OutputType);  
 3941              		.loc 1 2380 0
 3942 0020 4FF42053 		mov	r3, #10240
 3943 0024 C4F20003 		movt	r3, 16384
 3944 0028 4FF42052 		mov	r2, #10240
 3945 002c C4F20002 		movt	r2, 16384
 3946 0030 116C     		ldr	r1, [r2, #64]
 3947 0032 7A68     		ldr	r2, [r7, #4]
 3948 0034 0A43     		orrs	r2, r2, r1
 3949 0036 1A64     		str	r2, [r3, #64]
2381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 3950              		.loc 1 2381 0
 3951 0038 07F10C07 		add	r7, r7, #12
 3952 003c BD46     		mov	sp, r7
 3953 003e 80BC     		pop	{r7}
 3954 0040 7047     		bx	lr
 3955              		.cfi_endproc
 3956              	.LFE158:
 3958              		.section	.text.RTC_SynchroShiftConfig,"ax",%progbits
 3959              		.align	2
 3960              		.global	RTC_SynchroShiftConfig
 3961              		.thumb
 3962              		.thumb_func
 3964              	RTC_SynchroShiftConfig:
 3965              	.LFB159:
2382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group12 Shift control synchronisation functions
2388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Shift control synchronisation functions 
2389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                    Shift control synchronisation functions
2393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Configures the Synchronization Shift Control Settings.
2401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @note   When REFCKON is set, firmware must not write to Shift control register 
2402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftAdd1S : Select to add or not 1 second to the time Calendar.
2403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *   This parameter can be one of the following values :
2404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Set  : Add one second to the clock calendar. 
2405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *     @arg RTC_ShiftAdd1S_Reset: No effect.
2406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_ShiftSubFS: Select the number of Second Fractions to Substitute.
2407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *         This parameter can be one any value from 0 to 0x7FFF.
2408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval An ErrorStatus enumeration value:
2409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - SUCCESS: RTC Shift registers are configured
2410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          - ERROR: RTC Shift registers are not configured
2411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** */
2412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ErrorStatus RTC_SynchroShiftConfig(uint32_t RTC_ShiftAdd1S, uint32_t RTC_ShiftSubFS)
2413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 3966              		.loc 1 2413 0
 3967              		.cfi_startproc
 3968              		@ args = 0, pretend = 0, frame = 16
 3969              		@ frame_needed = 1, uses_anonymous_args = 0
 3970 0000 80B5     		push	{r7, lr}
 3971              	.LCFI143:
 3972              		.cfi_def_cfa_offset 8
 3973              		.cfi_offset 14, -4
 3974              		.cfi_offset 7, -8
 3975 0002 84B0     		sub	sp, sp, #16
 3976              	.LCFI144:
 3977              		.cfi_def_cfa_offset 24
 3978 0004 00AF     		add	r7, sp, #0
 3979              	.LCFI145:
 3980              		.cfi_def_cfa_register 7
 3981 0006 7860     		str	r0, [r7, #4]
 3982 0008 3960     		str	r1, [r7, #0]
2414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ErrorStatus status = ERROR;
 3983              		.loc 1 2414 0
 3984 000a 4FF00003 		mov	r3, #0
 3985 000e FB73     		strb	r3, [r7, #15]
2415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t shpfcount = 0;
 3986              		.loc 1 2415 0
 3987 0010 4FF00003 		mov	r3, #0
 3988 0014 BB60     		str	r3, [r7, #8]
2416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_ADD1S(RTC_ShiftAdd1S));
2419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_SHIFT_SUBFS(RTC_ShiftSubFS));
2420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 3989              		.loc 1 2422 0
 3990 0016 4FF42053 		mov	r3, #10240
 3991 001a C4F20003 		movt	r3, 16384
 3992 001e 4FF0CA02 		mov	r2, #202
 3993 0022 5A62     		str	r2, [r3, #36]
2423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 3994              		.loc 1 2423 0
 3995 0024 4FF42053 		mov	r3, #10240
 3996 0028 C4F20003 		movt	r3, 16384
 3997 002c 4FF05302 		mov	r2, #83
 3998 0030 5A62     		str	r2, [r3, #36]
2424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if a Shift is pending*/
2426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) != RESET)
 3999              		.loc 1 2426 0
 4000 0032 4FF42053 		mov	r3, #10240
 4001 0036 C4F20003 		movt	r3, 16384
 4002 003a DB68     		ldr	r3, [r3, #12]
 4003 003c 03F00803 		and	r3, r3, #8
 4004 0040 002B     		cmp	r3, #0
 4005 0042 11D0     		beq	.L144
2427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Wait until the shift is completed*/
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4006              		.loc 1 2429 0
 4007 0044 03E0     		b	.L145
 4008              	.L146:
2430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       shpfcount++;
 4009              		.loc 1 2431 0
 4010 0046 BB68     		ldr	r3, [r7, #8]
 4011 0048 03F10103 		add	r3, r3, #1
 4012 004c BB60     		str	r3, [r7, #8]
 4013              	.L145:
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4014              		.loc 1 2429 0 discriminator 1
 4015 004e 4FF42053 		mov	r3, #10240
 4016 0052 C4F20003 		movt	r3, 16384
 4017 0056 DB68     		ldr	r3, [r3, #12]
 4018 0058 03F00803 		and	r3, r3, #8
 4019 005c 002B     		cmp	r3, #0
 4020 005e 03D0     		beq	.L144
2429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     while (((RTC->ISR & RTC_ISR_SHPF) != RESET) && (shpfcount != SHPF_TIMEOUT))
 4021              		.loc 1 2429 0 is_stmt 0 discriminator 2
 4022 0060 BB68     		ldr	r3, [r7, #8]
 4023 0062 B3F5805F 		cmp	r3, #4096
 4024 0066 EED1     		bne	.L146
 4025              	.L144:
2432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check if the Shift pending is completed or if there is no Shift operation at all*/
2436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((RTC->ISR & RTC_ISR_SHPF) == RESET)
 4026              		.loc 1 2436 0 is_stmt 1
 4027 0068 4FF42053 		mov	r3, #10240
 4028 006c C4F20003 		movt	r3, 16384
 4029 0070 DB68     		ldr	r3, [r3, #12]
 4030 0072 03F00803 		and	r3, r3, #8
 4031 0076 002B     		cmp	r3, #0
 4032 0078 21D1     		bne	.L147
2437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* check if the reference clock detection is disabled */
2439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     if((RTC->CR & RTC_CR_REFCKON) == RESET)
 4033              		.loc 1 2439 0
 4034 007a 4FF42053 		mov	r3, #10240
 4035 007e C4F20003 		movt	r3, 16384
 4036 0082 9B68     		ldr	r3, [r3, #8]
 4037 0084 03F01003 		and	r3, r3, #16
 4038 0088 002B     		cmp	r3, #0
 4039 008a 14D1     		bne	.L148
2440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       /* Configure the Shift settings */
2442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       RTC->SHIFTR = (uint32_t)(uint32_t)(RTC_ShiftSubFS) | (uint32_t)(RTC_ShiftAdd1S);
 4040              		.loc 1 2442 0
 4041 008c 4FF42053 		mov	r3, #10240
 4042 0090 C4F20003 		movt	r3, 16384
 4043 0094 3968     		ldr	r1, [r7, #0]
 4044 0096 7A68     		ldr	r2, [r7, #4]
 4045 0098 0A43     		orrs	r2, r2, r1
 4046 009a DA62     		str	r2, [r3, #44]
2443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     
2444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       if(RTC_WaitForSynchro() == ERROR)
 4047              		.loc 1 2444 0
 4048 009c FFF7FEFF 		bl	RTC_WaitForSynchro
 4049 00a0 0346     		mov	r3, r0
 4050 00a2 002B     		cmp	r3, #0
 4051 00a4 03D1     		bne	.L149
2445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = ERROR;
 4052              		.loc 1 2446 0
 4053 00a6 4FF00003 		mov	r3, #0
 4054 00aa FB73     		strb	r3, [r7, #15]
 4055 00ac 0AE0     		b	.L150
 4056              	.L149:
2447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       else
2449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       {
2450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****         status = SUCCESS;
 4057              		.loc 1 2450 0
 4058 00ae 4FF00103 		mov	r3, #1
 4059 00b2 FB73     		strb	r3, [r7, #15]
 4060 00b4 06E0     		b	.L150
 4061              	.L148:
2451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       }
2452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     else
2454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     {
2455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****       status = ERROR;
 4062              		.loc 1 2455 0
 4063 00b6 4FF00003 		mov	r3, #0
 4064 00ba FB73     		strb	r3, [r7, #15]
 4065 00bc 02E0     		b	.L150
 4066              	.L147:
2456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     }
2457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     status = ERROR;
 4067              		.loc 1 2460 0
 4068 00be 4FF00003 		mov	r3, #0
 4069 00c2 FB73     		strb	r3, [r7, #15]
 4070              	.L150:
2461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF;
 4071              		.loc 1 2464 0
 4072 00c4 4FF42053 		mov	r3, #10240
 4073 00c8 C4F20003 		movt	r3, 16384
 4074 00cc 4FF0FF02 		mov	r2, #255
 4075 00d0 5A62     		str	r2, [r3, #36]
2465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (ErrorStatus)(status);
 4076              		.loc 1 2466 0
 4077 00d2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4078              		.loc 1 2467 0
 4079 00d4 1846     		mov	r0, r3
 4080 00d6 07F11007 		add	r7, r7, #16
 4081 00da BD46     		mov	sp, r7
 4082 00dc 80BD     		pop	{r7, pc}
 4083              		.cfi_endproc
 4084              	.LFE159:
 4086 00de 00BF     		.section	.text.RTC_ITConfig,"ax",%progbits
 4087              		.align	2
 4088              		.global	RTC_ITConfig
 4089              		.thumb
 4090              		.thumb_func
 4092              	RTC_ITConfig:
 4093              	.LFB160:
2468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /** @defgroup RTC_Group13 Interrupts and flags management functions
2474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *  @brief   Interrupts and flags management functions  
2475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  *
2476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @verbatim   
2477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================
2478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****                        Interrupts and flags management functions
2479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  ===============================================================================  
2480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  All RTC interrupts are connected to the EXTI controller.
2481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Alarm interrupt, the following sequence is required:
2483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 17 in interrupt mode and select the rising 
2484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_Alarm IRQ channel in the NVIC using the NVIC_Init()
2486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate RTC alarms (Alarm A and/or Alarm B) using
2488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      the RTC_SetAlarm() and RTC_AlarmCmd() functions.
2489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Wakeup interrupt, the following sequence is required:
2491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 22 in interrupt mode and select the rising 
2492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the RTC_WKUP IRQ channel in the NVIC using the NVIC_Init()
2494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to generate the RTC wakeup timer event using the 
2496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_WakeUpClockConfig(), RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
2497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC Tamper interrupt, the following sequence is required:
2499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC tamper event using the 
2504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TamperTriggerConfig() and RTC_TamperCmd() functions.
2505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  - To enable the RTC TimeStamp interrupt, the following sequence is required:
2507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the EXTI Line 21 in interrupt mode and select the rising 
2508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      edge sensitivity using the EXTI_Init() function.
2509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure and enable the TAMP_STAMP IRQ channel in the NVIC using the NVIC_Init()
2510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      function.
2511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****    - Configure the RTC to detect the RTC time-stamp event using the 
2512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****      RTC_TimeStampCmd() functions.
2513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** @endverbatim
2515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @{
2516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Enables or disables the specified RTC interrupts.
2520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt sources to be enabled or disabled. 
2521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS:  Time Stamp interrupt mask
2523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT:  WakeUp Timer interrupt mask
2524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB:  Alarm B interrupt mask
2525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA:  Alarm A interrupt mask
2526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP: Tamper event interrupt mask
2527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  NewState: new state of the specified RTC interrupts.
2528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be: ENABLE or DISABLE.
2529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ITConfig(uint32_t RTC_IT, FunctionalState NewState)
2532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4094              		.loc 1 2532 0
 4095              		.cfi_startproc
 4096              		@ args = 0, pretend = 0, frame = 8
 4097              		@ frame_needed = 1, uses_anonymous_args = 0
 4098              		@ link register save eliminated.
 4099 0000 80B4     		push	{r7}
 4100              	.LCFI146:
 4101              		.cfi_def_cfa_offset 4
 4102              		.cfi_offset 7, -4
 4103 0002 83B0     		sub	sp, sp, #12
 4104              	.LCFI147:
 4105              		.cfi_def_cfa_offset 16
 4106 0004 00AF     		add	r7, sp, #0
 4107              	.LCFI148:
 4108              		.cfi_def_cfa_register 7
 4109 0006 7860     		str	r0, [r7, #4]
 4110 0008 0B46     		mov	r3, r1
 4111 000a FB70     		strb	r3, [r7, #3]
2533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CONFIG_IT(RTC_IT));
2535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Disable the write protection for RTC registers */
2538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xCA;
 4112              		.loc 1 2538 0
 4113 000c 4FF42053 		mov	r3, #10240
 4114 0010 C4F20003 		movt	r3, 16384
 4115 0014 4FF0CA02 		mov	r2, #202
 4116 0018 5A62     		str	r2, [r3, #36]
2539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0x53;
 4117              		.loc 1 2539 0
 4118 001a 4FF42053 		mov	r3, #10240
 4119 001e C4F20003 		movt	r3, 16384
 4120 0022 4FF05302 		mov	r2, #83
 4121 0026 5A62     		str	r2, [r3, #36]
2540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if (NewState != DISABLE)
 4122              		.loc 1 2541 0
 4123 0028 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4124 002a 002B     		cmp	r3, #0
 4125 002c 1CD0     		beq	.L152
2542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR |= (uint32_t)(RTC_IT & ~RTC_TAFCR_TAMPIE);
 4126              		.loc 1 2544 0
 4127 002e 4FF42053 		mov	r3, #10240
 4128 0032 C4F20003 		movt	r3, 16384
 4129 0036 4FF42052 		mov	r2, #10240
 4130 003a C4F20002 		movt	r2, 16384
 4131 003e 9168     		ldr	r1, [r2, #8]
 4132 0040 7A68     		ldr	r2, [r7, #4]
 4133 0042 22F00402 		bic	r2, r2, #4
 4134 0046 0A43     		orrs	r2, r2, r1
 4135 0048 9A60     		str	r2, [r3, #8]
2545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR |= (uint32_t)(RTC_IT & RTC_TAFCR_TAMPIE);
 4136              		.loc 1 2546 0
 4137 004a 4FF42053 		mov	r3, #10240
 4138 004e C4F20003 		movt	r3, 16384
 4139 0052 4FF42052 		mov	r2, #10240
 4140 0056 C4F20002 		movt	r2, 16384
 4141 005a 116C     		ldr	r1, [r2, #64]
 4142 005c 7A68     		ldr	r2, [r7, #4]
 4143 005e 02F00402 		and	r2, r2, #4
 4144 0062 0A43     		orrs	r2, r2, r1
 4145 0064 1A64     		str	r2, [r3, #64]
 4146 0066 1FE0     		b	.L153
 4147              	.L152:
2547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Interrupts in the RTC_CR register */
2551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->CR &= (uint32_t)~(RTC_IT & (uint32_t)~RTC_TAFCR_TAMPIE);
 4148              		.loc 1 2551 0
 4149 0068 4FF42053 		mov	r3, #10240
 4150 006c C4F20003 		movt	r3, 16384
 4151 0070 4FF42052 		mov	r2, #10240
 4152 0074 C4F20002 		movt	r2, 16384
 4153 0078 9168     		ldr	r1, [r2, #8]
 4154 007a 7A68     		ldr	r2, [r7, #4]
 4155 007c 22F00402 		bic	r2, r2, #4
 4156 0080 6FEA0202 		mvn	r2, r2
 4157 0084 0A40     		ands	r2, r2, r1
 4158 0086 9A60     		str	r2, [r3, #8]
2552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     /* Configure the Tamper Interrupt in the RTC_TAFCR */
2553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     RTC->TAFCR &= (uint32_t)~(RTC_IT & RTC_TAFCR_TAMPIE);
 4159              		.loc 1 2553 0
 4160 0088 4FF42053 		mov	r3, #10240
 4161 008c C4F20003 		movt	r3, 16384
 4162 0090 4FF42052 		mov	r2, #10240
 4163 0094 C4F20002 		movt	r2, 16384
 4164 0098 116C     		ldr	r1, [r2, #64]
 4165 009a 7A68     		ldr	r2, [r7, #4]
 4166 009c 02F00402 		and	r2, r2, #4
 4167 00a0 6FEA0202 		mvn	r2, r2
 4168 00a4 0A40     		ands	r2, r2, r1
 4169 00a6 1A64     		str	r2, [r3, #64]
 4170              	.L153:
2554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Enable the write protection for RTC registers */
2556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->WPR = 0xFF; 
 4171              		.loc 1 2556 0
 4172 00a8 4FF42053 		mov	r3, #10240
 4173 00ac C4F20003 		movt	r3, 16384
 4174 00b0 4FF0FF02 		mov	r2, #255
 4175 00b4 5A62     		str	r2, [r3, #36]
2557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4176              		.loc 1 2557 0
 4177 00b6 07F10C07 		add	r7, r7, #12
 4178 00ba BD46     		mov	sp, r7
 4179 00bc 80BC     		pop	{r7}
 4180 00be 7047     		bx	lr
 4181              		.cfi_endproc
 4182              	.LFE160:
 4184              		.section	.text.RTC_GetFlagStatus,"ax",%progbits
 4185              		.align	2
 4186              		.global	RTC_GetFlagStatus
 4187              		.thumb
 4188              		.thumb_func
 4190              	RTC_GetFlagStatus:
 4191              	.LFB161:
2558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC flag is set or not.
2561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the flag to check.
2562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp OverFlow flag
2565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITF: Initialization mode flag
2570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_INITS: Registers Configured flag
2572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTWF: WakeUp Timer Write flag
2573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBWF: Alarm B Write flag
2574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAWF: Alarm A write flag
2575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_FLAG (SET or RESET).
2576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** FlagStatus RTC_GetFlagStatus(uint32_t RTC_FLAG)
2578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4192              		.loc 1 2578 0
 4193              		.cfi_startproc
 4194              		@ args = 0, pretend = 0, frame = 16
 4195              		@ frame_needed = 1, uses_anonymous_args = 0
 4196              		@ link register save eliminated.
 4197 0000 80B4     		push	{r7}
 4198              	.LCFI149:
 4199              		.cfi_def_cfa_offset 4
 4200              		.cfi_offset 7, -4
 4201 0002 85B0     		sub	sp, sp, #20
 4202              	.LCFI150:
 4203              		.cfi_def_cfa_offset 24
 4204 0004 00AF     		add	r7, sp, #0
 4205              	.LCFI151:
 4206              		.cfi_def_cfa_register 7
 4207 0006 7860     		str	r0, [r7, #4]
2579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   FlagStatus bitstatus = RESET;
 4208              		.loc 1 2579 0
 4209 0008 4FF00003 		mov	r3, #0
 4210 000c FB73     		strb	r3, [r7, #15]
2580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4211              		.loc 1 2580 0
 4212 000e 4FF00003 		mov	r3, #0
 4213 0012 BB60     		str	r3, [r7, #8]
2581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_FLAG(RTC_FLAG));
2584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get all the flags */
2586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->ISR & RTC_FLAGS_MASK);
 4214              		.loc 1 2586 0
 4215 0014 4FF42053 		mov	r3, #10240
 4216 0018 C4F20003 		movt	r3, 16384
 4217 001c DA68     		ldr	r2, [r3, #12]
 4218 001e 43F67773 		movw	r3, #16247
 4219 0022 1340     		ands	r3, r3, r2
 4220 0024 BB60     		str	r3, [r7, #8]
2587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Return the status of the flag */
2589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((tmpreg & RTC_FLAG) != (uint32_t)RESET)
 4221              		.loc 1 2589 0
 4222 0026 BA68     		ldr	r2, [r7, #8]
 4223 0028 7B68     		ldr	r3, [r7, #4]
 4224 002a 1340     		ands	r3, r3, r2
 4225 002c 002B     		cmp	r3, #0
 4226 002e 03D0     		beq	.L155
2590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4227              		.loc 1 2591 0
 4228 0030 4FF00103 		mov	r3, #1
 4229 0034 FB73     		strb	r3, [r7, #15]
 4230 0036 02E0     		b	.L156
 4231              	.L155:
2592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4232              		.loc 1 2595 0
 4233 0038 4FF00003 		mov	r3, #0
 4234 003c FB73     		strb	r3, [r7, #15]
 4235              	.L156:
2596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4236              		.loc 1 2597 0
 4237 003e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4238              		.loc 1 2598 0
 4239 0040 1846     		mov	r0, r3
 4240 0042 07F11407 		add	r7, r7, #20
 4241 0046 BD46     		mov	sp, r7
 4242 0048 80BC     		pop	{r7}
 4243 004a 7047     		bx	lr
 4244              		.cfi_endproc
 4245              	.LFE161:
 4247              		.section	.text.RTC_ClearFlag,"ax",%progbits
 4248              		.align	2
 4249              		.global	RTC_ClearFlag
 4250              		.thumb
 4251              		.thumb_func
 4253              	RTC_ClearFlag:
 4254              	.LFB162:
2599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's pending flags.
2602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_FLAG: specifies the RTC flag to clear.
2603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TAMP1F: Tamper 1 event flag
2605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSOVF: Time Stamp Overflow flag 
2606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_TSF: Time Stamp event flag
2607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_WUTF: WakeUp Timer flag
2608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRBF: Alarm B flag
2609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_ALRAF: Alarm A flag
2610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_FLAG_RSF: Registers Synchronized flag
2611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearFlag(uint32_t RTC_FLAG)
2614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4255              		.loc 1 2614 0
 4256              		.cfi_startproc
 4257              		@ args = 0, pretend = 0, frame = 8
 4258              		@ frame_needed = 1, uses_anonymous_args = 0
 4259              		@ link register save eliminated.
 4260 0000 80B4     		push	{r7}
 4261              	.LCFI152:
 4262              		.cfi_def_cfa_offset 4
 4263              		.cfi_offset 7, -4
 4264 0002 83B0     		sub	sp, sp, #12
 4265              	.LCFI153:
 4266              		.cfi_def_cfa_offset 16
 4267 0004 00AF     		add	r7, sp, #0
 4268              	.LCFI154:
 4269              		.cfi_def_cfa_register 7
 4270 0006 7860     		str	r0, [r7, #4]
2615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_FLAG(RTC_FLAG));
2617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the Flags in the RTC_ISR register */
2619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((RTC_FLAG | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR &
 4271              		.loc 1 2619 0
 4272 0008 4FF42053 		mov	r3, #10240
 4273 000c C4F20003 		movt	r3, 16384
 4274 0010 7A68     		ldr	r2, [r7, #4]
 4275 0012 4FEA0242 		lsl	r2, r2, #16
 4276 0016 4FEA1242 		lsr	r2, r2, #16
 4277 001a 42F08002 		orr	r2, r2, #128
 4278 001e 6FEA0201 		mvn	r1, r2
 4279 0022 4FF42052 		mov	r2, #10240
 4280 0026 C4F20002 		movt	r2, 16384
 4281 002a D268     		ldr	r2, [r2, #12]
 4282 002c 02F08002 		and	r2, r2, #128
 4283 0030 0A43     		orrs	r2, r2, r1
 4284 0032 DA60     		str	r2, [r3, #12]
2620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4285              		.loc 1 2620 0
 4286 0034 07F10C07 		add	r7, r7, #12
 4287 0038 BD46     		mov	sp, r7
 4288 003a 80BC     		pop	{r7}
 4289 003c 7047     		bx	lr
 4290              		.cfi_endproc
 4291              	.LFE162:
 4293 003e 00BF     		.section	.text.RTC_GetITStatus,"ax",%progbits
 4294              		.align	2
 4295              		.global	RTC_GetITStatus
 4296              		.thumb
 4297              		.thumb_func
 4299              	RTC_GetITStatus:
 4300              	.LFB163:
2621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Checks whether the specified RTC interrupt has occurred or not.
2624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt source to check.
2625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be one of the following values:
2626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval The new state of RTC_IT (SET or RESET).
2632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** ITStatus RTC_GetITStatus(uint32_t RTC_IT)
2634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4301              		.loc 1 2634 0
 4302              		.cfi_startproc
 4303              		@ args = 0, pretend = 0, frame = 24
 4304              		@ frame_needed = 1, uses_anonymous_args = 0
 4305              		@ link register save eliminated.
 4306 0000 80B4     		push	{r7}
 4307              	.LCFI155:
 4308              		.cfi_def_cfa_offset 4
 4309              		.cfi_offset 7, -4
 4310 0002 87B0     		sub	sp, sp, #28
 4311              	.LCFI156:
 4312              		.cfi_def_cfa_offset 32
 4313 0004 00AF     		add	r7, sp, #0
 4314              	.LCFI157:
 4315              		.cfi_def_cfa_register 7
 4316 0006 7860     		str	r0, [r7, #4]
2635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   ITStatus bitstatus = RESET;
 4317              		.loc 1 2635 0
 4318 0008 4FF00003 		mov	r3, #0
 4319 000c FB75     		strb	r3, [r7, #23]
2636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 4320              		.loc 1 2636 0
 4321 000e 4FF00003 		mov	r3, #0
 4322 0012 3B61     		str	r3, [r7, #16]
 4323 0014 4FF00003 		mov	r3, #0
 4324 0018 FB60     		str	r3, [r7, #12]
2637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_GET_IT(RTC_IT));
2640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the TAMPER Interrupt enable bit and pending bit */
2642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC->TAFCR & (RTC_TAFCR_TAMPIE));
 4325              		.loc 1 2642 0
 4326 001a 4FF42053 		mov	r3, #10240
 4327 001e C4F20003 		movt	r3, 16384
 4328 0022 1B6C     		ldr	r3, [r3, #64]
 4329 0024 03F00403 		and	r3, r3, #4
 4330 0028 3B61     		str	r3, [r7, #16]
2643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****  
2644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt enable Status */
2645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   enablestatus = (uint32_t)((RTC->CR & RTC_IT) | (tmpreg & (RTC_IT >> 15)));
 4331              		.loc 1 2645 0
 4332 002a 4FF42053 		mov	r3, #10240
 4333 002e C4F20003 		movt	r3, 16384
 4334 0032 9A68     		ldr	r2, [r3, #8]
 4335 0034 7B68     		ldr	r3, [r7, #4]
 4336 0036 1A40     		ands	r2, r2, r3
 4337 0038 7B68     		ldr	r3, [r7, #4]
 4338 003a 4FEAD331 		lsr	r1, r3, #15
 4339 003e 3B69     		ldr	r3, [r7, #16]
 4340 0040 0B40     		ands	r3, r3, r1
 4341 0042 1343     		orrs	r3, r3, r2
 4342 0044 FB60     		str	r3, [r7, #12]
2646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the Interrupt pending bit */
2648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)((RTC->ISR & (uint32_t)(RTC_IT >> 4)));
 4343              		.loc 1 2648 0
 4344 0046 4FF42053 		mov	r3, #10240
 4345 004a C4F20003 		movt	r3, 16384
 4346 004e DA68     		ldr	r2, [r3, #12]
 4347 0050 7B68     		ldr	r3, [r7, #4]
 4348 0052 4FEA1313 		lsr	r3, r3, #4
 4349 0056 1340     		ands	r3, r3, r2
 4350 0058 3B61     		str	r3, [r7, #16]
2649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the status of the Interrupt */
2651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   if ((enablestatus != (uint32_t)RESET) && ((tmpreg & 0x0000FFFF) != (uint32_t)RESET))
 4351              		.loc 1 2651 0
 4352 005a FB68     		ldr	r3, [r7, #12]
 4353 005c 002B     		cmp	r3, #0
 4354 005e 0AD0     		beq	.L159
 4355              		.loc 1 2651 0 is_stmt 0 discriminator 1
 4356 0060 3B69     		ldr	r3, [r7, #16]
 4357 0062 4FEA0343 		lsl	r3, r3, #16
 4358 0066 4FEA1343 		lsr	r3, r3, #16
 4359 006a 002B     		cmp	r3, #0
 4360 006c 03D0     		beq	.L159
2652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = SET;
 4361              		.loc 1 2653 0 is_stmt 1
 4362 006e 4FF00103 		mov	r3, #1
 4363 0072 FB75     		strb	r3, [r7, #23]
 4364 0074 02E0     		b	.L160
 4365              	.L159:
2654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   else
2656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bitstatus = RESET;
 4366              		.loc 1 2657 0
 4367 0076 4FF00003 		mov	r3, #0
 4368 007a FB75     		strb	r3, [r7, #23]
 4369              	.L160:
2658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return bitstatus;
 4370              		.loc 1 2659 0
 4371 007c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
2660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4372              		.loc 1 2660 0
 4373 007e 1846     		mov	r0, r3
 4374 0080 07F11C07 		add	r7, r7, #28
 4375 0084 BD46     		mov	sp, r7
 4376 0086 80BC     		pop	{r7}
 4377 0088 7047     		bx	lr
 4378              		.cfi_endproc
 4379              	.LFE163:
 4381 008a 00BF     		.section	.text.RTC_ClearITPendingBit,"ax",%progbits
 4382              		.align	2
 4383              		.global	RTC_ClearITPendingBit
 4384              		.thumb
 4385              		.thumb_func
 4387              	RTC_ClearITPendingBit:
 4388              	.LFB164:
2661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Clears the RTC's interrupt pending bits.
2664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  RTC_IT: specifies the RTC interrupt pending bit to clear.
2665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *          This parameter can be any combination of the following values:
2666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TS: Time Stamp interrupt 
2667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_WUT: WakeUp Timer interrupt 
2668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRB: Alarm B interrupt 
2669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_ALRA: Alarm A interrupt 
2670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   *            @arg RTC_IT_TAMP1: Tamper 1 event interrupt 
2671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval None
2672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** void RTC_ClearITPendingBit(uint32_t RTC_IT)
2674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4389              		.loc 1 2674 0
 4390              		.cfi_startproc
 4391              		@ args = 0, pretend = 0, frame = 16
 4392              		@ frame_needed = 1, uses_anonymous_args = 0
 4393              		@ link register save eliminated.
 4394 0000 80B4     		push	{r7}
 4395              	.LCFI158:
 4396              		.cfi_def_cfa_offset 4
 4397              		.cfi_offset 7, -4
 4398 0002 85B0     		sub	sp, sp, #20
 4399              	.LCFI159:
 4400              		.cfi_def_cfa_offset 24
 4401 0004 00AF     		add	r7, sp, #0
 4402              	.LCFI160:
 4403              		.cfi_def_cfa_register 7
 4404 0006 7860     		str	r0, [r7, #4]
2675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint32_t tmpreg = 0;
 4405              		.loc 1 2675 0
 4406 0008 4FF00003 		mov	r3, #0
 4407 000c FB60     		str	r3, [r7, #12]
2676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Check the parameters */
2678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   assert_param(IS_RTC_CLEAR_IT(RTC_IT));
2679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Get the RTC_ISR Interrupt pending bits mask */
2681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmpreg = (uint32_t)(RTC_IT >> 4);
 4408              		.loc 1 2681 0
 4409 000e 7B68     		ldr	r3, [r7, #4]
 4410 0010 4FEA1313 		lsr	r3, r3, #4
 4411 0014 FB60     		str	r3, [r7, #12]
2682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   /* Clear the interrupt pending bits in the RTC_ISR register */
2684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   RTC->ISR = (uint32_t)((uint32_t)(~((tmpreg | RTC_ISR_INIT)& 0x0000FFFF) | (uint32_t)(RTC->ISR & R
 4412              		.loc 1 2684 0
 4413 0016 4FF42053 		mov	r3, #10240
 4414 001a C4F20003 		movt	r3, 16384
 4415 001e FA68     		ldr	r2, [r7, #12]
 4416 0020 4FEA0242 		lsl	r2, r2, #16
 4417 0024 4FEA1242 		lsr	r2, r2, #16
 4418 0028 42F08002 		orr	r2, r2, #128
 4419 002c 6FEA0201 		mvn	r1, r2
 4420 0030 4FF42052 		mov	r2, #10240
 4421 0034 C4F20002 		movt	r2, 16384
 4422 0038 D268     		ldr	r2, [r2, #12]
 4423 003a 02F08002 		and	r2, r2, #128
 4424 003e 0A43     		orrs	r2, r2, r1
 4425 0040 DA60     		str	r2, [r3, #12]
2685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4426              		.loc 1 2685 0
 4427 0042 07F11407 		add	r7, r7, #20
 4428 0046 BD46     		mov	sp, r7
 4429 0048 80BC     		pop	{r7}
 4430 004a 7047     		bx	lr
 4431              		.cfi_endproc
 4432              	.LFE164:
 4434              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 4435              		.align	2
 4436              		.thumb
 4437              		.thumb_func
 4439              	RTC_ByteToBcd2:
 4440              	.LFB165:
2686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @}
2689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Converts a 2 digit decimal to BCD format.
2693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: Byte to be converted.
2694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted byte
2695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_ByteToBcd2(uint8_t Value)
2697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4441              		.loc 1 2697 0
 4442              		.cfi_startproc
 4443              		@ args = 0, pretend = 0, frame = 16
 4444              		@ frame_needed = 1, uses_anonymous_args = 0
 4445              		@ link register save eliminated.
 4446 0000 80B4     		push	{r7}
 4447              	.LCFI161:
 4448              		.cfi_def_cfa_offset 4
 4449              		.cfi_offset 7, -4
 4450 0002 85B0     		sub	sp, sp, #20
 4451              	.LCFI162:
 4452              		.cfi_def_cfa_offset 24
 4453 0004 00AF     		add	r7, sp, #0
 4454              	.LCFI163:
 4455              		.cfi_def_cfa_register 7
 4456 0006 0346     		mov	r3, r0
 4457 0008 FB71     		strb	r3, [r7, #7]
2698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t bcdhigh = 0;
 4458              		.loc 1 2698 0
 4459 000a 4FF00003 		mov	r3, #0
 4460 000e FB73     		strb	r3, [r7, #15]
2699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4461              		.loc 1 2700 0
 4462 0010 07E0     		b	.L163
 4463              	.L164:
2701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   {
2702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     bcdhigh++;
 4464              		.loc 1 2702 0
 4465 0012 FB7B     		ldrb	r3, [r7, #15]
 4466 0014 03F10103 		add	r3, r3, #1
 4467 0018 FB73     		strb	r3, [r7, #15]
2703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****     Value -= 10;
 4468              		.loc 1 2703 0
 4469 001a FB79     		ldrb	r3, [r7, #7]
 4470 001c A3F10A03 		sub	r3, r3, #10
 4471 0020 FB71     		strb	r3, [r7, #7]
 4472              	.L163:
2700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   while (Value >= 10)
 4473              		.loc 1 2700 0 discriminator 1
 4474 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4475 0024 092B     		cmp	r3, #9
 4476 0026 F4D8     		bhi	.L164
2704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   }
2705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   
2706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return  ((uint8_t)(bcdhigh << 4) | Value);
 4477              		.loc 1 2706 0
 4478 0028 FB7B     		ldrb	r3, [r7, #15]
 4479 002a 4FEA0313 		lsl	r3, r3, #4
 4480 002e DAB2     		uxtb	r2, r3
 4481 0030 FB79     		ldrb	r3, [r7, #7]
 4482 0032 1343     		orrs	r3, r3, r2
 4483 0034 DBB2     		uxtb	r3, r3
2707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4484              		.loc 1 2707 0
 4485 0036 1846     		mov	r0, r3
 4486 0038 07F11407 		add	r7, r7, #20
 4487 003c BD46     		mov	sp, r7
 4488 003e 80BC     		pop	{r7}
 4489 0040 7047     		bx	lr
 4490              		.cfi_endproc
 4491              	.LFE165:
 4493 0042 00BF     		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 4494              		.align	2
 4495              		.thumb
 4496              		.thumb_func
 4498              	RTC_Bcd2ToByte:
 4499              	.LFB166:
2708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** 
2709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** /**
2710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @param  Value: BCD value to be converted.
2712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   * @retval Converted word
2713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   */
2714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** static uint8_t RTC_Bcd2ToByte(uint8_t Value)
2715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** {
 4500              		.loc 1 2715 0
 4501              		.cfi_startproc
 4502              		@ args = 0, pretend = 0, frame = 16
 4503              		@ frame_needed = 1, uses_anonymous_args = 0
 4504              		@ link register save eliminated.
 4505 0000 80B4     		push	{r7}
 4506              	.LCFI164:
 4507              		.cfi_def_cfa_offset 4
 4508              		.cfi_offset 7, -4
 4509 0002 85B0     		sub	sp, sp, #20
 4510              	.LCFI165:
 4511              		.cfi_def_cfa_offset 24
 4512 0004 00AF     		add	r7, sp, #0
 4513              	.LCFI166:
 4514              		.cfi_def_cfa_register 7
 4515 0006 0346     		mov	r3, r0
 4516 0008 FB71     		strb	r3, [r7, #7]
2716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   uint8_t tmp = 0;
 4517              		.loc 1 2716 0
 4518 000a 4FF00003 		mov	r3, #0
 4519 000e FB73     		strb	r3, [r7, #15]
2717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 4520              		.loc 1 2717 0
 4521 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 4522 0012 4FEA1313 		lsr	r3, r3, #4
 4523 0016 DBB2     		uxtb	r3, r3
 4524 0018 1A46     		mov	r2, r3
 4525 001a 4FEA8202 		lsl	r2, r2, #2
 4526 001e D318     		adds	r3, r2, r3
 4527 0020 4FEA4303 		lsl	r3, r3, #1
 4528 0024 FB73     		strb	r3, [r7, #15]
2718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c ****   return (tmp + (Value & (uint8_t)0x0F));
 4529              		.loc 1 2718 0
 4530 0026 FB79     		ldrb	r3, [r7, #7]
 4531 0028 03F00F03 		and	r3, r3, #15
 4532 002c DAB2     		uxtb	r2, r3
 4533 002e FB7B     		ldrb	r3, [r7, #15]
 4534 0030 D318     		adds	r3, r2, r3
 4535 0032 DBB2     		uxtb	r3, r3
2719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rtc.c **** }
 4536              		.loc 1 2719 0
 4537 0034 1846     		mov	r0, r3
 4538 0036 07F11407 		add	r7, r7, #20
 4539 003a BD46     		mov	sp, r7
 4540 003c 80BC     		pop	{r7}
 4541 003e 7047     		bx	lr
 4542              		.cfi_endproc
 4543              	.LFE166:
 4545              		.text
 4546              	.Letext0:
 4547              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 4548              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\Device\\STM
 4549              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 4550              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rtc.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:19     .text.RTC_DeInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:24     .text.RTC_DeInit:00000000 RTC_DeInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:401    .text.RTC_EnterInitMode:00000000 RTC_EnterInitMode
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:531    .text.RTC_WaitForSynchro:00000000 RTC_WaitForSynchro
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:194    .text.RTC_Init:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:199    .text.RTC_Init:00000000 RTC_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:496    .text.RTC_ExitInitMode:00000000 RTC_ExitInitMode
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:297    .text.RTC_StructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:302    .text.RTC_StructInit:00000000 RTC_StructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:341    .text.RTC_WriteProtectionCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:346    .text.RTC_WriteProtectionCmd:00000000 RTC_WriteProtectionCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:396    .text.RTC_EnterInitMode:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:491    .text.RTC_ExitInitMode:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:526    .text.RTC_WaitForSynchro:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:627    .text.RTC_RefClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:632    .text.RTC_RefClockCmd:00000000 RTC_RefClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:719    .text.RTC_BypassShadowCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:724    .text.RTC_BypassShadowCmd:00000000 RTC_BypassShadowCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:790    .text.RTC_SetTime:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:795    .text.RTC_SetTime:00000000 RTC_SetTime
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4498   .text.RTC_Bcd2ToByte:00000000 RTC_Bcd2ToByte
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4439   .text.RTC_ByteToBcd2:00000000 RTC_ByteToBcd2
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:979    .text.RTC_TimeStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:984    .text.RTC_TimeStructInit:00000000 RTC_TimeStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1027   .text.RTC_GetTime:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1032   .text.RTC_GetTime:00000000 RTC_GetTime
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1130   .text.RTC_GetSubSecond:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1135   .text.RTC_GetSubSecond:00000000 RTC_GetSubSecond
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1176   .text.RTC_SetDate:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1181   .text.RTC_SetDate:00000000 RTC_SetDate
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1365   .text.RTC_DateStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1370   .text.RTC_DateStructInit:00000000 RTC_DateStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1413   .text.RTC_GetDate:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1418   .text.RTC_GetDate:00000000 RTC_GetDate
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1520   .text.RTC_SetAlarm:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1525   .text.RTC_SetAlarm:00000000 RTC_SetAlarm
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1744   .text.RTC_AlarmStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1749   .text.RTC_AlarmStructInit:00000000 RTC_AlarmStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1804   .text.RTC_GetAlarm:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1809   .text.RTC_GetAlarm:00000000 RTC_GetAlarm
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1943   .text.RTC_AlarmCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:1948   .text.RTC_AlarmCmd:00000000 RTC_AlarmCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2071   .text.RTC_AlarmSubSecondConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2076   .text.RTC_AlarmSubSecondConfig:00000000 RTC_AlarmSubSecondConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2145   .text.RTC_GetAlarmSubSecond:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2150   .text.RTC_GetAlarmSubSecond:00000000 RTC_GetAlarmSubSecond
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2204   .text.RTC_WakeUpClockConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2209   .text.RTC_WakeUpClockConfig:00000000 RTC_WakeUpClockConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2268   .text.RTC_SetWakeUpCounter:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2273   .text.RTC_SetWakeUpCounter:00000000 RTC_SetWakeUpCounter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2320   .text.RTC_GetWakeUpCounter:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2325   .text.RTC_GetWakeUpCounter:00000000 RTC_GetWakeUpCounter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2354   .text.RTC_WakeUpCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2359   .text.RTC_WakeUpCmd:00000000 RTC_WakeUpCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2474   .text.RTC_DayLightSavingConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2479   .text.RTC_DayLightSavingConfig:00000000 RTC_DayLightSavingConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2541   .text.RTC_GetStoreOperation:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2546   .text.RTC_GetStoreOperation:00000000 RTC_GetStoreOperation
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2574   .text.RTC_OutputConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2579   .text.RTC_OutputConfig:00000000 RTC_OutputConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2641   .text.RTC_CoarseCalibConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2646   .text.RTC_CoarseCalibConfig:00000000 RTC_CoarseCalibConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2717   .text.RTC_CoarseCalibCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2722   .text.RTC_CoarseCalibCmd:00000000 RTC_CoarseCalibCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2809   .text.RTC_CalibOutputCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2814   .text.RTC_CalibOutputCmd:00000000 RTC_CalibOutputCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2880   .text.RTC_CalibOutputConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2885   .text.RTC_CalibOutputConfig:00000000 RTC_CalibOutputConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2944   .text.RTC_SmoothCalibConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:2949   .text.RTC_SmoothCalibConfig:00000000 RTC_SmoothCalibConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3054   .text.RTC_TimeStampCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3059   .text.RTC_TimeStampCmd:00000000 RTC_TimeStampCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3136   .text.RTC_GetTimeStamp:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3141   .text.RTC_GetTimeStamp:00000000 RTC_GetTimeStamp
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3301   .text.RTC_GetTimeStampSubSecond:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3306   .text.RTC_GetTimeStampSubSecond:00000000 RTC_GetTimeStampSubSecond
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3333   .text.RTC_TamperTriggerConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3338   .text.RTC_TamperTriggerConfig:00000000 RTC_TamperTriggerConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3394   .text.RTC_TamperCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3399   .text.RTC_TamperCmd:00000000 RTC_TamperCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3454   .text.RTC_TamperFilterConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3459   .text.RTC_TamperFilterConfig:00000000 RTC_TamperFilterConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3503   .text.RTC_TamperSamplingFreqConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3508   .text.RTC_TamperSamplingFreqConfig:00000000 RTC_TamperSamplingFreqConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3552   .text.RTC_TamperPinsPrechargeDuration:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3557   .text.RTC_TamperPinsPrechargeDuration:00000000 RTC_TamperPinsPrechargeDuration
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3601   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3606   .text.RTC_TimeStampOnTamperDetectionCmd:00000000 RTC_TimeStampOnTamperDetectionCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3657   .text.RTC_TamperPullUpCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3662   .text.RTC_TamperPullUpCmd:00000000 RTC_TamperPullUpCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3713   .text.RTC_WriteBackupRegister:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3718   .text.RTC_WriteBackupRegister:00000000 RTC_WriteBackupRegister
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3763   .text.RTC_ReadBackupRegister:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3768   .text.RTC_ReadBackupRegister:00000000 RTC_ReadBackupRegister
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3812   .text.RTC_TamperPinSelection:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3817   .text.RTC_TamperPinSelection:00000000 RTC_TamperPinSelection
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3861   .text.RTC_TimeStampPinSelection:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3866   .text.RTC_TimeStampPinSelection:00000000 RTC_TimeStampPinSelection
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3910   .text.RTC_OutputTypeConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3915   .text.RTC_OutputTypeConfig:00000000 RTC_OutputTypeConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3959   .text.RTC_SynchroShiftConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:3964   .text.RTC_SynchroShiftConfig:00000000 RTC_SynchroShiftConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4087   .text.RTC_ITConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4092   .text.RTC_ITConfig:00000000 RTC_ITConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4185   .text.RTC_GetFlagStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4190   .text.RTC_GetFlagStatus:00000000 RTC_GetFlagStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4248   .text.RTC_ClearFlag:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4253   .text.RTC_ClearFlag:00000000 RTC_ClearFlag
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4294   .text.RTC_GetITStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4299   .text.RTC_GetITStatus:00000000 RTC_GetITStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4382   .text.RTC_ClearITPendingBit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4387   .text.RTC_ClearITPendingBit:00000000 RTC_ClearITPendingBit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4435   .text.RTC_ByteToBcd2:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccV33wiW.s:4494   .text.RTC_Bcd2ToByte:00000000 $t
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
