   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_adc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ADC_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	ADC_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	ADC_DeInit:
  25              	.LFB110:
  26              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @file    stm32f4xx_adc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @version V1.0.0
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @date    30-September-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC) peripheral:
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Initialization and Configuration (in addition to ADC multi mode 
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             selection)
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Analog Watchdog configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Temperature Sensor & Vrefint (Voltage Reference internal) & VBAT
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             management 
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels Configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Regular Channels DMA Configuration
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Injected channels Configuration
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - Interrupts and flags management
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @verbatim
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                   How to use this driver
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===================================================================
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          1.  Enable the ADC interface clock using 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADCx, ENABLE); 
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *     
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          2. ADC pins configuration
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *               - Enable the clock for the ADC GPIOs using the following function:
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                   RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOx, ENABLE);   
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                - Configure these ADC pins in analog mode using GPIO_Init();  
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          3. Configure the ADC Prescaler, conversion resolution and data 
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              alignment using the ADC_Init() function.
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          4. Activate the ADC peripheral using ADC_Cmd() function.
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Regular channels group configuration
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================    
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC regular channels group features, use 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_Init() and ADC_RegularChannelConfig() functions.
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configurate and activate the Discontinuous mode, use the 
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_DiscModeChannelCountConfig() and ADC_DiscModeCmd() functions.
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetConversionValue()
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Multi mode ADCs Regular channels configuration
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ===============================================
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Refer to "Regular channels group configuration" description to
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              configure the ADC1, ADC2 and ADC3 regular channels.        
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Select the Multi mode ADC regular channels features (dual or 
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              triple mode) using ADC_CommonInit() function and configure 
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              the DMA mode using ADC_MultiModeDMARequestAfterLastTransferCmd() 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.        
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - Read the ADCs converted values using the 
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_GetMultiModeConversionValue() function.
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          DMA for Regular channels group features configuration
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ====================================================== 
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the DMA mode for regular channels group, use the 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             ADC_DMACmd() function.
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           - To enable the generation of DMA requests continuously at the end
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             of the last DMA transfer, use the ADC_DMARequestAfterLastTransferCmd() 
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *             function.
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          Injected channels group configuration
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          =====================================    
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To configure the ADC Injected channels group features, use 
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedChannelConfig() and  ADC_InjectedSequencerLengthConfig()
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              functions.
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the continuous mode, use the ADC_continuousModeCmd()
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the Injected Discontinuous mode, use the 
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              ADC_InjectedDiscModeCmd() function.  
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To activate the AutoInjected mode, use the ADC_AutoInjectedConvCmd() 
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.        
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            - To read the ADC converted values, use the ADC_GetInjectedConversionValue() 
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *              function.
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *  @endverbatim
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @attention
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ******************************************************************************  
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Includes ------------------------------------------------------------------*/
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_adc.h"
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #include "stm32f4xx_rcc.h"
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC 
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief ADC driver modules
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private typedef -----------------------------------------------------------*/
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private define ------------------------------------------------------------*/ 
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC DISCNUM mask */
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_DISCNUM_RESET         ((uint32_t)0xFFFF1FFF)
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC AWDCH mask */
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDCH_RESET           ((uint32_t)0xFFFFFFE0)   
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC Analog watchdog enable mode mask */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_AWDMode_RESET         ((uint32_t)0xFF3FFDFF)   
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR1 register Mask */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR1_CLEAR_MASK            ((uint32_t)0xFCFFFEFF)
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC EXTEN mask */
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_EXTEN_RESET           ((uint32_t)0xCFFFFFFF)  
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTEN mask */
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTEN_RESET          ((uint32_t)0xFFCFFFFF)  
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JEXTSEL mask */
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_JEXTSEL_RESET         ((uint32_t)0xFFF0FFFF)  
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* CR2 register Mask */
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR2_CLEAR_MASK            ((uint32_t)0xC0FFF7FD)
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SQx mask */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR3_SQ_SET               ((uint32_t)0x0000001F)  
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR2_SQ_SET               ((uint32_t)0x0000001F)  
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_SQ_SET               ((uint32_t)0x0000001F)  
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC L Mask */
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SQR1_L_RESET              ((uint32_t)0xFF0FFFFF) 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JSQx mask */
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JSQ_SET              ((uint32_t)0x0000001F) 
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JL mask */
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_SET               ((uint32_t)0x00300000) 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JSQR_JL_RESET             ((uint32_t)0xFFCFFFFF) 
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC SMPx mask */
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR1_SMP_SET             ((uint32_t)0x00000007)  
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define SMPR2_SMP_SET             ((uint32_t)0x00000007) 
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC JDRx registers offset */
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define JDR_OFFSET                ((uint8_t)0x28) 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CDR register base address */
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CDR_ADDRESS               ((uint32_t)0x40012308)   
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* ADC CCR register Mask */
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** #define CR_CLEAR_MASK             ((uint32_t)0xFFFC30E0)  
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private macro -------------------------------------------------------------*/
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private variables ---------------------------------------------------------*/
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private function prototypes -----------------------------------------------*/
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /* Private functions ---------------------------------------------------------*/
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Private_Functions
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group1 Initialization and Configuration functions
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Initialization and Configuration functions 
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim    
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       Initialization and Configuration functions
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to:
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Initialize and configure the ADC Prescaler
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Conversion Resolution (12bit..6bit)
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Scan Conversion Mode (multichannels or one channel) for regular group
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - ADC Continuous Conversion Mode (Continuous or Single conversion) for 
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular group
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - External trigger Edge and source of regular group, 
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Converted data alignment (left or right)
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - The number of ADC conversions that will be done using the sequencer for 
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel group
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Multi ADC mode selection
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Direct memory access mode selection for multi ADC mode  
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Delay between 2 sampling phases (used in dual or triple interleaved modes)
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    - Enable or disable the ADC peripheral
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Deinitializes all ADCs peripherals registers to their default reset 
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         values.
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DeInit(void)
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  27              		.loc 1 207 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable all ADCs reset state */
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, ENABLE);
  39              		.loc 1 209 0
  40 0004 4FF48070 		mov	r0, #256
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Release all ADCs from reset state */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC, DISABLE);
  43              		.loc 1 212 0
  44 0010 4FF48070 		mov	r0, #256
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
  47              		.loc 1 213 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE110:
  52 001e 00BF     		.section	.text.ADC_Init,"ax",%progbits
  53              		.align	2
  54              		.global	ADC_Init
  55              		.thumb
  56              		.thumb_func
  58              	ADC_Init:
  59              	.LFB111:
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCx peripheral according to the specified parameters 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_InitStruct.
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to configure the global features of the ADC ( 
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         the configuration information for the specified ADC peripheral.
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
  60              		.loc 1 229 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 16
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65 0000 80B4     		push	{r7}
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 7, -4
  69 0002 85B0     		sub	sp, sp, #20
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 24
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
  75 0006 7860     		str	r0, [r7, #4]
  76 0008 3960     		str	r1, [r7, #0]
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
  77              		.loc 1 230 0
  78 000a 4FF00003 		mov	r3, #0
  79 000e FB60     		str	r3, [r7, #12]
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t tmpreg2 = 0;
  80              		.loc 1 231 0
  81 0010 4FF00003 		mov	r3, #0
  82 0014 FB72     		strb	r3, [r7, #11]
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_RESOLUTION(ADC_InitStruct->ADC_Resolution)); 
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ScanConvMode));
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(ADC_InitStruct->ADC_ContinuousConvMode)); 
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG_EDGE(ADC_InitStruct->ADC_ExternalTrigConvEdge)); 
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_TRIG(ADC_InitStruct->ADC_ExternalTrigConv));    
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR1 Configuration -----------------*/
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR1 value */
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
  83              		.loc 1 244 0
  84 0016 7B68     		ldr	r3, [r7, #4]
  85 0018 5B68     		ldr	r3, [r3, #4]
  86 001a FB60     		str	r3, [r7, #12]
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear RES and SCAN bits */
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_CLEAR_MASK;
  87              		.loc 1 247 0
  88 001c FB68     		ldr	r3, [r7, #12]
  89 001e 23F04073 		bic	r3, r3, #50331648
  90 0022 23F48073 		bic	r3, r3, #256
  91 0026 FB60     		str	r3, [r7, #12]
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: scan conversion mode and resolution */
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set SCAN bit according to ADC_ScanConvMode value */
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set RES bit according to ADC_Resolution value */ 
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  92              		.loc 1 252 0
  93 0028 3B68     		ldr	r3, [r7, #0]
  94 002a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
  95 002c 4FEA0322 		lsl	r2, r3, #8
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                    ADC_InitStruct->ADC_Resolution);
  96              		.loc 1 253 0
  97 0030 3B68     		ldr	r3, [r7, #0]
  98 0032 1B68     		ldr	r3, [r3, #0]
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
  99              		.loc 1 252 0
 100 0034 1343     		orrs	r3, r3, r2
 101 0036 FA68     		ldr	r2, [r7, #12]
 102 0038 1343     		orrs	r3, r3, r2
 103 003a FB60     		str	r3, [r7, #12]
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR1 */
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 104              		.loc 1 255 0
 105 003c 7B68     		ldr	r3, [r7, #4]
 106 003e FA68     		ldr	r2, [r7, #12]
 107 0040 5A60     		str	r2, [r3, #4]
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx CR2 Configuration -----------------*/
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx CR2 value */
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR2;
 108              		.loc 1 258 0
 109 0042 7B68     		ldr	r3, [r7, #4]
 110 0044 9B68     		ldr	r3, [r3, #8]
 111 0046 FB60     		str	r3, [r7, #12]
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR2_CLEAR_MASK;
 112              		.loc 1 261 0
 113 0048 FA68     		ldr	r2, [r7, #12]
 114 004a 4FF2FD73 		movw	r3, #63485
 115 004e CCF2FF03 		movt	r3, 49407
 116 0052 1340     		ands	r3, r3, r2
 117 0054 FB60     		str	r3, [r7, #12]
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: external trigger event and edge, data alignment and 
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      continuous conversion mode */
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ALIGN bit according to ADC_DataAlign value */
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set CONT bit according to ADC_ContinuousConvMode value */
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 118              		.loc 1 269 0
 119 0056 3B68     		ldr	r3, [r7, #0]
 120 0058 1A69     		ldr	r2, [r3, #16]
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 121              		.loc 1 270 0
 122 005a 3B68     		ldr	r3, [r7, #0]
 123 005c DB68     		ldr	r3, [r3, #12]
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 124              		.loc 1 269 0
 125 005e 1A43     		orrs	r2, r2, r3
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 126              		.loc 1 271 0
 127 0060 3B68     		ldr	r3, [r7, #0]
 128 0062 9B68     		ldr	r3, [r3, #8]
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_InitStruct->ADC_ExternalTrigConv | 
 129              		.loc 1 270 0
 130 0064 1A43     		orrs	r2, r2, r3
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 131              		.loc 1 272 0
 132 0066 3B68     		ldr	r3, [r7, #0]
 133 0068 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 134 006a 4FEA4303 		lsl	r3, r3, #1
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 135              		.loc 1 269 0
 136 006e 1343     		orrs	r3, r3, r2
 137 0070 FA68     		ldr	r2, [r7, #12]
 138 0072 1343     		orrs	r3, r3, r2
 139 0074 FB60     		str	r3, [r7, #12]
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx CR2 */
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg1;
 140              		.loc 1 275 0
 141 0076 7B68     		ldr	r3, [r7, #4]
 142 0078 FA68     		ldr	r2, [r7, #12]
 143 007a 9A60     		str	r2, [r3, #8]
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADCx SQR1 Configuration -----------------*/
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADCx SQR1 value */
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->SQR1;
 144              		.loc 1 278 0
 145 007c 7B68     		ldr	r3, [r7, #4]
 146 007e DB6A     		ldr	r3, [r3, #44]
 147 0080 FB60     		str	r3, [r7, #12]
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear L bits */
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= SQR1_L_RESET;
 148              		.loc 1 281 0
 149 0082 FB68     		ldr	r3, [r7, #12]
 150 0084 23F47003 		bic	r3, r3, #15728640
 151 0088 FB60     		str	r3, [r7, #12]
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: regular channel sequence length */
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set L bits according to ADC_NbrOfConversion value */
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 152              		.loc 1 285 0
 153 008a 3B68     		ldr	r3, [r7, #0]
 154 008c 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 155 008e 03F1FF33 		add	r3, r3, #-1
 156 0092 DAB2     		uxtb	r2, r3
 157 0094 FB7A     		ldrb	r3, [r7, #11]
 158 0096 1343     		orrs	r3, r3, r2
 159 0098 FB72     		strb	r3, [r7, #11]
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 160              		.loc 1 286 0
 161 009a FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 162 009c 4FEA0353 		lsl	r3, r3, #20
 163 00a0 FA68     		ldr	r2, [r7, #12]
 164 00a2 1343     		orrs	r3, r3, r2
 165 00a4 FB60     		str	r3, [r7, #12]
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADCx SQR1 */
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SQR1 = tmpreg1;
 166              		.loc 1 289 0
 167 00a6 7B68     		ldr	r3, [r7, #4]
 168 00a8 FA68     		ldr	r2, [r7, #12]
 169 00aa DA62     		str	r2, [r3, #44]
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 170              		.loc 1 290 0
 171 00ac 07F11407 		add	r7, r7, #20
 172 00b0 BD46     		mov	sp, r7
 173 00b2 80BC     		pop	{r7}
 174 00b4 7047     		bx	lr
 175              		.cfi_endproc
 176              	.LFE111:
 178 00b6 00BF     		.section	.text.ADC_StructInit,"ax",%progbits
 179              		.align	2
 180              		.global	ADC_StructInit
 181              		.thumb
 182              		.thumb_func
 184              	ADC_StructInit:
 185              	.LFB112:
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_InitStruct member with its default value.
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   This function is used to initialize the global features of the ADC ( 
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         Resolution and Data Alignment), however, the rest of the configuration
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         parameters are specific to the regular channels group (scan mode 
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         activation, continuous mode activation, External trigger source and 
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         edge, number of conversion in the regular channels group sequencer).  
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         be initialized.
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 186              		.loc 1 304 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 8
 189              		@ frame_needed = 1, uses_anonymous_args = 0
 190              		@ link register save eliminated.
 191 0000 80B4     		push	{r7}
 192              	.LCFI5:
 193              		.cfi_def_cfa_offset 4
 194              		.cfi_offset 7, -4
 195 0002 83B0     		sub	sp, sp, #12
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 16
 198 0004 00AF     		add	r7, sp, #0
 199              	.LCFI7:
 200              		.cfi_def_cfa_register 7
 201 0006 7860     		str	r0, [r7, #4]
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 202              		.loc 1 306 0
 203 0008 7B68     		ldr	r3, [r7, #4]
 204 000a 4FF00002 		mov	r2, #0
 205 000e 1A60     		str	r2, [r3, #0]
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_ScanConvMode member */
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 206              		.loc 1 309 0
 207 0010 7B68     		ldr	r3, [r7, #4]
 208 0012 4FF00002 		mov	r2, #0
 209 0016 1A71     		strb	r2, [r3, #4]
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ContinuousConvMode member */
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 210              		.loc 1 312 0
 211 0018 7B68     		ldr	r3, [r7, #4]
 212 001a 4FF00002 		mov	r2, #0
 213 001e 5A71     		strb	r2, [r3, #5]
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConvEdge member */
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 214              		.loc 1 315 0
 215 0020 7B68     		ldr	r3, [r7, #4]
 216 0022 4FF00002 		mov	r2, #0
 217 0026 9A60     		str	r2, [r3, #8]
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_ExternalTrigConv member */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 218              		.loc 1 318 0
 219 0028 7B68     		ldr	r3, [r7, #4]
 220 002a 4FF00002 		mov	r2, #0
 221 002e DA60     		str	r2, [r3, #12]
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DataAlign member */
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 222              		.loc 1 321 0
 223 0030 7B68     		ldr	r3, [r7, #4]
 224 0032 4FF00002 		mov	r2, #0
 225 0036 1A61     		str	r2, [r3, #16]
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_NbrOfConversion member */
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_InitStruct->ADC_NbrOfConversion = 1;
 226              		.loc 1 324 0
 227 0038 7B68     		ldr	r3, [r7, #4]
 228 003a 4FF00102 		mov	r2, #1
 229 003e 1A75     		strb	r2, [r3, #20]
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 230              		.loc 1 325 0
 231 0040 07F10C07 		add	r7, r7, #12
 232 0044 BD46     		mov	sp, r7
 233 0046 80BC     		pop	{r7}
 234 0048 7047     		bx	lr
 235              		.cfi_endproc
 236              	.LFE112:
 238 004a 00BF     		.section	.text.ADC_CommonInit,"ax",%progbits
 239              		.align	2
 240              		.global	ADC_CommonInit
 241              		.thumb
 242              		.thumb_func
 244              	ADC_CommonInit:
 245              	.LFB113:
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Initializes the ADCs peripherals according to the specified parameters 
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         in the ADC_CommonInitStruct.
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure 
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         that contains the configuration information for  All ADCs peripherals.
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 246              		.loc 1 335 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 16
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250              		@ link register save eliminated.
 251 0000 80B4     		push	{r7}
 252              	.LCFI8:
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 0002 85B0     		sub	sp, sp, #20
 256              	.LCFI9:
 257              		.cfi_def_cfa_offset 24
 258 0004 00AF     		add	r7, sp, #0
 259              	.LCFI10:
 260              		.cfi_def_cfa_register 7
 261 0006 7860     		str	r0, [r7, #4]
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 262              		.loc 1 336 0
 263 0008 4FF00003 		mov	r3, #0
 264 000c FB60     		str	r3, [r7, #12]
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_MODE(ADC_CommonInitStruct->ADC_Mode));
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_PRESCALER(ADC_CommonInitStruct->ADC_Prescaler));
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_DMA_ACCESS_MODE(ADC_CommonInitStruct->ADC_DMAAccessMode));
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLING_DELAY(ADC_CommonInitStruct->ADC_TwoSamplingDelay));
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /*---------------------------- ADC CCR Configuration -----------------*/
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC CCR value */
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADC->CCR;
 265              		.loc 1 344 0
 266 000e 4FF40C53 		mov	r3, #8960
 267 0012 C4F20103 		movt	r3, 16385
 268 0016 5B68     		ldr	r3, [r3, #4]
 269 0018 FB60     		str	r3, [r7, #12]
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear MULTI, DELAY, DMA and ADCPRE bits */
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR_CLEAR_MASK;
 270              		.loc 1 347 0
 271 001a FA68     		ldr	r2, [r7, #12]
 272 001c 43F2E003 		movw	r3, #12512
 273 0020 CFF6FC73 		movt	r3, 65532
 274 0024 1340     		ands	r3, r3, r2
 275 0026 FB60     		str	r3, [r7, #12]
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Configure ADCx: Multi mode, Delay between two sampling time, ADC prescaler,
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      and DMA access mode for multimode */
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set MULTI bits according to ADC_Mode value */
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set ADCPRE bits according to ADC_Prescaler value */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DMA bits according to ADC_DMAAccessMode value */
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set DELAY bits according to ADC_TwoSamplingDelay value */    
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 276              		.loc 1 355 0
 277 0028 7B68     		ldr	r3, [r7, #4]
 278 002a 1A68     		ldr	r2, [r3, #0]
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 279              		.loc 1 356 0
 280 002c 7B68     		ldr	r3, [r7, #4]
 281 002e 5B68     		ldr	r3, [r3, #4]
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 282              		.loc 1 355 0
 283 0030 1A43     		orrs	r2, r2, r3
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_DMAAccessMode | 
 284              		.loc 1 357 0
 285 0032 7B68     		ldr	r3, [r7, #4]
 286 0034 9B68     		ldr	r3, [r3, #8]
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_Prescaler | 
 287              		.loc 1 356 0
 288 0036 1A43     		orrs	r2, r2, r3
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         ADC_CommonInitStruct->ADC_TwoSamplingDelay);
 289              		.loc 1 358 0
 290 0038 7B68     		ldr	r3, [r7, #4]
 291 003a DB68     		ldr	r3, [r3, #12]
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= (uint32_t)(ADC_CommonInitStruct->ADC_Mode | 
 292              		.loc 1 355 0
 293 003c 1343     		orrs	r3, r3, r2
 294 003e FA68     		ldr	r2, [r7, #12]
 295 0040 1343     		orrs	r3, r3, r2
 296 0042 FB60     		str	r3, [r7, #12]
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                         
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Write to ADC CCR */
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC->CCR = tmpreg1;
 297              		.loc 1 361 0
 298 0044 4FF40C53 		mov	r3, #8960
 299 0048 C4F20103 		movt	r3, 16385
 300 004c FA68     		ldr	r2, [r7, #12]
 301 004e 5A60     		str	r2, [r3, #4]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 302              		.loc 1 362 0
 303 0050 07F11407 		add	r7, r7, #20
 304 0054 BD46     		mov	sp, r7
 305 0056 80BC     		pop	{r7}
 306 0058 7047     		bx	lr
 307              		.cfi_endproc
 308              	.LFE113:
 310 005a 00BF     		.section	.text.ADC_CommonStructInit,"ax",%progbits
 311              		.align	2
 312              		.global	ADC_CommonStructInit
 313              		.thumb
 314              		.thumb_func
 316              	ADC_CommonStructInit:
 317              	.LFB114:
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Fills each ADC_CommonInitStruct member with its default value.
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_CommonInitStruct: pointer to an ADC_CommonInitTypeDef structure
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         which will be initialized.
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_CommonStructInit(ADC_CommonInitTypeDef* ADC_CommonInitStruct)
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 318              		.loc 1 371 0
 319              		.cfi_startproc
 320              		@ args = 0, pretend = 0, frame = 8
 321              		@ frame_needed = 1, uses_anonymous_args = 0
 322              		@ link register save eliminated.
 323 0000 80B4     		push	{r7}
 324              	.LCFI11:
 325              		.cfi_def_cfa_offset 4
 326              		.cfi_offset 7, -4
 327 0002 83B0     		sub	sp, sp, #12
 328              	.LCFI12:
 329              		.cfi_def_cfa_offset 16
 330 0004 00AF     		add	r7, sp, #0
 331              	.LCFI13:
 332              		.cfi_def_cfa_register 7
 333 0006 7860     		str	r0, [r7, #4]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_Mode member */
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Mode = ADC_Mode_Independent;
 334              		.loc 1 373 0
 335 0008 7B68     		ldr	r3, [r7, #4]
 336 000a 4FF00002 		mov	r2, #0
 337 000e 1A60     		str	r2, [r3, #0]
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* initialize the ADC_Prescaler member */
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_Prescaler = ADC_Prescaler_Div2;
 338              		.loc 1 376 0
 339 0010 7B68     		ldr	r3, [r7, #4]
 340 0012 4FF00002 		mov	r2, #0
 341 0016 5A60     		str	r2, [r3, #4]
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_DMAAccessMode member */
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
 342              		.loc 1 379 0
 343 0018 7B68     		ldr	r3, [r7, #4]
 344 001a 4FF00002 		mov	r2, #0
 345 001e 9A60     		str	r2, [r3, #8]
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Initialize the ADC_TwoSamplingDelay member */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADC_CommonInitStruct->ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
 346              		.loc 1 382 0
 347 0020 7B68     		ldr	r3, [r7, #4]
 348 0022 4FF00002 		mov	r2, #0
 349 0026 DA60     		str	r2, [r3, #12]
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 350              		.loc 1 383 0
 351 0028 07F10C07 		add	r7, r7, #12
 352 002c BD46     		mov	sp, r7
 353 002e 80BC     		pop	{r7}
 354 0030 7047     		bx	lr
 355              		.cfi_endproc
 356              	.LFE114:
 358 0032 00BF     		.section	.text.ADC_Cmd,"ax",%progbits
 359              		.align	2
 360              		.global	ADC_Cmd
 361              		.thumb
 362              		.thumb_func
 364              	ADC_Cmd:
 365              	.LFB115:
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC peripheral.
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the ADCx peripheral. 
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 366              		.loc 1 393 0
 367              		.cfi_startproc
 368              		@ args = 0, pretend = 0, frame = 8
 369              		@ frame_needed = 1, uses_anonymous_args = 0
 370              		@ link register save eliminated.
 371 0000 80B4     		push	{r7}
 372              	.LCFI14:
 373              		.cfi_def_cfa_offset 4
 374              		.cfi_offset 7, -4
 375 0002 83B0     		sub	sp, sp, #12
 376              	.LCFI15:
 377              		.cfi_def_cfa_offset 16
 378 0004 00AF     		add	r7, sp, #0
 379              	.LCFI16:
 380              		.cfi_def_cfa_register 7
 381 0006 7860     		str	r0, [r7, #4]
 382 0008 0B46     		mov	r3, r1
 383 000a FB70     		strb	r3, [r7, #3]
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 384              		.loc 1 397 0
 385 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 386 000e 002B     		cmp	r3, #0
 387 0010 06D0     		beq	.L7
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the ADON bit to wake up the ADC from power down mode */
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 388              		.loc 1 400 0
 389 0012 7B68     		ldr	r3, [r7, #4]
 390 0014 9B68     		ldr	r3, [r3, #8]
 391 0016 43F00102 		orr	r2, r3, #1
 392 001a 7B68     		ldr	r3, [r7, #4]
 393 001c 9A60     		str	r2, [r3, #8]
 394 001e 05E0     		b	.L6
 395              	.L7:
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC peripheral */
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 396              		.loc 1 405 0
 397 0020 7B68     		ldr	r3, [r7, #4]
 398 0022 9B68     		ldr	r3, [r3, #8]
 399 0024 23F00102 		bic	r2, r3, #1
 400 0028 7B68     		ldr	r3, [r7, #4]
 401 002a 9A60     		str	r2, [r3, #8]
 402              	.L6:
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 403              		.loc 1 407 0
 404 002c 07F10C07 		add	r7, r7, #12
 405 0030 BD46     		mov	sp, r7
 406 0032 80BC     		pop	{r7}
 407 0034 7047     		bx	lr
 408              		.cfi_endproc
 409              	.LFE115:
 411 0036 00BF     		.section	.text.ADC_AnalogWatchdogCmd,"ax",%progbits
 412              		.align	2
 413              		.global	ADC_AnalogWatchdogCmd
 414              		.thumb
 415              		.thumb_func
 417              	ADC_AnalogWatchdogCmd:
 418              	.LFB116:
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group2 Analog Watchdog configuration functions
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief    Analog Watchdog configuration functions 
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                     Analog Watchdog configuration functions
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the Analog Watchdog
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (AWD) feature in the ADC.
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration Analog Watchdog is done following these steps :
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. the ADC guarded channel(s) is (are) selected using the 
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_AnalogWatchdogSingleChannelConfig() function.
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. The Analog watchdog lower and higher threshold are configured using the  
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      ADC_AnalogWatchdogThresholdsConfig() function.
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. The Analog watchdog is enabled and configured to enable the check, on one
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       or more channels, using the  ADC_AnalogWatchdogCmd() function.
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the analog watchdog on single/all regular or 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         injected channels
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_AnalogWatchdog: the ADC analog watchdog configuration.
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         This parameter can be one of the following values:
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected chan
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and inj
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None	  
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 419              		.loc 1 451 0
 420              		.cfi_startproc
 421              		@ args = 0, pretend = 0, frame = 16
 422              		@ frame_needed = 1, uses_anonymous_args = 0
 423              		@ link register save eliminated.
 424 0000 80B4     		push	{r7}
 425              	.LCFI17:
 426              		.cfi_def_cfa_offset 4
 427              		.cfi_offset 7, -4
 428 0002 85B0     		sub	sp, sp, #20
 429              	.LCFI18:
 430              		.cfi_def_cfa_offset 24
 431 0004 00AF     		add	r7, sp, #0
 432              	.LCFI19:
 433              		.cfi_def_cfa_register 7
 434 0006 7860     		str	r0, [r7, #4]
 435 0008 3960     		str	r1, [r7, #0]
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 436              		.loc 1 452 0
 437 000a 4FF00003 		mov	r3, #0
 438 000e FB60     		str	r3, [r7, #12]
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 439              		.loc 1 458 0
 440 0010 7B68     		ldr	r3, [r7, #4]
 441 0012 5B68     		ldr	r3, [r3, #4]
 442 0014 FB60     		str	r3, [r7, #12]
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear AWDEN, JAWDEN and AWDSGL bits */
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDMode_RESET;
 443              		.loc 1 461 0
 444 0016 FB68     		ldr	r3, [r7, #12]
 445 0018 23F44003 		bic	r3, r3, #12582912
 446 001c 23F40073 		bic	r3, r3, #512
 447 0020 FB60     		str	r3, [r7, #12]
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the analog watchdog enable mode */
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_AnalogWatchdog;
 448              		.loc 1 464 0
 449 0022 FA68     		ldr	r2, [r7, #12]
 450 0024 3B68     		ldr	r3, [r7, #0]
 451 0026 1343     		orrs	r3, r3, r2
 452 0028 FB60     		str	r3, [r7, #12]
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 453              		.loc 1 467 0
 454 002a 7B68     		ldr	r3, [r7, #4]
 455 002c FA68     		ldr	r2, [r7, #12]
 456 002e 5A60     		str	r2, [r3, #4]
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 457              		.loc 1 468 0
 458 0030 07F11407 		add	r7, r7, #20
 459 0034 BD46     		mov	sp, r7
 460 0036 80BC     		pop	{r7}
 461 0038 7047     		bx	lr
 462              		.cfi_endproc
 463              	.LFE116:
 465 003a 00BF     		.section	.text.ADC_AnalogWatchdogThresholdsConfig,"ax",%progbits
 466              		.align	2
 467              		.global	ADC_AnalogWatchdogThresholdsConfig
 468              		.thumb
 469              		.thumb_func
 471              	ADC_AnalogWatchdogThresholdsConfig:
 472              	.LFB117:
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the high and low thresholds of the analog watchdog.
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  HighThreshold: the ADC analog watchdog High threshold value.
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  LowThreshold:  the ADC analog watchdog Low threshold value.
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12-bit value.
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                         uint16_t LowThreshold)
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 473              		.loc 1 481 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 8
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 0000 80B4     		push	{r7}
 479              	.LCFI20:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 7, -4
 482 0002 83B0     		sub	sp, sp, #12
 483              	.LCFI21:
 484              		.cfi_def_cfa_offset 16
 485 0004 00AF     		add	r7, sp, #0
 486              	.LCFI22:
 487              		.cfi_def_cfa_register 7
 488 0006 7860     		str	r0, [r7, #4]
 489 0008 1346     		mov	r3, r2
 490 000a 0A46     		mov	r2, r1	@ movhi
 491 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 492 000e 3B80     		strh	r3, [r7, #0]	@ movhi
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(HighThreshold));
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_THRESHOLD(LowThreshold));
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx high threshold */
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->HTR = HighThreshold;
 493              		.loc 1 488 0
 494 0010 7A88     		ldrh	r2, [r7, #2]
 495 0012 7B68     		ldr	r3, [r7, #4]
 496 0014 5A62     		str	r2, [r3, #36]
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the ADCx low threshold */
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->LTR = LowThreshold;
 497              		.loc 1 491 0
 498 0016 3A88     		ldrh	r2, [r7, #0]
 499 0018 7B68     		ldr	r3, [r7, #4]
 500 001a 9A62     		str	r2, [r3, #40]
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 501              		.loc 1 492 0
 502 001c 07F10C07 		add	r7, r7, #12
 503 0020 BD46     		mov	sp, r7
 504 0022 80BC     		pop	{r7}
 505 0024 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE117:
 509 0026 00BF     		.section	.text.ADC_AnalogWatchdogSingleChannelConfig,"ax",%progbits
 510              		.align	2
 511              		.global	ADC_AnalogWatchdogSingleChannelConfig
 512              		.thumb
 513              		.thumb_func
 515              	ADC_AnalogWatchdogSingleChannelConfig:
 516              	.LFB118:
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the analog watchdog guarded single channel
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure for the analog watchdog. 
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 517              		.loc 1 521 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 16
 520              		@ frame_needed = 1, uses_anonymous_args = 0
 521              		@ link register save eliminated.
 522 0000 80B4     		push	{r7}
 523              	.LCFI23:
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 7, -4
 526 0002 85B0     		sub	sp, sp, #20
 527              	.LCFI24:
 528              		.cfi_def_cfa_offset 24
 529 0004 00AF     		add	r7, sp, #0
 530              	.LCFI25:
 531              		.cfi_def_cfa_register 7
 532 0006 7860     		str	r0, [r7, #4]
 533 0008 0B46     		mov	r3, r1
 534 000a FB70     		strb	r3, [r7, #3]
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 535              		.loc 1 522 0
 536 000c 4FF00003 		mov	r3, #0
 537 0010 FB60     		str	r3, [r7, #12]
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR1;
 538              		.loc 1 528 0
 539 0012 7B68     		ldr	r3, [r7, #4]
 540 0014 5B68     		ldr	r3, [r3, #4]
 541 0016 FB60     		str	r3, [r7, #12]
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the Analog watchdog channel select bits */
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR1_AWDCH_RESET;
 542              		.loc 1 531 0
 543 0018 FB68     		ldr	r3, [r7, #12]
 544 001a 23F01F03 		bic	r3, r3, #31
 545 001e FB60     		str	r3, [r7, #12]
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the Analog watchdog channel */
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_Channel;
 546              		.loc 1 534 0
 547 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 548 0022 FA68     		ldr	r2, [r7, #12]
 549 0024 1343     		orrs	r3, r3, r2
 550 0026 FB60     		str	r3, [r7, #12]
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg;
 551              		.loc 1 537 0
 552 0028 7B68     		ldr	r3, [r7, #4]
 553 002a FA68     		ldr	r2, [r7, #12]
 554 002c 5A60     		str	r2, [r3, #4]
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 555              		.loc 1 538 0
 556 002e 07F11407 		add	r7, r7, #20
 557 0032 BD46     		mov	sp, r7
 558 0034 80BC     		pop	{r7}
 559 0036 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE118:
 563              		.section	.text.ADC_TempSensorVrefintCmd,"ax",%progbits
 564              		.align	2
 565              		.global	ADC_TempSensorVrefintCmd
 566              		.thumb
 567              		.thumb_func
 569              	ADC_TempSensorVrefintCmd:
 570              	.LFB119:
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group3 Temperature Sensor, Vrefint (Voltage Reference internal) 
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *            and VBAT (Voltage BATtery) management functions
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Temperature Sensor, Vrefint and VBAT management functions 
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                Temperature Sensor, Vrefint and VBAT management functions
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to enable/ disable the internal 
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   connections between the ADC and the Temperature Sensor, the Vrefint and the
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Vbat sources.
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the Temperature sensor and Vrefint channels 
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   voltages is done following these steps :
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of Temperature sensor and Vrefint sources 
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       with the ADC channels using ADC_TempSensorVrefintCmd() function. 
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_TempSensor and/or ADC_Channel_Vrefint using 
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_RegularChannelConfig() or  ADC_InjectedChannelConfig() functions 
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage values, using ADC_GetConversionValue() or  
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   A typical configuration to get the VBAT channel voltage is done following 
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   these steps :
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    1. Enable the internal connection of VBAT source with the ADC channel using 
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_VBATCmd() function. 
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Select the ADC_Channel_Vbat using ADC_RegularChannelConfig() or  
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_InjectedChannelConfig() functions 
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    3. Get the voltage value, using ADC_GetConversionValue() or  
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       ADC_GetInjectedConversionValue().
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the temperature sensor and Vrefint channels.
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the temperature sensor and Vrefint channels.
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_TempSensorVrefintCmd(FunctionalState NewState)                
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 571              		.loc 1 586 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 8
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576 0000 80B4     		push	{r7}
 577              	.LCFI26:
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 7, -4
 580 0002 83B0     		sub	sp, sp, #12
 581              	.LCFI27:
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              	.LCFI28:
 585              		.cfi_def_cfa_register 7
 586 0006 0346     		mov	r3, r0
 587 0008 FB71     		strb	r3, [r7, #7]
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 588              		.loc 1 589 0
 589 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 590 000c 002B     		cmp	r3, #0
 591 000e 0CD0     		beq	.L13
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the temperature sensor and Vrefint channel*/
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_TSVREFE;
 592              		.loc 1 592 0
 593 0010 4FF40C53 		mov	r3, #8960
 594 0014 C4F20103 		movt	r3, 16385
 595 0018 4FF40C52 		mov	r2, #8960
 596 001c C4F20102 		movt	r2, 16385
 597 0020 5268     		ldr	r2, [r2, #4]
 598 0022 42F40002 		orr	r2, r2, #8388608
 599 0026 5A60     		str	r2, [r3, #4]
 600 0028 0BE0     		b	.L12
 601              	.L13:
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the temperature sensor and Vrefint channel*/
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_TSVREFE);
 602              		.loc 1 597 0
 603 002a 4FF40C53 		mov	r3, #8960
 604 002e C4F20103 		movt	r3, 16385
 605 0032 4FF40C52 		mov	r2, #8960
 606 0036 C4F20102 		movt	r2, 16385
 607 003a 5268     		ldr	r2, [r2, #4]
 608 003c 22F40002 		bic	r2, r2, #8388608
 609 0040 5A60     		str	r2, [r3, #4]
 610              	.L12:
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 611              		.loc 1 599 0
 612 0042 07F10C07 		add	r7, r7, #12
 613 0046 BD46     		mov	sp, r7
 614 0048 80BC     		pop	{r7}
 615 004a 7047     		bx	lr
 616              		.cfi_endproc
 617              	.LFE119:
 619              		.section	.text.ADC_VBATCmd,"ax",%progbits
 620              		.align	2
 621              		.global	ADC_VBATCmd
 622              		.thumb
 623              		.thumb_func
 625              	ADC_VBATCmd:
 626              	.LFB120:
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the VBAT (Voltage Battery) channel.
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the VBAT channel.
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_VBATCmd(FunctionalState NewState)                             
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 627              		.loc 1 608 0
 628              		.cfi_startproc
 629              		@ args = 0, pretend = 0, frame = 8
 630              		@ frame_needed = 1, uses_anonymous_args = 0
 631              		@ link register save eliminated.
 632 0000 80B4     		push	{r7}
 633              	.LCFI29:
 634              		.cfi_def_cfa_offset 4
 635              		.cfi_offset 7, -4
 636 0002 83B0     		sub	sp, sp, #12
 637              	.LCFI30:
 638              		.cfi_def_cfa_offset 16
 639 0004 00AF     		add	r7, sp, #0
 640              	.LCFI31:
 641              		.cfi_def_cfa_register 7
 642 0006 0346     		mov	r3, r0
 643 0008 FB71     		strb	r3, [r7, #7]
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 644              		.loc 1 611 0
 645 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 646 000c 002B     		cmp	r3, #0
 647 000e 0CD0     		beq	.L16
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the VBAT channel*/
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_VBATE;
 648              		.loc 1 614 0
 649 0010 4FF40C53 		mov	r3, #8960
 650 0014 C4F20103 		movt	r3, 16385
 651 0018 4FF40C52 		mov	r2, #8960
 652 001c C4F20102 		movt	r2, 16385
 653 0020 5268     		ldr	r2, [r2, #4]
 654 0022 42F48002 		orr	r2, r2, #4194304
 655 0026 5A60     		str	r2, [r3, #4]
 656 0028 0BE0     		b	.L15
 657              	.L16:
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the VBAT channel*/
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_VBATE);
 658              		.loc 1 619 0
 659 002a 4FF40C53 		mov	r3, #8960
 660 002e C4F20103 		movt	r3, 16385
 661 0032 4FF40C52 		mov	r2, #8960
 662 0036 C4F20102 		movt	r2, 16385
 663 003a 5268     		ldr	r2, [r2, #4]
 664 003c 22F48002 		bic	r2, r2, #4194304
 665 0040 5A60     		str	r2, [r3, #4]
 666              	.L15:
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 667              		.loc 1 621 0
 668 0042 07F10C07 		add	r7, r7, #12
 669 0046 BD46     		mov	sp, r7
 670 0048 80BC     		pop	{r7}
 671 004a 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE120:
 675              		.section	.text.ADC_RegularChannelConfig,"ax",%progbits
 676              		.align	2
 677              		.global	ADC_RegularChannelConfig
 678              		.thumb
 679              		.thumb_func
 681              	ADC_RegularChannelConfig:
 682              	.LFB121:
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group4 Regular Channels Configuration functions
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels Configuration functions 
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                   Regular Channels Configuration functions
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to manage the ADC's regular channels,
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration and management functions for regular channels: This subsection 
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      provides functions allowing to configure the ADC regular channels :    
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the rank in the regular group sequencer for each channel
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Configure the sampling time for each channel
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the conversion Trigger for regular channels
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - select the desired EOC event behavior configuration
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the continuous Mode  (*)
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - Activate the Discontinuous Mode 
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      Please Note that the following features for regular channels are configurated
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      using the ADC_Init() function : 
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - scan mode activation 
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - continuous mode activation (**) 
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger source  
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - External trigger edge 
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****           - number of conversion in the regular channels group sequencer.
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note (*) and (**) are performing the same configuration
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   2. Get the conversion data: This subsection provides an important function in 
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      the ADC peripheral since it returns the converted data of the current 
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      regular channel. When the Conversion value is read, the EOC Flag is 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      automatically cleared.
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      @note For multi ADC mode, the last ADC1, ADC2 and ADC3 regular conversions 
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            results data (in the selected multi mode) can be returned in the same 
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****            time using ADC_GetMultiModeConversionValue() function. 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****        
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC regular channel its corresponding
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the regular group sequencer.
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 16.
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sam
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 683              		.loc 1 709 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 16
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              	.LCFI32:
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 85B0     		sub	sp, sp, #20
 693              	.LCFI33:
 694              		.cfi_def_cfa_offset 24
 695 0004 00AF     		add	r7, sp, #0
 696              	.LCFI34:
 697              		.cfi_def_cfa_register 7
 698 0006 7860     		str	r0, [r7, #4]
 699 0008 F970     		strb	r1, [r7, #3]
 700 000a BA70     		strb	r2, [r7, #2]
 701 000c 7B70     		strb	r3, [r7, #1]
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0;
 702              		.loc 1 710 0
 703 000e 4FF00003 		mov	r3, #0
 704 0012 FB60     		str	r3, [r7, #12]
 705 0014 4FF00003 		mov	r3, #0
 706 0018 BB60     		str	r3, [r7, #8]
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(Rank));
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 707              		.loc 1 718 0
 708 001a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 709 001c 092B     		cmp	r3, #9
 710 001e 27D9     		bls	.L19
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 711              		.loc 1 721 0
 712 0020 7B68     		ldr	r3, [r7, #4]
 713 0022 DB68     		ldr	r3, [r3, #12]
 714 0024 FB60     		str	r3, [r7, #12]
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 715              		.loc 1 724 0
 716 0026 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 717 0028 1346     		mov	r3, r2
 718 002a 4FEA4303 		lsl	r3, r3, #1
 719 002e 9B18     		adds	r3, r3, r2
 720 0030 A3F11E03 		sub	r3, r3, #30
 721 0034 4FF00702 		mov	r2, #7
 722 0038 02FA03F3 		lsl	r3, r2, r3
 723 003c BB60     		str	r3, [r7, #8]
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 724              		.loc 1 727 0
 725 003e BB68     		ldr	r3, [r7, #8]
 726 0040 6FEA0303 		mvn	r3, r3
 727 0044 FA68     		ldr	r2, [r7, #12]
 728 0046 1340     		ands	r3, r3, r2
 729 0048 FB60     		str	r3, [r7, #12]
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 730              		.loc 1 730 0
 731 004a 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 732 004c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 733 004e 1346     		mov	r3, r2
 734 0050 4FEA4303 		lsl	r3, r3, #1
 735 0054 9B18     		adds	r3, r3, r2
 736 0056 A3F11E03 		sub	r3, r3, #30
 737 005a 01FA03F3 		lsl	r3, r1, r3
 738 005e BB60     		str	r3, [r7, #8]
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 739              		.loc 1 733 0
 740 0060 FA68     		ldr	r2, [r7, #12]
 741 0062 BB68     		ldr	r3, [r7, #8]
 742 0064 1343     		orrs	r3, r3, r2
 743 0066 FB60     		str	r3, [r7, #12]
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 744              		.loc 1 736 0
 745 0068 7B68     		ldr	r3, [r7, #4]
 746 006a FA68     		ldr	r2, [r7, #12]
 747 006c DA60     		str	r2, [r3, #12]
 748 006e 22E0     		b	.L20
 749              	.L19:
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 750              		.loc 1 741 0
 751 0070 7B68     		ldr	r3, [r7, #4]
 752 0072 1B69     		ldr	r3, [r3, #16]
 753 0074 FB60     		str	r3, [r7, #12]
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 754              		.loc 1 744 0
 755 0076 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 756 0078 1346     		mov	r3, r2
 757 007a 4FEA4303 		lsl	r3, r3, #1
 758 007e 9B18     		adds	r3, r3, r2
 759 0080 4FF00702 		mov	r2, #7
 760 0084 02FA03F3 		lsl	r3, r2, r3
 761 0088 BB60     		str	r3, [r7, #8]
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 762              		.loc 1 747 0
 763 008a BB68     		ldr	r3, [r7, #8]
 764 008c 6FEA0303 		mvn	r3, r3
 765 0090 FA68     		ldr	r2, [r7, #12]
 766 0092 1340     		ands	r3, r3, r2
 767 0094 FB60     		str	r3, [r7, #12]
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 768              		.loc 1 750 0
 769 0096 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 770 0098 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 771 009a 1346     		mov	r3, r2
 772 009c 4FEA4303 		lsl	r3, r3, #1
 773 00a0 9B18     		adds	r3, r3, r2
 774 00a2 01FA03F3 		lsl	r3, r1, r3
 775 00a6 BB60     		str	r3, [r7, #8]
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 776              		.loc 1 753 0
 777 00a8 FA68     		ldr	r2, [r7, #12]
 778 00aa BB68     		ldr	r3, [r7, #8]
 779 00ac 1343     		orrs	r3, r3, r2
 780 00ae FB60     		str	r3, [r7, #12]
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 781              		.loc 1 756 0
 782 00b0 7B68     		ldr	r3, [r7, #4]
 783 00b2 FA68     		ldr	r2, [r7, #12]
 784 00b4 1A61     		str	r2, [r3, #16]
 785              	.L20:
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 1 to 6 */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (Rank < 7)
 786              		.loc 1 759 0
 787 00b6 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 788 00b8 062B     		cmp	r3, #6
 789 00ba 27D8     		bhi	.L21
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR3;
 790              		.loc 1 762 0
 791 00bc 7B68     		ldr	r3, [r7, #4]
 792 00be 5B6B     		ldr	r3, [r3, #52]
 793 00c0 FB60     		str	r3, [r7, #12]
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 794              		.loc 1 765 0
 795 00c2 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 796 00c4 03F1FF32 		add	r2, r3, #-1
 797 00c8 1346     		mov	r3, r2
 798 00ca 4FEA8303 		lsl	r3, r3, #2
 799 00ce 9B18     		adds	r3, r3, r2
 800 00d0 4FF01F02 		mov	r2, #31
 801 00d4 02FA03F3 		lsl	r3, r2, r3
 802 00d8 BB60     		str	r3, [r7, #8]
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 803              		.loc 1 768 0
 804 00da BB68     		ldr	r3, [r7, #8]
 805 00dc 6FEA0303 		mvn	r3, r3
 806 00e0 FA68     		ldr	r2, [r7, #12]
 807 00e2 1340     		ands	r3, r3, r2
 808 00e4 FB60     		str	r3, [r7, #12]
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 809              		.loc 1 771 0
 810 00e6 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 811 00e8 BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 812 00ea 03F1FF32 		add	r2, r3, #-1
 813 00ee 1346     		mov	r3, r2
 814 00f0 4FEA8303 		lsl	r3, r3, #2
 815 00f4 9B18     		adds	r3, r3, r2
 816 00f6 01FA03F3 		lsl	r3, r1, r3
 817 00fa BB60     		str	r3, [r7, #8]
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 818              		.loc 1 774 0
 819 00fc FA68     		ldr	r2, [r7, #12]
 820 00fe BB68     		ldr	r3, [r7, #8]
 821 0100 1343     		orrs	r3, r3, r2
 822 0102 FB60     		str	r3, [r7, #12]
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR3 = tmpreg1;
 823              		.loc 1 777 0
 824 0104 7B68     		ldr	r3, [r7, #4]
 825 0106 FA68     		ldr	r2, [r7, #12]
 826 0108 5A63     		str	r2, [r3, #52]
 827 010a 51E0     		b	.L18
 828              	.L21:
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 7 to 12 */
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else if (Rank < 13)
 829              		.loc 1 780 0
 830 010c BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 831 010e 0C2B     		cmp	r3, #12
 832 0110 27D8     		bhi	.L23
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR2;
 833              		.loc 1 783 0
 834 0112 7B68     		ldr	r3, [r7, #4]
 835 0114 1B6B     		ldr	r3, [r3, #48]
 836 0116 FB60     		str	r3, [r7, #12]
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 837              		.loc 1 786 0
 838 0118 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 839 011a 1346     		mov	r3, r2
 840 011c 4FEA8303 		lsl	r3, r3, #2
 841 0120 9B18     		adds	r3, r3, r2
 842 0122 A3F12303 		sub	r3, r3, #35
 843 0126 4FF01F02 		mov	r2, #31
 844 012a 02FA03F3 		lsl	r3, r2, r3
 845 012e BB60     		str	r3, [r7, #8]
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 846              		.loc 1 789 0
 847 0130 BB68     		ldr	r3, [r7, #8]
 848 0132 6FEA0303 		mvn	r3, r3
 849 0136 FA68     		ldr	r2, [r7, #12]
 850 0138 1340     		ands	r3, r3, r2
 851 013a FB60     		str	r3, [r7, #12]
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 852              		.loc 1 792 0
 853 013c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 854 013e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 855 0140 1346     		mov	r3, r2
 856 0142 4FEA8303 		lsl	r3, r3, #2
 857 0146 9B18     		adds	r3, r3, r2
 858 0148 A3F12303 		sub	r3, r3, #35
 859 014c 01FA03F3 		lsl	r3, r1, r3
 860 0150 BB60     		str	r3, [r7, #8]
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 861              		.loc 1 795 0
 862 0152 FA68     		ldr	r2, [r7, #12]
 863 0154 BB68     		ldr	r3, [r7, #8]
 864 0156 1343     		orrs	r3, r3, r2
 865 0158 FB60     		str	r3, [r7, #12]
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR2 = tmpreg1;
 866              		.loc 1 798 0
 867 015a 7B68     		ldr	r3, [r7, #4]
 868 015c FA68     		ldr	r2, [r7, #12]
 869 015e 1A63     		str	r2, [r3, #48]
 870 0160 26E0     		b	.L18
 871              	.L23:
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* For Rank 13 to 16 */
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SQR1;
 872              		.loc 1 804 0
 873 0162 7B68     		ldr	r3, [r7, #4]
 874 0164 DB6A     		ldr	r3, [r3, #44]
 875 0166 FB60     		str	r3, [r7, #12]
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 876              		.loc 1 807 0
 877 0168 BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 878 016a 1346     		mov	r3, r2
 879 016c 4FEA8303 		lsl	r3, r3, #2
 880 0170 9B18     		adds	r3, r3, r2
 881 0172 A3F14103 		sub	r3, r3, #65
 882 0176 4FF01F02 		mov	r2, #31
 883 017a 02FA03F3 		lsl	r3, r2, r3
 884 017e BB60     		str	r3, [r7, #8]
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old SQx bits for the selected rank */
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 885              		.loc 1 810 0
 886 0180 BB68     		ldr	r3, [r7, #8]
 887 0182 6FEA0303 		mvn	r3, r3
 888 0186 FA68     		ldr	r2, [r7, #12]
 889 0188 1340     		ands	r3, r3, r2
 890 018a FB60     		str	r3, [r7, #12]
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 891              		.loc 1 813 0
 892 018c F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 893 018e BA78     		ldrb	r2, [r7, #2]	@ zero_extendqisi2
 894 0190 1346     		mov	r3, r2
 895 0192 4FEA8303 		lsl	r3, r3, #2
 896 0196 9B18     		adds	r3, r3, r2
 897 0198 A3F14103 		sub	r3, r3, #65
 898 019c 01FA03F3 		lsl	r3, r1, r3
 899 01a0 BB60     		str	r3, [r7, #8]
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the SQx bits for the selected rank */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 900              		.loc 1 816 0
 901 01a2 FA68     		ldr	r2, [r7, #12]
 902 01a4 BB68     		ldr	r3, [r7, #8]
 903 01a6 1343     		orrs	r3, r3, r2
 904 01a8 FB60     		str	r3, [r7, #12]
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SQR1 = tmpreg1;
 905              		.loc 1 819 0
 906 01aa 7B68     		ldr	r3, [r7, #4]
 907 01ac FA68     		ldr	r2, [r7, #12]
 908 01ae DA62     		str	r2, [r3, #44]
 909              	.L18:
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 910              		.loc 1 821 0
 911 01b0 07F11407 		add	r7, r7, #20
 912 01b4 BD46     		mov	sp, r7
 913 01b6 80BC     		pop	{r7}
 914 01b8 7047     		bx	lr
 915              		.cfi_endproc
 916              	.LFE121:
 918 01ba 00BF     		.section	.text.ADC_SoftwareStartConv,"ax",%progbits
 919              		.align	2
 920              		.global	ADC_SoftwareStartConv
 921              		.thumb
 922              		.thumb_func
 924              	ADC_SoftwareStartConv:
 925              	.LFB122:
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the regular channels.
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 926              		.loc 1 829 0
 927              		.cfi_startproc
 928              		@ args = 0, pretend = 0, frame = 8
 929              		@ frame_needed = 1, uses_anonymous_args = 0
 930              		@ link register save eliminated.
 931 0000 80B4     		push	{r7}
 932              	.LCFI35:
 933              		.cfi_def_cfa_offset 4
 934              		.cfi_offset 7, -4
 935 0002 83B0     		sub	sp, sp, #12
 936              	.LCFI36:
 937              		.cfi_def_cfa_offset 16
 938 0004 00AF     		add	r7, sp, #0
 939              	.LCFI37:
 940              		.cfi_def_cfa_register 7
 941 0006 7860     		str	r0, [r7, #4]
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for regular group */
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 942              		.loc 1 834 0
 943 0008 7B68     		ldr	r3, [r7, #4]
 944 000a 9B68     		ldr	r3, [r3, #8]
 945 000c 43F08042 		orr	r2, r3, #1073741824
 946 0010 7B68     		ldr	r3, [r7, #4]
 947 0012 9A60     		str	r2, [r3, #8]
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 948              		.loc 1 835 0
 949 0014 07F10C07 		add	r7, r7, #12
 950 0018 BD46     		mov	sp, r7
 951 001a 80BC     		pop	{r7}
 952 001c 7047     		bx	lr
 953              		.cfi_endproc
 954              	.LFE122:
 956 001e 00BF     		.section	.text.ADC_GetSoftwareStartConvStatus,"ax",%progbits
 957              		.align	2
 958              		.global	ADC_GetSoftwareStartConvStatus
 959              		.thumb
 960              		.thumb_func
 962              	ADC_GetSoftwareStartConvStatus:
 963              	.LFB123:
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start regular conversion Status.
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start conversion (SET or RESET).
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 964              		.loc 1 843 0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 16
 967              		@ frame_needed = 1, uses_anonymous_args = 0
 968              		@ link register save eliminated.
 969 0000 80B4     		push	{r7}
 970              	.LCFI38:
 971              		.cfi_def_cfa_offset 4
 972              		.cfi_offset 7, -4
 973 0002 85B0     		sub	sp, sp, #20
 974              	.LCFI39:
 975              		.cfi_def_cfa_offset 24
 976 0004 00AF     		add	r7, sp, #0
 977              	.LCFI40:
 978              		.cfi_def_cfa_register 7
 979 0006 7860     		str	r0, [r7, #4]
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 980              		.loc 1 844 0
 981 0008 4FF00003 		mov	r3, #0
 982 000c FB73     		strb	r3, [r7, #15]
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of SWSTART bit */
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 983              		.loc 1 849 0
 984 000e 7B68     		ldr	r3, [r7, #4]
 985 0010 9B68     		ldr	r3, [r3, #8]
 986 0012 03F48003 		and	r3, r3, #4194304
 987 0016 002B     		cmp	r3, #0
 988 0018 03D0     		beq	.L26
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is set */
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 989              		.loc 1 852 0
 990 001a 4FF00103 		mov	r3, #1
 991 001e FB73     		strb	r3, [r7, #15]
 992 0020 02E0     		b	.L27
 993              	.L26:
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* SWSTART bit is reset */
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 994              		.loc 1 857 0
 995 0022 4FF00003 		mov	r3, #0
 996 0026 FB73     		strb	r3, [r7, #15]
 997              	.L27:
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the SWSTART bit status */
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 998              		.loc 1 861 0
 999 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1000              		.loc 1 862 0
 1001 002a 1846     		mov	r0, r3
 1002 002c 07F11407 		add	r7, r7, #20
 1003 0030 BD46     		mov	sp, r7
 1004 0032 80BC     		pop	{r7}
 1005 0034 7047     		bx	lr
 1006              		.cfi_endproc
 1007              	.LFE123:
 1009 0036 00BF     		.section	.text.ADC_EOCOnEachRegularChannelCmd,"ax",%progbits
 1010              		.align	2
 1011              		.global	ADC_EOCOnEachRegularChannelCmd
 1012              		.thumb
 1013              		.thumb_func
 1015              	ADC_EOCOnEachRegularChannelCmd:
 1016              	.LFB124:
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the EOC on each regular channel conversion
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC EOC flag rising
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_EOCOnEachRegularChannelCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1017              		.loc 1 873 0
 1018              		.cfi_startproc
 1019              		@ args = 0, pretend = 0, frame = 8
 1020              		@ frame_needed = 1, uses_anonymous_args = 0
 1021              		@ link register save eliminated.
 1022 0000 80B4     		push	{r7}
 1023              	.LCFI41:
 1024              		.cfi_def_cfa_offset 4
 1025              		.cfi_offset 7, -4
 1026 0002 83B0     		sub	sp, sp, #12
 1027              	.LCFI42:
 1028              		.cfi_def_cfa_offset 16
 1029 0004 00AF     		add	r7, sp, #0
 1030              	.LCFI43:
 1031              		.cfi_def_cfa_register 7
 1032 0006 7860     		str	r0, [r7, #4]
 1033 0008 0B46     		mov	r3, r1
 1034 000a FB70     		strb	r3, [r7, #3]
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1035              		.loc 1 878 0
 1036 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1037 000e 002B     		cmp	r3, #0
 1038 0010 06D0     		beq	.L29
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC EOC rising on each regular channel conversion */
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_EOCS;
 1039              		.loc 1 881 0
 1040 0012 7B68     		ldr	r3, [r7, #4]
 1041 0014 9B68     		ldr	r3, [r3, #8]
 1042 0016 43F48062 		orr	r2, r3, #1024
 1043 001a 7B68     		ldr	r3, [r7, #4]
 1044 001c 9A60     		str	r2, [r3, #8]
 1045 001e 05E0     		b	.L28
 1046              	.L29:
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC EOC rising on each regular channel conversion */
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_EOCS);
 1047              		.loc 1 886 0
 1048 0020 7B68     		ldr	r3, [r7, #4]
 1049 0022 9B68     		ldr	r3, [r3, #8]
 1050 0024 23F48062 		bic	r2, r3, #1024
 1051 0028 7B68     		ldr	r3, [r7, #4]
 1052 002a 9A60     		str	r2, [r3, #8]
 1053              	.L28:
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1054              		.loc 1 888 0
 1055 002c 07F10C07 		add	r7, r7, #12
 1056 0030 BD46     		mov	sp, r7
 1057 0032 80BC     		pop	{r7}
 1058 0034 7047     		bx	lr
 1059              		.cfi_endproc
 1060              	.LFE124:
 1062 0036 00BF     		.section	.text.ADC_ContinuousModeCmd,"ax",%progbits
 1063              		.align	2
 1064              		.global	ADC_ContinuousModeCmd
 1065              		.thumb
 1066              		.thumb_func
 1068              	ADC_ContinuousModeCmd:
 1069              	.LFB125:
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC continuous conversion mode 
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC continuous conversion mode
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ContinuousModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1070              		.loc 1 898 0
 1071              		.cfi_startproc
 1072              		@ args = 0, pretend = 0, frame = 8
 1073              		@ frame_needed = 1, uses_anonymous_args = 0
 1074              		@ link register save eliminated.
 1075 0000 80B4     		push	{r7}
 1076              	.LCFI44:
 1077              		.cfi_def_cfa_offset 4
 1078              		.cfi_offset 7, -4
 1079 0002 83B0     		sub	sp, sp, #12
 1080              	.LCFI45:
 1081              		.cfi_def_cfa_offset 16
 1082 0004 00AF     		add	r7, sp, #0
 1083              	.LCFI46:
 1084              		.cfi_def_cfa_register 7
 1085 0006 7860     		str	r0, [r7, #4]
 1086 0008 0B46     		mov	r3, r1
 1087 000a FB70     		strb	r3, [r7, #3]
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1088              		.loc 1 903 0
 1089 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1090 000e 002B     		cmp	r3, #0
 1091 0010 06D0     		beq	.L32
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC continuous conversion mode */
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_CONT;
 1092              		.loc 1 906 0
 1093 0012 7B68     		ldr	r3, [r7, #4]
 1094 0014 9B68     		ldr	r3, [r3, #8]
 1095 0016 43F00202 		orr	r2, r3, #2
 1096 001a 7B68     		ldr	r3, [r7, #4]
 1097 001c 9A60     		str	r2, [r3, #8]
 1098 001e 05E0     		b	.L31
 1099              	.L32:
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC continuous conversion mode */
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_CONT);
 1100              		.loc 1 911 0
 1101 0020 7B68     		ldr	r3, [r7, #4]
 1102 0022 9B68     		ldr	r3, [r3, #8]
 1103 0024 23F00202 		bic	r2, r3, #2
 1104 0028 7B68     		ldr	r3, [r7, #4]
 1105 002a 9A60     		str	r2, [r3, #8]
 1106              	.L31:
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1107              		.loc 1 913 0
 1108 002c 07F10C07 		add	r7, r7, #12
 1109 0030 BD46     		mov	sp, r7
 1110 0032 80BC     		pop	{r7}
 1111 0034 7047     		bx	lr
 1112              		.cfi_endproc
 1113              	.LFE125:
 1115 0036 00BF     		.section	.text.ADC_DiscModeChannelCountConfig,"ax",%progbits
 1116              		.align	2
 1117              		.global	ADC_DiscModeChannelCountConfig
 1118              		.thumb
 1119              		.thumb_func
 1121              	ADC_DiscModeChannelCountConfig:
 1122              	.LFB126:
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the discontinuous mode for the selected ADC regular group 
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel.
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Number: specifies the discontinuous mode regular channel count value.
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This number must be between 1 and 8.
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1123              		.loc 1 924 0
 1124              		.cfi_startproc
 1125              		@ args = 0, pretend = 0, frame = 16
 1126              		@ frame_needed = 1, uses_anonymous_args = 0
 1127              		@ link register save eliminated.
 1128 0000 80B4     		push	{r7}
 1129              	.LCFI47:
 1130              		.cfi_def_cfa_offset 4
 1131              		.cfi_offset 7, -4
 1132 0002 85B0     		sub	sp, sp, #20
 1133              	.LCFI48:
 1134              		.cfi_def_cfa_offset 24
 1135 0004 00AF     		add	r7, sp, #0
 1136              	.LCFI49:
 1137              		.cfi_def_cfa_register 7
 1138 0006 7860     		str	r0, [r7, #4]
 1139 0008 0B46     		mov	r3, r1
 1140 000a FB70     		strb	r3, [r7, #3]
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1141              		.loc 1 925 0
 1142 000c 4FF00003 		mov	r3, #0
 1143 0010 FB60     		str	r3, [r7, #12]
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1144              		.loc 1 926 0
 1145 0012 4FF00003 		mov	r3, #0
 1146 0016 BB60     		str	r3, [r7, #8]
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->CR1;
 1147              		.loc 1 933 0
 1148 0018 7B68     		ldr	r3, [r7, #4]
 1149 001a 5B68     		ldr	r3, [r3, #4]
 1150 001c FB60     		str	r3, [r7, #12]
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old discontinuous mode channel count */
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= CR1_DISCNUM_RESET;
 1151              		.loc 1 936 0
 1152 001e FB68     		ldr	r3, [r7, #12]
 1153 0020 23F46043 		bic	r3, r3, #57344
 1154 0024 FB60     		str	r3, [r7, #12]
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the discontinuous mode channel count */
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Number - 1;
 1155              		.loc 1 939 0
 1156 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1157 0028 03F1FF33 		add	r3, r3, #-1
 1158 002c BB60     		str	r3, [r7, #8]
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 13;
 1159              		.loc 1 940 0
 1160 002e BB68     		ldr	r3, [r7, #8]
 1161 0030 4FEA4333 		lsl	r3, r3, #13
 1162 0034 FA68     		ldr	r2, [r7, #12]
 1163 0036 1343     		orrs	r3, r3, r2
 1164 0038 FB60     		str	r3, [r7, #12]
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR1 = tmpreg1;
 1165              		.loc 1 943 0
 1166 003a 7B68     		ldr	r3, [r7, #4]
 1167 003c FA68     		ldr	r2, [r7, #12]
 1168 003e 5A60     		str	r2, [r3, #4]
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1169              		.loc 1 944 0
 1170 0040 07F11407 		add	r7, r7, #20
 1171 0044 BD46     		mov	sp, r7
 1172 0046 80BC     		pop	{r7}
 1173 0048 7047     		bx	lr
 1174              		.cfi_endproc
 1175              	.LFE126:
 1177 004a 00BF     		.section	.text.ADC_DiscModeCmd,"ax",%progbits
 1178              		.align	2
 1179              		.global	ADC_DiscModeCmd
 1180              		.thumb
 1181              		.thumb_func
 1183              	ADC_DiscModeCmd:
 1184              	.LFB127:
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode on regular group channel 
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         for the specified ADC
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         regular group channel.
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1185              		.loc 1 956 0
 1186              		.cfi_startproc
 1187              		@ args = 0, pretend = 0, frame = 8
 1188              		@ frame_needed = 1, uses_anonymous_args = 0
 1189              		@ link register save eliminated.
 1190 0000 80B4     		push	{r7}
 1191              	.LCFI50:
 1192              		.cfi_def_cfa_offset 4
 1193              		.cfi_offset 7, -4
 1194 0002 83B0     		sub	sp, sp, #12
 1195              	.LCFI51:
 1196              		.cfi_def_cfa_offset 16
 1197 0004 00AF     		add	r7, sp, #0
 1198              	.LCFI52:
 1199              		.cfi_def_cfa_register 7
 1200 0006 7860     		str	r0, [r7, #4]
 1201 0008 0B46     		mov	r3, r1
 1202 000a FB70     		strb	r3, [r7, #3]
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1203              		.loc 1 961 0
 1204 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1205 000e 002B     		cmp	r3, #0
 1206 0010 06D0     		beq	.L36
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC regular discontinuous mode */
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 1207              		.loc 1 964 0
 1208 0012 7B68     		ldr	r3, [r7, #4]
 1209 0014 5B68     		ldr	r3, [r3, #4]
 1210 0016 43F40062 		orr	r2, r3, #2048
 1211 001a 7B68     		ldr	r3, [r7, #4]
 1212 001c 5A60     		str	r2, [r3, #4]
 1213 001e 05E0     		b	.L35
 1214              	.L36:
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC regular discontinuous mode */
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_DISCEN);
 1215              		.loc 1 969 0
 1216 0020 7B68     		ldr	r3, [r7, #4]
 1217 0022 5B68     		ldr	r3, [r3, #4]
 1218 0024 23F40062 		bic	r2, r3, #2048
 1219 0028 7B68     		ldr	r3, [r7, #4]
 1220 002a 5A60     		str	r2, [r3, #4]
 1221              	.L35:
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1222              		.loc 1 971 0
 1223 002c 07F10C07 		add	r7, r7, #12
 1224 0030 BD46     		mov	sp, r7
 1225 0032 80BC     		pop	{r7}
 1226 0034 7047     		bx	lr
 1227              		.cfi_endproc
 1228              	.LFE127:
 1230 0036 00BF     		.section	.text.ADC_GetConversionValue,"ax",%progbits
 1231              		.align	2
 1232              		.global	ADC_GetConversionValue
 1233              		.thumb
 1234              		.thumb_func
 1236              	ADC_GetConversionValue:
 1237              	.LFB128:
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADCx conversion result data for regular channel.
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1238              		.loc 1 979 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 8
 1241              		@ frame_needed = 1, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 1243 0000 80B4     		push	{r7}
 1244              	.LCFI53:
 1245              		.cfi_def_cfa_offset 4
 1246              		.cfi_offset 7, -4
 1247 0002 83B0     		sub	sp, sp, #12
 1248              	.LCFI54:
 1249              		.cfi_def_cfa_offset 16
 1250 0004 00AF     		add	r7, sp, #0
 1251              	.LCFI55:
 1252              		.cfi_def_cfa_register 7
 1253 0006 7860     		str	r0, [r7, #4]
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the selected ADC conversion value */
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) ADCx->DR;
 1254              		.loc 1 984 0
 1255 0008 7B68     		ldr	r3, [r7, #4]
 1256 000a DB6C     		ldr	r3, [r3, #76]
 1257 000c 9BB2     		uxth	r3, r3
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1258              		.loc 1 985 0
 1259 000e 1846     		mov	r0, r3
 1260 0010 07F10C07 		add	r7, r7, #12
 1261 0014 BD46     		mov	sp, r7
 1262 0016 80BC     		pop	{r7}
 1263 0018 7047     		bx	lr
 1264              		.cfi_endproc
 1265              	.LFE128:
 1267 001a 00BF     		.section	.text.ADC_GetMultiModeConversionValue,"ax",%progbits
 1268              		.align	2
 1269              		.global	ADC_GetMultiModeConversionValue
 1270              		.thumb
 1271              		.thumb_func
 1273              	ADC_GetMultiModeConversionValue:
 1274              	.LFB129:
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the last ADC1, ADC2 and ADC3 regular conversions results 
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         data in the selected multi mode.
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  None  
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In dual mode, the value returned by this function is as following
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain the regular data of ADC1.
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain the regular data of ADC2.
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   In triple mode, the value returned by this function is as following
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[15:0] : these bits contain alternatively the regular data of ADC1, ADC3 and ADC2
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *           Data[31:16]: these bits contain alternatively the regular data of ADC2, ADC1 and ADC3
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint32_t ADC_GetMultiModeConversionValue(void)
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1275              		.loc 1 1000 0
 1276              		.cfi_startproc
 1277              		@ args = 0, pretend = 0, frame = 0
 1278              		@ frame_needed = 1, uses_anonymous_args = 0
 1279              		@ link register save eliminated.
 1280 0000 80B4     		push	{r7}
 1281              	.LCFI56:
 1282              		.cfi_def_cfa_offset 4
 1283              		.cfi_offset 7, -4
 1284 0002 00AF     		add	r7, sp, #0
 1285              	.LCFI57:
 1286              		.cfi_def_cfa_register 7
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the multi mode conversion value */
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (*(__IO uint32_t *) CDR_ADDRESS);
 1287              		.loc 1 1002 0
 1288 0004 42F20833 		movw	r3, #8968
 1289 0008 C4F20103 		movt	r3, 16385
 1290 000c 1B68     		ldr	r3, [r3, #0]
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1291              		.loc 1 1003 0
 1292 000e 1846     		mov	r0, r3
 1293 0010 BD46     		mov	sp, r7
 1294 0012 80BC     		pop	{r7}
 1295 0014 7047     		bx	lr
 1296              		.cfi_endproc
 1297              	.LFE129:
 1299 0016 00BF     		.section	.text.ADC_DMACmd,"ax",%progbits
 1300              		.align	2
 1301              		.global	ADC_DMACmd
 1302              		.thumb
 1303              		.thumb_func
 1305              	ADC_DMACmd:
 1306              	.LFB130:
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group5 Regular Channels DMA Configuration functions
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Regular Channels DMA Configuration functions 
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Regular Channels DMA Configuration functions
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the DMA for ADC regular 
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   channels.
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Since converted regular channel values are stored into a unique data register, 
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is useful to use DMA for conversion of more than one regular channel. This 
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   avoids the loss of the data already stored in the ADC Data register. 
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   When the DMA mode is enabled (using the ADC_DMACmd() function), after each
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   conversion of a regular channel, a DMA request is generated.
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for Independent ADC mode" 
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   configuration (using the ADC_DMARequestAfterLastTransferCmd() function), 
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Depending on the "DMA disable selection for multi ADC mode" configuration 
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   (using the void ADC_MultiModeDMARequestAfterLastTransferCmd() function), 
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   at the end of the last DMA transfer, two possibilities are allowed:
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - No new DMA request is issued to the DMA controller (feature DISABLED) 
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   - Requests can continue to be generated (feature ENABLED).
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC DMA request.
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA transfer.
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1307              		.loc 1 1049 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 8
 1310              		@ frame_needed = 1, uses_anonymous_args = 0
 1311              		@ link register save eliminated.
 1312 0000 80B4     		push	{r7}
 1313              	.LCFI58:
 1314              		.cfi_def_cfa_offset 4
 1315              		.cfi_offset 7, -4
 1316 0002 83B0     		sub	sp, sp, #12
 1317              	.LCFI59:
 1318              		.cfi_def_cfa_offset 16
 1319 0004 00AF     		add	r7, sp, #0
 1320              	.LCFI60:
 1321              		.cfi_def_cfa_register 7
 1322 0006 7860     		str	r0, [r7, #4]
 1323 0008 0B46     		mov	r3, r1
 1324 000a FB70     		strb	r3, [r7, #3]
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1325              		.loc 1 1053 0
 1326 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1327 000e 002B     		cmp	r3, #0
 1328 0010 06D0     		beq	.L41
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request */
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 1329              		.loc 1 1056 0
 1330 0012 7B68     		ldr	r3, [r7, #4]
 1331 0014 9B68     		ldr	r3, [r3, #8]
 1332 0016 43F48072 		orr	r2, r3, #256
 1333 001a 7B68     		ldr	r3, [r7, #4]
 1334 001c 9A60     		str	r2, [r3, #8]
 1335 001e 05E0     		b	.L40
 1336              	.L41:
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request */
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 1337              		.loc 1 1061 0
 1338 0020 7B68     		ldr	r3, [r7, #4]
 1339 0022 9B68     		ldr	r3, [r3, #8]
 1340 0024 23F48072 		bic	r2, r3, #256
 1341 0028 7B68     		ldr	r3, [r7, #4]
 1342 002a 9A60     		str	r2, [r3, #8]
 1343              	.L40:
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1344              		.loc 1 1063 0
 1345 002c 07F10C07 		add	r7, r7, #12
 1346 0030 BD46     		mov	sp, r7
 1347 0032 80BC     		pop	{r7}
 1348 0034 7047     		bx	lr
 1349              		.cfi_endproc
 1350              	.LFE130:
 1352 0036 00BF     		.section	.text.ADC_DMARequestAfterLastTransferCmd,"ax",%progbits
 1353              		.align	2
 1354              		.global	ADC_DMARequestAfterLastTransferCmd
 1355              		.thumb
 1356              		.thumb_func
 1358              	ADC_DMARequestAfterLastTransferCmd:
 1359              	.LFB131:
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer (Single-ADC mode)  
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1360              		.loc 1 1073 0
 1361              		.cfi_startproc
 1362              		@ args = 0, pretend = 0, frame = 8
 1363              		@ frame_needed = 1, uses_anonymous_args = 0
 1364              		@ link register save eliminated.
 1365 0000 80B4     		push	{r7}
 1366              	.LCFI61:
 1367              		.cfi_def_cfa_offset 4
 1368              		.cfi_offset 7, -4
 1369 0002 83B0     		sub	sp, sp, #12
 1370              	.LCFI62:
 1371              		.cfi_def_cfa_offset 16
 1372 0004 00AF     		add	r7, sp, #0
 1373              	.LCFI63:
 1374              		.cfi_def_cfa_register 7
 1375 0006 7860     		str	r0, [r7, #4]
 1376 0008 0B46     		mov	r3, r1
 1377 000a FB70     		strb	r3, [r7, #3]
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1378              		.loc 1 1077 0
 1379 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1380 000e 002B     		cmp	r3, #0
 1381 0010 06D0     		beq	.L44
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 |= (uint32_t)ADC_CR2_DDS;
 1382              		.loc 1 1080 0
 1383 0012 7B68     		ldr	r3, [r7, #4]
 1384 0014 9B68     		ldr	r3, [r3, #8]
 1385 0016 43F40072 		orr	r2, r3, #512
 1386 001a 7B68     		ldr	r3, [r7, #4]
 1387 001c 9A60     		str	r2, [r3, #8]
 1388 001e 05E0     		b	.L43
 1389              	.L44:
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR2 &= (uint32_t)(~ADC_CR2_DDS);
 1390              		.loc 1 1085 0
 1391 0020 7B68     		ldr	r3, [r7, #4]
 1392 0022 9B68     		ldr	r3, [r3, #8]
 1393 0024 23F40072 		bic	r2, r3, #512
 1394 0028 7B68     		ldr	r3, [r7, #4]
 1395 002a 9A60     		str	r2, [r3, #8]
 1396              	.L43:
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1397              		.loc 1 1087 0
 1398 002c 07F10C07 		add	r7, r7, #12
 1399 0030 BD46     		mov	sp, r7
 1400 0032 80BC     		pop	{r7}
 1401 0034 7047     		bx	lr
 1402              		.cfi_endproc
 1403              	.LFE131:
 1405 0036 00BF     		.section	.text.ADC_MultiModeDMARequestAfterLastTransferCmd,"ax",%progbits
 1406              		.align	2
 1407              		.global	ADC_MultiModeDMARequestAfterLastTransferCmd
 1408              		.thumb
 1409              		.thumb_func
 1411              	ADC_MultiModeDMARequestAfterLastTransferCmd:
 1412              	.LFB132:
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the ADC DMA request after last transfer in multi ADC mode       
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC DMA request after last transfer.
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @note   if Enabled, DMA requests are issued as long as data are converted and 
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         DMA mode for multi ADC mode (selected using ADC_CommonInit() function 
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         by ADC_CommonInitStruct.ADC_DMAAccessMode structure member) is 
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          ADC_DMAAccessMode_1, ADC_DMAAccessMode_2 or ADC_DMAAccessMode_3.     
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_MultiModeDMARequestAfterLastTransferCmd(FunctionalState NewState)
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1413              		.loc 1 1100 0
 1414              		.cfi_startproc
 1415              		@ args = 0, pretend = 0, frame = 8
 1416              		@ frame_needed = 1, uses_anonymous_args = 0
 1417              		@ link register save eliminated.
 1418 0000 80B4     		push	{r7}
 1419              	.LCFI64:
 1420              		.cfi_def_cfa_offset 4
 1421              		.cfi_offset 7, -4
 1422 0002 83B0     		sub	sp, sp, #12
 1423              	.LCFI65:
 1424              		.cfi_def_cfa_offset 16
 1425 0004 00AF     		add	r7, sp, #0
 1426              	.LCFI66:
 1427              		.cfi_def_cfa_register 7
 1428 0006 0346     		mov	r3, r0
 1429 0008 FB71     		strb	r3, [r7, #7]
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1430              		.loc 1 1103 0
 1431 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1432 000c 002B     		cmp	r3, #0
 1433 000e 0CD0     		beq	.L47
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC DMA request after last transfer */
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR |= (uint32_t)ADC_CCR_DDS;
 1434              		.loc 1 1106 0
 1435 0010 4FF40C53 		mov	r3, #8960
 1436 0014 C4F20103 		movt	r3, 16385
 1437 0018 4FF40C52 		mov	r2, #8960
 1438 001c C4F20102 		movt	r2, 16385
 1439 0020 5268     		ldr	r2, [r2, #4]
 1440 0022 42F40052 		orr	r2, r2, #8192
 1441 0026 5A60     		str	r2, [r3, #4]
 1442 0028 0BE0     		b	.L46
 1443              	.L47:
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC DMA request after last transfer */
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADC->CCR &= (uint32_t)(~ADC_CCR_DDS);
 1444              		.loc 1 1111 0
 1445 002a 4FF40C53 		mov	r3, #8960
 1446 002e C4F20103 		movt	r3, 16385
 1447 0032 4FF40C52 		mov	r2, #8960
 1448 0036 C4F20102 		movt	r2, 16385
 1449 003a 5268     		ldr	r2, [r2, #4]
 1450 003c 22F40052 		bic	r2, r2, #8192
 1451 0040 5A60     		str	r2, [r3, #4]
 1452              	.L46:
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1453              		.loc 1 1113 0
 1454 0042 07F10C07 		add	r7, r7, #12
 1455 0046 BD46     		mov	sp, r7
 1456 0048 80BC     		pop	{r7}
 1457 004a 7047     		bx	lr
 1458              		.cfi_endproc
 1459              	.LFE132:
 1461              		.section	.text.ADC_InjectedChannelConfig,"ax",%progbits
 1462              		.align	2
 1463              		.global	ADC_InjectedChannelConfig
 1464              		.thumb
 1465              		.thumb_func
 1467              	ADC_InjectedChannelConfig:
 1468              	.LFB133:
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group6 Injected channels Configuration functions
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Injected channels Configuration functions 
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      Injected channels Configuration functions
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provide functions allowing to configure the ADC Injected channels,
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   it is composed of 2 sub sections : 
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   1. Configuration functions for Injected channels: This subsection provides 
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      functions allowing to configure the ADC injected channels :    
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the rank in the injected group sequencer for each channel
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Configure the sampling time for each channel    
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Auto injected Mode  
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - Activate the Discontinuous Mode 
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - scan mode activation  
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External/software trigger source   
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - External trigger edge 
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     - injected channels sequencer.
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****    2. Get the Specified Injected channel conversion data: This subsection 
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       provides an important function in the ADC peripheral since it returns the 
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       converted data of the specific injected channel.
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures for the selected ADC injected channel its corresponding
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         rank in the sequencer and its sample time.
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_Channel: the ADC channel to configure. 
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_0: ADC Channel0 selected
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_1: ADC Channel1 selected
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_2: ADC Channel2 selected
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_3: ADC Channel3 selected
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_4: ADC Channel4 selected
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_5: ADC Channel5 selected
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_6: ADC Channel6 selected
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_7: ADC Channel7 selected
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_8: ADC Channel8 selected
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_9: ADC Channel9 selected
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_10: ADC Channel10 selected
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_11: ADC Channel11 selected
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_12: ADC Channel12 selected
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_13: ADC Channel13 selected
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_14: ADC Channel14 selected
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_15: ADC Channel15 selected
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_16: ADC Channel16 selected
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_17: ADC Channel17 selected
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_Channel_18: ADC Channel18 selected                       
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Rank: The rank in the injected group sequencer. 
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be between 1 to 4.
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_SampleTime: The sample time value to be set for the selected channel. 
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_3Cycles: Sample time equal to 3 cycles
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_15Cycles: Sample time equal to 15 cycles
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_28Cycles: Sample time equal to 28 cycles
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_56Cycles: Sample time equal to 56 cycles	
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_84Cycles: Sample time equal to 84 cycles	
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_112Cycles: Sample time equal to 112 cycles	
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_Sa
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1469              		.loc 1 1187 0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 24
 1472              		@ frame_needed = 1, uses_anonymous_args = 0
 1473              		@ link register save eliminated.
 1474 0000 80B4     		push	{r7}
 1475              	.LCFI67:
 1476              		.cfi_def_cfa_offset 4
 1477              		.cfi_offset 7, -4
 1478 0002 87B0     		sub	sp, sp, #28
 1479              	.LCFI68:
 1480              		.cfi_def_cfa_offset 32
 1481 0004 00AF     		add	r7, sp, #0
 1482              	.LCFI69:
 1483              		.cfi_def_cfa_register 7
 1484 0006 7860     		str	r0, [r7, #4]
 1485 0008 F970     		strb	r1, [r7, #3]
 1486 000a BA70     		strb	r2, [r7, #2]
 1487 000c 7B70     		strb	r3, [r7, #1]
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
 1488              		.loc 1 1188 0
 1489 000e 4FF00003 		mov	r3, #0
 1490 0012 7B61     		str	r3, [r7, #20]
 1491 0014 4FF00003 		mov	r3, #0
 1492 0018 3B61     		str	r3, [r7, #16]
 1493 001a 4FF00003 		mov	r3, #0
 1494 001e FB60     		str	r3, [r7, #12]
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CHANNEL(ADC_Channel));
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_RANK(Rank));
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (ADC_Channel > ADC_Channel_9)
 1495              		.loc 1 1195 0
 1496 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1497 0022 092B     		cmp	r3, #9
 1498 0024 27D9     		bls	.L50
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR1;
 1499              		.loc 1 1198 0
 1500 0026 7B68     		ldr	r3, [r7, #4]
 1501 0028 DB68     		ldr	r3, [r3, #12]
 1502 002a 7B61     		str	r3, [r7, #20]
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR1_SMP_SET << (3*(ADC_Channel - 10));
 1503              		.loc 1 1200 0
 1504 002c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1505 002e 1346     		mov	r3, r2
 1506 0030 4FEA4303 		lsl	r3, r3, #1
 1507 0034 9B18     		adds	r3, r3, r2
 1508 0036 A3F11E03 		sub	r3, r3, #30
 1509 003a 4FF00702 		mov	r2, #7
 1510 003e 02FA03F3 		lsl	r3, r2, r3
 1511 0042 3B61     		str	r3, [r7, #16]
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1512              		.loc 1 1202 0
 1513 0044 3B69     		ldr	r3, [r7, #16]
 1514 0046 6FEA0303 		mvn	r3, r3
 1515 004a 7A69     		ldr	r2, [r7, #20]
 1516 004c 1340     		ands	r3, r3, r2
 1517 004e 7B61     		str	r3, [r7, #20]
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
 1518              		.loc 1 1204 0
 1519 0050 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1520 0052 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1521 0054 1346     		mov	r3, r2
 1522 0056 4FEA4303 		lsl	r3, r3, #1
 1523 005a 9B18     		adds	r3, r3, r2
 1524 005c A3F11E03 		sub	r3, r3, #30
 1525 0060 01FA03F3 		lsl	r3, r1, r3
 1526 0064 3B61     		str	r3, [r7, #16]
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1527              		.loc 1 1206 0
 1528 0066 7A69     		ldr	r2, [r7, #20]
 1529 0068 3B69     		ldr	r3, [r7, #16]
 1530 006a 1343     		orrs	r3, r3, r2
 1531 006c 7B61     		str	r3, [r7, #20]
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR1 = tmpreg1;
 1532              		.loc 1 1208 0
 1533 006e 7B68     		ldr	r3, [r7, #4]
 1534 0070 7A69     		ldr	r2, [r7, #20]
 1535 0072 DA60     		str	r2, [r3, #12]
 1536 0074 22E0     		b	.L51
 1537              	.L50:
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else /* ADC_Channel include in ADC_Channel_[0..9] */
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Get the old register value */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 = ADCx->SMPR2;
 1538              		.loc 1 1213 0
 1539 0076 7B68     		ldr	r3, [r7, #4]
 1540 0078 1B69     		ldr	r3, [r3, #16]
 1541 007a 7B61     		str	r3, [r7, #20]
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to clear */
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 1542              		.loc 1 1215 0
 1543 007c FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1544 007e 1346     		mov	r3, r2
 1545 0080 4FEA4303 		lsl	r3, r3, #1
 1546 0084 9B18     		adds	r3, r3, r2
 1547 0086 4FF00702 		mov	r2, #7
 1548 008a 02FA03F3 		lsl	r3, r2, r3
 1549 008e 3B61     		str	r3, [r7, #16]
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Clear the old sample time */
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 &= ~tmpreg2;
 1550              		.loc 1 1217 0
 1551 0090 3B69     		ldr	r3, [r7, #16]
 1552 0092 6FEA0303 		mvn	r3, r3
 1553 0096 7A69     		ldr	r2, [r7, #20]
 1554 0098 1340     		ands	r3, r3, r2
 1555 009a 7B61     		str	r3, [r7, #20]
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Calculate the mask to set */
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 1556              		.loc 1 1219 0
 1557 009c 7978     		ldrb	r1, [r7, #1]	@ zero_extendqisi2
 1558 009e FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1559 00a0 1346     		mov	r3, r2
 1560 00a2 4FEA4303 		lsl	r3, r3, #1
 1561 00a6 9B18     		adds	r3, r3, r2
 1562 00a8 01FA03F3 		lsl	r3, r1, r3
 1563 00ac 3B61     		str	r3, [r7, #16]
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Set the new sample time */
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     tmpreg1 |= tmpreg2;
 1564              		.loc 1 1221 0
 1565 00ae 7A69     		ldr	r2, [r7, #20]
 1566 00b0 3B69     		ldr	r3, [r7, #16]
 1567 00b2 1343     		orrs	r3, r3, r2
 1568 00b4 7B61     		str	r3, [r7, #20]
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Store the new register value */
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->SMPR2 = tmpreg1;
 1569              		.loc 1 1223 0
 1570 00b6 7B68     		ldr	r3, [r7, #4]
 1571 00b8 7A69     		ldr	r2, [r7, #20]
 1572 00ba 1A61     		str	r2, [r3, #16]
 1573              	.L51:
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Rank configuration */
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1574              		.loc 1 1227 0
 1575 00bc 7B68     		ldr	r3, [r7, #4]
 1576 00be 9B6B     		ldr	r3, [r3, #56]
 1577 00c0 7B61     		str	r3, [r7, #20]
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get JL value: Number = JL+1 */
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg3 =  (tmpreg1 & JSQR_JL_SET)>> 20;
 1578              		.loc 1 1229 0
 1579 00c2 7B69     		ldr	r3, [r7, #20]
 1580 00c4 03F44013 		and	r3, r3, #3145728
 1581 00c8 4FEA1353 		lsr	r3, r3, #20
 1582 00cc FB60     		str	r3, [r7, #12]
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = JSQR_JSQ_SET << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1583              		.loc 1 1231 0
 1584 00ce FB68     		ldr	r3, [r7, #12]
 1585 00d0 DBB2     		uxtb	r3, r3
 1586 00d2 6FEA0303 		mvn	r3, r3
 1587 00d6 DAB2     		uxtb	r2, r3
 1588 00d8 BB78     		ldrb	r3, [r7, #2]
 1589 00da D318     		adds	r3, r2, r3
 1590 00dc DBB2     		uxtb	r3, r3
 1591 00de 03F10303 		add	r3, r3, #3
 1592 00e2 DBB2     		uxtb	r3, r3
 1593 00e4 1A46     		mov	r2, r3
 1594 00e6 1346     		mov	r3, r2
 1595 00e8 4FEA8303 		lsl	r3, r3, #2
 1596 00ec 9B18     		adds	r3, r3, r2
 1597 00ee 4FF01F02 		mov	r2, #31
 1598 00f2 02FA03F3 		lsl	r3, r2, r3
 1599 00f6 3B61     		str	r3, [r7, #16]
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old JSQx bits for the selected rank */
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= ~tmpreg2;
 1600              		.loc 1 1233 0
 1601 00f8 3B69     		ldr	r3, [r7, #16]
 1602 00fa 6FEA0303 		mvn	r3, r3
 1603 00fe 7A69     		ldr	r2, [r7, #20]
 1604 0100 1340     		ands	r3, r3, r2
 1605 0102 7B61     		str	r3, [r7, #20]
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
 1606              		.loc 1 1235 0
 1607 0104 F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 1608 0106 FB68     		ldr	r3, [r7, #12]
 1609 0108 DBB2     		uxtb	r3, r3
 1610 010a 6FEA0303 		mvn	r3, r3
 1611 010e DAB2     		uxtb	r2, r3
 1612 0110 BB78     		ldrb	r3, [r7, #2]
 1613 0112 D318     		adds	r3, r2, r3
 1614 0114 DBB2     		uxtb	r3, r3
 1615 0116 03F10303 		add	r3, r3, #3
 1616 011a DBB2     		uxtb	r3, r3
 1617 011c 1A46     		mov	r2, r3
 1618 011e 1346     		mov	r3, r2
 1619 0120 4FEA8303 		lsl	r3, r3, #2
 1620 0124 9B18     		adds	r3, r3, r2
 1621 0126 01FA03F3 		lsl	r3, r1, r3
 1622 012a 3B61     		str	r3, [r7, #16]
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the JSQx bits for the selected rank */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2;
 1623              		.loc 1 1237 0
 1624 012c 7A69     		ldr	r2, [r7, #20]
 1625 012e 3B69     		ldr	r3, [r7, #16]
 1626 0130 1343     		orrs	r3, r3, r2
 1627 0132 7B61     		str	r3, [r7, #20]
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1628              		.loc 1 1239 0
 1629 0134 7B68     		ldr	r3, [r7, #4]
 1630 0136 7A69     		ldr	r2, [r7, #20]
 1631 0138 9A63     		str	r2, [r3, #56]
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1632              		.loc 1 1240 0
 1633 013a 07F11C07 		add	r7, r7, #28
 1634 013e BD46     		mov	sp, r7
 1635 0140 80BC     		pop	{r7}
 1636 0142 7047     		bx	lr
 1637              		.cfi_endproc
 1638              	.LFE133:
 1640              		.section	.text.ADC_InjectedSequencerLengthConfig,"ax",%progbits
 1641              		.align	2
 1642              		.global	ADC_InjectedSequencerLengthConfig
 1643              		.thumb
 1644              		.thumb_func
 1646              	ADC_InjectedSequencerLengthConfig:
 1647              	.LFB134:
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the sequencer length for injected channels
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Length: The sequencer length. 
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a number between 1 to 4.
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1648              		.loc 1 1250 0
 1649              		.cfi_startproc
 1650              		@ args = 0, pretend = 0, frame = 16
 1651              		@ frame_needed = 1, uses_anonymous_args = 0
 1652              		@ link register save eliminated.
 1653 0000 80B4     		push	{r7}
 1654              	.LCFI70:
 1655              		.cfi_def_cfa_offset 4
 1656              		.cfi_offset 7, -4
 1657 0002 85B0     		sub	sp, sp, #20
 1658              	.LCFI71:
 1659              		.cfi_def_cfa_offset 24
 1660 0004 00AF     		add	r7, sp, #0
 1661              	.LCFI72:
 1662              		.cfi_def_cfa_register 7
 1663 0006 7860     		str	r0, [r7, #4]
 1664 0008 0B46     		mov	r3, r1
 1665 000a FB70     		strb	r3, [r7, #3]
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg1 = 0;
 1666              		.loc 1 1251 0
 1667 000c 4FF00003 		mov	r3, #0
 1668 0010 FB60     		str	r3, [r7, #12]
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg2 = 0;
 1669              		.loc 1 1252 0
 1670 0012 4FF00003 		mov	r3, #0
 1671 0016 BB60     		str	r3, [r7, #8]
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_LENGTH(Length));
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 = ADCx->JSQR;
 1672              		.loc 1 1258 0
 1673 0018 7B68     		ldr	r3, [r7, #4]
 1674 001a 9B6B     		ldr	r3, [r3, #56]
 1675 001c FB60     		str	r3, [r7, #12]
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old injected sequence length JL bits */
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 &= JSQR_JL_RESET;
 1676              		.loc 1 1261 0
 1677 001e FB68     		ldr	r3, [r7, #12]
 1678 0020 23F44013 		bic	r3, r3, #3145728
 1679 0024 FB60     		str	r3, [r7, #12]
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the injected sequence length JL bits */
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg2 = Length - 1; 
 1680              		.loc 1 1264 0
 1681 0026 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1682 0028 03F1FF33 		add	r3, r3, #-1
 1683 002c BB60     		str	r3, [r7, #8]
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg1 |= tmpreg2 << 20;
 1684              		.loc 1 1265 0
 1685 002e BB68     		ldr	r3, [r7, #8]
 1686 0030 4FEA0353 		lsl	r3, r3, #20
 1687 0034 FA68     		ldr	r2, [r7, #12]
 1688 0036 1343     		orrs	r3, r3, r2
 1689 0038 FB60     		str	r3, [r7, #12]
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->JSQR = tmpreg1;
 1690              		.loc 1 1268 0
 1691 003a 7B68     		ldr	r3, [r7, #4]
 1692 003c FA68     		ldr	r2, [r7, #12]
 1693 003e 9A63     		str	r2, [r3, #56]
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1694              		.loc 1 1269 0
 1695 0040 07F11407 		add	r7, r7, #20
 1696 0044 BD46     		mov	sp, r7
 1697 0046 80BC     		pop	{r7}
 1698 0048 7047     		bx	lr
 1699              		.cfi_endproc
 1700              	.LFE134:
 1702 004a 00BF     		.section	.text.ADC_SetInjectedOffset,"ax",%progbits
 1703              		.align	2
 1704              		.global	ADC_SetInjectedOffset
 1705              		.thumb
 1706              		.thumb_func
 1708              	ADC_SetInjectedOffset:
 1709              	.LFB135:
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Set the injected channels conversion value offset
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the ADC injected channel to set its offset. 
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  Offset: the offset value for the selected ADC injected channel
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter must be a 12bit value.
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1710              		.loc 1 1285 0
 1711              		.cfi_startproc
 1712              		@ args = 0, pretend = 0, frame = 16
 1713              		@ frame_needed = 1, uses_anonymous_args = 0
 1714              		@ link register save eliminated.
 1715 0000 80B4     		push	{r7}
 1716              	.LCFI73:
 1717              		.cfi_def_cfa_offset 4
 1718              		.cfi_offset 7, -4
 1719 0002 85B0     		sub	sp, sp, #20
 1720              	.LCFI74:
 1721              		.cfi_def_cfa_offset 24
 1722 0004 00AF     		add	r7, sp, #0
 1723              	.LCFI75:
 1724              		.cfi_def_cfa_register 7
 1725 0006 7860     		str	r0, [r7, #4]
 1726 0008 1346     		mov	r3, r2
 1727 000a 0A46     		mov	r2, r1
 1728 000c FA70     		strb	r2, [r7, #3]
 1729 000e 3B80     		strh	r3, [r7, #0]	@ movhi
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     __IO uint32_t tmp = 0;
 1730              		.loc 1 1286 0
 1731 0010 4FF00003 		mov	r3, #0
 1732 0014 FB60     		str	r3, [r7, #12]
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_OFFSET(Offset));
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 1733              		.loc 1 1292 0
 1734 0016 7B68     		ldr	r3, [r7, #4]
 1735 0018 FB60     		str	r3, [r7, #12]
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel;
 1736              		.loc 1 1293 0
 1737 001a FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 1738 001c FB68     		ldr	r3, [r7, #12]
 1739 001e D318     		adds	r3, r2, r3
 1740 0020 FB60     		str	r3, [r7, #12]
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the selected injected channel data offset */
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *(__IO uint32_t *) tmp = (uint32_t)Offset;
 1741              		.loc 1 1296 0
 1742 0022 FB68     		ldr	r3, [r7, #12]
 1743 0024 3A88     		ldrh	r2, [r7, #0]
 1744 0026 1A60     		str	r2, [r3, #0]
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1745              		.loc 1 1297 0
 1746 0028 07F11407 		add	r7, r7, #20
 1747 002c BD46     		mov	sp, r7
 1748 002e 80BC     		pop	{r7}
 1749 0030 7047     		bx	lr
 1750              		.cfi_endproc
 1751              	.LFE135:
 1753 0032 00BF     		.section	.text.ADC_ExternalTrigInjectedConvConfig,"ax",%progbits
 1754              		.align	2
 1755              		.global	ADC_ExternalTrigInjectedConvConfig
 1756              		.thumb
 1757              		.thumb_func
 1759              	ADC_ExternalTrigInjectedConvConfig:
 1760              	.LFB136:
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  /**
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger for injected channels conversion.
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConv: specifies the ADC trigger to start injected conversion.
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:                    
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected 
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected 
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected 
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected 
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC2: Timer3 capture compare2 selected 
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected 
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC1: Timer4 capture compare1 selected             
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC2: Timer4 capture compare2 selected 
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected             
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected 
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected             
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected                  
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC3: Timer8 capture compare3 selected             
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected 
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConv_Ext_IT15: External interrupt line 15 event selected  
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1761              		.loc 1 1323 0
 1762              		.cfi_startproc
 1763              		@ args = 0, pretend = 0, frame = 16
 1764              		@ frame_needed = 1, uses_anonymous_args = 0
 1765              		@ link register save eliminated.
 1766 0000 80B4     		push	{r7}
 1767              	.LCFI76:
 1768              		.cfi_def_cfa_offset 4
 1769              		.cfi_offset 7, -4
 1770 0002 85B0     		sub	sp, sp, #20
 1771              	.LCFI77:
 1772              		.cfi_def_cfa_offset 24
 1773 0004 00AF     		add	r7, sp, #0
 1774              	.LCFI78:
 1775              		.cfi_def_cfa_register 7
 1776 0006 7860     		str	r0, [r7, #4]
 1777 0008 3960     		str	r1, [r7, #0]
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1778              		.loc 1 1324 0
 1779 000a 4FF00003 		mov	r3, #0
 1780 000e FB60     		str	r3, [r7, #12]
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1781              		.loc 1 1330 0
 1782 0010 7B68     		ldr	r3, [r7, #4]
 1783 0012 9B68     		ldr	r3, [r3, #8]
 1784 0014 FB60     		str	r3, [r7, #12]
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external event selection for injected group */
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTSEL_RESET;
 1785              		.loc 1 1333 0
 1786 0016 FB68     		ldr	r3, [r7, #12]
 1787 0018 23F47023 		bic	r3, r3, #983040
 1788 001c FB60     		str	r3, [r7, #12]
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the external event selection for injected group */
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConv;
 1789              		.loc 1 1336 0
 1790 001e FA68     		ldr	r2, [r7, #12]
 1791 0020 3B68     		ldr	r3, [r7, #0]
 1792 0022 1343     		orrs	r3, r3, r2
 1793 0024 FB60     		str	r3, [r7, #12]
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1794              		.loc 1 1339 0
 1795 0026 7B68     		ldr	r3, [r7, #4]
 1796 0028 FA68     		ldr	r2, [r7, #12]
 1797 002a 9A60     		str	r2, [r3, #8]
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1798              		.loc 1 1340 0
 1799 002c 07F11407 		add	r7, r7, #20
 1800 0030 BD46     		mov	sp, r7
 1801 0032 80BC     		pop	{r7}
 1802 0034 7047     		bx	lr
 1803              		.cfi_endproc
 1804              	.LFE136:
 1806 0036 00BF     		.section	.text.ADC_ExternalTrigInjectedConvEdgeConfig,"ax",%progbits
 1807              		.align	2
 1808              		.global	ADC_ExternalTrigInjectedConvEdgeConfig
 1809              		.thumb
 1810              		.thumb_func
 1812              	ADC_ExternalTrigInjectedConvEdgeConfig:
 1813              	.LFB137:
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Configures the ADCx external trigger edge for injected channels conversion.
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_ExternalTrigInjecConvEdge: specifies the ADC external trigger edge
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         to start injected conversion. 
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_None: external trigger disabled for 
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                     injected conversion
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Rising: detection on rising edge
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_Falling: detection on falling edge
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_ExternalTrigInjecConvEdge_RisingFalling: detection on both rising 
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *                                                               and falling edge
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ExternalTrigInjectedConvEdgeConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConvEd
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1814              		.loc 1 1357 0
 1815              		.cfi_startproc
 1816              		@ args = 0, pretend = 0, frame = 16
 1817              		@ frame_needed = 1, uses_anonymous_args = 0
 1818              		@ link register save eliminated.
 1819 0000 80B4     		push	{r7}
 1820              	.LCFI79:
 1821              		.cfi_def_cfa_offset 4
 1822              		.cfi_offset 7, -4
 1823 0002 85B0     		sub	sp, sp, #20
 1824              	.LCFI80:
 1825              		.cfi_def_cfa_offset 24
 1826 0004 00AF     		add	r7, sp, #0
 1827              	.LCFI81:
 1828              		.cfi_def_cfa_register 7
 1829 0006 7860     		str	r0, [r7, #4]
 1830 0008 3960     		str	r1, [r7, #0]
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t tmpreg = 0;
 1831              		.loc 1 1358 0
 1832 000a 4FF00003 		mov	r3, #0
 1833 000e FB60     		str	r3, [r7, #12]
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(ADC_ExternalTrigInjecConvEdge));
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the old register value */
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg = ADCx->CR2;
 1834              		.loc 1 1363 0
 1835 0010 7B68     		ldr	r3, [r7, #4]
 1836 0012 9B68     		ldr	r3, [r3, #8]
 1837 0014 FB60     		str	r3, [r7, #12]
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the old external trigger edge for injected group */
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg &= CR2_JEXTEN_RESET;
 1838              		.loc 1 1365 0
 1839 0016 FB68     		ldr	r3, [r7, #12]
 1840 0018 23F44013 		bic	r3, r3, #3145728
 1841 001c FB60     		str	r3, [r7, #12]
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Set the new external trigger edge for injected group */
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmpreg |= ADC_ExternalTrigInjecConvEdge;
 1842              		.loc 1 1367 0
 1843 001e FA68     		ldr	r2, [r7, #12]
 1844 0020 3B68     		ldr	r3, [r7, #0]
 1845 0022 1343     		orrs	r3, r3, r2
 1846 0024 FB60     		str	r3, [r7, #12]
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Store the new register value */
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 = tmpreg;
 1847              		.loc 1 1369 0
 1848 0026 7B68     		ldr	r3, [r7, #4]
 1849 0028 FA68     		ldr	r2, [r7, #12]
 1850 002a 9A60     		str	r2, [r3, #8]
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1851              		.loc 1 1370 0
 1852 002c 07F11407 		add	r7, r7, #20
 1853 0030 BD46     		mov	sp, r7
 1854 0032 80BC     		pop	{r7}
 1855 0034 7047     		bx	lr
 1856              		.cfi_endproc
 1857              	.LFE137:
 1859 0036 00BF     		.section	.text.ADC_SoftwareStartInjectedConv,"ax",%progbits
 1860              		.align	2
 1861              		.global	ADC_SoftwareStartInjectedConv
 1862              		.thumb
 1863              		.thumb_func
 1865              	ADC_SoftwareStartInjectedConv:
 1866              	.LFB138:
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables the selected ADC software start conversion of the injected channels.
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_SoftwareStartInjectedConv(ADC_TypeDef* ADCx)
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1867              		.loc 1 1378 0
 1868              		.cfi_startproc
 1869              		@ args = 0, pretend = 0, frame = 8
 1870              		@ frame_needed = 1, uses_anonymous_args = 0
 1871              		@ link register save eliminated.
 1872 0000 80B4     		push	{r7}
 1873              	.LCFI82:
 1874              		.cfi_def_cfa_offset 4
 1875              		.cfi_offset 7, -4
 1876 0002 83B0     		sub	sp, sp, #12
 1877              	.LCFI83:
 1878              		.cfi_def_cfa_offset 16
 1879 0004 00AF     		add	r7, sp, #0
 1880              	.LCFI84:
 1881              		.cfi_def_cfa_register 7
 1882 0006 7860     		str	r0, [r7, #4]
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Enable the selected ADC conversion for injected group */
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->CR2 |= (uint32_t)ADC_CR2_JSWSTART;
 1883              		.loc 1 1382 0
 1884 0008 7B68     		ldr	r3, [r7, #4]
 1885 000a 9B68     		ldr	r3, [r3, #8]
 1886 000c 43F48002 		orr	r2, r3, #4194304
 1887 0010 7B68     		ldr	r3, [r7, #4]
 1888 0012 9A60     		str	r2, [r3, #8]
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1889              		.loc 1 1383 0
 1890 0014 07F10C07 		add	r7, r7, #12
 1891 0018 BD46     		mov	sp, r7
 1892 001a 80BC     		pop	{r7}
 1893 001c 7047     		bx	lr
 1894              		.cfi_endproc
 1895              	.LFE138:
 1897 001e 00BF     		.section	.text.ADC_GetSoftwareStartInjectedConvCmdStatus,"ax",%progbits
 1898              		.align	2
 1899              		.global	ADC_GetSoftwareStartInjectedConvCmdStatus
 1900              		.thumb
 1901              		.thumb_func
 1903              	ADC_GetSoftwareStartInjectedConvCmdStatus:
 1904              	.LFB139:
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Gets the selected ADC Software start injected conversion Status.
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC software start injected conversion (SET or RESET).
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1905              		.loc 1 1391 0
 1906              		.cfi_startproc
 1907              		@ args = 0, pretend = 0, frame = 16
 1908              		@ frame_needed = 1, uses_anonymous_args = 0
 1909              		@ link register save eliminated.
 1910 0000 80B4     		push	{r7}
 1911              	.LCFI85:
 1912              		.cfi_def_cfa_offset 4
 1913              		.cfi_offset 7, -4
 1914 0002 85B0     		sub	sp, sp, #20
 1915              	.LCFI86:
 1916              		.cfi_def_cfa_offset 24
 1917 0004 00AF     		add	r7, sp, #0
 1918              	.LCFI87:
 1919              		.cfi_def_cfa_register 7
 1920 0006 7860     		str	r0, [r7, #4]
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 1921              		.loc 1 1392 0
 1922 0008 4FF00003 		mov	r3, #0
 1923 000c FB73     		strb	r3, [r7, #15]
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of JSWSTART bit */
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->CR2 & ADC_CR2_JSWSTART) != (uint32_t)RESET)
 1924              		.loc 1 1397 0
 1925 000e 7B68     		ldr	r3, [r7, #4]
 1926 0010 9B68     		ldr	r3, [r3, #8]
 1927 0012 03F48003 		and	r3, r3, #4194304
 1928 0016 002B     		cmp	r3, #0
 1929 0018 03D0     		beq	.L58
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is set */
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 1930              		.loc 1 1400 0
 1931 001a 4FF00103 		mov	r3, #1
 1932 001e FB73     		strb	r3, [r7, #15]
 1933 0020 02E0     		b	.L59
 1934              	.L58:
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* JSWSTART bit is reset */
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 1935              		.loc 1 1405 0
 1936 0022 4FF00003 		mov	r3, #0
 1937 0026 FB73     		strb	r3, [r7, #15]
 1938              	.L59:
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the JSWSTART bit status */
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 1939              		.loc 1 1408 0
 1940 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1941              		.loc 1 1409 0
 1942 002a 1846     		mov	r0, r3
 1943 002c 07F11407 		add	r7, r7, #20
 1944 0030 BD46     		mov	sp, r7
 1945 0032 80BC     		pop	{r7}
 1946 0034 7047     		bx	lr
 1947              		.cfi_endproc
 1948              	.LFE139:
 1950 0036 00BF     		.section	.text.ADC_AutoInjectedConvCmd,"ax",%progbits
 1951              		.align	2
 1952              		.global	ADC_AutoInjectedConvCmd
 1953              		.thumb
 1954              		.thumb_func
 1956              	ADC_AutoInjectedConvCmd:
 1957              	.LFB140:
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the selected ADC automatic injected group 
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         conversion after regular one.
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC auto injected conversion
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 1958              		.loc 1 1420 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 8
 1961              		@ frame_needed = 1, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963 0000 80B4     		push	{r7}
 1964              	.LCFI88:
 1965              		.cfi_def_cfa_offset 4
 1966              		.cfi_offset 7, -4
 1967 0002 83B0     		sub	sp, sp, #12
 1968              	.LCFI89:
 1969              		.cfi_def_cfa_offset 16
 1970 0004 00AF     		add	r7, sp, #0
 1971              	.LCFI90:
 1972              		.cfi_def_cfa_register 7
 1973 0006 7860     		str	r0, [r7, #4]
 1974 0008 0B46     		mov	r3, r1
 1975 000a FB70     		strb	r3, [r7, #3]
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 1976              		.loc 1 1424 0
 1977 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1978 000e 002B     		cmp	r3, #0
 1979 0010 06D0     		beq	.L61
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC automatic injected group conversion */
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JAUTO;
 1980              		.loc 1 1427 0
 1981 0012 7B68     		ldr	r3, [r7, #4]
 1982 0014 5B68     		ldr	r3, [r3, #4]
 1983 0016 43F48062 		orr	r2, r3, #1024
 1984 001a 7B68     		ldr	r3, [r7, #4]
 1985 001c 5A60     		str	r2, [r3, #4]
 1986 001e 05E0     		b	.L60
 1987              	.L61:
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC automatic injected group conversion */
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JAUTO);
 1988              		.loc 1 1432 0
 1989 0020 7B68     		ldr	r3, [r7, #4]
 1990 0022 5B68     		ldr	r3, [r3, #4]
 1991 0024 23F48062 		bic	r2, r3, #1024
 1992 0028 7B68     		ldr	r3, [r7, #4]
 1993 002a 5A60     		str	r2, [r3, #4]
 1994              	.L60:
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 1995              		.loc 1 1434 0
 1996 002c 07F10C07 		add	r7, r7, #12
 1997 0030 BD46     		mov	sp, r7
 1998 0032 80BC     		pop	{r7}
 1999 0034 7047     		bx	lr
 2000              		.cfi_endproc
 2001              	.LFE140:
 2003 0036 00BF     		.section	.text.ADC_InjectedDiscModeCmd,"ax",%progbits
 2004              		.align	2
 2005              		.global	ADC_InjectedDiscModeCmd
 2006              		.thumb
 2007              		.thumb_func
 2009              	ADC_InjectedDiscModeCmd:
 2010              	.LFB141:
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the discontinuous mode for injected group 
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         channel for the specified ADC
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the selected ADC discontinuous mode on injected
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *         group channel.
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2011              		.loc 1 1446 0
 2012              		.cfi_startproc
 2013              		@ args = 0, pretend = 0, frame = 8
 2014              		@ frame_needed = 1, uses_anonymous_args = 0
 2015              		@ link register save eliminated.
 2016 0000 80B4     		push	{r7}
 2017              	.LCFI91:
 2018              		.cfi_def_cfa_offset 4
 2019              		.cfi_offset 7, -4
 2020 0002 83B0     		sub	sp, sp, #12
 2021              	.LCFI92:
 2022              		.cfi_def_cfa_offset 16
 2023 0004 00AF     		add	r7, sp, #0
 2024              	.LCFI93:
 2025              		.cfi_def_cfa_register 7
 2026 0006 7860     		str	r0, [r7, #4]
 2027 0008 0B46     		mov	r3, r1
 2028 000a FB70     		strb	r3, [r7, #3]
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2029              		.loc 1 1450 0
 2030 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2031 000e 002B     		cmp	r3, #0
 2032 0010 06D0     		beq	.L64
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC injected discontinuous mode */
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= (uint32_t)ADC_CR1_JDISCEN;
 2033              		.loc 1 1453 0
 2034 0012 7B68     		ldr	r3, [r7, #4]
 2035 0014 5B68     		ldr	r3, [r3, #4]
 2036 0016 43F48052 		orr	r2, r3, #4096
 2037 001a 7B68     		ldr	r3, [r7, #4]
 2038 001c 5A60     		str	r2, [r3, #4]
 2039 001e 05E0     		b	.L63
 2040              	.L64:
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC injected discontinuous mode */
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (uint32_t)(~ADC_CR1_JDISCEN);
 2041              		.loc 1 1458 0
 2042 0020 7B68     		ldr	r3, [r7, #4]
 2043 0022 5B68     		ldr	r3, [r3, #4]
 2044 0024 23F48052 		bic	r2, r3, #4096
 2045 0028 7B68     		ldr	r3, [r7, #4]
 2046 002a 5A60     		str	r2, [r3, #4]
 2047              	.L63:
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2048              		.loc 1 1460 0
 2049 002c 07F10C07 		add	r7, r7, #12
 2050 0030 BD46     		mov	sp, r7
 2051 0032 80BC     		pop	{r7}
 2052 0034 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE141:
 2056 0036 00BF     		.section	.text.ADC_GetInjectedConversionValue,"ax",%progbits
 2057              		.align	2
 2058              		.global	ADC_GetInjectedConversionValue
 2059              		.thumb
 2060              		.thumb_func
 2062              	ADC_GetInjectedConversionValue:
 2063              	.LFB142:
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Returns the ADC injected channel conversion result
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_InjectedChannel: the converted ADC injected channel.
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_1: Injected Channel1 selected
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_2: Injected Channel2 selected
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_3: Injected Channel3 selected
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_InjectedChannel_4: Injected Channel4 selected
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The Data conversion value.
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2064              		.loc 1 1474 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 16
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0000 80B4     		push	{r7}
 2070              	.LCFI94:
 2071              		.cfi_def_cfa_offset 4
 2072              		.cfi_offset 7, -4
 2073 0002 85B0     		sub	sp, sp, #20
 2074              	.LCFI95:
 2075              		.cfi_def_cfa_offset 24
 2076 0004 00AF     		add	r7, sp, #0
 2077              	.LCFI96:
 2078              		.cfi_def_cfa_register 7
 2079 0006 7860     		str	r0, [r7, #4]
 2080 0008 0B46     		mov	r3, r1
 2081 000a FB70     		strb	r3, [r7, #3]
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   __IO uint32_t tmp = 0;
 2082              		.loc 1 1475 0
 2083 000c 4FF00003 		mov	r3, #0
 2084 0010 FB60     		str	r3, [r7, #12]
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp = (uint32_t)ADCx;
 2085              		.loc 1 1481 0
 2086 0012 7B68     		ldr	r3, [r7, #4]
 2087 0014 FB60     		str	r3, [r7, #12]
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   tmp += ADC_InjectedChannel + JDR_OFFSET;
 2088              		.loc 1 1482 0
 2089 0016 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 2090 0018 FB68     		ldr	r3, [r7, #12]
 2091 001a D318     		adds	r3, r2, r3
 2092 001c 03F12803 		add	r3, r3, #40
 2093 0020 FB60     		str	r3, [r7, #12]
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Returns the selected injected channel conversion data value */
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return (uint16_t) (*(__IO uint32_t*)  tmp); 
 2094              		.loc 1 1485 0
 2095 0022 FB68     		ldr	r3, [r7, #12]
 2096 0024 1B68     		ldr	r3, [r3, #0]
 2097 0026 9BB2     		uxth	r3, r3
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2098              		.loc 1 1486 0
 2099 0028 1846     		mov	r0, r3
 2100 002a 07F11407 		add	r7, r7, #20
 2101 002e BD46     		mov	sp, r7
 2102 0030 80BC     		pop	{r7}
 2103 0032 7047     		bx	lr
 2104              		.cfi_endproc
 2105              	.LFE142:
 2107              		.section	.text.ADC_ITConfig,"ax",%progbits
 2108              		.align	2
 2109              		.global	ADC_ITConfig
 2110              		.thumb
 2111              		.thumb_func
 2113              	ADC_ITConfig:
 2114              	.LFB143:
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @}
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /** @defgroup ADC_Group7 Interrupts and flags management functions
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *  @brief   Interrupts and flags management functions
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  *
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @verbatim   
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                    Interrupts and flags management functions
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****  ===============================================================================  
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   This section provides functions allowing to configure the ADC Interrupts and 
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   to get the status and clear flags and Interrupts pending bits.
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Each ADC provides 4 Interrupts sources and 6 Flags which can be divided into 
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   3 groups:
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   I. Flags and Interrupts for ADC regular channels
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_OVR : Overrun detection when regular converted data are lost
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_EOC : Regular channel end of conversion ==> to indicate (depending 
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               on EOCS bit, managed by ADC_EOCOnEachRegularChannelCmd() ) the end of:
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> a regular CHANNEL conversion 
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                ==> sequence of regular GROUP conversions .
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      3. ADC_FLAG_STRT: Regular channel start ==> to indicate when regular CHANNEL 
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               conversion starts.
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_OVR : specifies the interrupt source for Overrun detection event.  
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_IT_EOC : specifies the interrupt source for Regular channel end of 
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                      conversion event.
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   II. Flags and Interrupts for ADC Injected channels
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   =================================================
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_JEOC : Injected channel end of conversion ==> to indicate at 
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                the end of injected GROUP conversion  
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      2. ADC_FLAG_JSTRT: Injected channel start ==> to indicate hardware when 
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                injected GROUP conversion starts.
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_JEOC : specifies the interrupt source for Injected channel end of 
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                       conversion event.     
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   III. General Flags and Interrupts for the ADC
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ================================================= 
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Flags :
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ---------- 
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_FLAG_AWD: Analog watchdog ==> to indicate if the converted voltage 
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               crosses the programmed thresholds values.
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****               
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   Interrupts :
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ------------
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      1. ADC_IT_AWD : specifies the interrupt source for Analog watchdog event. 
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   The user should identify which mode will be used in his application to manage 
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   the ADC controller events: Polling mode or Interrupt mode.
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Polling Mode it is advised to use the following functions:
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_GetFlagStatus() : to check if flags events occur. 
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       - ADC_ClearFlag()     : to clear the flags events.
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****       
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   In the Interrupt Mode it is advised to use the following functions:
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ITConfig()          : to enable or disable the interrupt source.
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_GetITStatus()       : to check if Interrupt occurs.
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****      - ADC_ClearITPendingBit() : to clear the Interrupt pending Bit 
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****                                  (corresponding Flag). 
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** @endverbatim
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @{
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */ 
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Enables or disables the specified ADC interrupts.
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt sources to be enabled or disabled. 
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt enable                       
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  NewState: new state of the specified ADC interrupts.
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be: ENABLE or DISABLE.
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2115              		.loc 1 1582 0
 2116              		.cfi_startproc
 2117              		@ args = 0, pretend = 0, frame = 16
 2118              		@ frame_needed = 1, uses_anonymous_args = 0
 2119              		@ link register save eliminated.
 2120 0000 80B4     		push	{r7}
 2121              	.LCFI97:
 2122              		.cfi_def_cfa_offset 4
 2123              		.cfi_offset 7, -4
 2124 0002 85B0     		sub	sp, sp, #20
 2125              	.LCFI98:
 2126              		.cfi_def_cfa_offset 24
 2127 0004 00AF     		add	r7, sp, #0
 2128              	.LCFI99:
 2129              		.cfi_def_cfa_register 7
 2130 0006 7860     		str	r0, [r7, #4]
 2131 0008 1346     		mov	r3, r2
 2132 000a 0A46     		mov	r2, r1	@ movhi
 2133 000c 7A80     		strh	r2, [r7, #2]	@ movhi
 2134 000e 7B70     		strb	r3, [r7, #1]
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0;
 2135              		.loc 1 1583 0
 2136 0010 4FF00003 		mov	r3, #0
 2137 0014 FB60     		str	r3, [r7, #12]
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)ADC_IT;
 2138              		.loc 1 1590 0
 2139 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2140 0018 DBB2     		uxtb	r3, r3
 2141 001a FB60     		str	r3, [r7, #12]
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint32_t)0x01 << itmask;    
 2142              		.loc 1 1591 0
 2143 001c FB68     		ldr	r3, [r7, #12]
 2144 001e 4FF00102 		mov	r2, #1
 2145 0022 02FA03F3 		lsl	r3, r2, r3
 2146 0026 FB60     		str	r3, [r7, #12]
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (NewState != DISABLE)
 2147              		.loc 1 1593 0
 2148 0028 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2149 002a 002B     		cmp	r3, #0
 2150 002c 06D0     		beq	.L68
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Enable the selected ADC interrupts */
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 |= itmask;
 2151              		.loc 1 1596 0
 2152 002e 7B68     		ldr	r3, [r7, #4]
 2153 0030 5A68     		ldr	r2, [r3, #4]
 2154 0032 FB68     		ldr	r3, [r7, #12]
 2155 0034 1A43     		orrs	r2, r2, r3
 2156 0036 7B68     		ldr	r3, [r7, #4]
 2157 0038 5A60     		str	r2, [r3, #4]
 2158 003a 07E0     		b	.L67
 2159              	.L68:
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* Disable the selected ADC interrupts */
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     ADCx->CR1 &= (~(uint32_t)itmask);
 2160              		.loc 1 1601 0
 2161 003c 7B68     		ldr	r3, [r7, #4]
 2162 003e 5A68     		ldr	r2, [r3, #4]
 2163 0040 FB68     		ldr	r3, [r7, #12]
 2164 0042 6FEA0303 		mvn	r3, r3
 2165 0046 1A40     		ands	r2, r2, r3
 2166 0048 7B68     		ldr	r3, [r7, #4]
 2167 004a 5A60     		str	r2, [r3, #4]
 2168              	.L67:
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2169              		.loc 1 1603 0
 2170 004c 07F11407 		add	r7, r7, #20
 2171 0050 BD46     		mov	sp, r7
 2172 0052 80BC     		pop	{r7}
 2173 0054 7047     		bx	lr
 2174              		.cfi_endproc
 2175              	.LFE143:
 2177 0056 00BF     		.section	.text.ADC_GetFlagStatus,"ax",%progbits
 2178              		.align	2
 2179              		.global	ADC_GetFlagStatus
 2180              		.thumb
 2181              		.thumb_func
 2183              	ADC_GetFlagStatus:
 2184              	.LFB144:
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC flag is set or not.
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to check. 
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                                                 
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_FLAG (SET or RESET).
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2185              		.loc 1 1619 0
 2186              		.cfi_startproc
 2187              		@ args = 0, pretend = 0, frame = 16
 2188              		@ frame_needed = 1, uses_anonymous_args = 0
 2189              		@ link register save eliminated.
 2190 0000 80B4     		push	{r7}
 2191              	.LCFI100:
 2192              		.cfi_def_cfa_offset 4
 2193              		.cfi_offset 7, -4
 2194 0002 85B0     		sub	sp, sp, #20
 2195              	.LCFI101:
 2196              		.cfi_def_cfa_offset 24
 2197 0004 00AF     		add	r7, sp, #0
 2198              	.LCFI102:
 2199              		.cfi_def_cfa_register 7
 2200 0006 7860     		str	r0, [r7, #4]
 2201 0008 0B46     		mov	r3, r1
 2202 000a FB70     		strb	r3, [r7, #3]
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   FlagStatus bitstatus = RESET;
 2203              		.loc 1 1620 0
 2204 000c 4FF00003 		mov	r3, #0
 2205 0010 FB73     		strb	r3, [r7, #15]
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC flag */
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 2206              		.loc 1 1626 0
 2207 0012 7B68     		ldr	r3, [r7, #4]
 2208 0014 1A68     		ldr	r2, [r3, #0]
 2209 0016 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2210 0018 1340     		ands	r3, r3, r2
 2211 001a 002B     		cmp	r3, #0
 2212 001c 03D0     		beq	.L71
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is set */
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2213              		.loc 1 1629 0
 2214 001e 4FF00103 		mov	r3, #1
 2215 0022 FB73     		strb	r3, [r7, #15]
 2216 0024 02E0     		b	.L72
 2217              	.L71:
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_FLAG is reset */
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2218              		.loc 1 1634 0
 2219 0026 4FF00003 		mov	r3, #0
 2220 002a FB73     		strb	r3, [r7, #15]
 2221              	.L72:
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_FLAG status */
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2222              		.loc 1 1637 0
 2223 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2224              		.loc 1 1638 0
 2225 002e 1846     		mov	r0, r3
 2226 0030 07F11407 		add	r7, r7, #20
 2227 0034 BD46     		mov	sp, r7
 2228 0036 80BC     		pop	{r7}
 2229 0038 7047     		bx	lr
 2230              		.cfi_endproc
 2231              	.LFE144:
 2233 003a 00BF     		.section	.text.ADC_ClearFlag,"ax",%progbits
 2234              		.align	2
 2235              		.global	ADC_ClearFlag
 2236              		.thumb
 2237              		.thumb_func
 2239              	ADC_ClearFlag:
 2240              	.LFB145:
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's pending flags.
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_FLAG: specifies the flag to clear. 
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be any combination of the following values:
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_AWD: Analog watchdog flag
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_EOC: End of conversion flag
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JEOC: End of injected group conversion flag
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_STRT: Start of regular group conversion flag
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_FLAG_OVR: Overrun flag                          
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2241              		.loc 1 1654 0
 2242              		.cfi_startproc
 2243              		@ args = 0, pretend = 0, frame = 8
 2244              		@ frame_needed = 1, uses_anonymous_args = 0
 2245              		@ link register save eliminated.
 2246 0000 80B4     		push	{r7}
 2247              	.LCFI103:
 2248              		.cfi_def_cfa_offset 4
 2249              		.cfi_offset 7, -4
 2250 0002 83B0     		sub	sp, sp, #12
 2251              	.LCFI104:
 2252              		.cfi_def_cfa_offset 16
 2253 0004 00AF     		add	r7, sp, #0
 2254              	.LCFI105:
 2255              		.cfi_def_cfa_register 7
 2256 0006 7860     		str	r0, [r7, #4]
 2257 0008 0B46     		mov	r3, r1
 2258 000a FB70     		strb	r3, [r7, #3]
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC flags */
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)ADC_FLAG;
 2259              		.loc 1 1660 0
 2260 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2261 000e 6FEA0302 		mvn	r2, r3
 2262 0012 7B68     		ldr	r3, [r7, #4]
 2263 0014 1A60     		str	r2, [r3, #0]
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2264              		.loc 1 1661 0
 2265 0016 07F10C07 		add	r7, r7, #12
 2266 001a BD46     		mov	sp, r7
 2267 001c 80BC     		pop	{r7}
 2268 001e 7047     		bx	lr
 2269              		.cfi_endproc
 2270              	.LFE145:
 2272              		.section	.text.ADC_GetITStatus,"ax",%progbits
 2273              		.align	2
 2274              		.global	ADC_GetITStatus
 2275              		.thumb
 2276              		.thumb_func
 2278              	ADC_GetITStatus:
 2279              	.LFB146:
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Checks whether the specified ADC interrupt has occurred or not.
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx:   where x can be 1, 2 or 3 to select the ADC peripheral.
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt source to check. 
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                        
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval The new state of ADC_IT (SET or RESET).
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2280              		.loc 1 1675 0
 2281              		.cfi_startproc
 2282              		@ args = 0, pretend = 0, frame = 24
 2283              		@ frame_needed = 1, uses_anonymous_args = 0
 2284              		@ link register save eliminated.
 2285 0000 80B4     		push	{r7}
 2286              	.LCFI106:
 2287              		.cfi_def_cfa_offset 4
 2288              		.cfi_offset 7, -4
 2289 0002 87B0     		sub	sp, sp, #28
 2290              	.LCFI107:
 2291              		.cfi_def_cfa_offset 32
 2292 0004 00AF     		add	r7, sp, #0
 2293              	.LCFI108:
 2294              		.cfi_def_cfa_register 7
 2295 0006 7860     		str	r0, [r7, #4]
 2296 0008 0B46     		mov	r3, r1
 2297 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ITStatus bitstatus = RESET;
 2298              		.loc 1 1676 0
 2299 000c 4FF00003 		mov	r3, #0
 2300 0010 FB75     		strb	r3, [r7, #23]
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint32_t itmask = 0, enablestatus = 0;
 2301              		.loc 1 1677 0
 2302 0012 4FF00003 		mov	r3, #0
 2303 0016 3B61     		str	r3, [r7, #16]
 2304 0018 4FF00003 		mov	r3, #0
 2305 001c FB60     		str	r3, [r7, #12]
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT));
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = ADC_IT >> 8;
 2306              		.loc 1 1684 0
 2307 001e 7B88     		ldrh	r3, [r7, #2]
 2308 0020 4FEA1323 		lsr	r3, r3, #8
 2309 0024 9BB2     		uxth	r3, r3
 2310 0026 3B61     		str	r3, [r7, #16]
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC_IT enable bit status */
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   enablestatus = (ADCx->CR1 & ((uint32_t)0x01 << (uint8_t)ADC_IT)) ;
 2311              		.loc 1 1687 0
 2312 0028 7B68     		ldr	r3, [r7, #4]
 2313 002a 5A68     		ldr	r2, [r3, #4]
 2314 002c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2315 002e DBB2     		uxtb	r3, r3
 2316 0030 4FF00101 		mov	r1, #1
 2317 0034 01FA03F3 		lsl	r3, r1, r3
 2318 0038 1340     		ands	r3, r3, r2
 2319 003a FB60     		str	r3, [r7, #12]
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the status of the specified ADC interrupt */
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
 2320              		.loc 1 1690 0
 2321 003c 7B68     		ldr	r3, [r7, #4]
 2322 003e 1A68     		ldr	r2, [r3, #0]
 2323 0040 3B69     		ldr	r3, [r7, #16]
 2324 0042 1340     		ands	r3, r3, r2
 2325 0044 002B     		cmp	r3, #0
 2326 0046 06D0     		beq	.L75
 2327              		.loc 1 1690 0 is_stmt 0 discriminator 1
 2328 0048 FB68     		ldr	r3, [r7, #12]
 2329 004a 002B     		cmp	r3, #0
 2330 004c 03D0     		beq	.L75
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is set */
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = SET;
 2331              		.loc 1 1693 0 is_stmt 1
 2332 004e 4FF00103 		mov	r3, #1
 2333 0052 FB75     		strb	r3, [r7, #23]
 2334 0054 02E0     		b	.L76
 2335              	.L75:
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   else
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   {
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     /* ADC_IT is reset */
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****     bitstatus = RESET;
 2336              		.loc 1 1698 0
 2337 0056 4FF00003 		mov	r3, #0
 2338 005a FB75     		strb	r3, [r7, #23]
 2339              	.L76:
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   }
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Return the ADC_IT status */
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   return  bitstatus;
 2340              		.loc 1 1701 0
 2341 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }
 2342              		.loc 1 1702 0
 2343 005e 1846     		mov	r0, r3
 2344 0060 07F11C07 		add	r7, r7, #28
 2345 0064 BD46     		mov	sp, r7
 2346 0066 80BC     		pop	{r7}
 2347 0068 7047     		bx	lr
 2348              		.cfi_endproc
 2349              	.LFE146:
 2351 006a 00BF     		.section	.text.ADC_ClearITPendingBit,"ax",%progbits
 2352              		.align	2
 2353              		.global	ADC_ClearITPendingBit
 2354              		.thumb
 2355              		.thumb_func
 2357              	ADC_ClearITPendingBit:
 2358              	.LFB147:
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** 
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** /**
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @brief  Clears the ADCx's interrupt pending bits.
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @param  ADC_IT: specifies the ADC interrupt pending bit to clear.
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *          This parameter can be one of the following values:
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_EOC: End of conversion interrupt mask
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_AWD: Analog watchdog interrupt mask
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_JEOC: End of injected conversion interrupt mask
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   *            @arg ADC_IT_OVR: Overrun interrupt mask                         
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   * @retval None
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   */
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** {
 2359              		.loc 1 1716 0
 2360              		.cfi_startproc
 2361              		@ args = 0, pretend = 0, frame = 16
 2362              		@ frame_needed = 1, uses_anonymous_args = 0
 2363              		@ link register save eliminated.
 2364 0000 80B4     		push	{r7}
 2365              	.LCFI109:
 2366              		.cfi_def_cfa_offset 4
 2367              		.cfi_offset 7, -4
 2368 0002 85B0     		sub	sp, sp, #20
 2369              	.LCFI110:
 2370              		.cfi_def_cfa_offset 24
 2371 0004 00AF     		add	r7, sp, #0
 2372              	.LCFI111:
 2373              		.cfi_def_cfa_register 7
 2374 0006 7860     		str	r0, [r7, #4]
 2375 0008 0B46     		mov	r3, r1
 2376 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   uint8_t itmask = 0;
 2377              		.loc 1 1717 0
 2378 000c 4FF00003 		mov	r3, #0
 2379 0010 FB73     		strb	r3, [r7, #15]
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Check the parameters */
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_ALL_PERIPH(ADCx));
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   assert_param(IS_ADC_IT(ADC_IT)); 
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Get the ADC IT index */
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   itmask = (uint8_t)(ADC_IT >> 8);
 2380              		.loc 1 1722 0
 2381 0012 7B88     		ldrh	r3, [r7, #2]
 2382 0014 4FEA1323 		lsr	r3, r3, #8
 2383 0018 9BB2     		uxth	r3, r3
 2384 001a FB73     		strb	r3, [r7, #15]
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   /* Clear the selected ADC interrupt pending bits */
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c ****   ADCx->SR = ~(uint32_t)itmask;
 2385              		.loc 1 1724 0
 2386 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2387 001e 6FEA0302 		mvn	r2, r3
 2388 0022 7B68     		ldr	r3, [r7, #4]
 2389 0024 1A60     		str	r2, [r3, #0]
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_adc.c **** }                    
 2390              		.loc 1 1725 0
 2391 0026 07F11407 		add	r7, r7, #20
 2392 002a BD46     		mov	sp, r7
 2393 002c 80BC     		pop	{r7}
 2394 002e 7047     		bx	lr
 2395              		.cfi_endproc
 2396              	.LFE147:
 2398              		.text
 2399              	.Letext0:
 2400              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2401              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Device\\STM32F4xx\\Inc
 2402              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 2403              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_adc.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:19     .text.ADC_DeInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:24     .text.ADC_DeInit:00000000 ADC_DeInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:53     .text.ADC_Init:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:58     .text.ADC_Init:00000000 ADC_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:179    .text.ADC_StructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:184    .text.ADC_StructInit:00000000 ADC_StructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:239    .text.ADC_CommonInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:244    .text.ADC_CommonInit:00000000 ADC_CommonInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:311    .text.ADC_CommonStructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:316    .text.ADC_CommonStructInit:00000000 ADC_CommonStructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:359    .text.ADC_Cmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:364    .text.ADC_Cmd:00000000 ADC_Cmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:412    .text.ADC_AnalogWatchdogCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:417    .text.ADC_AnalogWatchdogCmd:00000000 ADC_AnalogWatchdogCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:466    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:471    .text.ADC_AnalogWatchdogThresholdsConfig:00000000 ADC_AnalogWatchdogThresholdsConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:510    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:515    .text.ADC_AnalogWatchdogSingleChannelConfig:00000000 ADC_AnalogWatchdogSingleChannelConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:564    .text.ADC_TempSensorVrefintCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:569    .text.ADC_TempSensorVrefintCmd:00000000 ADC_TempSensorVrefintCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:620    .text.ADC_VBATCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:625    .text.ADC_VBATCmd:00000000 ADC_VBATCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:676    .text.ADC_RegularChannelConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:681    .text.ADC_RegularChannelConfig:00000000 ADC_RegularChannelConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:919    .text.ADC_SoftwareStartConv:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:924    .text.ADC_SoftwareStartConv:00000000 ADC_SoftwareStartConv
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:957    .text.ADC_GetSoftwareStartConvStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:962    .text.ADC_GetSoftwareStartConvStatus:00000000 ADC_GetSoftwareStartConvStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1010   .text.ADC_EOCOnEachRegularChannelCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1015   .text.ADC_EOCOnEachRegularChannelCmd:00000000 ADC_EOCOnEachRegularChannelCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1063   .text.ADC_ContinuousModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1068   .text.ADC_ContinuousModeCmd:00000000 ADC_ContinuousModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1116   .text.ADC_DiscModeChannelCountConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1121   .text.ADC_DiscModeChannelCountConfig:00000000 ADC_DiscModeChannelCountConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1178   .text.ADC_DiscModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1183   .text.ADC_DiscModeCmd:00000000 ADC_DiscModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1231   .text.ADC_GetConversionValue:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1236   .text.ADC_GetConversionValue:00000000 ADC_GetConversionValue
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1268   .text.ADC_GetMultiModeConversionValue:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1273   .text.ADC_GetMultiModeConversionValue:00000000 ADC_GetMultiModeConversionValue
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1300   .text.ADC_DMACmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1305   .text.ADC_DMACmd:00000000 ADC_DMACmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1353   .text.ADC_DMARequestAfterLastTransferCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1358   .text.ADC_DMARequestAfterLastTransferCmd:00000000 ADC_DMARequestAfterLastTransferCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1406   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1411   .text.ADC_MultiModeDMARequestAfterLastTransferCmd:00000000 ADC_MultiModeDMARequestAfterLastTransferCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1462   .text.ADC_InjectedChannelConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1467   .text.ADC_InjectedChannelConfig:00000000 ADC_InjectedChannelConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1641   .text.ADC_InjectedSequencerLengthConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1646   .text.ADC_InjectedSequencerLengthConfig:00000000 ADC_InjectedSequencerLengthConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1703   .text.ADC_SetInjectedOffset:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1708   .text.ADC_SetInjectedOffset:00000000 ADC_SetInjectedOffset
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1754   .text.ADC_ExternalTrigInjectedConvConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1759   .text.ADC_ExternalTrigInjectedConvConfig:00000000 ADC_ExternalTrigInjectedConvConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1807   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1812   .text.ADC_ExternalTrigInjectedConvEdgeConfig:00000000 ADC_ExternalTrigInjectedConvEdgeConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1860   .text.ADC_SoftwareStartInjectedConv:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1865   .text.ADC_SoftwareStartInjectedConv:00000000 ADC_SoftwareStartInjectedConv
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1898   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1903   .text.ADC_GetSoftwareStartInjectedConvCmdStatus:00000000 ADC_GetSoftwareStartInjectedConvCmdStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1951   .text.ADC_AutoInjectedConvCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:1956   .text.ADC_AutoInjectedConvCmd:00000000 ADC_AutoInjectedConvCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2004   .text.ADC_InjectedDiscModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2009   .text.ADC_InjectedDiscModeCmd:00000000 ADC_InjectedDiscModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2057   .text.ADC_GetInjectedConversionValue:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2062   .text.ADC_GetInjectedConversionValue:00000000 ADC_GetInjectedConversionValue
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2108   .text.ADC_ITConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2113   .text.ADC_ITConfig:00000000 ADC_ITConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2178   .text.ADC_GetFlagStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2183   .text.ADC_GetFlagStatus:00000000 ADC_GetFlagStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2234   .text.ADC_ClearFlag:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2239   .text.ADC_ClearFlag:00000000 ADC_ClearFlag
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2273   .text.ADC_GetITStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2278   .text.ADC_GetITStatus:00000000 ADC_GetITStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2352   .text.ADC_ClearITPendingBit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccrvltdt.s:2357   .text.ADC_ClearITPendingBit:00000000 ADC_ClearITPendingBit
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
