   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_pwr.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.PWR_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	PWR_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	PWR_DeInit:
  25              	.LFB110:
  26              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @file    stm32f4xx_pwr.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @version V1.0.0
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @date    30-September-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Backup Domain Access
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - PVD configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - WakeUp pin configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Main and Backup Regulators configuration
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - FLASH Power Down configuration
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Low Power modes configuration
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *           - Flags management
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *               
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @attention
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   ******************************************************************************
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Includes ------------------------------------------------------------------*/
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_pwr.h"
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #include "stm32f4xx_rcc.h"
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief PWR driver modules
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */ 
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private define ------------------------------------------------------------*/
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --------- PWR registers bit address in the alias region ---------- */
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PWR_OFFSET               (PWR_BASE - PERIPH_BASE)
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CR Register ---*/
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of DBP bit */
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_OFFSET                (PWR_OFFSET + 0x00)
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define DBP_BitNumber            0x08
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DBP_BB                (PERIPH_BB_BASE + (CR_OFFSET * 32) + (DBP_BitNumber * 4))
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PVDE bit */
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PVDE_BitNumber           0x04
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PVDE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PVDE_BitNumber * 4))
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of FPDS bit */
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define FPDS_BitNumber           0x09
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_FPDS_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (FPDS_BitNumber * 4))
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of PMODE bit */
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define PMODE_BitNumber           0x0E
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PMODE_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PMODE_BitNumber * 4))
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* --- CSR Register ---*/
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of EWUP bit */
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_OFFSET               (PWR_OFFSET + 0x04)
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define EWUP_BitNumber           0x08
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_EWUP_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (EWUP_BitNumber * 4))
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Alias word address of BRE bit */
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define BRE_BitNumber            0x09
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CSR_BRE_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (BRE_BitNumber * 4))
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* ------------------ PWR registers bit mask ------------------------ */
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* CR register bit mask */
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_DS_MASK               ((uint32_t)0xFFFFFFFC)
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #define CR_PLS_MASK              ((uint32_t)0xFFFFFF1F)
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private macro -------------------------------------------------------------*/
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private variables ---------------------------------------------------------*/
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* Private functions ---------------------------------------------------------*/
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Private_Functions
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group1 Backup Domain Access function 
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Backup Domain Access function  
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                             Backup Domain Access function 
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   After reset, the backup domain (RTC registers, RTC backup data 
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   registers and backup SRAM) is protected against possible unwanted 
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   write accesses. 
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   To enable access to the RTC Domain and RTC registers, proceed as follows:
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable the Power Controller (PWR) APB1 interface clock using the
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       RCC_APB1PeriphClockCmd() function.
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Enable access to RTC domain using the PWR_BackupAccessCmd() function.
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Deinitializes the PWR peripheral registers to their default reset values.     
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_DeInit(void)
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  27              		.loc 1 121 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 14, -4
  35              		.cfi_offset 7, -8
  36 0002 00AF     		add	r7, sp, #0
  37              	.LCFI1:
  38              		.cfi_def_cfa_register 7
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
  39              		.loc 1 122 0
  40 0004 4FF08050 		mov	r0, #268435456
  41 0008 4FF00101 		mov	r1, #1
  42 000c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
  43              		.loc 1 123 0
  44 0010 4FF08050 		mov	r0, #268435456
  45 0014 4FF00001 		mov	r1, #0
  46 0018 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  47              		.loc 1 124 0
  48 001c 80BD     		pop	{r7, pc}
  49              		.cfi_endproc
  50              	.LFE110:
  52 001e 00BF     		.section	.text.PWR_BackupAccessCmd,"ax",%progbits
  53              		.align	2
  54              		.global	PWR_BackupAccessCmd
  55              		.thumb
  56              		.thumb_func
  58              	PWR_BackupAccessCmd:
  59              	.LFB111:
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables access to the backup domain (RTC registers, RTC 
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         backup data registers and backup SRAM).
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         Backup Domain Access should be kept enabled.
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the access to the backup domain.
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupAccessCmd(FunctionalState NewState)
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  60              		.loc 1 136 0
  61              		.cfi_startproc
  62              		@ args = 0, pretend = 0, frame = 8
  63              		@ frame_needed = 1, uses_anonymous_args = 0
  64              		@ link register save eliminated.
  65 0000 80B4     		push	{r7}
  66              	.LCFI2:
  67              		.cfi_def_cfa_offset 4
  68              		.cfi_offset 7, -4
  69 0002 83B0     		sub	sp, sp, #12
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 16
  72 0004 00AF     		add	r7, sp, #0
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 7
  75 0006 0346     		mov	r3, r0
  76 0008 FB71     		strb	r3, [r7, #7]
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)NewState;
  77              		.loc 1 140 0
  78 000a 4FF02003 		mov	r3, #32
  79 000e C4F20E23 		movt	r3, 16910
  80 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
  81 0014 1A60     		str	r2, [r3, #0]
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
  82              		.loc 1 141 0
  83 0016 07F10C07 		add	r7, r7, #12
  84 001a BD46     		mov	sp, r7
  85 001c 80BC     		pop	{r7}
  86 001e 7047     		bx	lr
  87              		.cfi_endproc
  88              	.LFE111:
  90              		.section	.text.PWR_PVDLevelConfig,"ax",%progbits
  91              		.align	2
  92              		.global	PWR_PVDLevelConfig
  93              		.thumb
  94              		.thumb_func
  96              	PWR_PVDLevelConfig:
  97              	.LFB112:
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group2 PVD configuration functions
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   PVD configuration functions 
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            PVD configuration functions
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is used to monitor the VDD power supply by comparing it to a threshold
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - A PVDO flag is available to indicate if VDD/VDDA is higher or lower than the 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    PVD threshold. This event is internally connected to the EXTI line16
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and can generate an interrupt if enabled through the EXTI registers.
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The PVD is stopped in Standby mode.
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_PVDLevel: specifies the PVD detection level
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_0: PVD detection level set to 2.0V
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_1: PVD detection level set to 2.2V
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_2: PVD detection level set to 2.3V
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_3: PVD detection level set to 2.5V
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_4: PVD detection level set to 2.7V
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_5: PVD detection level set to 2.8V
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_6: PVD detection level set to 2.9V
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_PVDLevel_7: PVD detection level set to 3.0V
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   Refer to the electrical characteristics of you device datasheet for more details. 
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
  98              		.loc 1 182 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 16
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0000 80B4     		push	{r7}
 104              	.LCFI5:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 85B0     		sub	sp, sp, #20
 108              	.LCFI6:
 109              		.cfi_def_cfa_offset 24
 110 0004 00AF     		add	r7, sp, #0
 111              	.LCFI7:
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 114              		.loc 1 183 0
 115 0008 4FF00003 		mov	r3, #0
 116 000c FB60     		str	r3, [r7, #12]
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(PWR_PVDLevel));
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 117              		.loc 1 188 0
 118 000e 4FF4E043 		mov	r3, #28672
 119 0012 C4F20003 		movt	r3, 16384
 120 0016 1B68     		ldr	r3, [r3, #0]
 121 0018 FB60     		str	r3, [r7, #12]
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PLS[7:5] bits */
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_PLS_MASK;
 122              		.loc 1 191 0
 123 001a FB68     		ldr	r3, [r7, #12]
 124 001c 23F0E003 		bic	r3, r3, #224
 125 0020 FB60     		str	r3, [r7, #12]
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set PLS[7:5] bits according to PWR_PVDLevel value */
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_PVDLevel;
 126              		.loc 1 194 0
 127 0022 FA68     		ldr	r2, [r7, #12]
 128 0024 7B68     		ldr	r3, [r7, #4]
 129 0026 1343     		orrs	r3, r3, r2
 130 0028 FB60     		str	r3, [r7, #12]
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 131              		.loc 1 197 0
 132 002a 4FF4E043 		mov	r3, #28672
 133 002e C4F20003 		movt	r3, 16384
 134 0032 FA68     		ldr	r2, [r7, #12]
 135 0034 1A60     		str	r2, [r3, #0]
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 136              		.loc 1 198 0
 137 0036 07F11407 		add	r7, r7, #20
 138 003a BD46     		mov	sp, r7
 139 003c 80BC     		pop	{r7}
 140 003e 7047     		bx	lr
 141              		.cfi_endproc
 142              	.LFE112:
 144              		.section	.text.PWR_PVDCmd,"ax",%progbits
 145              		.align	2
 146              		.global	PWR_PVDCmd
 147              		.thumb
 148              		.thumb_func
 150              	PWR_PVDCmd:
 151              	.LFB113:
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Power Voltage Detector(PVD).
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the PVD.
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_PVDCmd(FunctionalState NewState)
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 152              		.loc 1 207 0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 8
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 157 0000 80B4     		push	{r7}
 158              	.LCFI8:
 159              		.cfi_def_cfa_offset 4
 160              		.cfi_offset 7, -4
 161 0002 83B0     		sub	sp, sp, #12
 162              	.LCFI9:
 163              		.cfi_def_cfa_offset 16
 164 0004 00AF     		add	r7, sp, #0
 165              	.LCFI10:
 166              		.cfi_def_cfa_register 7
 167 0006 0346     		mov	r3, r0
 168 0008 FB71     		strb	r3, [r7, #7]
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)NewState;
 169              		.loc 1 211 0
 170 000a 4FF01003 		mov	r3, #16
 171 000e C4F20E23 		movt	r3, 16910
 172 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 173 0014 1A60     		str	r2, [r3, #0]
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 174              		.loc 1 212 0
 175 0016 07F10C07 		add	r7, r7, #12
 176 001a BD46     		mov	sp, r7
 177 001c 80BC     		pop	{r7}
 178 001e 7047     		bx	lr
 179              		.cfi_endproc
 180              	.LFE113:
 182              		.section	.text.PWR_WakeUpPinCmd,"ax",%progbits
 183              		.align	2
 184              		.global	PWR_WakeUpPinCmd
 185              		.thumb
 186              		.thumb_func
 188              	PWR_WakeUpPinCmd:
 189              	.LFB114:
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group3 WakeUp pin configuration functions
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   WakeUp pin configuration functions 
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     WakeUp pin configuration functions
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - WakeUp pin is used to wakeup the system from Standby mode. This pin is 
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    forced in input pull down configuration and is active on rising edges.
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - There is only one WakeUp pin: WakeUp Pin 1 on PA.00.
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the WakeUp Pin functionality.
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the WakeUp Pin functionality.
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         This parameter can be: ENABLE or DISABLE.
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_WakeUpPinCmd(FunctionalState NewState)
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 190              		.loc 1 241 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 8
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195 0000 80B4     		push	{r7}
 196              	.LCFI11:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 0002 83B0     		sub	sp, sp, #12
 200              	.LCFI12:
 201              		.cfi_def_cfa_offset 16
 202 0004 00AF     		add	r7, sp, #0
 203              	.LCFI13:
 204              		.cfi_def_cfa_register 7
 205 0006 0346     		mov	r3, r0
 206 0008 FB71     		strb	r3, [r7, #7]
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */  
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_EWUP_BB = (uint32_t)NewState;
 207              		.loc 1 245 0
 208 000a 4FF0A003 		mov	r3, #160
 209 000e C4F20E23 		movt	r3, 16910
 210 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 211 0014 1A60     		str	r2, [r3, #0]
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 212              		.loc 1 246 0
 213 0016 07F10C07 		add	r7, r7, #12
 214 001a BD46     		mov	sp, r7
 215 001c 80BC     		pop	{r7}
 216 001e 7047     		bx	lr
 217              		.cfi_endproc
 218              	.LFE114:
 220              		.section	.text.PWR_BackupRegulatorCmd,"ax",%progbits
 221              		.align	2
 222              		.global	PWR_BackupRegulatorCmd
 223              		.thumb
 224              		.thumb_func
 226              	PWR_BackupRegulatorCmd:
 227              	.LFB115:
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group4 Main and Backup Regulators configuration functions
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Main and Backup Regulators configuration functions 
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Main and Backup Regulators configuration functions
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup domain includes 4 Kbytes of backup SRAM accessible only from the 
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    CPU, and address in 32-bit, 16-bit or 8-bit mode. Its content is retained 
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    even in Standby or VBAT mode when the low power backup regulator is enabled. 
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    It can be considered as an internal EEPROM when VBAT is always present.
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    You can use the PWR_BackupRegulatorCmd() function to enable the low power
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    backup regulator and use the PWR_GetFlagStatus(PWR_FLAG_BRR) to check if it is
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ready or not. 
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - When the backup domain is supplied by VDD (analog switch connected to VDD) 
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the backup SRAM is powered from VDD which replaces the VBAT power supply to 
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    save battery life.
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The backup SRAM is not mass erased by an tamper event. It is read protected 
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    to prevent confidential data, such as cryptographic private key, from being 
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    accessed. The backup SRAM can be erased only through the Flash interface when
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    a protection level change from level 1 to level 0 is requested. 
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the description of Read protection (RDP) in the Flash programming manual.
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - The main internal regulator can be configured to have a tradeoff between performance
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and power consumption when the device does not operate at the maximum frequency. 
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    This is done through PWR_MainRegulatorModeConfig() function which configure VOS bit
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    in PWR_CR register: 
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is set (Regulator voltage output Scale 1 mode selected) the System
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 168 MHz. 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - When this bit is reset (Regulator voltage output Scale 2 mode selected) the System
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         frequency can go up to 144 MHz. 
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Refer to the datasheets for more details.
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Backup Regulator.
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Backup Regulator.
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_BackupRegulatorCmd(FunctionalState NewState)
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 228              		.loc 1 299 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 8
 231              		@ frame_needed = 1, uses_anonymous_args = 0
 232              		@ link register save eliminated.
 233 0000 80B4     		push	{r7}
 234              	.LCFI14:
 235              		.cfi_def_cfa_offset 4
 236              		.cfi_offset 7, -4
 237 0002 83B0     		sub	sp, sp, #12
 238              	.LCFI15:
 239              		.cfi_def_cfa_offset 16
 240 0004 00AF     		add	r7, sp, #0
 241              	.LCFI16:
 242              		.cfi_def_cfa_register 7
 243 0006 0346     		mov	r3, r0
 244 0008 FB71     		strb	r3, [r7, #7]
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)NewState;
 245              		.loc 1 303 0
 246 000a 4FF0A403 		mov	r3, #164
 247 000e C4F20E23 		movt	r3, 16910
 248 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 249 0014 1A60     		str	r2, [r3, #0]
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 250              		.loc 1 304 0
 251 0016 07F10C07 		add	r7, r7, #12
 252 001a BD46     		mov	sp, r7
 253 001c 80BC     		pop	{r7}
 254 001e 7047     		bx	lr
 255              		.cfi_endproc
 256              	.LFE115:
 258              		.section	.text.PWR_MainRegulatorModeConfig,"ax",%progbits
 259              		.align	2
 260              		.global	PWR_MainRegulatorModeConfig
 261              		.thumb
 262              		.thumb_func
 264              	PWR_MainRegulatorModeConfig:
 265              	.LFB116:
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Configures the main internal regulator output voltage.
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator_Voltage: specifies the regulator output voltage to achieve
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         a tradeoff between performance and power consumption when the device does
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         not operate at the maximum frequency (refer to the datasheets for more details).
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale1: Regulator voltage output Scale 1 mode, 
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 168 MHz. 
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_Voltage_Scale2: Regulator voltage output Scale 2 mode, 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                                                System frequency up to 144 MHz.    
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_MainRegulatorModeConfig(uint32_t PWR_Regulator_Voltage)
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 266              		.loc 1 319 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 8
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0000 80B4     		push	{r7}
 272              	.LCFI17:
 273              		.cfi_def_cfa_offset 4
 274              		.cfi_offset 7, -4
 275 0002 83B0     		sub	sp, sp, #12
 276              	.LCFI18:
 277              		.cfi_def_cfa_offset 16
 278 0004 00AF     		add	r7, sp, #0
 279              	.LCFI19:
 280              		.cfi_def_cfa_register 7
 281 0006 7860     		str	r0, [r7, #4]
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR_VOLTAGE(PWR_Regulator_Voltage));
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if (PWR_Regulator_Voltage == PWR_Regulator_Voltage_Scale2)
 282              		.loc 1 323 0
 283 0008 7B68     		ldr	r3, [r7, #4]
 284 000a 002B     		cmp	r3, #0
 285 000c 0CD1     		bne	.L8
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR &= ~PWR_Regulator_Voltage_Scale1;
 286              		.loc 1 325 0
 287 000e 4FF4E043 		mov	r3, #28672
 288 0012 C4F20003 		movt	r3, 16384
 289 0016 4FF4E042 		mov	r2, #28672
 290 001a C4F20002 		movt	r2, 16384
 291 001e 1268     		ldr	r2, [r2, #0]
 292 0020 22F48042 		bic	r2, r2, #16384
 293 0024 1A60     		str	r2, [r3, #0]
 294 0026 0BE0     		b	.L7
 295              	.L8:
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {    
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     PWR->CR |= PWR_Regulator_Voltage_Scale1;
 296              		.loc 1 329 0
 297 0028 4FF4E043 		mov	r3, #28672
 298 002c C4F20003 		movt	r3, 16384
 299 0030 4FF4E042 		mov	r2, #28672
 300 0034 C4F20002 		movt	r2, 16384
 301 0038 1268     		ldr	r2, [r2, #0]
 302 003a 42F48042 		orr	r2, r2, #16384
 303 003e 1A60     		str	r2, [r3, #0]
 304              	.L7:
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 305              		.loc 1 331 0
 306 0040 07F10C07 		add	r7, r7, #12
 307 0044 BD46     		mov	sp, r7
 308 0046 80BC     		pop	{r7}
 309 0048 7047     		bx	lr
 310              		.cfi_endproc
 311              	.LFE116:
 313 004a 00BF     		.section	.text.PWR_FlashPowerDownCmd,"ax",%progbits
 314              		.align	2
 315              		.global	PWR_FlashPowerDownCmd
 316              		.thumb
 317              		.thumb_func
 319              	PWR_FlashPowerDownCmd:
 320              	.LFB117:
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group5 FLASH Power Down configuration functions
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   FLASH Power Down configuration functions 
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****            FLASH Power Down configuration functions
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  - By setting the FPDS bit in the PWR_CR register by using the PWR_FlashPowerDownCmd()
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    function, the Flash memory also enters power down mode when the device enters 
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode. When the Flash memory is in power down mode, an additional startup 
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    delay is incurred when waking up from Stop mode.
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enables or disables the Flash Power Down in STOP mode.
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  NewState: new state of the Flash power mode.
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be: ENABLE or DISABLE.
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_FlashPowerDownCmd(FunctionalState NewState)
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 321              		.loc 1 361 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 8
 324              		@ frame_needed = 1, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 326 0000 80B4     		push	{r7}
 327              	.LCFI20:
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 7, -4
 330 0002 83B0     		sub	sp, sp, #12
 331              	.LCFI21:
 332              		.cfi_def_cfa_offset 16
 333 0004 00AF     		add	r7, sp, #0
 334              	.LCFI22:
 335              		.cfi_def_cfa_register 7
 336 0006 0346     		mov	r3, r0
 337 0008 FB71     		strb	r3, [r7, #7]
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *(__IO uint32_t *) CR_FPDS_BB = (uint32_t)NewState;
 338              		.loc 1 365 0
 339 000a 4FF02403 		mov	r3, #36
 340 000e C4F20E23 		movt	r3, 16910
 341 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 342 0014 1A60     		str	r2, [r3, #0]
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 343              		.loc 1 366 0
 344 0016 07F10C07 		add	r7, r7, #12
 345 001a BD46     		mov	sp, r7
 346 001c 80BC     		pop	{r7}
 347 001e 7047     		bx	lr
 348              		.cfi_endproc
 349              	.LFE117:
 351              		.section	.text.PWR_EnterSTOPMode,"ax",%progbits
 352              		.align	2
 353              		.global	PWR_EnterSTOPMode
 354              		.thumb
 355              		.thumb_func
 357              	PWR_EnterSTOPMode:
 358              	.LFB118:
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group6 Low Power modes configuration functions
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Low Power modes configuration functions 
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                     Low Power modes configuration functions
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   The devices feature 3 low-power modes:
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Stop mode: all clocks are stopped, regulator running, regulator in low power mode
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - Standby mode: 1.2V domain powered off.
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Sleep mode
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ===========
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Sleep mode is entered by using the __WFI() or __WFE() functions.
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any peripheral interrupt acknowledged by the nested vectored interrupt 
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         controller (NVIC) can wake up the device from Sleep mode.
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Stop mode
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ==========
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    and the HSE RC oscillators are disabled. Internal SRAM and register contents 
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    are preserved.
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator can be configured either in normal or low-power mode.
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    To minimize the consumption In Stop mode, FLASH can be powered off before 
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    entering the Stop mode. It can be switched on again by software after exiting 
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the Stop mode using the PWR_FlashPowerDownCmd() function. 
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Stop mode is entered using the PWR_EnterSTOPMode(PWR_Regulator_LowPower,) 
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         function with regulator in LowPower or with Regulator ON.
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Standby mode
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    ============
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The Standby mode allows to achieve the lowest power consumption. It is based 
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    on the Cortex-M4 deepsleep mode, with the voltage regulator disabled. 
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    the HSE oscillator are also switched off. SRAM and register contents are lost 
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    circuitry.
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The voltage regulator is OFF.
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Entry:
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - The Standby mode is entered using the PWR_EnterSTANDBYMode() function.
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     - Exit:
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****       - WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wakeup,
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****         tamper event, time-stamp event, external reset in NRST pin, IWDG reset.              
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Auto-wakeup (AWU) from low-power mode
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    =====================================
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    Wakeup event, a tamper event, a time-stamp event, or a comparator event, 
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    without depending on an external interrupt (Auto-wakeup mode).
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Stop mode
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      ----------------------------------------
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC alarm event, it is necessary to:
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 17 to be sensitive to rising edges (Interrupt 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 21 to be sensitive to rising edges (Interrupt 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Stop mode with an RTC WakeUp event, it is necessary to:
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the EXTI Line 22 to be sensitive to rising edges (Interrupt 
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          or Event modes) using the EXTI_Init() function.
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****    - RTC auto-wakeup (AWU) from the Standby mode
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      -------------------------------------------
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC alarm event, it is necessary to:
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Alarm Interrupt using the RTC_ITConfig() function
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC alarm using the RTC_SetAlarm() 
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          and RTC_AlarmCmd() functions.
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC Tamper or time stamp event, it 
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        is necessary to:
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC Tamper or time stamp Interrupt using the RTC_ITConfig() 
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          function
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to detect the tamper or time stamp event using the
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_TimeStampConfig(), RTC_TamperTriggerConfig() and RTC_TamperCmd()
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          functions.
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****      - To wake up from the Standby mode with an RTC WakeUp event, it is necessary to:
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Enable the RTC WakeUp Interrupt using the RTC_ITConfig() function
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****        - Configure the RTC to generate the RTC WakeUp event using the RTC_WakeUpClockConfig(), 
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          RTC_SetWakeUpCounter() and RTC_WakeUpCmd() functions.
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STOP mode.
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *   
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Stop mode, all I/O pins keep the same state as in Run mode.
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When exiting Stop mode by issuing an interrupt or a wakeup event, 
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   When the voltage regulator operates in low power mode, an additional 
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *         is higher although the startup time is reduced.           
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *     
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_Regulator: specifies the regulator state in STOP mode.
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_ON: STOP mode with regulator ON
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_Regulator_LowPower: STOP mode with regulator in low power mode
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_STOPEntry: specifies if STOP mode in entered with WFI or WFE instruction.
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFI: enter STOP mode with WFI instruction
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_STOPEntry_WFE: enter STOP mode with WFE instruction
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTOPMode(uint32_t PWR_Regulator, uint8_t PWR_STOPEntry)
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 359              		.loc 1 501 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 16
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0000 80B4     		push	{r7}
 365              	.LCFI23:
 366              		.cfi_def_cfa_offset 4
 367              		.cfi_offset 7, -4
 368 0002 85B0     		sub	sp, sp, #20
 369              	.LCFI24:
 370              		.cfi_def_cfa_offset 24
 371 0004 00AF     		add	r7, sp, #0
 372              	.LCFI25:
 373              		.cfi_def_cfa_register 7
 374 0006 7860     		str	r0, [r7, #4]
 375 0008 0B46     		mov	r3, r1
 376 000a FB70     		strb	r3, [r7, #3]
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   uint32_t tmpreg = 0;
 377              		.loc 1 502 0
 378 000c 4FF00003 		mov	r3, #0
 379 0010 FB60     		str	r3, [r7, #12]
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_REGULATOR(PWR_Regulator));
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(PWR_STOPEntry));
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select the regulator state in STOP mode ---------------------------------*/
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg = PWR->CR;
 380              		.loc 1 509 0
 381 0012 4FF4E043 		mov	r3, #28672
 382 0016 C4F20003 		movt	r3, 16384
 383 001a 1B68     		ldr	r3, [r3, #0]
 384 001c FB60     		str	r3, [r7, #12]
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear PDDS and LPDSR bits */
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg &= CR_DS_MASK;
 385              		.loc 1 511 0
 386 001e FB68     		ldr	r3, [r7, #12]
 387 0020 23F00303 		bic	r3, r3, #3
 388 0024 FB60     		str	r3, [r7, #12]
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set LPDSR bit according to PWR_Regulator value */
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   tmpreg |= PWR_Regulator;
 389              		.loc 1 514 0
 390 0026 FA68     		ldr	r2, [r7, #12]
 391 0028 7B68     		ldr	r3, [r7, #4]
 392 002a 1343     		orrs	r3, r3, r2
 393 002c FB60     		str	r3, [r7, #12]
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Store the new value */
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR = tmpreg;
 394              		.loc 1 517 0
 395 002e 4FF4E043 		mov	r3, #28672
 396 0032 C4F20003 		movt	r3, 16384
 397 0036 FA68     		ldr	r2, [r7, #12]
 398 0038 1A60     		str	r2, [r3, #0]
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 399              		.loc 1 520 0
 400 003a 4FF46D43 		mov	r3, #60672
 401 003e CEF20003 		movt	r3, 57344
 402 0042 4FF46D42 		mov	r2, #60672
 403 0046 CEF20002 		movt	r2, 57344
 404 004a 1269     		ldr	r2, [r2, #16]
 405 004c 42F00402 		orr	r2, r2, #4
 406 0050 1A61     		str	r2, [r3, #16]
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STOP mode entry --------------------------------------------------*/
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if(PWR_STOPEntry == PWR_STOPEntry_WFI)
 407              		.loc 1 523 0
 408 0052 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 409 0054 012B     		cmp	r3, #1
 410 0056 01D1     		bne	.L12
 411              	.LBB8:
 412              	.LBB9:
 413              		.file 2 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
   1:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @version  V2.10
   5:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @date     19. July 2011
   6:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  *
   7:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @note
   8:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * Copyright (C) 2009-2011 ARM Limited. All rights reserved.
   9:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  *
  10:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @par
  11:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * processor based microcontrollers.  This file can be freely distributed 
  13:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * within development tools that are supporting such ARM based processors. 
  14:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  *
  15:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * @par
  16:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  *
  22:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  ******************************************************************************/
  23:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  24:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  25:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  26:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  27:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  28:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  29:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  30:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   Access to dedicated instructions
  31:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   @{
  32:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** */
  33:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  34:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  35:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /* ARM armcc specific functions */
  36:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  37:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  38:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  39:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #endif
  40:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  41:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  42:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
  43:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  44:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  45:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  46:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __NOP                             __nop
  47:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  48:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  49:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  50:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  51:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  52:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
  53:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  54:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __WFI                             __wfi
  55:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  56:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  57:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
  58:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  59:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  60:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  61:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  62:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __WFE                             __wfe
  63:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  64:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  65:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Send Event
  66:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  67:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  68:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  69:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __SEV                             __sev
  70:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  71:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  72:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  73:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  74:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor, 
  75:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or 
  76:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  77:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  78:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  79:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  80:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  81:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  82:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  83:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier. 
  84:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  85:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  86:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
  87:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  88:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  89:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
  90:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  91:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before 
  92:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
  93:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
  94:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
  95:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  96:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  97:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
  98:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
  99:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 100:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 101:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 102:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 103:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 104:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __REV                             __rev
 105:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 106:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 107:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 108:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 109:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 110:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 111:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 112:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 113:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 114:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM uint32_t __REV16(uint32_t value)
 115:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** {
 116:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   rev16 r0, r0
 117:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   bx lr
 118:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** }
 119:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 120:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 121:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 122:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 123:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 124:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 125:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 128:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** static __INLINE __ASM int32_t __REVSH(int32_t value)
 129:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** {
 130:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   revsh r0, r0
 131:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   bx lr
 132:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** }
 133:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 134:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 135:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 136:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 137:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 138:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 139:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 140:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 141:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 142:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return               Reversed value
 143:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 144:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __RBIT                            __rbit
 145:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 146:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 147:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 148:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 149:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 150:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 151:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 152:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 153:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 154:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 155:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 156:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 157:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 158:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 159:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 160:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 161:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 162:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 163:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 164:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 165:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 166:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 167:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 168:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 169:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 170:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 171:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 172:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 173:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 174:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 175:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 176:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 177:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 178:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 179:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 180:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 181:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 182:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 183:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 184:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 185:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 186:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 187:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 188:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 189:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 190:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 191:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 192:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 193:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 194:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 195:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 196:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 197:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 198:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 199:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 200:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 201:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 202:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 203:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 204:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 205:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to store
 206:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 207:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          0  Function succeeded
 208:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return          1  Function failed
 209:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 210:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 211:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 212:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 213:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 214:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 215:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 216:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 217:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 218:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CLREX                           __clrex
 219:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 220:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 221:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Signed Saturate
 222:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 223:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function saturates a signed value.
 224:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 225:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 226:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 227:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 228:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 229:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __SSAT                            __ssat
 230:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 231:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 232:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 233:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 234:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function saturates an unsigned value.
 235:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 236:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 237:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 238:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             Saturated value
 239:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 240:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __USAT                            __usat
 241:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 242:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 243:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Count leading zeros
 244:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 245:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 246:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 247:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 248:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     \return             number of leading zeros in value
 249:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 250:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #define __CLZ                             __clz 
 251:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 252:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 253:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 254:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 255:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 256:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 257:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 258:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 259:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #include <cmsis_iar.h>
 260:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 261:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 262:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 263:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /* GNU gcc specific functions */
 264:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 265:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  No Operation
 266:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 267:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 268:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 269:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __NOP(void)
 270:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** {
 271:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("nop");
 272:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** }
 273:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 274:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 275:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
 276:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 277:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 278:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     until one of a number of events occurs.
 279:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 280:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFI(void)
 281:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** {
 282:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 414              		.loc 2 282 0
 415              	@ 282 "C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include/core_cmI
 416 0058 30BF     		wfi
 417              	@ 0 "" 2
 418              		.thumb
 419 005a 00E0     		b	.L13
 420              	.L12:
 421              	.LBE9:
 422              	.LBE8:
 423              	.LBB10:
 424              	.LBB11:
 283:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** }
 284:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 285:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 286:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** /** \brief  Wait For Event
 287:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** 
 288:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 289:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 290:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****  */
 291:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) static __INLINE void __WFE(void)
 292:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h **** {
 293:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfe");
 425              		.loc 2 293 0
 426              	@ 293 "C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include/core_cmI
 427 005c 20BF     		wfe
 428              	@ 0 "" 2
 429              		.thumb
 430              	.L13:
 431              	.LBE11:
 432              	.LBE10:
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {   
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Interrupt */
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFI();
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     /* Request Wait For Event */
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     __WFE();
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);  
 433              		.loc 1 534 0
 434 005e 4FF46D43 		mov	r3, #60672
 435 0062 CEF20003 		movt	r3, 57344
 436 0066 4FF46D42 		mov	r2, #60672
 437 006a CEF20002 		movt	r2, 57344
 438 006e 1269     		ldr	r2, [r2, #16]
 439 0070 22F00402 		bic	r2, r2, #4
 440 0074 1A61     		str	r2, [r3, #16]
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 441              		.loc 1 535 0
 442 0076 07F11407 		add	r7, r7, #20
 443 007a BD46     		mov	sp, r7
 444 007c 80BC     		pop	{r7}
 445 007e 7047     		bx	lr
 446              		.cfi_endproc
 447              	.LFE118:
 449              		.section	.text.PWR_EnterSTANDBYMode,"ax",%progbits
 450              		.align	2
 451              		.global	PWR_EnterSTANDBYMode
 452              		.thumb
 453              		.thumb_func
 455              	PWR_EnterSTANDBYMode:
 456              	.LFB119:
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Enters STANDBY mode.
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @note   In Standby mode, all I/O pins are high impedance except for:
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - Reset pad (still available) 
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  None
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_EnterSTANDBYMode(void)
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 457              		.loc 1 549 0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 1, uses_anonymous_args = 0
 461              		@ link register save eliminated.
 462 0000 80B4     		push	{r7}
 463              	.LCFI26:
 464              		.cfi_def_cfa_offset 4
 465              		.cfi_offset 7, -4
 466 0002 00AF     		add	r7, sp, #0
 467              	.LCFI27:
 468              		.cfi_def_cfa_register 7
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Clear Wakeup flag */
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_CWUF;
 469              		.loc 1 551 0
 470 0004 4FF4E043 		mov	r3, #28672
 471 0008 C4F20003 		movt	r3, 16384
 472 000c 4FF4E042 		mov	r2, #28672
 473 0010 C4F20002 		movt	r2, 16384
 474 0014 1268     		ldr	r2, [r2, #0]
 475 0016 42F00402 		orr	r2, r2, #4
 476 001a 1A60     		str	r2, [r3, #0]
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Select STANDBY mode */
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |= PWR_CR_PDDS;
 477              		.loc 1 554 0
 478 001c 4FF4E043 		mov	r3, #28672
 479 0020 C4F20003 		movt	r3, 16384
 480 0024 4FF4E042 		mov	r2, #28672
 481 0028 C4F20002 		movt	r2, 16384
 482 002c 1268     		ldr	r2, [r2, #0]
 483 002e 42F00202 		orr	r2, r2, #2
 484 0032 1A60     		str	r2, [r3, #0]
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 485              		.loc 1 557 0
 486 0034 4FF46D43 		mov	r3, #60672
 487 0038 CEF20003 		movt	r3, 57344
 488 003c 4FF46D42 		mov	r2, #60672
 489 0040 CEF20002 		movt	r2, 57344
 490 0044 1269     		ldr	r2, [r2, #16]
 491 0046 42F00402 		orr	r2, r2, #4
 492 004a 1A61     		str	r2, [r3, #16]
 493              	.LBB12:
 494              	.LBB13:
 282:C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include\core_cmInstr.h ****   __ASM volatile ("wfi");
 495              		.loc 2 282 0
 496              	@ 282 "C:\Users\Anthony.Paterson@opus.co\Documents\git\blink\blink\Libraries\CMSIS\Include/core_cmI
 497 004c 30BF     		wfi
 498              	@ 0 "" 2
 499              		.thumb
 500              	.LBE13:
 501              	.LBE12:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /* This option is used to ensure that store operations are completed */
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #if defined ( __CC_ARM   )
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __force_stores();
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** #endif
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Request Wait For Interrupt */
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   __WFI();
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 502              		.loc 1 565 0
 503 004e BD46     		mov	sp, r7
 504 0050 80BC     		pop	{r7}
 505 0052 7047     		bx	lr
 506              		.cfi_endproc
 507              	.LFE119:
 509              		.section	.text.PWR_GetFlagStatus,"ax",%progbits
 510              		.align	2
 511              		.global	PWR_GetFlagStatus
 512              		.thumb
 513              		.thumb_func
 515              	PWR_GetFlagStatus:
 516              	.LFB120:
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @}
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /** @defgroup PWR_Group7 Flags management functions
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *  @brief   Flags management functions 
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  *
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @verbatim   
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****                            Flags management functions
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****  ===============================================================================  
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** @endverbatim
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @{
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Checks whether the specified PWR flag is set or not.
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to check.
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag. This flag indicates that a wakeup event 
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  was received from the WKUP pin or from the RTC alarm (Alarm A 
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or Alarm B), RTC Tamper event, RTC TimeStamp event or RTC Wakeup.
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  An additional wakeup event is detected if the WKUP pin is enabled 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  (by setting the EWUP bit) when the WKUP pin level is already high.  
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag. This flag indicates that the system was
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  resumed from StandBy mode.    
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_PVDO: PVD Output. This flag is valid only if PVD is enabled 
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  by the PWR_PVDCmd() function. The PVD is stopped by Standby mode 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  For this reason, this bit is equal to 0 after Standby or reset
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  until the PVDE bit is set.
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_BRR: Backup regulator ready flag. This bit is not reset 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  when the device wakes up from Standby mode or by a system reset 
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                  or power reset.  
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_VOSRDY: This flag indicates that the Regulator voltage 
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *                 scaling output selection is ready. 
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval The new state of PWR_FLAG (SET or RESET).
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 517              		.loc 1 606 0
 518              		.cfi_startproc
 519              		@ args = 0, pretend = 0, frame = 16
 520              		@ frame_needed = 1, uses_anonymous_args = 0
 521              		@ link register save eliminated.
 522 0000 80B4     		push	{r7}
 523              	.LCFI28:
 524              		.cfi_def_cfa_offset 4
 525              		.cfi_offset 7, -4
 526 0002 85B0     		sub	sp, sp, #20
 527              	.LCFI29:
 528              		.cfi_def_cfa_offset 24
 529 0004 00AF     		add	r7, sp, #0
 530              	.LCFI30:
 531              		.cfi_def_cfa_register 7
 532 0006 7860     		str	r0, [r7, #4]
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   FlagStatus bitstatus = RESET;
 533              		.loc 1 607 0
 534 0008 4FF00003 		mov	r3, #0
 535 000c FB73     		strb	r3, [r7, #15]
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_GET_FLAG(PWR_FLAG));
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   if ((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
 536              		.loc 1 612 0
 537 000e 4FF4E043 		mov	r3, #28672
 538 0012 C4F20003 		movt	r3, 16384
 539 0016 5A68     		ldr	r2, [r3, #4]
 540 0018 7B68     		ldr	r3, [r7, #4]
 541 001a 1340     		ands	r3, r3, r2
 542 001c 002B     		cmp	r3, #0
 543 001e 03D0     		beq	.L16
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = SET;
 544              		.loc 1 614 0
 545 0020 4FF00103 		mov	r3, #1
 546 0024 FB73     		strb	r3, [r7, #15]
 547 0026 02E0     		b	.L17
 548              	.L16:
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   else
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   {
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****     bitstatus = RESET;
 549              		.loc 1 618 0
 550 0028 4FF00003 		mov	r3, #0
 551 002c FB73     		strb	r3, [r7, #15]
 552              	.L17:
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   }
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Return the flag status */
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   return bitstatus;
 553              		.loc 1 621 0
 554 002e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 555              		.loc 1 622 0
 556 0030 1846     		mov	r0, r3
 557 0032 07F11407 		add	r7, r7, #20
 558 0036 BD46     		mov	sp, r7
 559 0038 80BC     		pop	{r7}
 560 003a 7047     		bx	lr
 561              		.cfi_endproc
 562              	.LFE120:
 564              		.section	.text.PWR_ClearFlag,"ax",%progbits
 565              		.align	2
 566              		.global	PWR_ClearFlag
 567              		.thumb
 568              		.thumb_func
 570              	PWR_ClearFlag:
 571              	.LFB121:
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** 
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** /**
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @brief  Clears the PWR's pending flags.
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @param  PWR_FLAG: specifies the flag to clear.
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *          This parameter can be one of the following values:
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_WU: Wake Up flag
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   *            @arg PWR_FLAG_SB: StandBy flag
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   * @retval None
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   */
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** void PWR_ClearFlag(uint32_t PWR_FLAG)
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** {
 572              		.loc 1 633 0
 573              		.cfi_startproc
 574              		@ args = 0, pretend = 0, frame = 8
 575              		@ frame_needed = 1, uses_anonymous_args = 0
 576              		@ link register save eliminated.
 577 0000 80B4     		push	{r7}
 578              	.LCFI31:
 579              		.cfi_def_cfa_offset 4
 580              		.cfi_offset 7, -4
 581 0002 83B0     		sub	sp, sp, #12
 582              	.LCFI32:
 583              		.cfi_def_cfa_offset 16
 584 0004 00AF     		add	r7, sp, #0
 585              	.LCFI33:
 586              		.cfi_def_cfa_register 7
 587 0006 7860     		str	r0, [r7, #4]
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   /* Check the parameters */
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   assert_param(IS_PWR_CLEAR_FLAG(PWR_FLAG));
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****          
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c ****   PWR->CR |=  PWR_FLAG << 2;
 588              		.loc 1 637 0
 589 0008 4FF4E043 		mov	r3, #28672
 590 000c C4F20003 		movt	r3, 16384
 591 0010 4FF4E042 		mov	r2, #28672
 592 0014 C4F20002 		movt	r2, 16384
 593 0018 1168     		ldr	r1, [r2, #0]
 594 001a 7A68     		ldr	r2, [r7, #4]
 595 001c 4FEA8202 		lsl	r2, r2, #2
 596 0020 0A43     		orrs	r2, r2, r1
 597 0022 1A60     		str	r2, [r3, #0]
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_pwr.c **** }
 598              		.loc 1 638 0
 599 0024 07F10C07 		add	r7, r7, #12
 600 0028 BD46     		mov	sp, r7
 601 002a 80BC     		pop	{r7}
 602 002c 7047     		bx	lr
 603              		.cfi_endproc
 604              	.LFE121:
 606 002e 00BF     		.text
 607              	.Letext0:
 608              		.file 3 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 609              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
 610              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Device\\STM32F4xx\\Inc
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_pwr.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:19     .text.PWR_DeInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:24     .text.PWR_DeInit:00000000 PWR_DeInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:53     .text.PWR_BackupAccessCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:58     .text.PWR_BackupAccessCmd:00000000 PWR_BackupAccessCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:91     .text.PWR_PVDLevelConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:96     .text.PWR_PVDLevelConfig:00000000 PWR_PVDLevelConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:145    .text.PWR_PVDCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:150    .text.PWR_PVDCmd:00000000 PWR_PVDCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:183    .text.PWR_WakeUpPinCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:188    .text.PWR_WakeUpPinCmd:00000000 PWR_WakeUpPinCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:221    .text.PWR_BackupRegulatorCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:226    .text.PWR_BackupRegulatorCmd:00000000 PWR_BackupRegulatorCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:259    .text.PWR_MainRegulatorModeConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:264    .text.PWR_MainRegulatorModeConfig:00000000 PWR_MainRegulatorModeConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:314    .text.PWR_FlashPowerDownCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:319    .text.PWR_FlashPowerDownCmd:00000000 PWR_FlashPowerDownCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:352    .text.PWR_EnterSTOPMode:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:357    .text.PWR_EnterSTOPMode:00000000 PWR_EnterSTOPMode
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:450    .text.PWR_EnterSTANDBYMode:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:455    .text.PWR_EnterSTANDBYMode:00000000 PWR_EnterSTANDBYMode
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:510    .text.PWR_GetFlagStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:515    .text.PWR_GetFlagStatus:00000000 PWR_GetFlagStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:565    .text.PWR_ClearFlag:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\cc0OYVXa.s:570    .text.PWR_ClearFlag:00000000 PWR_ClearFlag
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
RCC_APB1PeriphResetCmd
