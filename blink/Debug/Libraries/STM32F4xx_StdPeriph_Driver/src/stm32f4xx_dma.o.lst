   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.DMA_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	DMA_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	DMA_DeInit:
  25              	.LFB110:
  26              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @file    stm32f4xx_dma.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @version V1.0.0
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @date    30-September-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          functionalities of the Direct Memory Access controller (DMA):           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Initialization and Configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Data Counter
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Double Buffer mode configuration and command  
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - Interrupts and flags management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @verbatim
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          ===================================================================      
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                 How to use this driver
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          =================================================================== 
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          1. Enable The DMA controller clock using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA1, E
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA1 or using RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_DMA2, ENABLE)
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             function for DMA2.
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          2. Enable and configure the peripheral to be connected to the DMA Stream
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             (except for internal SRAM / FLASH memories: no initialization is 
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             necessary). 
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          3. For a given Stream, program the required configuration through following parameters
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Source and Destination addresses, Transfer Direction, Transfer size, Source and Des
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             data formats, Circular or Normal mode, Stream Priority level, Source and Destinatio
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Incrementation mode, FIFO mode and its Threshold (if needed), Burst mode for Source
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Destination (if needed) using the DMA_Init() function.
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             To avoid filling un-nesecessary fields, you can call DMA_StructInit() function
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             to initialize a given structure with default values (reset values), the modify
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             only necessary fields (ie. Source and Destination addresses, Transfer size and Data
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          4. Enable the NVIC and the corresponding interrupt(s) using the function 
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_ITConfig() if you need to use DMA interrupts. 
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          5. Optionally, if the Circular mode is enabled, you can use the Double buffer mode by 
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the second Memory address and the first Memory to be used through the function 
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeConfig(). Then enable the Double buffer mode through the functi
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             DMA_DoubleBufferModeCmd(). These operations must be done before step 6.
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          6. Enable the DMA stream using the DMA_Cmd() function. 
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          7. Activate the needed Stream Request using PPP_DMACmd() function for
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             any PPP peripheral except internal SRAM and FLASH (ie. SPI, USART ...)
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             The function allowing this operation is provided in each PPP peripheral
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             driver (ie. SPI_DMACmd for SPI peripheral).
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             Once the Stream is enabled, it is not possible to modify its configuration
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             unless the stream is stopped and disabled.
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             After enabling the Stream, it is advised to monitor the EN bit status using
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCmdStatus(). In case of configuration errors or bus errors
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             this bit will remain reset and all transfers on this Stream will remain on hold.   
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          8. Optionally, you can configure the number of data to be transferred
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             when the Stream is disabled (ie. after each Transfer Complete event
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             or when a Transfer Error occurs) using the function DMA_SetCurrDataCounter().
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             And you can get the number of remaining data to be transferred using 
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             the function DMA_GetCurrDataCounter() at run time (when the DMA Stream is
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *             enabled and running).  
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                   
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          9. To control DMA events you can use one of the following 
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              two methods:
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               a- Check on DMA Stream flags using the function DMA_GetFlagStatus().  
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *               b- Use DMA interrupts through the function DMA_ITConfig() at initialization
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  phase and DMA_GetITStatus() function into interrupt routines in
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                  communication phase.  
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              After checking on a flag you should clear it using DMA_ClearFlag()
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              function. And after checking on an interrupt event you should 
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              clear it using DMA_ClearITPendingBit() function.    
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          10. Optionally, if Circular mode and Double Buffer mode are enabled, you can modify
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Addresses using the function DMA_MemoryTargetConfig(). Make sure that
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the Memory Address to be modified is not the one currently in use by DMA Stream.
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              This condition can be monitored using the function DMA_GetCurrentMemoryTarget().
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          11. Optionally, Pause-Resume operations may be performed:
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              The DMA_Cmd() function may be used to perform Pause-Resume operation. When a 
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer is ongoing, calling this function to disable the Stream will cause the 
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              transfer to be paused. All configuration registers and the number of remaining 
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              data will be preserved. When calling again this function to re-enable the Stream, 
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *              the transfer will be resumed from the point where it was paused.          
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                 
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory-to-Memory transfer is possible by setting the address of the memory into
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Peripheral registers. In this mode, Circular mode and Double Buffer mode
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         are not allowed.
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   The FIFO is used mainly to reduce bus usage and to allow data packing/unpacking: it is
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         possible to set different Data Sizes for the Peripheral and the Memory (ie. you can set
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Half-Word data size for the peripheral to access its data register and set Word data si
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         for the Memory to gain in access time. Each two Half-words will be packed and written i
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         a single access to a Word in the Memory).
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  When FIFO is disabled, it is not allowed to configure different Data Sizes for Source
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination. In this case the Peripheral Data Size will be applied to both Source
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and Destination.               
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  @endverbatim
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                  
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @attention
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ******************************************************************************  
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Includes ------------------------------------------------------------------*/
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_dma.h"
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #include "stm32f4xx_rcc.h"
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA 
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief DMA driver modules
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */ 
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private typedef -----------------------------------------------------------*/
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private define ------------------------------------------------------------*/
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Masks Definition */
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_ENABLE_MASK (uint32_t)(DMA_SxCR_TCIE | DMA_SxCR_HTIE | \
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_SxCR_TEIE | DMA_SxCR_DMEIE)
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream0_IT_MASK     (uint32_t)(DMA_LISR_FEIF0 | DMA_LISR_DMEIF0 | \
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TEIF0 | DMA_LISR_HTIF0 | \
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                            DMA_LISR_TCIF0)
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream1_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 6)
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream2_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 16)
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream3_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK << 22)
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream4_IT_MASK     (uint32_t)(DMA_Stream0_IT_MASK | (uint32_t)0x20000000)
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream5_IT_MASK     (uint32_t)(DMA_Stream1_IT_MASK | (uint32_t)0x20000000)
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream6_IT_MASK     (uint32_t)(DMA_Stream2_IT_MASK | (uint32_t)0x20000000)
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define DMA_Stream7_IT_MASK     (uint32_t)(DMA_Stream3_IT_MASK | (uint32_t)0x20000000)
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define TRANSFER_IT_MASK        (uint32_t)0x0F3C0F3C
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define HIGH_ISR_MASK           (uint32_t)0x20000000
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** #define RESERVED_MASK           (uint32_t)0x0F7D0F7D  
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private macro -------------------------------------------------------------*/
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private variables ---------------------------------------------------------*/
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private function prototypes -----------------------------------------------*/
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /* Private functions ---------------------------------------------------------*/
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Private_Functions
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group1 Initialization and Configuration functions
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Initialization and Configuration functions
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                  Initialization and Configuration functions
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to initialize the DMA Stream source
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and destination addresses, incrementation and data sizes, transfer direction, 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer size, circular/normal mode selection, memory-to-memory mode selection 
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   and Stream priority value.
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA_Init() function follows the DMA configuration procedures as described in
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   reference manual (RM0090) except the first point: waiting on EN bit to be reset.
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This condition should be checked by user application using the function DMA_GetCmdStatus()
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   before calling the DMA_Init() function.
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Deinitialize the DMAy Streamx registers to their default reset values.
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
  27              		.loc 1 189 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 83B0     		sub	sp, sp, #12
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Disable the selected DMAy Streamx */
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
  43              		.loc 1 194 0
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 1B68     		ldr	r3, [r3, #0]
  46 000c 23F00102 		bic	r2, r3, #1
  47 0010 7B68     		ldr	r3, [r7, #4]
  48 0012 1A60     		str	r2, [r3, #0]
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx control register */
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR  = 0;
  49              		.loc 1 197 0
  50 0014 7B68     		ldr	r3, [r7, #4]
  51 0016 4FF00002 		mov	r2, #0
  52 001a 1A60     		str	r2, [r3, #0]
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx Number of Data to Transfer register */
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = 0;
  53              		.loc 1 200 0
  54 001c 7B68     		ldr	r3, [r7, #4]
  55 001e 4FF00002 		mov	r2, #0
  56 0022 5A60     		str	r2, [r3, #4]
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx peripheral address register */
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR  = 0;
  57              		.loc 1 203 0
  58 0024 7B68     		ldr	r3, [r7, #4]
  59 0026 4FF00002 		mov	r2, #0
  60 002a 9A60     		str	r2, [r3, #8]
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 0 address register */
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = 0;
  61              		.loc 1 206 0
  62 002c 7B68     		ldr	r3, [r7, #4]
  63 002e 4FF00002 		mov	r2, #0
  64 0032 DA60     		str	r2, [r3, #12]
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx memory 1 address register */
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = 0;
  65              		.loc 1 209 0
  66 0034 7B68     		ldr	r3, [r7, #4]
  67 0036 4FF00002 		mov	r2, #0
  68 003a 1A61     		str	r2, [r3, #16]
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset DMAy Streamx FIFO control register */
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = (uint32_t)0x00000021; 
  69              		.loc 1 212 0
  70 003c 7B68     		ldr	r3, [r7, #4]
  71 003e 4FF02102 		mov	r2, #33
  72 0042 5A61     		str	r2, [r3, #20]
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Reset interrupt pending bits for the selected stream */
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx == DMA1_Stream0)
  73              		.loc 1 215 0
  74 0044 7A68     		ldr	r2, [r7, #4]
  75 0046 46F21003 		movw	r3, #24592
  76 004a C4F20203 		movt	r3, 16386
  77 004e 9A42     		cmp	r2, r3
  78 0050 07D1     		bne	.L2
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream0 */
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream0_IT_MASK;
  79              		.loc 1 218 0
  80 0052 4FF4C043 		mov	r3, #24576
  81 0056 C4F20203 		movt	r3, 16386
  82 005a 4FF03D02 		mov	r2, #61
  83 005e 9A60     		str	r2, [r3, #8]
  84 0060 EBE0     		b	.L1
  85              	.L2:
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream1)
  86              		.loc 1 220 0
  87 0062 7A68     		ldr	r2, [r7, #4]
  88 0064 46F22803 		movw	r3, #24616
  89 0068 C4F20203 		movt	r3, 16386
  90 006c 9A42     		cmp	r2, r3
  91 006e 07D1     		bne	.L4
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream1 */
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream1_IT_MASK;
  92              		.loc 1 223 0
  93 0070 4FF4C043 		mov	r3, #24576
  94 0074 C4F20203 		movt	r3, 16386
  95 0078 4FF47462 		mov	r2, #3904
  96 007c 9A60     		str	r2, [r3, #8]
  97 007e DCE0     		b	.L1
  98              	.L4:
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream2)
  99              		.loc 1 225 0
 100 0080 7A68     		ldr	r2, [r7, #4]
 101 0082 46F24003 		movw	r3, #24640
 102 0086 C4F20203 		movt	r3, 16386
 103 008a 9A42     		cmp	r2, r3
 104 008c 07D1     		bne	.L5
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream2 */
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream2_IT_MASK;
 105              		.loc 1 228 0
 106 008e 4FF4C043 		mov	r3, #24576
 107 0092 C4F20203 		movt	r3, 16386
 108 0096 4FF47412 		mov	r2, #3997696
 109 009a 9A60     		str	r2, [r3, #8]
 110 009c CDE0     		b	.L1
 111              	.L5:
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream3)
 112              		.loc 1 230 0
 113 009e 7A68     		ldr	r2, [r7, #4]
 114 00a0 46F25803 		movw	r3, #24664
 115 00a4 C4F20203 		movt	r3, 16386
 116 00a8 9A42     		cmp	r2, r3
 117 00aa 07D1     		bne	.L6
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream3 */
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->LIFCR = DMA_Stream3_IT_MASK;
 118              		.loc 1 233 0
 119 00ac 4FF4C043 		mov	r3, #24576
 120 00b0 C4F20203 		movt	r3, 16386
 121 00b4 4FF07462 		mov	r2, #255852544
 122 00b8 9A60     		str	r2, [r3, #8]
 123 00ba BEE0     		b	.L1
 124              	.L6:
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream4)
 125              		.loc 1 235 0
 126 00bc 7A68     		ldr	r2, [r7, #4]
 127 00be 46F27003 		movw	r3, #24688
 128 00c2 C4F20203 		movt	r3, 16386
 129 00c6 9A42     		cmp	r2, r3
 130 00c8 09D1     		bne	.L7
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream4 */
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream4_IT_MASK;
 131              		.loc 1 238 0
 132 00ca 4FF4C043 		mov	r3, #24576
 133 00ce C4F20203 		movt	r3, 16386
 134 00d2 4FF03D02 		mov	r2, #61
 135 00d6 C2F20002 		movt	r2, 8192
 136 00da DA60     		str	r2, [r3, #12]
 137 00dc ADE0     		b	.L1
 138              	.L7:
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream5)
 139              		.loc 1 240 0
 140 00de 7A68     		ldr	r2, [r7, #4]
 141 00e0 46F28803 		movw	r3, #24712
 142 00e4 C4F20203 		movt	r3, 16386
 143 00e8 9A42     		cmp	r2, r3
 144 00ea 09D1     		bne	.L8
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream5 */
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream5_IT_MASK;
 145              		.loc 1 243 0
 146 00ec 4FF4C043 		mov	r3, #24576
 147 00f0 C4F20203 		movt	r3, 16386
 148 00f4 4FF47462 		mov	r2, #3904
 149 00f8 C2F20002 		movt	r2, 8192
 150 00fc DA60     		str	r2, [r3, #12]
 151 00fe 9CE0     		b	.L1
 152              	.L8:
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream6)
 153              		.loc 1 245 0
 154 0100 7A68     		ldr	r2, [r7, #4]
 155 0102 46F2A003 		movw	r3, #24736
 156 0106 C4F20203 		movt	r3, 16386
 157 010a 9A42     		cmp	r2, r3
 158 010c 09D1     		bne	.L9
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream6 */
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 159              		.loc 1 248 0
 160 010e 4FF4C043 		mov	r3, #24576
 161 0112 C4F20203 		movt	r3, 16386
 162 0116 4FF00002 		mov	r2, #0
 163 011a C2F23D02 		movt	r2, 8253
 164 011e DA60     		str	r2, [r3, #12]
 165 0120 8BE0     		b	.L1
 166              	.L9:
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA1_Stream7)
 167              		.loc 1 250 0
 168 0122 7A68     		ldr	r2, [r7, #4]
 169 0124 46F2B803 		movw	r3, #24760
 170 0128 C4F20203 		movt	r3, 16386
 171 012c 9A42     		cmp	r2, r3
 172 012e 07D1     		bne	.L10
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA1 Stream7 */
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA1->HIFCR = DMA_Stream7_IT_MASK;
 173              		.loc 1 253 0
 174 0130 4FF4C043 		mov	r3, #24576
 175 0134 C4F20203 		movt	r3, 16386
 176 0138 4FF03D52 		mov	r2, #792723456
 177 013c DA60     		str	r2, [r3, #12]
 178 013e 7CE0     		b	.L1
 179              	.L10:
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream0)
 180              		.loc 1 255 0
 181 0140 7A68     		ldr	r2, [r7, #4]
 182 0142 46F21043 		movw	r3, #25616
 183 0146 C4F20203 		movt	r3, 16386
 184 014a 9A42     		cmp	r2, r3
 185 014c 07D1     		bne	.L11
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream0 */
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream0_IT_MASK;
 186              		.loc 1 258 0
 187 014e 4FF4C843 		mov	r3, #25600
 188 0152 C4F20203 		movt	r3, 16386
 189 0156 4FF03D02 		mov	r2, #61
 190 015a 9A60     		str	r2, [r3, #8]
 191 015c 6DE0     		b	.L1
 192              	.L11:
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream1)
 193              		.loc 1 260 0
 194 015e 7A68     		ldr	r2, [r7, #4]
 195 0160 46F22843 		movw	r3, #25640
 196 0164 C4F20203 		movt	r3, 16386
 197 0168 9A42     		cmp	r2, r3
 198 016a 07D1     		bne	.L12
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream1 */
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream1_IT_MASK;
 199              		.loc 1 263 0
 200 016c 4FF4C843 		mov	r3, #25600
 201 0170 C4F20203 		movt	r3, 16386
 202 0174 4FF47462 		mov	r2, #3904
 203 0178 9A60     		str	r2, [r3, #8]
 204 017a 5EE0     		b	.L1
 205              	.L12:
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream2)
 206              		.loc 1 265 0
 207 017c 7A68     		ldr	r2, [r7, #4]
 208 017e 46F24043 		movw	r3, #25664
 209 0182 C4F20203 		movt	r3, 16386
 210 0186 9A42     		cmp	r2, r3
 211 0188 07D1     		bne	.L13
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream2 */
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream2_IT_MASK;
 212              		.loc 1 268 0
 213 018a 4FF4C843 		mov	r3, #25600
 214 018e C4F20203 		movt	r3, 16386
 215 0192 4FF47412 		mov	r2, #3997696
 216 0196 9A60     		str	r2, [r3, #8]
 217 0198 4FE0     		b	.L1
 218              	.L13:
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream3)
 219              		.loc 1 270 0
 220 019a 7A68     		ldr	r2, [r7, #4]
 221 019c 46F25843 		movw	r3, #25688
 222 01a0 C4F20203 		movt	r3, 16386
 223 01a4 9A42     		cmp	r2, r3
 224 01a6 07D1     		bne	.L14
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream3 */
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->LIFCR = DMA_Stream3_IT_MASK;
 225              		.loc 1 273 0
 226 01a8 4FF4C843 		mov	r3, #25600
 227 01ac C4F20203 		movt	r3, 16386
 228 01b0 4FF07462 		mov	r2, #255852544
 229 01b4 9A60     		str	r2, [r3, #8]
 230 01b6 40E0     		b	.L1
 231              	.L14:
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream4)
 232              		.loc 1 275 0
 233 01b8 7A68     		ldr	r2, [r7, #4]
 234 01ba 46F27043 		movw	r3, #25712
 235 01be C4F20203 		movt	r3, 16386
 236 01c2 9A42     		cmp	r2, r3
 237 01c4 09D1     		bne	.L15
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream4 */
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream4_IT_MASK;
 238              		.loc 1 278 0
 239 01c6 4FF4C843 		mov	r3, #25600
 240 01ca C4F20203 		movt	r3, 16386
 241 01ce 4FF03D02 		mov	r2, #61
 242 01d2 C2F20002 		movt	r2, 8192
 243 01d6 DA60     		str	r2, [r3, #12]
 244 01d8 2FE0     		b	.L1
 245              	.L15:
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream5)
 246              		.loc 1 280 0
 247 01da 7A68     		ldr	r2, [r7, #4]
 248 01dc 46F28843 		movw	r3, #25736
 249 01e0 C4F20203 		movt	r3, 16386
 250 01e4 9A42     		cmp	r2, r3
 251 01e6 09D1     		bne	.L16
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream5 */
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream5_IT_MASK;
 252              		.loc 1 283 0
 253 01e8 4FF4C843 		mov	r3, #25600
 254 01ec C4F20203 		movt	r3, 16386
 255 01f0 4FF47462 		mov	r2, #3904
 256 01f4 C2F20002 		movt	r2, 8192
 257 01f8 DA60     		str	r2, [r3, #12]
 258 01fa 1EE0     		b	.L1
 259              	.L16:
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else if (DMAy_Streamx == DMA2_Stream6)
 260              		.loc 1 285 0
 261 01fc 7A68     		ldr	r2, [r7, #4]
 262 01fe 46F2A043 		movw	r3, #25760
 263 0202 C4F20203 		movt	r3, 16386
 264 0206 9A42     		cmp	r2, r3
 265 0208 09D1     		bne	.L17
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Reset interrupt pending bits for DMA2 Stream6 */
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMA2->HIFCR = DMA_Stream6_IT_MASK;
 266              		.loc 1 288 0
 267 020a 4FF4C843 		mov	r3, #25600
 268 020e C4F20203 		movt	r3, 16386
 269 0212 4FF00002 		mov	r2, #0
 270 0216 C2F23D02 		movt	r2, 8253
 271 021a DA60     		str	r2, [r3, #12]
 272 021c 0DE0     		b	.L1
 273              	.L17:
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (DMAy_Streamx == DMA2_Stream7)
 274              		.loc 1 292 0
 275 021e 7A68     		ldr	r2, [r7, #4]
 276 0220 46F2B843 		movw	r3, #25784
 277 0224 C4F20203 		movt	r3, 16386
 278 0228 9A42     		cmp	r2, r3
 279 022a 06D1     		bne	.L1
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Reset interrupt pending bits for DMA2 Stream7 */
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMA2->HIFCR = DMA_Stream7_IT_MASK;
 280              		.loc 1 295 0
 281 022c 4FF4C843 		mov	r3, #25600
 282 0230 C4F20203 		movt	r3, 16386
 283 0234 4FF03D52 		mov	r2, #792723456
 284 0238 DA60     		str	r2, [r3, #12]
 285              	.L1:
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 286              		.loc 1 298 0
 287 023a 07F10C07 		add	r7, r7, #12
 288 023e BD46     		mov	sp, r7
 289 0240 80BC     		pop	{r7}
 290 0242 7047     		bx	lr
 291              		.cfi_endproc
 292              	.LFE110:
 294              		.section	.text.DMA_Init,"ax",%progbits
 295              		.align	2
 296              		.global	DMA_Init
 297              		.thumb
 298              		.thumb_func
 300              	DMA_Init:
 301              	.LFB111:
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Initializes the DMAy Streamx according to the specified parameters in 
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the DMA_InitStruct structure.
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before calling this function, it is recommended to check that the Stream 
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         is actually disabled using the function DMA_GetCmdStatus().  
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the configuration information for the specified DMA Stream.  
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 302              		.loc 1 312 0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 16
 305              		@ frame_needed = 1, uses_anonymous_args = 0
 306              		@ link register save eliminated.
 307 0000 80B4     		push	{r7}
 308              	.LCFI3:
 309              		.cfi_def_cfa_offset 4
 310              		.cfi_offset 7, -4
 311 0002 85B0     		sub	sp, sp, #20
 312              	.LCFI4:
 313              		.cfi_def_cfa_offset 24
 314 0004 00AF     		add	r7, sp, #0
 315              	.LCFI5:
 316              		.cfi_def_cfa_register 7
 317 0006 7860     		str	r0, [r7, #4]
 318 0008 3960     		str	r1, [r7, #0]
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 319              		.loc 1 313 0
 320 000a 4FF00003 		mov	r3, #0
 321 000e FB60     		str	r3, [r7, #12]
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CHANNEL(DMA_InitStruct->DMA_Channel));
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_DIRECTION(DMA_InitStruct->DMA_DIR));
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_MODE_STATE(DMA_InitStruct->DMA_FIFOMode));
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FIFO_THRESHOLD(DMA_InitStruct->DMA_FIFOThreshold));
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx CR Configuration ------------------*/
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx CR value */
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->CR;
 322              		.loc 1 333 0
 323 0010 7B68     		ldr	r3, [r7, #4]
 324 0012 1B68     		ldr	r3, [r3, #0]
 325 0014 FB60     		str	r3, [r7, #12]
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 326              		.loc 1 336 0
 327 0016 FA68     		ldr	r2, [r7, #12]
 328 0018 48F23F03 		movw	r3, #32831
 329 001c CFF21C03 		movt	r3, 61468
 330 0020 1340     		ands	r3, r3, r2
 331 0022 FB60     		str	r3, [r7, #12]
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_PL | DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | \
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_MINC | DMA_SxCR_PINC | DMA_SxCR_CIRC | \
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          DMA_SxCR_DIR));
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx: */
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CHSEL bits according to DMA_CHSEL value */
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set DIR bits according to DMA_DIR value */
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PL bits according to DMA_Priority value */
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set MBURST bits according to DMA_MemoryBurst value */
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Set PBURST bits according to DMA_PeripheralBurst value */
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 332              		.loc 1 352 0
 333 0024 3B68     		ldr	r3, [r7, #0]
 334 0026 1A68     		ldr	r2, [r3, #0]
 335 0028 3B68     		ldr	r3, [r7, #0]
 336 002a DB68     		ldr	r3, [r3, #12]
 337 002c 1A43     		orrs	r2, r2, r3
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 338              		.loc 1 353 0
 339 002e 3B68     		ldr	r3, [r7, #0]
 340 0030 5B69     		ldr	r3, [r3, #20]
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 341              		.loc 1 352 0
 342 0032 1A43     		orrs	r2, r2, r3
 343              		.loc 1 353 0
 344 0034 3B68     		ldr	r3, [r7, #0]
 345 0036 9B69     		ldr	r3, [r3, #24]
 346 0038 1A43     		orrs	r2, r2, r3
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 347              		.loc 1 354 0
 348 003a 3B68     		ldr	r3, [r7, #0]
 349 003c DB69     		ldr	r3, [r3, #28]
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 350              		.loc 1 353 0
 351 003e 1A43     		orrs	r2, r2, r3
 352              		.loc 1 354 0
 353 0040 3B68     		ldr	r3, [r7, #0]
 354 0042 1B6A     		ldr	r3, [r3, #32]
 355 0044 1A43     		orrs	r2, r2, r3
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 356              		.loc 1 355 0
 357 0046 3B68     		ldr	r3, [r7, #0]
 358 0048 5B6A     		ldr	r3, [r3, #36]
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 359              		.loc 1 354 0
 360 004a 1A43     		orrs	r2, r2, r3
 361              		.loc 1 355 0
 362 004c 3B68     		ldr	r3, [r7, #0]
 363 004e 9B6A     		ldr	r3, [r3, #40]
 364 0050 1A43     		orrs	r2, r2, r3
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 365              		.loc 1 356 0
 366 0052 3B68     		ldr	r3, [r7, #0]
 367 0054 5B6B     		ldr	r3, [r3, #52]
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****             DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 368              		.loc 1 355 0
 369 0056 1A43     		orrs	r2, r2, r3
 370              		.loc 1 356 0
 371 0058 3B68     		ldr	r3, [r7, #0]
 372 005a 9B6B     		ldr	r3, [r3, #56]
 373 005c 1343     		orrs	r3, r3, r2
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 374              		.loc 1 352 0
 375 005e FA68     		ldr	r2, [r7, #12]
 376 0060 1343     		orrs	r3, r3, r2
 377 0062 FB60     		str	r3, [r7, #12]
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR register */
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->CR = tmpreg;
 378              		.loc 1 359 0
 379 0064 7B68     		ldr	r3, [r7, #4]
 380 0066 FA68     		ldr	r2, [r7, #12]
 381 0068 1A60     		str	r2, [r3, #0]
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx FCR Configuration -----------------*/
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the DMAy_Streamx FCR value */
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = DMAy_Streamx->FCR;
 382              		.loc 1 363 0
 383 006a 7B68     		ldr	r3, [r7, #4]
 384 006c 5B69     		ldr	r3, [r3, #20]
 385 006e FB60     		str	r3, [r7, #12]
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Clear DMDIS and FTH bits */
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 386              		.loc 1 366 0
 387 0070 FB68     		ldr	r3, [r7, #12]
 388 0072 23F00703 		bic	r3, r3, #7
 389 0076 FB60     		str	r3, [r7, #12]
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure DMAy Streamx FIFO: 
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set DMDIS bits according to DMA_FIFOMode value 
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Set FTH bits according to DMA_FIFOThreshold value */
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 390              		.loc 1 371 0
 391 0078 3B68     		ldr	r3, [r7, #0]
 392 007a DA6A     		ldr	r2, [r3, #44]
 393 007c 3B68     		ldr	r3, [r7, #0]
 394 007e 1B6B     		ldr	r3, [r3, #48]
 395 0080 1343     		orrs	r3, r3, r2
 396 0082 FA68     		ldr	r2, [r7, #12]
 397 0084 1343     		orrs	r3, r3, r2
 398 0086 FB60     		str	r3, [r7, #12]
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx CR */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->FCR = tmpreg;
 399              		.loc 1 374 0
 400 0088 7B68     		ldr	r3, [r7, #4]
 401 008a FA68     		ldr	r2, [r7, #12]
 402 008c 5A61     		str	r2, [r3, #20]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx NDTR register */
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 403              		.loc 1 378 0
 404 008e 3B68     		ldr	r3, [r7, #0]
 405 0090 1A69     		ldr	r2, [r3, #16]
 406 0092 7B68     		ldr	r3, [r7, #4]
 407 0094 5A60     		str	r2, [r3, #4]
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx PAR Configuration -----------------*/
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx PAR */
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 408              		.loc 1 382 0
 409 0096 3B68     		ldr	r3, [r7, #0]
 410 0098 5A68     		ldr	r2, [r3, #4]
 411 009a 7B68     		ldr	r3, [r7, #4]
 412 009c 9A60     		str	r2, [r3, #8]
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M0AR */
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 413              		.loc 1 386 0
 414 009e 3B68     		ldr	r3, [r7, #0]
 415 00a0 9A68     		ldr	r2, [r3, #8]
 416 00a2 7B68     		ldr	r3, [r7, #4]
 417 00a4 DA60     		str	r2, [r3, #12]
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 418              		.loc 1 387 0
 419 00a6 07F11407 		add	r7, r7, #20
 420 00aa BD46     		mov	sp, r7
 421 00ac 80BC     		pop	{r7}
 422 00ae 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE111:
 426              		.section	.text.DMA_StructInit,"ax",%progbits
 427              		.align	2
 428              		.global	DMA_StructInit
 429              		.thumb
 430              		.thumb_func
 432              	DMA_StructInit:
 433              	.LFB112:
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will 
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         be initialized.
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 434              		.loc 1 396 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 8
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 0000 80B4     		push	{r7}
 440              	.LCFI6:
 441              		.cfi_def_cfa_offset 4
 442              		.cfi_offset 7, -4
 443 0002 83B0     		sub	sp, sp, #12
 444              	.LCFI7:
 445              		.cfi_def_cfa_offset 16
 446 0004 00AF     		add	r7, sp, #0
 447              	.LCFI8:
 448              		.cfi_def_cfa_register 7
 449 0006 7860     		str	r0, [r7, #4]
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /*-------------- Reset DMA init structure parameters values ----------------*/
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Channel member */
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Channel = 0;
 450              		.loc 1 399 0
 451 0008 7B68     		ldr	r3, [r7, #4]
 452 000a 4FF00002 		mov	r2, #0
 453 000e 1A60     		str	r2, [r3, #0]
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 454              		.loc 1 402 0
 455 0010 7B68     		ldr	r3, [r7, #4]
 456 0012 4FF00002 		mov	r2, #0
 457 0016 5A60     		str	r2, [r3, #4]
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Memory0BaseAddr member */
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Memory0BaseAddr = 0;
 458              		.loc 1 405 0
 459 0018 7B68     		ldr	r3, [r7, #4]
 460 001a 4FF00002 		mov	r2, #0
 461 001e 9A60     		str	r2, [r3, #8]
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_DIR member */
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralToMemory;
 462              		.loc 1 408 0
 463 0020 7B68     		ldr	r3, [r7, #4]
 464 0022 4FF00002 		mov	r2, #0
 465 0026 DA60     		str	r2, [r3, #12]
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_BufferSize member */
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 466              		.loc 1 411 0
 467 0028 7B68     		ldr	r3, [r7, #4]
 468 002a 4FF00002 		mov	r2, #0
 469 002e 1A61     		str	r2, [r3, #16]
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 470              		.loc 1 414 0
 471 0030 7B68     		ldr	r3, [r7, #4]
 472 0032 4FF00002 		mov	r2, #0
 473 0036 5A61     		str	r2, [r3, #20]
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryInc member */
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 474              		.loc 1 417 0
 475 0038 7B68     		ldr	r3, [r7, #4]
 476 003a 4FF00002 		mov	r2, #0
 477 003e 9A61     		str	r2, [r3, #24]
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 478              		.loc 1 420 0
 479 0040 7B68     		ldr	r3, [r7, #4]
 480 0042 4FF00002 		mov	r2, #0
 481 0046 DA61     		str	r2, [r3, #28]
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 482              		.loc 1 423 0
 483 0048 7B68     		ldr	r3, [r7, #4]
 484 004a 4FF00002 		mov	r2, #0
 485 004e 1A62     		str	r2, [r3, #32]
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Mode member */
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 486              		.loc 1 426 0
 487 0050 7B68     		ldr	r3, [r7, #4]
 488 0052 4FF00002 		mov	r2, #0
 489 0056 5A62     		str	r2, [r3, #36]
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_Priority member */
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 490              		.loc 1 429 0
 491 0058 7B68     		ldr	r3, [r7, #4]
 492 005a 4FF00002 		mov	r2, #0
 493 005e 9A62     		str	r2, [r3, #40]
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOMode member */
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOMode = DMA_FIFOMode_Disable;
 494              		.loc 1 432 0
 495 0060 7B68     		ldr	r3, [r7, #4]
 496 0062 4FF00002 		mov	r2, #0
 497 0066 DA62     		str	r2, [r3, #44]
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_FIFOThreshold member */
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
 498              		.loc 1 435 0
 499 0068 7B68     		ldr	r3, [r7, #4]
 500 006a 4FF00002 		mov	r2, #0
 501 006e 1A63     		str	r2, [r3, #48]
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_MemoryBurst member */
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_MemoryBurst = DMA_MemoryBurst_Single;
 502              		.loc 1 438 0
 503 0070 7B68     		ldr	r3, [r7, #4]
 504 0072 4FF00002 		mov	r2, #0
 505 0076 5A63     		str	r2, [r3, #52]
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Initialize the DMA_PeripheralBurst member */
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_InitStruct->DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 506              		.loc 1 441 0
 507 0078 7B68     		ldr	r3, [r7, #4]
 508 007a 4FF00002 		mov	r2, #0
 509 007e 9A63     		str	r2, [r3, #56]
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 510              		.loc 1 442 0
 511 0080 07F10C07 		add	r7, r7, #12
 512 0084 BD46     		mov	sp, r7
 513 0086 80BC     		pop	{r7}
 514 0088 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE112:
 518 008a 00BF     		.section	.text.DMA_Cmd,"ax",%progbits
 519              		.align	2
 520              		.global	DMA_Cmd
 521              		.thumb
 522              		.thumb_func
 524              	DMA_Cmd:
 525              	.LFB113:
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx.
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx. 
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  This function may be used to perform Pause-Resume operation. When a
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        transfer is ongoing, calling this function to disable the Stream will
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        cause the transfer to be paused. All configuration registers and the
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        number of remaining data will be preserved. When calling again this
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        function to re-enable the Stream, the transfer will be resumed from
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        the point where it was paused.          
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note  After configuring the DMA Stream (DMA_Init() function) and enabling the
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        stream, it is recommended to check (or wait until) the DMA Stream is
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        effectively enabled. A Stream may remain disabled if a configuration 
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        parameter is wrong.
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        After disabling a DMA Stream, it is also recommended to check (or wait
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        until) the DMA Stream is effectively disabled. If a Stream is disabled 
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        while a data transfer is ongoing, the current data will be transferred
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        and the Stream will be effectively disabled only after the transfer of
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *        this single data is finished.            
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *    
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 526              		.loc 1 471 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 8
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531 0000 80B4     		push	{r7}
 532              	.LCFI9:
 533              		.cfi_def_cfa_offset 4
 534              		.cfi_offset 7, -4
 535 0002 83B0     		sub	sp, sp, #12
 536              	.LCFI10:
 537              		.cfi_def_cfa_offset 16
 538 0004 00AF     		add	r7, sp, #0
 539              	.LCFI11:
 540              		.cfi_def_cfa_register 7
 541 0006 7860     		str	r0, [r7, #4]
 542 0008 0B46     		mov	r3, r1
 543 000a FB70     		strb	r3, [r7, #3]
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 544              		.loc 1 476 0
 545 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 546 000e 002B     		cmp	r3, #0
 547 0010 06D0     		beq	.L21
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the selected DMAy Streamx by setting EN bit */
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 548              		.loc 1 479 0
 549 0012 7B68     		ldr	r3, [r7, #4]
 550 0014 1B68     		ldr	r3, [r3, #0]
 551 0016 43F00102 		orr	r2, r3, #1
 552 001a 7B68     		ldr	r3, [r7, #4]
 553 001c 1A60     		str	r2, [r3, #0]
 554 001e 05E0     		b	.L20
 555              	.L21:
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the selected DMAy Streamx by clearing EN bit */
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 556              		.loc 1 484 0
 557 0020 7B68     		ldr	r3, [r7, #4]
 558 0022 1B68     		ldr	r3, [r3, #0]
 559 0024 23F00102 		bic	r2, r3, #1
 560 0028 7B68     		ldr	r3, [r7, #4]
 561 002a 1A60     		str	r2, [r3, #0]
 562              	.L20:
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 563              		.loc 1 486 0
 564 002c 07F10C07 		add	r7, r7, #12
 565 0030 BD46     		mov	sp, r7
 566 0032 80BC     		pop	{r7}
 567 0034 7047     		bx	lr
 568              		.cfi_endproc
 569              	.LFE113:
 571 0036 00BF     		.section	.text.DMA_PeriphIncOffsetSizeConfig,"ax",%progbits
 572              		.align	2
 573              		.global	DMA_PeriphIncOffsetSizeConfig
 574              		.thumb
 575              		.thumb_func
 577              	DMA_PeriphIncOffsetSizeConfig:
 578              	.LFB114:
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the PINC (Peripheral Increment address mode) bit is
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         set, if the peripheral address should be incremented with the data 
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         size (configured with PSIZE bits) or by a fixed offset equal to 4
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         (32-bit aligned addresses).
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function has no effect if the Peripheral Increment mode is disabled.
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *     
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_Pincos: specifies the Peripheral increment offset size.
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_Psize: Peripheral address increment is done  
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                   accordingly to PSIZE parameter.
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_PINCOS_WordAligned: Peripheral address increment offset is 
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                         fixed to 4 (32-bit aligned addresses). 
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_PeriphIncOffsetSizeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_Pincos)
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 579              		.loc 1 507 0
 580              		.cfi_startproc
 581              		@ args = 0, pretend = 0, frame = 8
 582              		@ frame_needed = 1, uses_anonymous_args = 0
 583              		@ link register save eliminated.
 584 0000 80B4     		push	{r7}
 585              	.LCFI12:
 586              		.cfi_def_cfa_offset 4
 587              		.cfi_offset 7, -4
 588 0002 83B0     		sub	sp, sp, #12
 589              	.LCFI13:
 590              		.cfi_def_cfa_offset 16
 591 0004 00AF     		add	r7, sp, #0
 592              	.LCFI14:
 593              		.cfi_def_cfa_register 7
 594 0006 7860     		str	r0, [r7, #4]
 595 0008 3960     		str	r1, [r7, #0]
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_PINCOS_SIZE(DMA_Pincos));
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed Peripheral increment offset */
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_Pincos != DMA_PINCOS_Psize)
 596              		.loc 1 513 0
 597 000a 3B68     		ldr	r3, [r7, #0]
 598 000c 002B     		cmp	r3, #0
 599 000e 06D0     		beq	.L24
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PINCOS bit with the input parameter */
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PINCOS;     
 600              		.loc 1 516 0
 601 0010 7B68     		ldr	r3, [r7, #4]
 602 0012 1B68     		ldr	r3, [r3, #0]
 603 0014 43F40042 		orr	r2, r3, #32768
 604 0018 7B68     		ldr	r3, [r7, #4]
 605 001a 1A60     		str	r2, [r3, #0]
 606 001c 05E0     		b	.L23
 607              	.L24:
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PINCOS bit: Peripheral address incremented according to PSIZE */
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PINCOS;    
 608              		.loc 1 521 0
 609 001e 7B68     		ldr	r3, [r7, #4]
 610 0020 1B68     		ldr	r3, [r3, #0]
 611 0022 23F40042 		bic	r2, r3, #32768
 612 0026 7B68     		ldr	r3, [r7, #4]
 613 0028 1A60     		str	r2, [r3, #0]
 614              	.L23:
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 615              		.loc 1 523 0
 616 002a 07F10C07 		add	r7, r7, #12
 617 002e BD46     		mov	sp, r7
 618 0030 80BC     		pop	{r7}
 619 0032 7047     		bx	lr
 620              		.cfi_endproc
 621              	.LFE114:
 623              		.section	.text.DMA_FlowControllerConfig,"ax",%progbits
 624              		.align	2
 625              		.global	DMA_FlowControllerConfig
 626              		.thumb
 627              		.thumb_func
 629              	DMA_FlowControllerConfig:
 630              	.LFB115:
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the flow controller for
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the next transactions (Peripheral or Memory).
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Before enabling this feature, check if the used peripheral supports 
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the Flow Controller mode or not.    
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FlowCtrl: specifies the DMA flow controller.
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Memory: DMAy_Streamx transactions flow controller is 
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                      the DMA controller.
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FlowCtrl_Peripheral: DMAy_Streamx transactions flow controller 
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                          is the peripheral.    
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_FlowControllerConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FlowCtrl)
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 631              		.loc 1 543 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 8
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636 0000 80B4     		push	{r7}
 637              	.LCFI15:
 638              		.cfi_def_cfa_offset 4
 639              		.cfi_offset 7, -4
 640 0002 83B0     		sub	sp, sp, #12
 641              	.LCFI16:
 642              		.cfi_def_cfa_offset 16
 643 0004 00AF     		add	r7, sp, #0
 644              	.LCFI17:
 645              		.cfi_def_cfa_register 7
 646 0006 7860     		str	r0, [r7, #4]
 647 0008 3960     		str	r1, [r7, #0]
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_FLOW_CTRL(DMA_FlowCtrl));
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the needed flow controller  */
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if(DMA_FlowCtrl != DMA_FlowCtrl_Memory)
 648              		.loc 1 549 0
 649 000a 3B68     		ldr	r3, [r7, #0]
 650 000c 002B     		cmp	r3, #0
 651 000e 06D0     		beq	.L27
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Configure DMA_SxCR_PFCTRL bit with the input parameter */
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_PFCTRL;   
 652              		.loc 1 552 0
 653 0010 7B68     		ldr	r3, [r7, #4]
 654 0012 1B68     		ldr	r3, [r3, #0]
 655 0014 43F02002 		orr	r2, r3, #32
 656 0018 7B68     		ldr	r3, [r7, #4]
 657 001a 1A60     		str	r2, [r3, #0]
 658 001c 05E0     		b	.L26
 659              	.L27:
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Clear the PFCTRL bit: Memory is the flow controller */
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_PFCTRL;    
 660              		.loc 1 557 0
 661 001e 7B68     		ldr	r3, [r7, #4]
 662 0020 1B68     		ldr	r3, [r3, #0]
 663 0022 23F02002 		bic	r2, r3, #32
 664 0026 7B68     		ldr	r3, [r7, #4]
 665 0028 1A60     		str	r2, [r3, #0]
 666              	.L26:
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 667              		.loc 1 559 0
 668 002a 07F10C07 		add	r7, r7, #12
 669 002e BD46     		mov	sp, r7
 670 0030 80BC     		pop	{r7}
 671 0032 7047     		bx	lr
 672              		.cfi_endproc
 673              	.LFE115:
 675              		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 676              		.align	2
 677              		.global	DMA_SetCurrDataCounter
 678              		.thumb
 679              		.thumb_func
 681              	DMA_SetCurrDataCounter:
 682              	.LFB116:
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group2 Data Counter functions
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Data Counter functions 
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            Data Counter functions
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and read the buffer size
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (number of data to be transferred). 
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be written only when the DMA Stream is disabled 
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. after transfer complete event).
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to write the Stream data counter value:
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter);
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note It is advised to use this function rather than DMA_Init() in situations where
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       only the Data buffer needs to be reloaded.
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @note If the Source and Destination Data Sizes are different, then the value written in
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       data counter, expressing the number of transfers, is relative to the number of 
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       transfers from the Peripheral point of view.
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       ie. If Memory data size is Word, Peripheral data size is Half-Words, then the value
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       to be configured in the data counter is the number of Half-Words to be transferred
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       from/to the peripheral.
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The DMA data counter can be read to indicate the number of remaining transfers for
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the relative DMA Stream. This counter is decremented at the end of each data 
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   transfer and when the transfer is complete: 
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Normal mode is selected: the counter is set to 0.
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - If Circular mode is selected: the counter is reloaded with the initial value
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      (configured before enabling the DMA Stream)
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The following function can be used to read the Stream data counter value:
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx);
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Writes the number of data units to be transferred on the DMAy Streamx.
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Counter: Number of data units to be transferred (from 0 to 65535) 
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          Number of data items depends only on the Peripheral data format.
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Bytes: number of data units is equal 
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total number of bytes to be transferred.
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Half-Word: number of data units is  
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         equal to total number of bytes to be transferred / 2.
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   If Peripheral data format is Word: number of data units is equal 
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to total  number of bytes to be transferred / 4.
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   In Memory-to-Memory transfer mode, the memory buffer pointed by 
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMAy_SxPAR register is considered as Peripheral.
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_SetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx, uint16_t Counter)
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 683              		.loc 1 627 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 8
 686              		@ frame_needed = 1, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 688 0000 80B4     		push	{r7}
 689              	.LCFI18:
 690              		.cfi_def_cfa_offset 4
 691              		.cfi_offset 7, -4
 692 0002 83B0     		sub	sp, sp, #12
 693              	.LCFI19:
 694              		.cfi_def_cfa_offset 16
 695 0004 00AF     		add	r7, sp, #0
 696              	.LCFI20:
 697              		.cfi_def_cfa_register 7
 698 0006 7860     		str	r0, [r7, #4]
 699 0008 0B46     		mov	r3, r1
 700 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write the number of data units to be transferred */
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->NDTR = (uint16_t)Counter;
 701              		.loc 1 632 0
 702 000c 7A88     		ldrh	r2, [r7, #2]
 703 000e 7B68     		ldr	r3, [r7, #4]
 704 0010 5A60     		str	r2, [r3, #4]
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 705              		.loc 1 633 0
 706 0012 07F10C07 		add	r7, r7, #12
 707 0016 BD46     		mov	sp, r7
 708 0018 80BC     		pop	{r7}
 709 001a 7047     		bx	lr
 710              		.cfi_endproc
 711              	.LFE116:
 713              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 714              		.align	2
 715              		.global	DMA_GetCurrDataCounter
 716              		.thumb
 717              		.thumb_func
 719              	DMA_GetCurrDataCounter:
 720              	.LFB117:
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer.
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The number of remaining data units in the current DMAy Streamx transfer.
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Stream_TypeDef* DMAy_Streamx)
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 721              		.loc 1 642 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 8
 724              		@ frame_needed = 1, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 726 0000 80B4     		push	{r7}
 727              	.LCFI21:
 728              		.cfi_def_cfa_offset 4
 729              		.cfi_offset 7, -4
 730 0002 83B0     		sub	sp, sp, #12
 731              	.LCFI22:
 732              		.cfi_def_cfa_offset 16
 733 0004 00AF     		add	r7, sp, #0
 734              	.LCFI23:
 735              		.cfi_def_cfa_register 7
 736 0006 7860     		str	r0, [r7, #4]
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the number of remaining data units for DMAy Streamx */
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return ((uint16_t)(DMAy_Streamx->NDTR));
 737              		.loc 1 647 0
 738 0008 7B68     		ldr	r3, [r7, #4]
 739 000a 5B68     		ldr	r3, [r3, #4]
 740 000c 9BB2     		uxth	r3, r3
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 741              		.loc 1 648 0
 742 000e 1846     		mov	r0, r3
 743 0010 07F10C07 		add	r7, r7, #12
 744 0014 BD46     		mov	sp, r7
 745 0016 80BC     		pop	{r7}
 746 0018 7047     		bx	lr
 747              		.cfi_endproc
 748              	.LFE117:
 750 001a 00BF     		.section	.text.DMA_DoubleBufferModeConfig,"ax",%progbits
 751              		.align	2
 752              		.global	DMA_DoubleBufferModeConfig
 753              		.thumb
 754              		.thumb_func
 756              	DMA_DoubleBufferModeConfig:
 757              	.LFB118:
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group3 Double Buffer mode functions
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Double Buffer mode functions 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                          Double Buffer mode functions
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides function allowing to configure and control the double 
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   buffer mode parameters.
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode can be used only when Circular mode is enabled.
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode cannot be used when transferring data from Memory to Memory.
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Double Buffer mode allows to set two different Memory addresses from/to which
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   the DMA controller will access alternatively (after completing transfer to/from target
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   memory 0, it will start transfer to/from target memory 1).
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This allows to reduce software overhead for double buffering and reduce the CPU
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   access time.
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions must be called before calling the DMA_Init() function:
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory);
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState);
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_DoubleBufferModeConfig() is called to configure the Memory 1 base address and the first
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Memory target from/to which the transfer will start after enabling the DMA Stream.
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Then DMA_DoubleBufferModeCmd() must be called to enable the Double Buffer mode (or disable 
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   it when it should not be used).
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Two functions can be called dynamically when the transfer is ongoing (or when the DMA Stream is 
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   stopped) to modify on of the target Memories addresses or to check wich Memory target is currentl
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    used:
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                             uint32_t DMA_MemoryTarget);
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     - uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx);
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_MemoryTargetConfig() can be called to modify the base address of one of the two target Memori
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The Memory of which the base address will be modified must not be currently be used by the DMA St
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   (ie. if the DMA Stream is currently transferring from Memory 1 then you can only modify base addr
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   of target Memory 0 and vice versa).
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   To check this condition, it is recommended to use the function DMA_GetCurrentMemoryTarget() which
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   returns the index of the Memory target currently in use by the DMA Stream.
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures, when the DMAy Streamx is disabled, the double buffer mode 
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         and the current memory target.
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  Memory1BaseAddr: the base address of the second buffer (Memory 1)  
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_CurrentMemory: specifies which memory will be first buffer for
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         the transactions when the Stream will be enabled. 
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: Memory 0 is the current buffer.
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: Memory 1 is the current buffer.  
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *       
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   Memory0BaseAddr is set by the DMA structure configuration in DMA_Init().
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t Memory1BaseAddr,
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                                 uint32_t DMA_CurrentMemory)
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 758              		.loc 1 720 0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 16
 761              		@ frame_needed = 1, uses_anonymous_args = 0
 762              		@ link register save eliminated.
 763 0000 80B4     		push	{r7}
 764              	.LCFI24:
 765              		.cfi_def_cfa_offset 4
 766              		.cfi_offset 7, -4
 767 0002 85B0     		sub	sp, sp, #20
 768              	.LCFI25:
 769              		.cfi_def_cfa_offset 24
 770 0004 00AF     		add	r7, sp, #0
 771              	.LCFI26:
 772              		.cfi_def_cfa_register 7
 773 0006 F860     		str	r0, [r7, #12]
 774 0008 B960     		str	r1, [r7, #8]
 775 000a 7A60     		str	r2, [r7, #4]
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_CurrentMemory));
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_CurrentMemory != DMA_Memory_0)
 776              		.loc 1 725 0
 777 000c 7B68     		ldr	r3, [r7, #4]
 778 000e 002B     		cmp	r3, #0
 779 0010 06D0     		beq	.L32
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 1 as current memory address */
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)(DMA_SxCR_CT);    
 780              		.loc 1 728 0
 781 0012 FB68     		ldr	r3, [r7, #12]
 782 0014 1B68     		ldr	r3, [r3, #0]
 783 0016 43F40022 		orr	r2, r3, #524288
 784 001a FB68     		ldr	r3, [r7, #12]
 785 001c 1A60     		str	r2, [r3, #0]
 786 001e 05E0     		b	.L33
 787              	.L32:
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set Memory 0 as current memory address */
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)(DMA_SxCR_CT);    
 788              		.loc 1 733 0
 789 0020 FB68     		ldr	r3, [r7, #12]
 790 0022 1B68     		ldr	r3, [r3, #0]
 791 0024 23F40022 		bic	r2, r3, #524288
 792 0028 FB68     		ldr	r3, [r7, #12]
 793 002a 1A60     		str	r2, [r3, #0]
 794              	.L33:
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Write to DMAy Streamx M1AR */
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMAy_Streamx->M1AR = Memory1BaseAddr;
 795              		.loc 1 737 0
 796 002c FB68     		ldr	r3, [r7, #12]
 797 002e BA68     		ldr	r2, [r7, #8]
 798 0030 1A61     		str	r2, [r3, #16]
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 799              		.loc 1 738 0
 800 0032 07F11407 		add	r7, r7, #20
 801 0036 BD46     		mov	sp, r7
 802 0038 80BC     		pop	{r7}
 803 003a 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE118:
 807              		.section	.text.DMA_DoubleBufferModeCmd,"ax",%progbits
 808              		.align	2
 809              		.global	DMA_DoubleBufferModeCmd
 810              		.thumb
 811              		.thumb_func
 813              	DMA_DoubleBufferModeCmd:
 814              	.LFB119:
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the double buffer mode for the selected DMA stream.
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note   This function can be called only when the DMA Stream is disabled.  
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the DMAy Streamx double buffer mode. 
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_DoubleBufferModeCmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {  
 815              		.loc 1 750 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 8
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820 0000 80B4     		push	{r7}
 821              	.LCFI27:
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 83B0     		sub	sp, sp, #12
 825              	.LCFI28:
 826              		.cfi_def_cfa_offset 16
 827 0004 00AF     		add	r7, sp, #0
 828              	.LCFI29:
 829              		.cfi_def_cfa_register 7
 830 0006 7860     		str	r0, [r7, #4]
 831 0008 0B46     		mov	r3, r1
 832 000a FB70     		strb	r3, [r7, #3]
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Configure the Double Buffer mode */
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (NewState != DISABLE)
 833              		.loc 1 756 0
 834 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 835 000e 002B     		cmp	r3, #0
 836 0010 06D0     		beq	.L35
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Enable the Double buffer mode */
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_DBM;
 837              		.loc 1 759 0
 838 0012 7B68     		ldr	r3, [r7, #4]
 839 0014 1B68     		ldr	r3, [r3, #0]
 840 0016 43F48022 		orr	r2, r3, #262144
 841 001a 7B68     		ldr	r3, [r7, #4]
 842 001c 1A60     		str	r2, [r3, #0]
 843 001e 05E0     		b	.L34
 844              	.L35:
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Disable the Double buffer mode */
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_DBM;
 845              		.loc 1 764 0
 846 0020 7B68     		ldr	r3, [r7, #4]
 847 0022 1B68     		ldr	r3, [r3, #0]
 848 0024 23F48022 		bic	r2, r3, #262144
 849 0028 7B68     		ldr	r3, [r7, #4]
 850 002a 1A60     		str	r2, [r3, #0]
 851              	.L34:
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 852              		.loc 1 766 0
 853 002c 07F10C07 		add	r7, r7, #12
 854 0030 BD46     		mov	sp, r7
 855 0032 80BC     		pop	{r7}
 856 0034 7047     		bx	lr
 857              		.cfi_endproc
 858              	.LFE119:
 860 0036 00BF     		.section	.text.DMA_MemoryTargetConfig,"ax",%progbits
 861              		.align	2
 862              		.global	DMA_MemoryTargetConfig
 863              		.thumb
 864              		.thumb_func
 866              	DMA_MemoryTargetConfig:
 867              	.LFB120:
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Configures the Memory address for the next buffer transfer in double
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         buffer mode (for dynamic use). This function can be called when the
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         DMA Stream is enabled and when the transfer is ongoing.  
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  MemoryBaseAddr: The base address of the target memory buffer
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_MemoryTarget: Next memory target to be used. 
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         This parameter can be one of the following values:
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_0: To use the memory address 0
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_Memory_1: To use the memory address 1
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * 
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    It is not allowed to modify the Base Address of a target Memory when
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          this target is involved in the current transfer. ie. If the DMA Stream
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is currently transferring to/from Memory 1, then it not possible to
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          modify Base address of Memory 1, but it is possible to modify Base
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          address of Memory 0.
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          To know which Memory is currently used, you can use the function
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          DMA_GetCurrentMemoryTarget().             
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *  
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_MemoryTargetConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t MemoryBaseAddr,
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                            uint32_t DMA_MemoryTarget)
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 868              		.loc 1 792 0
 869              		.cfi_startproc
 870              		@ args = 0, pretend = 0, frame = 16
 871              		@ frame_needed = 1, uses_anonymous_args = 0
 872              		@ link register save eliminated.
 873 0000 80B4     		push	{r7}
 874              	.LCFI30:
 875              		.cfi_def_cfa_offset 4
 876              		.cfi_offset 7, -4
 877 0002 85B0     		sub	sp, sp, #20
 878              	.LCFI31:
 879              		.cfi_def_cfa_offset 24
 880 0004 00AF     		add	r7, sp, #0
 881              	.LCFI32:
 882              		.cfi_def_cfa_register 7
 883 0006 F860     		str	r0, [r7, #12]
 884 0008 B960     		str	r1, [r7, #8]
 885 000a 7A60     		str	r2, [r7, #4]
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CURRENT_MEM(DMA_MemoryTarget));
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the Memory target to be configured */
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_MemoryTarget != DMA_Memory_0)
 886              		.loc 1 798 0
 887 000c 7B68     		ldr	r3, [r7, #4]
 888 000e 002B     		cmp	r3, #0
 889 0010 03D0     		beq	.L38
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M1AR */
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M1AR = MemoryBaseAddr;    
 890              		.loc 1 801 0
 891 0012 FB68     		ldr	r3, [r7, #12]
 892 0014 BA68     		ldr	r2, [r7, #8]
 893 0016 1A61     		str	r2, [r3, #16]
 894 0018 02E0     		b	.L37
 895              	.L38:
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Write to DMAy Streamx M0AR */
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy_Streamx->M0AR = MemoryBaseAddr;  
 896              		.loc 1 806 0
 897 001a FB68     		ldr	r3, [r7, #12]
 898 001c BA68     		ldr	r2, [r7, #8]
 899 001e DA60     		str	r2, [r3, #12]
 900              	.L37:
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 901              		.loc 1 808 0
 902 0020 07F11407 		add	r7, r7, #20
 903 0024 BD46     		mov	sp, r7
 904 0026 80BC     		pop	{r7}
 905 0028 7047     		bx	lr
 906              		.cfi_endproc
 907              	.LFE120:
 909 002a 00BF     		.section	.text.DMA_GetCurrentMemoryTarget,"ax",%progbits
 910              		.align	2
 911              		.global	DMA_GetCurrentMemoryTarget
 912              		.thumb
 913              		.thumb_func
 915              	DMA_GetCurrentMemoryTarget:
 916              	.LFB121:
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current memory target used by double buffer transfer.
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The memory target number: 0 for Memory0 or 1 for Memory1. 
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetCurrentMemoryTarget(DMA_Stream_TypeDef* DMAy_Streamx)
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 917              		.loc 1 817 0
 918              		.cfi_startproc
 919              		@ args = 0, pretend = 0, frame = 16
 920              		@ frame_needed = 1, uses_anonymous_args = 0
 921              		@ link register save eliminated.
 922 0000 80B4     		push	{r7}
 923              	.LCFI33:
 924              		.cfi_def_cfa_offset 4
 925              		.cfi_offset 7, -4
 926 0002 85B0     		sub	sp, sp, #20
 927              	.LCFI34:
 928              		.cfi_def_cfa_offset 24
 929 0004 00AF     		add	r7, sp, #0
 930              	.LCFI35:
 931              		.cfi_def_cfa_register 7
 932 0006 7860     		str	r0, [r7, #4]
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmp = 0;
 933              		.loc 1 818 0
 934 0008 4FF00003 		mov	r3, #0
 935 000c FB60     		str	r3, [r7, #12]
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the current memory target */
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & DMA_SxCR_CT) != 0)
 936              		.loc 1 824 0
 937 000e 7B68     		ldr	r3, [r7, #4]
 938 0010 1B68     		ldr	r3, [r3, #0]
 939 0012 03F40023 		and	r3, r3, #524288
 940 0016 002B     		cmp	r3, #0
 941 0018 03D0     		beq	.L41
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 1 */
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 1;
 942              		.loc 1 827 0
 943 001a 4FF00103 		mov	r3, #1
 944 001e FB60     		str	r3, [r7, #12]
 945 0020 02E0     		b	.L42
 946              	.L41:
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }  
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Current memory buffer used is Memory 0 */
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmp = 0;    
 947              		.loc 1 832 0
 948 0022 4FF00003 		mov	r3, #0
 949 0026 FB60     		str	r3, [r7, #12]
 950              	.L42:
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmp;
 951              		.loc 1 834 0
 952 0028 FB68     		ldr	r3, [r7, #12]
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 953              		.loc 1 835 0
 954 002a 1846     		mov	r0, r3
 955 002c 07F11407 		add	r7, r7, #20
 956 0030 BD46     		mov	sp, r7
 957 0032 80BC     		pop	{r7}
 958 0034 7047     		bx	lr
 959              		.cfi_endproc
 960              	.LFE121:
 962 0036 00BF     		.section	.text.DMA_GetCmdStatus,"ax",%progbits
 963              		.align	2
 964              		.global	DMA_GetCmdStatus
 965              		.thumb
 966              		.thumb_func
 968              	DMA_GetCmdStatus:
 969              	.LFB122:
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @}
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /** @defgroup DMA_Group4 Interrupts and flags management functions
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *  @brief   Interrupts and flags management functions 
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  *
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @verbatim   
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****                   Interrupts and flags management functions
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  ===============================================================================  
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   This subsection provides functions allowing to
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the DMA enable status
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Check the FIFO status 
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    - Configure the DMA Interrupts sources and check or clear the flags or pending bits status.   
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  1. DMA Enable status:
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After configuring the DMA Stream (DMA_Init() function) and enabling the stream,
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    it is recommended to check (or wait until) the DMA Stream is effectively enabled.
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    A Stream may remain disabled if a configuration parameter is wrong.
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    After disabling a DMA Stream, it is also recommended to check (or wait until) the DMA
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    Stream is effectively disabled. If a Stream is disabled while a data transfer is ongoing, 
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    the current data will be transferred and the Stream will be effectively disabled only after
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    this data transfer completion.
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    To monitor this state it is possible to use the following function:
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  2. FIFO Status:
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    It is possible to monitor the FIFO status when a transfer is ongoing using the following 
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    function:
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx); 
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  3. DMA Interrupts and Flags:
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   The user should identify which mode will be used in his application to manage the
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA controller events: Polling mode or Interrupt mode. 
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Polling Mode
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   =============
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA stream can be managed through 4 event Flags:
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     (x : DMA Stream number )
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_FLAG_FEIFx  : to indicate that a FIFO Mode Transfer Error event occurred.
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_FLAG_DMEIFx : to indicate that a Direct Mode Transfer Error event occurred.
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_FLAG_TEIFx  : to indicate that a Transfer Error event occurred.
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_FLAG_HTIFx  : to indicate that a Half-Transfer Complete event occurred.
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_FLAG_TCIFx  : to indicate that a Transfer Complete event occurred .       
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****    In this Mode it is advised to use the following functions:
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       - void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG);
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   Interrupt Mode
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ===============
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Each DMA Stream can be managed through 4 Interrupts:
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     Interrupt Source
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     ----------------
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        1. DMA_IT_FEIFx  : specifies the interrupt source for the  FIFO Mode Transfer Error event.
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        2. DMA_IT_DMEIFx : specifies the interrupt source for the Direct Mode Transfer Error event.
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        3. DMA_IT_TEIFx  : specifies the interrupt source for the Transfer Error event.
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        4. DMA_IT_HTIFx  : specifies the interrupt source for the Half-Transfer Complete event.
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****        5. DMA_IT_TCIFx  : specifies the interrupt source for the a Transfer Complete event. 
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   In this Mode it is advised to use the following functions:
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewStat
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****      - void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT);
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** @endverbatim
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @{
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the status of EN bit for the specified DMAy Streamx.
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *   
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @note    After configuring the DMA Stream (DMA_Init() function) and enabling
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          the stream, it is recommended to check (or wait until) the DMA Stream
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          is effectively enabled. A Stream may remain disabled if a configuration
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          parameter is wrong.
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          After disabling a DMA Stream, it is also recommended to check (or wait 
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          until) the DMA Stream is effectively disabled. If a Stream is disabled
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          while a data transfer is ongoing, the current data will be transferred
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          and the Stream will be effectively disabled only after the transfer
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          of this single data is finished.  
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *      
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 970              		.loc 1 926 0
 971              		.cfi_startproc
 972              		@ args = 0, pretend = 0, frame = 16
 973              		@ frame_needed = 1, uses_anonymous_args = 0
 974              		@ link register save eliminated.
 975 0000 80B4     		push	{r7}
 976              	.LCFI36:
 977              		.cfi_def_cfa_offset 4
 978              		.cfi_offset 7, -4
 979 0002 85B0     		sub	sp, sp, #20
 980              	.LCFI37:
 981              		.cfi_def_cfa_offset 24
 982 0004 00AF     		add	r7, sp, #0
 983              	.LCFI38:
 984              		.cfi_def_cfa_register 7
 985 0006 7860     		str	r0, [r7, #4]
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FunctionalState state = DISABLE;
 986              		.loc 1 927 0
 987 0008 4FF00003 		mov	r3, #0
 988 000c FB73     		strb	r3, [r7, #15]
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 989              		.loc 1 932 0
 990 000e 7B68     		ldr	r3, [r7, #4]
 991 0010 1B68     		ldr	r3, [r3, #0]
 992 0012 03F00103 		and	r3, r3, #1
 993 0016 DBB2     		uxtb	r3, r3
 994 0018 002B     		cmp	r3, #0
 995 001a 03D0     		beq	.L44
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = ENABLE;
 996              		.loc 1 935 0
 997 001c 4FF00103 		mov	r3, #1
 998 0020 FB73     		strb	r3, [r7, #15]
 999 0022 02E0     		b	.L45
 1000              	.L44:
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****         all transfers are complete) */
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     state = DISABLE;
 1001              		.loc 1 941 0
 1002 0024 4FF00003 		mov	r3, #0
 1003 0028 FB73     		strb	r3, [r7, #15]
 1004              	.L45:
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return state;
 1005              		.loc 1 943 0
 1006 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1007              		.loc 1 944 0
 1008 002c 1846     		mov	r0, r3
 1009 002e 07F11407 		add	r7, r7, #20
 1010 0032 BD46     		mov	sp, r7
 1011 0034 80BC     		pop	{r7}
 1012 0036 7047     		bx	lr
 1013              		.cfi_endproc
 1014              	.LFE122:
 1016              		.section	.text.DMA_GetFIFOStatus,"ax",%progbits
 1017              		.align	2
 1018              		.global	DMA_GetFIFOStatus
 1019              		.thumb
 1020              		.thumb_func
 1022              	DMA_GetFIFOStatus:
 1023              	.LFB123:
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Returns the current DMAy Streamx FIFO filled level.
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0 
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         to 7 to select the DMA Stream.
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The FIFO filling state.
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Less1QuarterFull: when FIFO is less than 1 quarter-full 
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *                                               and not empty.
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_1QuarterFull: if more than 1 quarter-full.
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_HalfFull: if more than 1 half-full.
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_3QuartersFull: if more than 3 quarters-full.
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Empty: when FIFO is empty
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *           - DMA_FIFOStatus_Full: when FIFO is full
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** uint32_t DMA_GetFIFOStatus(DMA_Stream_TypeDef* DMAy_Streamx)
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1024              		.loc 1 960 0
 1025              		.cfi_startproc
 1026              		@ args = 0, pretend = 0, frame = 16
 1027              		@ frame_needed = 1, uses_anonymous_args = 0
 1028              		@ link register save eliminated.
 1029 0000 80B4     		push	{r7}
 1030              	.LCFI39:
 1031              		.cfi_def_cfa_offset 4
 1032              		.cfi_offset 7, -4
 1033 0002 85B0     		sub	sp, sp, #20
 1034              	.LCFI40:
 1035              		.cfi_def_cfa_offset 24
 1036 0004 00AF     		add	r7, sp, #0
 1037              	.LCFI41:
 1038              		.cfi_def_cfa_register 7
 1039 0006 7860     		str	r0, [r7, #4]
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1040              		.loc 1 961 0
 1041 0008 4FF00003 		mov	r3, #0
 1042 000c FB60     		str	r3, [r7, #12]
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Get the FIFO level bits */
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg = (uint32_t)((DMAy_Streamx->FCR & DMA_SxFCR_FS));
 1043              		.loc 1 967 0
 1044 000e 7B68     		ldr	r3, [r7, #4]
 1045 0010 5B69     		ldr	r3, [r3, #20]
 1046 0012 03F03803 		and	r3, r3, #56
 1047 0016 FB60     		str	r3, [r7, #12]
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return tmpreg;
 1048              		.loc 1 969 0
 1049 0018 FB68     		ldr	r3, [r7, #12]
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1050              		.loc 1 970 0
 1051 001a 1846     		mov	r0, r3
 1052 001c 07F11407 		add	r7, r7, #20
 1053 0020 BD46     		mov	sp, r7
 1054 0022 80BC     		pop	{r7}
 1055 0024 7047     		bx	lr
 1056              		.cfi_endproc
 1057              	.LFE123:
 1059 0026 00BF     		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 1060              		.align	2
 1061              		.global	DMA_GetFlagStatus
 1062              		.thumb
 1063              		.thumb_func
 1065              	DMA_GetFlagStatus:
 1066              	.LFB124:
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx flag is set or not.
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to check.
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_FLAG (SET or RESET).
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1067              		.loc 1 987 0
 1068              		.cfi_startproc
 1069              		@ args = 0, pretend = 0, frame = 24
 1070              		@ frame_needed = 1, uses_anonymous_args = 0
 1071              		@ link register save eliminated.
 1072 0000 80B4     		push	{r7}
 1073              	.LCFI42:
 1074              		.cfi_def_cfa_offset 4
 1075              		.cfi_offset 7, -4
 1076 0002 87B0     		sub	sp, sp, #28
 1077              	.LCFI43:
 1078              		.cfi_def_cfa_offset 32
 1079 0004 00AF     		add	r7, sp, #0
 1080              	.LCFI44:
 1081              		.cfi_def_cfa_register 7
 1082 0006 7860     		str	r0, [r7, #4]
 1083 0008 3960     		str	r1, [r7, #0]
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   FlagStatus bitstatus = RESET;
 1084              		.loc 1 988 0
 1085 000a 4FF00003 		mov	r3, #0
 1086 000e FB75     		strb	r3, [r7, #23]
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0;
 1087              		.loc 1 990 0
 1088 0010 4FF00003 		mov	r3, #0
 1089 0014 FB60     		str	r3, [r7, #12]
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMA_FLAG));
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1090              		.loc 1 997 0
 1091 0016 7A68     		ldr	r2, [r7, #4]
 1092 0018 46F20F43 		movw	r3, #25615
 1093 001c C4F20203 		movt	r3, 16386
 1094 0020 9A42     		cmp	r2, r3
 1095 0022 05D8     		bhi	.L48
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1096              		.loc 1 1000 0
 1097 0024 4FF4C043 		mov	r3, #24576
 1098 0028 C4F20203 		movt	r3, 16386
 1099 002c 3B61     		str	r3, [r7, #16]
 1100 002e 04E0     		b	.L49
 1101              	.L48:
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1102              		.loc 1 1005 0
 1103 0030 4FF4C843 		mov	r3, #25600
 1104 0034 C4F20203 		movt	r3, 16386
 1105 0038 3B61     		str	r3, [r7, #16]
 1106              	.L49:
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the flag is in HISR or LISR */
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1107              		.loc 1 1009 0
 1108 003a 3B68     		ldr	r3, [r7, #0]
 1109 003c 03F00053 		and	r3, r3, #536870912
 1110 0040 002B     		cmp	r3, #0
 1111 0042 03D0     		beq	.L50
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR;
 1112              		.loc 1 1012 0
 1113 0044 3B69     		ldr	r3, [r7, #16]
 1114 0046 5B68     		ldr	r3, [r3, #4]
 1115 0048 FB60     		str	r3, [r7, #12]
 1116 004a 02E0     		b	.L51
 1117              	.L50:
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR;
 1118              		.loc 1 1017 0
 1119 004c 3B69     		ldr	r3, [r7, #16]
 1120 004e 1B68     		ldr	r3, [r3, #0]
 1121 0050 FB60     		str	r3, [r7, #12]
 1122              	.L51:
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Mask the reserved bits */
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1123              		.loc 1 1021 0
 1124 0052 FA68     		ldr	r2, [r7, #12]
 1125 0054 40F67D73 		movw	r3, #3965
 1126 0058 C0F67D73 		movt	r3, 3965
 1127 005c 1340     		ands	r3, r3, r2
 1128 005e FB60     		str	r3, [r7, #12]
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA flag */
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 1129              		.loc 1 1024 0
 1130 0060 FA68     		ldr	r2, [r7, #12]
 1131 0062 3B68     		ldr	r3, [r7, #0]
 1132 0064 1340     		ands	r3, r3, r2
 1133 0066 002B     		cmp	r3, #0
 1134 0068 03D0     		beq	.L52
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is set */
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1135              		.loc 1 1027 0
 1136 006a 4FF00103 		mov	r3, #1
 1137 006e FB75     		strb	r3, [r7, #23]
 1138 0070 02E0     		b	.L53
 1139              	.L52:
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_FLAG is reset */
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1140              		.loc 1 1032 0
 1141 0072 4FF00003 		mov	r3, #0
 1142 0076 FB75     		strb	r3, [r7, #23]
 1143              	.L53:
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_FLAG status */
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1144              		.loc 1 1036 0
 1145 0078 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1146              		.loc 1 1037 0
 1147 007a 1846     		mov	r0, r3
 1148 007c 07F11C07 		add	r7, r7, #28
 1149 0080 BD46     		mov	sp, r7
 1150 0082 80BC     		pop	{r7}
 1151 0084 7047     		bx	lr
 1152              		.cfi_endproc
 1153              	.LFE124:
 1155 0086 00BF     		.section	.text.DMA_ClearFlag,"ax",%progbits
 1156              		.align	2
 1157              		.global	DMA_ClearFlag
 1158              		.thumb
 1159              		.thumb_func
 1161              	DMA_ClearFlag:
 1162              	.LFB125:
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's pending flags.
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_FLAG: specifies the flag to clear.
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TCIFx:  Streamx transfer complete flag
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_HTIFx:  Streamx half transfer complete flag
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_TEIFx:  Streamx transfer error flag
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_DMEIFx: Streamx direct mode error flag
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.   
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1163              		.loc 1 1054 0
 1164              		.cfi_startproc
 1165              		@ args = 0, pretend = 0, frame = 16
 1166              		@ frame_needed = 1, uses_anonymous_args = 0
 1167              		@ link register save eliminated.
 1168 0000 80B4     		push	{r7}
 1169              	.LCFI45:
 1170              		.cfi_def_cfa_offset 4
 1171              		.cfi_offset 7, -4
 1172 0002 85B0     		sub	sp, sp, #20
 1173              	.LCFI46:
 1174              		.cfi_def_cfa_offset 24
 1175 0004 00AF     		add	r7, sp, #0
 1176              	.LCFI47:
 1177              		.cfi_def_cfa_register 7
 1178 0006 7860     		str	r0, [r7, #4]
 1179 0008 3960     		str	r1, [r7, #0]
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1180              		.loc 1 1062 0
 1181 000a 7A68     		ldr	r2, [r7, #4]
 1182 000c 46F20F43 		movw	r3, #25615
 1183 0010 C4F20203 		movt	r3, 16386
 1184 0014 9A42     		cmp	r2, r3
 1185 0016 05D8     		bhi	.L55
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1186              		.loc 1 1065 0
 1187 0018 4FF4C043 		mov	r3, #24576
 1188 001c C4F20203 		movt	r3, 16386
 1189 0020 FB60     		str	r3, [r7, #12]
 1190 0022 04E0     		b	.L56
 1191              	.L55:
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1192              		.loc 1 1070 0
 1193 0024 4FF4C843 		mov	r3, #25600
 1194 0028 C4F20203 		movt	r3, 16386
 1195 002c FB60     		str	r3, [r7, #12]
 1196              	.L56:
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 1197              		.loc 1 1074 0
 1198 002e 3B68     		ldr	r3, [r7, #0]
 1199 0030 03F00053 		and	r3, r3, #536870912
 1200 0034 002B     		cmp	r3, #0
 1201 0036 08D0     		beq	.L57
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear flag bits */
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1202              		.loc 1 1077 0
 1203 0038 3A68     		ldr	r2, [r7, #0]
 1204 003a 40F67D73 		movw	r3, #3965
 1205 003e C0F67D73 		movt	r3, 3965
 1206 0042 1340     		ands	r3, r3, r2
 1207 0044 FA68     		ldr	r2, [r7, #12]
 1208 0046 D360     		str	r3, [r2, #12]
 1209 0048 07E0     		b	.L54
 1210              	.L57:
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear flag bits */
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 1211              		.loc 1 1082 0
 1212 004a 3A68     		ldr	r2, [r7, #0]
 1213 004c 40F67D73 		movw	r3, #3965
 1214 0050 C0F67D73 		movt	r3, 3965
 1215 0054 1340     		ands	r3, r3, r2
 1216 0056 FA68     		ldr	r2, [r7, #12]
 1217 0058 9360     		str	r3, [r2, #8]
 1218              	.L54:
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }    
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1219              		.loc 1 1084 0
 1220 005a 07F11407 		add	r7, r7, #20
 1221 005e BD46     		mov	sp, r7
 1222 0060 80BC     		pop	{r7}
 1223 0062 7047     		bx	lr
 1224              		.cfi_endproc
 1225              	.LFE125:
 1227              		.section	.text.DMA_ITConfig,"ax",%progbits
 1228              		.align	2
 1229              		.global	DMA_ITConfig
 1230              		.thumb
 1231              		.thumb_func
 1233              	DMA_ITConfig:
 1234              	.LFB126:
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Enables or disables the specified DMAy Streamx interrupts.
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param DMA_IT: specifies the DMA interrupt sources to be enabled or disabled. 
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TC:  Transfer complete interrupt mask
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HT:  Half transfer complete interrupt mask
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TE:  Transfer error interrupt mask
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FE:  FIFO error interrupt mask
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be: ENABLE or DISABLE.
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1235              		.loc 1 1101 0
 1236              		.cfi_startproc
 1237              		@ args = 0, pretend = 0, frame = 16
 1238              		@ frame_needed = 1, uses_anonymous_args = 0
 1239              		@ link register save eliminated.
 1240 0000 80B4     		push	{r7}
 1241              	.LCFI48:
 1242              		.cfi_def_cfa_offset 4
 1243              		.cfi_offset 7, -4
 1244 0002 85B0     		sub	sp, sp, #20
 1245              	.LCFI49:
 1246              		.cfi_def_cfa_offset 24
 1247 0004 00AF     		add	r7, sp, #0
 1248              	.LCFI50:
 1249              		.cfi_def_cfa_register 7
 1250 0006 F860     		str	r0, [r7, #12]
 1251 0008 B960     		str	r1, [r7, #8]
 1252 000a 1346     		mov	r3, r2
 1253 000c FB71     		strb	r3, [r7, #7]
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a FIFO interrupt */
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & DMA_IT_FE) != 0)
 1254              		.loc 1 1108 0
 1255 000e BB68     		ldr	r3, [r7, #8]
 1256 0010 03F08003 		and	r3, r3, #128
 1257 0014 002B     		cmp	r3, #0
 1258 0016 0FD0     		beq	.L60
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1259              		.loc 1 1110 0
 1260 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1261 001a 002B     		cmp	r3, #0
 1262 001c 06D0     		beq	.L61
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA FIFO interrupts */
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 1263              		.loc 1 1113 0
 1264 001e FB68     		ldr	r3, [r7, #12]
 1265 0020 5B69     		ldr	r3, [r3, #20]
 1266 0022 43F08002 		orr	r2, r3, #128
 1267 0026 FB68     		ldr	r3, [r7, #12]
 1268 0028 5A61     		str	r2, [r3, #20]
 1269 002a 05E0     		b	.L60
 1270              	.L61:
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else 
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA FIFO interrupts */
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 1271              		.loc 1 1118 0
 1272 002c FB68     		ldr	r3, [r7, #12]
 1273 002e 5B69     		ldr	r3, [r3, #20]
 1274 0030 23F08002 		bic	r2, r3, #128
 1275 0034 FB68     		ldr	r3, [r7, #12]
 1276 0036 5A61     		str	r2, [r3, #20]
 1277              	.L60:
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the DMA_IT parameter contains a Transfer interrupt */
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMA_IT != DMA_IT_FE)
 1278              		.loc 1 1123 0
 1279 0038 BB68     		ldr	r3, [r7, #8]
 1280 003a 802B     		cmp	r3, #128
 1281 003c 15D0     		beq	.L59
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     if (NewState != DISABLE)
 1282              		.loc 1 1125 0
 1283 003e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1284 0040 002B     		cmp	r3, #0
 1285 0042 08D0     		beq	.L63
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Enable the selected DMA transfer interrupts */
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 1286              		.loc 1 1128 0
 1287 0044 FB68     		ldr	r3, [r7, #12]
 1288 0046 1A68     		ldr	r2, [r3, #0]
 1289 0048 BB68     		ldr	r3, [r7, #8]
 1290 004a 03F01E03 		and	r3, r3, #30
 1291 004e 1A43     		orrs	r2, r2, r3
 1292 0050 FB68     		ldr	r3, [r7, #12]
 1293 0052 1A60     		str	r2, [r3, #0]
 1294 0054 09E0     		b	.L59
 1295              	.L63:
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       /* Disable the selected DMA transfer interrupts */
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****       DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 1296              		.loc 1 1133 0
 1297 0056 FB68     		ldr	r3, [r7, #12]
 1298 0058 1A68     		ldr	r2, [r3, #0]
 1299 005a BB68     		ldr	r3, [r7, #8]
 1300 005c 03F01E03 		and	r3, r3, #30
 1301 0060 6FEA0303 		mvn	r3, r3
 1302 0064 1A40     		ands	r2, r2, r3
 1303 0066 FB68     		ldr	r3, [r7, #12]
 1304 0068 1A60     		str	r2, [r3, #0]
 1305              	.L59:
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     }    
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1306              		.loc 1 1136 0
 1307 006a 07F11407 		add	r7, r7, #20
 1308 006e BD46     		mov	sp, r7
 1309 0070 80BC     		pop	{r7}
 1310 0072 7047     		bx	lr
 1311              		.cfi_endproc
 1312              	.LFE126:
 1314              		.section	.text.DMA_GetITStatus,"ax",%progbits
 1315              		.align	2
 1316              		.global	DMA_GetITStatus
 1317              		.thumb
 1318              		.thumb_func
 1320              	DMA_GetITStatus:
 1321              	.LFB127:
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Checks whether the specified DMAy Streamx interrupt has occurred or not.
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt source to check.
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be one of the following values:
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval The new state of DMA_IT (SET or RESET).
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1322              		.loc 1 1153 0
 1323              		.cfi_startproc
 1324              		@ args = 0, pretend = 0, frame = 24
 1325              		@ frame_needed = 1, uses_anonymous_args = 0
 1326              		@ link register save eliminated.
 1327 0000 80B4     		push	{r7}
 1328              	.LCFI51:
 1329              		.cfi_def_cfa_offset 4
 1330              		.cfi_offset 7, -4
 1331 0002 87B0     		sub	sp, sp, #28
 1332              	.LCFI52:
 1333              		.cfi_def_cfa_offset 32
 1334 0004 00AF     		add	r7, sp, #0
 1335              	.LCFI53:
 1336              		.cfi_def_cfa_register 7
 1337 0006 7860     		str	r0, [r7, #4]
 1338 0008 3960     		str	r1, [r7, #0]
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   ITStatus bitstatus = RESET;
 1339              		.loc 1 1154 0
 1340 000a 4FF00003 		mov	r3, #0
 1341 000e FB75     		strb	r3, [r7, #23]
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   uint32_t tmpreg = 0, enablestatus = 0;
 1342              		.loc 1 1156 0
 1343 0010 4FF00003 		mov	r3, #0
 1344 0014 FB60     		str	r3, [r7, #12]
 1345 0016 4FF00003 		mov	r3, #0
 1346 001a BB60     		str	r3, [r7, #8]
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_GET_IT(DMA_IT));
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1347              		.loc 1 1163 0
 1348 001c 7A68     		ldr	r2, [r7, #4]
 1349 001e 46F20F43 		movw	r3, #25615
 1350 0022 C4F20203 		movt	r3, 16386
 1351 0026 9A42     		cmp	r2, r3
 1352 0028 05D8     		bhi	.L65
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1353              		.loc 1 1166 0
 1354 002a 4FF4C043 		mov	r3, #24576
 1355 002e C4F20203 		movt	r3, 16386
 1356 0032 3B61     		str	r3, [r7, #16]
 1357 0034 04E0     		b	.L66
 1358              	.L65:
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1359              		.loc 1 1171 0
 1360 0036 4FF4C843 		mov	r3, #25600
 1361 003a C4F20203 		movt	r3, 16386
 1362 003e 3B61     		str	r3, [r7, #16]
 1363              	.L66:
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt enable bit is in the CR or FCR register */
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 1364              		.loc 1 1175 0
 1365 0040 3A68     		ldr	r2, [r7, #0]
 1366 0042 40F63C73 		movw	r3, #3900
 1367 0046 C0F63C73 		movt	r3, 3900
 1368 004a 1340     		ands	r3, r3, r2
 1369 004c 002B     		cmp	r3, #0
 1370 004e 0BD0     		beq	.L67
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get the interrupt enable position mask in CR register */
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 1371              		.loc 1 1178 0
 1372 0050 3B68     		ldr	r3, [r7, #0]
 1373 0052 4FEAD323 		lsr	r3, r3, #11
 1374 0056 03F01E03 		and	r3, r3, #30
 1375 005a FB60     		str	r3, [r7, #12]
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in CR register */
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 1376              		.loc 1 1181 0
 1377 005c 7B68     		ldr	r3, [r7, #4]
 1378 005e 1A68     		ldr	r2, [r3, #0]
 1379 0060 FB68     		ldr	r3, [r7, #12]
 1380 0062 1340     		ands	r3, r3, r2
 1381 0064 BB60     		str	r3, [r7, #8]
 1382 0066 04E0     		b	.L68
 1383              	.L67:
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Check the enable bit in FCR register */
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 1384              		.loc 1 1186 0
 1385 0068 7B68     		ldr	r3, [r7, #4]
 1386 006a 5B69     		ldr	r3, [r3, #20]
 1387 006c 03F08003 		and	r3, r3, #128
 1388 0070 BB60     		str	r3, [r7, #8]
 1389              	.L68:
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****  
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if the interrupt pending flag is in LISR or HISR */
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1390              		.loc 1 1190 0
 1391 0072 3B68     		ldr	r3, [r7, #0]
 1392 0074 03F00053 		and	r3, r3, #536870912
 1393 0078 002B     		cmp	r3, #0
 1394 007a 03D0     		beq	.L69
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy HISR register value */
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->HISR ;
 1395              		.loc 1 1193 0
 1396 007c 3B69     		ldr	r3, [r7, #16]
 1397 007e 5B68     		ldr	r3, [r3, #4]
 1398 0080 FB60     		str	r3, [r7, #12]
 1399 0082 02E0     		b	.L70
 1400              	.L69:
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Get DMAy LISR register value */
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     tmpreg = DMAy->LISR ;
 1401              		.loc 1 1198 0
 1402 0084 3B69     		ldr	r3, [r7, #16]
 1403 0086 1B68     		ldr	r3, [r3, #0]
 1404 0088 FB60     		str	r3, [r7, #12]
 1405              	.L70:
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* mask all reserved bits */
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   tmpreg &= (uint32_t)RESERVED_MASK;
 1406              		.loc 1 1202 0
 1407 008a FA68     		ldr	r2, [r7, #12]
 1408 008c 40F67D73 		movw	r3, #3965
 1409 0090 C0F67D73 		movt	r3, 3965
 1410 0094 1340     		ands	r3, r3, r2
 1411 0096 FB60     		str	r3, [r7, #12]
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the status of the specified DMA interrupt */
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 1412              		.loc 1 1205 0
 1413 0098 FA68     		ldr	r2, [r7, #12]
 1414 009a 3B68     		ldr	r3, [r7, #0]
 1415 009c 1340     		ands	r3, r3, r2
 1416 009e 002B     		cmp	r3, #0
 1417 00a0 06D0     		beq	.L71
 1418              		.loc 1 1205 0 is_stmt 0 discriminator 1
 1419 00a2 BB68     		ldr	r3, [r7, #8]
 1420 00a4 002B     		cmp	r3, #0
 1421 00a6 03D0     		beq	.L71
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is set */
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = SET;
 1422              		.loc 1 1208 0 is_stmt 1
 1423 00a8 4FF00103 		mov	r3, #1
 1424 00ac FB75     		strb	r3, [r7, #23]
 1425 00ae 02E0     		b	.L72
 1426              	.L71:
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMA_IT is reset */
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     bitstatus = RESET;
 1427              		.loc 1 1213 0
 1428 00b0 4FF00003 		mov	r3, #0
 1429 00b4 FB75     		strb	r3, [r7, #23]
 1430              	.L72:
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Return the DMA_IT status */
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   return  bitstatus;
 1431              		.loc 1 1217 0
 1432 00b6 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1433              		.loc 1 1218 0
 1434 00b8 1846     		mov	r0, r3
 1435 00ba 07F11C07 		add	r7, r7, #28
 1436 00be BD46     		mov	sp, r7
 1437 00c0 80BC     		pop	{r7}
 1438 00c2 7047     		bx	lr
 1439              		.cfi_endproc
 1440              	.LFE127:
 1442              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 1443              		.align	2
 1444              		.global	DMA_ClearITPendingBit
 1445              		.thumb
 1446              		.thumb_func
 1448              	DMA_ClearITPendingBit:
 1449              	.LFB128:
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** /**
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @brief  Clears the DMAy Streamx's interrupt pending bits.
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          to 7 to select the DMA Stream.
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @param  DMA_IT: specifies the DMA interrupt pending bit to clear.
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *          This parameter can be any combination of the following values:
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TCIFx:  Streamx transfer complete interrupt
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_HTIFx:  Streamx half transfer complete interrupt
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_TEIFx:  Streamx transfer error interrupt
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_DMEIFx: Streamx direct mode error interrupt
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   *         Where x can be 0 to 7 to select the DMA Stream.
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   * @retval None
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   */
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** {
 1450              		.loc 1 1235 0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 16
 1453              		@ frame_needed = 1, uses_anonymous_args = 0
 1454              		@ link register save eliminated.
 1455 0000 80B4     		push	{r7}
 1456              	.LCFI54:
 1457              		.cfi_def_cfa_offset 4
 1458              		.cfi_offset 7, -4
 1459 0002 85B0     		sub	sp, sp, #20
 1460              	.LCFI55:
 1461              		.cfi_def_cfa_offset 24
 1462 0004 00AF     		add	r7, sp, #0
 1463              	.LCFI56:
 1464              		.cfi_def_cfa_register 7
 1465 0006 7860     		str	r0, [r7, #4]
 1466 0008 3960     		str	r1, [r7, #0]
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   DMA_TypeDef* DMAy;
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check the parameters */
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMA_IT));
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Determine the DMA to which belongs the stream */
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if (DMAy_Streamx < DMA2_Stream0)
 1467              		.loc 1 1243 0
 1468 000a 7A68     		ldr	r2, [r7, #4]
 1469 000c 46F20F43 		movw	r3, #25615
 1470 0010 C4F20203 		movt	r3, 16386
 1471 0014 9A42     		cmp	r2, r3
 1472 0016 05D8     		bhi	.L74
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA1 */
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA1; 
 1473              		.loc 1 1246 0
 1474 0018 4FF4C043 		mov	r3, #24576
 1475 001c C4F20203 		movt	r3, 16386
 1476 0020 FB60     		str	r3, [r7, #12]
 1477 0022 04E0     		b	.L75
 1478              	.L74:
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   } 
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* DMAy_Streamx belongs to DMA2 */
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy = DMA2; 
 1479              		.loc 1 1251 0
 1480 0024 4FF4C843 		mov	r3, #25600
 1481 0028 C4F20203 		movt	r3, 16386
 1482 002c FB60     		str	r3, [r7, #12]
 1483              	.L75:
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** 
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   /* Check if LIFCR or HIFCR register is targeted */
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 1484              		.loc 1 1255 0
 1485 002e 3B68     		ldr	r3, [r7, #0]
 1486 0030 03F00053 		and	r3, r3, #536870912
 1487 0034 002B     		cmp	r3, #0
 1488 0036 08D0     		beq	.L76
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy HIFCR register clear interrupt bits */
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1489              		.loc 1 1258 0
 1490 0038 3A68     		ldr	r2, [r7, #0]
 1491 003a 40F67D73 		movw	r3, #3965
 1492 003e C0F67D73 		movt	r3, 3965
 1493 0042 1340     		ands	r3, r3, r2
 1494 0044 FA68     		ldr	r2, [r7, #12]
 1495 0046 D360     		str	r3, [r2, #12]
 1496 0048 07E0     		b	.L73
 1497              	.L76:
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   else 
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   {
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     /* Set DMAy LIFCR register clear interrupt bits */
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****     DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 1498              		.loc 1 1263 0
 1499 004a 3A68     		ldr	r2, [r7, #0]
 1500 004c 40F67D73 		movw	r3, #3965
 1501 0050 C0F67D73 		movt	r3, 3965
 1502 0054 1340     		ands	r3, r3, r2
 1503 0056 FA68     		ldr	r2, [r7, #12]
 1504 0058 9360     		str	r3, [r2, #8]
 1505              	.L73:
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c ****   }   
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_dma.c **** }
 1506              		.loc 1 1265 0
 1507 005a 07F11407 		add	r7, r7, #20
 1508 005e BD46     		mov	sp, r7
 1509 0060 80BC     		pop	{r7}
 1510 0062 7047     		bx	lr
 1511              		.cfi_endproc
 1512              	.LFE128:
 1514              		.text
 1515              	.Letext0:
 1516              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 1517              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Device\\STM32F4xx\\Inc
 1518              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\STM32F4xx_S
 1519              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\git\\blink\\blink\\Libraries\\CMSIS\\Incl
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_dma.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:19     .text.DMA_DeInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:24     .text.DMA_DeInit:00000000 DMA_DeInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:295    .text.DMA_Init:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:300    .text.DMA_Init:00000000 DMA_Init
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:427    .text.DMA_StructInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:432    .text.DMA_StructInit:00000000 DMA_StructInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:519    .text.DMA_Cmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:524    .text.DMA_Cmd:00000000 DMA_Cmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:572    .text.DMA_PeriphIncOffsetSizeConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:577    .text.DMA_PeriphIncOffsetSizeConfig:00000000 DMA_PeriphIncOffsetSizeConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:624    .text.DMA_FlowControllerConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:629    .text.DMA_FlowControllerConfig:00000000 DMA_FlowControllerConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:676    .text.DMA_SetCurrDataCounter:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:681    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:714    .text.DMA_GetCurrDataCounter:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:719    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:751    .text.DMA_DoubleBufferModeConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:756    .text.DMA_DoubleBufferModeConfig:00000000 DMA_DoubleBufferModeConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:808    .text.DMA_DoubleBufferModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:813    .text.DMA_DoubleBufferModeCmd:00000000 DMA_DoubleBufferModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:861    .text.DMA_MemoryTargetConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:866    .text.DMA_MemoryTargetConfig:00000000 DMA_MemoryTargetConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:910    .text.DMA_GetCurrentMemoryTarget:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:915    .text.DMA_GetCurrentMemoryTarget:00000000 DMA_GetCurrentMemoryTarget
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:963    .text.DMA_GetCmdStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:968    .text.DMA_GetCmdStatus:00000000 DMA_GetCmdStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1017   .text.DMA_GetFIFOStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1022   .text.DMA_GetFIFOStatus:00000000 DMA_GetFIFOStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1060   .text.DMA_GetFlagStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1065   .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1156   .text.DMA_ClearFlag:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1161   .text.DMA_ClearFlag:00000000 DMA_ClearFlag
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1228   .text.DMA_ITConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1233   .text.DMA_ITConfig:00000000 DMA_ITConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1315   .text.DMA_GetITStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1320   .text.DMA_GetITStatus:00000000 DMA_GetITStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1443   .text.DMA_ClearITPendingBit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccZ5BR5o.s:1448   .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
