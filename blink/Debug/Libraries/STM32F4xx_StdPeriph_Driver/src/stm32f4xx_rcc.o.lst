   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f4xx_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.data.APBAHBPrescTable,"aw",%progbits
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.section	.text.RCC_DeInit,"ax",%progbits
  40              		.align	2
  41              		.global	RCC_DeInit
  42              		.thumb
  43              		.thumb_func
  45              	RCC_DeInit:
  46              	.LFB110:
  47              		.file 1 "../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c"
   1:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
   2:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
   3:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @file    stm32f4xx_rcc.c
   4:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @author  MCD Application Team
   5:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @version V1.0.0RC1
   6:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @date    25-August-2011
   7:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief   This file provides firmware functions to manage the following 
   8:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          functionalities of the Reset and clock control (RCC) peripheral:           
   9:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Internal/external clocks, PLL, CSS and MCO configuration
  10:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - System, AHB and APB busses clocks configuration
  11:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Peripheral clocks configuration
  12:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Interrupts and flags management
  13:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  14:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @verbatim
  15:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               
  16:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  17:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                               RCC specific features
  18:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          ===================================================================
  19:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  20:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          After reset the device is running from Internal High Speed oscillator 
  21:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          (HSI 16MHz) with Flash 0 wait state, Flash prefetch buffer, D-Cache 
  22:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          and I-Cache are disabled, and all peripherals are off except internal
  23:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          SRAM, Flash and JTAG.
  24:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - There is no prescaler on High speed (AHB) and Low speed (APB) busses;
  25:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             all peripherals mapped on these busses are running at HSI speed.
  26:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *       	  - The clock for all peripherals is switched off, except the SRAM and FLASH.
  27:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - All GPIOs are in input floating state, except the JTAG pins which
  28:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             are assigned to be used for debug purpose.
  29:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *        
  30:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          Once the device started from reset, the user application has to:        
  31:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source to be used to drive the System clock
  32:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             (if the application needs higher frequency/performance)
  33:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the System clock frequency and Flash settings  
  34:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the AHB and APB busses prescalers
  35:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Enable the clock for the peripheral(s) to be used
  36:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           - Configure the clock source(s) for peripherals which clocks are not
  37:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             derived from the System clock (I2S, RTC, ADC, USB OTG FS/SDIO/RNG)      
  38:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                        
  39:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  @endverbatim
  40:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
  41:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  42:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @attention
  43:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  44:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  45:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  46:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  47:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  48:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  49:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  50:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
  51:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  52:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ******************************************************************************
  53:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  54:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  55:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Includes ------------------------------------------------------------------*/
  56:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #include "stm32f4xx_rcc.h"
  57:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  58:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @addtogroup STM32F4xx_StdPeriph_Driver
  59:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  60:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
  61:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  62:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC 
  63:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief RCC driver modules
  64:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
  65:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
  66:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  67:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private typedef -----------------------------------------------------------*/
  68:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private define ------------------------------------------------------------*/
  69:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  70:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  71:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CR Register ---*/
  72:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of HSION bit */
  73:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  74:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define HSION_BitNumber           0x00
  75:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  76:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of CSSON bit */
  77:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSSON_BitNumber           0x13
  78:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  79:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLON bit */
  80:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLON_BitNumber           0x18
  81:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  82:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of PLLI2SON bit */
  83:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define PLLI2SON_BitNumber        0x1A
  84:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_PLLI2SON_BB            (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLI2SON_BitNumber * 4))
  85:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  86:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CFGR Register ---*/
  87:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of I2SSRC bit */
  88:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x08)
  89:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define I2SSRC_BitNumber          0x17
  90:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_I2SSRC_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (I2SSRC_BitNumber * 4))
  91:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
  92:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- BDCR Register ---*/
  93:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of RTCEN bit */
  94:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x70)
  95:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define RTCEN_BitNumber           0x0F
  96:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  97:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of BDRST bit */
  98:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDRST_BitNumber           0x10
  99:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
 100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* --- CSR Register ---*/
 101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Alias word address of LSION bit */
 102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x74)
 103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define LSION_BitNumber           0x00
 104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CFGR register bit mask */
 107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO2_RESET_MASK      ((uint32_t)0x07FFFFFF)
 108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CFGR_MCO1_RESET_MASK      ((uint32_t)0xF89FFFFF)
 109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* RCC Flag Mask */
 111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define FLAG_MASK                 ((uint8_t)0x1F)
 112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CR register byte 3 (Bits[23:16]) base address */
 114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CR_BYTE3_ADDRESS          ((uint32_t)0x40023802)
 115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x01))
 118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)(RCC_BASE + 0x0C + 0x02))
 121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* BDCR register base address */
 123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private macro -------------------------------------------------------------*/
 126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private variables ---------------------------------------------------------*/
 127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private function prototypes -----------------------------------------------*/
 130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /* Private functions ---------------------------------------------------------*/
 131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Private_Functions
 133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */ 
 135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group1 Internal and external clocks, PLL, CSS and MCO configuration functions
 137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Internal and external clocks, PLL, CSS and MCO configuration functions 
 138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       Internal/external clocks, PLL, CSS and MCO configuration functions
 142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the internal/external clocks,
 145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   PLLs, CSS and MCO pins.
 146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. HSI (high-speed internal), 16 MHz factory-trimmed RC used directly or through
 148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      the PLL as System clock source.
 149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. LSI (low-speed internal), 32 KHz low consumption RC used as IWDG and/or RTC
 151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock source.
 152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. HSE (high-speed external), 4 to 26 MHz crystal oscillator used directly or
 154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      through the PLL as System clock source. Can be used also as RTC clock source.
 155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. LSE (low-speed external), 32 KHz oscillator used as RTC clock source.   
 157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   5. PLL (clocked by HSI or HSE), featuring two different output clocks:
 159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The first output is used to generate the high speed system clock (up to 120 MHz)
 160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       - The second output is used to generate the clock for the USB OTG FS (48 MHz),
 161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         the random analog generator (<=48 MHz) and the SDIO (<= 48 MHz).
 162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   6. PLLI2S (clocked by HSI or HSE), used to generate an accurate clock to achieve 
 164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      high-quality audio performance on the I2S interface.
 165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   7. CSS (Clock security system), once enable and if a HSE clock failure occurs 
 167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      (HSE used directly or through PLL as System clock source), the System clock
 168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      is automatically switched to HSI and an interrupt is generated if enabled. 
 169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The interrupt is linked to the Cortex-M4 NMI (Non-Maskable Interrupt) 
 170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      exception vector.   
 171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   8. MCO1 (microcontroller clock output), used to output HSI, LSE, HSE or PLL
 173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PA8 pin.
 174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   9. MCO2 (microcontroller clock output), used to output HSE, PLL, SYSCLK or PLLI2S
 176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      clock (through a configurable prescaler) on PC9 pin.
 177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The default reset state of the clock configuration is given below:
 185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSI ON and used as system clock source
 186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - HSE, PLL and PLLI2S OFF
 187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - AHB, APB1 and APB2 prescaler set to 1.
 188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - CSS, MCO1 and MCO2 OFF
 189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - All interrupts disabled
 190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function doesn't modify the configuration of the
 191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - Peripheral clocks
 192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            - LSI, LSE and RTC clocks 
 193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_DeInit(void)
 197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
  48              		.loc 1 197 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 1, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53 0000 80B4     		push	{r7}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 4
  56              		.cfi_offset 7, -4
  57 0002 00AF     		add	r7, sp, #0
  58              	.LCFI1:
  59              		.cfi_def_cfa_register 7
 198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HSION bit */
 199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  60              		.loc 1 199 0
  61 0004 4FF46053 		mov	r3, #14336
  62 0008 C4F20203 		movt	r3, 16386
  63 000c 4FF46052 		mov	r2, #14336
  64 0010 C4F20202 		movt	r2, 16386
  65 0014 1268     		ldr	r2, [r2, #0]
  66 0016 42F00102 		orr	r2, r2, #1
  67 001a 1A60     		str	r2, [r3, #0]
 200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset CFGR register */
 202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = 0x00000000;
  68              		.loc 1 202 0
  69 001c 4FF46053 		mov	r3, #14336
  70 0020 C4F20203 		movt	r3, 16386
  71 0024 4FF00002 		mov	r2, #0
  72 0028 9A60     		str	r2, [r3, #8]
 203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  73              		.loc 1 205 0
  74 002a 4FF46053 		mov	r3, #14336
  75 002e C4F20203 		movt	r3, 16386
  76 0032 4FF46052 		mov	r2, #14336
  77 0036 C4F20202 		movt	r2, 16386
  78 003a 1268     		ldr	r2, [r2, #0]
  79 003c 22F08472 		bic	r2, r2, #17301504
  80 0040 22F48032 		bic	r2, r2, #65536
  81 0044 1A60     		str	r2, [r3, #0]
 206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset PLLCFGR register */
 208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = 0x24003010;
  82              		.loc 1 208 0
  83 0046 4FF46053 		mov	r3, #14336
  84 004a C4F20203 		movt	r3, 16386
  85 004e 43F21002 		movw	r2, #12304
  86 0052 C2F20042 		movt	r2, 9216
  87 0056 5A60     		str	r2, [r3, #4]
 209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEBYP bit */
 211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  88              		.loc 1 211 0
  89 0058 4FF46053 		mov	r3, #14336
  90 005c C4F20203 		movt	r3, 16386
  91 0060 4FF46052 		mov	r2, #14336
  92 0064 C4F20202 		movt	r2, 16386
  93 0068 1268     		ldr	r2, [r2, #0]
  94 006a 22F48022 		bic	r2, r2, #262144
  95 006e 1A60     		str	r2, [r3, #0]
 212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Disable all interrupts */
 214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CIR = 0x00000000;
  96              		.loc 1 214 0
  97 0070 4FF46053 		mov	r3, #14336
  98 0074 C4F20203 		movt	r3, 16386
  99 0078 4FF00002 		mov	r2, #0
 100 007c DA60     		str	r2, [r3, #12]
 215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 101              		.loc 1 215 0
 102 007e BD46     		mov	sp, r7
 103 0080 80BC     		pop	{r7}
 104 0082 7047     		bx	lr
 105              		.cfi_endproc
 106              	.LFE110:
 108              		.section	.text.RCC_HSEConfig,"ax",%progbits
 109              		.align	2
 110              		.global	RCC_HSEConfig
 111              		.thumb
 112              		.thumb_func
 114              	RCC_HSEConfig:
 115              	.LFB111:
 216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSE (RCC_HSE_ON or RCC_HSE_Bypass), the application
 220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on HSERDY flag to be set indicating that HSE clock
 221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the PLL and/or system clock.
 222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSE state can not be changed if it is used directly or through the
 223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLL as system clock. In this case, you have to select another source
 224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the system clock then change the HSE state (ex. disable it).
 225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSE is stopped by hardware when entering STOP and STANDBY modes.  
 226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function reset the CSSON bit, so if the Clock security system(CSS)
 227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         was previously enabled you have to enable it again after calling this
 228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         function.    
 229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_OFF: turn OFF the HSE oscillator, HSERDY flag goes low after
 232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 HSE oscillator clock cycles.
 233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_ON: turn ON the HSE oscillator
 234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSEConfig(uint8_t RCC_HSE)
 238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 116              		.loc 1 238 0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 8
 119              		@ frame_needed = 1, uses_anonymous_args = 0
 120              		@ link register save eliminated.
 121 0000 80B4     		push	{r7}
 122              	.LCFI2:
 123              		.cfi_def_cfa_offset 4
 124              		.cfi_offset 7, -4
 125 0002 83B0     		sub	sp, sp, #12
 126              	.LCFI3:
 127              		.cfi_def_cfa_offset 16
 128 0004 00AF     		add	r7, sp, #0
 129              	.LCFI4:
 130              		.cfi_def_cfa_register 7
 131 0006 0346     		mov	r3, r0
 132 0008 FB71     		strb	r3, [r7, #7]
 239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 133              		.loc 1 243 0
 134 000a 43F60203 		movw	r3, #14338
 135 000e C4F20203 		movt	r3, 16386
 136 0012 4FF00002 		mov	r2, #0
 137 0016 1A70     		strb	r2, [r3, #0]
 244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the new HSE configuration -------------------------------------------*/
 246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 138              		.loc 1 246 0
 139 0018 43F60203 		movw	r3, #14338
 140 001c C4F20203 		movt	r3, 16386
 141 0020 FA79     		ldrb	r2, [r7, #7]
 142 0022 1A70     		strb	r2, [r3, #0]
 247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 143              		.loc 1 247 0
 144 0024 07F10C07 		add	r7, r7, #12
 145 0028 BD46     		mov	sp, r7
 146 002a 80BC     		pop	{r7}
 147 002c 7047     		bx	lr
 148              		.cfi_endproc
 149              	.LFE111:
 151 002e 00BF     		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 152              		.align	2
 153              		.global	RCC_WaitForHSEStartUp
 154              		.thumb
 155              		.thumb_func
 157              	RCC_WaitForHSEStartUp:
 158              	.LFB112:
 248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Waits for HSE start-up.
 251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This functions waits on HSERDY flag to be set and return SUCCESS if 
 252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this flag is set, otherwise returns ERROR if the timeout is reached 
 253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and this flag is not set. The timeout value is defined by the constant
 254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         HSE_STARTUP_TIMEOUT in stm32f4xx.h file. You can tailor it depending
 255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the HSE crystal used in your application. 
 256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval An ErrorStatus enumeration value:
 258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - SUCCESS: HSE oscillator is stable and ready to use
 259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          - ERROR: HSE oscillator not yet ready
 260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 159              		.loc 1 262 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 8
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI5:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 14, -4
 167              		.cfi_offset 7, -8
 168 0002 82B0     		sub	sp, sp, #8
 169              	.LCFI6:
 170              		.cfi_def_cfa_offset 16
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI7:
 173              		.cfi_def_cfa_register 7
 263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   __IO uint32_t startupcounter = 0;
 174              		.loc 1 263 0
 175 0006 4FF00003 		mov	r3, #0
 176 000a 3B60     		str	r3, [r7, #0]
 264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ErrorStatus status = ERROR;
 177              		.loc 1 264 0
 178 000c 4FF00003 		mov	r3, #0
 179 0010 FB71     		strb	r3, [r7, #7]
 265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus hsestatus = RESET;
 180              		.loc 1 265 0
 181 0012 4FF00003 		mov	r3, #0
 182 0016 BB71     		strb	r3, [r7, #6]
 183              	.L5:
 266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   do
 268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 184              		.loc 1 269 0 discriminator 1
 185 0018 4FF03100 		mov	r0, #49
 186 001c FFF7FEFF 		bl	RCC_GetFlagStatus
 187 0020 0346     		mov	r3, r0
 188 0022 BB71     		strb	r3, [r7, #6]
 270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     startupcounter++;
 189              		.loc 1 270 0 discriminator 1
 190 0024 3B68     		ldr	r3, [r7, #0]
 191 0026 03F10103 		add	r3, r3, #1
 192 002a 3B60     		str	r3, [r7, #0]
 271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 193              		.loc 1 271 0 discriminator 1
 194 002c 3B68     		ldr	r3, [r7, #0]
 195 002e B3F5A06F 		cmp	r3, #1280
 196 0032 02D0     		beq	.L4
 197 0034 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 198 0036 002B     		cmp	r3, #0
 199 0038 EED0     		beq	.L5
 200              	.L4:
 272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 201              		.loc 1 273 0
 202 003a 4FF03100 		mov	r0, #49
 203 003e FFF7FEFF 		bl	RCC_GetFlagStatus
 204 0042 0346     		mov	r3, r0
 205 0044 002B     		cmp	r3, #0
 206 0046 03D0     		beq	.L6
 274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = SUCCESS;
 207              		.loc 1 275 0
 208 0048 4FF00103 		mov	r3, #1
 209 004c FB71     		strb	r3, [r7, #7]
 210 004e 02E0     		b	.L7
 211              	.L6:
 276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
 278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     status = ERROR;
 212              		.loc 1 279 0
 213 0050 4FF00003 		mov	r3, #0
 214 0054 FB71     		strb	r3, [r7, #7]
 215              	.L7:
 280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return (status);
 216              		.loc 1 281 0
 217 0056 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 218              		.loc 1 282 0
 219 0058 1846     		mov	r0, r3
 220 005a 07F10807 		add	r7, r7, #8
 221 005e BD46     		mov	sp, r7
 222 0060 80BD     		pop	{r7, pc}
 223              		.cfi_endproc
 224              	.LFE112:
 226 0062 00BF     		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 227              		.align	2
 228              		.global	RCC_AdjustHSICalibrationValue
 229              		.thumb
 230              		.thumb_func
 232              	RCC_AdjustHSICalibrationValue:
 233              	.LFB113:
 283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The calibration is used to compensate for the variations in voltage
 287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and temperature that influence the frequency of the internal HSI RC.
 288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter must be a number between 0 and 0x1F.
 290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 234              		.loc 1 293 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 16
 237              		@ frame_needed = 1, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 239 0000 80B4     		push	{r7}
 240              	.LCFI8:
 241              		.cfi_def_cfa_offset 4
 242              		.cfi_offset 7, -4
 243 0002 85B0     		sub	sp, sp, #20
 244              	.LCFI9:
 245              		.cfi_def_cfa_offset 24
 246 0004 00AF     		add	r7, sp, #0
 247              	.LCFI10:
 248              		.cfi_def_cfa_register 7
 249 0006 0346     		mov	r3, r0
 250 0008 FB71     		strb	r3, [r7, #7]
 294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 251              		.loc 1 294 0
 252 000a 4FF00003 		mov	r3, #0
 253 000e FB60     		str	r3, [r7, #12]
 295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CR;
 254              		.loc 1 298 0
 255 0010 4FF46053 		mov	r3, #14336
 256 0014 C4F20203 		movt	r3, 16386
 257 0018 1B68     		ldr	r3, [r3, #0]
 258 001a FB60     		str	r3, [r7, #12]
 299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CR_HSITRIM;
 259              		.loc 1 301 0
 260 001c FB68     		ldr	r3, [r7, #12]
 261 001e 23F0F803 		bic	r3, r3, #248
 262 0022 FB60     		str	r3, [r7, #12]
 302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 263              		.loc 1 304 0
 264 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 265 0026 4FEAC303 		lsl	r3, r3, #3
 266 002a FA68     		ldr	r2, [r7, #12]
 267 002c 1343     		orrs	r3, r3, r2
 268 002e FB60     		str	r3, [r7, #12]
 305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CR = tmpreg;
 269              		.loc 1 307 0
 270 0030 4FF46053 		mov	r3, #14336
 271 0034 C4F20203 		movt	r3, 16386
 272 0038 FA68     		ldr	r2, [r7, #12]
 273 003a 1A60     		str	r2, [r3, #0]
 308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 274              		.loc 1 308 0
 275 003c 07F11407 		add	r7, r7, #20
 276 0040 BD46     		mov	sp, r7
 277 0042 80BC     		pop	{r7}
 278 0044 7047     		bx	lr
 279              		.cfi_endproc
 280              	.LFE113:
 282 0046 00BF     		.section	.text.RCC_HSICmd,"ax",%progbits
 283              		.align	2
 284              		.global	RCC_HSICmd
 285              		.thumb
 286              		.thumb_func
 288              	RCC_HSICmd:
 289              	.LFB114:
 309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is stopped by hardware when entering STOP and STANDBY modes.
 313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         It is used (enabled by hardware) as system clock source after startup
 314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         from Reset, wakeup from STOP and STANDBY mode, or in case of failure
 315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the HSE used directly or indirectly as system clock (if the Clock
 316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Security System CSS is enabled).             
 317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   HSI can not be stopped if it is used as system clock source. In this case,
 318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         you have to select another source of the system clock then stop the HSI.  
 319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the HSI, the application software should wait on HSIRDY
 320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         flag to be set indicating that HSI clock is stable and can be used as
 321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         system clock source.  
 322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the HSI.
 323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
 325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles.  
 326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 290              		.loc 1 329 0
 291              		.cfi_startproc
 292              		@ args = 0, pretend = 0, frame = 8
 293              		@ frame_needed = 1, uses_anonymous_args = 0
 294              		@ link register save eliminated.
 295 0000 80B4     		push	{r7}
 296              	.LCFI11:
 297              		.cfi_def_cfa_offset 4
 298              		.cfi_offset 7, -4
 299 0002 83B0     		sub	sp, sp, #12
 300              	.LCFI12:
 301              		.cfi_def_cfa_offset 16
 302 0004 00AF     		add	r7, sp, #0
 303              	.LCFI13:
 304              		.cfi_def_cfa_register 7
 305 0006 0346     		mov	r3, r0
 306 0008 FB71     		strb	r3, [r7, #7]
 330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 307              		.loc 1 333 0
 308 000a 4FF00003 		mov	r3, #0
 309 000e C4F24723 		movt	r3, 16967
 310 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 311 0014 1A60     		str	r2, [r3, #0]
 334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 312              		.loc 1 334 0
 313 0016 07F10C07 		add	r7, r7, #12
 314 001a BD46     		mov	sp, r7
 315 001c 80BC     		pop	{r7}
 316 001e 7047     		bx	lr
 317              		.cfi_endproc
 318              	.LFE114:
 320              		.section	.text.RCC_LSEConfig,"ax",%progbits
 321              		.align	2
 322              		.global	RCC_LSEConfig
 323              		.thumb
 324              		.thumb_func
 326              	RCC_LSEConfig:
 327              	.LFB115:
 335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the LSE is in the Backup domain and write access is denied to
 339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         this domain after reset, you have to enable write access using 
 340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PWR_BackupAccessCmd(ENABLE) function before to configure the LSE
 341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (to be done once after reset).  
 342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSE (RCC_LSE_ON or RCC_LSE_Bypass), the application
 343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software should wait on LSERDY flag to be set indicating that LSE clock
 344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is stable and can be used to clock the RTC.
 345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_OFF: turn OFF the LSE oscillator, LSERDY flag goes low after
 348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                              6 LSE oscillator clock cycles.
 349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_ON: turn ON the LSE oscillator
 350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 328              		.loc 1 354 0
 329              		.cfi_startproc
 330              		@ args = 0, pretend = 0, frame = 8
 331              		@ frame_needed = 1, uses_anonymous_args = 0
 332              		@ link register save eliminated.
 333 0000 80B4     		push	{r7}
 334              	.LCFI14:
 335              		.cfi_def_cfa_offset 4
 336              		.cfi_offset 7, -4
 337 0002 83B0     		sub	sp, sp, #12
 338              	.LCFI15:
 339              		.cfi_def_cfa_offset 16
 340 0004 00AF     		add	r7, sp, #0
 341              	.LCFI16:
 342              		.cfi_def_cfa_register 7
 343 0006 0346     		mov	r3, r0
 344 0008 FB71     		strb	r3, [r7, #7]
 355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEON bit */
 360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 345              		.loc 1 360 0
 346 000a 43F67003 		movw	r3, #14448
 347 000e C4F20203 		movt	r3, 16386
 348 0012 4FF00002 		mov	r2, #0
 349 0016 1A70     		strb	r2, [r3, #0]
 361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Reset LSEBYP bit */
 363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 350              		.loc 1 363 0
 351 0018 43F67003 		movw	r3, #14448
 352 001c C4F20203 		movt	r3, 16386
 353 0020 4FF00002 		mov	r2, #0
 354 0024 1A70     		strb	r2, [r3, #0]
 364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (RCC_LSE)
 355              		.loc 1 366 0
 356 0026 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 357 0028 012B     		cmp	r3, #1
 358 002a 02D0     		beq	.L12
 359 002c 042B     		cmp	r3, #4
 360 002e 08D0     		beq	.L13
 361 0030 0FE0     		b	.L15
 362              	.L12:
 367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_ON:
 369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEON bit */
 370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 363              		.loc 1 370 0
 364 0032 43F67003 		movw	r3, #14448
 365 0036 C4F20203 		movt	r3, 16386
 366 003a 4FF00102 		mov	r2, #1
 367 003e 1A70     		strb	r2, [r3, #0]
 371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 368              		.loc 1 371 0
 369 0040 08E0     		b	.L10
 370              	.L13:
 372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case RCC_LSE_Bypass:
 373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* Set LSEBYP and LSEON bits */
 374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 371              		.loc 1 374 0
 372 0042 43F67003 		movw	r3, #14448
 373 0046 C4F20203 		movt	r3, 16386
 374 004a 4FF00502 		mov	r2, #5
 375 004e 1A70     		strb	r2, [r3, #0]
 375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 376              		.loc 1 375 0
 377 0050 00E0     		b	.L10
 378              	.L15:
 376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 379              		.loc 1 377 0
 380 0052 00BF     		nop
 381              	.L10:
 378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 382              		.loc 1 379 0
 383 0054 07F10C07 		add	r7, r7, #12
 384 0058 BD46     		mov	sp, r7
 385 005a 80BC     		pop	{r7}
 386 005c 7047     		bx	lr
 387              		.cfi_endproc
 388              	.LFE115:
 390 005e 00BF     		.section	.text.RCC_LSICmd,"ax",%progbits
 391              		.align	2
 392              		.global	RCC_LSICmd
 393              		.thumb
 394              		.thumb_func
 396              	RCC_LSICmd:
 397              	.LFB116:
 380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the LSI, the application software should wait on 
 384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         LSIRDY flag to be set indicating that LSI clock is stable and can
 385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used to clock the IWDG and/or the RTC.
 386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.  
 387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the LSI.
 388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
 389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
 390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock cycles. 
 391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 398              		.loc 1 394 0
 399              		.cfi_startproc
 400              		@ args = 0, pretend = 0, frame = 8
 401              		@ frame_needed = 1, uses_anonymous_args = 0
 402              		@ link register save eliminated.
 403 0000 80B4     		push	{r7}
 404              	.LCFI17:
 405              		.cfi_def_cfa_offset 4
 406              		.cfi_offset 7, -4
 407 0002 83B0     		sub	sp, sp, #12
 408              	.LCFI18:
 409              		.cfi_def_cfa_offset 16
 410 0004 00AF     		add	r7, sp, #0
 411              	.LCFI19:
 412              		.cfi_def_cfa_register 7
 413 0006 0346     		mov	r3, r0
 414 0008 FB71     		strb	r3, [r7, #7]
 395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 415              		.loc 1 398 0
 416 000a 4FF46863 		mov	r3, #3712
 417 000e C4F24723 		movt	r3, 16967
 418 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 419 0014 1A60     		str	r2, [r3, #0]
 399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 420              		.loc 1 399 0
 421 0016 07F10C07 		add	r7, r7, #12
 422 001a BD46     		mov	sp, r7
 423 001c 80BC     		pop	{r7}
 424 001e 7047     		bx	lr
 425              		.cfi_endproc
 426              	.LFE116:
 428              		.section	.text.RCC_PLLConfig,"ax",%progbits
 429              		.align	2
 430              		.global	RCC_PLLConfig
 431              		.thumb
 432              		.thumb_func
 434              	RCC_PLLConfig:
 435              	.LFB117:
 400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the main PLL clock source, multiplication and division factors.
 403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the main PLL is disabled.
 404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSI: HSI oscillator clock selected as PLL clock entry
 408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_PLLSource_HSE: HSE oscillator clock selected as PLL clock entry
 409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This clock source (RCC_PLLSource) is common for the main PLL and PLLI2S.  
 410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLM: specifies the division factor for PLL VCO input clock
 412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 0 and 63.
 413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLM parameter correctly to ensure that the VCO input
 414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency ranges from 1 to 2 MHz. It is recommended to select a frequency
 415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of 2 MHz to limit PLL jitter.
 416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLN: specifies the multiplication factor for PLL VCO output clock
 418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLN parameter correctly to ensure that the VCO
 420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLP: specifies the division factor for main system clock (SYSCLK)
 423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number in the range {2, 4, 6, or 8}.
 424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLP parameter correctly to not exceed 120 MHz on
 425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the System clock frequency.
 426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLQ: specifies the division factor for OTG FS, SDIO and RNG clocks
 428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 4 and 15.
 429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the USB OTG FS is used in your application, you have to set the
 430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLQ parameter correctly to have 48 MHz clock for the USB. However,
 431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the SDIO and RNG need a frequency lower than or equal to 48 MHz to work
 432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         correctly.
 433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PL
 437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 436              		.loc 1 437 0
 437              		.cfi_startproc
 438              		@ args = 4, pretend = 0, frame = 16
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440              		@ link register save eliminated.
 441 0000 80B4     		push	{r7}
 442              	.LCFI20:
 443              		.cfi_def_cfa_offset 4
 444              		.cfi_offset 7, -4
 445 0002 85B0     		sub	sp, sp, #20
 446              	.LCFI21:
 447              		.cfi_def_cfa_offset 24
 448 0004 00AF     		add	r7, sp, #0
 449              	.LCFI22:
 450              		.cfi_def_cfa_register 7
 451 0006 F860     		str	r0, [r7, #12]
 452 0008 B960     		str	r1, [r7, #8]
 453 000a 7A60     		str	r2, [r7, #4]
 454 000c 3B60     		str	r3, [r7, #0]
 438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLM_VALUE(PLLM));
 441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLN_VALUE(PLLN));
 442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLP_VALUE(PLLP));
 443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLQ_VALUE(PLLQ));
 444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 455              		.loc 1 445 0
 456 000e 4FF46053 		mov	r3, #14336
 457 0012 C4F20203 		movt	r3, 16386
 458 0016 7A68     		ldr	r2, [r7, #4]
 459 0018 4FEA8211 		lsl	r1, r2, #6
 460 001c BA68     		ldr	r2, [r7, #8]
 461 001e 1143     		orrs	r1, r1, r2
 462 0020 3A68     		ldr	r2, [r7, #0]
 463 0022 4FEA5202 		lsr	r2, r2, #1
 464 0026 02F1FF32 		add	r2, r2, #-1
 465 002a 4FEA0242 		lsl	r2, r2, #16
 466 002e 1143     		orrs	r1, r1, r2
 467 0030 FA68     		ldr	r2, [r7, #12]
 468 0032 1143     		orrs	r1, r1, r2
 446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                  (PLLQ << 24);
 469              		.loc 1 446 0
 470 0034 BA69     		ldr	r2, [r7, #24]
 471 0036 4FEA0262 		lsl	r2, r2, #24
 445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 472              		.loc 1 445 0
 473 003a 0A43     		orrs	r2, r2, r1
 474 003c 5A60     		str	r2, [r3, #4]
 447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 475              		.loc 1 447 0
 476 003e 07F11407 		add	r7, r7, #20
 477 0042 BD46     		mov	sp, r7
 478 0044 80BC     		pop	{r7}
 479 0046 7047     		bx	lr
 480              		.cfi_endproc
 481              	.LFE117:
 483              		.section	.text.RCC_PLLCmd,"ax",%progbits
 484              		.align	2
 485              		.global	RCC_PLLCmd
 486              		.thumb
 487              		.thumb_func
 489              	RCC_PLLCmd:
 490              	.LFB118:
 448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the main PLL.
 451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After enabling the main PLL, the application software should wait on 
 452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PLLRDY flag to be set indicating that PLL clock is stable and can
 453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         be used as system clock source.
 454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL can not be disabled if it is used as system clock source
 455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
 456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
 457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 491              		.loc 1 460 0
 492              		.cfi_startproc
 493              		@ args = 0, pretend = 0, frame = 8
 494              		@ frame_needed = 1, uses_anonymous_args = 0
 495              		@ link register save eliminated.
 496 0000 80B4     		push	{r7}
 497              	.LCFI23:
 498              		.cfi_def_cfa_offset 4
 499              		.cfi_offset 7, -4
 500 0002 83B0     		sub	sp, sp, #12
 501              	.LCFI24:
 502              		.cfi_def_cfa_offset 16
 503 0004 00AF     		add	r7, sp, #0
 504              	.LCFI25:
 505              		.cfi_def_cfa_register 7
 506 0006 0346     		mov	r3, r0
 507 0008 FB71     		strb	r3, [r7, #7]
 461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 508              		.loc 1 463 0
 509 000a 4FF06003 		mov	r3, #96
 510 000e C4F24723 		movt	r3, 16967
 511 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 512 0014 1A60     		str	r2, [r3, #0]
 464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 513              		.loc 1 464 0
 514 0016 07F10C07 		add	r7, r7, #12
 515 001a BD46     		mov	sp, r7
 516 001c 80BC     		pop	{r7}
 517 001e 7047     		bx	lr
 518              		.cfi_endproc
 519              	.LFE118:
 521              		.section	.text.RCC_PLLI2SConfig,"ax",%progbits
 522              		.align	2
 523              		.global	RCC_PLLI2SConfig
 524              		.thumb
 525              		.thumb_func
 527              	RCC_PLLI2SConfig:
 528              	.LFB119:
 465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the PLLI2S clock multiplication and division factors.
 468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in Silicon RevisionB and RevisionY.    
 470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only when the PLLI2S is disabled.
 471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S clock source is common with the main PLL (configured in 
 472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_PLLConfig function )  
 473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *             
 474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SN: specifies the multiplication factor for PLLI2S VCO output clock
 475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 192 and 432.
 476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SN parameter correctly to ensure that the VCO 
 477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         output frequency is between 192 and 432 MHz.
 478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  PLLI2SR: specifies the division factor for I2S clock
 480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be a number between 2 and 7.
 481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   You have to set the PLLI2SR parameter correctly to not exceed 192 MHz
 482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         on the I2S clock frequency.
 483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SConfig(uint32_t PLLI2SN, uint32_t PLLI2SR)
 487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 529              		.loc 1 487 0
 530              		.cfi_startproc
 531              		@ args = 0, pretend = 0, frame = 8
 532              		@ frame_needed = 1, uses_anonymous_args = 0
 533              		@ link register save eliminated.
 534 0000 80B4     		push	{r7}
 535              	.LCFI26:
 536              		.cfi_def_cfa_offset 4
 537              		.cfi_offset 7, -4
 538 0002 83B0     		sub	sp, sp, #12
 539              	.LCFI27:
 540              		.cfi_def_cfa_offset 16
 541 0004 00AF     		add	r7, sp, #0
 542              	.LCFI28:
 543              		.cfi_def_cfa_register 7
 544 0006 7860     		str	r0, [r7, #4]
 545 0008 3960     		str	r1, [r7, #0]
 488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SN));
 490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SR));
 491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->PLLI2SCFGR = (PLLI2SN << 6) | (PLLI2SR << 28);
 546              		.loc 1 492 0
 547 000a 4FF46053 		mov	r3, #14336
 548 000e C4F20203 		movt	r3, 16386
 549 0012 7A68     		ldr	r2, [r7, #4]
 550 0014 4FEA8211 		lsl	r1, r2, #6
 551 0018 3A68     		ldr	r2, [r7, #0]
 552 001a 4FEA0272 		lsl	r2, r2, #28
 553 001e 0A43     		orrs	r2, r2, r1
 554 0020 C3F88420 		str	r2, [r3, #132]
 493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 555              		.loc 1 493 0
 556 0024 07F10C07 		add	r7, r7, #12
 557 0028 BD46     		mov	sp, r7
 558 002a 80BC     		pop	{r7}
 559 002c 7047     		bx	lr
 560              		.cfi_endproc
 561              	.LFE119:
 563 002e 00BF     		.section	.text.RCC_PLLI2SCmd,"ax",%progbits
 564              		.align	2
 565              		.global	RCC_PLLI2SCmd
 566              		.thumb
 567              		.thumb_func
 569              	RCC_PLLI2SCmd:
 570              	.LFB120:
 494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the PLLI2S.
 497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PLLI2S is available only in RevisionB and RevisionY 
 498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The PLLI2S is disabled by hardware when entering STOP and STANDBY modes.  
 499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the PLLI2S. This parameter can be: ENABLE or DISABLE.
 500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PLLI2SCmd(FunctionalState NewState)
 503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 571              		.loc 1 503 0
 572              		.cfi_startproc
 573              		@ args = 0, pretend = 0, frame = 8
 574              		@ frame_needed = 1, uses_anonymous_args = 0
 575              		@ link register save eliminated.
 576 0000 80B4     		push	{r7}
 577              	.LCFI29:
 578              		.cfi_def_cfa_offset 4
 579              		.cfi_offset 7, -4
 580 0002 83B0     		sub	sp, sp, #12
 581              	.LCFI30:
 582              		.cfi_def_cfa_offset 16
 583 0004 00AF     		add	r7, sp, #0
 584              	.LCFI31:
 585              		.cfi_def_cfa_register 7
 586 0006 0346     		mov	r3, r0
 587 0008 FB71     		strb	r3, [r7, #7]
 504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_PLLI2SON_BB = (uint32_t)NewState;
 588              		.loc 1 506 0
 589 000a 4FF06803 		mov	r3, #104
 590 000e C4F24723 		movt	r3, 16967
 591 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 592 0014 1A60     		str	r2, [r3, #0]
 507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 593              		.loc 1 507 0
 594 0016 07F10C07 		add	r7, r7, #12
 595 001a BD46     		mov	sp, r7
 596 001c 80BC     		pop	{r7}
 597 001e 7047     		bx	lr
 598              		.cfi_endproc
 599              	.LFE120:
 601              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 602              		.align	2
 603              		.global	RCC_ClockSecuritySystemCmd
 604              		.thumb
 605              		.thumb_func
 607              	RCC_ClockSecuritySystemCmd:
 608              	.LFB121:
 508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Clock Security System.
 511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If a failure is detected on the HSE oscillator clock, this oscillator
 512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is automatically disabled and an interrupt is generated to inform the
 513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         software about the failure (Clock Security System Interrupt, CSSI),
 514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         allowing the MCU to perform rescue operations. The CSSI is linked to 
 515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
 516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Clock Security System.
 517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         This parameter can be: ENABLE or DISABLE.
 518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
 521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 609              		.loc 1 521 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 8
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              	.LCFI32:
 616              		.cfi_def_cfa_offset 4
 617              		.cfi_offset 7, -4
 618 0002 83B0     		sub	sp, sp, #12
 619              	.LCFI33:
 620              		.cfi_def_cfa_offset 16
 621 0004 00AF     		add	r7, sp, #0
 622              	.LCFI34:
 623              		.cfi_def_cfa_register 7
 624 0006 0346     		mov	r3, r0
 625 0008 FB71     		strb	r3, [r7, #7]
 522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 626              		.loc 1 524 0
 627 000a 4FF04C03 		mov	r3, #76
 628 000e C4F24723 		movt	r3, 16967
 629 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 630 0014 1A60     		str	r2, [r3, #0]
 525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 631              		.loc 1 525 0
 632 0016 07F10C07 		add	r7, r7, #12
 633 001a BD46     		mov	sp, r7
 634 001c 80BC     		pop	{r7}
 635 001e 7047     		bx	lr
 636              		.cfi_endproc
 637              	.LFE121:
 639              		.section	.text.RCC_MCO1Config,"ax",%progbits
 640              		.align	2
 641              		.global	RCC_MCO1Config
 642              		.thumb
 643              		.thumb_func
 645              	RCC_MCO1Config:
 646              	.LFB122:
 526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO1 pin(PA8).
 529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PA8 should be configured in alternate function mode.
 530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Source: specifies the clock source to output.
 531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSI: HSI clock selected as MCO1 source
 533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_LSE: LSE clock selected as MCO1 source
 534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_HSE: HSE clock selected as MCO1 source
 535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Source_PLLCLK: main PLL clock selected as MCO1 source
 536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO1Div: specifies the MCO1 prescaler.
 537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_1: no division applied to MCO1 clock
 539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_2: division by 2 applied to MCO1 clock
 540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_3: division by 3 applied to MCO1 clock
 541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_4: division by 4 applied to MCO1 clock
 542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO1Div_5: division by 5 applied to MCO1 clock
 543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO1Config(uint32_t RCC_MCO1Source, uint32_t RCC_MCO1Div)
 546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 647              		.loc 1 546 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 16
 650              		@ frame_needed = 1, uses_anonymous_args = 0
 651              		@ link register save eliminated.
 652 0000 80B4     		push	{r7}
 653              	.LCFI35:
 654              		.cfi_def_cfa_offset 4
 655              		.cfi_offset 7, -4
 656 0002 85B0     		sub	sp, sp, #20
 657              	.LCFI36:
 658              		.cfi_def_cfa_offset 24
 659 0004 00AF     		add	r7, sp, #0
 660              	.LCFI37:
 661              		.cfi_def_cfa_register 7
 662 0006 7860     		str	r0, [r7, #4]
 663 0008 3960     		str	r1, [r7, #0]
 547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 664              		.loc 1 547 0
 665 000a 4FF00003 		mov	r3, #0
 666 000e FB60     		str	r3, [r7, #12]
 548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1SOURCE(RCC_MCO1Source));
 551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO1DIV(RCC_MCO1Div));  
 552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 667              		.loc 1 553 0
 668 0010 4FF46053 		mov	r3, #14336
 669 0014 C4F20203 		movt	r3, 16386
 670 0018 9B68     		ldr	r3, [r3, #8]
 671 001a FB60     		str	r3, [r7, #12]
 554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO1[1:0] and MCO1PRE[2:0] bits */
 556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO1_RESET_MASK;
 672              		.loc 1 556 0
 673 001c FB68     		ldr	r3, [r7, #12]
 674 001e 23F0EC63 		bic	r3, r3, #123731968
 675 0022 FB60     		str	r3, [r7, #12]
 557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO1 clock source and prescaler */
 559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO1Source | RCC_MCO1Div;
 676              		.loc 1 559 0
 677 0024 7A68     		ldr	r2, [r7, #4]
 678 0026 3B68     		ldr	r3, [r7, #0]
 679 0028 1343     		orrs	r3, r3, r2
 680 002a FA68     		ldr	r2, [r7, #12]
 681 002c 1343     		orrs	r3, r3, r2
 682 002e FB60     		str	r3, [r7, #12]
 560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 683              		.loc 1 562 0
 684 0030 4FF46053 		mov	r3, #14336
 685 0034 C4F20203 		movt	r3, 16386
 686 0038 FA68     		ldr	r2, [r7, #12]
 687 003a 9A60     		str	r2, [r3, #8]
 563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 688              		.loc 1 563 0
 689 003c 07F11407 		add	r7, r7, #20
 690 0040 BD46     		mov	sp, r7
 691 0042 80BC     		pop	{r7}
 692 0044 7047     		bx	lr
 693              		.cfi_endproc
 694              	.LFE122:
 696 0046 00BF     		.section	.text.RCC_MCO2Config,"ax",%progbits
 697              		.align	2
 698              		.global	RCC_MCO2Config
 699              		.thumb
 700              		.thumb_func
 702              	RCC_MCO2Config:
 703              	.LFB123:
 564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Selects the clock source to output on MCO2 pin(PC9).
 567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   PC9 should be configured in alternate function mode.
 568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Source: specifies the clock source to output.
 569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_SYSCLK: System clock (SYSCLK) selected as MCO2 source
 571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLI2SCLK: PLLI2S clock selected as MCO2 source
 572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_HSE: HSE clock selected as MCO2 source
 573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Source_PLLCLK: main PLL clock selected as MCO2 source
 574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_MCO2Div: specifies the MCO2 prescaler.
 575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_1: no division applied to MCO2 clock
 577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_2: division by 2 applied to MCO2 clock
 578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_3: division by 3 applied to MCO2 clock
 579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_4: division by 4 applied to MCO2 clock
 580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_MCO2Div_5: division by 5 applied to MCO2 clock
 581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_MCO2Config(uint32_t RCC_MCO2Source, uint32_t RCC_MCO2Div)
 584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 704              		.loc 1 584 0
 705              		.cfi_startproc
 706              		@ args = 0, pretend = 0, frame = 16
 707              		@ frame_needed = 1, uses_anonymous_args = 0
 708              		@ link register save eliminated.
 709 0000 80B4     		push	{r7}
 710              	.LCFI38:
 711              		.cfi_def_cfa_offset 4
 712              		.cfi_offset 7, -4
 713 0002 85B0     		sub	sp, sp, #20
 714              	.LCFI39:
 715              		.cfi_def_cfa_offset 24
 716 0004 00AF     		add	r7, sp, #0
 717              	.LCFI40:
 718              		.cfi_def_cfa_register 7
 719 0006 7860     		str	r0, [r7, #4]
 720 0008 3960     		str	r1, [r7, #0]
 585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 721              		.loc 1 585 0
 722 000a 4FF00003 		mov	r3, #0
 723 000e FB60     		str	r3, [r7, #12]
 586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2SOURCE(RCC_MCO2Source));
 589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_MCO2DIV(RCC_MCO2Div));
 590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 724              		.loc 1 591 0
 725 0010 4FF46053 		mov	r3, #14336
 726 0014 C4F20203 		movt	r3, 16386
 727 0018 9B68     		ldr	r3, [r3, #8]
 728 001a FB60     		str	r3, [r7, #12]
 592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear MCO2 and MCO2PRE[2:0] bits */
 594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= CFGR_MCO2_RESET_MASK;
 729              		.loc 1 594 0
 730 001c FB68     		ldr	r3, [r7, #12]
 731 001e 23F07843 		bic	r3, r3, #-134217728
 732 0022 FB60     		str	r3, [r7, #12]
 595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select MCO2 clock source and prescaler */
 597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_MCO2Source | RCC_MCO2Div;
 733              		.loc 1 597 0
 734 0024 7A68     		ldr	r2, [r7, #4]
 735 0026 3B68     		ldr	r3, [r7, #0]
 736 0028 1343     		orrs	r3, r3, r2
 737 002a FA68     		ldr	r2, [r7, #12]
 738 002c 1343     		orrs	r3, r3, r2
 739 002e FB60     		str	r3, [r7, #12]
 598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;  
 740              		.loc 1 600 0
 741 0030 4FF46053 		mov	r3, #14336
 742 0034 C4F20203 		movt	r3, 16386
 743 0038 FA68     		ldr	r2, [r7, #12]
 744 003a 9A60     		str	r2, [r3, #8]
 601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 745              		.loc 1 601 0
 746 003c 07F11407 		add	r7, r7, #20
 747 0040 BD46     		mov	sp, r7
 748 0042 80BC     		pop	{r7}
 749 0044 7047     		bx	lr
 750              		.cfi_endproc
 751              	.LFE123:
 753 0046 00BF     		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 754              		.align	2
 755              		.global	RCC_SYSCLKConfig
 756              		.thumb
 757              		.thumb_func
 759              	RCC_SYSCLKConfig:
 760              	.LFB124:
 602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group2 System AHB and APB busses clocks configuration functions
 608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   System, AHB and APB busses clocks configuration functions
 609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****              System, AHB and APB busses clocks configuration functions
 613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the System, AHB, APB1 and 
 616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   APB2 busses clocks.
 617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. Several clock sources can be used to drive the System clock (SYSCLK): HSI,
 619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      HSE and PLL.
 620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      The AHB clock (HCLK) is derived from System clock through configurable prescaler
 621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      and used to clock the CPU, memory and peripherals mapped on AHB bus (DMA, GPIO...).
 622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      APB1 (PCLK1) and APB2 (PCLK2) clocks are derived from AHB clock through 
 623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      configurable prescalers and used to clock the peripherals mapped on these busses.
 624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      You can use "RCC_GetClocksFreq()" function to retrieve the frequencies of these clocks.  
 625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @note All the peripheral clocks are derived from the System clock (SYSCLK) except:
 627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - I2S: the I2S clock can be derived either from a specific PLL (PLLI2S) or
 628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           from an external clock mapped on the I2S_CKIN pin. 
 629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           You have to use RCC_I2SCLKConfig() function to configure this clock. 
 630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - RTC: the RTC clock can be derived either from the LSI, LSE or HSE clock
 631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           divided by 2 to 31. You have to use RCC_RTCCLKConfig() and RCC_RTCCLKCmd()
 632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           functions to configure this clock. 
 633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - USB OTG FS, SDIO and RTC: USB OTG FS require a frequency equal to 48 MHz
 634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to work correctly, while the SDIO require a frequency equal or lower than
 635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****           to 48. This clock is derived of the main PLL through PLLQ divider.
 636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        - IWDG clock which is always the LSI clock.
 637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****        
 638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. The maximum frequency of the SYSCLK and HCLK is 120 MHz, PCLK2 60 MHz and PCLK1 30 MHz.
 639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      Depending on the device voltage range, the maximum frequency should be 
 640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      adapted accordingly:
 641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+     
 642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  | Latency       |                HCLK clock frequency (MHz)                           |
 643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               |---------------------------------------------------------------------|     
 644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | voltage range  | voltage range  | voltage range   | voltage range   |
 645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |               | 2.7 V - 3.6 V  | 2.4 V - 2.7 V  | 2.1 V - 2.4 V   | 1.8 V - 2.1 V   |
 646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|           
 647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |0WS(1CPU cycle)|0 < HCLK <= 30  |0 < HCLK <= 24  |0 < HCLK <= 18   |0 < HCLK <= 16   |
 648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |1WS(2CPU cycle)|30 < HCLK <= 60 |24 < HCLK <= 48 |18 < HCLK <= 36  |16 < HCLK <= 32  | 
 650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------|   
 651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |2WS(3CPU cycle)|60 < HCLK <= 90 |48 < HCLK <= 72 |36 < HCLK <= 54  |32 < HCLK <= 48  |
 652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |3WS(4CPU cycle)|90 < HCLK <= 120|72 < HCLK <= 96 |54 < HCLK <= 72  |48 < HCLK <= 64  |
 654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |4WS(5CPU cycle)|      NA        |96 < HCLK <= 120|72 < HCLK <= 90  |64 < HCLK <= 80  |
 656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |5WS(6CPU cycle)|      NA        |      NA        |90 < HCLK <= 108 |80 < HCLK <= 96  | 
 658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |6WS(7CPU cycle)|      NA        |      NA        |108 < HCLK <= 120|96 < HCLK <= 112 | 
 660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |---------------|----------------|----------------|-----------------|-----------------| 
 661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  |7WS(8CPU cycle)|      NA        |     NA         |     NA          |112 < HCLK <= 120| 
 662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  +-------------------------------------------------------------------------------------+    
 663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The HSI is used (enabled by hardware) as system clock source after
 672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         startup from Reset, wake-up from STOP and STANDBY mode, or in case
 673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of failure of the HSE used directly or indirectly as system clock
 674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (if the Clock Security System CSS is enabled).
 675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   A switch from one clock source to another occurs only if the target
 676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         clock source is ready (clock stable after startup delay or PLL locked). 
 677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         If a clock source which is not yet ready is selected, the switch will
 678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         occur when the clock source will be ready. 
 679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         You can use RCC_GetSYSCLKSource() function to know which clock is
 680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         currently used as system clock source. 
 681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSI:    HSI selected as system clock source
 684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
 685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
 686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 761              		.loc 1 689 0
 762              		.cfi_startproc
 763              		@ args = 0, pretend = 0, frame = 16
 764              		@ frame_needed = 1, uses_anonymous_args = 0
 765              		@ link register save eliminated.
 766 0000 80B4     		push	{r7}
 767              	.LCFI41:
 768              		.cfi_def_cfa_offset 4
 769              		.cfi_offset 7, -4
 770 0002 85B0     		sub	sp, sp, #20
 771              	.LCFI42:
 772              		.cfi_def_cfa_offset 24
 773 0004 00AF     		add	r7, sp, #0
 774              	.LCFI43:
 775              		.cfi_def_cfa_register 7
 776 0006 7860     		str	r0, [r7, #4]
 690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 777              		.loc 1 690 0
 778 0008 4FF00003 		mov	r3, #0
 779 000c FB60     		str	r3, [r7, #12]
 691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 780              		.loc 1 695 0
 781 000e 4FF46053 		mov	r3, #14336
 782 0012 C4F20203 		movt	r3, 16386
 783 0016 9B68     		ldr	r3, [r3, #8]
 784 0018 FB60     		str	r3, [r7, #12]
 696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear SW[1:0] bits */
 698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_SW;
 785              		.loc 1 698 0
 786 001a FB68     		ldr	r3, [r7, #12]
 787 001c 23F00303 		bic	r3, r3, #3
 788 0020 FB60     		str	r3, [r7, #12]
 699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 789              		.loc 1 701 0
 790 0022 FA68     		ldr	r2, [r7, #12]
 791 0024 7B68     		ldr	r3, [r7, #4]
 792 0026 1343     		orrs	r3, r3, r2
 793 0028 FB60     		str	r3, [r7, #12]
 702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 794              		.loc 1 704 0
 795 002a 4FF46053 		mov	r3, #14336
 796 002e C4F20203 		movt	r3, 16386
 797 0032 FA68     		ldr	r2, [r7, #12]
 798 0034 9A60     		str	r2, [r3, #8]
 705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 799              		.loc 1 705 0
 800 0036 07F11407 		add	r7, r7, #20
 801 003a BD46     		mov	sp, r7
 802 003c 80BC     		pop	{r7}
 803 003e 7047     		bx	lr
 804              		.cfi_endproc
 805              	.LFE124:
 807              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 808              		.align	2
 809              		.global	RCC_GetSYSCLKSource
 810              		.thumb
 811              		.thumb_func
 813              	RCC_GetSYSCLKSource:
 814              	.LFB125:
 706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the clock source used as system clock.
 709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
 710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The clock source used as system clock. The returned value can be one
 711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         of the following:
 712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x00: HSI used as system clock
 713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x04: HSE used as system clock
 714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *              - 0x08: PLL used as system clock
 715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 815              		.loc 1 717 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 0
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 820 0000 80B4     		push	{r7}
 821              	.LCFI44:
 822              		.cfi_def_cfa_offset 4
 823              		.cfi_offset 7, -4
 824 0002 00AF     		add	r7, sp, #0
 825              	.LCFI45:
 826              		.cfi_def_cfa_register 7
 718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 827              		.loc 1 718 0
 828 0004 4FF46053 		mov	r3, #14336
 829 0008 C4F20203 		movt	r3, 16386
 830 000c 9B68     		ldr	r3, [r3, #8]
 831 000e DBB2     		uxtb	r3, r3
 832 0010 03F00C03 		and	r3, r3, #12
 833 0014 DBB2     		uxtb	r3, r3
 719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 834              		.loc 1 719 0
 835 0016 1846     		mov	r0, r3
 836 0018 BD46     		mov	sp, r7
 837 001a 80BC     		pop	{r7}
 838 001c 7047     		bx	lr
 839              		.cfi_endproc
 840              	.LFE125:
 842 001e 00BF     		.section	.text.RCC_HCLKConfig,"ax",%progbits
 843              		.align	2
 844              		.global	RCC_HCLKConfig
 845              		.thumb
 846              		.thumb_func
 848              	RCC_HCLKConfig:
 849              	.LFB126:
 720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Depending on the device voltage range, the software has to set correctly
 724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         these bits to ensure that HCLK not exceed the maximum allowed frequency
 725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         (for more details refer to section above
 726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           "CPU, AHB and APB busses clocks configuration functions")
 727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the system clock (SYSCLK).
 729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 850              		.loc 1 742 0
 851              		.cfi_startproc
 852              		@ args = 0, pretend = 0, frame = 16
 853              		@ frame_needed = 1, uses_anonymous_args = 0
 854              		@ link register save eliminated.
 855 0000 80B4     		push	{r7}
 856              	.LCFI46:
 857              		.cfi_def_cfa_offset 4
 858              		.cfi_offset 7, -4
 859 0002 85B0     		sub	sp, sp, #20
 860              	.LCFI47:
 861              		.cfi_def_cfa_offset 24
 862 0004 00AF     		add	r7, sp, #0
 863              	.LCFI48:
 864              		.cfi_def_cfa_register 7
 865 0006 7860     		str	r0, [r7, #4]
 743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 866              		.loc 1 743 0
 867 0008 4FF00003 		mov	r3, #0
 868 000c FB60     		str	r3, [r7, #12]
 744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 869              		.loc 1 748 0
 870 000e 4FF46053 		mov	r3, #14336
 871 0012 C4F20203 		movt	r3, 16386
 872 0016 9B68     		ldr	r3, [r3, #8]
 873 0018 FB60     		str	r3, [r7, #12]
 749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear HPRE[3:0] bits */
 751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_HPRE;
 874              		.loc 1 751 0
 875 001a FB68     		ldr	r3, [r7, #12]
 876 001c 23F0F003 		bic	r3, r3, #240
 877 0020 FB60     		str	r3, [r7, #12]
 752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_SYSCLK;
 878              		.loc 1 754 0
 879 0022 FA68     		ldr	r2, [r7, #12]
 880 0024 7B68     		ldr	r3, [r7, #4]
 881 0026 1343     		orrs	r3, r3, r2
 882 0028 FB60     		str	r3, [r7, #12]
 755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 883              		.loc 1 757 0
 884 002a 4FF46053 		mov	r3, #14336
 885 002e C4F20203 		movt	r3, 16386
 886 0032 FA68     		ldr	r2, [r7, #12]
 887 0034 9A60     		str	r2, [r3, #8]
 758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 888              		.loc 1 758 0
 889 0036 07F11407 		add	r7, r7, #20
 890 003a BD46     		mov	sp, r7
 891 003c 80BC     		pop	{r7}
 892 003e 7047     		bx	lr
 893              		.cfi_endproc
 894              	.LFE126:
 896              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 897              		.align	2
 898              		.global	RCC_PCLK1Config
 899              		.thumb
 900              		.thumb_func
 902              	RCC_PCLK1Config:
 903              	.LFB127:
 759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB1 clock = HCLK
 767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB1 clock = HCLK/2
 768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB1 clock = HCLK/4
 769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
 770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 904              		.loc 1 774 0
 905              		.cfi_startproc
 906              		@ args = 0, pretend = 0, frame = 16
 907              		@ frame_needed = 1, uses_anonymous_args = 0
 908              		@ link register save eliminated.
 909 0000 80B4     		push	{r7}
 910              	.LCFI49:
 911              		.cfi_def_cfa_offset 4
 912              		.cfi_offset 7, -4
 913 0002 85B0     		sub	sp, sp, #20
 914              	.LCFI50:
 915              		.cfi_def_cfa_offset 24
 916 0004 00AF     		add	r7, sp, #0
 917              	.LCFI51:
 918              		.cfi_def_cfa_register 7
 919 0006 7860     		str	r0, [r7, #4]
 775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 920              		.loc 1 775 0
 921 0008 4FF00003 		mov	r3, #0
 922 000c FB60     		str	r3, [r7, #12]
 776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 923              		.loc 1 780 0
 924 000e 4FF46053 		mov	r3, #14336
 925 0012 C4F20203 		movt	r3, 16386
 926 0016 9B68     		ldr	r3, [r3, #8]
 927 0018 FB60     		str	r3, [r7, #12]
 781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE1[2:0] bits */
 783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE1;
 928              		.loc 1 783 0
 929 001a FB68     		ldr	r3, [r7, #12]
 930 001c 23F4E053 		bic	r3, r3, #7168
 931 0020 FB60     		str	r3, [r7, #12]
 784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK;
 932              		.loc 1 786 0
 933 0022 FA68     		ldr	r2, [r7, #12]
 934 0024 7B68     		ldr	r3, [r7, #4]
 935 0026 1343     		orrs	r3, r3, r2
 936 0028 FB60     		str	r3, [r7, #12]
 787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 937              		.loc 1 789 0
 938 002a 4FF46053 		mov	r3, #14336
 939 002e C4F20203 		movt	r3, 16386
 940 0032 FA68     		ldr	r2, [r7, #12]
 941 0034 9A60     		str	r2, [r3, #8]
 790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 942              		.loc 1 790 0
 943 0036 07F11407 		add	r7, r7, #20
 944 003a BD46     		mov	sp, r7
 945 003c 80BC     		pop	{r7}
 946 003e 7047     		bx	lr
 947              		.cfi_endproc
 948              	.LFE127:
 950              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 951              		.align	2
 952              		.global	RCC_PCLK2Config
 953              		.thumb
 954              		.thumb_func
 956              	RCC_PCLK2Config:
 957              	.LFB128:
 791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 794:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 795:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the AHB clock (HCLK).
 796:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 797:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div1:  APB2 clock = HCLK
 798:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div2:  APB2 clock = HCLK/2
 799:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div4:  APB2 clock = HCLK/4
 800:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
 801:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 802:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 803:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 804:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 805:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 958              		.loc 1 805 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 16
 961              		@ frame_needed = 1, uses_anonymous_args = 0
 962              		@ link register save eliminated.
 963 0000 80B4     		push	{r7}
 964              	.LCFI52:
 965              		.cfi_def_cfa_offset 4
 966              		.cfi_offset 7, -4
 967 0002 85B0     		sub	sp, sp, #20
 968              	.LCFI53:
 969              		.cfi_def_cfa_offset 24
 970 0004 00AF     		add	r7, sp, #0
 971              	.LCFI54:
 972              		.cfi_def_cfa_register 7
 973 0006 7860     		str	r0, [r7, #4]
 806:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 974              		.loc 1 806 0
 975 0008 4FF00003 		mov	r3, #0
 976 000c FB60     		str	r3, [r7, #12]
 807:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 808:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 809:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 810:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 811:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg = RCC->CFGR;
 977              		.loc 1 811 0
 978 000e 4FF46053 		mov	r3, #14336
 979 0012 C4F20203 		movt	r3, 16386
 980 0016 9B68     		ldr	r3, [r3, #8]
 981 0018 FB60     		str	r3, [r7, #12]
 812:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 813:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Clear PPRE2[2:0] bits */
 814:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg &= ~RCC_CFGR_PPRE2;
 982              		.loc 1 814 0
 983 001a FB68     		ldr	r3, [r7, #12]
 984 001c 23F46043 		bic	r3, r3, #57344
 985 0020 FB60     		str	r3, [r7, #12]
 815:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 816:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 817:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 986              		.loc 1 817 0
 987 0022 7B68     		ldr	r3, [r7, #4]
 988 0024 4FEAC303 		lsl	r3, r3, #3
 989 0028 FA68     		ldr	r2, [r7, #12]
 990 002a 1343     		orrs	r3, r3, r2
 991 002c FB60     		str	r3, [r7, #12]
 818:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 819:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Store the new value */
 820:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CFGR = tmpreg;
 992              		.loc 1 820 0
 993 002e 4FF46053 		mov	r3, #14336
 994 0032 C4F20203 		movt	r3, 16386
 995 0036 FA68     		ldr	r2, [r7, #12]
 996 0038 9A60     		str	r2, [r3, #8]
 821:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 997              		.loc 1 821 0
 998 003a 07F11407 		add	r7, r7, #20
 999 003e BD46     		mov	sp, r7
 1000 0040 80BC     		pop	{r7}
 1001 0042 7047     		bx	lr
 1002              		.cfi_endproc
 1003              	.LFE128:
 1005              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1006              		.align	2
 1007              		.global	RCC_GetClocksFreq
 1008              		.thumb
 1009              		.thumb_func
 1011              	RCC_GetClocksFreq:
 1012              	.LFB129:
 822:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 823:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 824:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks; SYSCLK, HCLK, 
 825:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         PCLK1 and PCLK2.       
 826:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * 
 827:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The system frequency computed by this function is not the real 
 828:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         frequency in the chip. It is calculated based on the predefined 
 829:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         constant and the selected clock source:
 830:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSI, function returns values based on HSI_VALUE(*)
 831:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is HSE, function returns values based on HSE_VALUE(**)
 832:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     If SYSCLK source is PLL, function returns values based on HSE_VALUE(**) 
 833:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           or HSI_VALUE(*) multiplied/divided by the PLL factors.         
 834:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (*) HSI_VALUE is a constant defined in stm32f4xx.h file (default value
 835:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               16 MHz) but the real value may vary depending on the variations
 836:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *               in voltage and temperature.
 837:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note     (**) HSE_VALUE is a constant defined in stm32f4xx.h file (default value
 838:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                25 MHz), user has to ensure that HSE_VALUE is same as the real
 839:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                frequency of the crystal used. Otherwise, this function may
 840:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                have wrong result.
 841:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                
 842:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The result of this function could be not correct when using fractional
 843:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         value for HSE crystal.
 844:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *   
 845:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 846:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          the clocks frequencies.
 847:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *     
 848:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function can be used by the user application to compute the 
 849:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         baudrate for the communication peripherals or configure other parameters.
 850:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Each time SYSCLK, HCLK, PCLK1 and/or PCLK2 clock changes, this function
 851:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         must be called to update the structure's field. Otherwise, any
 852:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         configuration based on this function will be incorrect.
 853:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 854:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 855:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 856:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 857:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1013              		.loc 1 857 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 32
 1016              		@ frame_needed = 1, uses_anonymous_args = 0
 1017              		@ link register save eliminated.
 1018 0000 80B4     		push	{r7}
 1019              	.LCFI55:
 1020              		.cfi_def_cfa_offset 4
 1021              		.cfi_offset 7, -4
 1022 0002 89B0     		sub	sp, sp, #36
 1023              	.LCFI56:
 1024              		.cfi_def_cfa_offset 40
 1025 0004 00AF     		add	r7, sp, #0
 1026              	.LCFI57:
 1027              		.cfi_def_cfa_register 7
 1028 0006 7860     		str	r0, [r7, #4]
 858:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 1029              		.loc 1 858 0
 1030 0008 4FF00003 		mov	r3, #0
 1031 000c BB61     		str	r3, [r7, #24]
 1032 000e 4FF00003 		mov	r3, #0
 1033 0012 7B61     		str	r3, [r7, #20]
 1034 0014 4FF00003 		mov	r3, #0
 1035 0018 FB61     		str	r3, [r7, #28]
 1036 001a 4FF00203 		mov	r3, #2
 1037 001e 3B61     		str	r3, [r7, #16]
 1038 0020 4FF00003 		mov	r3, #0
 1039 0024 FB60     		str	r3, [r7, #12]
 1040 0026 4FF00203 		mov	r3, #2
 1041 002a BB60     		str	r3, [r7, #8]
 859:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 860:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 861:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 1042              		.loc 1 861 0
 1043 002c 4FF46053 		mov	r3, #14336
 1044 0030 C4F20203 		movt	r3, 16386
 1045 0034 9B68     		ldr	r3, [r3, #8]
 1046 0036 03F00C03 		and	r3, r3, #12
 1047 003a BB61     		str	r3, [r7, #24]
 862:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 863:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   switch (tmp)
 1048              		.loc 1 863 0
 1049 003c BB69     		ldr	r3, [r7, #24]
 1050 003e 042B     		cmp	r3, #4
 1051 0040 0AD0     		beq	.L32
 1052 0042 082B     		cmp	r3, #8
 1053 0044 0FD0     		beq	.L33
 1054 0046 002B     		cmp	r3, #0
 1055 0048 60D1     		bne	.L37
 1056              	.L31:
 864:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
 865:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x00:  /* HSI used as system clock source */
 866:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1057              		.loc 1 866 0
 1058 004a 7A68     		ldr	r2, [r7, #4]
 1059 004c 4FF41053 		mov	r3, #9216
 1060 0050 C0F2F403 		movt	r3, 244
 1061 0054 1360     		str	r3, [r2, #0]
 867:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1062              		.loc 1 867 0
 1063 0056 60E0     		b	.L34
 1064              	.L32:
 868:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x04:  /* HSE used as system clock  source */
 869:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1065              		.loc 1 869 0
 1066 0058 7A68     		ldr	r2, [r7, #4]
 1067 005a 47F64003 		movw	r3, #30784
 1068 005e C0F27D13 		movt	r3, 381
 1069 0062 1360     		str	r3, [r2, #0]
 870:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1070              		.loc 1 870 0
 1071 0064 59E0     		b	.L34
 1072              	.L33:
 871:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     case 0x08:  /* PLL used as system clock  source */
 872:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 873:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
 874:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          SYSCLK = PLL_VCO / PLLP
 875:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****          */    
 876:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 1073              		.loc 1 876 0
 1074 0066 4FF46053 		mov	r3, #14336
 1075 006a C4F20203 		movt	r3, 16386
 1076 006e 5B68     		ldr	r3, [r3, #4]
 1077 0070 03F48003 		and	r3, r3, #4194304
 1078 0074 4FEA9353 		lsr	r3, r3, #22
 1079 0078 FB60     		str	r3, [r7, #12]
 877:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 1080              		.loc 1 877 0
 1081 007a 4FF46053 		mov	r3, #14336
 1082 007e C4F20203 		movt	r3, 16386
 1083 0082 5B68     		ldr	r3, [r3, #4]
 1084 0084 03F03F03 		and	r3, r3, #63
 1085 0088 BB60     		str	r3, [r7, #8]
 878:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       
 879:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       if (pllsource != 0)
 1086              		.loc 1 879 0
 1087 008a FB68     		ldr	r3, [r7, #12]
 1088 008c 002B     		cmp	r3, #0
 1089 008e 14D0     		beq	.L35
 880:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 881:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSE used as PLL clock source */
 882:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 1090              		.loc 1 882 0
 1091 0090 47F64003 		movw	r3, #30784
 1092 0094 C0F27D13 		movt	r3, 381
 1093 0098 BA68     		ldr	r2, [r7, #8]
 1094 009a B3FBF2F2 		udiv	r2, r3, r2
 1095 009e 4FF46053 		mov	r3, #14336
 1096 00a2 C4F20203 		movt	r3, 16386
 1097 00a6 5968     		ldr	r1, [r3, #4]
 1098 00a8 47F6C073 		movw	r3, #32704
 1099 00ac 0B40     		ands	r3, r3, r1
 1100 00ae 4FEA9313 		lsr	r3, r3, #6
 1101 00b2 03FB02F3 		mul	r3, r3, r2
 1102 00b6 FB61     		str	r3, [r7, #28]
 1103 00b8 13E0     		b	.L36
 1104              	.L35:
 883:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 884:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       else
 885:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       {
 886:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         /* HSI used as PLL clock source */
 887:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****         pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 1105              		.loc 1 887 0
 1106 00ba 4FF41053 		mov	r3, #9216
 1107 00be C0F2F403 		movt	r3, 244
 1108 00c2 BA68     		ldr	r2, [r7, #8]
 1109 00c4 B3FBF2F2 		udiv	r2, r3, r2
 1110 00c8 4FF46053 		mov	r3, #14336
 1111 00cc C4F20203 		movt	r3, 16386
 1112 00d0 5968     		ldr	r1, [r3, #4]
 1113 00d2 47F6C073 		movw	r3, #32704
 1114 00d6 0B40     		ands	r3, r3, r1
 1115 00d8 4FEA9313 		lsr	r3, r3, #6
 1116 00dc 03FB02F3 		mul	r3, r3, r2
 1117 00e0 FB61     		str	r3, [r7, #28]
 1118              	.L36:
 888:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       }
 889:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 890:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 1119              		.loc 1 890 0
 1120 00e2 4FF46053 		mov	r3, #14336
 1121 00e6 C4F20203 		movt	r3, 16386
 1122 00ea 5B68     		ldr	r3, [r3, #4]
 1123 00ec 03F44033 		and	r3, r3, #196608
 1124 00f0 4FEA1343 		lsr	r3, r3, #16
 1125 00f4 03F10103 		add	r3, r3, #1
 1126 00f8 4FEA4303 		lsl	r3, r3, #1
 1127 00fc 3B61     		str	r3, [r7, #16]
 891:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 1128              		.loc 1 891 0
 1129 00fe FA69     		ldr	r2, [r7, #28]
 1130 0100 3B69     		ldr	r3, [r7, #16]
 1131 0102 B2FBF3F2 		udiv	r2, r2, r3
 1132 0106 7B68     		ldr	r3, [r7, #4]
 1133 0108 1A60     		str	r2, [r3, #0]
 892:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1134              		.loc 1 892 0
 1135 010a 06E0     		b	.L34
 1136              	.L37:
 893:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     default:
 894:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1137              		.loc 1 894 0
 1138 010c 7A68     		ldr	r2, [r7, #4]
 1139 010e 4FF41053 		mov	r3, #9216
 1140 0112 C0F2F403 		movt	r3, 244
 1141 0116 1360     		str	r3, [r2, #0]
 895:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****       break;
 1142              		.loc 1 895 0
 1143 0118 00BF     		nop
 1144              	.L34:
 896:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
 897:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
 898:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 899:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get HCLK prescaler */
 900:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_HPRE;
 1145              		.loc 1 900 0
 1146 011a 4FF46053 		mov	r3, #14336
 1147 011e C4F20203 		movt	r3, 16386
 1148 0122 9B68     		ldr	r3, [r3, #8]
 1149 0124 03F0F003 		and	r3, r3, #240
 1150 0128 BB61     		str	r3, [r7, #24]
 901:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 4;
 1151              		.loc 1 901 0
 1152 012a BB69     		ldr	r3, [r7, #24]
 1153 012c 4FEA1313 		lsr	r3, r3, #4
 1154 0130 BB61     		str	r3, [r7, #24]
 902:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1155              		.loc 1 902 0
 1156 0132 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1157 0136 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1158 013a BA69     		ldr	r2, [r7, #24]
 1159 013c 9B18     		adds	r3, r3, r2
 1160 013e 1B78     		ldrb	r3, [r3, #0]
 1161 0140 DBB2     		uxtb	r3, r3
 1162 0142 7B61     		str	r3, [r7, #20]
 903:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* HCLK clock frequency */
 904:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1163              		.loc 1 904 0
 1164 0144 7B68     		ldr	r3, [r7, #4]
 1165 0146 1A68     		ldr	r2, [r3, #0]
 1166 0148 7B69     		ldr	r3, [r7, #20]
 1167 014a 22FA03F2 		lsr	r2, r2, r3
 1168 014e 7B68     		ldr	r3, [r7, #4]
 1169 0150 5A60     		str	r2, [r3, #4]
 905:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 906:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK1 prescaler */
 907:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 1170              		.loc 1 907 0
 1171 0152 4FF46053 		mov	r3, #14336
 1172 0156 C4F20203 		movt	r3, 16386
 1173 015a 9B68     		ldr	r3, [r3, #8]
 1174 015c 03F4E053 		and	r3, r3, #7168
 1175 0160 BB61     		str	r3, [r7, #24]
 908:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 10;
 1176              		.loc 1 908 0
 1177 0162 BB69     		ldr	r3, [r7, #24]
 1178 0164 4FEA9323 		lsr	r3, r3, #10
 1179 0168 BB61     		str	r3, [r7, #24]
 909:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1180              		.loc 1 909 0
 1181 016a 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1182 016e C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1183 0172 BA69     		ldr	r2, [r7, #24]
 1184 0174 9B18     		adds	r3, r3, r2
 1185 0176 1B78     		ldrb	r3, [r3, #0]
 1186 0178 DBB2     		uxtb	r3, r3
 1187 017a 7B61     		str	r3, [r7, #20]
 910:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK1 clock frequency */
 911:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1188              		.loc 1 911 0
 1189 017c 7B68     		ldr	r3, [r7, #4]
 1190 017e 5A68     		ldr	r2, [r3, #4]
 1191 0180 7B69     		ldr	r3, [r7, #20]
 1192 0182 22FA03F2 		lsr	r2, r2, r3
 1193 0186 7B68     		ldr	r3, [r7, #4]
 1194 0188 9A60     		str	r2, [r3, #8]
 912:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 913:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get PCLK2 prescaler */
 914:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 1195              		.loc 1 914 0
 1196 018a 4FF46053 		mov	r3, #14336
 1197 018e C4F20203 		movt	r3, 16386
 1198 0192 9B68     		ldr	r3, [r3, #8]
 1199 0194 03F46043 		and	r3, r3, #57344
 1200 0198 BB61     		str	r3, [r7, #24]
 915:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = tmp >> 13;
 1201              		.loc 1 915 0
 1202 019a BB69     		ldr	r3, [r7, #24]
 1203 019c 4FEA5333 		lsr	r3, r3, #13
 1204 01a0 BB61     		str	r3, [r7, #24]
 916:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1205              		.loc 1 916 0
 1206 01a2 40F20003 		movw	r3, #:lower16:APBAHBPrescTable
 1207 01a6 C0F20003 		movt	r3, #:upper16:APBAHBPrescTable
 1208 01aa BA69     		ldr	r2, [r7, #24]
 1209 01ac 9B18     		adds	r3, r3, r2
 1210 01ae 1B78     		ldrb	r3, [r3, #0]
 1211 01b0 DBB2     		uxtb	r3, r3
 1212 01b2 7B61     		str	r3, [r7, #20]
 917:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* PCLK2 clock frequency */
 918:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1213              		.loc 1 918 0
 1214 01b4 7B68     		ldr	r3, [r7, #4]
 1215 01b6 5A68     		ldr	r2, [r3, #4]
 1216 01b8 7B69     		ldr	r3, [r7, #20]
 1217 01ba 22FA03F2 		lsr	r2, r2, r3
 1218 01be 7B68     		ldr	r3, [r7, #4]
 1219 01c0 DA60     		str	r2, [r3, #12]
 919:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1220              		.loc 1 919 0
 1221 01c2 07F12407 		add	r7, r7, #36
 1222 01c6 BD46     		mov	sp, r7
 1223 01c8 80BC     		pop	{r7}
 1224 01ca 7047     		bx	lr
 1225              		.cfi_endproc
 1226              	.LFE129:
 1228              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1229              		.align	2
 1230              		.global	RCC_RTCCLKConfig
 1231              		.thumb
 1232              		.thumb_func
 1234              	RCC_RTCCLKConfig:
 1235              	.LFB130:
 920:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 921:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 922:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
 923:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 924:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 925:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group3 Peripheral clocks configuration functions
 926:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Peripheral clocks configuration functions 
 927:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
 928:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
 929:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
 930:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Peripheral clocks configuration functions
 931:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
 932:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 933:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   This section provide functions allowing to configure the Peripheral clocks. 
 934:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   
 935:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   1. The RTC clock which is derived from the LSI, LSE or HSE clock divided by 2 to 31.
 936:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 937:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   2. After restart from Reset or wakeup from STANDBY, all peripherals are off
 938:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      except internal SRAM, Flash and JTAG. Before to start using a peripheral you
 939:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      have to enable its interface clock. You can do this using RCC_AHBPeriphClockCmd()
 940:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      , RCC_APB2PeriphClockCmd() and RCC_APB1PeriphClockCmd() functions.
 941:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 942:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   3. To reset the peripherals configuration (to the default state after device reset)
 943:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      you can use RCC_AHBPeriphResetCmd(), RCC_APB2PeriphResetCmd() and 
 944:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphResetCmd() functions.
 945:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      
 946:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   4. To further reduce power consumption in SLEEP mode the peripheral clocks can
 947:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      be disabled prior to executing the WFI or WFE instructions. You can do this
 948:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      using RCC_AHBPeriphClockLPModeCmd(), RCC_APB2PeriphClockLPModeCmd() and
 949:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      RCC_APB1PeriphClockLPModeCmd() functions.  
 950:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 951:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
 952:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
 953:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 954:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 955:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
 956:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 957:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   As the RTC clock configuration bits are in the Backup domain and write
 958:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access is denied to this domain after reset, you have to enable write
 959:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         access using PWR_BackupAccessCmd(ENABLE) function before to configure
 960:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         the RTC clock source (to be done once after reset).    
 961:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Once the RTC clock is configured it can't be changed unless the  
 962:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         Backup domain is reset using RCC_BackupResetCmd() function, or by
 963:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         a Power On Reset (POR).
 964:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *    
 965:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 966:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
 967:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 968:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 969:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_RTCCLKSource_HSE_Divx: HSE clock divided by x selected
 970:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                            as RTC clock, where x:[2,31]
 971:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 972:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   If the LSE or LSI is used as RTC clock source, the RTC continues to
 973:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         work in STOP and STANDBY modes, and can be used as wakeup source.
 974:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         However, when the HSE clock is used as RTC clock source, the RTC
 975:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         cannot be used in STOP and STANDBY modes.    
 976:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The maximum input clock frequency for RTC is 1MHz (when using HSE as
 977:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RTC clock source).
 978:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *  
 979:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
 980:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
 981:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 982:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1236              		.loc 1 982 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 16
 1239              		@ frame_needed = 1, uses_anonymous_args = 0
 1240              		@ link register save eliminated.
 1241 0000 80B4     		push	{r7}
 1242              	.LCFI58:
 1243              		.cfi_def_cfa_offset 4
 1244              		.cfi_offset 7, -4
 1245 0002 85B0     		sub	sp, sp, #20
 1246              	.LCFI59:
 1247              		.cfi_def_cfa_offset 24
 1248 0004 00AF     		add	r7, sp, #0
 1249              	.LCFI60:
 1250              		.cfi_def_cfa_register 7
 1251 0006 7860     		str	r0, [r7, #4]
 983:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmpreg = 0;
 1252              		.loc 1 983 0
 1253 0008 4FF00003 		mov	r3, #0
 1254 000c FB60     		str	r3, [r7, #12]
 984:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 985:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
 986:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 987:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 988:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC_RTCCLKSource & 0x00000300) == 0x00000300)
 1255              		.loc 1 988 0
 1256 000e 7B68     		ldr	r3, [r7, #4]
 1257 0010 03F44073 		and	r3, r3, #768
 1258 0014 B3F5407F 		cmp	r3, #768
 1259 0018 17D1     		bne	.L39
 989:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   { /* If HSE is selected as RTC clock source, configure HSE division factor for RTC clock */
 990:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg = RCC->CFGR;
 1260              		.loc 1 990 0
 1261 001a 4FF46053 		mov	r3, #14336
 1262 001e C4F20203 		movt	r3, 16386
 1263 0022 9B68     		ldr	r3, [r3, #8]
 1264 0024 FB60     		str	r3, [r7, #12]
 991:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 992:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Clear RTCPRE[4:0] bits */
 993:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg &= ~RCC_CFGR_RTCPRE;
 1265              		.loc 1 993 0
 1266 0026 FB68     		ldr	r3, [r7, #12]
 1267 0028 23F4F813 		bic	r3, r3, #2031616
 1268 002c FB60     		str	r3, [r7, #12]
 994:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 995:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Configure HSE division factor for RTC clock */
 996:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     tmpreg |= (RCC_RTCCLKSource & 0xFFFFCFF);
 1269              		.loc 1 996 0
 1270 002e 7B68     		ldr	r3, [r7, #4]
 1271 0030 23F07043 		bic	r3, r3, #-268435456
 1272 0034 23F44073 		bic	r3, r3, #768
 1273 0038 FA68     		ldr	r2, [r7, #12]
 1274 003a 1343     		orrs	r3, r3, r2
 1275 003c FB60     		str	r3, [r7, #12]
 997:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
 998:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Store the new value */
 999:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->CFGR = tmpreg;
 1276              		.loc 1 999 0
 1277 003e 4FF46053 		mov	r3, #14336
 1278 0042 C4F20203 		movt	r3, 16386
 1279 0046 FA68     		ldr	r2, [r7, #12]
 1280 0048 9A60     		str	r2, [r3, #8]
 1281              	.L39:
1000:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1001:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     
1002:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Select the RTC clock source */
1003:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->BDCR |= (RCC_RTCCLKSource & 0x00000FFF);
 1282              		.loc 1 1003 0
 1283 004a 4FF46053 		mov	r3, #14336
 1284 004e C4F20203 		movt	r3, 16386
 1285 0052 4FF46052 		mov	r2, #14336
 1286 0056 C4F20202 		movt	r2, 16386
 1287 005a 116F     		ldr	r1, [r2, #112]
 1288 005c 7A68     		ldr	r2, [r7, #4]
 1289 005e 4FEA0252 		lsl	r2, r2, #20
 1290 0062 4FEA1252 		lsr	r2, r2, #20
 1291 0066 0A43     		orrs	r2, r2, r1
 1292 0068 1A67     		str	r2, [r3, #112]
1004:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1293              		.loc 1 1004 0
 1294 006a 07F11407 		add	r7, r7, #20
 1295 006e BD46     		mov	sp, r7
 1296 0070 80BC     		pop	{r7}
 1297 0072 7047     		bx	lr
 1298              		.cfi_endproc
 1299              	.LFE130:
 1301              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1302              		.align	2
 1303              		.global	RCC_RTCCLKCmd
 1304              		.thumb
 1305              		.thumb_func
 1307              	RCC_RTCCLKCmd:
 1308              	.LFB131:
1005:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1006:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1007:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the RTC clock.
1008:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be used only after the RTC clock source was selected
1009:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using the RCC_RTCCLKConfig function.
1010:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
1011:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1012:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1013:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
1014:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1309              		.loc 1 1014 0
 1310              		.cfi_startproc
 1311              		@ args = 0, pretend = 0, frame = 8
 1312              		@ frame_needed = 1, uses_anonymous_args = 0
 1313              		@ link register save eliminated.
 1314 0000 80B4     		push	{r7}
 1315              	.LCFI61:
 1316              		.cfi_def_cfa_offset 4
 1317              		.cfi_offset 7, -4
 1318 0002 83B0     		sub	sp, sp, #12
 1319              	.LCFI62:
 1320              		.cfi_def_cfa_offset 16
 1321 0004 00AF     		add	r7, sp, #0
 1322              	.LCFI63:
 1323              		.cfi_def_cfa_register 7
 1324 0006 0346     		mov	r3, r0
 1325 0008 FB71     		strb	r3, [r7, #7]
1015:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1016:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1017:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1018:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1326              		.loc 1 1018 0
 1327 000a 40F63C63 		movw	r3, #3644
 1328 000e C4F24723 		movt	r3, 16967
 1329 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1330 0014 1A60     		str	r2, [r3, #0]
1019:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1331              		.loc 1 1019 0
 1332 0016 07F10C07 		add	r7, r7, #12
 1333 001a BD46     		mov	sp, r7
 1334 001c 80BC     		pop	{r7}
 1335 001e 7047     		bx	lr
 1336              		.cfi_endproc
 1337              	.LFE131:
 1339              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 1340              		.align	2
 1341              		.global	RCC_BackupResetCmd
 1342              		.thumb
 1343              		.thumb_func
 1345              	RCC_BackupResetCmd:
 1346              	.LFB132:
1020:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1021:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1022:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1023:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function resets the RTC peripheral (including the backup registers)
1024:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         and the RTC clock source selection in RCC_CSR register.
1025:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   The BKPSRAM is not affected by this reset.    
1026:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1027:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1028:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1029:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1030:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1031:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1347              		.loc 1 1031 0
 1348              		.cfi_startproc
 1349              		@ args = 0, pretend = 0, frame = 8
 1350              		@ frame_needed = 1, uses_anonymous_args = 0
 1351              		@ link register save eliminated.
 1352 0000 80B4     		push	{r7}
 1353              	.LCFI64:
 1354              		.cfi_def_cfa_offset 4
 1355              		.cfi_offset 7, -4
 1356 0002 83B0     		sub	sp, sp, #12
 1357              	.LCFI65:
 1358              		.cfi_def_cfa_offset 16
 1359 0004 00AF     		add	r7, sp, #0
 1360              	.LCFI66:
 1361              		.cfi_def_cfa_register 7
 1362 0006 0346     		mov	r3, r0
 1363 0008 FB71     		strb	r3, [r7, #7]
1032:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1033:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1034:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1364              		.loc 1 1034 0
 1365 000a 4FF46463 		mov	r3, #3648
 1366 000e C4F24723 		movt	r3, 16967
 1367 0012 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1368 0014 1A60     		str	r2, [r3, #0]
1035:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1369              		.loc 1 1035 0
 1370 0016 07F10C07 		add	r7, r7, #12
 1371 001a BD46     		mov	sp, r7
 1372 001c 80BC     		pop	{r7}
 1373 001e 7047     		bx	lr
 1374              		.cfi_endproc
 1375              	.LFE132:
 1377              		.section	.text.RCC_I2SCLKConfig,"ax",%progbits
 1378              		.align	2
 1379              		.global	RCC_I2SCLKConfig
 1380              		.thumb
 1381              		.thumb_func
 1383              	RCC_I2SCLKConfig:
 1384              	.LFB133:
1036:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1037:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1038:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Configures the I2S clock source (I2SCLK).
1039:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1040:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function must be called before enabling the I2S APB clock.
1041:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   This function applies only to Silicon RevisionB and RevisionY.
1042:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *
1043:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_I2SCLKSource: specifies the I2S clock source.
1044:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1045:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_PLLI2S: PLLI2S clock used as I2S clock source
1046:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_I2S2CLKSource_Ext: External clock mapped on the I2S_CKIN pin
1047:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                                        used as I2S clock source
1048:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1049:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1050:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_I2SCLKConfig(uint32_t RCC_I2SCLKSource)
1051:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1385              		.loc 1 1051 0
 1386              		.cfi_startproc
 1387              		@ args = 0, pretend = 0, frame = 8
 1388              		@ frame_needed = 1, uses_anonymous_args = 0
 1389              		@ link register save eliminated.
 1390 0000 80B4     		push	{r7}
 1391              	.LCFI67:
 1392              		.cfi_def_cfa_offset 4
 1393              		.cfi_offset 7, -4
 1394 0002 83B0     		sub	sp, sp, #12
 1395              	.LCFI68:
 1396              		.cfi_def_cfa_offset 16
 1397 0004 00AF     		add	r7, sp, #0
 1398              	.LCFI69:
 1399              		.cfi_def_cfa_register 7
 1400 0006 7860     		str	r0, [r7, #4]
1052:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1053:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_I2SCLK_SOURCE(RCC_I2SCLKSource));
1054:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1055:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint32_t *) CFGR_I2SSRC_BB = RCC_I2SCLKSource;
 1401              		.loc 1 1055 0
 1402 0008 4FF4AE73 		mov	r3, #348
 1403 000c C4F24723 		movt	r3, 16967
 1404 0010 7A68     		ldr	r2, [r7, #4]
 1405 0012 1A60     		str	r2, [r3, #0]
1056:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1406              		.loc 1 1056 0
 1407 0014 07F10C07 		add	r7, r7, #12
 1408 0018 BD46     		mov	sp, r7
 1409 001a 80BC     		pop	{r7}
 1410 001c 7047     		bx	lr
 1411              		.cfi_endproc
 1412              	.LFE133:
 1414 001e 00BF     		.section	.text.RCC_AHB1PeriphClockCmd,"ax",%progbits
 1415              		.align	2
 1416              		.global	RCC_AHB1PeriphClockCmd
 1417              		.thumb
 1418              		.thumb_func
 1420              	RCC_AHB1PeriphClockCmd:
 1421              	.LFB134:
1057:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1058:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1059:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock.
1060:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1061:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1062:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.   
1063:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1064:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1065:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1066:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1067:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1068:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1069:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1070:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1071:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1072:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1073:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1074:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1075:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1076:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1077:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1078:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1079:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1080:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1081:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1082:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1083:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1084:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1085:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1086:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1087:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1088:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1089:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1422              		.loc 1 1089 0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 8
 1425              		@ frame_needed = 1, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
 1427 0000 80B4     		push	{r7}
 1428              	.LCFI70:
 1429              		.cfi_def_cfa_offset 4
 1430              		.cfi_offset 7, -4
 1431 0002 83B0     		sub	sp, sp, #12
 1432              	.LCFI71:
 1433              		.cfi_def_cfa_offset 16
 1434 0004 00AF     		add	r7, sp, #0
 1435              	.LCFI72:
 1436              		.cfi_def_cfa_register 7
 1437 0006 7860     		str	r0, [r7, #4]
 1438 0008 0B46     		mov	r3, r1
 1439 000a FB70     		strb	r3, [r7, #3]
1090:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1091:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));
1092:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1093:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1094:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1440              		.loc 1 1094 0
 1441 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1442 000e 002B     		cmp	r3, #0
 1443 0010 0CD0     		beq	.L44
1095:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1096:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR |= RCC_AHB1Periph;
 1444              		.loc 1 1096 0
 1445 0012 4FF46053 		mov	r3, #14336
 1446 0016 C4F20203 		movt	r3, 16386
 1447 001a 4FF46052 		mov	r2, #14336
 1448 001e C4F20202 		movt	r2, 16386
 1449 0022 116B     		ldr	r1, [r2, #48]
 1450 0024 7A68     		ldr	r2, [r7, #4]
 1451 0026 0A43     		orrs	r2, r2, r1
 1452 0028 1A63     		str	r2, [r3, #48]
 1453 002a 0DE0     		b	.L43
 1454              	.L44:
1097:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1098:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1099:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1100:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1ENR &= ~RCC_AHB1Periph;
 1455              		.loc 1 1100 0
 1456 002c 4FF46053 		mov	r3, #14336
 1457 0030 C4F20203 		movt	r3, 16386
 1458 0034 4FF46052 		mov	r2, #14336
 1459 0038 C4F20202 		movt	r2, 16386
 1460 003c 116B     		ldr	r1, [r2, #48]
 1461 003e 7A68     		ldr	r2, [r7, #4]
 1462 0040 6FEA0202 		mvn	r2, r2
 1463 0044 0A40     		ands	r2, r2, r1
 1464 0046 1A63     		str	r2, [r3, #48]
 1465              	.L43:
1101:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1102:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1466              		.loc 1 1102 0
 1467 0048 07F10C07 		add	r7, r7, #12
 1468 004c BD46     		mov	sp, r7
 1469 004e 80BC     		pop	{r7}
 1470 0050 7047     		bx	lr
 1471              		.cfi_endproc
 1472              	.LFE134:
 1474 0052 00BF     		.section	.text.RCC_AHB2PeriphClockCmd,"ax",%progbits
 1475              		.align	2
 1476              		.global	RCC_AHB2PeriphClockCmd
 1477              		.thumb
 1478              		.thumb_func
 1480              	RCC_AHB2PeriphClockCmd:
 1481              	.LFB135:
1103:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1104:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1105:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock.
1106:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1107:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1108:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1109:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1110:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1111:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1112:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1113:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1114:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1115:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1116:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1117:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1118:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1119:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1120:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1121:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1482              		.loc 1 1121 0
 1483              		.cfi_startproc
 1484              		@ args = 0, pretend = 0, frame = 8
 1485              		@ frame_needed = 1, uses_anonymous_args = 0
 1486              		@ link register save eliminated.
 1487 0000 80B4     		push	{r7}
 1488              	.LCFI73:
 1489              		.cfi_def_cfa_offset 4
 1490              		.cfi_offset 7, -4
 1491 0002 83B0     		sub	sp, sp, #12
 1492              	.LCFI74:
 1493              		.cfi_def_cfa_offset 16
 1494 0004 00AF     		add	r7, sp, #0
 1495              	.LCFI75:
 1496              		.cfi_def_cfa_register 7
 1497 0006 7860     		str	r0, [r7, #4]
 1498 0008 0B46     		mov	r3, r1
 1499 000a FB70     		strb	r3, [r7, #3]
1122:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1123:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1124:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1125:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1126:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1500              		.loc 1 1126 0
 1501 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1502 000e 002B     		cmp	r3, #0
 1503 0010 0CD0     		beq	.L47
1127:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1128:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR |= RCC_AHB2Periph;
 1504              		.loc 1 1128 0
 1505 0012 4FF46053 		mov	r3, #14336
 1506 0016 C4F20203 		movt	r3, 16386
 1507 001a 4FF46052 		mov	r2, #14336
 1508 001e C4F20202 		movt	r2, 16386
 1509 0022 516B     		ldr	r1, [r2, #52]
 1510 0024 7A68     		ldr	r2, [r7, #4]
 1511 0026 0A43     		orrs	r2, r2, r1
 1512 0028 5A63     		str	r2, [r3, #52]
 1513 002a 0DE0     		b	.L46
 1514              	.L47:
1129:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1130:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1131:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1132:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2ENR &= ~RCC_AHB2Periph;
 1515              		.loc 1 1132 0
 1516 002c 4FF46053 		mov	r3, #14336
 1517 0030 C4F20203 		movt	r3, 16386
 1518 0034 4FF46052 		mov	r2, #14336
 1519 0038 C4F20202 		movt	r2, 16386
 1520 003c 516B     		ldr	r1, [r2, #52]
 1521 003e 7A68     		ldr	r2, [r7, #4]
 1522 0040 6FEA0202 		mvn	r2, r2
 1523 0044 0A40     		ands	r2, r2, r1
 1524 0046 5A63     		str	r2, [r3, #52]
 1525              	.L46:
1133:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1134:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1526              		.loc 1 1134 0
 1527 0048 07F10C07 		add	r7, r7, #12
 1528 004c BD46     		mov	sp, r7
 1529 004e 80BC     		pop	{r7}
 1530 0050 7047     		bx	lr
 1531              		.cfi_endproc
 1532              	.LFE135:
 1534 0052 00BF     		.section	.text.RCC_AHB3PeriphClockCmd,"ax",%progbits
 1535              		.align	2
 1536              		.global	RCC_AHB3PeriphClockCmd
 1537              		.thumb
 1538              		.thumb_func
 1540              	RCC_AHB3PeriphClockCmd:
 1541              	.LFB136:
1135:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1136:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1137:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock.
1138:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1139:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1140:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1141:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1142:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1143:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1144:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1145:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1146:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1147:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1148:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1542              		.loc 1 1148 0
 1543              		.cfi_startproc
 1544              		@ args = 0, pretend = 0, frame = 8
 1545              		@ frame_needed = 1, uses_anonymous_args = 0
 1546              		@ link register save eliminated.
 1547 0000 80B4     		push	{r7}
 1548              	.LCFI76:
 1549              		.cfi_def_cfa_offset 4
 1550              		.cfi_offset 7, -4
 1551 0002 83B0     		sub	sp, sp, #12
 1552              	.LCFI77:
 1553              		.cfi_def_cfa_offset 16
 1554 0004 00AF     		add	r7, sp, #0
 1555              	.LCFI78:
 1556              		.cfi_def_cfa_register 7
 1557 0006 7860     		str	r0, [r7, #4]
 1558 0008 0B46     		mov	r3, r1
 1559 000a FB70     		strb	r3, [r7, #3]
1149:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1150:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));  
1151:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1152:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1153:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1560              		.loc 1 1153 0
 1561 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1562 000e 002B     		cmp	r3, #0
 1563 0010 0CD0     		beq	.L50
1154:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1155:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR |= RCC_AHB3Periph;
 1564              		.loc 1 1155 0
 1565 0012 4FF46053 		mov	r3, #14336
 1566 0016 C4F20203 		movt	r3, 16386
 1567 001a 4FF46052 		mov	r2, #14336
 1568 001e C4F20202 		movt	r2, 16386
 1569 0022 916B     		ldr	r1, [r2, #56]
 1570 0024 7A68     		ldr	r2, [r7, #4]
 1571 0026 0A43     		orrs	r2, r2, r1
 1572 0028 9A63     		str	r2, [r3, #56]
 1573 002a 0DE0     		b	.L49
 1574              	.L50:
1156:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1157:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1158:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1159:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3ENR &= ~RCC_AHB3Periph;
 1575              		.loc 1 1159 0
 1576 002c 4FF46053 		mov	r3, #14336
 1577 0030 C4F20203 		movt	r3, 16386
 1578 0034 4FF46052 		mov	r2, #14336
 1579 0038 C4F20202 		movt	r2, 16386
 1580 003c 916B     		ldr	r1, [r2, #56]
 1581 003e 7A68     		ldr	r2, [r7, #4]
 1582 0040 6FEA0202 		mvn	r2, r2
 1583 0044 0A40     		ands	r2, r2, r1
 1584 0046 9A63     		str	r2, [r3, #56]
 1585              	.L49:
1160:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1161:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1586              		.loc 1 1161 0
 1587 0048 07F10C07 		add	r7, r7, #12
 1588 004c BD46     		mov	sp, r7
 1589 004e 80BC     		pop	{r7}
 1590 0050 7047     		bx	lr
 1591              		.cfi_endproc
 1592              	.LFE136:
 1594 0052 00BF     		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1595              		.align	2
 1596              		.global	RCC_APB1PeriphClockCmd
 1597              		.thumb
 1598              		.thumb_func
 1600              	RCC_APB1PeriphClockCmd:
 1601              	.LFB137:
1162:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1163:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1164:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1165:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1166:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1167:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it. 
1168:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1169:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1170:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1171:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1172:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1173:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1174:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1175:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1176:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1177:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1178:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1179:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1180:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1181:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1182:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1183:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1184:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1185:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1186:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1187:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1188:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1189:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1190:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1191:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1192:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1193:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1194:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1195:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1196:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1197:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1198:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1602              		.loc 1 1198 0
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 8
 1605              		@ frame_needed = 1, uses_anonymous_args = 0
 1606              		@ link register save eliminated.
 1607 0000 80B4     		push	{r7}
 1608              	.LCFI79:
 1609              		.cfi_def_cfa_offset 4
 1610              		.cfi_offset 7, -4
 1611 0002 83B0     		sub	sp, sp, #12
 1612              	.LCFI80:
 1613              		.cfi_def_cfa_offset 16
 1614 0004 00AF     		add	r7, sp, #0
 1615              	.LCFI81:
 1616              		.cfi_def_cfa_register 7
 1617 0006 7860     		str	r0, [r7, #4]
 1618 0008 0B46     		mov	r3, r1
 1619 000a FB70     		strb	r3, [r7, #3]
1199:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1200:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
1201:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1202:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1203:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1620              		.loc 1 1203 0
 1621 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1622 000e 002B     		cmp	r3, #0
 1623 0010 0CD0     		beq	.L53
1204:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1205:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1624              		.loc 1 1205 0
 1625 0012 4FF46053 		mov	r3, #14336
 1626 0016 C4F20203 		movt	r3, 16386
 1627 001a 4FF46052 		mov	r2, #14336
 1628 001e C4F20202 		movt	r2, 16386
 1629 0022 116C     		ldr	r1, [r2, #64]
 1630 0024 7A68     		ldr	r2, [r7, #4]
 1631 0026 0A43     		orrs	r2, r2, r1
 1632 0028 1A64     		str	r2, [r3, #64]
 1633 002a 0DE0     		b	.L52
 1634              	.L53:
1206:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1207:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1208:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1209:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1635              		.loc 1 1209 0
 1636 002c 4FF46053 		mov	r3, #14336
 1637 0030 C4F20203 		movt	r3, 16386
 1638 0034 4FF46052 		mov	r2, #14336
 1639 0038 C4F20202 		movt	r2, 16386
 1640 003c 116C     		ldr	r1, [r2, #64]
 1641 003e 7A68     		ldr	r2, [r7, #4]
 1642 0040 6FEA0202 		mvn	r2, r2
 1643 0044 0A40     		ands	r2, r2, r1
 1644 0046 1A64     		str	r2, [r3, #64]
 1645              	.L52:
1210:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1211:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1646              		.loc 1 1211 0
 1647 0048 07F10C07 		add	r7, r7, #12
 1648 004c BD46     		mov	sp, r7
 1649 004e 80BC     		pop	{r7}
 1650 0050 7047     		bx	lr
 1651              		.cfi_endproc
 1652              	.LFE137:
 1654 0052 00BF     		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1655              		.align	2
 1656              		.global	RCC_APB2PeriphClockCmd
 1657              		.thumb
 1658              		.thumb_func
 1660              	RCC_APB2PeriphClockCmd:
 1661              	.LFB138:
1212:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1213:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1214:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1215:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After reset, the peripheral clock (used for registers read/write access)
1216:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         is disabled and the application software has to enable this clock before 
1217:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         using it.
1218:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1219:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1220:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1221:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1222:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1223:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1224:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1225:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1226:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1227:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1228:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1229:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1230:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1231:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1232:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1233:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1234:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1235:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1236:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1237:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1238:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1662              		.loc 1 1238 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 8
 1665              		@ frame_needed = 1, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
 1667 0000 80B4     		push	{r7}
 1668              	.LCFI82:
 1669              		.cfi_def_cfa_offset 4
 1670              		.cfi_offset 7, -4
 1671 0002 83B0     		sub	sp, sp, #12
 1672              	.LCFI83:
 1673              		.cfi_def_cfa_offset 16
 1674 0004 00AF     		add	r7, sp, #0
 1675              	.LCFI84:
 1676              		.cfi_def_cfa_register 7
 1677 0006 7860     		str	r0, [r7, #4]
 1678 0008 0B46     		mov	r3, r1
 1679 000a FB70     		strb	r3, [r7, #3]
1239:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1240:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1241:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1243:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1680              		.loc 1 1243 0
 1681 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1682 000e 002B     		cmp	r3, #0
 1683 0010 0CD0     		beq	.L56
1244:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1245:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1684              		.loc 1 1245 0
 1685 0012 4FF46053 		mov	r3, #14336
 1686 0016 C4F20203 		movt	r3, 16386
 1687 001a 4FF46052 		mov	r2, #14336
 1688 001e C4F20202 		movt	r2, 16386
 1689 0022 516C     		ldr	r1, [r2, #68]
 1690 0024 7A68     		ldr	r2, [r7, #4]
 1691 0026 0A43     		orrs	r2, r2, r1
 1692 0028 5A64     		str	r2, [r3, #68]
 1693 002a 0DE0     		b	.L55
 1694              	.L56:
1246:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1247:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1248:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1249:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1695              		.loc 1 1249 0
 1696 002c 4FF46053 		mov	r3, #14336
 1697 0030 C4F20203 		movt	r3, 16386
 1698 0034 4FF46052 		mov	r2, #14336
 1699 0038 C4F20202 		movt	r2, 16386
 1700 003c 516C     		ldr	r1, [r2, #68]
 1701 003e 7A68     		ldr	r2, [r7, #4]
 1702 0040 6FEA0202 		mvn	r2, r2
 1703 0044 0A40     		ands	r2, r2, r1
 1704 0046 5A64     		str	r2, [r3, #68]
 1705              	.L55:
1250:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1251:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1706              		.loc 1 1251 0
 1707 0048 07F10C07 		add	r7, r7, #12
 1708 004c BD46     		mov	sp, r7
 1709 004e 80BC     		pop	{r7}
 1710 0050 7047     		bx	lr
 1711              		.cfi_endproc
 1712              	.LFE138:
 1714 0052 00BF     		.section	.text.RCC_AHB1PeriphResetCmd,"ax",%progbits
 1715              		.align	2
 1716              		.global	RCC_AHB1PeriphResetCmd
 1717              		.thumb
 1718              		.thumb_func
 1720              	RCC_AHB1PeriphResetCmd:
 1721              	.LFB139:
1252:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1253:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1254:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB1 peripheral reset.
1255:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB1Periph: specifies the AHB1 peripheral to reset.
1256:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1257:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:   GPIOA clock
1258:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:   GPIOB clock 
1259:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:   GPIOC clock
1260:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:   GPIOD clock
1261:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:   GPIOE clock
1262:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:   GPIOF clock
1263:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1264:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:   GPIOG clock
1265:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:   GPIOI clock
1266:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:     CRC clock
1267:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:    DMA1 clock
1268:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:    DMA2 clock
1269:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC: Ethernet MAC clock
1270:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:  USB OTG HS clock
1271:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *                  
1272:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1273:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1274:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1275:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1276:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphResetCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1277:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1722              		.loc 1 1277 0
 1723              		.cfi_startproc
 1724              		@ args = 0, pretend = 0, frame = 8
 1725              		@ frame_needed = 1, uses_anonymous_args = 0
 1726              		@ link register save eliminated.
 1727 0000 80B4     		push	{r7}
 1728              	.LCFI85:
 1729              		.cfi_def_cfa_offset 4
 1730              		.cfi_offset 7, -4
 1731 0002 83B0     		sub	sp, sp, #12
 1732              	.LCFI86:
 1733              		.cfi_def_cfa_offset 16
 1734 0004 00AF     		add	r7, sp, #0
 1735              	.LCFI87:
 1736              		.cfi_def_cfa_register 7
 1737 0006 7860     		str	r0, [r7, #4]
 1738 0008 0B46     		mov	r3, r1
 1739 000a FB70     		strb	r3, [r7, #3]
1278:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1279:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_RESET_PERIPH(RCC_AHB1Periph));
1280:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1281:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1282:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1740              		.loc 1 1282 0
 1741 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1742 000e 002B     		cmp	r3, #0
 1743 0010 0CD0     		beq	.L59
1283:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1284:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR |= RCC_AHB1Periph;
 1744              		.loc 1 1284 0
 1745 0012 4FF46053 		mov	r3, #14336
 1746 0016 C4F20203 		movt	r3, 16386
 1747 001a 4FF46052 		mov	r2, #14336
 1748 001e C4F20202 		movt	r2, 16386
 1749 0022 1169     		ldr	r1, [r2, #16]
 1750 0024 7A68     		ldr	r2, [r7, #4]
 1751 0026 0A43     		orrs	r2, r2, r1
 1752 0028 1A61     		str	r2, [r3, #16]
 1753 002a 0DE0     		b	.L58
 1754              	.L59:
1285:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1286:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1287:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1288:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1RSTR &= ~RCC_AHB1Periph;
 1755              		.loc 1 1288 0
 1756 002c 4FF46053 		mov	r3, #14336
 1757 0030 C4F20203 		movt	r3, 16386
 1758 0034 4FF46052 		mov	r2, #14336
 1759 0038 C4F20202 		movt	r2, 16386
 1760 003c 1169     		ldr	r1, [r2, #16]
 1761 003e 7A68     		ldr	r2, [r7, #4]
 1762 0040 6FEA0202 		mvn	r2, r2
 1763 0044 0A40     		ands	r2, r2, r1
 1764 0046 1A61     		str	r2, [r3, #16]
 1765              	.L58:
1289:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1290:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1766              		.loc 1 1290 0
 1767 0048 07F10C07 		add	r7, r7, #12
 1768 004c BD46     		mov	sp, r7
 1769 004e 80BC     		pop	{r7}
 1770 0050 7047     		bx	lr
 1771              		.cfi_endproc
 1772              	.LFE139:
 1774 0052 00BF     		.section	.text.RCC_AHB2PeriphResetCmd,"ax",%progbits
 1775              		.align	2
 1776              		.global	RCC_AHB2PeriphResetCmd
 1777              		.thumb
 1778              		.thumb_func
 1780              	RCC_AHB2PeriphResetCmd:
 1781              	.LFB140:
1291:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1292:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1293:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB2 peripheral reset.
1294:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB2Periph: specifies the AHB2 peripheral to reset.
1295:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1296:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1297:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1298:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1299:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1300:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock
1301:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1302:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1303:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1304:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1305:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphResetCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1306:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1782              		.loc 1 1306 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 8
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 1787 0000 80B4     		push	{r7}
 1788              	.LCFI88:
 1789              		.cfi_def_cfa_offset 4
 1790              		.cfi_offset 7, -4
 1791 0002 83B0     		sub	sp, sp, #12
 1792              	.LCFI89:
 1793              		.cfi_def_cfa_offset 16
 1794 0004 00AF     		add	r7, sp, #0
 1795              	.LCFI90:
 1796              		.cfi_def_cfa_register 7
 1797 0006 7860     		str	r0, [r7, #4]
 1798 0008 0B46     		mov	r3, r1
 1799 000a FB70     		strb	r3, [r7, #3]
1307:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1308:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1309:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1310:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1311:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1800              		.loc 1 1311 0
 1801 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1802 000e 002B     		cmp	r3, #0
 1803 0010 0CD0     		beq	.L62
1312:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1313:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR |= RCC_AHB2Periph;
 1804              		.loc 1 1313 0
 1805 0012 4FF46053 		mov	r3, #14336
 1806 0016 C4F20203 		movt	r3, 16386
 1807 001a 4FF46052 		mov	r2, #14336
 1808 001e C4F20202 		movt	r2, 16386
 1809 0022 5169     		ldr	r1, [r2, #20]
 1810 0024 7A68     		ldr	r2, [r7, #4]
 1811 0026 0A43     		orrs	r2, r2, r1
 1812 0028 5A61     		str	r2, [r3, #20]
 1813 002a 0DE0     		b	.L61
 1814              	.L62:
1314:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1315:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1316:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1317:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2RSTR &= ~RCC_AHB2Periph;
 1815              		.loc 1 1317 0
 1816 002c 4FF46053 		mov	r3, #14336
 1817 0030 C4F20203 		movt	r3, 16386
 1818 0034 4FF46052 		mov	r2, #14336
 1819 0038 C4F20202 		movt	r2, 16386
 1820 003c 5169     		ldr	r1, [r2, #20]
 1821 003e 7A68     		ldr	r2, [r7, #4]
 1822 0040 6FEA0202 		mvn	r2, r2
 1823 0044 0A40     		ands	r2, r2, r1
 1824 0046 5A61     		str	r2, [r3, #20]
 1825              	.L61:
1318:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1319:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1826              		.loc 1 1319 0
 1827 0048 07F10C07 		add	r7, r7, #12
 1828 004c BD46     		mov	sp, r7
 1829 004e 80BC     		pop	{r7}
 1830 0050 7047     		bx	lr
 1831              		.cfi_endproc
 1832              	.LFE140:
 1834 0052 00BF     		.section	.text.RCC_AHB3PeriphResetCmd,"ax",%progbits
 1835              		.align	2
 1836              		.global	RCC_AHB3PeriphResetCmd
 1837              		.thumb
 1838              		.thumb_func
 1840              	RCC_AHB3PeriphResetCmd:
 1841              	.LFB141:
1320:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1321:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1322:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases AHB3 peripheral reset.
1323:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHB3Periph: specifies the AHB3 peripheral to reset.
1324:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1325:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1326:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1327:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1328:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1329:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphResetCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1330:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1842              		.loc 1 1330 0
 1843              		.cfi_startproc
 1844              		@ args = 0, pretend = 0, frame = 8
 1845              		@ frame_needed = 1, uses_anonymous_args = 0
 1846              		@ link register save eliminated.
 1847 0000 80B4     		push	{r7}
 1848              	.LCFI91:
 1849              		.cfi_def_cfa_offset 4
 1850              		.cfi_offset 7, -4
 1851 0002 83B0     		sub	sp, sp, #12
 1852              	.LCFI92:
 1853              		.cfi_def_cfa_offset 16
 1854 0004 00AF     		add	r7, sp, #0
 1855              	.LCFI93:
 1856              		.cfi_def_cfa_register 7
 1857 0006 7860     		str	r0, [r7, #4]
 1858 0008 0B46     		mov	r3, r1
 1859 000a FB70     		strb	r3, [r7, #3]
1331:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1332:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1333:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1334:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1335:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1860              		.loc 1 1335 0
 1861 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1862 000e 002B     		cmp	r3, #0
 1863 0010 0CD0     		beq	.L65
1336:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1337:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR |= RCC_AHB3Periph;
 1864              		.loc 1 1337 0
 1865 0012 4FF46053 		mov	r3, #14336
 1866 0016 C4F20203 		movt	r3, 16386
 1867 001a 4FF46052 		mov	r2, #14336
 1868 001e C4F20202 		movt	r2, 16386
 1869 0022 9169     		ldr	r1, [r2, #24]
 1870 0024 7A68     		ldr	r2, [r7, #4]
 1871 0026 0A43     		orrs	r2, r2, r1
 1872 0028 9A61     		str	r2, [r3, #24]
 1873 002a 0DE0     		b	.L64
 1874              	.L65:
1338:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1339:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1340:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1341:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3RSTR &= ~RCC_AHB3Periph;
 1875              		.loc 1 1341 0
 1876 002c 4FF46053 		mov	r3, #14336
 1877 0030 C4F20203 		movt	r3, 16386
 1878 0034 4FF46052 		mov	r2, #14336
 1879 0038 C4F20202 		movt	r2, 16386
 1880 003c 9169     		ldr	r1, [r2, #24]
 1881 003e 7A68     		ldr	r2, [r7, #4]
 1882 0040 6FEA0202 		mvn	r2, r2
 1883 0044 0A40     		ands	r2, r2, r1
 1884 0046 9A61     		str	r2, [r3, #24]
 1885              	.L64:
1342:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1343:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1886              		.loc 1 1343 0
 1887 0048 07F10C07 		add	r7, r7, #12
 1888 004c BD46     		mov	sp, r7
 1889 004e 80BC     		pop	{r7}
 1890 0050 7047     		bx	lr
 1891              		.cfi_endproc
 1892              	.LFE141:
 1894 0052 00BF     		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 1895              		.align	2
 1896              		.global	RCC_APB1PeriphResetCmd
 1897              		.thumb
 1898              		.thumb_func
 1900              	RCC_APB1PeriphResetCmd:
 1901              	.LFB142:
1344:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1345:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1346:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1347:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1348:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1349:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1350:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1351:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1352:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1353:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1354:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1355:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1356:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1357:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1358:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1359:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1360:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1361:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1362:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1363:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1364:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1365:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1366:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1367:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1368:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1369:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1370:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1371:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1372:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1373:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1374:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1375:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1376:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1377:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1902              		.loc 1 1377 0
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 8
 1905              		@ frame_needed = 1, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
 1907 0000 80B4     		push	{r7}
 1908              	.LCFI94:
 1909              		.cfi_def_cfa_offset 4
 1910              		.cfi_offset 7, -4
 1911 0002 83B0     		sub	sp, sp, #12
 1912              	.LCFI95:
 1913              		.cfi_def_cfa_offset 16
 1914 0004 00AF     		add	r7, sp, #0
 1915              	.LCFI96:
 1916              		.cfi_def_cfa_register 7
 1917 0006 7860     		str	r0, [r7, #4]
 1918 0008 0B46     		mov	r3, r1
 1919 000a FB70     		strb	r3, [r7, #3]
1378:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1379:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1380:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1381:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1920              		.loc 1 1381 0
 1921 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1922 000e 002B     		cmp	r3, #0
 1923 0010 0CD0     		beq	.L68
1382:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1383:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1924              		.loc 1 1383 0
 1925 0012 4FF46053 		mov	r3, #14336
 1926 0016 C4F20203 		movt	r3, 16386
 1927 001a 4FF46052 		mov	r2, #14336
 1928 001e C4F20202 		movt	r2, 16386
 1929 0022 116A     		ldr	r1, [r2, #32]
 1930 0024 7A68     		ldr	r2, [r7, #4]
 1931 0026 0A43     		orrs	r2, r2, r1
 1932 0028 1A62     		str	r2, [r3, #32]
 1933 002a 0DE0     		b	.L67
 1934              	.L68:
1384:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1385:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1386:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1387:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 1935              		.loc 1 1387 0
 1936 002c 4FF46053 		mov	r3, #14336
 1937 0030 C4F20203 		movt	r3, 16386
 1938 0034 4FF46052 		mov	r2, #14336
 1939 0038 C4F20202 		movt	r2, 16386
 1940 003c 116A     		ldr	r1, [r2, #32]
 1941 003e 7A68     		ldr	r2, [r7, #4]
 1942 0040 6FEA0202 		mvn	r2, r2
 1943 0044 0A40     		ands	r2, r2, r1
 1944 0046 1A62     		str	r2, [r3, #32]
 1945              	.L67:
1388:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1389:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 1946              		.loc 1 1389 0
 1947 0048 07F10C07 		add	r7, r7, #12
 1948 004c BD46     		mov	sp, r7
 1949 004e 80BC     		pop	{r7}
 1950 0050 7047     		bx	lr
 1951              		.cfi_endproc
 1952              	.LFE142:
 1954 0052 00BF     		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 1955              		.align	2
 1956              		.global	RCC_APB2PeriphResetCmd
 1957              		.thumb
 1958              		.thumb_func
 1960              	RCC_APB2PeriphResetCmd:
 1961              	.LFB143:
1390:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1391:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1392:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1393:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1394:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1395:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1396:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1397:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1398:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1399:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1400:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1401:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1402:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1403:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1404:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1405:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1406:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1407:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1408:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1409:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1410:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1411:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1412:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1413:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 1962              		.loc 1 1413 0
 1963              		.cfi_startproc
 1964              		@ args = 0, pretend = 0, frame = 8
 1965              		@ frame_needed = 1, uses_anonymous_args = 0
 1966              		@ link register save eliminated.
 1967 0000 80B4     		push	{r7}
 1968              	.LCFI97:
 1969              		.cfi_def_cfa_offset 4
 1970              		.cfi_offset 7, -4
 1971 0002 83B0     		sub	sp, sp, #12
 1972              	.LCFI98:
 1973              		.cfi_def_cfa_offset 16
 1974 0004 00AF     		add	r7, sp, #0
 1975              	.LCFI99:
 1976              		.cfi_def_cfa_register 7
 1977 0006 7860     		str	r0, [r7, #4]
 1978 0008 0B46     		mov	r3, r1
 1979 000a FB70     		strb	r3, [r7, #3]
1414:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1415:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_RESET_PERIPH(RCC_APB2Periph));
1416:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1417:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 1980              		.loc 1 1417 0
 1981 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1982 000e 002B     		cmp	r3, #0
 1983 0010 0CD0     		beq	.L71
1418:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1419:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1984              		.loc 1 1419 0
 1985 0012 4FF46053 		mov	r3, #14336
 1986 0016 C4F20203 		movt	r3, 16386
 1987 001a 4FF46052 		mov	r2, #14336
 1988 001e C4F20202 		movt	r2, 16386
 1989 0022 516A     		ldr	r1, [r2, #36]
 1990 0024 7A68     		ldr	r2, [r7, #4]
 1991 0026 0A43     		orrs	r2, r2, r1
 1992 0028 5A62     		str	r2, [r3, #36]
 1993 002a 0DE0     		b	.L70
 1994              	.L71:
1420:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1421:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1422:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1423:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 1995              		.loc 1 1423 0
 1996 002c 4FF46053 		mov	r3, #14336
 1997 0030 C4F20203 		movt	r3, 16386
 1998 0034 4FF46052 		mov	r2, #14336
 1999 0038 C4F20202 		movt	r2, 16386
 2000 003c 516A     		ldr	r1, [r2, #36]
 2001 003e 7A68     		ldr	r2, [r7, #4]
 2002 0040 6FEA0202 		mvn	r2, r2
 2003 0044 0A40     		ands	r2, r2, r1
 2004 0046 5A62     		str	r2, [r3, #36]
 2005              	.L70:
1424:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1425:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2006              		.loc 1 1425 0
 2007 0048 07F10C07 		add	r7, r7, #12
 2008 004c BD46     		mov	sp, r7
 2009 004e 80BC     		pop	{r7}
 2010 0050 7047     		bx	lr
 2011              		.cfi_endproc
 2012              	.LFE143:
 2014 0052 00BF     		.section	.text.RCC_AHB1PeriphClockLPModeCmd,"ax",%progbits
 2015              		.align	2
 2016              		.global	RCC_AHB1PeriphClockLPModeCmd
 2017              		.thumb
 2018              		.thumb_func
 2020              	RCC_AHB1PeriphClockLPModeCmd:
 2021              	.LFB144:
1426:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1427:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1428:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB1 peripheral clock during Low Power (Sleep) mode.
1429:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1430:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1431:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1432:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1433:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB1 peripheral to gates its clock.
1434:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1435:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOA:       GPIOA clock
1436:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOB:       GPIOB clock 
1437:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOC:       GPIOC clock
1438:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOD:       GPIOD clock
1439:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOE:       GPIOE clock
1440:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOF:       GPIOF clock
1441:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1442:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOG:       GPIOG clock
1443:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_GPIOI:       GPIOI clock
1444:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_CRC:         CRC clock
1445:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_BKPSRAM:     BKPSRAM interface clock
1446:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA1:        DMA1 clock
1447:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_DMA2:        DMA2 clock
1448:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC:     Ethernet MAC clock
1449:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Tx:  Ethernet Transmission clock
1450:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_Rx:  Ethernet Reception clock
1451:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_ETH_MAC_PTP: Ethernet PTP clock
1452:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS:      USB OTG HS clock
1453:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB1Periph_OTG_HS_ULPI: USB OTG HS ULPI clock
1454:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1455:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1456:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1457:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1458:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB1PeriphClockLPModeCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
1459:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2022              		.loc 1 1459 0
 2023              		.cfi_startproc
 2024              		@ args = 0, pretend = 0, frame = 8
 2025              		@ frame_needed = 1, uses_anonymous_args = 0
 2026              		@ link register save eliminated.
 2027 0000 80B4     		push	{r7}
 2028              	.LCFI100:
 2029              		.cfi_def_cfa_offset 4
 2030              		.cfi_offset 7, -4
 2031 0002 83B0     		sub	sp, sp, #12
 2032              	.LCFI101:
 2033              		.cfi_def_cfa_offset 16
 2034 0004 00AF     		add	r7, sp, #0
 2035              	.LCFI102:
 2036              		.cfi_def_cfa_register 7
 2037 0006 7860     		str	r0, [r7, #4]
 2038 0008 0B46     		mov	r3, r1
 2039 000a FB70     		strb	r3, [r7, #3]
1460:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1461:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB1_LPMODE_PERIPH(RCC_AHB1Periph));
1462:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1463:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2040              		.loc 1 1463 0
 2041 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2042 000e 002B     		cmp	r3, #0
 2043 0010 0CD0     		beq	.L74
1464:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1465:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR |= RCC_AHB1Periph;
 2044              		.loc 1 1465 0
 2045 0012 4FF46053 		mov	r3, #14336
 2046 0016 C4F20203 		movt	r3, 16386
 2047 001a 4FF46052 		mov	r2, #14336
 2048 001e C4F20202 		movt	r2, 16386
 2049 0022 116D     		ldr	r1, [r2, #80]
 2050 0024 7A68     		ldr	r2, [r7, #4]
 2051 0026 0A43     		orrs	r2, r2, r1
 2052 0028 1A65     		str	r2, [r3, #80]
 2053 002a 0DE0     		b	.L73
 2054              	.L74:
1466:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1467:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1468:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1469:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB1LPENR &= ~RCC_AHB1Periph;
 2055              		.loc 1 1469 0
 2056 002c 4FF46053 		mov	r3, #14336
 2057 0030 C4F20203 		movt	r3, 16386
 2058 0034 4FF46052 		mov	r2, #14336
 2059 0038 C4F20202 		movt	r2, 16386
 2060 003c 116D     		ldr	r1, [r2, #80]
 2061 003e 7A68     		ldr	r2, [r7, #4]
 2062 0040 6FEA0202 		mvn	r2, r2
 2063 0044 0A40     		ands	r2, r2, r1
 2064 0046 1A65     		str	r2, [r3, #80]
 2065              	.L73:
1470:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1471:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2066              		.loc 1 1471 0
 2067 0048 07F10C07 		add	r7, r7, #12
 2068 004c BD46     		mov	sp, r7
 2069 004e 80BC     		pop	{r7}
 2070 0050 7047     		bx	lr
 2071              		.cfi_endproc
 2072              	.LFE144:
 2074 0052 00BF     		.section	.text.RCC_AHB2PeriphClockLPModeCmd,"ax",%progbits
 2075              		.align	2
 2076              		.global	RCC_AHB2PeriphClockLPModeCmd
 2077              		.thumb
 2078              		.thumb_func
 2080              	RCC_AHB2PeriphClockLPModeCmd:
 2081              	.LFB145:
1472:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1473:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1474:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB2 peripheral clock during Low Power (Sleep) mode.
1475:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1476:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *           power consumption.
1477:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1478:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1479:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB2 peripheral to gates its clock.
1480:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1481:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_DCMI:   DCMI clock
1482:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_CRYP:   CRYP clock
1483:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_HASH:   HASH clock
1484:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_RNG:    RNG clock
1485:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_AHB2Periph_OTG_FS: USB OTG FS clock  
1486:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1487:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1488:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1489:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1490:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB2PeriphClockLPModeCmd(uint32_t RCC_AHB2Periph, FunctionalState NewState)
1491:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2082              		.loc 1 1491 0
 2083              		.cfi_startproc
 2084              		@ args = 0, pretend = 0, frame = 8
 2085              		@ frame_needed = 1, uses_anonymous_args = 0
 2086              		@ link register save eliminated.
 2087 0000 80B4     		push	{r7}
 2088              	.LCFI103:
 2089              		.cfi_def_cfa_offset 4
 2090              		.cfi_offset 7, -4
 2091 0002 83B0     		sub	sp, sp, #12
 2092              	.LCFI104:
 2093              		.cfi_def_cfa_offset 16
 2094 0004 00AF     		add	r7, sp, #0
 2095              	.LCFI105:
 2096              		.cfi_def_cfa_register 7
 2097 0006 7860     		str	r0, [r7, #4]
 2098 0008 0B46     		mov	r3, r1
 2099 000a FB70     		strb	r3, [r7, #3]
1492:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1493:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB2_PERIPH(RCC_AHB2Periph));
1494:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1495:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2100              		.loc 1 1495 0
 2101 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2102 000e 002B     		cmp	r3, #0
 2103 0010 0CD0     		beq	.L77
1496:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1497:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR |= RCC_AHB2Periph;
 2104              		.loc 1 1497 0
 2105 0012 4FF46053 		mov	r3, #14336
 2106 0016 C4F20203 		movt	r3, 16386
 2107 001a 4FF46052 		mov	r2, #14336
 2108 001e C4F20202 		movt	r2, 16386
 2109 0022 516D     		ldr	r1, [r2, #84]
 2110 0024 7A68     		ldr	r2, [r7, #4]
 2111 0026 0A43     		orrs	r2, r2, r1
 2112 0028 5A65     		str	r2, [r3, #84]
 2113 002a 0DE0     		b	.L76
 2114              	.L77:
1498:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1499:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1500:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1501:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB2LPENR &= ~RCC_AHB2Periph;
 2115              		.loc 1 1501 0
 2116 002c 4FF46053 		mov	r3, #14336
 2117 0030 C4F20203 		movt	r3, 16386
 2118 0034 4FF46052 		mov	r2, #14336
 2119 0038 C4F20202 		movt	r2, 16386
 2120 003c 516D     		ldr	r1, [r2, #84]
 2121 003e 7A68     		ldr	r2, [r7, #4]
 2122 0040 6FEA0202 		mvn	r2, r2
 2123 0044 0A40     		ands	r2, r2, r1
 2124 0046 5A65     		str	r2, [r3, #84]
 2125              	.L76:
1502:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1503:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2126              		.loc 1 1503 0
 2127 0048 07F10C07 		add	r7, r7, #12
 2128 004c BD46     		mov	sp, r7
 2129 004e 80BC     		pop	{r7}
 2130 0050 7047     		bx	lr
 2131              		.cfi_endproc
 2132              	.LFE145:
 2134 0052 00BF     		.section	.text.RCC_AHB3PeriphClockLPModeCmd,"ax",%progbits
 2135              		.align	2
 2136              		.global	RCC_AHB3PeriphClockLPModeCmd
 2137              		.thumb
 2138              		.thumb_func
 2140              	RCC_AHB3PeriphClockLPModeCmd:
 2141              	.LFB146:
1504:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1505:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1506:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the AHB3 peripheral clock during Low Power (Sleep) mode.
1507:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1508:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1509:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1510:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1511:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB3 peripheral to gates its clock.
1512:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter must be: RCC_AHB3Periph_FSMC
1513:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1514:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1515:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1516:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1517:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_AHB3PeriphClockLPModeCmd(uint32_t RCC_AHB3Periph, FunctionalState NewState)
1518:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2142              		.loc 1 1518 0
 2143              		.cfi_startproc
 2144              		@ args = 0, pretend = 0, frame = 8
 2145              		@ frame_needed = 1, uses_anonymous_args = 0
 2146              		@ link register save eliminated.
 2147 0000 80B4     		push	{r7}
 2148              	.LCFI106:
 2149              		.cfi_def_cfa_offset 4
 2150              		.cfi_offset 7, -4
 2151 0002 83B0     		sub	sp, sp, #12
 2152              	.LCFI107:
 2153              		.cfi_def_cfa_offset 16
 2154 0004 00AF     		add	r7, sp, #0
 2155              	.LCFI108:
 2156              		.cfi_def_cfa_register 7
 2157 0006 7860     		str	r0, [r7, #4]
 2158 0008 0B46     		mov	r3, r1
 2159 000a FB70     		strb	r3, [r7, #3]
1519:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1520:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_AHB3_PERIPH(RCC_AHB3Periph));
1521:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1522:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2160              		.loc 1 1522 0
 2161 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2162 000e 002B     		cmp	r3, #0
 2163 0010 0CD0     		beq	.L80
1523:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1524:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR |= RCC_AHB3Periph;
 2164              		.loc 1 1524 0
 2165 0012 4FF46053 		mov	r3, #14336
 2166 0016 C4F20203 		movt	r3, 16386
 2167 001a 4FF46052 		mov	r2, #14336
 2168 001e C4F20202 		movt	r2, 16386
 2169 0022 916D     		ldr	r1, [r2, #88]
 2170 0024 7A68     		ldr	r2, [r7, #4]
 2171 0026 0A43     		orrs	r2, r2, r1
 2172 0028 9A65     		str	r2, [r3, #88]
 2173 002a 0DE0     		b	.L79
 2174              	.L80:
1525:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1526:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1527:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1528:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->AHB3LPENR &= ~RCC_AHB3Periph;
 2175              		.loc 1 1528 0
 2176 002c 4FF46053 		mov	r3, #14336
 2177 0030 C4F20203 		movt	r3, 16386
 2178 0034 4FF46052 		mov	r2, #14336
 2179 0038 C4F20202 		movt	r2, 16386
 2180 003c 916D     		ldr	r1, [r2, #88]
 2181 003e 7A68     		ldr	r2, [r7, #4]
 2182 0040 6FEA0202 		mvn	r2, r2
 2183 0044 0A40     		ands	r2, r2, r1
 2184 0046 9A65     		str	r2, [r3, #88]
 2185              	.L79:
1529:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1530:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2186              		.loc 1 1530 0
 2187 0048 07F10C07 		add	r7, r7, #12
 2188 004c BD46     		mov	sp, r7
 2189 004e 80BC     		pop	{r7}
 2190 0050 7047     		bx	lr
 2191              		.cfi_endproc
 2192              	.LFE146:
 2194 0052 00BF     		.section	.text.RCC_APB1PeriphClockLPModeCmd,"ax",%progbits
 2195              		.align	2
 2196              		.global	RCC_APB1PeriphClockLPModeCmd
 2197              		.thumb
 2198              		.thumb_func
 2200              	RCC_APB1PeriphClockLPModeCmd:
 2201              	.LFB147:
1531:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1532:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1533:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB1 peripheral clock during Low Power (Sleep) mode.
1534:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1535:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1536:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1537:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1538:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1539:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1540:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM2:   TIM2 clock
1541:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM3:   TIM3 clock
1542:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM4:   TIM4 clock
1543:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM5:   TIM5 clock
1544:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM6:   TIM6 clock
1545:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM7:   TIM7 clock
1546:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM12:  TIM12 clock
1547:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM13:  TIM13 clock
1548:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_TIM14:  TIM14 clock
1549:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_WWDG:   WWDG clock
1550:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI2:   SPI2 clock
1551:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_SPI3:   SPI3 clock
1552:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART2: USART2 clock
1553:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_USART3: USART3 clock
1554:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART4:  UART4 clock
1555:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_UART5:  UART5 clock
1556:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C1:   I2C1 clock
1557:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C2:   I2C2 clock
1558:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_I2C3:   I2C3 clock
1559:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN1:   CAN1 clock
1560:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_CAN2:   CAN2 clock
1561:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_PWR:    PWR clock
1562:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB1Periph_DAC:    DAC clock
1563:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1564:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1565:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1566:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1567:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB1PeriphClockLPModeCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1568:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2202              		.loc 1 1568 0
 2203              		.cfi_startproc
 2204              		@ args = 0, pretend = 0, frame = 8
 2205              		@ frame_needed = 1, uses_anonymous_args = 0
 2206              		@ link register save eliminated.
 2207 0000 80B4     		push	{r7}
 2208              	.LCFI109:
 2209              		.cfi_def_cfa_offset 4
 2210              		.cfi_offset 7, -4
 2211 0002 83B0     		sub	sp, sp, #12
 2212              	.LCFI110:
 2213              		.cfi_def_cfa_offset 16
 2214 0004 00AF     		add	r7, sp, #0
 2215              	.LCFI111:
 2216              		.cfi_def_cfa_register 7
 2217 0006 7860     		str	r0, [r7, #4]
 2218 0008 0B46     		mov	r3, r1
 2219 000a FB70     		strb	r3, [r7, #3]
1569:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1570:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1571:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1572:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2220              		.loc 1 1572 0
 2221 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2222 000e 002B     		cmp	r3, #0
 2223 0010 0CD0     		beq	.L83
1573:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1574:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR |= RCC_APB1Periph;
 2224              		.loc 1 1574 0
 2225 0012 4FF46053 		mov	r3, #14336
 2226 0016 C4F20203 		movt	r3, 16386
 2227 001a 4FF46052 		mov	r2, #14336
 2228 001e C4F20202 		movt	r2, 16386
 2229 0022 116E     		ldr	r1, [r2, #96]
 2230 0024 7A68     		ldr	r2, [r7, #4]
 2231 0026 0A43     		orrs	r2, r2, r1
 2232 0028 1A66     		str	r2, [r3, #96]
 2233 002a 0DE0     		b	.L82
 2234              	.L83:
1575:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1576:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1577:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1578:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB1LPENR &= ~RCC_APB1Periph;
 2235              		.loc 1 1578 0
 2236 002c 4FF46053 		mov	r3, #14336
 2237 0030 C4F20203 		movt	r3, 16386
 2238 0034 4FF46052 		mov	r2, #14336
 2239 0038 C4F20202 		movt	r2, 16386
 2240 003c 116E     		ldr	r1, [r2, #96]
 2241 003e 7A68     		ldr	r2, [r7, #4]
 2242 0040 6FEA0202 		mvn	r2, r2
 2243 0044 0A40     		ands	r2, r2, r1
 2244 0046 1A66     		str	r2, [r3, #96]
 2245              	.L82:
1579:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1580:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2246              		.loc 1 1580 0
 2247 0048 07F10C07 		add	r7, r7, #12
 2248 004c BD46     		mov	sp, r7
 2249 004e 80BC     		pop	{r7}
 2250 0050 7047     		bx	lr
 2251              		.cfi_endproc
 2252              	.LFE147:
 2254 0052 00BF     		.section	.text.RCC_APB2PeriphClockLPModeCmd,"ax",%progbits
 2255              		.align	2
 2256              		.global	RCC_APB2PeriphClockLPModeCmd
 2257              		.thumb
 2258              		.thumb_func
 2260              	RCC_APB2PeriphClockLPModeCmd:
 2261              	.LFB148:
1581:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1582:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1583:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the APB2 peripheral clock during Low Power (Sleep) mode.
1584:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   Peripheral clock gating in SLEEP mode can be used to further reduce
1585:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         power consumption.
1586:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   After wakeup from SLEEP mode, the peripheral clock is enabled again.
1587:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @note   By default, all peripheral clocks are enabled during SLEEP mode.
1588:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1589:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1590:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM1:   TIM1 clock
1591:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM8:   TIM8 clock
1592:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART1: USART1 clock
1593:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_USART6: USART6 clock
1594:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC1:   ADC1 clock
1595:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC2:   ADC2 clock
1596:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_ADC3:   ADC3 clock
1597:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SDIO:   SDIO clock
1598:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SPI1:   SPI1 clock
1599:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_SYSCFG: SYSCFG clock
1600:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM9:   TIM9 clock
1601:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM10:  TIM10 clock
1602:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_APB2Periph_TIM11:  TIM11 clock
1603:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1604:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1605:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1606:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1607:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_APB2PeriphClockLPModeCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1608:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2262              		.loc 1 1608 0
 2263              		.cfi_startproc
 2264              		@ args = 0, pretend = 0, frame = 8
 2265              		@ frame_needed = 1, uses_anonymous_args = 0
 2266              		@ link register save eliminated.
 2267 0000 80B4     		push	{r7}
 2268              	.LCFI112:
 2269              		.cfi_def_cfa_offset 4
 2270              		.cfi_offset 7, -4
 2271 0002 83B0     		sub	sp, sp, #12
 2272              	.LCFI113:
 2273              		.cfi_def_cfa_offset 16
 2274 0004 00AF     		add	r7, sp, #0
 2275              	.LCFI114:
 2276              		.cfi_def_cfa_register 7
 2277 0006 7860     		str	r0, [r7, #4]
 2278 0008 0B46     		mov	r3, r1
 2279 000a FB70     		strb	r3, [r7, #3]
1609:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1610:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1611:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1612:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2280              		.loc 1 1612 0
 2281 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2282 000e 002B     		cmp	r3, #0
 2283 0010 0CD0     		beq	.L86
1613:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1614:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR |= RCC_APB2Periph;
 2284              		.loc 1 1614 0
 2285 0012 4FF46053 		mov	r3, #14336
 2286 0016 C4F20203 		movt	r3, 16386
 2287 001a 4FF46052 		mov	r2, #14336
 2288 001e C4F20202 		movt	r2, 16386
 2289 0022 516E     		ldr	r1, [r2, #100]
 2290 0024 7A68     		ldr	r2, [r7, #4]
 2291 0026 0A43     		orrs	r2, r2, r1
 2292 0028 5A66     		str	r2, [r3, #100]
 2293 002a 0DE0     		b	.L85
 2294              	.L86:
1615:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1616:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1617:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1618:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     RCC->APB2LPENR &= ~RCC_APB2Periph;
 2295              		.loc 1 1618 0
 2296 002c 4FF46053 		mov	r3, #14336
 2297 0030 C4F20203 		movt	r3, 16386
 2298 0034 4FF46052 		mov	r2, #14336
 2299 0038 C4F20202 		movt	r2, 16386
 2300 003c 516E     		ldr	r1, [r2, #100]
 2301 003e 7A68     		ldr	r2, [r7, #4]
 2302 0040 6FEA0202 		mvn	r2, r2
 2303 0044 0A40     		ands	r2, r2, r1
 2304 0046 5A66     		str	r2, [r3, #100]
 2305              	.L85:
1619:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1620:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2306              		.loc 1 1620 0
 2307 0048 07F10C07 		add	r7, r7, #12
 2308 004c BD46     		mov	sp, r7
 2309 004e 80BC     		pop	{r7}
 2310 0050 7047     		bx	lr
 2311              		.cfi_endproc
 2312              	.LFE148:
 2314 0052 00BF     		.section	.text.RCC_ITConfig,"ax",%progbits
 2315              		.align	2
 2316              		.global	RCC_ITConfig
 2317              		.thumb
 2318              		.thumb_func
 2320              	RCC_ITConfig:
 2321              	.LFB149:
1621:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1622:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1623:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @}
1624:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1625:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1626:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /** @defgroup RCC_Group4 Interrupts and flags management functions
1627:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *  @brief   Interrupts and flags management functions 
1628:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  *
1629:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @verbatim   
1630:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================
1631:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****                    Interrupts and flags management functions
1632:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****  ===============================================================================  
1633:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1634:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** @endverbatim
1635:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @{
1636:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1637:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1638:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1639:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
1640:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
1641:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1642:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1643:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1644:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1645:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1646:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1647:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1648:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
1649:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be: ENABLE or DISABLE.
1650:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1651:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1652:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
1653:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2322              		.loc 1 1653 0
 2323              		.cfi_startproc
 2324              		@ args = 0, pretend = 0, frame = 8
 2325              		@ frame_needed = 1, uses_anonymous_args = 0
 2326              		@ link register save eliminated.
 2327 0000 80B4     		push	{r7}
 2328              	.LCFI115:
 2329              		.cfi_def_cfa_offset 4
 2330              		.cfi_offset 7, -4
 2331 0002 83B0     		sub	sp, sp, #12
 2332              	.LCFI116:
 2333              		.cfi_def_cfa_offset 16
 2334 0004 00AF     		add	r7, sp, #0
 2335              	.LCFI117:
 2336              		.cfi_def_cfa_register 7
 2337 0006 0246     		mov	r2, r0
 2338 0008 0B46     		mov	r3, r1
 2339 000a FA71     		strb	r2, [r7, #7]
 2340 000c BB71     		strb	r3, [r7, #6]
1654:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1655:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
1656:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1657:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (NewState != DISABLE)
 2341              		.loc 1 1657 0
 2342 000e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2343 0010 002B     		cmp	r3, #0
 2344 0012 0ED0     		beq	.L89
1658:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1659:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to enable the selected interrupts */
1660:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 2345              		.loc 1 1660 0
 2346 0014 43F60D03 		movw	r3, #14349
 2347 0018 C4F20203 		movt	r3, 16386
 2348 001c 43F60D02 		movw	r2, #14349
 2349 0020 C4F20202 		movt	r2, 16386
 2350 0024 1278     		ldrb	r2, [r2, #0]
 2351 0026 D1B2     		uxtb	r1, r2
 2352 0028 FA79     		ldrb	r2, [r7, #7]
 2353 002a 0A43     		orrs	r2, r2, r1
 2354 002c D2B2     		uxtb	r2, r2
 2355 002e 1A70     		strb	r2, [r3, #0]
 2356 0030 10E0     		b	.L88
 2357              	.L89:
1661:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1662:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1663:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1664:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     /* Perform Byte access to RCC_CIR[14:8] bits to disable the selected interrupts */
1665:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 2358              		.loc 1 1665 0
 2359 0032 43F60D03 		movw	r3, #14349
 2360 0036 C4F20203 		movt	r3, 16386
 2361 003a 43F60D02 		movw	r2, #14349
 2362 003e C4F20202 		movt	r2, 16386
 2363 0042 1278     		ldrb	r2, [r2, #0]
 2364 0044 D1B2     		uxtb	r1, r2
 2365 0046 FA79     		ldrb	r2, [r7, #7]
 2366 0048 6FEA0202 		mvn	r2, r2
 2367 004c D2B2     		uxtb	r2, r2
 2368 004e 0A40     		ands	r2, r2, r1
 2369 0050 D2B2     		uxtb	r2, r2
 2370 0052 1A70     		strb	r2, [r3, #0]
 2371              	.L88:
1666:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1667:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2372              		.loc 1 1667 0
 2373 0054 07F10C07 		add	r7, r7, #12
 2374 0058 BD46     		mov	sp, r7
 2375 005a 80BC     		pop	{r7}
 2376 005c 7047     		bx	lr
 2377              		.cfi_endproc
 2378              	.LFE149:
 2380 005e 00BF     		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2381              		.align	2
 2382              		.global	RCC_GetFlagStatus
 2383              		.thumb
 2384              		.thumb_func
 2386              	RCC_GetFlagStatus:
 2387              	.LFB150:
1668:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1669:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1670:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1671:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1672:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1673:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1674:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1675:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLRDY: main PLL clock ready
1676:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PLLI2SRDY: PLLI2S clock ready
1677:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1678:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1679:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_BORRST: POR/PDR or BOR reset
1680:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PINRST: Pin reset
1681:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_PORRST: POR/PDR reset
1682:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_SFTRST: Software reset
1683:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1684:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1685:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_FLAG_LPWRRST: Low Power reset
1686:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1687:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1688:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1689:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2388              		.loc 1 1689 0
 2389              		.cfi_startproc
 2390              		@ args = 0, pretend = 0, frame = 24
 2391              		@ frame_needed = 1, uses_anonymous_args = 0
 2392              		@ link register save eliminated.
 2393 0000 80B4     		push	{r7}
 2394              	.LCFI118:
 2395              		.cfi_def_cfa_offset 4
 2396              		.cfi_offset 7, -4
 2397 0002 87B0     		sub	sp, sp, #28
 2398              	.LCFI119:
 2399              		.cfi_def_cfa_offset 32
 2400 0004 00AF     		add	r7, sp, #0
 2401              	.LCFI120:
 2402              		.cfi_def_cfa_register 7
 2403 0006 0346     		mov	r3, r0
 2404 0008 FB71     		strb	r3, [r7, #7]
1690:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t tmp = 0;
 2405              		.loc 1 1690 0
 2406 000a 4FF00003 		mov	r3, #0
 2407 000e FB60     		str	r3, [r7, #12]
1691:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   uint32_t statusreg = 0;
 2408              		.loc 1 1691 0
 2409 0010 4FF00003 		mov	r3, #0
 2410 0014 7B61     		str	r3, [r7, #20]
1692:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   FlagStatus bitstatus = RESET;
 2411              		.loc 1 1692 0
 2412 0016 4FF00003 		mov	r3, #0
 2413 001a FB74     		strb	r3, [r7, #19]
1693:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1694:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1695:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1696:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1697:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the RCC register index */
1698:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG >> 5;
 2414              		.loc 1 1698 0
 2415 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2416 001e 4FEA5313 		lsr	r3, r3, #5
 2417 0022 DBB2     		uxtb	r3, r3
 2418 0024 FB60     		str	r3, [r7, #12]
1699:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2419              		.loc 1 1699 0
 2420 0026 FB68     		ldr	r3, [r7, #12]
 2421 0028 012B     		cmp	r3, #1
 2422 002a 06D1     		bne	.L92
1700:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1701:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CR;
 2423              		.loc 1 1701 0
 2424 002c 4FF46053 		mov	r3, #14336
 2425 0030 C4F20203 		movt	r3, 16386
 2426 0034 1B68     		ldr	r3, [r3, #0]
 2427 0036 7B61     		str	r3, [r7, #20]
 2428 0038 0FE0     		b	.L93
 2429              	.L92:
1702:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1703:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2430              		.loc 1 1703 0
 2431 003a FB68     		ldr	r3, [r7, #12]
 2432 003c 022B     		cmp	r3, #2
 2433 003e 06D1     		bne	.L94
1704:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1705:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->BDCR;
 2434              		.loc 1 1705 0
 2435 0040 4FF46053 		mov	r3, #14336
 2436 0044 C4F20203 		movt	r3, 16386
 2437 0048 1B6F     		ldr	r3, [r3, #112]
 2438 004a 7B61     		str	r3, [r7, #20]
 2439 004c 05E0     		b	.L93
 2440              	.L94:
1706:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1707:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else                       /* The flag to check is in CSR register */
1708:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1709:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     statusreg = RCC->CSR;
 2441              		.loc 1 1709 0
 2442 004e 4FF46053 		mov	r3, #14336
 2443 0052 C4F20203 		movt	r3, 16386
 2444 0056 5B6F     		ldr	r3, [r3, #116]
 2445 0058 7B61     		str	r3, [r7, #20]
 2446              	.L93:
1710:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1711:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1712:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Get the flag position */
1713:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   tmp = RCC_FLAG & FLAG_MASK;
 2447              		.loc 1 1713 0
 2448 005a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2449 005c 03F01F03 		and	r3, r3, #31
 2450 0060 FB60     		str	r3, [r7, #12]
1714:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2451              		.loc 1 1714 0
 2452 0062 FB68     		ldr	r3, [r7, #12]
 2453 0064 7A69     		ldr	r2, [r7, #20]
 2454 0066 22FA03F3 		lsr	r3, r2, r3
 2455 006a 03F00103 		and	r3, r3, #1
 2456 006e DBB2     		uxtb	r3, r3
 2457 0070 002B     		cmp	r3, #0
 2458 0072 03D0     		beq	.L95
1715:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1716:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2459              		.loc 1 1716 0
 2460 0074 4FF00103 		mov	r3, #1
 2461 0078 FB74     		strb	r3, [r7, #19]
 2462 007a 02E0     		b	.L96
 2463              	.L95:
1717:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1718:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1719:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1720:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2464              		.loc 1 1720 0
 2465 007c 4FF00003 		mov	r3, #0
 2466 0080 FB74     		strb	r3, [r7, #19]
 2467              	.L96:
1721:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1722:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the flag status */
1723:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return bitstatus;
 2468              		.loc 1 1723 0
 2469 0082 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1724:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2470              		.loc 1 1724 0
 2471 0084 1846     		mov	r0, r3
 2472 0086 07F11C07 		add	r7, r7, #28
 2473 008a BD46     		mov	sp, r7
 2474 008c 80BC     		pop	{r7}
 2475 008e 7047     		bx	lr
 2476              		.cfi_endproc
 2477              	.LFE150:
 2479              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2480              		.align	2
 2481              		.global	RCC_ClearFlag
 2482              		.thumb
 2483              		.thumb_func
 2485              	RCC_ClearFlag:
 2486              	.LFB151:
1725:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1726:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1727:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC reset flags.
1728:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST,  RCC_FLAG_SFTRST,
1729:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *         RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1730:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  None
1731:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1732:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1733:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearFlag(void)
1734:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2487              		.loc 1 1734 0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 0
 2490              		@ frame_needed = 1, uses_anonymous_args = 0
 2491              		@ link register save eliminated.
 2492 0000 80B4     		push	{r7}
 2493              	.LCFI121:
 2494              		.cfi_def_cfa_offset 4
 2495              		.cfi_offset 7, -4
 2496 0002 00AF     		add	r7, sp, #0
 2497              	.LCFI122:
 2498              		.cfi_def_cfa_register 7
1735:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1736:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   RCC->CSR |= RCC_CSR_RMVF;
 2499              		.loc 1 1736 0
 2500 0004 4FF46053 		mov	r3, #14336
 2501 0008 C4F20203 		movt	r3, 16386
 2502 000c 4FF46052 		mov	r2, #14336
 2503 0010 C4F20202 		movt	r2, 16386
 2504 0014 526F     		ldr	r2, [r2, #116]
 2505 0016 42F08072 		orr	r2, r2, #16777216
 2506 001a 5A67     		str	r2, [r3, #116]
1737:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2507              		.loc 1 1737 0
 2508 001c BD46     		mov	sp, r7
 2509 001e 80BC     		pop	{r7}
 2510 0020 7047     		bx	lr
 2511              		.cfi_endproc
 2512              	.LFE151:
 2514 0022 00BF     		.section	.text.RCC_GetITStatus,"ax",%progbits
 2515              		.align	2
 2516              		.global	RCC_GetITStatus
 2517              		.thumb
 2518              		.thumb_func
 2520              	RCC_GetITStatus:
 2521              	.LFB152:
1738:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1739:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1740:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1741:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1742:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be one of the following values:
1743:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1744:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1745:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1746:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1747:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1748:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1749:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1750:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1751:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1752:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1753:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2522              		.loc 1 1753 0
 2523              		.cfi_startproc
 2524              		@ args = 0, pretend = 0, frame = 16
 2525              		@ frame_needed = 1, uses_anonymous_args = 0
 2526              		@ link register save eliminated.
 2527 0000 80B4     		push	{r7}
 2528              	.LCFI123:
 2529              		.cfi_def_cfa_offset 4
 2530              		.cfi_offset 7, -4
 2531 0002 85B0     		sub	sp, sp, #20
 2532              	.LCFI124:
 2533              		.cfi_def_cfa_offset 24
 2534 0004 00AF     		add	r7, sp, #0
 2535              	.LCFI125:
 2536              		.cfi_def_cfa_register 7
 2537 0006 0346     		mov	r3, r0
 2538 0008 FB71     		strb	r3, [r7, #7]
1754:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   ITStatus bitstatus = RESET;
 2539              		.loc 1 1754 0
 2540 000a 4FF00003 		mov	r3, #0
 2541 000e FB73     		strb	r3, [r7, #15]
1755:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1756:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1757:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1758:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1759:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the status of the specified RCC interrupt */
1760:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2542              		.loc 1 1760 0
 2543 0010 4FF46053 		mov	r3, #14336
 2544 0014 C4F20203 		movt	r3, 16386
 2545 0018 DA68     		ldr	r2, [r3, #12]
 2546 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2547 001c 1340     		ands	r3, r3, r2
 2548 001e 002B     		cmp	r3, #0
 2549 0020 03D0     		beq	.L99
1761:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1762:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = SET;
 2550              		.loc 1 1762 0
 2551 0022 4FF00103 		mov	r3, #1
 2552 0026 FB73     		strb	r3, [r7, #15]
 2553 0028 02E0     		b	.L100
 2554              	.L99:
1763:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1764:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   else
1765:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   {
1766:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****     bitstatus = RESET;
 2555              		.loc 1 1766 0
 2556 002a 4FF00003 		mov	r3, #0
 2557 002e FB73     		strb	r3, [r7, #15]
 2558              	.L100:
1767:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   }
1768:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Return the RCC_IT status */
1769:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   return  bitstatus;
 2559              		.loc 1 1769 0
 2560 0030 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1770:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2561              		.loc 1 1770 0
 2562 0032 1846     		mov	r0, r3
 2563 0034 07F11407 		add	r7, r7, #20
 2564 0038 BD46     		mov	sp, r7
 2565 003a 80BC     		pop	{r7}
 2566 003c 7047     		bx	lr
 2567              		.cfi_endproc
 2568              	.LFE152:
 2570 003e 00BF     		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2571              		.align	2
 2572              		.global	RCC_ClearITPendingBit
 2573              		.thumb
 2574              		.thumb_func
 2576              	RCC_ClearITPendingBit:
 2577              	.LFB153:
1771:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1772:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** /**
1773:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1774:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1775:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *          This parameter can be any combination of the following values:
1776:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSIRDY: LSI ready interrupt
1777:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_LSERDY: LSE ready interrupt
1778:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSIRDY: HSI ready interrupt
1779:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_HSERDY: HSE ready interrupt
1780:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLRDY: main PLL ready interrupt
1781:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_PLLI2SRDY: PLLI2S ready interrupt  
1782:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *            @arg RCC_IT_CSS: Clock Security System interrupt
1783:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   * @retval None
1784:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   */
1785:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1786:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** {
 2578              		.loc 1 1786 0
 2579              		.cfi_startproc
 2580              		@ args = 0, pretend = 0, frame = 8
 2581              		@ frame_needed = 1, uses_anonymous_args = 0
 2582              		@ link register save eliminated.
 2583 0000 80B4     		push	{r7}
 2584              	.LCFI126:
 2585              		.cfi_def_cfa_offset 4
 2586              		.cfi_offset 7, -4
 2587 0002 83B0     		sub	sp, sp, #12
 2588              	.LCFI127:
 2589              		.cfi_def_cfa_offset 16
 2590 0004 00AF     		add	r7, sp, #0
 2591              	.LCFI128:
 2592              		.cfi_def_cfa_register 7
 2593 0006 0346     		mov	r3, r0
 2594 0008 FB71     		strb	r3, [r7, #7]
1787:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Check the parameters */
1788:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1789:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** 
1790:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1791:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****      pending bits */
1792:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2595              		.loc 1 1792 0
 2596 000a 43F60E03 		movw	r3, #14350
 2597 000e C4F20203 		movt	r3, 16386
 2598 0012 FA79     		ldrb	r2, [r7, #7]
 2599 0014 1A70     		strb	r2, [r3, #0]
1793:../Libraries/STM32F4xx_StdPeriph_Driver/src/stm32f4xx_rcc.c **** }
 2600              		.loc 1 1793 0
 2601 0016 07F10C07 		add	r7, r7, #12
 2602 001a BD46     		mov	sp, r7
 2603 001c 80BC     		pop	{r7}
 2604 001e 7047     		bx	lr
 2605              		.cfi_endproc
 2606              	.LFE153:
 2608              		.text
 2609              	.Letext0:
 2610              		.file 2 "c:\\program files (x86)\\codesourcery\\sourcery_codebench_lite_for_arm_eabi\\bin\\../lib/
 2611              		.file 3 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\eclipse\\STM32F4\\Discovery\\workspace\\b
 2612              		.file 4 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\eclipse\\STM32F4\\Discovery\\workspace\\b
 2613              		.file 5 "C:\\Users\\Anthony.Paterson@opus.co\\Documents\\eclipse\\STM32F4\\Discovery\\workspace\\b
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f4xx_rcc.c
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:19     .data.APBAHBPrescTable:00000000 $d
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:22     .data.APBAHBPrescTable:00000000 APBAHBPrescTable
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:40     .text.RCC_DeInit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:45     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:109    .text.RCC_HSEConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:114    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:152    .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:157    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2386   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:227    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:232    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:283    .text.RCC_HSICmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:288    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:321    .text.RCC_LSEConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:326    .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:391    .text.RCC_LSICmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:396    .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:429    .text.RCC_PLLConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:434    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:484    .text.RCC_PLLCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:489    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:522    .text.RCC_PLLI2SConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:527    .text.RCC_PLLI2SConfig:00000000 RCC_PLLI2SConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:564    .text.RCC_PLLI2SCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:569    .text.RCC_PLLI2SCmd:00000000 RCC_PLLI2SCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:602    .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:607    .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:640    .text.RCC_MCO1Config:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:645    .text.RCC_MCO1Config:00000000 RCC_MCO1Config
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:697    .text.RCC_MCO2Config:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:702    .text.RCC_MCO2Config:00000000 RCC_MCO2Config
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:754    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:759    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:808    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:813    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:843    .text.RCC_HCLKConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:848    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:897    .text.RCC_PCLK1Config:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:902    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:951    .text.RCC_PCLK2Config:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:956    .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1006   .text.RCC_GetClocksFreq:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1011   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1229   .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1234   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1302   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1307   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1340   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1345   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1378   .text.RCC_I2SCLKConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1383   .text.RCC_I2SCLKConfig:00000000 RCC_I2SCLKConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1415   .text.RCC_AHB1PeriphClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1420   .text.RCC_AHB1PeriphClockCmd:00000000 RCC_AHB1PeriphClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1475   .text.RCC_AHB2PeriphClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1480   .text.RCC_AHB2PeriphClockCmd:00000000 RCC_AHB2PeriphClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1535   .text.RCC_AHB3PeriphClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1540   .text.RCC_AHB3PeriphClockCmd:00000000 RCC_AHB3PeriphClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1595   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1600   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1655   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1660   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1715   .text.RCC_AHB1PeriphResetCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1720   .text.RCC_AHB1PeriphResetCmd:00000000 RCC_AHB1PeriphResetCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1775   .text.RCC_AHB2PeriphResetCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1780   .text.RCC_AHB2PeriphResetCmd:00000000 RCC_AHB2PeriphResetCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1835   .text.RCC_AHB3PeriphResetCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1840   .text.RCC_AHB3PeriphResetCmd:00000000 RCC_AHB3PeriphResetCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1895   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1900   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1955   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:1960   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2015   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2020   .text.RCC_AHB1PeriphClockLPModeCmd:00000000 RCC_AHB1PeriphClockLPModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2075   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2080   .text.RCC_AHB2PeriphClockLPModeCmd:00000000 RCC_AHB2PeriphClockLPModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2135   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2140   .text.RCC_AHB3PeriphClockLPModeCmd:00000000 RCC_AHB3PeriphClockLPModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2195   .text.RCC_APB1PeriphClockLPModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2200   .text.RCC_APB1PeriphClockLPModeCmd:00000000 RCC_APB1PeriphClockLPModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2255   .text.RCC_APB2PeriphClockLPModeCmd:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2260   .text.RCC_APB2PeriphClockLPModeCmd:00000000 RCC_APB2PeriphClockLPModeCmd
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2315   .text.RCC_ITConfig:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2320   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2381   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2480   .text.RCC_ClearFlag:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2485   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2515   .text.RCC_GetITStatus:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2520   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2571   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\ANTHON~1.CO\AppData\Local\Temp\ccMjmfAL.s:2576   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
